
FreqCount_CtrTech1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f34  08003f34  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f34  08003f34  00013f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f3c  08003f3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f3c  08003f3c  00013f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d8c  20000070  08003fb4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dfc  08003fb4  00020dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e693  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000203e  00000000  00000000  0002e733  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d48  00000000  00000000  00030778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  000314c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022968  00000000  00000000  00032100  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a98e  00000000  00000000  00054a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d17fd  00000000  00000000  0005f3f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00130bf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a6c  00000000  00000000  00130c70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003eb0 	.word	0x08003eb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003eb0 	.word	0x08003eb0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <freqtobit>:
uint16_t buffLoadCount = 0;
bool first = false;
uint32_t period;


int freqtobit(uint32_t inputPeriod){
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / period;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <freqtobit+0x54>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <freqtobit+0x58>)
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	60fb      	str	r3, [r7, #12]
	//return freq;
	if( (HIGHFREQ-FREQDEV < freq) && (freq < HIGHFREQ+FREQDEV) )
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f640 0266 	movw	r2, #2150	; 0x866
 80005da:	4293      	cmp	r3, r2
 80005dc:	dd06      	ble.n	80005ec <freqtobit+0x2c>
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f640 02c9 	movw	r2, #2249	; 0x8c9
 80005e4:	4293      	cmp	r3, r2
 80005e6:	dc01      	bgt.n	80005ec <freqtobit+0x2c>
		return 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e00d      	b.n	8000608 <freqtobit+0x48>
	if( (LOWFREQ-FREQDEV < freq) && (freq < LOWFREQ+FREQDEV) )
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f240 427e 	movw	r2, #1150	; 0x47e
 80005f2:	4293      	cmp	r3, r2
 80005f4:	dd06      	ble.n	8000604 <freqtobit+0x44>
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80005fc:	4293      	cmp	r3, r2
 80005fe:	dc01      	bgt.n	8000604 <freqtobit+0x44>
		return 0;
 8000600:	2300      	movs	r3, #0
 8000602:	e001      	b.n	8000608 <freqtobit+0x48>
	else
		return -1;
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	20000d30 	.word	0x20000d30
 8000618:	000f4240 	.word	0x000f4240

0800061c <FreqCounterPinEXTI>:

void FreqCounterPinEXTI(){
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
	if(!first){
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <FreqCounterPinEXTI+0x3c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	f083 0301 	eor.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <FreqCounterPinEXTI+0x22>
		htim2.Instance->CNT = 0;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <FreqCounterPinEXTI+0x40>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
		first = true;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <FreqCounterPinEXTI+0x3c>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
	}
	else {
		period = htim2.Instance->CNT;
		first = false;
	}
}
 800063c:	e007      	b.n	800064e <FreqCounterPinEXTI+0x32>
		period = htim2.Instance->CNT;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <FreqCounterPinEXTI+0x40>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <FreqCounterPinEXTI+0x44>)
 8000646:	6013      	str	r3, [r2, #0]
		first = false;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <FreqCounterPinEXTI+0x3c>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	2000008e 	.word	0x2000008e
 800065c:	20000d34 	.word	0x20000d34
 8000660:	20000d30 	.word	0x20000d30

08000664 <Tim3IT>:

void Tim3IT(){
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
	periodBuffer[buffLoadCount] = period;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <Tim3IT+0x38>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <Tim3IT+0x3c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <Tim3IT+0x40>)
 8000674:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffLoadCount++;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <Tim3IT+0x38>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <Tim3IT+0x38>)
 8000682:	801a      	strh	r2, [r3, #0]
	if(buffLoadCount>=BUFFERSIZE)
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <Tim3IT+0x38>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	2b31      	cmp	r3, #49	; 0x31
 800068a:	d902      	bls.n	8000692 <Tim3IT+0x2e>
		buffLoadCount = 0;
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <Tim3IT+0x38>)
 800068e:	2200      	movs	r2, #0
 8000690:	801a      	strh	r2, [r3, #0]
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	20000d30 	.word	0x20000d30
 80006a4:	20000c54 	.word	0x20000c54

080006a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006ae:	f000 fbcb 	bl	8000e48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006b2:	f000 f83d 	bl	8000730 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006b6:	f000 f997 	bl	80009e8 <MX_GPIO_Init>
	MX_TIM2_Init();
 80006ba:	f000 f8d1 	bl	8000860 <MX_TIM2_Init>
	MX_TIM3_Init();
 80006be:	f000 f91b 	bl	80008f8 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80006c2:	f000 f967 	bl	8000994 <MX_USART2_UART_Init>
	MX_DAC_Init();
 80006c6:	f000 f8a1 	bl	800080c <MX_DAC_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 80006ca:	4813      	ldr	r0, [pc, #76]	; (8000718 <main+0x70>)
 80006cc:	f001 fcd3 	bl	8002076 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 80006d0:	4812      	ldr	r0, [pc, #72]	; (800071c <main+0x74>)
 80006d2:	f001 fcf4 	bl	80020be <HAL_TIM_Base_Start_IT>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		for(int i = 0;i<BUFFERSIZE;i++){
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	e019      	b.n	8000710 <main+0x68>
			sprintf(uartData, "Bit value for index %d = %d\r\n", i, freqtobit(periodBuffer[i]));
 80006dc:	4a10      	ldr	r2, [pc, #64]	; (8000720 <main+0x78>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff6b 	bl	80005c0 <freqtobit>
 80006ea:	4603      	mov	r3, r0
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	490d      	ldr	r1, [pc, #52]	; (8000724 <main+0x7c>)
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <main+0x80>)
 80006f2:	f002 ffd7 	bl	80036a4 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80006f6:	480c      	ldr	r0, [pc, #48]	; (8000728 <main+0x80>)
 80006f8:	f7ff fd8a 	bl	8000210 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	230a      	movs	r3, #10
 8000702:	4909      	ldr	r1, [pc, #36]	; (8000728 <main+0x80>)
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <main+0x84>)
 8000706:	f002 f8fc 	bl	8002902 <HAL_UART_Transmit>
		for(int i = 0;i<BUFFERSIZE;i++){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3301      	adds	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b31      	cmp	r3, #49	; 0x31
 8000714:	dde2      	ble.n	80006dc <main+0x34>
 8000716:	e7de      	b.n	80006d6 <main+0x2e>
 8000718:	20000d34 	.word	0x20000d34
 800071c:	20000db4 	.word	0x20000db4
 8000720:	20000c54 	.word	0x20000c54
 8000724:	08003ec8 	.word	0x08003ec8
 8000728:	2000009c 	.word	0x2000009c
 800072c:	20000d74 	.word	0x20000d74

08000730 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2234      	movs	r2, #52	; 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 ffa8 	bl	8003694 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <SystemClock_Config+0xd4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a29      	ldr	r2, [pc, #164]	; (8000804 <SystemClock_Config+0xd4>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <SystemClock_Config+0xd4>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <SystemClock_Config+0xd8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <SystemClock_Config+0xd8>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <SystemClock_Config+0xd8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000798:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 90;
 80007a8:	235a      	movs	r3, #90	; 0x5a
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 f9d5 	bl	8001b6c <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x9c>
		Error_Handler();
 80007c8:	f000 f988 	bl	8000adc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007dc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2102      	movs	r1, #2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 ff04 	bl	80015f8 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xca>
		Error_Handler();
 80007f6:	f000 f971 	bl	8000adc <Error_Handler>
	}
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	; 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_DAC_Init+0x4c>)
 800081c:	4a0f      	ldr	r2, [pc, #60]	; (800085c <MX_DAC_Init+0x50>)
 800081e:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_DAC_Init+0x4c>)
 8000822:	f000 fc94 	bl	800114e <HAL_DAC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_DAC_Init+0x24>
		Error_Handler();
 800082c:	f000 f956 	bl	8000adc <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000830:	2324      	movs	r3, #36	; 0x24
 8000832:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000838:	463b      	mov	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <MX_DAC_Init+0x4c>)
 8000840:	f000 fca7 	bl	8001192 <HAL_DAC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_DAC_Init+0x42>
		Error_Handler();
 800084a:	f000 f947 	bl	8000adc <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000d1c 	.word	0x20000d1c
 800085c:	40007400 	.word	0x40007400

08000860 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_TIM2_Init+0x94>)
 800087e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000882:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 45 - 1;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_TIM2_Init+0x94>)
 8000886:	222c      	movs	r2, #44	; 0x2c
 8000888:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_TIM2_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_TIM2_Init+0x94>)
 8000892:	f04f 32ff 	mov.w	r2, #4294967295
 8000896:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_TIM2_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80008a4:	4813      	ldr	r0, [pc, #76]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008a6:	f001 fbbb 	bl	8002020 <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0x54>
		Error_Handler();
 80008b0:	f000 f914 	bl	8000adc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008c2:	f001 fd28 	bl	8002316 <HAL_TIM_ConfigClockSource>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x70>
		Error_Handler();
 80008cc:	f000 f906 	bl	8000adc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008de:	f001 ff33 	bl	8002748 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80008e8:	f000 f8f8 	bl	8000adc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000d34 	.word	0x20000d34

080008f8 <MX_TIM3_Init>:
static void MX_TIM3_Init(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_TIM3_Init+0x94>)
 8000916:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <MX_TIM3_Init+0x98>)
 8000918:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 45 - 1;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_TIM3_Init+0x94>)
 800091c:	222c      	movs	r2, #44	; 0x2c
 800091e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_TIM3_Init+0x94>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = BUFFERPERIOD;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_TIM3_Init+0x94>)
 8000928:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800092c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_TIM3_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_TIM3_Init+0x94>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800093a:	4814      	ldr	r0, [pc, #80]	; (800098c <MX_TIM3_Init+0x94>)
 800093c:	f001 fb70 	bl	8002020 <HAL_TIM_Base_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM3_Init+0x52>
		Error_Handler();
 8000946:	f000 f8c9 	bl	8000adc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	4619      	mov	r1, r3
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <MX_TIM3_Init+0x94>)
 8000958:	f001 fcdd 	bl	8002316 <HAL_TIM_ConfigClockSource>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM3_Init+0x6e>
		Error_Handler();
 8000962:	f000 f8bb 	bl	8000adc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <MX_TIM3_Init+0x94>)
 8000974:	f001 fee8 	bl	8002748 <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800097e:	f000 f8ad 	bl	8000adc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000db4 	.word	0x20000db4
 8000990:	40000400 	.word	0x40000400

08000994 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_USART2_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009cc:	f001 ff4c 	bl	8002868 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80009d6:	f000 f881 	bl	8000adc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000d74 	.word	0x20000d74
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a1a      	ldr	r2, [pc, #104]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2120      	movs	r1, #32
 8000a3a:	4815      	ldr	r0, [pc, #84]	; (8000a90 <MX_GPIO_Init+0xa8>)
 8000a3c:	f000 fdaa 	bl	8001594 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a40:	2301      	movs	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_GPIO_Init+0xac>)
 8000a46:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4619      	mov	r1, r3
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <MX_GPIO_Init+0xa8>)
 8000a54:	f000 fc0c 	bl	8001270 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a58:	2320      	movs	r3, #32
 8000a5a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4808      	ldr	r0, [pc, #32]	; (8000a90 <MX_GPIO_Init+0xa8>)
 8000a70:	f000 fbfe 	bl	8001270 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	2006      	movs	r0, #6
 8000a7a:	f000 fb32 	bl	80010e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a7e:	2006      	movs	r0, #6
 8000a80:	f000 fb4b 	bl	800111a <HAL_NVIC_EnableIRQ>

}
 8000a84:	bf00      	nop
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	10110000 	.word	0x10110000

08000a98 <HAL_TIM_PeriodElapsedCallback>:


/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d102      	bne.n	8000aae <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 8000aa8:	f7ff fddc 	bl	8000664 <Tim3IT>
	else
		__NOP();
}
 8000aac:	e000      	b.n	8000ab0 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 8000aae:	bf00      	nop
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000db4 	.word	0x20000db4

08000abc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d102      	bne.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x16>
		FreqCounterPinEXTI();
 8000acc:	f7ff fda6 	bl	800061c <FreqCounterPinEXTI>
	} else
		__NOP();
}
 8000ad0:	e000      	b.n	8000ad4 <HAL_GPIO_EXTI_Callback+0x18>
		__NOP();
 8000ad2:	bf00      	nop
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <HAL_MspInit+0x4c>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2a:	2007      	movs	r0, #7
 8000b2c:	f000 face 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_DAC_MspInit+0x7c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d127      	bne.n	8000bae <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <HAL_DAC_MspInit+0x80>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a15      	ldr	r2, [pc, #84]	; (8000bbc <HAL_DAC_MspInit+0x80>)
 8000b68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <HAL_DAC_MspInit+0x80>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_DAC_MspInit+0x80>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_DAC_MspInit+0x80>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_DAC_MspInit+0x80>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b96:	2310      	movs	r3, #16
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_DAC_MspInit+0x84>)
 8000baa:	f000 fb61 	bl	8001270 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40007400 	.word	0x40007400
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd4:	d10e      	bne.n	8000bf4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_TIM_Base_MspInit+0x70>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <HAL_TIM_Base_MspInit+0x70>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_TIM_Base_MspInit+0x70>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bf2:	e01a      	b.n	8000c2a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <HAL_TIM_Base_MspInit+0x74>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d115      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_TIM_Base_MspInit+0x70>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_TIM_Base_MspInit+0x70>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_TIM_Base_MspInit+0x70>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	201d      	movs	r0, #29
 8000c20:	f000 fa5f 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c24:	201d      	movs	r0, #29
 8000c26:	f000 fa78 	bl	800111a <HAL_NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40000400 	.word	0x40000400

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <HAL_UART_MspInit+0x94>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d133      	bne.n	8000cc6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_UART_MspInit+0x98>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c96:	230c      	movs	r3, #12
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4809      	ldr	r0, [pc, #36]	; (8000cd8 <HAL_UART_MspInit+0x9c>)
 8000cb2:	f000 fadd 	bl	8001270 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2026      	movs	r0, #38	; 0x26
 8000cbc:	f000 fa11 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cc0:	2026      	movs	r0, #38	; 0x26
 8000cc2:	f000 fa2a 	bl	800111a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40004400 	.word	0x40004400
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d30:	f000 f8dc 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f000 fc43 	bl	80015c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <TIM3_IRQHandler+0x10>)
 8000d4e:	f001 f9da 	bl	8002106 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000db4 	.word	0x20000db4

08000d5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <USART2_IRQHandler+0x10>)
 8000d62:	f001 fe67 	bl	8002a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000d74 	.word	0x20000d74

08000d70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <_sbrk+0x50>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x16>
		heap_end = &end;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <_sbrk+0x50>)
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <_sbrk+0x54>)
 8000d84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <_sbrk+0x50>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <_sbrk+0x50>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	466a      	mov	r2, sp
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d907      	bls.n	8000daa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d9a:	f002 fc51 	bl	8003640 <__errno>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	230c      	movs	r3, #12
 8000da2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	e006      	b.n	8000db8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <_sbrk+0x50>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a03      	ldr	r2, [pc, #12]	; (8000dc0 <_sbrk+0x50>)
 8000db4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000090 	.word	0x20000090
 8000dc4:	20000e00 	.word	0x20000e00

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <SystemInit+0x28>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd2:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <SystemInit+0x28>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SystemInit+0x28>)
 8000dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de2:	609a      	str	r2, [r3, #8]
#endif
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000df8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dfa:	e003      	b.n	8000e04 <LoopCopyDataInit>

08000dfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e02:	3104      	adds	r1, #4

08000e04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e0c:	d3f6      	bcc.n	8000dfc <CopyDataInit>
  ldr  r2, =_sbss
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e10:	e002      	b.n	8000e18 <LoopFillZerobss>

08000e12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e14:	f842 3b04 	str.w	r3, [r2], #4

08000e18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e1c:	d3f9      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e1e:	f7ff ffd3 	bl	8000dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e22:	f002 fc13 	bl	800364c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fc3f 	bl	80006a8 <main>
  bx  lr    
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e30:	08003f44 	.word	0x08003f44
  ldr  r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e38:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000e3c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000e40:	20000dfc 	.word	0x20000dfc

08000e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <HAL_Init+0x40>)
 8000e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_Init+0x40>)
 8000e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x40>)
 8000e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f92b 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fe36 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023c00 	.word	0x40023c00

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f943 	bl	8001136 <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 f90b 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000df4 	.word	0x20000df4

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000df4 	.word	0x20000df4

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4907      	ldr	r1, [pc, #28]	; (8000fc8 <__NVIC_EnableIRQ+0x38>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff29 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff3e 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff8e 	bl	8001020 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff31 	bl	8000f90 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffa2 	bl	8001088 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e014      	b.n	800118a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	791b      	ldrb	r3, [r3, #4]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d105      	bne.n	8001176 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fce3 	bl	8000b3c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2202      	movs	r2, #2
 800117a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001192:	b480      	push	{r7}
 8001194:	b087      	sub	sp, #28
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	795b      	ldrb	r3, [r3, #5]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_DAC_ConfigChannel+0x20>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e036      	b.n	8001220 <HAL_DAC_ConfigChannel+0x8e>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2201      	movs	r2, #1
 80011b6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2202      	movs	r2, #2
 80011bc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80011c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4013      	ands	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	22c0      	movs	r2, #192	; 0xc0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43da      	mvns	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	400a      	ands	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2201      	movs	r2, #1
 8001216:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d004      	beq.n	800124a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00c      	b.n	8001264 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2205      	movs	r2, #5
 800124e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e165      	b.n	8001558 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8154 	bne.w	8001552 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d00b      	beq.n	80012ca <HAL_GPIO_Init+0x5a>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012be:	2b11      	cmp	r3, #17
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b12      	cmp	r3, #18
 80012c8:	d130      	bne.n	800132c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 0201 	and.w	r2, r3, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0xfc>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b12      	cmp	r3, #18
 800136a:	d123      	bne.n	80013b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	69b9      	ldr	r1, [r7, #24]
 80013b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80ae 	beq.w	8001552 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <HAL_GPIO_Init+0x2fc>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a5b      	ldr	r2, [pc, #364]	; (800156c <HAL_GPIO_Init+0x2fc>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b59      	ldr	r3, [pc, #356]	; (800156c <HAL_GPIO_Init+0x2fc>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001412:	4a57      	ldr	r2, [pc, #348]	; (8001570 <HAL_GPIO_Init+0x300>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4e      	ldr	r2, [pc, #312]	; (8001574 <HAL_GPIO_Init+0x304>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d025      	beq.n	800148a <HAL_GPIO_Init+0x21a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4d      	ldr	r2, [pc, #308]	; (8001578 <HAL_GPIO_Init+0x308>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01f      	beq.n	8001486 <HAL_GPIO_Init+0x216>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4c      	ldr	r2, [pc, #304]	; (800157c <HAL_GPIO_Init+0x30c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0x212>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4b      	ldr	r2, [pc, #300]	; (8001580 <HAL_GPIO_Init+0x310>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x20e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4a      	ldr	r2, [pc, #296]	; (8001584 <HAL_GPIO_Init+0x314>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x20a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a49      	ldr	r2, [pc, #292]	; (8001588 <HAL_GPIO_Init+0x318>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x206>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a48      	ldr	r2, [pc, #288]	; (800158c <HAL_GPIO_Init+0x31c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x202>
 800146e:	2306      	movs	r3, #6
 8001470:	e00c      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001472:	2307      	movs	r3, #7
 8001474:	e00a      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001476:	2305      	movs	r3, #5
 8001478:	e008      	b.n	800148c <HAL_GPIO_Init+0x21c>
 800147a:	2304      	movs	r3, #4
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x21c>
 800147e:	2303      	movs	r3, #3
 8001480:	e004      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001482:	2302      	movs	r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x21c>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x21c>
 800148a:	2300      	movs	r3, #0
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	f002 0203 	and.w	r2, r2, #3
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	4093      	lsls	r3, r2
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149c:	4934      	ldr	r1, [pc, #208]	; (8001570 <HAL_GPIO_Init+0x300>)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014aa:	4b39      	ldr	r3, [pc, #228]	; (8001590 <HAL_GPIO_Init+0x320>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ce:	4a30      	ldr	r2, [pc, #192]	; (8001590 <HAL_GPIO_Init+0x320>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014d4:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <HAL_GPIO_Init+0x320>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014f8:	4a25      	ldr	r2, [pc, #148]	; (8001590 <HAL_GPIO_Init+0x320>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_GPIO_Init+0x320>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001522:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <HAL_GPIO_Init+0x320>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_GPIO_Init+0x320>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800154c:	4a10      	ldr	r2, [pc, #64]	; (8001590 <HAL_GPIO_Init+0x320>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	f67f ae96 	bls.w	800128c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001560:	bf00      	nop
 8001562:	3724      	adds	r7, #36	; 0x24
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40023800 	.word	0x40023800
 8001570:	40013800 	.word	0x40013800
 8001574:	40020000 	.word	0x40020000
 8001578:	40020400 	.word	0x40020400
 800157c:	40020800 	.word	0x40020800
 8001580:	40020c00 	.word	0x40020c00
 8001584:	40021000 	.word	0x40021000
 8001588:	40021400 	.word	0x40021400
 800158c:	40021800 	.word	0x40021800
 8001590:	40013c00 	.word	0x40013c00

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015b0:	e003      	b.n	80015ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	041a      	lsls	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	619a      	str	r2, [r3, #24]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fa68 	bl	8000abc <HAL_GPIO_EXTI_Callback>
  }
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40013c00 	.word	0x40013c00

080015f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0cc      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800160c:	4b68      	ldr	r3, [pc, #416]	; (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d90c      	bls.n	8001634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b65      	ldr	r3, [pc, #404]	; (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001622:	4b63      	ldr	r3, [pc, #396]	; (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d001      	beq.n	8001634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0b8      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d020      	beq.n	8001682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800164c:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a58      	ldr	r2, [pc, #352]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001664:	4b53      	ldr	r3, [pc, #332]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a52      	ldr	r2, [pc, #328]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800166e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001670:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	494d      	ldr	r1, [pc, #308]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d044      	beq.n	8001718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d119      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e07f      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d003      	beq.n	80016b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b6:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d109      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e06f      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c6:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e067      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d6:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f023 0203 	bic.w	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4934      	ldr	r1, [pc, #208]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e8:	f7ff fc14 	bl	8000f14 <HAL_GetTick>
 80016ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f0:	f7ff fc10 	bl	8000f14 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e04f      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 020c 	and.w	r2, r3, #12
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	429a      	cmp	r2, r3
 8001716:	d1eb      	bne.n	80016f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 030f 	and.w	r3, r3, #15
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d20c      	bcs.n	8001740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e032      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4916      	ldr	r1, [pc, #88]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d009      	beq.n	800177e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	490e      	ldr	r1, [pc, #56]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800177e:	f000 f855 	bl	800182c <HAL_RCC_GetSysClockFreq>
 8001782:	4601      	mov	r1, r0
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	fa21 f303 	lsr.w	r3, r1, r3
 8001796:	4a09      	ldr	r2, [pc, #36]	; (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_RCC_ClockConfig+0x1c8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fb74 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c00 	.word	0x40023c00
 80017b4:	40023800 	.word	0x40023800
 80017b8:	08003ee8 	.word	0x08003ee8
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000000 	.word	0x20000000

080017dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017e0:	f7ff fff0 	bl	80017c4 <HAL_RCC_GetHCLKFreq>
 80017e4:	4601      	mov	r1, r0
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	0a9b      	lsrs	r3, r3, #10
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	4a03      	ldr	r2, [pc, #12]	; (8001800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	08003ef8 	.word	0x08003ef8

08001804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001808:	f7ff ffdc 	bl	80017c4 <HAL_RCC_GetHCLKFreq>
 800180c:	4601      	mov	r1, r0
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	0b5b      	lsrs	r3, r3, #13
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	4a03      	ldr	r2, [pc, #12]	; (8001828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001820:	4618      	mov	r0, r3
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	08003ef8 	.word	0x08003ef8

0800182c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001846:	4bc6      	ldr	r3, [pc, #792]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x334>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b0c      	cmp	r3, #12
 8001850:	f200 817e 	bhi.w	8001b50 <HAL_RCC_GetSysClockFreq+0x324>
 8001854:	a201      	add	r2, pc, #4	; (adr r2, 800185c <HAL_RCC_GetSysClockFreq+0x30>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	08001891 	.word	0x08001891
 8001860:	08001b51 	.word	0x08001b51
 8001864:	08001b51 	.word	0x08001b51
 8001868:	08001b51 	.word	0x08001b51
 800186c:	08001897 	.word	0x08001897
 8001870:	08001b51 	.word	0x08001b51
 8001874:	08001b51 	.word	0x08001b51
 8001878:	08001b51 	.word	0x08001b51
 800187c:	0800189d 	.word	0x0800189d
 8001880:	08001b51 	.word	0x08001b51
 8001884:	08001b51 	.word	0x08001b51
 8001888:	08001b51 	.word	0x08001b51
 800188c:	080019f9 	.word	0x080019f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001890:	4bb4      	ldr	r3, [pc, #720]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x338>)
 8001892:	613b      	str	r3, [r7, #16]
       break;
 8001894:	e15f      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001896:	4bb4      	ldr	r3, [pc, #720]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001898:	613b      	str	r3, [r7, #16]
      break;
 800189a:	e15c      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800189c:	4bb0      	ldr	r3, [pc, #704]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x334>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018a4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018a6:	4bae      	ldr	r3, [pc, #696]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x334>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d04a      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b2:	4bab      	ldr	r3, [pc, #684]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x334>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	099b      	lsrs	r3, r3, #6
 80018b8:	f04f 0400 	mov.w	r4, #0
 80018bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	ea03 0501 	and.w	r5, r3, r1
 80018c8:	ea04 0602 	and.w	r6, r4, r2
 80018cc:	4629      	mov	r1, r5
 80018ce:	4632      	mov	r2, r6
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	f04f 0400 	mov.w	r4, #0
 80018d8:	0154      	lsls	r4, r2, #5
 80018da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018de:	014b      	lsls	r3, r1, #5
 80018e0:	4619      	mov	r1, r3
 80018e2:	4622      	mov	r2, r4
 80018e4:	1b49      	subs	r1, r1, r5
 80018e6:	eb62 0206 	sbc.w	r2, r2, r6
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	f04f 0400 	mov.w	r4, #0
 80018f2:	0194      	lsls	r4, r2, #6
 80018f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018f8:	018b      	lsls	r3, r1, #6
 80018fa:	1a5b      	subs	r3, r3, r1
 80018fc:	eb64 0402 	sbc.w	r4, r4, r2
 8001900:	f04f 0100 	mov.w	r1, #0
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	00e2      	lsls	r2, r4, #3
 800190a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800190e:	00d9      	lsls	r1, r3, #3
 8001910:	460b      	mov	r3, r1
 8001912:	4614      	mov	r4, r2
 8001914:	195b      	adds	r3, r3, r5
 8001916:	eb44 0406 	adc.w	r4, r4, r6
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	0262      	lsls	r2, r4, #9
 8001924:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001928:	0259      	lsls	r1, r3, #9
 800192a:	460b      	mov	r3, r1
 800192c:	4614      	mov	r4, r2
 800192e:	4618      	mov	r0, r3
 8001930:	4621      	mov	r1, r4
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f04f 0400 	mov.w	r4, #0
 8001938:	461a      	mov	r2, r3
 800193a:	4623      	mov	r3, r4
 800193c:	f7fe fcc0 	bl	80002c0 <__aeabi_uldivmod>
 8001940:	4603      	mov	r3, r0
 8001942:	460c      	mov	r4, r1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e049      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001948:	4b85      	ldr	r3, [pc, #532]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x334>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	099b      	lsrs	r3, r3, #6
 800194e:	f04f 0400 	mov.w	r4, #0
 8001952:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	ea03 0501 	and.w	r5, r3, r1
 800195e:	ea04 0602 	and.w	r6, r4, r2
 8001962:	4629      	mov	r1, r5
 8001964:	4632      	mov	r2, r6
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	f04f 0400 	mov.w	r4, #0
 800196e:	0154      	lsls	r4, r2, #5
 8001970:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001974:	014b      	lsls	r3, r1, #5
 8001976:	4619      	mov	r1, r3
 8001978:	4622      	mov	r2, r4
 800197a:	1b49      	subs	r1, r1, r5
 800197c:	eb62 0206 	sbc.w	r2, r2, r6
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	f04f 0400 	mov.w	r4, #0
 8001988:	0194      	lsls	r4, r2, #6
 800198a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800198e:	018b      	lsls	r3, r1, #6
 8001990:	1a5b      	subs	r3, r3, r1
 8001992:	eb64 0402 	sbc.w	r4, r4, r2
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	00e2      	lsls	r2, r4, #3
 80019a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019a4:	00d9      	lsls	r1, r3, #3
 80019a6:	460b      	mov	r3, r1
 80019a8:	4614      	mov	r4, r2
 80019aa:	195b      	adds	r3, r3, r5
 80019ac:	eb44 0406 	adc.w	r4, r4, r6
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	02a2      	lsls	r2, r4, #10
 80019ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019be:	0299      	lsls	r1, r3, #10
 80019c0:	460b      	mov	r3, r1
 80019c2:	4614      	mov	r4, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	4621      	mov	r1, r4
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f04f 0400 	mov.w	r4, #0
 80019ce:	461a      	mov	r2, r3
 80019d0:	4623      	mov	r3, r4
 80019d2:	f7fe fc75 	bl	80002c0 <__aeabi_uldivmod>
 80019d6:	4603      	mov	r3, r0
 80019d8:	460c      	mov	r4, r1
 80019da:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019dc:	4b60      	ldr	r3, [pc, #384]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x334>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	3301      	adds	r3, #1
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	613b      	str	r3, [r7, #16]
      break;
 80019f6:	e0ae      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x334>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a00:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a02:	4b57      	ldr	r3, [pc, #348]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d04a      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0e:	4b54      	ldr	r3, [pc, #336]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	099b      	lsrs	r3, r3, #6
 8001a14:	f04f 0400 	mov.w	r4, #0
 8001a18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	ea03 0501 	and.w	r5, r3, r1
 8001a24:	ea04 0602 	and.w	r6, r4, r2
 8001a28:	4629      	mov	r1, r5
 8001a2a:	4632      	mov	r2, r6
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	f04f 0400 	mov.w	r4, #0
 8001a34:	0154      	lsls	r4, r2, #5
 8001a36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a3a:	014b      	lsls	r3, r1, #5
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4622      	mov	r2, r4
 8001a40:	1b49      	subs	r1, r1, r5
 8001a42:	eb62 0206 	sbc.w	r2, r2, r6
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	f04f 0400 	mov.w	r4, #0
 8001a4e:	0194      	lsls	r4, r2, #6
 8001a50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a54:	018b      	lsls	r3, r1, #6
 8001a56:	1a5b      	subs	r3, r3, r1
 8001a58:	eb64 0402 	sbc.w	r4, r4, r2
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	00e2      	lsls	r2, r4, #3
 8001a66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a6a:	00d9      	lsls	r1, r3, #3
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4614      	mov	r4, r2
 8001a70:	195b      	adds	r3, r3, r5
 8001a72:	eb44 0406 	adc.w	r4, r4, r6
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	0262      	lsls	r2, r4, #9
 8001a80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a84:	0259      	lsls	r1, r3, #9
 8001a86:	460b      	mov	r3, r1
 8001a88:	4614      	mov	r4, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f04f 0400 	mov.w	r4, #0
 8001a94:	461a      	mov	r2, r3
 8001a96:	4623      	mov	r3, r4
 8001a98:	f7fe fc12 	bl	80002c0 <__aeabi_uldivmod>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e049      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa4:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x334>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	f04f 0400 	mov.w	r4, #0
 8001aae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	ea03 0501 	and.w	r5, r3, r1
 8001aba:	ea04 0602 	and.w	r6, r4, r2
 8001abe:	4629      	mov	r1, r5
 8001ac0:	4632      	mov	r2, r6
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	f04f 0400 	mov.w	r4, #0
 8001aca:	0154      	lsls	r4, r2, #5
 8001acc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ad0:	014b      	lsls	r3, r1, #5
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4622      	mov	r2, r4
 8001ad6:	1b49      	subs	r1, r1, r5
 8001ad8:	eb62 0206 	sbc.w	r2, r2, r6
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	f04f 0400 	mov.w	r4, #0
 8001ae4:	0194      	lsls	r4, r2, #6
 8001ae6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001aea:	018b      	lsls	r3, r1, #6
 8001aec:	1a5b      	subs	r3, r3, r1
 8001aee:	eb64 0402 	sbc.w	r4, r4, r2
 8001af2:	f04f 0100 	mov.w	r1, #0
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	00e2      	lsls	r2, r4, #3
 8001afc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b00:	00d9      	lsls	r1, r3, #3
 8001b02:	460b      	mov	r3, r1
 8001b04:	4614      	mov	r4, r2
 8001b06:	195b      	adds	r3, r3, r5
 8001b08:	eb44 0406 	adc.w	r4, r4, r6
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	02a2      	lsls	r2, r4, #10
 8001b16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b1a:	0299      	lsls	r1, r3, #10
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	4621      	mov	r1, r4
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f04f 0400 	mov.w	r4, #0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4623      	mov	r3, r4
 8001b2e:	f7fe fbc7 	bl	80002c0 <__aeabi_uldivmod>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0f1b      	lsrs	r3, r3, #28
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4c:	613b      	str	r3, [r7, #16]
      break;
 8001b4e:	e002      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x338>)
 8001b52:	613b      	str	r3, [r7, #16]
      break;
 8001b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b56:	693b      	ldr	r3, [r7, #16]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	00f42400 	.word	0x00f42400
 8001b68:	007a1200 	.word	0x007a1200

08001b6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 8083 	beq.w	8001c8c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b86:	4b95      	ldr	r3, [pc, #596]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d019      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b92:	4b92      	ldr	r3, [pc, #584]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d106      	bne.n	8001bac <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b9e:	4b8f      	ldr	r3, [pc, #572]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001baa:	d00c      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bac:	4b8b      	ldr	r3, [pc, #556]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bb4:	2b0c      	cmp	r3, #12
 8001bb6:	d112      	bne.n	8001bde <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb8:	4b88      	ldr	r3, [pc, #544]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bc4:	d10b      	bne.n	8001bde <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc6:	4b85      	ldr	r3, [pc, #532]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d05b      	beq.n	8001c8a <HAL_RCC_OscConfig+0x11e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d157      	bne.n	8001c8a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e216      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x8a>
 8001be8:	4b7c      	ldr	r3, [pc, #496]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a7b      	ldr	r2, [pc, #492]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e01d      	b.n	8001c32 <HAL_RCC_OscConfig+0xc6>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bfe:	d10c      	bne.n	8001c1a <HAL_RCC_OscConfig+0xae>
 8001c00:	4b76      	ldr	r3, [pc, #472]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a75      	ldr	r2, [pc, #468]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a72      	ldr	r2, [pc, #456]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e00b      	b.n	8001c32 <HAL_RCC_OscConfig+0xc6>
 8001c1a:	4b70      	ldr	r3, [pc, #448]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6f      	ldr	r2, [pc, #444]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b6d      	ldr	r3, [pc, #436]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6c      	ldr	r2, [pc, #432]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d013      	beq.n	8001c62 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f96b 	bl	8000f14 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c42:	f7ff f967 	bl	8000f14 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b64      	cmp	r3, #100	; 0x64
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e1db      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c54:	4b61      	ldr	r3, [pc, #388]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0xd6>
 8001c60:	e014      	b.n	8001c8c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff f957 	bl	8000f14 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6a:	f7ff f953 	bl	8000f14 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b64      	cmp	r3, #100	; 0x64
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1c7      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7c:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0xfe>
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d06f      	beq.n	8001d78 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d017      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ca4:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d105      	bne.n	8001cbc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cb0:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00b      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cbc:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cc4:	2b0c      	cmp	r3, #12
 8001cc6:	d11c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cc8:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d116      	bne.n	8001d02 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd4:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_OscConfig+0x180>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e18f      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4938      	ldr	r1, [pc, #224]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d00:	e03a      	b.n	8001d78 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d020      	beq.n	8001d4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0a:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff f900 	bl	8000f14 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d18:	f7ff f8fc 	bl	8000f14 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e170      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d36:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4925      	ldr	r1, [pc, #148]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
 8001d4a:	e015      	b.n	8001d78 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <HAL_RCC_OscConfig+0x274>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff f8df 	bl	8000f14 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff f8db 	bl	8000f14 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e14f      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d037      	beq.n	8001df4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d016      	beq.n	8001dba <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_RCC_OscConfig+0x278>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d92:	f7ff f8bf 	bl	8000f14 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9a:	f7ff f8bb 	bl	8000f14 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e12f      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x22e>
 8001db8:	e01c      	b.n	8001df4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_RCC_OscConfig+0x278>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff f8a8 	bl	8000f14 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc6:	e00f      	b.n	8001de8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f8a4 	bl	8000f14 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d908      	bls.n	8001de8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e118      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	42470000 	.word	0x42470000
 8001de4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de8:	4b8a      	ldr	r3, [pc, #552]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1e9      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 8097 	beq.w	8001f30 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e06:	4b83      	ldr	r3, [pc, #524]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10f      	bne.n	8001e32 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b7f      	ldr	r3, [pc, #508]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a7e      	ldr	r2, [pc, #504]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
 8001e22:	4b7c      	ldr	r3, [pc, #496]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b79      	ldr	r3, [pc, #484]	; (8002018 <HAL_RCC_OscConfig+0x4ac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b76      	ldr	r3, [pc, #472]	; (8002018 <HAL_RCC_OscConfig+0x4ac>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a75      	ldr	r2, [pc, #468]	; (8002018 <HAL_RCC_OscConfig+0x4ac>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f863 	bl	8000f14 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff f85f 	bl	8000f14 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0d3      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b6c      	ldr	r3, [pc, #432]	; (8002018 <HAL_RCC_OscConfig+0x4ac>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x31a>
 8001e78:	4b66      	ldr	r3, [pc, #408]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	4a65      	ldr	r2, [pc, #404]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6713      	str	r3, [r2, #112]	; 0x70
 8001e84:	e01c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x354>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x33c>
 8001e8e:	4b61      	ldr	r3, [pc, #388]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a60      	ldr	r2, [pc, #384]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9a:	4b5e      	ldr	r3, [pc, #376]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	4a5d      	ldr	r2, [pc, #372]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x354>
 8001ea8:	4b5a      	ldr	r3, [pc, #360]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a59      	ldr	r2, [pc, #356]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb4:	4b57      	ldr	r3, [pc, #348]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb8:	4a56      	ldr	r2, [pc, #344]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001eba:	f023 0304 	bic.w	r3, r3, #4
 8001ebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d015      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f824 	bl	8000f14 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7ff f820 	bl	8000f14 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e092      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0ee      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x364>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7ff f80e 	bl	8000f14 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7ff f80a 	bl	8000f14 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e07c      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f12:	4b40      	ldr	r3, [pc, #256]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ee      	bne.n	8001efc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f24:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	4a3a      	ldr	r2, [pc, #232]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d068      	beq.n	800200a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d060      	beq.n	8002006 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d145      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b33      	ldr	r3, [pc, #204]	; (800201c <HAL_RCC_OscConfig+0x4b0>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f52:	f7fe ffdf 	bl	8000f14 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7fe ffdb 	bl	8000f14 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e04f      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6c:	4b29      	ldr	r3, [pc, #164]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69da      	ldr	r2, [r3, #28]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	019b      	lsls	r3, r3, #6
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	085b      	lsrs	r3, r3, #1
 8001f90:	3b01      	subs	r3, #1
 8001f92:	041b      	lsls	r3, r3, #16
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	061b      	lsls	r3, r3, #24
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	071b      	lsls	r3, r3, #28
 8001fa4:	491b      	ldr	r1, [pc, #108]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_RCC_OscConfig+0x4b0>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ffb0 	bl	8000f14 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7fe ffac 	bl	8000f14 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e020      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x44c>
 8001fd6:	e018      	b.n	800200a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_RCC_OscConfig+0x4b0>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7fe ff99 	bl	8000f14 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7fe ff95 	bl	8000f14 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e009      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_OscConfig+0x4a8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x47a>
 8002004:	e001      	b.n	800200a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	40007000 	.word	0x40007000
 800201c:	42470060 	.word	0x42470060

08002020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e01d      	b.n	800206e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe fdbc 	bl	8000bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4610      	mov	r0, r2
 8002060:	f000 fa38 	bl	80024d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b06      	cmp	r3, #6
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d007      	beq.n	80020f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b02      	cmp	r3, #2
 800211a:	d122      	bne.n	8002162 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b02      	cmp	r3, #2
 8002128:	d11b      	bne.n	8002162 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f06f 0202 	mvn.w	r2, #2
 8002132:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f9a5 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 800214e:	e005      	b.n	800215c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f997 	bl	8002484 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f9a8 	bl	80024ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b04      	cmp	r3, #4
 800216e:	d122      	bne.n	80021b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b04      	cmp	r3, #4
 800217c:	d11b      	bne.n	80021b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f06f 0204 	mvn.w	r2, #4
 8002186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f97b 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 80021a2:	e005      	b.n	80021b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f96d 	bl	8002484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f97e 	bl	80024ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d122      	bne.n	800220a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d11b      	bne.n	800220a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f06f 0208 	mvn.w	r2, #8
 80021da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2204      	movs	r2, #4
 80021e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f951 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 80021f6:	e005      	b.n	8002204 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f943 	bl	8002484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f954 	bl	80024ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b10      	cmp	r3, #16
 8002216:	d122      	bne.n	800225e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	2b10      	cmp	r3, #16
 8002224:	d11b      	bne.n	800225e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f06f 0210 	mvn.w	r2, #16
 800222e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2208      	movs	r2, #8
 8002234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f927 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 800224a:	e005      	b.n	8002258 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f919 	bl	8002484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f92a 	bl	80024ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b01      	cmp	r3, #1
 800226a:	d10e      	bne.n	800228a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f06f 0201 	mvn.w	r2, #1
 8002282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7fe fc07 	bl	8000a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d10e      	bne.n	80022b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a2:	2b80      	cmp	r3, #128	; 0x80
 80022a4:	d107      	bne.n	80022b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 facf 	bl	8002854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	d10e      	bne.n	80022e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	d107      	bne.n	80022e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f8ef 	bl	80024c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d10e      	bne.n	800230e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d107      	bne.n	800230e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f06f 0220 	mvn.w	r2, #32
 8002306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fa99 	bl	8002840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_TIM_ConfigClockSource+0x18>
 800232a:	2302      	movs	r3, #2
 800232c:	e0a6      	b.n	800247c <HAL_TIM_ConfigClockSource+0x166>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2202      	movs	r2, #2
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800234c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002354:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b40      	cmp	r3, #64	; 0x40
 8002364:	d067      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x120>
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d80b      	bhi.n	8002382 <HAL_TIM_ConfigClockSource+0x6c>
 800236a:	2b10      	cmp	r3, #16
 800236c:	d073      	beq.n	8002456 <HAL_TIM_ConfigClockSource+0x140>
 800236e:	2b10      	cmp	r3, #16
 8002370:	d802      	bhi.n	8002378 <HAL_TIM_ConfigClockSource+0x62>
 8002372:	2b00      	cmp	r3, #0
 8002374:	d06f      	beq.n	8002456 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002376:	e078      	b.n	800246a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002378:	2b20      	cmp	r3, #32
 800237a:	d06c      	beq.n	8002456 <HAL_TIM_ConfigClockSource+0x140>
 800237c:	2b30      	cmp	r3, #48	; 0x30
 800237e:	d06a      	beq.n	8002456 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002380:	e073      	b.n	800246a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002382:	2b70      	cmp	r3, #112	; 0x70
 8002384:	d00d      	beq.n	80023a2 <HAL_TIM_ConfigClockSource+0x8c>
 8002386:	2b70      	cmp	r3, #112	; 0x70
 8002388:	d804      	bhi.n	8002394 <HAL_TIM_ConfigClockSource+0x7e>
 800238a:	2b50      	cmp	r3, #80	; 0x50
 800238c:	d033      	beq.n	80023f6 <HAL_TIM_ConfigClockSource+0xe0>
 800238e:	2b60      	cmp	r3, #96	; 0x60
 8002390:	d041      	beq.n	8002416 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002392:	e06a      	b.n	800246a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002398:	d066      	beq.n	8002468 <HAL_TIM_ConfigClockSource+0x152>
 800239a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239e:	d017      	beq.n	80023d0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80023a0:	e063      	b.n	800246a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f000 f9a9 	bl	8002708 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	609a      	str	r2, [r3, #8]
      break;
 80023ce:	e04c      	b.n	800246a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6899      	ldr	r1, [r3, #8]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f000 f992 	bl	8002708 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023f2:	609a      	str	r2, [r3, #8]
      break;
 80023f4:	e039      	b.n	800246a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6859      	ldr	r1, [r3, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	461a      	mov	r2, r3
 8002404:	f000 f906 	bl	8002614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2150      	movs	r1, #80	; 0x50
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f95f 	bl	80026d2 <TIM_ITRx_SetConfig>
      break;
 8002414:	e029      	b.n	800246a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	461a      	mov	r2, r3
 8002424:	f000 f925 	bl	8002672 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2160      	movs	r1, #96	; 0x60
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f94f 	bl	80026d2 <TIM_ITRx_SetConfig>
      break;
 8002434:	e019      	b.n	800246a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	461a      	mov	r2, r3
 8002444:	f000 f8e6 	bl	8002614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2140      	movs	r1, #64	; 0x40
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f93f 	bl	80026d2 <TIM_ITRx_SetConfig>
      break;
 8002454:	e009      	b.n	800246a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	4610      	mov	r0, r2
 8002462:	f000 f936 	bl	80026d2 <TIM_ITRx_SetConfig>
      break;
 8002466:	e000      	b.n	800246a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002468:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a40      	ldr	r2, [pc, #256]	; (80025e8 <TIM_Base_SetConfig+0x114>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d013      	beq.n	8002514 <TIM_Base_SetConfig+0x40>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f2:	d00f      	beq.n	8002514 <TIM_Base_SetConfig+0x40>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a3d      	ldr	r2, [pc, #244]	; (80025ec <TIM_Base_SetConfig+0x118>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00b      	beq.n	8002514 <TIM_Base_SetConfig+0x40>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a3c      	ldr	r2, [pc, #240]	; (80025f0 <TIM_Base_SetConfig+0x11c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d007      	beq.n	8002514 <TIM_Base_SetConfig+0x40>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a3b      	ldr	r2, [pc, #236]	; (80025f4 <TIM_Base_SetConfig+0x120>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d003      	beq.n	8002514 <TIM_Base_SetConfig+0x40>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a3a      	ldr	r2, [pc, #232]	; (80025f8 <TIM_Base_SetConfig+0x124>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d108      	bne.n	8002526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <TIM_Base_SetConfig+0x114>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d02b      	beq.n	8002586 <TIM_Base_SetConfig+0xb2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d027      	beq.n	8002586 <TIM_Base_SetConfig+0xb2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a2c      	ldr	r2, [pc, #176]	; (80025ec <TIM_Base_SetConfig+0x118>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d023      	beq.n	8002586 <TIM_Base_SetConfig+0xb2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a2b      	ldr	r2, [pc, #172]	; (80025f0 <TIM_Base_SetConfig+0x11c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01f      	beq.n	8002586 <TIM_Base_SetConfig+0xb2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a2a      	ldr	r2, [pc, #168]	; (80025f4 <TIM_Base_SetConfig+0x120>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01b      	beq.n	8002586 <TIM_Base_SetConfig+0xb2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a29      	ldr	r2, [pc, #164]	; (80025f8 <TIM_Base_SetConfig+0x124>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d017      	beq.n	8002586 <TIM_Base_SetConfig+0xb2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a28      	ldr	r2, [pc, #160]	; (80025fc <TIM_Base_SetConfig+0x128>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <TIM_Base_SetConfig+0xb2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a27      	ldr	r2, [pc, #156]	; (8002600 <TIM_Base_SetConfig+0x12c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00f      	beq.n	8002586 <TIM_Base_SetConfig+0xb2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a26      	ldr	r2, [pc, #152]	; (8002604 <TIM_Base_SetConfig+0x130>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00b      	beq.n	8002586 <TIM_Base_SetConfig+0xb2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a25      	ldr	r2, [pc, #148]	; (8002608 <TIM_Base_SetConfig+0x134>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <TIM_Base_SetConfig+0xb2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a24      	ldr	r2, [pc, #144]	; (800260c <TIM_Base_SetConfig+0x138>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d003      	beq.n	8002586 <TIM_Base_SetConfig+0xb2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a23      	ldr	r2, [pc, #140]	; (8002610 <TIM_Base_SetConfig+0x13c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d108      	bne.n	8002598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <TIM_Base_SetConfig+0x114>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d003      	beq.n	80025cc <TIM_Base_SetConfig+0xf8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0c      	ldr	r2, [pc, #48]	; (80025f8 <TIM_Base_SetConfig+0x124>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d103      	bne.n	80025d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	615a      	str	r2, [r3, #20]
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40010000 	.word	0x40010000
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800
 80025f4:	40000c00 	.word	0x40000c00
 80025f8:	40010400 	.word	0x40010400
 80025fc:	40014000 	.word	0x40014000
 8002600:	40014400 	.word	0x40014400
 8002604:	40014800 	.word	0x40014800
 8002608:	40001800 	.word	0x40001800
 800260c:	40001c00 	.word	0x40001c00
 8002610:	40002000 	.word	0x40002000

08002614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	f023 0201 	bic.w	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800263e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f023 030a 	bic.w	r3, r3, #10
 8002650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	621a      	str	r2, [r3, #32]
}
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002672:	b480      	push	{r7}
 8002674:	b087      	sub	sp, #28
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	f023 0210 	bic.w	r2, r3, #16
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800269c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	031b      	lsls	r3, r3, #12
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	621a      	str	r2, [r3, #32]
}
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f043 0307 	orr.w	r3, r3, #7
 80026f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	609a      	str	r2, [r3, #8]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	021a      	lsls	r2, r3, #8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	431a      	orrs	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	609a      	str	r2, [r3, #8]
}
 800273c:	bf00      	nop
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800275c:	2302      	movs	r3, #2
 800275e:	e05a      	b.n	8002816 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a21      	ldr	r2, [pc, #132]	; (8002824 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d022      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d01d      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1d      	ldr	r2, [pc, #116]	; (8002828 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d018      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1b      	ldr	r2, [pc, #108]	; (800282c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1a      	ldr	r2, [pc, #104]	; (8002830 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00e      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a18      	ldr	r2, [pc, #96]	; (8002834 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a17      	ldr	r2, [pc, #92]	; (8002838 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d004      	beq.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a15      	ldr	r2, [pc, #84]	; (800283c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d10c      	bne.n	8002804 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40010000 	.word	0x40010000
 8002828:	40000400 	.word	0x40000400
 800282c:	40000800 	.word	0x40000800
 8002830:	40000c00 	.word	0x40000c00
 8002834:	40010400 	.word	0x40010400
 8002838:	40014000 	.word	0x40014000
 800283c:	40001800 	.word	0x40001800

08002840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e03f      	b.n	80028fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe f9d4 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2224      	movs	r2, #36	; 0x24
 8002898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fb4b 	bl	8002f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b088      	sub	sp, #32
 8002906:	af02      	add	r7, sp, #8
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b20      	cmp	r3, #32
 8002920:	f040 8083 	bne.w	8002a2a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_UART_Transmit+0x2e>
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e07b      	b.n	8002a2c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_UART_Transmit+0x40>
 800293e:	2302      	movs	r3, #2
 8002940:	e074      	b.n	8002a2c <HAL_UART_Transmit+0x12a>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2221      	movs	r2, #33	; 0x21
 8002954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002958:	f7fe fadc 	bl	8000f14 <HAL_GetTick>
 800295c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	88fa      	ldrh	r2, [r7, #6]
 8002962:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	88fa      	ldrh	r2, [r7, #6]
 8002968:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002972:	e042      	b.n	80029fa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298a:	d122      	bne.n	80029d2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2200      	movs	r2, #0
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f96a 	bl	8002c70 <UART_WaitOnFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e042      	b.n	8002a2c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029b8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d103      	bne.n	80029ca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3302      	adds	r3, #2
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	e017      	b.n	80029fa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	3301      	adds	r3, #1
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	e013      	b.n	80029fa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2200      	movs	r2, #0
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f947 	bl	8002c70 <UART_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e01f      	b.n	8002a2c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	60ba      	str	r2, [r7, #8]
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1b7      	bne.n	8002974 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2140      	movs	r1, #64	; 0x40
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f92e 	bl	8002c70 <UART_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e006      	b.n	8002a2c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e000      	b.n	8002a2c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a2a:	2302      	movs	r3, #2
  }
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10d      	bne.n	8002a86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_UART_IRQHandler+0x52>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f9e0 	bl	8002e44 <UART_Receive_IT>
      return;
 8002a84:	e0d1      	b.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80b0 	beq.w	8002bee <HAL_UART_IRQHandler+0x1ba>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <HAL_UART_IRQHandler+0x70>
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80a5 	beq.w	8002bee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x90>
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_UART_IRQHandler+0xb0>
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002adc:	f043 0202 	orr.w	r2, r3, #2
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_UART_IRQHandler+0xd0>
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00f      	beq.n	8002b2e <HAL_UART_IRQHandler+0xfa>
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d104      	bne.n	8002b22 <HAL_UART_IRQHandler+0xee>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	f043 0208 	orr.w	r2, r3, #8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d078      	beq.n	8002c28 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_UART_IRQHandler+0x11c>
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f97a 	bl	8002e44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	bf0c      	ite	eq
 8002b5e:	2301      	moveq	r3, #1
 8002b60:	2300      	movne	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <HAL_UART_IRQHandler+0x144>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d031      	beq.n	8002bdc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f8c3 	bl	8002d04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d123      	bne.n	8002bd4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b9a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba8:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <HAL_UART_IRQHandler+0x1fc>)
 8002baa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe fb3b 	bl	800122c <HAL_DMA_Abort_IT>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d016      	beq.n	8002bea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bca:	e00e      	b.n	8002bea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f845 	bl	8002c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd2:	e00a      	b.n	8002bea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f841 	bl	8002c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bda:	e006      	b.n	8002bea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f83d 	bl	8002c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002be8:	e01e      	b.n	8002c28 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bea:	bf00      	nop
    return;
 8002bec:	e01c      	b.n	8002c28 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_UART_IRQHandler+0x1d6>
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f8b0 	bl	8002d68 <UART_Transmit_IT>
    return;
 8002c08:	e00f      	b.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f8f8 	bl	8002e14 <UART_EndTransmit_IT>
    return;
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002c28:	bf00      	nop
  }
}
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	08002d41 	.word	0x08002d41

08002c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c80:	e02c      	b.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d028      	beq.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c90:	f7fe f940 	bl	8000f14 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d21d      	bcs.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002cae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e00f      	b.n	8002cfc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d0c3      	beq.n	8002c82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7ff ff7e 	bl	8002c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b21      	cmp	r3, #33	; 0x21
 8002d7a:	d144      	bne.n	8002e06 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d84:	d11a      	bne.n	8002dbc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d9a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	1c9a      	adds	r2, r3, #2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	621a      	str	r2, [r3, #32]
 8002dae:	e00e      	b.n	8002dce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	621a      	str	r2, [r3, #32]
 8002dba:	e008      	b.n	8002dce <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	1c59      	adds	r1, r3, #1
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6211      	str	r1, [r2, #32]
 8002dc6:	781a      	ldrb	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e000      	b.n	8002e08 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
  }
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff fefd 	bl	8002c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b22      	cmp	r3, #34	; 0x22
 8002e56:	d171      	bne.n	8002f3c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e60:	d123      	bne.n	8002eaa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10e      	bne.n	8002e8e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	1c9a      	adds	r2, r3, #2
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e8c:	e029      	b.n	8002ee2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ea8:	e01b      	b.n	8002ee2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6858      	ldr	r0, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	1c59      	adds	r1, r3, #1
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6291      	str	r1, [r2, #40]	; 0x28
 8002ec2:	b2c2      	uxtb	r2, r0
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	e00c      	b.n	8002ee2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	1c58      	adds	r0, r3, #1
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	6288      	str	r0, [r1, #40]	; 0x28
 8002eda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d120      	bne.n	8002f38 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0220 	bic.w	r2, r2, #32
 8002f04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fe8a 	bl	8002c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e002      	b.n	8002f3e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f8a:	f023 030c 	bic.w	r3, r3, #12
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	68f9      	ldr	r1, [r7, #12]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb6:	f040 818b 	bne.w	80032d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4ac1      	ldr	r2, [pc, #772]	; (80032c4 <UART_SetConfig+0x37c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d005      	beq.n	8002fd0 <UART_SetConfig+0x88>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4abf      	ldr	r2, [pc, #764]	; (80032c8 <UART_SetConfig+0x380>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	f040 80bd 	bne.w	800314a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fd0:	f7fe fc18 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8002fd4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	461d      	mov	r5, r3
 8002fda:	f04f 0600 	mov.w	r6, #0
 8002fde:	46a8      	mov	r8, r5
 8002fe0:	46b1      	mov	r9, r6
 8002fe2:	eb18 0308 	adds.w	r3, r8, r8
 8002fe6:	eb49 0409 	adc.w	r4, r9, r9
 8002fea:	4698      	mov	r8, r3
 8002fec:	46a1      	mov	r9, r4
 8002fee:	eb18 0805 	adds.w	r8, r8, r5
 8002ff2:	eb49 0906 	adc.w	r9, r9, r6
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003002:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003006:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800300a:	4688      	mov	r8, r1
 800300c:	4691      	mov	r9, r2
 800300e:	eb18 0005 	adds.w	r0, r8, r5
 8003012:	eb49 0106 	adc.w	r1, r9, r6
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	461d      	mov	r5, r3
 800301c:	f04f 0600 	mov.w	r6, #0
 8003020:	196b      	adds	r3, r5, r5
 8003022:	eb46 0406 	adc.w	r4, r6, r6
 8003026:	461a      	mov	r2, r3
 8003028:	4623      	mov	r3, r4
 800302a:	f7fd f949 	bl	80002c0 <__aeabi_uldivmod>
 800302e:	4603      	mov	r3, r0
 8003030:	460c      	mov	r4, r1
 8003032:	461a      	mov	r2, r3
 8003034:	4ba5      	ldr	r3, [pc, #660]	; (80032cc <UART_SetConfig+0x384>)
 8003036:	fba3 2302 	umull	r2, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	461d      	mov	r5, r3
 8003044:	f04f 0600 	mov.w	r6, #0
 8003048:	46a9      	mov	r9, r5
 800304a:	46b2      	mov	sl, r6
 800304c:	eb19 0309 	adds.w	r3, r9, r9
 8003050:	eb4a 040a 	adc.w	r4, sl, sl
 8003054:	4699      	mov	r9, r3
 8003056:	46a2      	mov	sl, r4
 8003058:	eb19 0905 	adds.w	r9, r9, r5
 800305c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800306c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003070:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003074:	4689      	mov	r9, r1
 8003076:	4692      	mov	sl, r2
 8003078:	eb19 0005 	adds.w	r0, r9, r5
 800307c:	eb4a 0106 	adc.w	r1, sl, r6
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	461d      	mov	r5, r3
 8003086:	f04f 0600 	mov.w	r6, #0
 800308a:	196b      	adds	r3, r5, r5
 800308c:	eb46 0406 	adc.w	r4, r6, r6
 8003090:	461a      	mov	r2, r3
 8003092:	4623      	mov	r3, r4
 8003094:	f7fd f914 	bl	80002c0 <__aeabi_uldivmod>
 8003098:	4603      	mov	r3, r0
 800309a:	460c      	mov	r4, r1
 800309c:	461a      	mov	r2, r3
 800309e:	4b8b      	ldr	r3, [pc, #556]	; (80032cc <UART_SetConfig+0x384>)
 80030a0:	fba3 1302 	umull	r1, r3, r3, r2
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	2164      	movs	r1, #100	; 0x64
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	3332      	adds	r3, #50	; 0x32
 80030b2:	4a86      	ldr	r2, [pc, #536]	; (80032cc <UART_SetConfig+0x384>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c0:	4498      	add	r8, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	461d      	mov	r5, r3
 80030c6:	f04f 0600 	mov.w	r6, #0
 80030ca:	46a9      	mov	r9, r5
 80030cc:	46b2      	mov	sl, r6
 80030ce:	eb19 0309 	adds.w	r3, r9, r9
 80030d2:	eb4a 040a 	adc.w	r4, sl, sl
 80030d6:	4699      	mov	r9, r3
 80030d8:	46a2      	mov	sl, r4
 80030da:	eb19 0905 	adds.w	r9, r9, r5
 80030de:	eb4a 0a06 	adc.w	sl, sl, r6
 80030e2:	f04f 0100 	mov.w	r1, #0
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030f6:	4689      	mov	r9, r1
 80030f8:	4692      	mov	sl, r2
 80030fa:	eb19 0005 	adds.w	r0, r9, r5
 80030fe:	eb4a 0106 	adc.w	r1, sl, r6
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	461d      	mov	r5, r3
 8003108:	f04f 0600 	mov.w	r6, #0
 800310c:	196b      	adds	r3, r5, r5
 800310e:	eb46 0406 	adc.w	r4, r6, r6
 8003112:	461a      	mov	r2, r3
 8003114:	4623      	mov	r3, r4
 8003116:	f7fd f8d3 	bl	80002c0 <__aeabi_uldivmod>
 800311a:	4603      	mov	r3, r0
 800311c:	460c      	mov	r4, r1
 800311e:	461a      	mov	r2, r3
 8003120:	4b6a      	ldr	r3, [pc, #424]	; (80032cc <UART_SetConfig+0x384>)
 8003122:	fba3 1302 	umull	r1, r3, r3, r2
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2164      	movs	r1, #100	; 0x64
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	3332      	adds	r3, #50	; 0x32
 8003134:	4a65      	ldr	r2, [pc, #404]	; (80032cc <UART_SetConfig+0x384>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	f003 0207 	and.w	r2, r3, #7
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4442      	add	r2, r8
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e26f      	b.n	800362a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800314a:	f7fe fb47 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 800314e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	461d      	mov	r5, r3
 8003154:	f04f 0600 	mov.w	r6, #0
 8003158:	46a8      	mov	r8, r5
 800315a:	46b1      	mov	r9, r6
 800315c:	eb18 0308 	adds.w	r3, r8, r8
 8003160:	eb49 0409 	adc.w	r4, r9, r9
 8003164:	4698      	mov	r8, r3
 8003166:	46a1      	mov	r9, r4
 8003168:	eb18 0805 	adds.w	r8, r8, r5
 800316c:	eb49 0906 	adc.w	r9, r9, r6
 8003170:	f04f 0100 	mov.w	r1, #0
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800317c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003180:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003184:	4688      	mov	r8, r1
 8003186:	4691      	mov	r9, r2
 8003188:	eb18 0005 	adds.w	r0, r8, r5
 800318c:	eb49 0106 	adc.w	r1, r9, r6
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	461d      	mov	r5, r3
 8003196:	f04f 0600 	mov.w	r6, #0
 800319a:	196b      	adds	r3, r5, r5
 800319c:	eb46 0406 	adc.w	r4, r6, r6
 80031a0:	461a      	mov	r2, r3
 80031a2:	4623      	mov	r3, r4
 80031a4:	f7fd f88c 	bl	80002c0 <__aeabi_uldivmod>
 80031a8:	4603      	mov	r3, r0
 80031aa:	460c      	mov	r4, r1
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <UART_SetConfig+0x384>)
 80031b0:	fba3 2302 	umull	r2, r3, r3, r2
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	461d      	mov	r5, r3
 80031be:	f04f 0600 	mov.w	r6, #0
 80031c2:	46a9      	mov	r9, r5
 80031c4:	46b2      	mov	sl, r6
 80031c6:	eb19 0309 	adds.w	r3, r9, r9
 80031ca:	eb4a 040a 	adc.w	r4, sl, sl
 80031ce:	4699      	mov	r9, r3
 80031d0:	46a2      	mov	sl, r4
 80031d2:	eb19 0905 	adds.w	r9, r9, r5
 80031d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80031da:	f04f 0100 	mov.w	r1, #0
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ee:	4689      	mov	r9, r1
 80031f0:	4692      	mov	sl, r2
 80031f2:	eb19 0005 	adds.w	r0, r9, r5
 80031f6:	eb4a 0106 	adc.w	r1, sl, r6
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	461d      	mov	r5, r3
 8003200:	f04f 0600 	mov.w	r6, #0
 8003204:	196b      	adds	r3, r5, r5
 8003206:	eb46 0406 	adc.w	r4, r6, r6
 800320a:	461a      	mov	r2, r3
 800320c:	4623      	mov	r3, r4
 800320e:	f7fd f857 	bl	80002c0 <__aeabi_uldivmod>
 8003212:	4603      	mov	r3, r0
 8003214:	460c      	mov	r4, r1
 8003216:	461a      	mov	r2, r3
 8003218:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <UART_SetConfig+0x384>)
 800321a:	fba3 1302 	umull	r1, r3, r3, r2
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	2164      	movs	r1, #100	; 0x64
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	3332      	adds	r3, #50	; 0x32
 800322c:	4a27      	ldr	r2, [pc, #156]	; (80032cc <UART_SetConfig+0x384>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800323a:	4498      	add	r8, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	461d      	mov	r5, r3
 8003240:	f04f 0600 	mov.w	r6, #0
 8003244:	46a9      	mov	r9, r5
 8003246:	46b2      	mov	sl, r6
 8003248:	eb19 0309 	adds.w	r3, r9, r9
 800324c:	eb4a 040a 	adc.w	r4, sl, sl
 8003250:	4699      	mov	r9, r3
 8003252:	46a2      	mov	sl, r4
 8003254:	eb19 0905 	adds.w	r9, r9, r5
 8003258:	eb4a 0a06 	adc.w	sl, sl, r6
 800325c:	f04f 0100 	mov.w	r1, #0
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003268:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800326c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003270:	4689      	mov	r9, r1
 8003272:	4692      	mov	sl, r2
 8003274:	eb19 0005 	adds.w	r0, r9, r5
 8003278:	eb4a 0106 	adc.w	r1, sl, r6
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	461d      	mov	r5, r3
 8003282:	f04f 0600 	mov.w	r6, #0
 8003286:	196b      	adds	r3, r5, r5
 8003288:	eb46 0406 	adc.w	r4, r6, r6
 800328c:	461a      	mov	r2, r3
 800328e:	4623      	mov	r3, r4
 8003290:	f7fd f816 	bl	80002c0 <__aeabi_uldivmod>
 8003294:	4603      	mov	r3, r0
 8003296:	460c      	mov	r4, r1
 8003298:	461a      	mov	r2, r3
 800329a:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <UART_SetConfig+0x384>)
 800329c:	fba3 1302 	umull	r1, r3, r3, r2
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	2164      	movs	r1, #100	; 0x64
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	3332      	adds	r3, #50	; 0x32
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <UART_SetConfig+0x384>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	f003 0207 	and.w	r2, r3, #7
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4442      	add	r2, r8
 80032c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80032c2:	e1b2      	b.n	800362a <UART_SetConfig+0x6e2>
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40011400 	.word	0x40011400
 80032cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4ad7      	ldr	r2, [pc, #860]	; (8003634 <UART_SetConfig+0x6ec>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d005      	beq.n	80032e6 <UART_SetConfig+0x39e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4ad6      	ldr	r2, [pc, #856]	; (8003638 <UART_SetConfig+0x6f0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	f040 80d1 	bne.w	8003488 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80032e6:	f7fe fa8d 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 80032ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	469a      	mov	sl, r3
 80032f0:	f04f 0b00 	mov.w	fp, #0
 80032f4:	46d0      	mov	r8, sl
 80032f6:	46d9      	mov	r9, fp
 80032f8:	eb18 0308 	adds.w	r3, r8, r8
 80032fc:	eb49 0409 	adc.w	r4, r9, r9
 8003300:	4698      	mov	r8, r3
 8003302:	46a1      	mov	r9, r4
 8003304:	eb18 080a 	adds.w	r8, r8, sl
 8003308:	eb49 090b 	adc.w	r9, r9, fp
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003318:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800331c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003320:	4688      	mov	r8, r1
 8003322:	4691      	mov	r9, r2
 8003324:	eb1a 0508 	adds.w	r5, sl, r8
 8003328:	eb4b 0609 	adc.w	r6, fp, r9
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4619      	mov	r1, r3
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	f04f 0400 	mov.w	r4, #0
 800333e:	0094      	lsls	r4, r2, #2
 8003340:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003344:	008b      	lsls	r3, r1, #2
 8003346:	461a      	mov	r2, r3
 8003348:	4623      	mov	r3, r4
 800334a:	4628      	mov	r0, r5
 800334c:	4631      	mov	r1, r6
 800334e:	f7fc ffb7 	bl	80002c0 <__aeabi_uldivmod>
 8003352:	4603      	mov	r3, r0
 8003354:	460c      	mov	r4, r1
 8003356:	461a      	mov	r2, r3
 8003358:	4bb8      	ldr	r3, [pc, #736]	; (800363c <UART_SetConfig+0x6f4>)
 800335a:	fba3 2302 	umull	r2, r3, r3, r2
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	469b      	mov	fp, r3
 8003368:	f04f 0c00 	mov.w	ip, #0
 800336c:	46d9      	mov	r9, fp
 800336e:	46e2      	mov	sl, ip
 8003370:	eb19 0309 	adds.w	r3, r9, r9
 8003374:	eb4a 040a 	adc.w	r4, sl, sl
 8003378:	4699      	mov	r9, r3
 800337a:	46a2      	mov	sl, r4
 800337c:	eb19 090b 	adds.w	r9, r9, fp
 8003380:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003390:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003394:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003398:	4689      	mov	r9, r1
 800339a:	4692      	mov	sl, r2
 800339c:	eb1b 0509 	adds.w	r5, fp, r9
 80033a0:	eb4c 060a 	adc.w	r6, ip, sl
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4619      	mov	r1, r3
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	f04f 0400 	mov.w	r4, #0
 80033b6:	0094      	lsls	r4, r2, #2
 80033b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033bc:	008b      	lsls	r3, r1, #2
 80033be:	461a      	mov	r2, r3
 80033c0:	4623      	mov	r3, r4
 80033c2:	4628      	mov	r0, r5
 80033c4:	4631      	mov	r1, r6
 80033c6:	f7fc ff7b 	bl	80002c0 <__aeabi_uldivmod>
 80033ca:	4603      	mov	r3, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	461a      	mov	r2, r3
 80033d0:	4b9a      	ldr	r3, [pc, #616]	; (800363c <UART_SetConfig+0x6f4>)
 80033d2:	fba3 1302 	umull	r1, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2164      	movs	r1, #100	; 0x64
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	3332      	adds	r3, #50	; 0x32
 80033e4:	4a95      	ldr	r2, [pc, #596]	; (800363c <UART_SetConfig+0x6f4>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f0:	4498      	add	r8, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	469b      	mov	fp, r3
 80033f6:	f04f 0c00 	mov.w	ip, #0
 80033fa:	46d9      	mov	r9, fp
 80033fc:	46e2      	mov	sl, ip
 80033fe:	eb19 0309 	adds.w	r3, r9, r9
 8003402:	eb4a 040a 	adc.w	r4, sl, sl
 8003406:	4699      	mov	r9, r3
 8003408:	46a2      	mov	sl, r4
 800340a:	eb19 090b 	adds.w	r9, r9, fp
 800340e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003412:	f04f 0100 	mov.w	r1, #0
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800341e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003422:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003426:	4689      	mov	r9, r1
 8003428:	4692      	mov	sl, r2
 800342a:	eb1b 0509 	adds.w	r5, fp, r9
 800342e:	eb4c 060a 	adc.w	r6, ip, sl
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4619      	mov	r1, r3
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	f04f 0400 	mov.w	r4, #0
 8003444:	0094      	lsls	r4, r2, #2
 8003446:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800344a:	008b      	lsls	r3, r1, #2
 800344c:	461a      	mov	r2, r3
 800344e:	4623      	mov	r3, r4
 8003450:	4628      	mov	r0, r5
 8003452:	4631      	mov	r1, r6
 8003454:	f7fc ff34 	bl	80002c0 <__aeabi_uldivmod>
 8003458:	4603      	mov	r3, r0
 800345a:	460c      	mov	r4, r1
 800345c:	461a      	mov	r2, r3
 800345e:	4b77      	ldr	r3, [pc, #476]	; (800363c <UART_SetConfig+0x6f4>)
 8003460:	fba3 1302 	umull	r1, r3, r3, r2
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	2164      	movs	r1, #100	; 0x64
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	3332      	adds	r3, #50	; 0x32
 8003472:	4a72      	ldr	r2, [pc, #456]	; (800363c <UART_SetConfig+0x6f4>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	f003 020f 	and.w	r2, r3, #15
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4442      	add	r2, r8
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	e0d0      	b.n	800362a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7fe f9a8 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 800348c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	469a      	mov	sl, r3
 8003492:	f04f 0b00 	mov.w	fp, #0
 8003496:	46d0      	mov	r8, sl
 8003498:	46d9      	mov	r9, fp
 800349a:	eb18 0308 	adds.w	r3, r8, r8
 800349e:	eb49 0409 	adc.w	r4, r9, r9
 80034a2:	4698      	mov	r8, r3
 80034a4:	46a1      	mov	r9, r4
 80034a6:	eb18 080a 	adds.w	r8, r8, sl
 80034aa:	eb49 090b 	adc.w	r9, r9, fp
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034c2:	4688      	mov	r8, r1
 80034c4:	4691      	mov	r9, r2
 80034c6:	eb1a 0508 	adds.w	r5, sl, r8
 80034ca:	eb4b 0609 	adc.w	r6, fp, r9
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4619      	mov	r1, r3
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	f04f 0400 	mov.w	r4, #0
 80034e0:	0094      	lsls	r4, r2, #2
 80034e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034e6:	008b      	lsls	r3, r1, #2
 80034e8:	461a      	mov	r2, r3
 80034ea:	4623      	mov	r3, r4
 80034ec:	4628      	mov	r0, r5
 80034ee:	4631      	mov	r1, r6
 80034f0:	f7fc fee6 	bl	80002c0 <__aeabi_uldivmod>
 80034f4:	4603      	mov	r3, r0
 80034f6:	460c      	mov	r4, r1
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b50      	ldr	r3, [pc, #320]	; (800363c <UART_SetConfig+0x6f4>)
 80034fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	469b      	mov	fp, r3
 800350a:	f04f 0c00 	mov.w	ip, #0
 800350e:	46d9      	mov	r9, fp
 8003510:	46e2      	mov	sl, ip
 8003512:	eb19 0309 	adds.w	r3, r9, r9
 8003516:	eb4a 040a 	adc.w	r4, sl, sl
 800351a:	4699      	mov	r9, r3
 800351c:	46a2      	mov	sl, r4
 800351e:	eb19 090b 	adds.w	r9, r9, fp
 8003522:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003532:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003536:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800353a:	4689      	mov	r9, r1
 800353c:	4692      	mov	sl, r2
 800353e:	eb1b 0509 	adds.w	r5, fp, r9
 8003542:	eb4c 060a 	adc.w	r6, ip, sl
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	f04f 0400 	mov.w	r4, #0
 8003558:	0094      	lsls	r4, r2, #2
 800355a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800355e:	008b      	lsls	r3, r1, #2
 8003560:	461a      	mov	r2, r3
 8003562:	4623      	mov	r3, r4
 8003564:	4628      	mov	r0, r5
 8003566:	4631      	mov	r1, r6
 8003568:	f7fc feaa 	bl	80002c0 <__aeabi_uldivmod>
 800356c:	4603      	mov	r3, r0
 800356e:	460c      	mov	r4, r1
 8003570:	461a      	mov	r2, r3
 8003572:	4b32      	ldr	r3, [pc, #200]	; (800363c <UART_SetConfig+0x6f4>)
 8003574:	fba3 1302 	umull	r1, r3, r3, r2
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	2164      	movs	r1, #100	; 0x64
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	3332      	adds	r3, #50	; 0x32
 8003586:	4a2d      	ldr	r2, [pc, #180]	; (800363c <UART_SetConfig+0x6f4>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003592:	4498      	add	r8, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	469b      	mov	fp, r3
 8003598:	f04f 0c00 	mov.w	ip, #0
 800359c:	46d9      	mov	r9, fp
 800359e:	46e2      	mov	sl, ip
 80035a0:	eb19 0309 	adds.w	r3, r9, r9
 80035a4:	eb4a 040a 	adc.w	r4, sl, sl
 80035a8:	4699      	mov	r9, r3
 80035aa:	46a2      	mov	sl, r4
 80035ac:	eb19 090b 	adds.w	r9, r9, fp
 80035b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035c8:	4689      	mov	r9, r1
 80035ca:	4692      	mov	sl, r2
 80035cc:	eb1b 0509 	adds.w	r5, fp, r9
 80035d0:	eb4c 060a 	adc.w	r6, ip, sl
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4619      	mov	r1, r3
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	f04f 0400 	mov.w	r4, #0
 80035e6:	0094      	lsls	r4, r2, #2
 80035e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035ec:	008b      	lsls	r3, r1, #2
 80035ee:	461a      	mov	r2, r3
 80035f0:	4623      	mov	r3, r4
 80035f2:	4628      	mov	r0, r5
 80035f4:	4631      	mov	r1, r6
 80035f6:	f7fc fe63 	bl	80002c0 <__aeabi_uldivmod>
 80035fa:	4603      	mov	r3, r0
 80035fc:	460c      	mov	r4, r1
 80035fe:	461a      	mov	r2, r3
 8003600:	4b0e      	ldr	r3, [pc, #56]	; (800363c <UART_SetConfig+0x6f4>)
 8003602:	fba3 1302 	umull	r1, r3, r3, r2
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2164      	movs	r1, #100	; 0x64
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	3332      	adds	r3, #50	; 0x32
 8003614:	4a09      	ldr	r2, [pc, #36]	; (800363c <UART_SetConfig+0x6f4>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	f003 020f 	and.w	r2, r3, #15
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4442      	add	r2, r8
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	e7ff      	b.n	800362a <UART_SetConfig+0x6e2>
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003634:	40011000 	.word	0x40011000
 8003638:	40011400 	.word	0x40011400
 800363c:	51eb851f 	.word	0x51eb851f

08003640 <__errno>:
 8003640:	4b01      	ldr	r3, [pc, #4]	; (8003648 <__errno+0x8>)
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	2000000c 	.word	0x2000000c

0800364c <__libc_init_array>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	4e0d      	ldr	r6, [pc, #52]	; (8003684 <__libc_init_array+0x38>)
 8003650:	4c0d      	ldr	r4, [pc, #52]	; (8003688 <__libc_init_array+0x3c>)
 8003652:	1ba4      	subs	r4, r4, r6
 8003654:	10a4      	asrs	r4, r4, #2
 8003656:	2500      	movs	r5, #0
 8003658:	42a5      	cmp	r5, r4
 800365a:	d109      	bne.n	8003670 <__libc_init_array+0x24>
 800365c:	4e0b      	ldr	r6, [pc, #44]	; (800368c <__libc_init_array+0x40>)
 800365e:	4c0c      	ldr	r4, [pc, #48]	; (8003690 <__libc_init_array+0x44>)
 8003660:	f000 fc26 	bl	8003eb0 <_init>
 8003664:	1ba4      	subs	r4, r4, r6
 8003666:	10a4      	asrs	r4, r4, #2
 8003668:	2500      	movs	r5, #0
 800366a:	42a5      	cmp	r5, r4
 800366c:	d105      	bne.n	800367a <__libc_init_array+0x2e>
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003674:	4798      	blx	r3
 8003676:	3501      	adds	r5, #1
 8003678:	e7ee      	b.n	8003658 <__libc_init_array+0xc>
 800367a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800367e:	4798      	blx	r3
 8003680:	3501      	adds	r5, #1
 8003682:	e7f2      	b.n	800366a <__libc_init_array+0x1e>
 8003684:	08003f3c 	.word	0x08003f3c
 8003688:	08003f3c 	.word	0x08003f3c
 800368c:	08003f3c 	.word	0x08003f3c
 8003690:	08003f40 	.word	0x08003f40

08003694 <memset>:
 8003694:	4402      	add	r2, r0
 8003696:	4603      	mov	r3, r0
 8003698:	4293      	cmp	r3, r2
 800369a:	d100      	bne.n	800369e <memset+0xa>
 800369c:	4770      	bx	lr
 800369e:	f803 1b01 	strb.w	r1, [r3], #1
 80036a2:	e7f9      	b.n	8003698 <memset+0x4>

080036a4 <siprintf>:
 80036a4:	b40e      	push	{r1, r2, r3}
 80036a6:	b500      	push	{lr}
 80036a8:	b09c      	sub	sp, #112	; 0x70
 80036aa:	ab1d      	add	r3, sp, #116	; 0x74
 80036ac:	9002      	str	r0, [sp, #8]
 80036ae:	9006      	str	r0, [sp, #24]
 80036b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036b4:	4809      	ldr	r0, [pc, #36]	; (80036dc <siprintf+0x38>)
 80036b6:	9107      	str	r1, [sp, #28]
 80036b8:	9104      	str	r1, [sp, #16]
 80036ba:	4909      	ldr	r1, [pc, #36]	; (80036e0 <siprintf+0x3c>)
 80036bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80036c0:	9105      	str	r1, [sp, #20]
 80036c2:	6800      	ldr	r0, [r0, #0]
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	a902      	add	r1, sp, #8
 80036c8:	f000 f866 	bl	8003798 <_svfiprintf_r>
 80036cc:	9b02      	ldr	r3, [sp, #8]
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	b01c      	add	sp, #112	; 0x70
 80036d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80036d8:	b003      	add	sp, #12
 80036da:	4770      	bx	lr
 80036dc:	2000000c 	.word	0x2000000c
 80036e0:	ffff0208 	.word	0xffff0208

080036e4 <__ssputs_r>:
 80036e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e8:	688e      	ldr	r6, [r1, #8]
 80036ea:	429e      	cmp	r6, r3
 80036ec:	4682      	mov	sl, r0
 80036ee:	460c      	mov	r4, r1
 80036f0:	4690      	mov	r8, r2
 80036f2:	4699      	mov	r9, r3
 80036f4:	d837      	bhi.n	8003766 <__ssputs_r+0x82>
 80036f6:	898a      	ldrh	r2, [r1, #12]
 80036f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036fc:	d031      	beq.n	8003762 <__ssputs_r+0x7e>
 80036fe:	6825      	ldr	r5, [r4, #0]
 8003700:	6909      	ldr	r1, [r1, #16]
 8003702:	1a6f      	subs	r7, r5, r1
 8003704:	6965      	ldr	r5, [r4, #20]
 8003706:	2302      	movs	r3, #2
 8003708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800370c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003710:	f109 0301 	add.w	r3, r9, #1
 8003714:	443b      	add	r3, r7
 8003716:	429d      	cmp	r5, r3
 8003718:	bf38      	it	cc
 800371a:	461d      	movcc	r5, r3
 800371c:	0553      	lsls	r3, r2, #21
 800371e:	d530      	bpl.n	8003782 <__ssputs_r+0x9e>
 8003720:	4629      	mov	r1, r5
 8003722:	f000 fb2b 	bl	8003d7c <_malloc_r>
 8003726:	4606      	mov	r6, r0
 8003728:	b950      	cbnz	r0, 8003740 <__ssputs_r+0x5c>
 800372a:	230c      	movs	r3, #12
 800372c:	f8ca 3000 	str.w	r3, [sl]
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003736:	81a3      	strh	r3, [r4, #12]
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003740:	463a      	mov	r2, r7
 8003742:	6921      	ldr	r1, [r4, #16]
 8003744:	f000 faa8 	bl	8003c98 <memcpy>
 8003748:	89a3      	ldrh	r3, [r4, #12]
 800374a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800374e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003752:	81a3      	strh	r3, [r4, #12]
 8003754:	6126      	str	r6, [r4, #16]
 8003756:	6165      	str	r5, [r4, #20]
 8003758:	443e      	add	r6, r7
 800375a:	1bed      	subs	r5, r5, r7
 800375c:	6026      	str	r6, [r4, #0]
 800375e:	60a5      	str	r5, [r4, #8]
 8003760:	464e      	mov	r6, r9
 8003762:	454e      	cmp	r6, r9
 8003764:	d900      	bls.n	8003768 <__ssputs_r+0x84>
 8003766:	464e      	mov	r6, r9
 8003768:	4632      	mov	r2, r6
 800376a:	4641      	mov	r1, r8
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	f000 fa9e 	bl	8003cae <memmove>
 8003772:	68a3      	ldr	r3, [r4, #8]
 8003774:	1b9b      	subs	r3, r3, r6
 8003776:	60a3      	str	r3, [r4, #8]
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	441e      	add	r6, r3
 800377c:	6026      	str	r6, [r4, #0]
 800377e:	2000      	movs	r0, #0
 8003780:	e7dc      	b.n	800373c <__ssputs_r+0x58>
 8003782:	462a      	mov	r2, r5
 8003784:	f000 fb54 	bl	8003e30 <_realloc_r>
 8003788:	4606      	mov	r6, r0
 800378a:	2800      	cmp	r0, #0
 800378c:	d1e2      	bne.n	8003754 <__ssputs_r+0x70>
 800378e:	6921      	ldr	r1, [r4, #16]
 8003790:	4650      	mov	r0, sl
 8003792:	f000 faa5 	bl	8003ce0 <_free_r>
 8003796:	e7c8      	b.n	800372a <__ssputs_r+0x46>

08003798 <_svfiprintf_r>:
 8003798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800379c:	461d      	mov	r5, r3
 800379e:	898b      	ldrh	r3, [r1, #12]
 80037a0:	061f      	lsls	r7, r3, #24
 80037a2:	b09d      	sub	sp, #116	; 0x74
 80037a4:	4680      	mov	r8, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	4616      	mov	r6, r2
 80037aa:	d50f      	bpl.n	80037cc <_svfiprintf_r+0x34>
 80037ac:	690b      	ldr	r3, [r1, #16]
 80037ae:	b96b      	cbnz	r3, 80037cc <_svfiprintf_r+0x34>
 80037b0:	2140      	movs	r1, #64	; 0x40
 80037b2:	f000 fae3 	bl	8003d7c <_malloc_r>
 80037b6:	6020      	str	r0, [r4, #0]
 80037b8:	6120      	str	r0, [r4, #16]
 80037ba:	b928      	cbnz	r0, 80037c8 <_svfiprintf_r+0x30>
 80037bc:	230c      	movs	r3, #12
 80037be:	f8c8 3000 	str.w	r3, [r8]
 80037c2:	f04f 30ff 	mov.w	r0, #4294967295
 80037c6:	e0c8      	b.n	800395a <_svfiprintf_r+0x1c2>
 80037c8:	2340      	movs	r3, #64	; 0x40
 80037ca:	6163      	str	r3, [r4, #20]
 80037cc:	2300      	movs	r3, #0
 80037ce:	9309      	str	r3, [sp, #36]	; 0x24
 80037d0:	2320      	movs	r3, #32
 80037d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037d6:	2330      	movs	r3, #48	; 0x30
 80037d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037dc:	9503      	str	r5, [sp, #12]
 80037de:	f04f 0b01 	mov.w	fp, #1
 80037e2:	4637      	mov	r7, r6
 80037e4:	463d      	mov	r5, r7
 80037e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80037ea:	b10b      	cbz	r3, 80037f0 <_svfiprintf_r+0x58>
 80037ec:	2b25      	cmp	r3, #37	; 0x25
 80037ee:	d13e      	bne.n	800386e <_svfiprintf_r+0xd6>
 80037f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80037f4:	d00b      	beq.n	800380e <_svfiprintf_r+0x76>
 80037f6:	4653      	mov	r3, sl
 80037f8:	4632      	mov	r2, r6
 80037fa:	4621      	mov	r1, r4
 80037fc:	4640      	mov	r0, r8
 80037fe:	f7ff ff71 	bl	80036e4 <__ssputs_r>
 8003802:	3001      	adds	r0, #1
 8003804:	f000 80a4 	beq.w	8003950 <_svfiprintf_r+0x1b8>
 8003808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800380a:	4453      	add	r3, sl
 800380c:	9309      	str	r3, [sp, #36]	; 0x24
 800380e:	783b      	ldrb	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 809d 	beq.w	8003950 <_svfiprintf_r+0x1b8>
 8003816:	2300      	movs	r3, #0
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003820:	9304      	str	r3, [sp, #16]
 8003822:	9307      	str	r3, [sp, #28]
 8003824:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003828:	931a      	str	r3, [sp, #104]	; 0x68
 800382a:	462f      	mov	r7, r5
 800382c:	2205      	movs	r2, #5
 800382e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003832:	4850      	ldr	r0, [pc, #320]	; (8003974 <_svfiprintf_r+0x1dc>)
 8003834:	f7fc fcf4 	bl	8000220 <memchr>
 8003838:	9b04      	ldr	r3, [sp, #16]
 800383a:	b9d0      	cbnz	r0, 8003872 <_svfiprintf_r+0xda>
 800383c:	06d9      	lsls	r1, r3, #27
 800383e:	bf44      	itt	mi
 8003840:	2220      	movmi	r2, #32
 8003842:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003846:	071a      	lsls	r2, r3, #28
 8003848:	bf44      	itt	mi
 800384a:	222b      	movmi	r2, #43	; 0x2b
 800384c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003850:	782a      	ldrb	r2, [r5, #0]
 8003852:	2a2a      	cmp	r2, #42	; 0x2a
 8003854:	d015      	beq.n	8003882 <_svfiprintf_r+0xea>
 8003856:	9a07      	ldr	r2, [sp, #28]
 8003858:	462f      	mov	r7, r5
 800385a:	2000      	movs	r0, #0
 800385c:	250a      	movs	r5, #10
 800385e:	4639      	mov	r1, r7
 8003860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003864:	3b30      	subs	r3, #48	; 0x30
 8003866:	2b09      	cmp	r3, #9
 8003868:	d94d      	bls.n	8003906 <_svfiprintf_r+0x16e>
 800386a:	b1b8      	cbz	r0, 800389c <_svfiprintf_r+0x104>
 800386c:	e00f      	b.n	800388e <_svfiprintf_r+0xf6>
 800386e:	462f      	mov	r7, r5
 8003870:	e7b8      	b.n	80037e4 <_svfiprintf_r+0x4c>
 8003872:	4a40      	ldr	r2, [pc, #256]	; (8003974 <_svfiprintf_r+0x1dc>)
 8003874:	1a80      	subs	r0, r0, r2
 8003876:	fa0b f000 	lsl.w	r0, fp, r0
 800387a:	4318      	orrs	r0, r3
 800387c:	9004      	str	r0, [sp, #16]
 800387e:	463d      	mov	r5, r7
 8003880:	e7d3      	b.n	800382a <_svfiprintf_r+0x92>
 8003882:	9a03      	ldr	r2, [sp, #12]
 8003884:	1d11      	adds	r1, r2, #4
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	9103      	str	r1, [sp, #12]
 800388a:	2a00      	cmp	r2, #0
 800388c:	db01      	blt.n	8003892 <_svfiprintf_r+0xfa>
 800388e:	9207      	str	r2, [sp, #28]
 8003890:	e004      	b.n	800389c <_svfiprintf_r+0x104>
 8003892:	4252      	negs	r2, r2
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	9207      	str	r2, [sp, #28]
 800389a:	9304      	str	r3, [sp, #16]
 800389c:	783b      	ldrb	r3, [r7, #0]
 800389e:	2b2e      	cmp	r3, #46	; 0x2e
 80038a0:	d10c      	bne.n	80038bc <_svfiprintf_r+0x124>
 80038a2:	787b      	ldrb	r3, [r7, #1]
 80038a4:	2b2a      	cmp	r3, #42	; 0x2a
 80038a6:	d133      	bne.n	8003910 <_svfiprintf_r+0x178>
 80038a8:	9b03      	ldr	r3, [sp, #12]
 80038aa:	1d1a      	adds	r2, r3, #4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	9203      	str	r2, [sp, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bfb8      	it	lt
 80038b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80038b8:	3702      	adds	r7, #2
 80038ba:	9305      	str	r3, [sp, #20]
 80038bc:	4d2e      	ldr	r5, [pc, #184]	; (8003978 <_svfiprintf_r+0x1e0>)
 80038be:	7839      	ldrb	r1, [r7, #0]
 80038c0:	2203      	movs	r2, #3
 80038c2:	4628      	mov	r0, r5
 80038c4:	f7fc fcac 	bl	8000220 <memchr>
 80038c8:	b138      	cbz	r0, 80038da <_svfiprintf_r+0x142>
 80038ca:	2340      	movs	r3, #64	; 0x40
 80038cc:	1b40      	subs	r0, r0, r5
 80038ce:	fa03 f000 	lsl.w	r0, r3, r0
 80038d2:	9b04      	ldr	r3, [sp, #16]
 80038d4:	4303      	orrs	r3, r0
 80038d6:	3701      	adds	r7, #1
 80038d8:	9304      	str	r3, [sp, #16]
 80038da:	7839      	ldrb	r1, [r7, #0]
 80038dc:	4827      	ldr	r0, [pc, #156]	; (800397c <_svfiprintf_r+0x1e4>)
 80038de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038e2:	2206      	movs	r2, #6
 80038e4:	1c7e      	adds	r6, r7, #1
 80038e6:	f7fc fc9b 	bl	8000220 <memchr>
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d038      	beq.n	8003960 <_svfiprintf_r+0x1c8>
 80038ee:	4b24      	ldr	r3, [pc, #144]	; (8003980 <_svfiprintf_r+0x1e8>)
 80038f0:	bb13      	cbnz	r3, 8003938 <_svfiprintf_r+0x1a0>
 80038f2:	9b03      	ldr	r3, [sp, #12]
 80038f4:	3307      	adds	r3, #7
 80038f6:	f023 0307 	bic.w	r3, r3, #7
 80038fa:	3308      	adds	r3, #8
 80038fc:	9303      	str	r3, [sp, #12]
 80038fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003900:	444b      	add	r3, r9
 8003902:	9309      	str	r3, [sp, #36]	; 0x24
 8003904:	e76d      	b.n	80037e2 <_svfiprintf_r+0x4a>
 8003906:	fb05 3202 	mla	r2, r5, r2, r3
 800390a:	2001      	movs	r0, #1
 800390c:	460f      	mov	r7, r1
 800390e:	e7a6      	b.n	800385e <_svfiprintf_r+0xc6>
 8003910:	2300      	movs	r3, #0
 8003912:	3701      	adds	r7, #1
 8003914:	9305      	str	r3, [sp, #20]
 8003916:	4619      	mov	r1, r3
 8003918:	250a      	movs	r5, #10
 800391a:	4638      	mov	r0, r7
 800391c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003920:	3a30      	subs	r2, #48	; 0x30
 8003922:	2a09      	cmp	r2, #9
 8003924:	d903      	bls.n	800392e <_svfiprintf_r+0x196>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0c8      	beq.n	80038bc <_svfiprintf_r+0x124>
 800392a:	9105      	str	r1, [sp, #20]
 800392c:	e7c6      	b.n	80038bc <_svfiprintf_r+0x124>
 800392e:	fb05 2101 	mla	r1, r5, r1, r2
 8003932:	2301      	movs	r3, #1
 8003934:	4607      	mov	r7, r0
 8003936:	e7f0      	b.n	800391a <_svfiprintf_r+0x182>
 8003938:	ab03      	add	r3, sp, #12
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	4622      	mov	r2, r4
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <_svfiprintf_r+0x1ec>)
 8003940:	a904      	add	r1, sp, #16
 8003942:	4640      	mov	r0, r8
 8003944:	f3af 8000 	nop.w
 8003948:	f1b0 3fff 	cmp.w	r0, #4294967295
 800394c:	4681      	mov	r9, r0
 800394e:	d1d6      	bne.n	80038fe <_svfiprintf_r+0x166>
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	065b      	lsls	r3, r3, #25
 8003954:	f53f af35 	bmi.w	80037c2 <_svfiprintf_r+0x2a>
 8003958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800395a:	b01d      	add	sp, #116	; 0x74
 800395c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003960:	ab03      	add	r3, sp, #12
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	4622      	mov	r2, r4
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <_svfiprintf_r+0x1ec>)
 8003968:	a904      	add	r1, sp, #16
 800396a:	4640      	mov	r0, r8
 800396c:	f000 f882 	bl	8003a74 <_printf_i>
 8003970:	e7ea      	b.n	8003948 <_svfiprintf_r+0x1b0>
 8003972:	bf00      	nop
 8003974:	08003f00 	.word	0x08003f00
 8003978:	08003f06 	.word	0x08003f06
 800397c:	08003f0a 	.word	0x08003f0a
 8003980:	00000000 	.word	0x00000000
 8003984:	080036e5 	.word	0x080036e5

08003988 <_printf_common>:
 8003988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800398c:	4691      	mov	r9, r2
 800398e:	461f      	mov	r7, r3
 8003990:	688a      	ldr	r2, [r1, #8]
 8003992:	690b      	ldr	r3, [r1, #16]
 8003994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003998:	4293      	cmp	r3, r2
 800399a:	bfb8      	it	lt
 800399c:	4613      	movlt	r3, r2
 800399e:	f8c9 3000 	str.w	r3, [r9]
 80039a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039a6:	4606      	mov	r6, r0
 80039a8:	460c      	mov	r4, r1
 80039aa:	b112      	cbz	r2, 80039b2 <_printf_common+0x2a>
 80039ac:	3301      	adds	r3, #1
 80039ae:	f8c9 3000 	str.w	r3, [r9]
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	0699      	lsls	r1, r3, #26
 80039b6:	bf42      	ittt	mi
 80039b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80039bc:	3302      	addmi	r3, #2
 80039be:	f8c9 3000 	strmi.w	r3, [r9]
 80039c2:	6825      	ldr	r5, [r4, #0]
 80039c4:	f015 0506 	ands.w	r5, r5, #6
 80039c8:	d107      	bne.n	80039da <_printf_common+0x52>
 80039ca:	f104 0a19 	add.w	sl, r4, #25
 80039ce:	68e3      	ldr	r3, [r4, #12]
 80039d0:	f8d9 2000 	ldr.w	r2, [r9]
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	42ab      	cmp	r3, r5
 80039d8:	dc28      	bgt.n	8003a2c <_printf_common+0xa4>
 80039da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80039de:	6822      	ldr	r2, [r4, #0]
 80039e0:	3300      	adds	r3, #0
 80039e2:	bf18      	it	ne
 80039e4:	2301      	movne	r3, #1
 80039e6:	0692      	lsls	r2, r2, #26
 80039e8:	d42d      	bmi.n	8003a46 <_printf_common+0xbe>
 80039ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039ee:	4639      	mov	r1, r7
 80039f0:	4630      	mov	r0, r6
 80039f2:	47c0      	blx	r8
 80039f4:	3001      	adds	r0, #1
 80039f6:	d020      	beq.n	8003a3a <_printf_common+0xb2>
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	68e5      	ldr	r5, [r4, #12]
 80039fc:	f8d9 2000 	ldr.w	r2, [r9]
 8003a00:	f003 0306 	and.w	r3, r3, #6
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	bf08      	it	eq
 8003a08:	1aad      	subeq	r5, r5, r2
 8003a0a:	68a3      	ldr	r3, [r4, #8]
 8003a0c:	6922      	ldr	r2, [r4, #16]
 8003a0e:	bf0c      	ite	eq
 8003a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a14:	2500      	movne	r5, #0
 8003a16:	4293      	cmp	r3, r2
 8003a18:	bfc4      	itt	gt
 8003a1a:	1a9b      	subgt	r3, r3, r2
 8003a1c:	18ed      	addgt	r5, r5, r3
 8003a1e:	f04f 0900 	mov.w	r9, #0
 8003a22:	341a      	adds	r4, #26
 8003a24:	454d      	cmp	r5, r9
 8003a26:	d11a      	bne.n	8003a5e <_printf_common+0xd6>
 8003a28:	2000      	movs	r0, #0
 8003a2a:	e008      	b.n	8003a3e <_printf_common+0xb6>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	4652      	mov	r2, sl
 8003a30:	4639      	mov	r1, r7
 8003a32:	4630      	mov	r0, r6
 8003a34:	47c0      	blx	r8
 8003a36:	3001      	adds	r0, #1
 8003a38:	d103      	bne.n	8003a42 <_printf_common+0xba>
 8003a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a42:	3501      	adds	r5, #1
 8003a44:	e7c3      	b.n	80039ce <_printf_common+0x46>
 8003a46:	18e1      	adds	r1, r4, r3
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	2030      	movs	r0, #48	; 0x30
 8003a4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a50:	4422      	add	r2, r4
 8003a52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	e7c5      	b.n	80039ea <_printf_common+0x62>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	4622      	mov	r2, r4
 8003a62:	4639      	mov	r1, r7
 8003a64:	4630      	mov	r0, r6
 8003a66:	47c0      	blx	r8
 8003a68:	3001      	adds	r0, #1
 8003a6a:	d0e6      	beq.n	8003a3a <_printf_common+0xb2>
 8003a6c:	f109 0901 	add.w	r9, r9, #1
 8003a70:	e7d8      	b.n	8003a24 <_printf_common+0x9c>
	...

08003a74 <_printf_i>:
 8003a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	7e09      	ldrb	r1, [r1, #24]
 8003a80:	b085      	sub	sp, #20
 8003a82:	296e      	cmp	r1, #110	; 0x6e
 8003a84:	4617      	mov	r7, r2
 8003a86:	4606      	mov	r6, r0
 8003a88:	4698      	mov	r8, r3
 8003a8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a8c:	f000 80b3 	beq.w	8003bf6 <_printf_i+0x182>
 8003a90:	d822      	bhi.n	8003ad8 <_printf_i+0x64>
 8003a92:	2963      	cmp	r1, #99	; 0x63
 8003a94:	d036      	beq.n	8003b04 <_printf_i+0x90>
 8003a96:	d80a      	bhi.n	8003aae <_printf_i+0x3a>
 8003a98:	2900      	cmp	r1, #0
 8003a9a:	f000 80b9 	beq.w	8003c10 <_printf_i+0x19c>
 8003a9e:	2958      	cmp	r1, #88	; 0x58
 8003aa0:	f000 8083 	beq.w	8003baa <_printf_i+0x136>
 8003aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aa8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003aac:	e032      	b.n	8003b14 <_printf_i+0xa0>
 8003aae:	2964      	cmp	r1, #100	; 0x64
 8003ab0:	d001      	beq.n	8003ab6 <_printf_i+0x42>
 8003ab2:	2969      	cmp	r1, #105	; 0x69
 8003ab4:	d1f6      	bne.n	8003aa4 <_printf_i+0x30>
 8003ab6:	6820      	ldr	r0, [r4, #0]
 8003ab8:	6813      	ldr	r3, [r2, #0]
 8003aba:	0605      	lsls	r5, r0, #24
 8003abc:	f103 0104 	add.w	r1, r3, #4
 8003ac0:	d52a      	bpl.n	8003b18 <_printf_i+0xa4>
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6011      	str	r1, [r2, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	da03      	bge.n	8003ad2 <_printf_i+0x5e>
 8003aca:	222d      	movs	r2, #45	; 0x2d
 8003acc:	425b      	negs	r3, r3
 8003ace:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ad2:	486f      	ldr	r0, [pc, #444]	; (8003c90 <_printf_i+0x21c>)
 8003ad4:	220a      	movs	r2, #10
 8003ad6:	e039      	b.n	8003b4c <_printf_i+0xd8>
 8003ad8:	2973      	cmp	r1, #115	; 0x73
 8003ada:	f000 809d 	beq.w	8003c18 <_printf_i+0x1a4>
 8003ade:	d808      	bhi.n	8003af2 <_printf_i+0x7e>
 8003ae0:	296f      	cmp	r1, #111	; 0x6f
 8003ae2:	d020      	beq.n	8003b26 <_printf_i+0xb2>
 8003ae4:	2970      	cmp	r1, #112	; 0x70
 8003ae6:	d1dd      	bne.n	8003aa4 <_printf_i+0x30>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	f043 0320 	orr.w	r3, r3, #32
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	e003      	b.n	8003afa <_printf_i+0x86>
 8003af2:	2975      	cmp	r1, #117	; 0x75
 8003af4:	d017      	beq.n	8003b26 <_printf_i+0xb2>
 8003af6:	2978      	cmp	r1, #120	; 0x78
 8003af8:	d1d4      	bne.n	8003aa4 <_printf_i+0x30>
 8003afa:	2378      	movs	r3, #120	; 0x78
 8003afc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b00:	4864      	ldr	r0, [pc, #400]	; (8003c94 <_printf_i+0x220>)
 8003b02:	e055      	b.n	8003bb0 <_printf_i+0x13c>
 8003b04:	6813      	ldr	r3, [r2, #0]
 8003b06:	1d19      	adds	r1, r3, #4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6011      	str	r1, [r2, #0]
 8003b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b14:	2301      	movs	r3, #1
 8003b16:	e08c      	b.n	8003c32 <_printf_i+0x1be>
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6011      	str	r1, [r2, #0]
 8003b1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b20:	bf18      	it	ne
 8003b22:	b21b      	sxthne	r3, r3
 8003b24:	e7cf      	b.n	8003ac6 <_printf_i+0x52>
 8003b26:	6813      	ldr	r3, [r2, #0]
 8003b28:	6825      	ldr	r5, [r4, #0]
 8003b2a:	1d18      	adds	r0, r3, #4
 8003b2c:	6010      	str	r0, [r2, #0]
 8003b2e:	0628      	lsls	r0, r5, #24
 8003b30:	d501      	bpl.n	8003b36 <_printf_i+0xc2>
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	e002      	b.n	8003b3c <_printf_i+0xc8>
 8003b36:	0668      	lsls	r0, r5, #25
 8003b38:	d5fb      	bpl.n	8003b32 <_printf_i+0xbe>
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	4854      	ldr	r0, [pc, #336]	; (8003c90 <_printf_i+0x21c>)
 8003b3e:	296f      	cmp	r1, #111	; 0x6f
 8003b40:	bf14      	ite	ne
 8003b42:	220a      	movne	r2, #10
 8003b44:	2208      	moveq	r2, #8
 8003b46:	2100      	movs	r1, #0
 8003b48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b4c:	6865      	ldr	r5, [r4, #4]
 8003b4e:	60a5      	str	r5, [r4, #8]
 8003b50:	2d00      	cmp	r5, #0
 8003b52:	f2c0 8095 	blt.w	8003c80 <_printf_i+0x20c>
 8003b56:	6821      	ldr	r1, [r4, #0]
 8003b58:	f021 0104 	bic.w	r1, r1, #4
 8003b5c:	6021      	str	r1, [r4, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d13d      	bne.n	8003bde <_printf_i+0x16a>
 8003b62:	2d00      	cmp	r5, #0
 8003b64:	f040 808e 	bne.w	8003c84 <_printf_i+0x210>
 8003b68:	4665      	mov	r5, ip
 8003b6a:	2a08      	cmp	r2, #8
 8003b6c:	d10b      	bne.n	8003b86 <_printf_i+0x112>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	07db      	lsls	r3, r3, #31
 8003b72:	d508      	bpl.n	8003b86 <_printf_i+0x112>
 8003b74:	6923      	ldr	r3, [r4, #16]
 8003b76:	6862      	ldr	r2, [r4, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	bfde      	ittt	le
 8003b7c:	2330      	movle	r3, #48	; 0x30
 8003b7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b86:	ebac 0305 	sub.w	r3, ip, r5
 8003b8a:	6123      	str	r3, [r4, #16]
 8003b8c:	f8cd 8000 	str.w	r8, [sp]
 8003b90:	463b      	mov	r3, r7
 8003b92:	aa03      	add	r2, sp, #12
 8003b94:	4621      	mov	r1, r4
 8003b96:	4630      	mov	r0, r6
 8003b98:	f7ff fef6 	bl	8003988 <_printf_common>
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d14d      	bne.n	8003c3c <_printf_i+0x1c8>
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	b005      	add	sp, #20
 8003ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003baa:	4839      	ldr	r0, [pc, #228]	; (8003c90 <_printf_i+0x21c>)
 8003bac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003bb0:	6813      	ldr	r3, [r2, #0]
 8003bb2:	6821      	ldr	r1, [r4, #0]
 8003bb4:	1d1d      	adds	r5, r3, #4
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6015      	str	r5, [r2, #0]
 8003bba:	060a      	lsls	r2, r1, #24
 8003bbc:	d50b      	bpl.n	8003bd6 <_printf_i+0x162>
 8003bbe:	07ca      	lsls	r2, r1, #31
 8003bc0:	bf44      	itt	mi
 8003bc2:	f041 0120 	orrmi.w	r1, r1, #32
 8003bc6:	6021      	strmi	r1, [r4, #0]
 8003bc8:	b91b      	cbnz	r3, 8003bd2 <_printf_i+0x15e>
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	f022 0220 	bic.w	r2, r2, #32
 8003bd0:	6022      	str	r2, [r4, #0]
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	e7b7      	b.n	8003b46 <_printf_i+0xd2>
 8003bd6:	064d      	lsls	r5, r1, #25
 8003bd8:	bf48      	it	mi
 8003bda:	b29b      	uxthmi	r3, r3
 8003bdc:	e7ef      	b.n	8003bbe <_printf_i+0x14a>
 8003bde:	4665      	mov	r5, ip
 8003be0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003be4:	fb02 3311 	mls	r3, r2, r1, r3
 8003be8:	5cc3      	ldrb	r3, [r0, r3]
 8003bea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003bee:	460b      	mov	r3, r1
 8003bf0:	2900      	cmp	r1, #0
 8003bf2:	d1f5      	bne.n	8003be0 <_printf_i+0x16c>
 8003bf4:	e7b9      	b.n	8003b6a <_printf_i+0xf6>
 8003bf6:	6813      	ldr	r3, [r2, #0]
 8003bf8:	6825      	ldr	r5, [r4, #0]
 8003bfa:	6961      	ldr	r1, [r4, #20]
 8003bfc:	1d18      	adds	r0, r3, #4
 8003bfe:	6010      	str	r0, [r2, #0]
 8003c00:	0628      	lsls	r0, r5, #24
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	d501      	bpl.n	8003c0a <_printf_i+0x196>
 8003c06:	6019      	str	r1, [r3, #0]
 8003c08:	e002      	b.n	8003c10 <_printf_i+0x19c>
 8003c0a:	066a      	lsls	r2, r5, #25
 8003c0c:	d5fb      	bpl.n	8003c06 <_printf_i+0x192>
 8003c0e:	8019      	strh	r1, [r3, #0]
 8003c10:	2300      	movs	r3, #0
 8003c12:	6123      	str	r3, [r4, #16]
 8003c14:	4665      	mov	r5, ip
 8003c16:	e7b9      	b.n	8003b8c <_printf_i+0x118>
 8003c18:	6813      	ldr	r3, [r2, #0]
 8003c1a:	1d19      	adds	r1, r3, #4
 8003c1c:	6011      	str	r1, [r2, #0]
 8003c1e:	681d      	ldr	r5, [r3, #0]
 8003c20:	6862      	ldr	r2, [r4, #4]
 8003c22:	2100      	movs	r1, #0
 8003c24:	4628      	mov	r0, r5
 8003c26:	f7fc fafb 	bl	8000220 <memchr>
 8003c2a:	b108      	cbz	r0, 8003c30 <_printf_i+0x1bc>
 8003c2c:	1b40      	subs	r0, r0, r5
 8003c2e:	6060      	str	r0, [r4, #4]
 8003c30:	6863      	ldr	r3, [r4, #4]
 8003c32:	6123      	str	r3, [r4, #16]
 8003c34:	2300      	movs	r3, #0
 8003c36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c3a:	e7a7      	b.n	8003b8c <_printf_i+0x118>
 8003c3c:	6923      	ldr	r3, [r4, #16]
 8003c3e:	462a      	mov	r2, r5
 8003c40:	4639      	mov	r1, r7
 8003c42:	4630      	mov	r0, r6
 8003c44:	47c0      	blx	r8
 8003c46:	3001      	adds	r0, #1
 8003c48:	d0aa      	beq.n	8003ba0 <_printf_i+0x12c>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	079b      	lsls	r3, r3, #30
 8003c4e:	d413      	bmi.n	8003c78 <_printf_i+0x204>
 8003c50:	68e0      	ldr	r0, [r4, #12]
 8003c52:	9b03      	ldr	r3, [sp, #12]
 8003c54:	4298      	cmp	r0, r3
 8003c56:	bfb8      	it	lt
 8003c58:	4618      	movlt	r0, r3
 8003c5a:	e7a3      	b.n	8003ba4 <_printf_i+0x130>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	464a      	mov	r2, r9
 8003c60:	4639      	mov	r1, r7
 8003c62:	4630      	mov	r0, r6
 8003c64:	47c0      	blx	r8
 8003c66:	3001      	adds	r0, #1
 8003c68:	d09a      	beq.n	8003ba0 <_printf_i+0x12c>
 8003c6a:	3501      	adds	r5, #1
 8003c6c:	68e3      	ldr	r3, [r4, #12]
 8003c6e:	9a03      	ldr	r2, [sp, #12]
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	42ab      	cmp	r3, r5
 8003c74:	dcf2      	bgt.n	8003c5c <_printf_i+0x1e8>
 8003c76:	e7eb      	b.n	8003c50 <_printf_i+0x1dc>
 8003c78:	2500      	movs	r5, #0
 8003c7a:	f104 0919 	add.w	r9, r4, #25
 8003c7e:	e7f5      	b.n	8003c6c <_printf_i+0x1f8>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ac      	bne.n	8003bde <_printf_i+0x16a>
 8003c84:	7803      	ldrb	r3, [r0, #0]
 8003c86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c8e:	e76c      	b.n	8003b6a <_printf_i+0xf6>
 8003c90:	08003f11 	.word	0x08003f11
 8003c94:	08003f22 	.word	0x08003f22

08003c98 <memcpy>:
 8003c98:	b510      	push	{r4, lr}
 8003c9a:	1e43      	subs	r3, r0, #1
 8003c9c:	440a      	add	r2, r1
 8003c9e:	4291      	cmp	r1, r2
 8003ca0:	d100      	bne.n	8003ca4 <memcpy+0xc>
 8003ca2:	bd10      	pop	{r4, pc}
 8003ca4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cac:	e7f7      	b.n	8003c9e <memcpy+0x6>

08003cae <memmove>:
 8003cae:	4288      	cmp	r0, r1
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	eb01 0302 	add.w	r3, r1, r2
 8003cb6:	d807      	bhi.n	8003cc8 <memmove+0x1a>
 8003cb8:	1e42      	subs	r2, r0, #1
 8003cba:	4299      	cmp	r1, r3
 8003cbc:	d00a      	beq.n	8003cd4 <memmove+0x26>
 8003cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cc2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003cc6:	e7f8      	b.n	8003cba <memmove+0xc>
 8003cc8:	4283      	cmp	r3, r0
 8003cca:	d9f5      	bls.n	8003cb8 <memmove+0xa>
 8003ccc:	1881      	adds	r1, r0, r2
 8003cce:	1ad2      	subs	r2, r2, r3
 8003cd0:	42d3      	cmn	r3, r2
 8003cd2:	d100      	bne.n	8003cd6 <memmove+0x28>
 8003cd4:	bd10      	pop	{r4, pc}
 8003cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cda:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003cde:	e7f7      	b.n	8003cd0 <memmove+0x22>

08003ce0 <_free_r>:
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	2900      	cmp	r1, #0
 8003ce6:	d045      	beq.n	8003d74 <_free_r+0x94>
 8003ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cec:	1f0c      	subs	r4, r1, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bfb8      	it	lt
 8003cf2:	18e4      	addlt	r4, r4, r3
 8003cf4:	f000 f8d2 	bl	8003e9c <__malloc_lock>
 8003cf8:	4a1f      	ldr	r2, [pc, #124]	; (8003d78 <_free_r+0x98>)
 8003cfa:	6813      	ldr	r3, [r2, #0]
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	b933      	cbnz	r3, 8003d0e <_free_r+0x2e>
 8003d00:	6063      	str	r3, [r4, #4]
 8003d02:	6014      	str	r4, [r2, #0]
 8003d04:	4628      	mov	r0, r5
 8003d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d0a:	f000 b8c8 	b.w	8003e9e <__malloc_unlock>
 8003d0e:	42a3      	cmp	r3, r4
 8003d10:	d90c      	bls.n	8003d2c <_free_r+0x4c>
 8003d12:	6821      	ldr	r1, [r4, #0]
 8003d14:	1862      	adds	r2, r4, r1
 8003d16:	4293      	cmp	r3, r2
 8003d18:	bf04      	itt	eq
 8003d1a:	681a      	ldreq	r2, [r3, #0]
 8003d1c:	685b      	ldreq	r3, [r3, #4]
 8003d1e:	6063      	str	r3, [r4, #4]
 8003d20:	bf04      	itt	eq
 8003d22:	1852      	addeq	r2, r2, r1
 8003d24:	6022      	streq	r2, [r4, #0]
 8003d26:	6004      	str	r4, [r0, #0]
 8003d28:	e7ec      	b.n	8003d04 <_free_r+0x24>
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	b10a      	cbz	r2, 8003d34 <_free_r+0x54>
 8003d30:	42a2      	cmp	r2, r4
 8003d32:	d9fa      	bls.n	8003d2a <_free_r+0x4a>
 8003d34:	6819      	ldr	r1, [r3, #0]
 8003d36:	1858      	adds	r0, r3, r1
 8003d38:	42a0      	cmp	r0, r4
 8003d3a:	d10b      	bne.n	8003d54 <_free_r+0x74>
 8003d3c:	6820      	ldr	r0, [r4, #0]
 8003d3e:	4401      	add	r1, r0
 8003d40:	1858      	adds	r0, r3, r1
 8003d42:	4282      	cmp	r2, r0
 8003d44:	6019      	str	r1, [r3, #0]
 8003d46:	d1dd      	bne.n	8003d04 <_free_r+0x24>
 8003d48:	6810      	ldr	r0, [r2, #0]
 8003d4a:	6852      	ldr	r2, [r2, #4]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	4401      	add	r1, r0
 8003d50:	6019      	str	r1, [r3, #0]
 8003d52:	e7d7      	b.n	8003d04 <_free_r+0x24>
 8003d54:	d902      	bls.n	8003d5c <_free_r+0x7c>
 8003d56:	230c      	movs	r3, #12
 8003d58:	602b      	str	r3, [r5, #0]
 8003d5a:	e7d3      	b.n	8003d04 <_free_r+0x24>
 8003d5c:	6820      	ldr	r0, [r4, #0]
 8003d5e:	1821      	adds	r1, r4, r0
 8003d60:	428a      	cmp	r2, r1
 8003d62:	bf04      	itt	eq
 8003d64:	6811      	ldreq	r1, [r2, #0]
 8003d66:	6852      	ldreq	r2, [r2, #4]
 8003d68:	6062      	str	r2, [r4, #4]
 8003d6a:	bf04      	itt	eq
 8003d6c:	1809      	addeq	r1, r1, r0
 8003d6e:	6021      	streq	r1, [r4, #0]
 8003d70:	605c      	str	r4, [r3, #4]
 8003d72:	e7c7      	b.n	8003d04 <_free_r+0x24>
 8003d74:	bd38      	pop	{r3, r4, r5, pc}
 8003d76:	bf00      	nop
 8003d78:	20000094 	.word	0x20000094

08003d7c <_malloc_r>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	1ccd      	adds	r5, r1, #3
 8003d80:	f025 0503 	bic.w	r5, r5, #3
 8003d84:	3508      	adds	r5, #8
 8003d86:	2d0c      	cmp	r5, #12
 8003d88:	bf38      	it	cc
 8003d8a:	250c      	movcc	r5, #12
 8003d8c:	2d00      	cmp	r5, #0
 8003d8e:	4606      	mov	r6, r0
 8003d90:	db01      	blt.n	8003d96 <_malloc_r+0x1a>
 8003d92:	42a9      	cmp	r1, r5
 8003d94:	d903      	bls.n	8003d9e <_malloc_r+0x22>
 8003d96:	230c      	movs	r3, #12
 8003d98:	6033      	str	r3, [r6, #0]
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	bd70      	pop	{r4, r5, r6, pc}
 8003d9e:	f000 f87d 	bl	8003e9c <__malloc_lock>
 8003da2:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <_malloc_r+0xac>)
 8003da4:	6814      	ldr	r4, [r2, #0]
 8003da6:	4621      	mov	r1, r4
 8003da8:	b991      	cbnz	r1, 8003dd0 <_malloc_r+0x54>
 8003daa:	4c20      	ldr	r4, [pc, #128]	; (8003e2c <_malloc_r+0xb0>)
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	b91b      	cbnz	r3, 8003db8 <_malloc_r+0x3c>
 8003db0:	4630      	mov	r0, r6
 8003db2:	f000 f863 	bl	8003e7c <_sbrk_r>
 8003db6:	6020      	str	r0, [r4, #0]
 8003db8:	4629      	mov	r1, r5
 8003dba:	4630      	mov	r0, r6
 8003dbc:	f000 f85e 	bl	8003e7c <_sbrk_r>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d124      	bne.n	8003e0e <_malloc_r+0x92>
 8003dc4:	230c      	movs	r3, #12
 8003dc6:	6033      	str	r3, [r6, #0]
 8003dc8:	4630      	mov	r0, r6
 8003dca:	f000 f868 	bl	8003e9e <__malloc_unlock>
 8003dce:	e7e4      	b.n	8003d9a <_malloc_r+0x1e>
 8003dd0:	680b      	ldr	r3, [r1, #0]
 8003dd2:	1b5b      	subs	r3, r3, r5
 8003dd4:	d418      	bmi.n	8003e08 <_malloc_r+0x8c>
 8003dd6:	2b0b      	cmp	r3, #11
 8003dd8:	d90f      	bls.n	8003dfa <_malloc_r+0x7e>
 8003dda:	600b      	str	r3, [r1, #0]
 8003ddc:	50cd      	str	r5, [r1, r3]
 8003dde:	18cc      	adds	r4, r1, r3
 8003de0:	4630      	mov	r0, r6
 8003de2:	f000 f85c 	bl	8003e9e <__malloc_unlock>
 8003de6:	f104 000b 	add.w	r0, r4, #11
 8003dea:	1d23      	adds	r3, r4, #4
 8003dec:	f020 0007 	bic.w	r0, r0, #7
 8003df0:	1ac3      	subs	r3, r0, r3
 8003df2:	d0d3      	beq.n	8003d9c <_malloc_r+0x20>
 8003df4:	425a      	negs	r2, r3
 8003df6:	50e2      	str	r2, [r4, r3]
 8003df8:	e7d0      	b.n	8003d9c <_malloc_r+0x20>
 8003dfa:	428c      	cmp	r4, r1
 8003dfc:	684b      	ldr	r3, [r1, #4]
 8003dfe:	bf16      	itet	ne
 8003e00:	6063      	strne	r3, [r4, #4]
 8003e02:	6013      	streq	r3, [r2, #0]
 8003e04:	460c      	movne	r4, r1
 8003e06:	e7eb      	b.n	8003de0 <_malloc_r+0x64>
 8003e08:	460c      	mov	r4, r1
 8003e0a:	6849      	ldr	r1, [r1, #4]
 8003e0c:	e7cc      	b.n	8003da8 <_malloc_r+0x2c>
 8003e0e:	1cc4      	adds	r4, r0, #3
 8003e10:	f024 0403 	bic.w	r4, r4, #3
 8003e14:	42a0      	cmp	r0, r4
 8003e16:	d005      	beq.n	8003e24 <_malloc_r+0xa8>
 8003e18:	1a21      	subs	r1, r4, r0
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f000 f82e 	bl	8003e7c <_sbrk_r>
 8003e20:	3001      	adds	r0, #1
 8003e22:	d0cf      	beq.n	8003dc4 <_malloc_r+0x48>
 8003e24:	6025      	str	r5, [r4, #0]
 8003e26:	e7db      	b.n	8003de0 <_malloc_r+0x64>
 8003e28:	20000094 	.word	0x20000094
 8003e2c:	20000098 	.word	0x20000098

08003e30 <_realloc_r>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	4607      	mov	r7, r0
 8003e34:	4614      	mov	r4, r2
 8003e36:	460e      	mov	r6, r1
 8003e38:	b921      	cbnz	r1, 8003e44 <_realloc_r+0x14>
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e40:	f7ff bf9c 	b.w	8003d7c <_malloc_r>
 8003e44:	b922      	cbnz	r2, 8003e50 <_realloc_r+0x20>
 8003e46:	f7ff ff4b 	bl	8003ce0 <_free_r>
 8003e4a:	4625      	mov	r5, r4
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e50:	f000 f826 	bl	8003ea0 <_malloc_usable_size_r>
 8003e54:	42a0      	cmp	r0, r4
 8003e56:	d20f      	bcs.n	8003e78 <_realloc_r+0x48>
 8003e58:	4621      	mov	r1, r4
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	f7ff ff8e 	bl	8003d7c <_malloc_r>
 8003e60:	4605      	mov	r5, r0
 8003e62:	2800      	cmp	r0, #0
 8003e64:	d0f2      	beq.n	8003e4c <_realloc_r+0x1c>
 8003e66:	4631      	mov	r1, r6
 8003e68:	4622      	mov	r2, r4
 8003e6a:	f7ff ff15 	bl	8003c98 <memcpy>
 8003e6e:	4631      	mov	r1, r6
 8003e70:	4638      	mov	r0, r7
 8003e72:	f7ff ff35 	bl	8003ce0 <_free_r>
 8003e76:	e7e9      	b.n	8003e4c <_realloc_r+0x1c>
 8003e78:	4635      	mov	r5, r6
 8003e7a:	e7e7      	b.n	8003e4c <_realloc_r+0x1c>

08003e7c <_sbrk_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4c06      	ldr	r4, [pc, #24]	; (8003e98 <_sbrk_r+0x1c>)
 8003e80:	2300      	movs	r3, #0
 8003e82:	4605      	mov	r5, r0
 8003e84:	4608      	mov	r0, r1
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	f7fc ff72 	bl	8000d70 <_sbrk>
 8003e8c:	1c43      	adds	r3, r0, #1
 8003e8e:	d102      	bne.n	8003e96 <_sbrk_r+0x1a>
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	b103      	cbz	r3, 8003e96 <_sbrk_r+0x1a>
 8003e94:	602b      	str	r3, [r5, #0]
 8003e96:	bd38      	pop	{r3, r4, r5, pc}
 8003e98:	20000df8 	.word	0x20000df8

08003e9c <__malloc_lock>:
 8003e9c:	4770      	bx	lr

08003e9e <__malloc_unlock>:
 8003e9e:	4770      	bx	lr

08003ea0 <_malloc_usable_size_r>:
 8003ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ea4:	1f18      	subs	r0, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bfbc      	itt	lt
 8003eaa:	580b      	ldrlt	r3, [r1, r0]
 8003eac:	18c0      	addlt	r0, r0, r3
 8003eae:	4770      	bx	lr

08003eb0 <_init>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	bf00      	nop
 8003eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb6:	bc08      	pop	{r3}
 8003eb8:	469e      	mov	lr, r3
 8003eba:	4770      	bx	lr

08003ebc <_fini>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	bf00      	nop
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr
