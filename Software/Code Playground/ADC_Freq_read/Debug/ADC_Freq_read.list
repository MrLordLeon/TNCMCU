
ADC_Freq_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004400  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800463c  0800463c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004644  08004644  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004644  08004644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800464c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cfc  20000070  080046bc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d6c  080046bc  00021d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d937  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e80  00000000  00000000  0002d9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  0002f858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  00030590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022456  00000000  00000000  000311d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0c0  00000000  00000000  00053626  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3ca1  00000000  00000000  0005d6e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa0  00000000  00000000  00131404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080045b8 	.word	0x080045b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080045b8 	.word	0x080045b8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b598      	push	{r3, r4, r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fc3e 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f82e 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f96c 	bl	80008a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d0:	f000 f896 	bl	8000700 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f93e 	bl	8000854 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005d8:	f000 f8e4 	bl	80007a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 80005dc:	2104      	movs	r1, #4
 80005de:	480e      	ldr	r0, [pc, #56]	; (8000618 <main+0x58>)
 80005e0:	f002 f9ec 	bl	80029bc <HAL_TIM_OC_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,SAMP_COUNT);
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <main+0x58>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80005ec:	639a      	str	r2, [r3, #56]	; 0x38
	 sprintf(uartData,"Starting...\n");
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <main+0x5c>)
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <main+0x60>)
 80005f2:	4614      	mov	r4, r2
 80005f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005f6:	6020      	str	r0, [r4, #0]
 80005f8:	6061      	str	r1, [r4, #4]
 80005fa:	60a2      	str	r2, [r4, #8]
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	7323      	strb	r3, [r4, #12]
	  HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <main+0x5c>)
 8000602:	f7ff fe05 	bl	8000210 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	230a      	movs	r3, #10
 800060c:	4903      	ldr	r1, [pc, #12]	; (800061c <main+0x5c>)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <main+0x64>)
 8000610:	f002 ff3b 	bl	800348a <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0x54>
 8000616:	bf00      	nop
 8000618:	20001cd8 	.word	0x20001cd8
 800061c:	200000a0 	.word	0x200000a0
 8000620:	080045d0 	.word	0x080045d0
 8000624:	20001d18 	.word	0x20001d18

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fbb0 	bl	8003d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <SystemClock_Config+0xd0>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xd4>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80006a0:	235a      	movs	r3, #90	; 0x5a
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fefb 	bl	80024b0 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006c0:	f000 f9e6 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fc2b 	bl	8001f3c <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006ec:	f000 f9d0 	bl	8000a90 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	; 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_ADC1_Init+0x98>)
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <MX_ADC1_Init+0x9c>)
 8000716:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_ADC1_Init+0x98>)
 800071a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800071e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_ADC1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_ADC1_Init+0x98>)
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <MX_ADC1_Init+0xa0>)
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_ADC1_Init+0x98>)
 800074e:	2201      	movs	r2, #1
 8000750:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ADC1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_ADC1_Init+0x98>)
 800075c:	2201      	movs	r2, #1
 800075e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_ADC1_Init+0x98>)
 8000762:	f000 fbe1 	bl	8000f28 <HAL_ADC_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800076c:	f000 f990 	bl	8000a90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000778:	2302      	movs	r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_ADC1_Init+0x98>)
 8000782:	f000 fecb 	bl	800151c <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800078c:	f000 f980 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000c78 	.word	0x20000c78
 800079c:	40012000 	.word	0x40012000
 80007a0:	0f000001 	.word	0x0f000001

080007a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
 80007c2:	615a      	str	r2, [r3, #20]
 80007c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_TIM2_Init+0xac>)
 80007c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_TIM2_Init+0xac>)
 80007d0:	2259      	movs	r2, #89	; 0x59
 80007d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_TIM2_Init+0xac>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_TIM2_Init+0xac>)
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_TIM2_Init+0xac>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_TIM2_Init+0xac>)
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80007ee:	4818      	ldr	r0, [pc, #96]	; (8000850 <MX_TIM2_Init+0xac>)
 80007f0:	f002 f8b8 	bl	8002964 <HAL_TIM_OC_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007fa:	f000 f949 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	4619      	mov	r1, r3
 800080c:	4810      	ldr	r0, [pc, #64]	; (8000850 <MX_TIM2_Init+0xac>)
 800080e:	f002 fd5f 	bl	80032d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000818:	f000 f93a 	bl	8000a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2204      	movs	r2, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4807      	ldr	r0, [pc, #28]	; (8000850 <MX_TIM2_Init+0xac>)
 8000834:	f002 fa4e 	bl	8002cd4 <HAL_TIM_OC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800083e:	f000 f927 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <MX_TIM2_Init+0xac>)
 8000844:	f000 f9c6 	bl	8000bd4 <HAL_TIM_MspPostInit>

}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20001cd8 	.word	0x20001cd8

08000854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_USART2_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART2_UART_Init+0x4c>)
 800088c:	f002 fdb0 	bl	80033f0 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 f8fb 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20001d18 	.word	0x20001d18
 80008a4:	40004400 	.word	0x40004400

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <MX_GPIO_Init+0xb4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a25      	ldr	r2, [pc, #148]	; (800095c <MX_GPIO_Init+0xb4>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <MX_GPIO_Init+0xb4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_GPIO_Init+0xb4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a1e      	ldr	r2, [pc, #120]	; (800095c <MX_GPIO_Init+0xb4>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_GPIO_Init+0xb4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_GPIO_Init+0xb4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <MX_GPIO_Init+0xb4>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_GPIO_Init+0xb4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	4812      	ldr	r0, [pc, #72]	; (8000960 <MX_GPIO_Init+0xb8>)
 8000918:	f001 fadc 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800091c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <MX_GPIO_Init+0xbc>)
 8000932:	f001 f93d 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000936:	2320      	movs	r3, #32
 8000938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_GPIO_Init+0xb8>)
 800094e:	f001 f92f 	bl	8001bb0 <HAL_GPIO_Init>

}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000
 8000964:	40020800 	.word	0x40020800

08000968 <TIM_OC_Callback>:
uint32_t this_capture;
int curr_time, prev_time,diff_time;
uint32_t adc_buffer[1024];
int count = 0;
/* USER CODE BEGIN 4 */
void TIM_OC_Callback(){
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
	prev_time = curr_time;
 800096e:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <TIM_OC_Callback+0xcc>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a31      	ldr	r2, [pc, #196]	; (8000a38 <TIM_OC_Callback+0xd0>)
 8000974:	6013      	str	r3, [r2, #0]

	prev_adc = adcval;
 8000976:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <TIM_OC_Callback+0xd4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a31      	ldr	r2, [pc, #196]	; (8000a40 <TIM_OC_Callback+0xd8>)
 800097c:	6013      	str	r3, [r2, #0]
	HAL_ADC_Start(&hadc1);
 800097e:	4831      	ldr	r0, [pc, #196]	; (8000a44 <TIM_OC_Callback+0xdc>)
 8000980:	f000 fb16 	bl	8000fb0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,5);
 8000984:	2105      	movs	r1, #5
 8000986:	482f      	ldr	r0, [pc, #188]	; (8000a44 <TIM_OC_Callback+0xdc>)
 8000988:	f000 fbd8 	bl	800113c <HAL_ADC_PollForConversion>
	adc_buffer[count] = HAL_ADC_GetValue(&hadc1);
 800098c:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <TIM_OC_Callback+0xe0>)
 800098e:	681c      	ldr	r4, [r3, #0]
 8000990:	482c      	ldr	r0, [pc, #176]	; (8000a44 <TIM_OC_Callback+0xdc>)
 8000992:	f000 fd98 	bl	80014c6 <HAL_ADC_GetValue>
 8000996:	4602      	mov	r2, r0
 8000998:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <TIM_OC_Callback+0xe4>)
 800099a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

	if(count==1023){
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <TIM_OC_Callback+0xe0>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d121      	bne.n	80009ee <TIM_OC_Callback+0x86>
		count = 0;
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <TIM_OC_Callback+0xe0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 1023; i++){
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	e015      	b.n	80009e2 <TIM_OC_Callback+0x7a>
			 sprintf(uartData,"adc %d = %d\n",i,adc_buffer[i]);
 80009b6:	4a25      	ldr	r2, [pc, #148]	; (8000a4c <TIM_OC_Callback+0xe4>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	4923      	ldr	r1, [pc, #140]	; (8000a50 <TIM_OC_Callback+0xe8>)
 80009c2:	4824      	ldr	r0, [pc, #144]	; (8000a54 <TIM_OC_Callback+0xec>)
 80009c4:	f003 f9f2 	bl	8003dac <siprintf>
			  HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009c8:	4822      	ldr	r0, [pc, #136]	; (8000a54 <TIM_OC_Callback+0xec>)
 80009ca:	f7ff fc21 	bl	8000210 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	230a      	movs	r3, #10
 80009d4:	491f      	ldr	r1, [pc, #124]	; (8000a54 <TIM_OC_Callback+0xec>)
 80009d6:	4820      	ldr	r0, [pc, #128]	; (8000a58 <TIM_OC_Callback+0xf0>)
 80009d8:	f002 fd57 	bl	800348a <HAL_UART_Transmit>
		for(int i = 0; i < 1023; i++){
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3301      	adds	r3, #1
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80009e8:	4293      	cmp	r3, r2
 80009ea:	dde4      	ble.n	80009b6 <TIM_OC_Callback+0x4e>
 80009ec:	e004      	b.n	80009f8 <TIM_OC_Callback+0x90>
		}
	}
	else{
		count++;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <TIM_OC_Callback+0xe0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <TIM_OC_Callback+0xe0>)
 80009f6:	6013      	str	r3, [r2, #0]
	}
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80009f8:	2120      	movs	r1, #32
 80009fa:	4818      	ldr	r0, [pc, #96]	; (8000a5c <TIM_OC_Callback+0xf4>)
 80009fc:	f001 fa83 	bl	8001f06 <HAL_GPIO_TogglePin>
	curr_time = htim2.Instance->CNT;
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <TIM_OC_Callback+0xf8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <TIM_OC_Callback+0xcc>)
 8000a0a:	601a      	str	r2, [r3, #0]

//	x1 = ((double)adcval - 2048.0)/2048.0;
//	x2 = ((double)prev_adc - 2048.0)/2048.0;

	diff_time = curr_time-prev_time;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <TIM_OC_Callback+0xcc>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <TIM_OC_Callback+0xd0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <TIM_OC_Callback+0xfc>)
 8000a18:	6013      	str	r3, [r2, #0]
//	angle_speed = (asin(x1)-asin(x2))/((double)diff_time);
//	freq = (angle_speed/(2*PI));

	uint32_t next_sampl = curr_time + SAMP_COUNT;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <TIM_OC_Callback+0xcc>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8000a22:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,next_sampl);
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <TIM_OC_Callback+0xf8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd90      	pop	{r4, r7, pc}
 8000a34:	20000cc0 	.word	0x20000cc0
 8000a38:	20000cc8 	.word	0x20000cc8
 8000a3c:	20001d60 	.word	0x20001d60
 8000a40:	20000c68 	.word	0x20000c68
 8000a44:	20000c78 	.word	0x20000c78
 8000a48:	2000008c 	.word	0x2000008c
 8000a4c:	20000ccc 	.word	0x20000ccc
 8000a50:	080045e0 	.word	0x080045e0
 8000a54:	200000a0 	.word	0x200000a0
 8000a58:	20001d18 	.word	0x20001d18
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	20001cd8 	.word	0x20001cd8
 8000a64:	20000cc4 	.word	0x20000cc4

08000a68 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a78:	d106      	bne.n	8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x20>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7f1b      	ldrb	r3, [r3, #28]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d102      	bne.n	8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x20>
	{
		TIM_OC_Callback();
 8000a82:	f7ff ff71 	bl	8000968 <TIM_OC_Callback>
	}
	return;
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
}
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <HAL_MspInit+0x4c>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <HAL_MspInit+0x4c>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ade:	2007      	movs	r0, #7
 8000ae0:	f001 f824 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <HAL_ADC_MspInit+0x8c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d12f      	bne.n	8000b72 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <HAL_ADC_MspInit+0x90>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a19      	ldr	r2, [pc, #100]	; (8000b80 <HAL_ADC_MspInit+0x90>)
 8000b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_ADC_MspInit+0x90>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <HAL_ADC_MspInit+0x90>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <HAL_ADC_MspInit+0x90>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_ADC_MspInit+0x90>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4809      	ldr	r0, [pc, #36]	; (8000b84 <HAL_ADC_MspInit+0x94>)
 8000b5e:	f001 f827 	bl	8001bb0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	2012      	movs	r0, #18
 8000b68:	f000 ffeb 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b6c:	2012      	movs	r0, #18
 8000b6e:	f001 f804 	bl	8001b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b72:	bf00      	nop
 8000b74:	3728      	adds	r7, #40	; 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40012000 	.word	0x40012000
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000

08000b88 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b98:	d115      	bne.n	8000bc6 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_TIM_OC_MspInit+0x48>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <HAL_TIM_OC_MspInit+0x48>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_TIM_OC_MspInit+0x48>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	201c      	movs	r0, #28
 8000bbc:	f000 ffc1 	bl	8001b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bc0:	201c      	movs	r0, #28
 8000bc2:	f000 ffda 	bl	8001b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf4:	d11d      	bne.n	8000c32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_TIM_MspPostInit+0x68>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_TIM_MspPostInit+0x68>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_TIM_MspPostInit+0x68>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c12:	2302      	movs	r3, #2
 8000c14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <HAL_TIM_MspPostInit+0x6c>)
 8000c2e:	f000 ffbf 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_UART_MspInit+0x84>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d12b      	bne.n	8000cbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_UART_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <HAL_UART_MspInit+0x8c>)
 8000cba:	f000 ff79 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f8de 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <ADC_IRQHandler+0x10>)
 8000d36:	f000 fa85 	bl	8001244 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000c78 	.word	0x20000c78

08000d44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <TIM2_IRQHandler+0x10>)
 8000d4a:	f001 febb 	bl	8002ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20001cd8 	.word	0x20001cd8

08000d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <_sbrk+0x5c>)
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <_sbrk+0x60>)
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <_sbrk+0x64>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <_sbrk+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d88:	f002 ffde 	bl	8003d48 <__errno>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	230c      	movs	r3, #12
 8000d90:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	e009      	b.n	8000dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <_sbrk+0x64>)
 8000da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20020000 	.word	0x20020000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	20000090 	.word	0x20000090
 8000dc0:	20001d70 	.word	0x20001d70

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <SystemInit+0x28>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a07      	ldr	r2, [pc, #28]	; (8000dec <SystemInit+0x28>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SystemInit+0x28>)
 8000dda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dde:	609a      	str	r2, [r3, #8]
#endif
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000df4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000df6:	e003      	b.n	8000e00 <LoopCopyDataInit>

08000df8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dfe:	3104      	adds	r1, #4

08000e00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e00:	480b      	ldr	r0, [pc, #44]	; (8000e30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e08:	d3f6      	bcc.n	8000df8 <CopyDataInit>
  ldr  r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e0c:	e002      	b.n	8000e14 <LoopFillZerobss>

08000e0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e10:	f842 3b04 	str.w	r3, [r2], #4

08000e14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e18:	d3f9      	bcc.n	8000e0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e1a:	f7ff ffd3 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f002 ff99 	bl	8003d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fbcd 	bl	80005c0 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e2c:	0800464c 	.word	0x0800464c
  ldr  r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e34:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000e38:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000e3c:	20001d6c 	.word	0x20001d6c

08000e40 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <CAN1_RX0_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <HAL_Init+0x40>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_Init+0x40>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_Init+0x40>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 fe5d 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fe12 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fe75 	bl	8001b96 <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 fe3d 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20001d64 	.word	0x20001d64

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20001d64 	.word	0x20001d64

08000f28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e033      	b.n	8000fa6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d109      	bne.n	8000f5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fdd2 	bl	8000af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d118      	bne.n	8000f98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f6e:	f023 0302 	bic.w	r3, r3, #2
 8000f72:	f043 0202 	orr.w	r2, r3, #2
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fc00 	bl	8001780 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f023 0303 	bic.w	r3, r3, #3
 8000f8e:	f043 0201 	orr.w	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	641a      	str	r2, [r3, #64]	; 0x40
 8000f96:	e001      	b.n	8000f9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <HAL_ADC_Start+0x1a>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e0a5      	b.n	8001116 <HAL_ADC_Start+0x166>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d018      	beq.n	8001012 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0201 	orr.w	r2, r2, #1
 8000fee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff0:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <HAL_ADC_Start+0x174>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a4c      	ldr	r2, [pc, #304]	; (8001128 <HAL_ADC_Start+0x178>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	0c9a      	lsrs	r2, r3, #18
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001004:	e002      	b.n	800100c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	3b01      	subs	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f9      	bne.n	8001006 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b01      	cmp	r3, #1
 800101e:	d179      	bne.n	8001114 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800104a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800105e:	d106      	bne.n	800106e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001064:	f023 0206 	bic.w	r2, r3, #6
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	645a      	str	r2, [r3, #68]	; 0x44
 800106c:	e002      	b.n	8001074 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <HAL_ADC_Start+0x17c>)
 800107e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001088:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	2b00      	cmp	r3, #0
 8001094:	d12a      	bne.n	80010ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a25      	ldr	r2, [pc, #148]	; (8001130 <HAL_ADC_Start+0x180>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d015      	beq.n	80010cc <HAL_ADC_Start+0x11c>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a23      	ldr	r2, [pc, #140]	; (8001134 <HAL_ADC_Start+0x184>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d105      	bne.n	80010b6 <HAL_ADC_Start+0x106>
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_ADC_Start+0x17c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 031f 	and.w	r3, r3, #31
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00a      	beq.n	80010cc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a1f      	ldr	r2, [pc, #124]	; (8001138 <HAL_ADC_Start+0x188>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d129      	bne.n	8001114 <HAL_ADC_Start+0x164>
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <HAL_ADC_Start+0x17c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 031f 	and.w	r3, r3, #31
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d823      	bhi.n	8001114 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d11c      	bne.n	8001114 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	e013      	b.n	8001114 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <HAL_ADC_Start+0x180>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d10e      	bne.n	8001114 <HAL_ADC_Start+0x164>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d107      	bne.n	8001114 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001112:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000000 	.word	0x20000000
 8001128:	431bde83 	.word	0x431bde83
 800112c:	40012300 	.word	0x40012300
 8001130:	40012000 	.word	0x40012000
 8001134:	40012100 	.word	0x40012100
 8001138:	40012200 	.word	0x40012200

0800113c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001158:	d113      	bne.n	8001182 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001168:	d10b      	bne.n	8001182 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f043 0220 	orr.w	r2, r3, #32
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e05c      	b.n	800123c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001182:	f7ff fec5 	bl	8000f10 <HAL_GetTick>
 8001186:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001188:	e01a      	b.n	80011c0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d016      	beq.n	80011c0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d007      	beq.n	80011a8 <HAL_ADC_PollForConversion+0x6c>
 8001198:	f7ff feba 	bl	8000f10 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d20b      	bcs.n	80011c0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f043 0204 	orr.w	r2, r3, #4
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e03d      	b.n	800123c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d1dd      	bne.n	800118a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f06f 0212 	mvn.w	r2, #18
 80011d6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d123      	bne.n	800123a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d11f      	bne.n	800123a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001212:	2b00      	cmp	r3, #0
 8001214:	d111      	bne.n	800123a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d105      	bne.n	800123a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f043 0201 	orr.w	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b02      	cmp	r3, #2
 8001260:	bf0c      	ite	eq
 8001262:	2301      	moveq	r3, #1
 8001264:	2300      	movne	r3, #0
 8001266:	b2db      	uxtb	r3, r3
 8001268:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0320 	and.w	r3, r3, #32
 8001274:	2b20      	cmp	r3, #32
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d049      	beq.n	800131a <HAL_ADC_IRQHandler+0xd6>
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d046      	beq.n	800131a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	2b00      	cmp	r3, #0
 8001296:	d105      	bne.n	80012a4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d12b      	bne.n	800130a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d127      	bne.n	800130a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d119      	bne.n	800130a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0220 	bic.w	r2, r2, #32
 80012e4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d105      	bne.n	800130a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f043 0201 	orr.w	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f8e8 	bl	80014e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f06f 0212 	mvn.w	r2, #18
 8001318:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b04      	cmp	r3, #4
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133a:	2b80      	cmp	r3, #128	; 0x80
 800133c:	bf0c      	ite	eq
 800133e:	2301      	moveq	r3, #1
 8001340:	2300      	movne	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d057      	beq.n	80013fc <HAL_ADC_IRQHandler+0x1b8>
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d054      	beq.n	80013fc <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	d105      	bne.n	800136a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d139      	bne.n	80013ec <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001390:	2b00      	cmp	r3, #0
 8001392:	d12b      	bne.n	80013ec <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d124      	bne.n	80013ec <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d11d      	bne.n	80013ec <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d119      	bne.n	80013ec <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d105      	bne.n	80013ec <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f043 0201 	orr.w	r2, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 fac3 	bl	8001978 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f06f 020c 	mvn.w	r2, #12
 80013fa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b01      	cmp	r3, #1
 8001408:	bf0c      	ite	eq
 800140a:	2301      	moveq	r3, #1
 800140c:	2300      	movne	r3, #0
 800140e:	b2db      	uxtb	r3, r3
 8001410:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141c:	2b40      	cmp	r3, #64	; 0x40
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d017      	beq.n	800145e <HAL_ADC_IRQHandler+0x21a>
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d014      	beq.n	800145e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b01      	cmp	r3, #1
 8001440:	d10d      	bne.n	800145e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f850 	bl	80014f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f06f 0201 	mvn.w	r2, #1
 800145c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0320 	and.w	r3, r3, #32
 8001468:	2b20      	cmp	r3, #32
 800146a:	bf0c      	ite	eq
 800146c:	2301      	moveq	r3, #1
 800146e:	2300      	movne	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800147e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d015      	beq.n	80014be <HAL_ADC_IRQHandler+0x27a>
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d012      	beq.n	80014be <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	f043 0202 	orr.w	r2, r3, #2
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f06f 0220 	mvn.w	r2, #32
 80014ac:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f82a 	bl	8001508 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f06f 0220 	mvn.w	r2, #32
 80014bc:	601a      	str	r2, [r3, #0]
  }
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x1c>
 8001534:	2302      	movs	r3, #2
 8001536:	e113      	b.n	8001760 <HAL_ADC_ConfigChannel+0x244>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b09      	cmp	r3, #9
 8001546:	d925      	bls.n	8001594 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68d9      	ldr	r1, [r3, #12]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	3b1e      	subs	r3, #30
 800155e:	2207      	movs	r2, #7
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43da      	mvns	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	400a      	ands	r2, r1
 800156c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68d9      	ldr	r1, [r3, #12]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	4618      	mov	r0, r3
 8001580:	4603      	mov	r3, r0
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4403      	add	r3, r0
 8001586:	3b1e      	subs	r3, #30
 8001588:	409a      	lsls	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	e022      	b.n	80015da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6919      	ldr	r1, [r3, #16]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	2207      	movs	r2, #7
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	400a      	ands	r2, r1
 80015b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6919      	ldr	r1, [r3, #16]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4403      	add	r3, r0
 80015d0:	409a      	lsls	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d824      	bhi.n	800162c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	3b05      	subs	r3, #5
 80015f4:	221f      	movs	r2, #31
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	400a      	ands	r2, r1
 8001602:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	3b05      	subs	r3, #5
 800161e:	fa00 f203 	lsl.w	r2, r0, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
 800162a:	e04c      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b0c      	cmp	r3, #12
 8001632:	d824      	bhi.n	800167e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3b23      	subs	r3, #35	; 0x23
 8001646:	221f      	movs	r2, #31
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43da      	mvns	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	400a      	ands	r2, r1
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	4618      	mov	r0, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	3b23      	subs	r3, #35	; 0x23
 8001670:	fa00 f203 	lsl.w	r2, r0, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
 800167c:	e023      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	3b41      	subs	r3, #65	; 0x41
 8001690:	221f      	movs	r2, #31
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	400a      	ands	r2, r1
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	3b41      	subs	r3, #65	; 0x41
 80016ba:	fa00 f203 	lsl.w	r2, r0, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_ADC_ConfigChannel+0x250>)
 80016c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a28      	ldr	r2, [pc, #160]	; (8001770 <HAL_ADC_ConfigChannel+0x254>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d10f      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x1d8>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b12      	cmp	r3, #18
 80016da:	d10b      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HAL_ADC_ConfigChannel+0x254>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12b      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x23a>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <HAL_ADC_ConfigChannel+0x258>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d003      	beq.n	8001710 <HAL_ADC_ConfigChannel+0x1f4>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b11      	cmp	r3, #17
 800170e:	d122      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a11      	ldr	r2, [pc, #68]	; (8001774 <HAL_ADC_ConfigChannel+0x258>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d111      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_ADC_ConfigChannel+0x25c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a11      	ldr	r2, [pc, #68]	; (800177c <HAL_ADC_ConfigChannel+0x260>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	0c9a      	lsrs	r2, r3, #18
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001748:	e002      	b.n	8001750 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3b01      	subs	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f9      	bne.n	800174a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40012300 	.word	0x40012300
 8001770:	40012000 	.word	0x40012000
 8001774:	10000012 	.word	0x10000012
 8001778:	20000000 	.word	0x20000000
 800177c:	431bde83 	.word	0x431bde83

08001780 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001788:	4b79      	ldr	r3, [pc, #484]	; (8001970 <ADC_Init+0x1f0>)
 800178a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	021a      	lsls	r2, r3, #8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6859      	ldr	r1, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6899      	ldr	r1, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	4a58      	ldr	r2, [pc, #352]	; (8001974 <ADC_Init+0x1f4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d022      	beq.n	800185e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001826:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6899      	ldr	r1, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6899      	ldr	r1, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	e00f      	b.n	800187e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800186c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800187c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0202 	bic.w	r2, r2, #2
 800188c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6899      	ldr	r1, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7e1b      	ldrb	r3, [r3, #24]
 8001898:	005a      	lsls	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01b      	beq.n	80018e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6859      	ldr	r1, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	3b01      	subs	r3, #1
 80018d8:	035a      	lsls	r2, r3, #13
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	e007      	b.n	80018f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	3b01      	subs	r3, #1
 8001910:	051a      	lsls	r2, r3, #20
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6899      	ldr	r1, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001936:	025a      	lsls	r2, r3, #9
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800194e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6899      	ldr	r1, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	029a      	lsls	r2, r3, #10
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	609a      	str	r2, [r3, #8]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40012300 	.word	0x40012300
 8001974:	0f000001 	.word	0x0f000001

08001978 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0b      	blt.n	8001a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	4907      	ldr	r1, [pc, #28]	; (8001a28 <__NVIC_EnableIRQ+0x38>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2001      	movs	r0, #1
 8001a12:	fa00 f202 	lsl.w	r2, r0, r2
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff8e 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff29 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff3e 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff8e 	bl	8001a80 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5d 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff31 	bl	80019f0 <__NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffa2 	bl	8001ae8 <SysTick_Config>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	e165      	b.n	8001e98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f040 8154 	bne.w	8001e92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d00b      	beq.n	8001c0a <HAL_GPIO_Init+0x5a>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d007      	beq.n	8001c0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bfe:	2b11      	cmp	r3, #17
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b12      	cmp	r3, #18
 8001c08:	d130      	bne.n	8001c6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 0201 	and.w	r2, r3, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0xfc>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b12      	cmp	r3, #18
 8001caa:	d123      	bne.n	8001cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3208      	adds	r2, #8
 8001cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	69b9      	ldr	r1, [r7, #24]
 8001cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0203 	and.w	r2, r3, #3
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80ae 	beq.w	8001e92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <HAL_GPIO_Init+0x2fc>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a5b      	ldr	r2, [pc, #364]	; (8001eac <HAL_GPIO_Init+0x2fc>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b59      	ldr	r3, [pc, #356]	; (8001eac <HAL_GPIO_Init+0x2fc>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d52:	4a57      	ldr	r2, [pc, #348]	; (8001eb0 <HAL_GPIO_Init+0x300>)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4e      	ldr	r2, [pc, #312]	; (8001eb4 <HAL_GPIO_Init+0x304>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d025      	beq.n	8001dca <HAL_GPIO_Init+0x21a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4d      	ldr	r2, [pc, #308]	; (8001eb8 <HAL_GPIO_Init+0x308>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01f      	beq.n	8001dc6 <HAL_GPIO_Init+0x216>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4c      	ldr	r2, [pc, #304]	; (8001ebc <HAL_GPIO_Init+0x30c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d019      	beq.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4b      	ldr	r2, [pc, #300]	; (8001ec0 <HAL_GPIO_Init+0x310>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0x20e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4a      	ldr	r2, [pc, #296]	; (8001ec4 <HAL_GPIO_Init+0x314>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00d      	beq.n	8001dba <HAL_GPIO_Init+0x20a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a49      	ldr	r2, [pc, #292]	; (8001ec8 <HAL_GPIO_Init+0x318>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d007      	beq.n	8001db6 <HAL_GPIO_Init+0x206>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a48      	ldr	r2, [pc, #288]	; (8001ecc <HAL_GPIO_Init+0x31c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_GPIO_Init+0x202>
 8001dae:	2306      	movs	r3, #6
 8001db0:	e00c      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001db2:	2307      	movs	r3, #7
 8001db4:	e00a      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001db6:	2305      	movs	r3, #5
 8001db8:	e008      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dba:	2304      	movs	r3, #4
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e004      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e002      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	f002 0203 	and.w	r2, r2, #3
 8001dd2:	0092      	lsls	r2, r2, #2
 8001dd4:	4093      	lsls	r3, r2
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ddc:	4934      	ldr	r1, [pc, #208]	; (8001eb0 <HAL_GPIO_Init+0x300>)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	3302      	adds	r3, #2
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dea:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e0e:	4a30      	ldr	r2, [pc, #192]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e14:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e38:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a10      	ldr	r2, [pc, #64]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b0f      	cmp	r3, #15
 8001e9c:	f67f ae96 	bls.w	8001bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3724      	adds	r7, #36	; 0x24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40013800 	.word	0x40013800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40020800 	.word	0x40020800
 8001ec0:	40020c00 	.word	0x40020c00
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40021400 	.word	0x40021400
 8001ecc:	40021800 	.word	0x40021800
 8001ed0:	40013c00 	.word	0x40013c00

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef0:	e003      	b.n	8001efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ef2:	887b      	ldrh	r3, [r7, #2]
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	619a      	str	r2, [r3, #24]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695a      	ldr	r2, [r3, #20]
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	401a      	ands	r2, r3
 8001f1a:	887b      	ldrh	r3, [r7, #2]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d104      	bne.n	8001f2a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f20:	887b      	ldrh	r3, [r7, #2]
 8001f22:	041a      	lsls	r2, r3, #16
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001f28:	e002      	b.n	8001f30 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0cc      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b68      	ldr	r3, [pc, #416]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d90c      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0b8      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d020      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f90:	4b59      	ldr	r3, [pc, #356]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a58      	ldr	r2, [pc, #352]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa8:	4b53      	ldr	r3, [pc, #332]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	4a52      	ldr	r2, [pc, #328]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	494d      	ldr	r1, [pc, #308]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d044      	beq.n	800205c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d119      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e07f      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d003      	beq.n	8001ffa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e06f      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e067      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 0203 	bic.w	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4934      	ldr	r1, [pc, #208]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800202c:	f7fe ff70 	bl	8000f10 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	e00a      	b.n	800204a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7fe ff6c 	bl	8000f10 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e04f      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d1eb      	bne.n	8002034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d20c      	bcs.n	8002084 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e032      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4916      	ldr	r1, [pc, #88]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	490e      	ldr	r1, [pc, #56]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020c2:	f000 f855 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 80020c6:	4601      	mov	r1, r0
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	fa21 f303 	lsr.w	r3, r1, r3
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_ClockConfig+0x1c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fed0 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023c00 	.word	0x40023c00
 80020f8:	40023800 	.word	0x40023800
 80020fc:	080045f0 	.word	0x080045f0
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004

08002108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <HAL_RCC_GetHCLKFreq+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000000 	.word	0x20000000

08002120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002124:	f7ff fff0 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 8002128:	4601      	mov	r1, r0
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	0a9b      	lsrs	r3, r3, #10
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	4a03      	ldr	r2, [pc, #12]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	fa21 f303 	lsr.w	r3, r1, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	08004600 	.word	0x08004600

08002148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800214c:	f7ff ffdc 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 8002150:	4601      	mov	r1, r0
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0b5b      	lsrs	r3, r3, #13
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4a03      	ldr	r2, [pc, #12]	; (800216c <HAL_RCC_GetPCLK2Freq+0x24>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	08004600 	.word	0x08004600

08002170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800218a:	4bc6      	ldr	r3, [pc, #792]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b0c      	cmp	r3, #12
 8002194:	f200 817e 	bhi.w	8002494 <HAL_RCC_GetSysClockFreq+0x324>
 8002198:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <HAL_RCC_GetSysClockFreq+0x30>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	080021d5 	.word	0x080021d5
 80021a4:	08002495 	.word	0x08002495
 80021a8:	08002495 	.word	0x08002495
 80021ac:	08002495 	.word	0x08002495
 80021b0:	080021db 	.word	0x080021db
 80021b4:	08002495 	.word	0x08002495
 80021b8:	08002495 	.word	0x08002495
 80021bc:	08002495 	.word	0x08002495
 80021c0:	080021e1 	.word	0x080021e1
 80021c4:	08002495 	.word	0x08002495
 80021c8:	08002495 	.word	0x08002495
 80021cc:	08002495 	.word	0x08002495
 80021d0:	0800233d 	.word	0x0800233d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4bb4      	ldr	r3, [pc, #720]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x338>)
 80021d6:	613b      	str	r3, [r7, #16]
       break;
 80021d8:	e15f      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021da:	4bb4      	ldr	r3, [pc, #720]	; (80024ac <HAL_RCC_GetSysClockFreq+0x33c>)
 80021dc:	613b      	str	r3, [r7, #16]
      break;
 80021de:	e15c      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e0:	4bb0      	ldr	r3, [pc, #704]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ea:	4bae      	ldr	r3, [pc, #696]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d04a      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f6:	4bab      	ldr	r3, [pc, #684]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	f04f 0400 	mov.w	r4, #0
 8002200:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	ea03 0501 	and.w	r5, r3, r1
 800220c:	ea04 0602 	and.w	r6, r4, r2
 8002210:	4629      	mov	r1, r5
 8002212:	4632      	mov	r2, r6
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	f04f 0400 	mov.w	r4, #0
 800221c:	0154      	lsls	r4, r2, #5
 800221e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002222:	014b      	lsls	r3, r1, #5
 8002224:	4619      	mov	r1, r3
 8002226:	4622      	mov	r2, r4
 8002228:	1b49      	subs	r1, r1, r5
 800222a:	eb62 0206 	sbc.w	r2, r2, r6
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	f04f 0400 	mov.w	r4, #0
 8002236:	0194      	lsls	r4, r2, #6
 8002238:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800223c:	018b      	lsls	r3, r1, #6
 800223e:	1a5b      	subs	r3, r3, r1
 8002240:	eb64 0402 	sbc.w	r4, r4, r2
 8002244:	f04f 0100 	mov.w	r1, #0
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	00e2      	lsls	r2, r4, #3
 800224e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002252:	00d9      	lsls	r1, r3, #3
 8002254:	460b      	mov	r3, r1
 8002256:	4614      	mov	r4, r2
 8002258:	195b      	adds	r3, r3, r5
 800225a:	eb44 0406 	adc.w	r4, r4, r6
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	0262      	lsls	r2, r4, #9
 8002268:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800226c:	0259      	lsls	r1, r3, #9
 800226e:	460b      	mov	r3, r1
 8002270:	4614      	mov	r4, r2
 8002272:	4618      	mov	r0, r3
 8002274:	4621      	mov	r1, r4
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f04f 0400 	mov.w	r4, #0
 800227c:	461a      	mov	r2, r3
 800227e:	4623      	mov	r3, r4
 8002280:	f7fe f81e 	bl	80002c0 <__aeabi_uldivmod>
 8002284:	4603      	mov	r3, r0
 8002286:	460c      	mov	r4, r1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e049      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228c:	4b85      	ldr	r3, [pc, #532]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	f04f 0400 	mov.w	r4, #0
 8002296:	f240 11ff 	movw	r1, #511	; 0x1ff
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	ea03 0501 	and.w	r5, r3, r1
 80022a2:	ea04 0602 	and.w	r6, r4, r2
 80022a6:	4629      	mov	r1, r5
 80022a8:	4632      	mov	r2, r6
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	f04f 0400 	mov.w	r4, #0
 80022b2:	0154      	lsls	r4, r2, #5
 80022b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022b8:	014b      	lsls	r3, r1, #5
 80022ba:	4619      	mov	r1, r3
 80022bc:	4622      	mov	r2, r4
 80022be:	1b49      	subs	r1, r1, r5
 80022c0:	eb62 0206 	sbc.w	r2, r2, r6
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	f04f 0400 	mov.w	r4, #0
 80022cc:	0194      	lsls	r4, r2, #6
 80022ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022d2:	018b      	lsls	r3, r1, #6
 80022d4:	1a5b      	subs	r3, r3, r1
 80022d6:	eb64 0402 	sbc.w	r4, r4, r2
 80022da:	f04f 0100 	mov.w	r1, #0
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	00e2      	lsls	r2, r4, #3
 80022e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022e8:	00d9      	lsls	r1, r3, #3
 80022ea:	460b      	mov	r3, r1
 80022ec:	4614      	mov	r4, r2
 80022ee:	195b      	adds	r3, r3, r5
 80022f0:	eb44 0406 	adc.w	r4, r4, r6
 80022f4:	f04f 0100 	mov.w	r1, #0
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	02a2      	lsls	r2, r4, #10
 80022fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002302:	0299      	lsls	r1, r3, #10
 8002304:	460b      	mov	r3, r1
 8002306:	4614      	mov	r4, r2
 8002308:	4618      	mov	r0, r3
 800230a:	4621      	mov	r1, r4
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f04f 0400 	mov.w	r4, #0
 8002312:	461a      	mov	r2, r3
 8002314:	4623      	mov	r3, r4
 8002316:	f7fd ffd3 	bl	80002c0 <__aeabi_uldivmod>
 800231a:	4603      	mov	r3, r0
 800231c:	460c      	mov	r4, r1
 800231e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002320:	4b60      	ldr	r3, [pc, #384]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	3301      	adds	r3, #1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	613b      	str	r3, [r7, #16]
      break;
 800233a:	e0ae      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002344:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002346:	4b57      	ldr	r3, [pc, #348]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d04a      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002352:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	099b      	lsrs	r3, r3, #6
 8002358:	f04f 0400 	mov.w	r4, #0
 800235c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	ea03 0501 	and.w	r5, r3, r1
 8002368:	ea04 0602 	and.w	r6, r4, r2
 800236c:	4629      	mov	r1, r5
 800236e:	4632      	mov	r2, r6
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	f04f 0400 	mov.w	r4, #0
 8002378:	0154      	lsls	r4, r2, #5
 800237a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800237e:	014b      	lsls	r3, r1, #5
 8002380:	4619      	mov	r1, r3
 8002382:	4622      	mov	r2, r4
 8002384:	1b49      	subs	r1, r1, r5
 8002386:	eb62 0206 	sbc.w	r2, r2, r6
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	f04f 0400 	mov.w	r4, #0
 8002392:	0194      	lsls	r4, r2, #6
 8002394:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002398:	018b      	lsls	r3, r1, #6
 800239a:	1a5b      	subs	r3, r3, r1
 800239c:	eb64 0402 	sbc.w	r4, r4, r2
 80023a0:	f04f 0100 	mov.w	r1, #0
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	00e2      	lsls	r2, r4, #3
 80023aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023ae:	00d9      	lsls	r1, r3, #3
 80023b0:	460b      	mov	r3, r1
 80023b2:	4614      	mov	r4, r2
 80023b4:	195b      	adds	r3, r3, r5
 80023b6:	eb44 0406 	adc.w	r4, r4, r6
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	0262      	lsls	r2, r4, #9
 80023c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80023c8:	0259      	lsls	r1, r3, #9
 80023ca:	460b      	mov	r3, r1
 80023cc:	4614      	mov	r4, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	4621      	mov	r1, r4
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f04f 0400 	mov.w	r4, #0
 80023d8:	461a      	mov	r2, r3
 80023da:	4623      	mov	r3, r4
 80023dc:	f7fd ff70 	bl	80002c0 <__aeabi_uldivmod>
 80023e0:	4603      	mov	r3, r0
 80023e2:	460c      	mov	r4, r1
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e049      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e8:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	f04f 0400 	mov.w	r4, #0
 80023f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	ea03 0501 	and.w	r5, r3, r1
 80023fe:	ea04 0602 	and.w	r6, r4, r2
 8002402:	4629      	mov	r1, r5
 8002404:	4632      	mov	r2, r6
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	f04f 0400 	mov.w	r4, #0
 800240e:	0154      	lsls	r4, r2, #5
 8002410:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002414:	014b      	lsls	r3, r1, #5
 8002416:	4619      	mov	r1, r3
 8002418:	4622      	mov	r2, r4
 800241a:	1b49      	subs	r1, r1, r5
 800241c:	eb62 0206 	sbc.w	r2, r2, r6
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	f04f 0400 	mov.w	r4, #0
 8002428:	0194      	lsls	r4, r2, #6
 800242a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800242e:	018b      	lsls	r3, r1, #6
 8002430:	1a5b      	subs	r3, r3, r1
 8002432:	eb64 0402 	sbc.w	r4, r4, r2
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	00e2      	lsls	r2, r4, #3
 8002440:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002444:	00d9      	lsls	r1, r3, #3
 8002446:	460b      	mov	r3, r1
 8002448:	4614      	mov	r4, r2
 800244a:	195b      	adds	r3, r3, r5
 800244c:	eb44 0406 	adc.w	r4, r4, r6
 8002450:	f04f 0100 	mov.w	r1, #0
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	02a2      	lsls	r2, r4, #10
 800245a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800245e:	0299      	lsls	r1, r3, #10
 8002460:	460b      	mov	r3, r1
 8002462:	4614      	mov	r4, r2
 8002464:	4618      	mov	r0, r3
 8002466:	4621      	mov	r1, r4
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f04f 0400 	mov.w	r4, #0
 800246e:	461a      	mov	r2, r3
 8002470:	4623      	mov	r3, r4
 8002472:	f7fd ff25 	bl	80002c0 <__aeabi_uldivmod>
 8002476:	4603      	mov	r3, r0
 8002478:	460c      	mov	r4, r1
 800247a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	0f1b      	lsrs	r3, r3, #28
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	613b      	str	r3, [r7, #16]
      break;
 8002492:	e002      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x338>)
 8002496:	613b      	str	r3, [r7, #16]
      break;
 8002498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800249a:	693b      	ldr	r3, [r7, #16]
}
 800249c:	4618      	mov	r0, r3
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	00f42400 	.word	0x00f42400
 80024ac:	007a1200 	.word	0x007a1200

080024b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8083 	beq.w	80025d0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024ca:	4b95      	ldr	r3, [pc, #596]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d019      	beq.n	800250a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024d6:	4b92      	ldr	r3, [pc, #584]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024e2:	4b8f      	ldr	r3, [pc, #572]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ee:	d00c      	beq.n	800250a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f0:	4b8b      	ldr	r3, [pc, #556]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	d112      	bne.n	8002522 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fc:	4b88      	ldr	r3, [pc, #544]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002508:	d10b      	bne.n	8002522 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250a:	4b85      	ldr	r3, [pc, #532]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d05b      	beq.n	80025ce <HAL_RCC_OscConfig+0x11e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d157      	bne.n	80025ce <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e216      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x8a>
 800252c:	4b7c      	ldr	r3, [pc, #496]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a7b      	ldr	r2, [pc, #492]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e01d      	b.n	8002576 <HAL_RCC_OscConfig+0xc6>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002542:	d10c      	bne.n	800255e <HAL_RCC_OscConfig+0xae>
 8002544:	4b76      	ldr	r3, [pc, #472]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a75      	ldr	r2, [pc, #468]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 800254a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b73      	ldr	r3, [pc, #460]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a72      	ldr	r2, [pc, #456]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e00b      	b.n	8002576 <HAL_RCC_OscConfig+0xc6>
 800255e:	4b70      	ldr	r3, [pc, #448]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6f      	ldr	r2, [pc, #444]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 8002564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b6d      	ldr	r3, [pc, #436]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6c      	ldr	r2, [pc, #432]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 8002570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002574:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d013      	beq.n	80025a6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7fe fcc7 	bl	8000f10 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002586:	f7fe fcc3 	bl	8000f10 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	; 0x64
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1db      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002598:	4b61      	ldr	r3, [pc, #388]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0xd6>
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe fcb3 	bl	8000f10 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ae:	f7fe fcaf 	bl	8000f10 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b64      	cmp	r3, #100	; 0x64
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1c7      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c0:	4b57      	ldr	r3, [pc, #348]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0xfe>
 80025cc:	e000      	b.n	80025d0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d06f      	beq.n	80026bc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025dc:	4b50      	ldr	r3, [pc, #320]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d017      	beq.n	8002618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025e8:	4b4d      	ldr	r3, [pc, #308]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d105      	bne.n	8002600 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025f4:	4b4a      	ldr	r3, [pc, #296]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00b      	beq.n	8002618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002600:	4b47      	ldr	r3, [pc, #284]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d11c      	bne.n	8002646 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260c:	4b44      	ldr	r3, [pc, #272]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d116      	bne.n	8002646 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002618:	4b41      	ldr	r3, [pc, #260]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x180>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d001      	beq.n	8002630 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e18f      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4938      	ldr	r1, [pc, #224]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002644:	e03a      	b.n	80026bc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d020      	beq.n	8002690 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264e:	4b35      	ldr	r3, [pc, #212]	; (8002724 <HAL_RCC_OscConfig+0x274>)
 8002650:	2201      	movs	r2, #1
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fc5c 	bl	8000f10 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe fc58 	bl	8000f10 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e170      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	4b29      	ldr	r3, [pc, #164]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4925      	ldr	r1, [pc, #148]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
 800268e:	e015      	b.n	80026bc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCC_OscConfig+0x274>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7fe fc3b 	bl	8000f10 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269e:	f7fe fc37 	bl	8000f10 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e14f      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d037      	beq.n	8002738 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d016      	beq.n	80026fe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_RCC_OscConfig+0x278>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe fc1b 	bl	8000f10 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026de:	f7fe fc17 	bl	8000f10 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e12f      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_OscConfig+0x270>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x22e>
 80026fc:	e01c      	b.n	8002738 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_RCC_OscConfig+0x278>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe fc04 	bl	8000f10 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270a:	e00f      	b.n	800272c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800270c:	f7fe fc00 	bl	8000f10 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d908      	bls.n	800272c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e118      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	42470000 	.word	0x42470000
 8002728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	4b8a      	ldr	r3, [pc, #552]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 800272e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1e9      	bne.n	800270c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8097 	beq.w	8002874 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274a:	4b83      	ldr	r3, [pc, #524]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b7f      	ldr	r3, [pc, #508]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a7e      	ldr	r2, [pc, #504]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b7c      	ldr	r3, [pc, #496]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002772:	2301      	movs	r3, #1
 8002774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b79      	ldr	r3, [pc, #484]	; (800295c <HAL_RCC_OscConfig+0x4ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d118      	bne.n	80027b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002782:	4b76      	ldr	r3, [pc, #472]	; (800295c <HAL_RCC_OscConfig+0x4ac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a75      	ldr	r2, [pc, #468]	; (800295c <HAL_RCC_OscConfig+0x4ac>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278e:	f7fe fbbf 	bl	8000f10 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002796:	f7fe fbbb 	bl	8000f10 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e0d3      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4b6c      	ldr	r3, [pc, #432]	; (800295c <HAL_RCC_OscConfig+0x4ac>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d106      	bne.n	80027ca <HAL_RCC_OscConfig+0x31a>
 80027bc:	4b66      	ldr	r3, [pc, #408]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a65      	ldr	r2, [pc, #404]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
 80027c8:	e01c      	b.n	8002804 <HAL_RCC_OscConfig+0x354>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b05      	cmp	r3, #5
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0x33c>
 80027d2:	4b61      	ldr	r3, [pc, #388]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	4a60      	ldr	r2, [pc, #384]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
 80027de:	4b5e      	ldr	r3, [pc, #376]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a5d      	ldr	r2, [pc, #372]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0x354>
 80027ec:	4b5a      	ldr	r3, [pc, #360]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	4a59      	ldr	r2, [pc, #356]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70
 80027f8:	4b57      	ldr	r3, [pc, #348]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a56      	ldr	r2, [pc, #344]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 80027fe:	f023 0304 	bic.w	r3, r3, #4
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d015      	beq.n	8002838 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280c:	f7fe fb80 	bl	8000f10 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	e00a      	b.n	800282a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7fe fb7c 	bl	8000f10 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e092      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282a:	4b4b      	ldr	r3, [pc, #300]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0ee      	beq.n	8002814 <HAL_RCC_OscConfig+0x364>
 8002836:	e014      	b.n	8002862 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe fb6a 	bl	8000f10 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fb66 	bl	8000f10 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e07c      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002856:	4b40      	ldr	r3, [pc, #256]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ee      	bne.n	8002840 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002868:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	4a3a      	ldr	r2, [pc, #232]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 800286e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002872:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d068      	beq.n	800294e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800287c:	4b36      	ldr	r3, [pc, #216]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b08      	cmp	r3, #8
 8002886:	d060      	beq.n	800294a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d145      	bne.n	800291c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b33      	ldr	r3, [pc, #204]	; (8002960 <HAL_RCC_OscConfig+0x4b0>)
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fb3b 	bl	8000f10 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fb37 	bl	8000f10 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e04f      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b0:	4b29      	ldr	r3, [pc, #164]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f0      	bne.n	800289e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	019b      	lsls	r3, r3, #6
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	3b01      	subs	r3, #1
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	061b      	lsls	r3, r3, #24
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	071b      	lsls	r3, r3, #28
 80028e8:	491b      	ldr	r1, [pc, #108]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_RCC_OscConfig+0x4b0>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fb0c 	bl	8000f10 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe fb08 	bl	8000f10 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e020      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x44c>
 800291a:	e018      	b.n	800294e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291c:	4b10      	ldr	r3, [pc, #64]	; (8002960 <HAL_RCC_OscConfig+0x4b0>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7fe faf5 	bl	8000f10 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292a:	f7fe faf1 	bl	8000f10 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e009      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_RCC_OscConfig+0x4a8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f0      	bne.n	800292a <HAL_RCC_OscConfig+0x47a>
 8002948:	e001      	b.n	800294e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40023800 	.word	0x40023800
 800295c:	40007000 	.word	0x40007000
 8002960:	42470060 	.word	0x42470060

08002964 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e01d      	b.n	80029b2 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe f8fc 	bl	8000b88 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 fa1e 	bl	8002de4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b0c      	cmp	r3, #12
 80029ca:	d841      	bhi.n	8002a50 <HAL_TIM_OC_Start_IT+0x94>
 80029cc:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <HAL_TIM_OC_Start_IT+0x18>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	08002a09 	.word	0x08002a09
 80029d8:	08002a51 	.word	0x08002a51
 80029dc:	08002a51 	.word	0x08002a51
 80029e0:	08002a51 	.word	0x08002a51
 80029e4:	08002a1b 	.word	0x08002a1b
 80029e8:	08002a51 	.word	0x08002a51
 80029ec:	08002a51 	.word	0x08002a51
 80029f0:	08002a51 	.word	0x08002a51
 80029f4:	08002a2d 	.word	0x08002a2d
 80029f8:	08002a51 	.word	0x08002a51
 80029fc:	08002a51 	.word	0x08002a51
 8002a00:	08002a51 	.word	0x08002a51
 8002a04:	08002a3f 	.word	0x08002a3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0202 	orr.w	r2, r2, #2
 8002a16:	60da      	str	r2, [r3, #12]
      break;
 8002a18:	e01b      	b.n	8002a52 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0204 	orr.w	r2, r2, #4
 8002a28:	60da      	str	r2, [r3, #12]
      break;
 8002a2a:	e012      	b.n	8002a52 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0208 	orr.w	r2, r2, #8
 8002a3a:	60da      	str	r2, [r3, #12]
      break;
 8002a3c:	e009      	b.n	8002a52 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0210 	orr.w	r2, r2, #16
 8002a4c:	60da      	str	r2, [r3, #12]
      break;
 8002a4e:	e000      	b.n	8002a52 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8002a50:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2201      	movs	r2, #1
 8002a58:	6839      	ldr	r1, [r7, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fc12 	bl	8003284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a15      	ldr	r2, [pc, #84]	; (8002abc <HAL_TIM_OC_Start_IT+0x100>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_TIM_OC_Start_IT+0xb8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <HAL_TIM_OC_Start_IT+0x104>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d101      	bne.n	8002a78 <HAL_TIM_OC_Start_IT+0xbc>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_TIM_OC_Start_IT+0xbe>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b06      	cmp	r3, #6
 8002a9e:	d007      	beq.n	8002ab0 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40010400 	.word	0x40010400

08002ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d122      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d11b      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0202 	mvn.w	r2, #2
 8002af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f94e 	bl	8002da8 <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fd ffaa 	bl	8000a68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f951 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d122      	bne.n	8002b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d11b      	bne.n	8002b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0204 	mvn.w	r2, #4
 8002b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f924 	bl	8002da8 <HAL_TIM_IC_CaptureCallback>
 8002b60:	e005      	b.n	8002b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fd ff80 	bl	8000a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f927 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d122      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0208 	mvn.w	r2, #8
 8002b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f8fa 	bl	8002da8 <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd ff56 	bl	8000a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8fd 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d122      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d11b      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0210 	mvn.w	r2, #16
 8002bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f8d0 	bl	8002da8 <HAL_TIM_IC_CaptureCallback>
 8002c08:	e005      	b.n	8002c16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fd ff2c 	bl	8000a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8d3 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d107      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0201 	mvn.w	r2, #1
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f8a6 	bl	8002d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b80      	cmp	r3, #128	; 0x80
 8002c54:	d10e      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c60:	2b80      	cmp	r3, #128	; 0x80
 8002c62:	d107      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fbb4 	bl	80033dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f898 	bl	8002dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d10e      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d107      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0220 	mvn.w	r2, #32
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fb7e 	bl	80033c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_OC_ConfigChannel+0x1a>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e04e      	b.n	8002d8c <HAL_TIM_OC_ConfigChannel+0xb8>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	d839      	bhi.n	8002d78 <HAL_TIM_OC_ConfigChannel+0xa4>
 8002d04:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <HAL_TIM_OC_ConfigChannel+0x38>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d41 	.word	0x08002d41
 8002d10:	08002d79 	.word	0x08002d79
 8002d14:	08002d79 	.word	0x08002d79
 8002d18:	08002d79 	.word	0x08002d79
 8002d1c:	08002d4f 	.word	0x08002d4f
 8002d20:	08002d79 	.word	0x08002d79
 8002d24:	08002d79 	.word	0x08002d79
 8002d28:	08002d79 	.word	0x08002d79
 8002d2c:	08002d5d 	.word	0x08002d5d
 8002d30:	08002d79 	.word	0x08002d79
 8002d34:	08002d79 	.word	0x08002d79
 8002d38:	08002d79 	.word	0x08002d79
 8002d3c:	08002d6b 	.word	0x08002d6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f8ec 	bl	8002f24 <TIM_OC1_SetConfig>
      break;
 8002d4c:	e015      	b.n	8002d7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 f955 	bl	8003004 <TIM_OC2_SetConfig>
      break;
 8002d5a:	e00e      	b.n	8002d7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f9c4 	bl	80030f0 <TIM_OC3_SetConfig>
      break;
 8002d68:	e007      	b.n	8002d7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fa31 	bl	80031d8 <TIM_OC4_SetConfig>
      break;
 8002d76:	e000      	b.n	8002d7a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8002d78:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a40      	ldr	r2, [pc, #256]	; (8002ef8 <TIM_Base_SetConfig+0x114>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d013      	beq.n	8002e24 <TIM_Base_SetConfig+0x40>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e02:	d00f      	beq.n	8002e24 <TIM_Base_SetConfig+0x40>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a3d      	ldr	r2, [pc, #244]	; (8002efc <TIM_Base_SetConfig+0x118>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00b      	beq.n	8002e24 <TIM_Base_SetConfig+0x40>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <TIM_Base_SetConfig+0x11c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d007      	beq.n	8002e24 <TIM_Base_SetConfig+0x40>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <TIM_Base_SetConfig+0x120>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <TIM_Base_SetConfig+0x40>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <TIM_Base_SetConfig+0x124>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d108      	bne.n	8002e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a2f      	ldr	r2, [pc, #188]	; (8002ef8 <TIM_Base_SetConfig+0x114>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d02b      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e44:	d027      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a2c      	ldr	r2, [pc, #176]	; (8002efc <TIM_Base_SetConfig+0x118>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d023      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a2b      	ldr	r2, [pc, #172]	; (8002f00 <TIM_Base_SetConfig+0x11c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01f      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a2a      	ldr	r2, [pc, #168]	; (8002f04 <TIM_Base_SetConfig+0x120>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d01b      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <TIM_Base_SetConfig+0x124>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d017      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <TIM_Base_SetConfig+0x128>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a27      	ldr	r2, [pc, #156]	; (8002f10 <TIM_Base_SetConfig+0x12c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00f      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <TIM_Base_SetConfig+0x130>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00b      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <TIM_Base_SetConfig+0x134>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a24      	ldr	r2, [pc, #144]	; (8002f1c <TIM_Base_SetConfig+0x138>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d003      	beq.n	8002e96 <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a23      	ldr	r2, [pc, #140]	; (8002f20 <TIM_Base_SetConfig+0x13c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d108      	bne.n	8002ea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <TIM_Base_SetConfig+0x114>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <TIM_Base_SetConfig+0xf8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <TIM_Base_SetConfig+0x124>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d103      	bne.n	8002ee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	615a      	str	r2, [r3, #20]
}
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	40000400 	.word	0x40000400
 8002f00:	40000800 	.word	0x40000800
 8002f04:	40000c00 	.word	0x40000c00
 8002f08:	40010400 	.word	0x40010400
 8002f0c:	40014000 	.word	0x40014000
 8002f10:	40014400 	.word	0x40014400
 8002f14:	40014800 	.word	0x40014800
 8002f18:	40001800 	.word	0x40001800
 8002f1c:	40001c00 	.word	0x40001c00
 8002f20:	40002000 	.word	0x40002000

08002f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f023 0201 	bic.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f023 0302 	bic.w	r3, r3, #2
 8002f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a20      	ldr	r2, [pc, #128]	; (8002ffc <TIM_OC1_SetConfig+0xd8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d003      	beq.n	8002f88 <TIM_OC1_SetConfig+0x64>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a1f      	ldr	r2, [pc, #124]	; (8003000 <TIM_OC1_SetConfig+0xdc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d10c      	bne.n	8002fa2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f023 0308 	bic.w	r3, r3, #8
 8002f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f023 0304 	bic.w	r3, r3, #4
 8002fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <TIM_OC1_SetConfig+0xd8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d003      	beq.n	8002fb2 <TIM_OC1_SetConfig+0x8e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a14      	ldr	r2, [pc, #80]	; (8003000 <TIM_OC1_SetConfig+0xdc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d111      	bne.n	8002fd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	621a      	str	r2, [r3, #32]
}
 8002ff0:	bf00      	nop
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40010000 	.word	0x40010000
 8003000:	40010400 	.word	0x40010400

08003004 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f023 0210 	bic.w	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f023 0320 	bic.w	r3, r3, #32
 800304e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <TIM_OC2_SetConfig+0xe4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <TIM_OC2_SetConfig+0x68>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a21      	ldr	r2, [pc, #132]	; (80030ec <TIM_OC2_SetConfig+0xe8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d10d      	bne.n	8003088 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003086:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a17      	ldr	r2, [pc, #92]	; (80030e8 <TIM_OC2_SetConfig+0xe4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <TIM_OC2_SetConfig+0x94>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a16      	ldr	r2, [pc, #88]	; (80030ec <TIM_OC2_SetConfig+0xe8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d113      	bne.n	80030c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800309e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	621a      	str	r2, [r3, #32]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40010400 	.word	0x40010400

080030f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0303 	bic.w	r3, r3, #3
 8003126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <TIM_OC3_SetConfig+0xe0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d003      	beq.n	8003156 <TIM_OC3_SetConfig+0x66>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a20      	ldr	r2, [pc, #128]	; (80031d4 <TIM_OC3_SetConfig+0xe4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10d      	bne.n	8003172 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800315c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <TIM_OC3_SetConfig+0xe0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d003      	beq.n	8003182 <TIM_OC3_SetConfig+0x92>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <TIM_OC3_SetConfig+0xe4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d113      	bne.n	80031aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	621a      	str	r2, [r3, #32]
}
 80031c4:	bf00      	nop
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40010400 	.word	0x40010400

080031d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	031b      	lsls	r3, r3, #12
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a12      	ldr	r2, [pc, #72]	; (800327c <TIM_OC4_SetConfig+0xa4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d003      	beq.n	8003240 <TIM_OC4_SetConfig+0x68>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a11      	ldr	r2, [pc, #68]	; (8003280 <TIM_OC4_SetConfig+0xa8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d109      	bne.n	8003254 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003246:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	019b      	lsls	r3, r3, #6
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000
 8003280:	40010400 	.word	0x40010400

08003284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	2201      	movs	r2, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a1a      	ldr	r2, [r3, #32]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	401a      	ands	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1a      	ldr	r2, [r3, #32]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]
}
 80032c2:	bf00      	nop
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e05a      	b.n	800339e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a21      	ldr	r2, [pc, #132]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d022      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003334:	d01d      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1d      	ldr	r2, [pc, #116]	; (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d018      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00e      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a18      	ldr	r2, [pc, #96]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10c      	bne.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	4313      	orrs	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40000c00 	.word	0x40000c00
 80033bc:	40010400 	.word	0x40010400
 80033c0:	40014000 	.word	0x40014000
 80033c4:	40001800 	.word	0x40001800

080033c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e03f      	b.n	8003482 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd fc14 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	; 0x24
 8003420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f90b 	bl	8003650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b088      	sub	sp, #32
 800348e:	af02      	add	r7, sp, #8
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	f040 8083 	bne.w	80035b2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_UART_Transmit+0x2e>
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e07b      	b.n	80035b4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_UART_Transmit+0x40>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e074      	b.n	80035b4 <HAL_UART_Transmit+0x12a>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2221      	movs	r2, #33	; 0x21
 80034dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034e0:	f7fd fd16 	bl	8000f10 <HAL_GetTick>
 80034e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	88fa      	ldrh	r2, [r7, #6]
 80034ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	88fa      	ldrh	r2, [r7, #6]
 80034f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80034fa:	e042      	b.n	8003582 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003512:	d122      	bne.n	800355a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2200      	movs	r2, #0
 800351c:	2180      	movs	r1, #128	; 0x80
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f84c 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e042      	b.n	80035b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003540:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	3302      	adds	r3, #2
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	e017      	b.n	8003582 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3301      	adds	r3, #1
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	e013      	b.n	8003582 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2200      	movs	r2, #0
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f829 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e01f      	b.n	80035b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	60ba      	str	r2, [r7, #8]
 800357a:	781a      	ldrb	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1b7      	bne.n	80034fc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2200      	movs	r2, #0
 8003594:	2140      	movs	r1, #64	; 0x40
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f810 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e006      	b.n	80035b4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e000      	b.n	80035b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035cc:	e02c      	b.n	8003628 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d028      	beq.n	8003628 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <UART_WaitOnFlagUntilTimeout+0x30>
 80035dc:	f7fd fc98 	bl	8000f10 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d21d      	bcs.n	8003628 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e00f      	b.n	8003648 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	429a      	cmp	r2, r3
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	429a      	cmp	r2, r3
 8003644:	d0c3      	beq.n	80035ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003692:	f023 030c 	bic.w	r3, r3, #12
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	68f9      	ldr	r1, [r7, #12]
 800369c:	430b      	orrs	r3, r1
 800369e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036be:	f040 818b 	bne.w	80039d8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4ac1      	ldr	r2, [pc, #772]	; (80039cc <UART_SetConfig+0x37c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d005      	beq.n	80036d8 <UART_SetConfig+0x88>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4abf      	ldr	r2, [pc, #764]	; (80039d0 <UART_SetConfig+0x380>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	f040 80bd 	bne.w	8003852 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036d8:	f7fe fd36 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 80036dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	461d      	mov	r5, r3
 80036e2:	f04f 0600 	mov.w	r6, #0
 80036e6:	46a8      	mov	r8, r5
 80036e8:	46b1      	mov	r9, r6
 80036ea:	eb18 0308 	adds.w	r3, r8, r8
 80036ee:	eb49 0409 	adc.w	r4, r9, r9
 80036f2:	4698      	mov	r8, r3
 80036f4:	46a1      	mov	r9, r4
 80036f6:	eb18 0805 	adds.w	r8, r8, r5
 80036fa:	eb49 0906 	adc.w	r9, r9, r6
 80036fe:	f04f 0100 	mov.w	r1, #0
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800370a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800370e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003712:	4688      	mov	r8, r1
 8003714:	4691      	mov	r9, r2
 8003716:	eb18 0005 	adds.w	r0, r8, r5
 800371a:	eb49 0106 	adc.w	r1, r9, r6
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	461d      	mov	r5, r3
 8003724:	f04f 0600 	mov.w	r6, #0
 8003728:	196b      	adds	r3, r5, r5
 800372a:	eb46 0406 	adc.w	r4, r6, r6
 800372e:	461a      	mov	r2, r3
 8003730:	4623      	mov	r3, r4
 8003732:	f7fc fdc5 	bl	80002c0 <__aeabi_uldivmod>
 8003736:	4603      	mov	r3, r0
 8003738:	460c      	mov	r4, r1
 800373a:	461a      	mov	r2, r3
 800373c:	4ba5      	ldr	r3, [pc, #660]	; (80039d4 <UART_SetConfig+0x384>)
 800373e:	fba3 2302 	umull	r2, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	461d      	mov	r5, r3
 800374c:	f04f 0600 	mov.w	r6, #0
 8003750:	46a9      	mov	r9, r5
 8003752:	46b2      	mov	sl, r6
 8003754:	eb19 0309 	adds.w	r3, r9, r9
 8003758:	eb4a 040a 	adc.w	r4, sl, sl
 800375c:	4699      	mov	r9, r3
 800375e:	46a2      	mov	sl, r4
 8003760:	eb19 0905 	adds.w	r9, r9, r5
 8003764:	eb4a 0a06 	adc.w	sl, sl, r6
 8003768:	f04f 0100 	mov.w	r1, #0
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003774:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003778:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800377c:	4689      	mov	r9, r1
 800377e:	4692      	mov	sl, r2
 8003780:	eb19 0005 	adds.w	r0, r9, r5
 8003784:	eb4a 0106 	adc.w	r1, sl, r6
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	461d      	mov	r5, r3
 800378e:	f04f 0600 	mov.w	r6, #0
 8003792:	196b      	adds	r3, r5, r5
 8003794:	eb46 0406 	adc.w	r4, r6, r6
 8003798:	461a      	mov	r2, r3
 800379a:	4623      	mov	r3, r4
 800379c:	f7fc fd90 	bl	80002c0 <__aeabi_uldivmod>
 80037a0:	4603      	mov	r3, r0
 80037a2:	460c      	mov	r4, r1
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b8b      	ldr	r3, [pc, #556]	; (80039d4 <UART_SetConfig+0x384>)
 80037a8:	fba3 1302 	umull	r1, r3, r3, r2
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	2164      	movs	r1, #100	; 0x64
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	3332      	adds	r3, #50	; 0x32
 80037ba:	4a86      	ldr	r2, [pc, #536]	; (80039d4 <UART_SetConfig+0x384>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037c8:	4498      	add	r8, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	461d      	mov	r5, r3
 80037ce:	f04f 0600 	mov.w	r6, #0
 80037d2:	46a9      	mov	r9, r5
 80037d4:	46b2      	mov	sl, r6
 80037d6:	eb19 0309 	adds.w	r3, r9, r9
 80037da:	eb4a 040a 	adc.w	r4, sl, sl
 80037de:	4699      	mov	r9, r3
 80037e0:	46a2      	mov	sl, r4
 80037e2:	eb19 0905 	adds.w	r9, r9, r5
 80037e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037fe:	4689      	mov	r9, r1
 8003800:	4692      	mov	sl, r2
 8003802:	eb19 0005 	adds.w	r0, r9, r5
 8003806:	eb4a 0106 	adc.w	r1, sl, r6
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	461d      	mov	r5, r3
 8003810:	f04f 0600 	mov.w	r6, #0
 8003814:	196b      	adds	r3, r5, r5
 8003816:	eb46 0406 	adc.w	r4, r6, r6
 800381a:	461a      	mov	r2, r3
 800381c:	4623      	mov	r3, r4
 800381e:	f7fc fd4f 	bl	80002c0 <__aeabi_uldivmod>
 8003822:	4603      	mov	r3, r0
 8003824:	460c      	mov	r4, r1
 8003826:	461a      	mov	r2, r3
 8003828:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <UART_SetConfig+0x384>)
 800382a:	fba3 1302 	umull	r1, r3, r3, r2
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2164      	movs	r1, #100	; 0x64
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	3332      	adds	r3, #50	; 0x32
 800383c:	4a65      	ldr	r2, [pc, #404]	; (80039d4 <UART_SetConfig+0x384>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	f003 0207 	and.w	r2, r3, #7
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4442      	add	r2, r8
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	e26f      	b.n	8003d32 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003852:	f7fe fc65 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8003856:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	461d      	mov	r5, r3
 800385c:	f04f 0600 	mov.w	r6, #0
 8003860:	46a8      	mov	r8, r5
 8003862:	46b1      	mov	r9, r6
 8003864:	eb18 0308 	adds.w	r3, r8, r8
 8003868:	eb49 0409 	adc.w	r4, r9, r9
 800386c:	4698      	mov	r8, r3
 800386e:	46a1      	mov	r9, r4
 8003870:	eb18 0805 	adds.w	r8, r8, r5
 8003874:	eb49 0906 	adc.w	r9, r9, r6
 8003878:	f04f 0100 	mov.w	r1, #0
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003884:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003888:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800388c:	4688      	mov	r8, r1
 800388e:	4691      	mov	r9, r2
 8003890:	eb18 0005 	adds.w	r0, r8, r5
 8003894:	eb49 0106 	adc.w	r1, r9, r6
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	461d      	mov	r5, r3
 800389e:	f04f 0600 	mov.w	r6, #0
 80038a2:	196b      	adds	r3, r5, r5
 80038a4:	eb46 0406 	adc.w	r4, r6, r6
 80038a8:	461a      	mov	r2, r3
 80038aa:	4623      	mov	r3, r4
 80038ac:	f7fc fd08 	bl	80002c0 <__aeabi_uldivmod>
 80038b0:	4603      	mov	r3, r0
 80038b2:	460c      	mov	r4, r1
 80038b4:	461a      	mov	r2, r3
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <UART_SetConfig+0x384>)
 80038b8:	fba3 2302 	umull	r2, r3, r3, r2
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	461d      	mov	r5, r3
 80038c6:	f04f 0600 	mov.w	r6, #0
 80038ca:	46a9      	mov	r9, r5
 80038cc:	46b2      	mov	sl, r6
 80038ce:	eb19 0309 	adds.w	r3, r9, r9
 80038d2:	eb4a 040a 	adc.w	r4, sl, sl
 80038d6:	4699      	mov	r9, r3
 80038d8:	46a2      	mov	sl, r4
 80038da:	eb19 0905 	adds.w	r9, r9, r5
 80038de:	eb4a 0a06 	adc.w	sl, sl, r6
 80038e2:	f04f 0100 	mov.w	r1, #0
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038f6:	4689      	mov	r9, r1
 80038f8:	4692      	mov	sl, r2
 80038fa:	eb19 0005 	adds.w	r0, r9, r5
 80038fe:	eb4a 0106 	adc.w	r1, sl, r6
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	461d      	mov	r5, r3
 8003908:	f04f 0600 	mov.w	r6, #0
 800390c:	196b      	adds	r3, r5, r5
 800390e:	eb46 0406 	adc.w	r4, r6, r6
 8003912:	461a      	mov	r2, r3
 8003914:	4623      	mov	r3, r4
 8003916:	f7fc fcd3 	bl	80002c0 <__aeabi_uldivmod>
 800391a:	4603      	mov	r3, r0
 800391c:	460c      	mov	r4, r1
 800391e:	461a      	mov	r2, r3
 8003920:	4b2c      	ldr	r3, [pc, #176]	; (80039d4 <UART_SetConfig+0x384>)
 8003922:	fba3 1302 	umull	r1, r3, r3, r2
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2164      	movs	r1, #100	; 0x64
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	3332      	adds	r3, #50	; 0x32
 8003934:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <UART_SetConfig+0x384>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003942:	4498      	add	r8, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	461d      	mov	r5, r3
 8003948:	f04f 0600 	mov.w	r6, #0
 800394c:	46a9      	mov	r9, r5
 800394e:	46b2      	mov	sl, r6
 8003950:	eb19 0309 	adds.w	r3, r9, r9
 8003954:	eb4a 040a 	adc.w	r4, sl, sl
 8003958:	4699      	mov	r9, r3
 800395a:	46a2      	mov	sl, r4
 800395c:	eb19 0905 	adds.w	r9, r9, r5
 8003960:	eb4a 0a06 	adc.w	sl, sl, r6
 8003964:	f04f 0100 	mov.w	r1, #0
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003970:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003974:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003978:	4689      	mov	r9, r1
 800397a:	4692      	mov	sl, r2
 800397c:	eb19 0005 	adds.w	r0, r9, r5
 8003980:	eb4a 0106 	adc.w	r1, sl, r6
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	461d      	mov	r5, r3
 800398a:	f04f 0600 	mov.w	r6, #0
 800398e:	196b      	adds	r3, r5, r5
 8003990:	eb46 0406 	adc.w	r4, r6, r6
 8003994:	461a      	mov	r2, r3
 8003996:	4623      	mov	r3, r4
 8003998:	f7fc fc92 	bl	80002c0 <__aeabi_uldivmod>
 800399c:	4603      	mov	r3, r0
 800399e:	460c      	mov	r4, r1
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <UART_SetConfig+0x384>)
 80039a4:	fba3 1302 	umull	r1, r3, r3, r2
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	2164      	movs	r1, #100	; 0x64
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	3332      	adds	r3, #50	; 0x32
 80039b6:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <UART_SetConfig+0x384>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	f003 0207 	and.w	r2, r3, #7
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4442      	add	r2, r8
 80039c8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80039ca:	e1b2      	b.n	8003d32 <UART_SetConfig+0x6e2>
 80039cc:	40011000 	.word	0x40011000
 80039d0:	40011400 	.word	0x40011400
 80039d4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4ad7      	ldr	r2, [pc, #860]	; (8003d3c <UART_SetConfig+0x6ec>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d005      	beq.n	80039ee <UART_SetConfig+0x39e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4ad6      	ldr	r2, [pc, #856]	; (8003d40 <UART_SetConfig+0x6f0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	f040 80d1 	bne.w	8003b90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80039ee:	f7fe fbab 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 80039f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	469a      	mov	sl, r3
 80039f8:	f04f 0b00 	mov.w	fp, #0
 80039fc:	46d0      	mov	r8, sl
 80039fe:	46d9      	mov	r9, fp
 8003a00:	eb18 0308 	adds.w	r3, r8, r8
 8003a04:	eb49 0409 	adc.w	r4, r9, r9
 8003a08:	4698      	mov	r8, r3
 8003a0a:	46a1      	mov	r9, r4
 8003a0c:	eb18 080a 	adds.w	r8, r8, sl
 8003a10:	eb49 090b 	adc.w	r9, r9, fp
 8003a14:	f04f 0100 	mov.w	r1, #0
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a28:	4688      	mov	r8, r1
 8003a2a:	4691      	mov	r9, r2
 8003a2c:	eb1a 0508 	adds.w	r5, sl, r8
 8003a30:	eb4b 0609 	adc.w	r6, fp, r9
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	f04f 0400 	mov.w	r4, #0
 8003a46:	0094      	lsls	r4, r2, #2
 8003a48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a4c:	008b      	lsls	r3, r1, #2
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4623      	mov	r3, r4
 8003a52:	4628      	mov	r0, r5
 8003a54:	4631      	mov	r1, r6
 8003a56:	f7fc fc33 	bl	80002c0 <__aeabi_uldivmod>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4bb8      	ldr	r3, [pc, #736]	; (8003d44 <UART_SetConfig+0x6f4>)
 8003a62:	fba3 2302 	umull	r2, r3, r3, r2
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	469b      	mov	fp, r3
 8003a70:	f04f 0c00 	mov.w	ip, #0
 8003a74:	46d9      	mov	r9, fp
 8003a76:	46e2      	mov	sl, ip
 8003a78:	eb19 0309 	adds.w	r3, r9, r9
 8003a7c:	eb4a 040a 	adc.w	r4, sl, sl
 8003a80:	4699      	mov	r9, r3
 8003a82:	46a2      	mov	sl, r4
 8003a84:	eb19 090b 	adds.w	r9, r9, fp
 8003a88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a8c:	f04f 0100 	mov.w	r1, #0
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aa0:	4689      	mov	r9, r1
 8003aa2:	4692      	mov	sl, r2
 8003aa4:	eb1b 0509 	adds.w	r5, fp, r9
 8003aa8:	eb4c 060a 	adc.w	r6, ip, sl
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	f04f 0400 	mov.w	r4, #0
 8003abe:	0094      	lsls	r4, r2, #2
 8003ac0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ac4:	008b      	lsls	r3, r1, #2
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4623      	mov	r3, r4
 8003aca:	4628      	mov	r0, r5
 8003acc:	4631      	mov	r1, r6
 8003ace:	f7fc fbf7 	bl	80002c0 <__aeabi_uldivmod>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4b9a      	ldr	r3, [pc, #616]	; (8003d44 <UART_SetConfig+0x6f4>)
 8003ada:	fba3 1302 	umull	r1, r3, r3, r2
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	2164      	movs	r1, #100	; 0x64
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	3332      	adds	r3, #50	; 0x32
 8003aec:	4a95      	ldr	r2, [pc, #596]	; (8003d44 <UART_SetConfig+0x6f4>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af8:	4498      	add	r8, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	469b      	mov	fp, r3
 8003afe:	f04f 0c00 	mov.w	ip, #0
 8003b02:	46d9      	mov	r9, fp
 8003b04:	46e2      	mov	sl, ip
 8003b06:	eb19 0309 	adds.w	r3, r9, r9
 8003b0a:	eb4a 040a 	adc.w	r4, sl, sl
 8003b0e:	4699      	mov	r9, r3
 8003b10:	46a2      	mov	sl, r4
 8003b12:	eb19 090b 	adds.w	r9, r9, fp
 8003b16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b2e:	4689      	mov	r9, r1
 8003b30:	4692      	mov	sl, r2
 8003b32:	eb1b 0509 	adds.w	r5, fp, r9
 8003b36:	eb4c 060a 	adc.w	r6, ip, sl
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	f04f 0400 	mov.w	r4, #0
 8003b4c:	0094      	lsls	r4, r2, #2
 8003b4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b52:	008b      	lsls	r3, r1, #2
 8003b54:	461a      	mov	r2, r3
 8003b56:	4623      	mov	r3, r4
 8003b58:	4628      	mov	r0, r5
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	f7fc fbb0 	bl	80002c0 <__aeabi_uldivmod>
 8003b60:	4603      	mov	r3, r0
 8003b62:	460c      	mov	r4, r1
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b77      	ldr	r3, [pc, #476]	; (8003d44 <UART_SetConfig+0x6f4>)
 8003b68:	fba3 1302 	umull	r1, r3, r3, r2
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	2164      	movs	r1, #100	; 0x64
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	3332      	adds	r3, #50	; 0x32
 8003b7a:	4a72      	ldr	r2, [pc, #456]	; (8003d44 <UART_SetConfig+0x6f4>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	f003 020f 	and.w	r2, r3, #15
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4442      	add	r2, r8
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	e0d0      	b.n	8003d32 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b90:	f7fe fac6 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8003b94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	469a      	mov	sl, r3
 8003b9a:	f04f 0b00 	mov.w	fp, #0
 8003b9e:	46d0      	mov	r8, sl
 8003ba0:	46d9      	mov	r9, fp
 8003ba2:	eb18 0308 	adds.w	r3, r8, r8
 8003ba6:	eb49 0409 	adc.w	r4, r9, r9
 8003baa:	4698      	mov	r8, r3
 8003bac:	46a1      	mov	r9, r4
 8003bae:	eb18 080a 	adds.w	r8, r8, sl
 8003bb2:	eb49 090b 	adc.w	r9, r9, fp
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bca:	4688      	mov	r8, r1
 8003bcc:	4691      	mov	r9, r2
 8003bce:	eb1a 0508 	adds.w	r5, sl, r8
 8003bd2:	eb4b 0609 	adc.w	r6, fp, r9
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	f04f 0400 	mov.w	r4, #0
 8003be8:	0094      	lsls	r4, r2, #2
 8003bea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bee:	008b      	lsls	r3, r1, #2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4623      	mov	r3, r4
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	4631      	mov	r1, r6
 8003bf8:	f7fc fb62 	bl	80002c0 <__aeabi_uldivmod>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	460c      	mov	r4, r1
 8003c00:	461a      	mov	r2, r3
 8003c02:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <UART_SetConfig+0x6f4>)
 8003c04:	fba3 2302 	umull	r2, r3, r3, r2
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	469b      	mov	fp, r3
 8003c12:	f04f 0c00 	mov.w	ip, #0
 8003c16:	46d9      	mov	r9, fp
 8003c18:	46e2      	mov	sl, ip
 8003c1a:	eb19 0309 	adds.w	r3, r9, r9
 8003c1e:	eb4a 040a 	adc.w	r4, sl, sl
 8003c22:	4699      	mov	r9, r3
 8003c24:	46a2      	mov	sl, r4
 8003c26:	eb19 090b 	adds.w	r9, r9, fp
 8003c2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c2e:	f04f 0100 	mov.w	r1, #0
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c42:	4689      	mov	r9, r1
 8003c44:	4692      	mov	sl, r2
 8003c46:	eb1b 0509 	adds.w	r5, fp, r9
 8003c4a:	eb4c 060a 	adc.w	r6, ip, sl
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4619      	mov	r1, r3
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	f04f 0400 	mov.w	r4, #0
 8003c60:	0094      	lsls	r4, r2, #2
 8003c62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c66:	008b      	lsls	r3, r1, #2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	4631      	mov	r1, r6
 8003c70:	f7fc fb26 	bl	80002c0 <__aeabi_uldivmod>
 8003c74:	4603      	mov	r3, r0
 8003c76:	460c      	mov	r4, r1
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4b32      	ldr	r3, [pc, #200]	; (8003d44 <UART_SetConfig+0x6f4>)
 8003c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	2164      	movs	r1, #100	; 0x64
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	3332      	adds	r3, #50	; 0x32
 8003c8e:	4a2d      	ldr	r2, [pc, #180]	; (8003d44 <UART_SetConfig+0x6f4>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c9a:	4498      	add	r8, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	469b      	mov	fp, r3
 8003ca0:	f04f 0c00 	mov.w	ip, #0
 8003ca4:	46d9      	mov	r9, fp
 8003ca6:	46e2      	mov	sl, ip
 8003ca8:	eb19 0309 	adds.w	r3, r9, r9
 8003cac:	eb4a 040a 	adc.w	r4, sl, sl
 8003cb0:	4699      	mov	r9, r3
 8003cb2:	46a2      	mov	sl, r4
 8003cb4:	eb19 090b 	adds.w	r9, r9, fp
 8003cb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cbc:	f04f 0100 	mov.w	r1, #0
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ccc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cd0:	4689      	mov	r9, r1
 8003cd2:	4692      	mov	sl, r2
 8003cd4:	eb1b 0509 	adds.w	r5, fp, r9
 8003cd8:	eb4c 060a 	adc.w	r6, ip, sl
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	f04f 0400 	mov.w	r4, #0
 8003cee:	0094      	lsls	r4, r2, #2
 8003cf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cf4:	008b      	lsls	r3, r1, #2
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	4631      	mov	r1, r6
 8003cfe:	f7fc fadf 	bl	80002c0 <__aeabi_uldivmod>
 8003d02:	4603      	mov	r3, r0
 8003d04:	460c      	mov	r4, r1
 8003d06:	461a      	mov	r2, r3
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <UART_SetConfig+0x6f4>)
 8003d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	2164      	movs	r1, #100	; 0x64
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	3332      	adds	r3, #50	; 0x32
 8003d1c:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <UART_SetConfig+0x6f4>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	f003 020f 	and.w	r2, r3, #15
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4442      	add	r2, r8
 8003d2e:	609a      	str	r2, [r3, #8]
}
 8003d30:	e7ff      	b.n	8003d32 <UART_SetConfig+0x6e2>
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3c:	40011000 	.word	0x40011000
 8003d40:	40011400 	.word	0x40011400
 8003d44:	51eb851f 	.word	0x51eb851f

08003d48 <__errno>:
 8003d48:	4b01      	ldr	r3, [pc, #4]	; (8003d50 <__errno+0x8>)
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	2000000c 	.word	0x2000000c

08003d54 <__libc_init_array>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	4e0d      	ldr	r6, [pc, #52]	; (8003d8c <__libc_init_array+0x38>)
 8003d58:	4c0d      	ldr	r4, [pc, #52]	; (8003d90 <__libc_init_array+0x3c>)
 8003d5a:	1ba4      	subs	r4, r4, r6
 8003d5c:	10a4      	asrs	r4, r4, #2
 8003d5e:	2500      	movs	r5, #0
 8003d60:	42a5      	cmp	r5, r4
 8003d62:	d109      	bne.n	8003d78 <__libc_init_array+0x24>
 8003d64:	4e0b      	ldr	r6, [pc, #44]	; (8003d94 <__libc_init_array+0x40>)
 8003d66:	4c0c      	ldr	r4, [pc, #48]	; (8003d98 <__libc_init_array+0x44>)
 8003d68:	f000 fc26 	bl	80045b8 <_init>
 8003d6c:	1ba4      	subs	r4, r4, r6
 8003d6e:	10a4      	asrs	r4, r4, #2
 8003d70:	2500      	movs	r5, #0
 8003d72:	42a5      	cmp	r5, r4
 8003d74:	d105      	bne.n	8003d82 <__libc_init_array+0x2e>
 8003d76:	bd70      	pop	{r4, r5, r6, pc}
 8003d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d7c:	4798      	blx	r3
 8003d7e:	3501      	adds	r5, #1
 8003d80:	e7ee      	b.n	8003d60 <__libc_init_array+0xc>
 8003d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d86:	4798      	blx	r3
 8003d88:	3501      	adds	r5, #1
 8003d8a:	e7f2      	b.n	8003d72 <__libc_init_array+0x1e>
 8003d8c:	08004644 	.word	0x08004644
 8003d90:	08004644 	.word	0x08004644
 8003d94:	08004644 	.word	0x08004644
 8003d98:	08004648 	.word	0x08004648

08003d9c <memset>:
 8003d9c:	4402      	add	r2, r0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d100      	bne.n	8003da6 <memset+0xa>
 8003da4:	4770      	bx	lr
 8003da6:	f803 1b01 	strb.w	r1, [r3], #1
 8003daa:	e7f9      	b.n	8003da0 <memset+0x4>

08003dac <siprintf>:
 8003dac:	b40e      	push	{r1, r2, r3}
 8003dae:	b500      	push	{lr}
 8003db0:	b09c      	sub	sp, #112	; 0x70
 8003db2:	ab1d      	add	r3, sp, #116	; 0x74
 8003db4:	9002      	str	r0, [sp, #8]
 8003db6:	9006      	str	r0, [sp, #24]
 8003db8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dbc:	4809      	ldr	r0, [pc, #36]	; (8003de4 <siprintf+0x38>)
 8003dbe:	9107      	str	r1, [sp, #28]
 8003dc0:	9104      	str	r1, [sp, #16]
 8003dc2:	4909      	ldr	r1, [pc, #36]	; (8003de8 <siprintf+0x3c>)
 8003dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dc8:	9105      	str	r1, [sp, #20]
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	a902      	add	r1, sp, #8
 8003dd0:	f000 f866 	bl	8003ea0 <_svfiprintf_r>
 8003dd4:	9b02      	ldr	r3, [sp, #8]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	b01c      	add	sp, #112	; 0x70
 8003ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003de0:	b003      	add	sp, #12
 8003de2:	4770      	bx	lr
 8003de4:	2000000c 	.word	0x2000000c
 8003de8:	ffff0208 	.word	0xffff0208

08003dec <__ssputs_r>:
 8003dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df0:	688e      	ldr	r6, [r1, #8]
 8003df2:	429e      	cmp	r6, r3
 8003df4:	4682      	mov	sl, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	4690      	mov	r8, r2
 8003dfa:	4699      	mov	r9, r3
 8003dfc:	d837      	bhi.n	8003e6e <__ssputs_r+0x82>
 8003dfe:	898a      	ldrh	r2, [r1, #12]
 8003e00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e04:	d031      	beq.n	8003e6a <__ssputs_r+0x7e>
 8003e06:	6825      	ldr	r5, [r4, #0]
 8003e08:	6909      	ldr	r1, [r1, #16]
 8003e0a:	1a6f      	subs	r7, r5, r1
 8003e0c:	6965      	ldr	r5, [r4, #20]
 8003e0e:	2302      	movs	r3, #2
 8003e10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e14:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e18:	f109 0301 	add.w	r3, r9, #1
 8003e1c:	443b      	add	r3, r7
 8003e1e:	429d      	cmp	r5, r3
 8003e20:	bf38      	it	cc
 8003e22:	461d      	movcc	r5, r3
 8003e24:	0553      	lsls	r3, r2, #21
 8003e26:	d530      	bpl.n	8003e8a <__ssputs_r+0x9e>
 8003e28:	4629      	mov	r1, r5
 8003e2a:	f000 fb2b 	bl	8004484 <_malloc_r>
 8003e2e:	4606      	mov	r6, r0
 8003e30:	b950      	cbnz	r0, 8003e48 <__ssputs_r+0x5c>
 8003e32:	230c      	movs	r3, #12
 8003e34:	f8ca 3000 	str.w	r3, [sl]
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e3e:	81a3      	strh	r3, [r4, #12]
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295
 8003e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e48:	463a      	mov	r2, r7
 8003e4a:	6921      	ldr	r1, [r4, #16]
 8003e4c:	f000 faa8 	bl	80043a0 <memcpy>
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e5a:	81a3      	strh	r3, [r4, #12]
 8003e5c:	6126      	str	r6, [r4, #16]
 8003e5e:	6165      	str	r5, [r4, #20]
 8003e60:	443e      	add	r6, r7
 8003e62:	1bed      	subs	r5, r5, r7
 8003e64:	6026      	str	r6, [r4, #0]
 8003e66:	60a5      	str	r5, [r4, #8]
 8003e68:	464e      	mov	r6, r9
 8003e6a:	454e      	cmp	r6, r9
 8003e6c:	d900      	bls.n	8003e70 <__ssputs_r+0x84>
 8003e6e:	464e      	mov	r6, r9
 8003e70:	4632      	mov	r2, r6
 8003e72:	4641      	mov	r1, r8
 8003e74:	6820      	ldr	r0, [r4, #0]
 8003e76:	f000 fa9e 	bl	80043b6 <memmove>
 8003e7a:	68a3      	ldr	r3, [r4, #8]
 8003e7c:	1b9b      	subs	r3, r3, r6
 8003e7e:	60a3      	str	r3, [r4, #8]
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	441e      	add	r6, r3
 8003e84:	6026      	str	r6, [r4, #0]
 8003e86:	2000      	movs	r0, #0
 8003e88:	e7dc      	b.n	8003e44 <__ssputs_r+0x58>
 8003e8a:	462a      	mov	r2, r5
 8003e8c:	f000 fb54 	bl	8004538 <_realloc_r>
 8003e90:	4606      	mov	r6, r0
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d1e2      	bne.n	8003e5c <__ssputs_r+0x70>
 8003e96:	6921      	ldr	r1, [r4, #16]
 8003e98:	4650      	mov	r0, sl
 8003e9a:	f000 faa5 	bl	80043e8 <_free_r>
 8003e9e:	e7c8      	b.n	8003e32 <__ssputs_r+0x46>

08003ea0 <_svfiprintf_r>:
 8003ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea4:	461d      	mov	r5, r3
 8003ea6:	898b      	ldrh	r3, [r1, #12]
 8003ea8:	061f      	lsls	r7, r3, #24
 8003eaa:	b09d      	sub	sp, #116	; 0x74
 8003eac:	4680      	mov	r8, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	d50f      	bpl.n	8003ed4 <_svfiprintf_r+0x34>
 8003eb4:	690b      	ldr	r3, [r1, #16]
 8003eb6:	b96b      	cbnz	r3, 8003ed4 <_svfiprintf_r+0x34>
 8003eb8:	2140      	movs	r1, #64	; 0x40
 8003eba:	f000 fae3 	bl	8004484 <_malloc_r>
 8003ebe:	6020      	str	r0, [r4, #0]
 8003ec0:	6120      	str	r0, [r4, #16]
 8003ec2:	b928      	cbnz	r0, 8003ed0 <_svfiprintf_r+0x30>
 8003ec4:	230c      	movs	r3, #12
 8003ec6:	f8c8 3000 	str.w	r3, [r8]
 8003eca:	f04f 30ff 	mov.w	r0, #4294967295
 8003ece:	e0c8      	b.n	8004062 <_svfiprintf_r+0x1c2>
 8003ed0:	2340      	movs	r3, #64	; 0x40
 8003ed2:	6163      	str	r3, [r4, #20]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed8:	2320      	movs	r3, #32
 8003eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ede:	2330      	movs	r3, #48	; 0x30
 8003ee0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ee4:	9503      	str	r5, [sp, #12]
 8003ee6:	f04f 0b01 	mov.w	fp, #1
 8003eea:	4637      	mov	r7, r6
 8003eec:	463d      	mov	r5, r7
 8003eee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ef2:	b10b      	cbz	r3, 8003ef8 <_svfiprintf_r+0x58>
 8003ef4:	2b25      	cmp	r3, #37	; 0x25
 8003ef6:	d13e      	bne.n	8003f76 <_svfiprintf_r+0xd6>
 8003ef8:	ebb7 0a06 	subs.w	sl, r7, r6
 8003efc:	d00b      	beq.n	8003f16 <_svfiprintf_r+0x76>
 8003efe:	4653      	mov	r3, sl
 8003f00:	4632      	mov	r2, r6
 8003f02:	4621      	mov	r1, r4
 8003f04:	4640      	mov	r0, r8
 8003f06:	f7ff ff71 	bl	8003dec <__ssputs_r>
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	f000 80a4 	beq.w	8004058 <_svfiprintf_r+0x1b8>
 8003f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f12:	4453      	add	r3, sl
 8003f14:	9309      	str	r3, [sp, #36]	; 0x24
 8003f16:	783b      	ldrb	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 809d 	beq.w	8004058 <_svfiprintf_r+0x1b8>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f04f 32ff 	mov.w	r2, #4294967295
 8003f24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f28:	9304      	str	r3, [sp, #16]
 8003f2a:	9307      	str	r3, [sp, #28]
 8003f2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f30:	931a      	str	r3, [sp, #104]	; 0x68
 8003f32:	462f      	mov	r7, r5
 8003f34:	2205      	movs	r2, #5
 8003f36:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003f3a:	4850      	ldr	r0, [pc, #320]	; (800407c <_svfiprintf_r+0x1dc>)
 8003f3c:	f7fc f970 	bl	8000220 <memchr>
 8003f40:	9b04      	ldr	r3, [sp, #16]
 8003f42:	b9d0      	cbnz	r0, 8003f7a <_svfiprintf_r+0xda>
 8003f44:	06d9      	lsls	r1, r3, #27
 8003f46:	bf44      	itt	mi
 8003f48:	2220      	movmi	r2, #32
 8003f4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f4e:	071a      	lsls	r2, r3, #28
 8003f50:	bf44      	itt	mi
 8003f52:	222b      	movmi	r2, #43	; 0x2b
 8003f54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f58:	782a      	ldrb	r2, [r5, #0]
 8003f5a:	2a2a      	cmp	r2, #42	; 0x2a
 8003f5c:	d015      	beq.n	8003f8a <_svfiprintf_r+0xea>
 8003f5e:	9a07      	ldr	r2, [sp, #28]
 8003f60:	462f      	mov	r7, r5
 8003f62:	2000      	movs	r0, #0
 8003f64:	250a      	movs	r5, #10
 8003f66:	4639      	mov	r1, r7
 8003f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f6c:	3b30      	subs	r3, #48	; 0x30
 8003f6e:	2b09      	cmp	r3, #9
 8003f70:	d94d      	bls.n	800400e <_svfiprintf_r+0x16e>
 8003f72:	b1b8      	cbz	r0, 8003fa4 <_svfiprintf_r+0x104>
 8003f74:	e00f      	b.n	8003f96 <_svfiprintf_r+0xf6>
 8003f76:	462f      	mov	r7, r5
 8003f78:	e7b8      	b.n	8003eec <_svfiprintf_r+0x4c>
 8003f7a:	4a40      	ldr	r2, [pc, #256]	; (800407c <_svfiprintf_r+0x1dc>)
 8003f7c:	1a80      	subs	r0, r0, r2
 8003f7e:	fa0b f000 	lsl.w	r0, fp, r0
 8003f82:	4318      	orrs	r0, r3
 8003f84:	9004      	str	r0, [sp, #16]
 8003f86:	463d      	mov	r5, r7
 8003f88:	e7d3      	b.n	8003f32 <_svfiprintf_r+0x92>
 8003f8a:	9a03      	ldr	r2, [sp, #12]
 8003f8c:	1d11      	adds	r1, r2, #4
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	9103      	str	r1, [sp, #12]
 8003f92:	2a00      	cmp	r2, #0
 8003f94:	db01      	blt.n	8003f9a <_svfiprintf_r+0xfa>
 8003f96:	9207      	str	r2, [sp, #28]
 8003f98:	e004      	b.n	8003fa4 <_svfiprintf_r+0x104>
 8003f9a:	4252      	negs	r2, r2
 8003f9c:	f043 0302 	orr.w	r3, r3, #2
 8003fa0:	9207      	str	r2, [sp, #28]
 8003fa2:	9304      	str	r3, [sp, #16]
 8003fa4:	783b      	ldrb	r3, [r7, #0]
 8003fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8003fa8:	d10c      	bne.n	8003fc4 <_svfiprintf_r+0x124>
 8003faa:	787b      	ldrb	r3, [r7, #1]
 8003fac:	2b2a      	cmp	r3, #42	; 0x2a
 8003fae:	d133      	bne.n	8004018 <_svfiprintf_r+0x178>
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	1d1a      	adds	r2, r3, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	9203      	str	r2, [sp, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bfb8      	it	lt
 8003fbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fc0:	3702      	adds	r7, #2
 8003fc2:	9305      	str	r3, [sp, #20]
 8003fc4:	4d2e      	ldr	r5, [pc, #184]	; (8004080 <_svfiprintf_r+0x1e0>)
 8003fc6:	7839      	ldrb	r1, [r7, #0]
 8003fc8:	2203      	movs	r2, #3
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f7fc f928 	bl	8000220 <memchr>
 8003fd0:	b138      	cbz	r0, 8003fe2 <_svfiprintf_r+0x142>
 8003fd2:	2340      	movs	r3, #64	; 0x40
 8003fd4:	1b40      	subs	r0, r0, r5
 8003fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8003fda:	9b04      	ldr	r3, [sp, #16]
 8003fdc:	4303      	orrs	r3, r0
 8003fde:	3701      	adds	r7, #1
 8003fe0:	9304      	str	r3, [sp, #16]
 8003fe2:	7839      	ldrb	r1, [r7, #0]
 8003fe4:	4827      	ldr	r0, [pc, #156]	; (8004084 <_svfiprintf_r+0x1e4>)
 8003fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fea:	2206      	movs	r2, #6
 8003fec:	1c7e      	adds	r6, r7, #1
 8003fee:	f7fc f917 	bl	8000220 <memchr>
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	d038      	beq.n	8004068 <_svfiprintf_r+0x1c8>
 8003ff6:	4b24      	ldr	r3, [pc, #144]	; (8004088 <_svfiprintf_r+0x1e8>)
 8003ff8:	bb13      	cbnz	r3, 8004040 <_svfiprintf_r+0x1a0>
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	3307      	adds	r3, #7
 8003ffe:	f023 0307 	bic.w	r3, r3, #7
 8004002:	3308      	adds	r3, #8
 8004004:	9303      	str	r3, [sp, #12]
 8004006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004008:	444b      	add	r3, r9
 800400a:	9309      	str	r3, [sp, #36]	; 0x24
 800400c:	e76d      	b.n	8003eea <_svfiprintf_r+0x4a>
 800400e:	fb05 3202 	mla	r2, r5, r2, r3
 8004012:	2001      	movs	r0, #1
 8004014:	460f      	mov	r7, r1
 8004016:	e7a6      	b.n	8003f66 <_svfiprintf_r+0xc6>
 8004018:	2300      	movs	r3, #0
 800401a:	3701      	adds	r7, #1
 800401c:	9305      	str	r3, [sp, #20]
 800401e:	4619      	mov	r1, r3
 8004020:	250a      	movs	r5, #10
 8004022:	4638      	mov	r0, r7
 8004024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004028:	3a30      	subs	r2, #48	; 0x30
 800402a:	2a09      	cmp	r2, #9
 800402c:	d903      	bls.n	8004036 <_svfiprintf_r+0x196>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0c8      	beq.n	8003fc4 <_svfiprintf_r+0x124>
 8004032:	9105      	str	r1, [sp, #20]
 8004034:	e7c6      	b.n	8003fc4 <_svfiprintf_r+0x124>
 8004036:	fb05 2101 	mla	r1, r5, r1, r2
 800403a:	2301      	movs	r3, #1
 800403c:	4607      	mov	r7, r0
 800403e:	e7f0      	b.n	8004022 <_svfiprintf_r+0x182>
 8004040:	ab03      	add	r3, sp, #12
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	4622      	mov	r2, r4
 8004046:	4b11      	ldr	r3, [pc, #68]	; (800408c <_svfiprintf_r+0x1ec>)
 8004048:	a904      	add	r1, sp, #16
 800404a:	4640      	mov	r0, r8
 800404c:	f3af 8000 	nop.w
 8004050:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004054:	4681      	mov	r9, r0
 8004056:	d1d6      	bne.n	8004006 <_svfiprintf_r+0x166>
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	065b      	lsls	r3, r3, #25
 800405c:	f53f af35 	bmi.w	8003eca <_svfiprintf_r+0x2a>
 8004060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004062:	b01d      	add	sp, #116	; 0x74
 8004064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004068:	ab03      	add	r3, sp, #12
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	4622      	mov	r2, r4
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <_svfiprintf_r+0x1ec>)
 8004070:	a904      	add	r1, sp, #16
 8004072:	4640      	mov	r0, r8
 8004074:	f000 f882 	bl	800417c <_printf_i>
 8004078:	e7ea      	b.n	8004050 <_svfiprintf_r+0x1b0>
 800407a:	bf00      	nop
 800407c:	08004608 	.word	0x08004608
 8004080:	0800460e 	.word	0x0800460e
 8004084:	08004612 	.word	0x08004612
 8004088:	00000000 	.word	0x00000000
 800408c:	08003ded 	.word	0x08003ded

08004090 <_printf_common>:
 8004090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004094:	4691      	mov	r9, r2
 8004096:	461f      	mov	r7, r3
 8004098:	688a      	ldr	r2, [r1, #8]
 800409a:	690b      	ldr	r3, [r1, #16]
 800409c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bfb8      	it	lt
 80040a4:	4613      	movlt	r3, r2
 80040a6:	f8c9 3000 	str.w	r3, [r9]
 80040aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040ae:	4606      	mov	r6, r0
 80040b0:	460c      	mov	r4, r1
 80040b2:	b112      	cbz	r2, 80040ba <_printf_common+0x2a>
 80040b4:	3301      	adds	r3, #1
 80040b6:	f8c9 3000 	str.w	r3, [r9]
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	0699      	lsls	r1, r3, #26
 80040be:	bf42      	ittt	mi
 80040c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040c4:	3302      	addmi	r3, #2
 80040c6:	f8c9 3000 	strmi.w	r3, [r9]
 80040ca:	6825      	ldr	r5, [r4, #0]
 80040cc:	f015 0506 	ands.w	r5, r5, #6
 80040d0:	d107      	bne.n	80040e2 <_printf_common+0x52>
 80040d2:	f104 0a19 	add.w	sl, r4, #25
 80040d6:	68e3      	ldr	r3, [r4, #12]
 80040d8:	f8d9 2000 	ldr.w	r2, [r9]
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	42ab      	cmp	r3, r5
 80040e0:	dc28      	bgt.n	8004134 <_printf_common+0xa4>
 80040e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80040e6:	6822      	ldr	r2, [r4, #0]
 80040e8:	3300      	adds	r3, #0
 80040ea:	bf18      	it	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	0692      	lsls	r2, r2, #26
 80040f0:	d42d      	bmi.n	800414e <_printf_common+0xbe>
 80040f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040f6:	4639      	mov	r1, r7
 80040f8:	4630      	mov	r0, r6
 80040fa:	47c0      	blx	r8
 80040fc:	3001      	adds	r0, #1
 80040fe:	d020      	beq.n	8004142 <_printf_common+0xb2>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	68e5      	ldr	r5, [r4, #12]
 8004104:	f8d9 2000 	ldr.w	r2, [r9]
 8004108:	f003 0306 	and.w	r3, r3, #6
 800410c:	2b04      	cmp	r3, #4
 800410e:	bf08      	it	eq
 8004110:	1aad      	subeq	r5, r5, r2
 8004112:	68a3      	ldr	r3, [r4, #8]
 8004114:	6922      	ldr	r2, [r4, #16]
 8004116:	bf0c      	ite	eq
 8004118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800411c:	2500      	movne	r5, #0
 800411e:	4293      	cmp	r3, r2
 8004120:	bfc4      	itt	gt
 8004122:	1a9b      	subgt	r3, r3, r2
 8004124:	18ed      	addgt	r5, r5, r3
 8004126:	f04f 0900 	mov.w	r9, #0
 800412a:	341a      	adds	r4, #26
 800412c:	454d      	cmp	r5, r9
 800412e:	d11a      	bne.n	8004166 <_printf_common+0xd6>
 8004130:	2000      	movs	r0, #0
 8004132:	e008      	b.n	8004146 <_printf_common+0xb6>
 8004134:	2301      	movs	r3, #1
 8004136:	4652      	mov	r2, sl
 8004138:	4639      	mov	r1, r7
 800413a:	4630      	mov	r0, r6
 800413c:	47c0      	blx	r8
 800413e:	3001      	adds	r0, #1
 8004140:	d103      	bne.n	800414a <_printf_common+0xba>
 8004142:	f04f 30ff 	mov.w	r0, #4294967295
 8004146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800414a:	3501      	adds	r5, #1
 800414c:	e7c3      	b.n	80040d6 <_printf_common+0x46>
 800414e:	18e1      	adds	r1, r4, r3
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	2030      	movs	r0, #48	; 0x30
 8004154:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004158:	4422      	add	r2, r4
 800415a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800415e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004162:	3302      	adds	r3, #2
 8004164:	e7c5      	b.n	80040f2 <_printf_common+0x62>
 8004166:	2301      	movs	r3, #1
 8004168:	4622      	mov	r2, r4
 800416a:	4639      	mov	r1, r7
 800416c:	4630      	mov	r0, r6
 800416e:	47c0      	blx	r8
 8004170:	3001      	adds	r0, #1
 8004172:	d0e6      	beq.n	8004142 <_printf_common+0xb2>
 8004174:	f109 0901 	add.w	r9, r9, #1
 8004178:	e7d8      	b.n	800412c <_printf_common+0x9c>
	...

0800417c <_printf_i>:
 800417c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004180:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004184:	460c      	mov	r4, r1
 8004186:	7e09      	ldrb	r1, [r1, #24]
 8004188:	b085      	sub	sp, #20
 800418a:	296e      	cmp	r1, #110	; 0x6e
 800418c:	4617      	mov	r7, r2
 800418e:	4606      	mov	r6, r0
 8004190:	4698      	mov	r8, r3
 8004192:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004194:	f000 80b3 	beq.w	80042fe <_printf_i+0x182>
 8004198:	d822      	bhi.n	80041e0 <_printf_i+0x64>
 800419a:	2963      	cmp	r1, #99	; 0x63
 800419c:	d036      	beq.n	800420c <_printf_i+0x90>
 800419e:	d80a      	bhi.n	80041b6 <_printf_i+0x3a>
 80041a0:	2900      	cmp	r1, #0
 80041a2:	f000 80b9 	beq.w	8004318 <_printf_i+0x19c>
 80041a6:	2958      	cmp	r1, #88	; 0x58
 80041a8:	f000 8083 	beq.w	80042b2 <_printf_i+0x136>
 80041ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80041b4:	e032      	b.n	800421c <_printf_i+0xa0>
 80041b6:	2964      	cmp	r1, #100	; 0x64
 80041b8:	d001      	beq.n	80041be <_printf_i+0x42>
 80041ba:	2969      	cmp	r1, #105	; 0x69
 80041bc:	d1f6      	bne.n	80041ac <_printf_i+0x30>
 80041be:	6820      	ldr	r0, [r4, #0]
 80041c0:	6813      	ldr	r3, [r2, #0]
 80041c2:	0605      	lsls	r5, r0, #24
 80041c4:	f103 0104 	add.w	r1, r3, #4
 80041c8:	d52a      	bpl.n	8004220 <_printf_i+0xa4>
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6011      	str	r1, [r2, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da03      	bge.n	80041da <_printf_i+0x5e>
 80041d2:	222d      	movs	r2, #45	; 0x2d
 80041d4:	425b      	negs	r3, r3
 80041d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80041da:	486f      	ldr	r0, [pc, #444]	; (8004398 <_printf_i+0x21c>)
 80041dc:	220a      	movs	r2, #10
 80041de:	e039      	b.n	8004254 <_printf_i+0xd8>
 80041e0:	2973      	cmp	r1, #115	; 0x73
 80041e2:	f000 809d 	beq.w	8004320 <_printf_i+0x1a4>
 80041e6:	d808      	bhi.n	80041fa <_printf_i+0x7e>
 80041e8:	296f      	cmp	r1, #111	; 0x6f
 80041ea:	d020      	beq.n	800422e <_printf_i+0xb2>
 80041ec:	2970      	cmp	r1, #112	; 0x70
 80041ee:	d1dd      	bne.n	80041ac <_printf_i+0x30>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	f043 0320 	orr.w	r3, r3, #32
 80041f6:	6023      	str	r3, [r4, #0]
 80041f8:	e003      	b.n	8004202 <_printf_i+0x86>
 80041fa:	2975      	cmp	r1, #117	; 0x75
 80041fc:	d017      	beq.n	800422e <_printf_i+0xb2>
 80041fe:	2978      	cmp	r1, #120	; 0x78
 8004200:	d1d4      	bne.n	80041ac <_printf_i+0x30>
 8004202:	2378      	movs	r3, #120	; 0x78
 8004204:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004208:	4864      	ldr	r0, [pc, #400]	; (800439c <_printf_i+0x220>)
 800420a:	e055      	b.n	80042b8 <_printf_i+0x13c>
 800420c:	6813      	ldr	r3, [r2, #0]
 800420e:	1d19      	adds	r1, r3, #4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6011      	str	r1, [r2, #0]
 8004214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800421c:	2301      	movs	r3, #1
 800421e:	e08c      	b.n	800433a <_printf_i+0x1be>
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6011      	str	r1, [r2, #0]
 8004224:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004228:	bf18      	it	ne
 800422a:	b21b      	sxthne	r3, r3
 800422c:	e7cf      	b.n	80041ce <_printf_i+0x52>
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	6825      	ldr	r5, [r4, #0]
 8004232:	1d18      	adds	r0, r3, #4
 8004234:	6010      	str	r0, [r2, #0]
 8004236:	0628      	lsls	r0, r5, #24
 8004238:	d501      	bpl.n	800423e <_printf_i+0xc2>
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	e002      	b.n	8004244 <_printf_i+0xc8>
 800423e:	0668      	lsls	r0, r5, #25
 8004240:	d5fb      	bpl.n	800423a <_printf_i+0xbe>
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	4854      	ldr	r0, [pc, #336]	; (8004398 <_printf_i+0x21c>)
 8004246:	296f      	cmp	r1, #111	; 0x6f
 8004248:	bf14      	ite	ne
 800424a:	220a      	movne	r2, #10
 800424c:	2208      	moveq	r2, #8
 800424e:	2100      	movs	r1, #0
 8004250:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004254:	6865      	ldr	r5, [r4, #4]
 8004256:	60a5      	str	r5, [r4, #8]
 8004258:	2d00      	cmp	r5, #0
 800425a:	f2c0 8095 	blt.w	8004388 <_printf_i+0x20c>
 800425e:	6821      	ldr	r1, [r4, #0]
 8004260:	f021 0104 	bic.w	r1, r1, #4
 8004264:	6021      	str	r1, [r4, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d13d      	bne.n	80042e6 <_printf_i+0x16a>
 800426a:	2d00      	cmp	r5, #0
 800426c:	f040 808e 	bne.w	800438c <_printf_i+0x210>
 8004270:	4665      	mov	r5, ip
 8004272:	2a08      	cmp	r2, #8
 8004274:	d10b      	bne.n	800428e <_printf_i+0x112>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	07db      	lsls	r3, r3, #31
 800427a:	d508      	bpl.n	800428e <_printf_i+0x112>
 800427c:	6923      	ldr	r3, [r4, #16]
 800427e:	6862      	ldr	r2, [r4, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	bfde      	ittt	le
 8004284:	2330      	movle	r3, #48	; 0x30
 8004286:	f805 3c01 	strble.w	r3, [r5, #-1]
 800428a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800428e:	ebac 0305 	sub.w	r3, ip, r5
 8004292:	6123      	str	r3, [r4, #16]
 8004294:	f8cd 8000 	str.w	r8, [sp]
 8004298:	463b      	mov	r3, r7
 800429a:	aa03      	add	r2, sp, #12
 800429c:	4621      	mov	r1, r4
 800429e:	4630      	mov	r0, r6
 80042a0:	f7ff fef6 	bl	8004090 <_printf_common>
 80042a4:	3001      	adds	r0, #1
 80042a6:	d14d      	bne.n	8004344 <_printf_i+0x1c8>
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	b005      	add	sp, #20
 80042ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042b2:	4839      	ldr	r0, [pc, #228]	; (8004398 <_printf_i+0x21c>)
 80042b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80042b8:	6813      	ldr	r3, [r2, #0]
 80042ba:	6821      	ldr	r1, [r4, #0]
 80042bc:	1d1d      	adds	r5, r3, #4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6015      	str	r5, [r2, #0]
 80042c2:	060a      	lsls	r2, r1, #24
 80042c4:	d50b      	bpl.n	80042de <_printf_i+0x162>
 80042c6:	07ca      	lsls	r2, r1, #31
 80042c8:	bf44      	itt	mi
 80042ca:	f041 0120 	orrmi.w	r1, r1, #32
 80042ce:	6021      	strmi	r1, [r4, #0]
 80042d0:	b91b      	cbnz	r3, 80042da <_printf_i+0x15e>
 80042d2:	6822      	ldr	r2, [r4, #0]
 80042d4:	f022 0220 	bic.w	r2, r2, #32
 80042d8:	6022      	str	r2, [r4, #0]
 80042da:	2210      	movs	r2, #16
 80042dc:	e7b7      	b.n	800424e <_printf_i+0xd2>
 80042de:	064d      	lsls	r5, r1, #25
 80042e0:	bf48      	it	mi
 80042e2:	b29b      	uxthmi	r3, r3
 80042e4:	e7ef      	b.n	80042c6 <_printf_i+0x14a>
 80042e6:	4665      	mov	r5, ip
 80042e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80042ec:	fb02 3311 	mls	r3, r2, r1, r3
 80042f0:	5cc3      	ldrb	r3, [r0, r3]
 80042f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80042f6:	460b      	mov	r3, r1
 80042f8:	2900      	cmp	r1, #0
 80042fa:	d1f5      	bne.n	80042e8 <_printf_i+0x16c>
 80042fc:	e7b9      	b.n	8004272 <_printf_i+0xf6>
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	6825      	ldr	r5, [r4, #0]
 8004302:	6961      	ldr	r1, [r4, #20]
 8004304:	1d18      	adds	r0, r3, #4
 8004306:	6010      	str	r0, [r2, #0]
 8004308:	0628      	lsls	r0, r5, #24
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	d501      	bpl.n	8004312 <_printf_i+0x196>
 800430e:	6019      	str	r1, [r3, #0]
 8004310:	e002      	b.n	8004318 <_printf_i+0x19c>
 8004312:	066a      	lsls	r2, r5, #25
 8004314:	d5fb      	bpl.n	800430e <_printf_i+0x192>
 8004316:	8019      	strh	r1, [r3, #0]
 8004318:	2300      	movs	r3, #0
 800431a:	6123      	str	r3, [r4, #16]
 800431c:	4665      	mov	r5, ip
 800431e:	e7b9      	b.n	8004294 <_printf_i+0x118>
 8004320:	6813      	ldr	r3, [r2, #0]
 8004322:	1d19      	adds	r1, r3, #4
 8004324:	6011      	str	r1, [r2, #0]
 8004326:	681d      	ldr	r5, [r3, #0]
 8004328:	6862      	ldr	r2, [r4, #4]
 800432a:	2100      	movs	r1, #0
 800432c:	4628      	mov	r0, r5
 800432e:	f7fb ff77 	bl	8000220 <memchr>
 8004332:	b108      	cbz	r0, 8004338 <_printf_i+0x1bc>
 8004334:	1b40      	subs	r0, r0, r5
 8004336:	6060      	str	r0, [r4, #4]
 8004338:	6863      	ldr	r3, [r4, #4]
 800433a:	6123      	str	r3, [r4, #16]
 800433c:	2300      	movs	r3, #0
 800433e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004342:	e7a7      	b.n	8004294 <_printf_i+0x118>
 8004344:	6923      	ldr	r3, [r4, #16]
 8004346:	462a      	mov	r2, r5
 8004348:	4639      	mov	r1, r7
 800434a:	4630      	mov	r0, r6
 800434c:	47c0      	blx	r8
 800434e:	3001      	adds	r0, #1
 8004350:	d0aa      	beq.n	80042a8 <_printf_i+0x12c>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	079b      	lsls	r3, r3, #30
 8004356:	d413      	bmi.n	8004380 <_printf_i+0x204>
 8004358:	68e0      	ldr	r0, [r4, #12]
 800435a:	9b03      	ldr	r3, [sp, #12]
 800435c:	4298      	cmp	r0, r3
 800435e:	bfb8      	it	lt
 8004360:	4618      	movlt	r0, r3
 8004362:	e7a3      	b.n	80042ac <_printf_i+0x130>
 8004364:	2301      	movs	r3, #1
 8004366:	464a      	mov	r2, r9
 8004368:	4639      	mov	r1, r7
 800436a:	4630      	mov	r0, r6
 800436c:	47c0      	blx	r8
 800436e:	3001      	adds	r0, #1
 8004370:	d09a      	beq.n	80042a8 <_printf_i+0x12c>
 8004372:	3501      	adds	r5, #1
 8004374:	68e3      	ldr	r3, [r4, #12]
 8004376:	9a03      	ldr	r2, [sp, #12]
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	42ab      	cmp	r3, r5
 800437c:	dcf2      	bgt.n	8004364 <_printf_i+0x1e8>
 800437e:	e7eb      	b.n	8004358 <_printf_i+0x1dc>
 8004380:	2500      	movs	r5, #0
 8004382:	f104 0919 	add.w	r9, r4, #25
 8004386:	e7f5      	b.n	8004374 <_printf_i+0x1f8>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1ac      	bne.n	80042e6 <_printf_i+0x16a>
 800438c:	7803      	ldrb	r3, [r0, #0]
 800438e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004392:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004396:	e76c      	b.n	8004272 <_printf_i+0xf6>
 8004398:	08004619 	.word	0x08004619
 800439c:	0800462a 	.word	0x0800462a

080043a0 <memcpy>:
 80043a0:	b510      	push	{r4, lr}
 80043a2:	1e43      	subs	r3, r0, #1
 80043a4:	440a      	add	r2, r1
 80043a6:	4291      	cmp	r1, r2
 80043a8:	d100      	bne.n	80043ac <memcpy+0xc>
 80043aa:	bd10      	pop	{r4, pc}
 80043ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043b4:	e7f7      	b.n	80043a6 <memcpy+0x6>

080043b6 <memmove>:
 80043b6:	4288      	cmp	r0, r1
 80043b8:	b510      	push	{r4, lr}
 80043ba:	eb01 0302 	add.w	r3, r1, r2
 80043be:	d807      	bhi.n	80043d0 <memmove+0x1a>
 80043c0:	1e42      	subs	r2, r0, #1
 80043c2:	4299      	cmp	r1, r3
 80043c4:	d00a      	beq.n	80043dc <memmove+0x26>
 80043c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80043ce:	e7f8      	b.n	80043c2 <memmove+0xc>
 80043d0:	4283      	cmp	r3, r0
 80043d2:	d9f5      	bls.n	80043c0 <memmove+0xa>
 80043d4:	1881      	adds	r1, r0, r2
 80043d6:	1ad2      	subs	r2, r2, r3
 80043d8:	42d3      	cmn	r3, r2
 80043da:	d100      	bne.n	80043de <memmove+0x28>
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80043e6:	e7f7      	b.n	80043d8 <memmove+0x22>

080043e8 <_free_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4605      	mov	r5, r0
 80043ec:	2900      	cmp	r1, #0
 80043ee:	d045      	beq.n	800447c <_free_r+0x94>
 80043f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f4:	1f0c      	subs	r4, r1, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bfb8      	it	lt
 80043fa:	18e4      	addlt	r4, r4, r3
 80043fc:	f000 f8d2 	bl	80045a4 <__malloc_lock>
 8004400:	4a1f      	ldr	r2, [pc, #124]	; (8004480 <_free_r+0x98>)
 8004402:	6813      	ldr	r3, [r2, #0]
 8004404:	4610      	mov	r0, r2
 8004406:	b933      	cbnz	r3, 8004416 <_free_r+0x2e>
 8004408:	6063      	str	r3, [r4, #4]
 800440a:	6014      	str	r4, [r2, #0]
 800440c:	4628      	mov	r0, r5
 800440e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004412:	f000 b8c8 	b.w	80045a6 <__malloc_unlock>
 8004416:	42a3      	cmp	r3, r4
 8004418:	d90c      	bls.n	8004434 <_free_r+0x4c>
 800441a:	6821      	ldr	r1, [r4, #0]
 800441c:	1862      	adds	r2, r4, r1
 800441e:	4293      	cmp	r3, r2
 8004420:	bf04      	itt	eq
 8004422:	681a      	ldreq	r2, [r3, #0]
 8004424:	685b      	ldreq	r3, [r3, #4]
 8004426:	6063      	str	r3, [r4, #4]
 8004428:	bf04      	itt	eq
 800442a:	1852      	addeq	r2, r2, r1
 800442c:	6022      	streq	r2, [r4, #0]
 800442e:	6004      	str	r4, [r0, #0]
 8004430:	e7ec      	b.n	800440c <_free_r+0x24>
 8004432:	4613      	mov	r3, r2
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	b10a      	cbz	r2, 800443c <_free_r+0x54>
 8004438:	42a2      	cmp	r2, r4
 800443a:	d9fa      	bls.n	8004432 <_free_r+0x4a>
 800443c:	6819      	ldr	r1, [r3, #0]
 800443e:	1858      	adds	r0, r3, r1
 8004440:	42a0      	cmp	r0, r4
 8004442:	d10b      	bne.n	800445c <_free_r+0x74>
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	4401      	add	r1, r0
 8004448:	1858      	adds	r0, r3, r1
 800444a:	4282      	cmp	r2, r0
 800444c:	6019      	str	r1, [r3, #0]
 800444e:	d1dd      	bne.n	800440c <_free_r+0x24>
 8004450:	6810      	ldr	r0, [r2, #0]
 8004452:	6852      	ldr	r2, [r2, #4]
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	4401      	add	r1, r0
 8004458:	6019      	str	r1, [r3, #0]
 800445a:	e7d7      	b.n	800440c <_free_r+0x24>
 800445c:	d902      	bls.n	8004464 <_free_r+0x7c>
 800445e:	230c      	movs	r3, #12
 8004460:	602b      	str	r3, [r5, #0]
 8004462:	e7d3      	b.n	800440c <_free_r+0x24>
 8004464:	6820      	ldr	r0, [r4, #0]
 8004466:	1821      	adds	r1, r4, r0
 8004468:	428a      	cmp	r2, r1
 800446a:	bf04      	itt	eq
 800446c:	6811      	ldreq	r1, [r2, #0]
 800446e:	6852      	ldreq	r2, [r2, #4]
 8004470:	6062      	str	r2, [r4, #4]
 8004472:	bf04      	itt	eq
 8004474:	1809      	addeq	r1, r1, r0
 8004476:	6021      	streq	r1, [r4, #0]
 8004478:	605c      	str	r4, [r3, #4]
 800447a:	e7c7      	b.n	800440c <_free_r+0x24>
 800447c:	bd38      	pop	{r3, r4, r5, pc}
 800447e:	bf00      	nop
 8004480:	20000094 	.word	0x20000094

08004484 <_malloc_r>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	1ccd      	adds	r5, r1, #3
 8004488:	f025 0503 	bic.w	r5, r5, #3
 800448c:	3508      	adds	r5, #8
 800448e:	2d0c      	cmp	r5, #12
 8004490:	bf38      	it	cc
 8004492:	250c      	movcc	r5, #12
 8004494:	2d00      	cmp	r5, #0
 8004496:	4606      	mov	r6, r0
 8004498:	db01      	blt.n	800449e <_malloc_r+0x1a>
 800449a:	42a9      	cmp	r1, r5
 800449c:	d903      	bls.n	80044a6 <_malloc_r+0x22>
 800449e:	230c      	movs	r3, #12
 80044a0:	6033      	str	r3, [r6, #0]
 80044a2:	2000      	movs	r0, #0
 80044a4:	bd70      	pop	{r4, r5, r6, pc}
 80044a6:	f000 f87d 	bl	80045a4 <__malloc_lock>
 80044aa:	4a21      	ldr	r2, [pc, #132]	; (8004530 <_malloc_r+0xac>)
 80044ac:	6814      	ldr	r4, [r2, #0]
 80044ae:	4621      	mov	r1, r4
 80044b0:	b991      	cbnz	r1, 80044d8 <_malloc_r+0x54>
 80044b2:	4c20      	ldr	r4, [pc, #128]	; (8004534 <_malloc_r+0xb0>)
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	b91b      	cbnz	r3, 80044c0 <_malloc_r+0x3c>
 80044b8:	4630      	mov	r0, r6
 80044ba:	f000 f863 	bl	8004584 <_sbrk_r>
 80044be:	6020      	str	r0, [r4, #0]
 80044c0:	4629      	mov	r1, r5
 80044c2:	4630      	mov	r0, r6
 80044c4:	f000 f85e 	bl	8004584 <_sbrk_r>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d124      	bne.n	8004516 <_malloc_r+0x92>
 80044cc:	230c      	movs	r3, #12
 80044ce:	6033      	str	r3, [r6, #0]
 80044d0:	4630      	mov	r0, r6
 80044d2:	f000 f868 	bl	80045a6 <__malloc_unlock>
 80044d6:	e7e4      	b.n	80044a2 <_malloc_r+0x1e>
 80044d8:	680b      	ldr	r3, [r1, #0]
 80044da:	1b5b      	subs	r3, r3, r5
 80044dc:	d418      	bmi.n	8004510 <_malloc_r+0x8c>
 80044de:	2b0b      	cmp	r3, #11
 80044e0:	d90f      	bls.n	8004502 <_malloc_r+0x7e>
 80044e2:	600b      	str	r3, [r1, #0]
 80044e4:	50cd      	str	r5, [r1, r3]
 80044e6:	18cc      	adds	r4, r1, r3
 80044e8:	4630      	mov	r0, r6
 80044ea:	f000 f85c 	bl	80045a6 <__malloc_unlock>
 80044ee:	f104 000b 	add.w	r0, r4, #11
 80044f2:	1d23      	adds	r3, r4, #4
 80044f4:	f020 0007 	bic.w	r0, r0, #7
 80044f8:	1ac3      	subs	r3, r0, r3
 80044fa:	d0d3      	beq.n	80044a4 <_malloc_r+0x20>
 80044fc:	425a      	negs	r2, r3
 80044fe:	50e2      	str	r2, [r4, r3]
 8004500:	e7d0      	b.n	80044a4 <_malloc_r+0x20>
 8004502:	428c      	cmp	r4, r1
 8004504:	684b      	ldr	r3, [r1, #4]
 8004506:	bf16      	itet	ne
 8004508:	6063      	strne	r3, [r4, #4]
 800450a:	6013      	streq	r3, [r2, #0]
 800450c:	460c      	movne	r4, r1
 800450e:	e7eb      	b.n	80044e8 <_malloc_r+0x64>
 8004510:	460c      	mov	r4, r1
 8004512:	6849      	ldr	r1, [r1, #4]
 8004514:	e7cc      	b.n	80044b0 <_malloc_r+0x2c>
 8004516:	1cc4      	adds	r4, r0, #3
 8004518:	f024 0403 	bic.w	r4, r4, #3
 800451c:	42a0      	cmp	r0, r4
 800451e:	d005      	beq.n	800452c <_malloc_r+0xa8>
 8004520:	1a21      	subs	r1, r4, r0
 8004522:	4630      	mov	r0, r6
 8004524:	f000 f82e 	bl	8004584 <_sbrk_r>
 8004528:	3001      	adds	r0, #1
 800452a:	d0cf      	beq.n	80044cc <_malloc_r+0x48>
 800452c:	6025      	str	r5, [r4, #0]
 800452e:	e7db      	b.n	80044e8 <_malloc_r+0x64>
 8004530:	20000094 	.word	0x20000094
 8004534:	20000098 	.word	0x20000098

08004538 <_realloc_r>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	4607      	mov	r7, r0
 800453c:	4614      	mov	r4, r2
 800453e:	460e      	mov	r6, r1
 8004540:	b921      	cbnz	r1, 800454c <_realloc_r+0x14>
 8004542:	4611      	mov	r1, r2
 8004544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004548:	f7ff bf9c 	b.w	8004484 <_malloc_r>
 800454c:	b922      	cbnz	r2, 8004558 <_realloc_r+0x20>
 800454e:	f7ff ff4b 	bl	80043e8 <_free_r>
 8004552:	4625      	mov	r5, r4
 8004554:	4628      	mov	r0, r5
 8004556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004558:	f000 f826 	bl	80045a8 <_malloc_usable_size_r>
 800455c:	42a0      	cmp	r0, r4
 800455e:	d20f      	bcs.n	8004580 <_realloc_r+0x48>
 8004560:	4621      	mov	r1, r4
 8004562:	4638      	mov	r0, r7
 8004564:	f7ff ff8e 	bl	8004484 <_malloc_r>
 8004568:	4605      	mov	r5, r0
 800456a:	2800      	cmp	r0, #0
 800456c:	d0f2      	beq.n	8004554 <_realloc_r+0x1c>
 800456e:	4631      	mov	r1, r6
 8004570:	4622      	mov	r2, r4
 8004572:	f7ff ff15 	bl	80043a0 <memcpy>
 8004576:	4631      	mov	r1, r6
 8004578:	4638      	mov	r0, r7
 800457a:	f7ff ff35 	bl	80043e8 <_free_r>
 800457e:	e7e9      	b.n	8004554 <_realloc_r+0x1c>
 8004580:	4635      	mov	r5, r6
 8004582:	e7e7      	b.n	8004554 <_realloc_r+0x1c>

08004584 <_sbrk_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4c06      	ldr	r4, [pc, #24]	; (80045a0 <_sbrk_r+0x1c>)
 8004588:	2300      	movs	r3, #0
 800458a:	4605      	mov	r5, r0
 800458c:	4608      	mov	r0, r1
 800458e:	6023      	str	r3, [r4, #0]
 8004590:	f7fc fbe2 	bl	8000d58 <_sbrk>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_sbrk_r+0x1a>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	b103      	cbz	r3, 800459e <_sbrk_r+0x1a>
 800459c:	602b      	str	r3, [r5, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	20001d68 	.word	0x20001d68

080045a4 <__malloc_lock>:
 80045a4:	4770      	bx	lr

080045a6 <__malloc_unlock>:
 80045a6:	4770      	bx	lr

080045a8 <_malloc_usable_size_r>:
 80045a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ac:	1f18      	subs	r0, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bfbc      	itt	lt
 80045b2:	580b      	ldrlt	r3, [r1, r0]
 80045b4:	18c0      	addlt	r0, r0, r3
 80045b6:	4770      	bx	lr

080045b8 <_init>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	bf00      	nop
 80045bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045be:	bc08      	pop	{r3}
 80045c0:	469e      	mov	lr, r3
 80045c2:	4770      	bx	lr

080045c4 <_fini>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr
