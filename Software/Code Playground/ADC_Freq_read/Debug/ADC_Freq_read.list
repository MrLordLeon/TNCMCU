
ADC_Freq_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006668  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08006830  08006830  00016830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a84  08006a84  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006a84  08006a84  00016a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a8c  08006a8c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf0  200001e0  08006c74  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ed0  08006c74  00021ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d904  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e71  00000000  00000000  0002db14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  0002f988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  000306c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022476  00000000  00000000  00031300  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0da  00000000  00000000  00053776  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3ccc  00000000  00000000  0005d850  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013151c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040cc  00000000  00000000  00131598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e0 	.word	0x200001e0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006818 	.word	0x08006818

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001e4 	.word	0x200001e4
 8000204:	08006818 	.word	0x08006818

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b598      	push	{r3, r4, r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 fcfc 	bl	8001840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f82c 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f000 f96a 	bl	8001124 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e50:	f000 f894 	bl	8000f7c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e54:	f000 f93c 	bl	80010d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e58:	f000 f8e2 	bl	8001020 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <main+0x54>)
 8000e60:	f002 fa90 	bl	8003384 <HAL_TIM_OC_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,10);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <main+0x54>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	220a      	movs	r2, #10
 8000e6a:	639a      	str	r2, [r3, #56]	; 0x38
	 sprintf(uartData,"Starting...\n");
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <main+0x58>)
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <main+0x5c>)
 8000e70:	4614      	mov	r4, r2
 8000e72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e74:	6020      	str	r0, [r4, #0]
 8000e76:	6061      	str	r1, [r4, #4]
 8000e78:	60a2      	str	r2, [r4, #8]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	7323      	strb	r3, [r4, #12]
	  HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <main+0x58>)
 8000e80:	f7ff f9c2 	bl	8000208 <strlen>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	230a      	movs	r3, #10
 8000e8a:	4903      	ldr	r1, [pc, #12]	; (8000e98 <main+0x58>)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <main+0x60>)
 8000e8e:	f002 ffe0 	bl	8003e52 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <main+0x52>
 8000e94:	20001e48 	.word	0x20001e48
 8000e98:	20000208 	.word	0x20000208
 8000e9c:	08006830 	.word	0x08006830
 8000ea0:	20001e88 	.word	0x20001e88

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	2234      	movs	r2, #52	; 0x34
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 fc56 	bl	8004764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <SystemClock_Config+0xd0>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a28      	ldr	r2, [pc, #160]	; (8000f74 <SystemClock_Config+0xd0>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <SystemClock_Config+0xd0>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <SystemClock_Config+0xd4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <SystemClock_Config+0xd4>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <SystemClock_Config+0xd4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	2302      	movs	r3, #2
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000f1c:	235a      	movs	r3, #90	; 0x5a
 8000f1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 ffa1 	bl	8002e78 <HAL_RCC_OscConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f3c:	f000 faa6 	bl	800148c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f40:	230f      	movs	r3, #15
 8000f42:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f44:	2302      	movs	r3, #2
 8000f46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 fcd1 	bl	8002904 <HAL_RCC_ClockConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000f68:	f000 fa90 	bl	800148c <Error_Handler>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3750      	adds	r7, #80	; 0x50
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000

08000f7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_ADC1_Init+0x98>)
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <MX_ADC1_Init+0x9c>)
 8000f92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_ADC1_Init+0x98>)
 8000f96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_ADC1_Init+0x98>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_ADC1_Init+0x98>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fbe:	4a17      	ldr	r2, [pc, #92]	; (800101c <MX_ADC1_Init+0xa0>)
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <MX_ADC1_Init+0x98>)
 8000fde:	f000 fca1 	bl	8001924 <HAL_ADC_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fe8:	f000 fa50 	bl	800148c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_ADC1_Init+0x98>)
 8000ffe:	f000 ff8b 	bl	8001f18 <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001008:	f000 fa40 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000de0 	.word	0x20000de0
 8001018:	40012000 	.word	0x40012000
 800101c:	0f000001 	.word	0x0f000001

08001020 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_TIM2_Init+0xac>)
 8001044:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001048:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <MX_TIM2_Init+0xac>)
 800104c:	2259      	movs	r2, #89	; 0x59
 800104e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <MX_TIM2_Init+0xac>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_TIM2_Init+0xac>)
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_TIM2_Init+0xac>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_TIM2_Init+0xac>)
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800106a:	4818      	ldr	r0, [pc, #96]	; (80010cc <MX_TIM2_Init+0xac>)
 800106c:	f002 f95e 	bl	800332c <HAL_TIM_OC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001076:	f000 fa09 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	4619      	mov	r1, r3
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <MX_TIM2_Init+0xac>)
 800108a:	f002 fe05 	bl	8003c98 <HAL_TIMEx_MasterConfigSynchronization>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001094:	f000 f9fa 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2204      	movs	r2, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <MX_TIM2_Init+0xac>)
 80010b0:	f002 faf4 	bl	800369c <HAL_TIM_OC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80010ba:	f000 f9e7 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010be:	4803      	ldr	r0, [pc, #12]	; (80010cc <MX_TIM2_Init+0xac>)
 80010c0:	f000 fa86 	bl	80015d0 <HAL_TIM_MspPostInit>

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20001e48 	.word	0x20001e48

080010d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_USART2_UART_Init+0x50>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_USART2_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_USART2_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_USART2_UART_Init+0x4c>)
 8001108:	f002 fe56 	bl	8003db8 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001112:	f000 f9bb 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20001e88 	.word	0x20001e88
 8001120:	40004400 	.word	0x40004400

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MX_GPIO_Init+0xb8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a26      	ldr	r2, [pc, #152]	; (80011dc <MX_GPIO_Init+0xb8>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <MX_GPIO_Init+0xb8>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <MX_GPIO_Init+0xb8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <MX_GPIO_Init+0xb8>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_GPIO_Init+0xb8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_GPIO_Init+0xb8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a18      	ldr	r2, [pc, #96]	; (80011dc <MX_GPIO_Init+0xb8>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_GPIO_Init+0xb8>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|DH_Out_Pin|DL_Out_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001194:	4812      	ldr	r0, [pc, #72]	; (80011e0 <MX_GPIO_Init+0xbc>)
 8001196:	f001 fb9b 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800119a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_GPIO_Init+0xc0>)
 80011b0:	f001 f9fc 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 DH_Out_Pin DL_Out_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|DH_Out_Pin|DL_Out_Pin;
 80011b4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80011b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_GPIO_Init+0xbc>)
 80011ce:	f001 f9ed 	bl	80025ac <HAL_GPIO_Init>

}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020800 	.word	0x40020800

080011e8 <TIM_OC_Callback>:

int curr_time,prev_time,diff_time;
int freq;
float buffer[1024];
int count = 0;
void TIM_OC_Callback(){
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

	//Log Values
	prev_time = curr_time;
 80011ee:	4b90      	ldr	r3, [pc, #576]	; (8001430 <TIM_OC_Callback+0x248>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a90      	ldr	r2, [pc, #576]	; (8001434 <TIM_OC_Callback+0x24c>)
 80011f4:	6013      	str	r3, [r2, #0]
	phase_prev = phase_curr;
 80011f6:	4b90      	ldr	r3, [pc, #576]	; (8001438 <TIM_OC_Callback+0x250>)
 80011f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011fc:	4a8f      	ldr	r2, [pc, #572]	; (800143c <TIM_OC_Callback+0x254>)
 80011fe:	e9c2 3400 	strd	r3, r4, [r2]

	//Get ADC Val
	HAL_ADC_Start(&hadc1);
 8001202:	488f      	ldr	r0, [pc, #572]	; (8001440 <TIM_OC_Callback+0x258>)
 8001204:	f000 fbd2 	bl	80019ac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,5);
 8001208:	2105      	movs	r1, #5
 800120a:	488d      	ldr	r0, [pc, #564]	; (8001440 <TIM_OC_Callback+0x258>)
 800120c:	f000 fc94 	bl	8001b38 <HAL_ADC_PollForConversion>
	int adcval = HAL_ADC_GetValue(&hadc1);
 8001210:	488b      	ldr	r0, [pc, #556]	; (8001440 <TIM_OC_Callback+0x258>)
 8001212:	f000 fe56 	bl	8001ec2 <HAL_ADC_GetValue>
 8001216:	4603      	mov	r3, r0
 8001218:	607b      	str	r3, [r7, #4]

	//Capture time
	curr_time = htim2.Instance->CNT;
 800121a:	4b8a      	ldr	r3, [pc, #552]	; (8001444 <TIM_OC_Callback+0x25c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	461a      	mov	r2, r3
 8001222:	4b83      	ldr	r3, [pc, #524]	; (8001430 <TIM_OC_Callback+0x248>)
 8001224:	601a      	str	r2, [r3, #0]
	diff_time = curr_time-prev_time;
 8001226:	4b82      	ldr	r3, [pc, #520]	; (8001430 <TIM_OC_Callback+0x248>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b82      	ldr	r3, [pc, #520]	; (8001434 <TIM_OC_Callback+0x24c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	4a85      	ldr	r2, [pc, #532]	; (8001448 <TIM_OC_Callback+0x260>)
 8001232:	6013      	str	r3, [r2, #0]

	//Calculate freq
	phase_curr = asin(((double)adcval-2048.0)/2048.0);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff f941 	bl	80004bc <__aeabi_i2d>
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b83      	ldr	r3, [pc, #524]	; (800144c <TIM_OC_Callback+0x264>)
 8001240:	f7fe ffee 	bl	8000220 <__aeabi_dsub>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4618      	mov	r0, r3
 800124a:	4621      	mov	r1, r4
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	4b7e      	ldr	r3, [pc, #504]	; (800144c <TIM_OC_Callback+0x264>)
 8001252:	f7ff fac7 	bl	80007e4 <__aeabi_ddiv>
 8001256:	4603      	mov	r3, r0
 8001258:	460c      	mov	r4, r1
 800125a:	ec44 3b17 	vmov	d7, r3, r4
 800125e:	eeb0 0a47 	vmov.f32	s0, s14
 8001262:	eef0 0a67 	vmov.f32	s1, s15
 8001266:	f004 ffa9 	bl	80061bc <asin>
 800126a:	eeb0 7a40 	vmov.f32	s14, s0
 800126e:	eef0 7a60 	vmov.f32	s15, s1
 8001272:	4b71      	ldr	r3, [pc, #452]	; (8001438 <TIM_OC_Callback+0x250>)
 8001274:	ed83 7b00 	vstr	d7, [r3]
	freq_rad = (phase_curr-phase_prev)*1000000.0/diff_time;
 8001278:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <TIM_OC_Callback+0x250>)
 800127a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800127e:	4b6f      	ldr	r3, [pc, #444]	; (800143c <TIM_OC_Callback+0x254>)
 8001280:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001284:	461a      	mov	r2, r3
 8001286:	4623      	mov	r3, r4
 8001288:	f7fe ffca 	bl	8000220 <__aeabi_dsub>
 800128c:	4603      	mov	r3, r0
 800128e:	460c      	mov	r4, r1
 8001290:	4618      	mov	r0, r3
 8001292:	4621      	mov	r1, r4
 8001294:	a362      	add	r3, pc, #392	; (adr r3, 8001420 <TIM_OC_Callback+0x238>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff f979 	bl	8000590 <__aeabi_dmul>
 800129e:	4603      	mov	r3, r0
 80012a0:	460c      	mov	r4, r1
 80012a2:	4625      	mov	r5, r4
 80012a4:	461c      	mov	r4, r3
 80012a6:	4b68      	ldr	r3, [pc, #416]	; (8001448 <TIM_OC_Callback+0x260>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f906 	bl	80004bc <__aeabi_i2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7ff fa94 	bl	80007e4 <__aeabi_ddiv>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	4a63      	ldr	r2, [pc, #396]	; (8001450 <TIM_OC_Callback+0x268>)
 80012c2:	e9c2 3400 	strd	r3, r4, [r2]
	freq = freq_rad/(2*PI*1.0);
 80012c6:	4b62      	ldr	r3, [pc, #392]	; (8001450 <TIM_OC_Callback+0x268>)
 80012c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012cc:	a356      	add	r3, pc, #344	; (adr r3, 8001428 <TIM_OC_Callback+0x240>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff fa87 	bl	80007e4 <__aeabi_ddiv>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	4618      	mov	r0, r3
 80012dc:	4621      	mov	r1, r4
 80012de:	f7ff fc07 	bl	8000af0 <__aeabi_d2iz>
 80012e2:	4602      	mov	r2, r0
 80012e4:	4b5b      	ldr	r3, [pc, #364]	; (8001454 <TIM_OC_Callback+0x26c>)
 80012e6:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA,DL_Out_Pin,0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ee:	485a      	ldr	r0, [pc, #360]	; (8001458 <TIM_OC_Callback+0x270>)
 80012f0:	f001 faee 	bl	80028d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,DH_Out_Pin,0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fa:	4857      	ldr	r0, [pc, #348]	; (8001458 <TIM_OC_Callback+0x270>)
 80012fc:	f001 fae8 	bl	80028d0 <HAL_GPIO_WritePin>
	//+ Low frequency
	if(1200-freq_deviation <freq && freq < 1200+freq_deviation ){
 8001300:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001304:	f5c3 6296 	rsb	r2, r3, #1200	; 0x4b0
 8001308:	4b52      	ldr	r3, [pc, #328]	; (8001454 <TIM_OC_Callback+0x26c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	da13      	bge.n	8001338 <TIM_OC_Callback+0x150>
 8001310:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001314:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 8001318:	4b4e      	ldr	r3, [pc, #312]	; (8001454 <TIM_OC_Callback+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	dd0b      	ble.n	8001338 <TIM_OC_Callback+0x150>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8001320:	2201      	movs	r2, #1
 8001322:	2120      	movs	r1, #32
 8001324:	484c      	ldr	r0, [pc, #304]	; (8001458 <TIM_OC_Callback+0x270>)
 8001326:	f001 fad3 	bl	80028d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,DL_Out_Pin,1);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001330:	4849      	ldr	r0, [pc, #292]	; (8001458 <TIM_OC_Callback+0x270>)
 8001332:	f001 facd 	bl	80028d0 <HAL_GPIO_WritePin>
 8001336:	e065      	b.n	8001404 <TIM_OC_Callback+0x21c>
	}
	//+ High frequency
	else if(-1200-freq_deviation <freq && freq < -1200+freq_deviation ){
 8001338:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800133c:	4b47      	ldr	r3, [pc, #284]	; (800145c <TIM_OC_Callback+0x274>)
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	4a44      	ldr	r2, [pc, #272]	; (8001454 <TIM_OC_Callback+0x26c>)
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	4293      	cmp	r3, r2
 8001346:	da13      	bge.n	8001370 <TIM_OC_Callback+0x188>
 8001348:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800134c:	f5a3 6296 	sub.w	r2, r3, #1200	; 0x4b0
 8001350:	4b40      	ldr	r3, [pc, #256]	; (8001454 <TIM_OC_Callback+0x26c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	dd0b      	ble.n	8001370 <TIM_OC_Callback+0x188>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8001358:	2201      	movs	r2, #1
 800135a:	2120      	movs	r1, #32
 800135c:	483e      	ldr	r0, [pc, #248]	; (8001458 <TIM_OC_Callback+0x270>)
 800135e:	f001 fab7 	bl	80028d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,DL_Out_Pin,1);
 8001362:	2201      	movs	r2, #1
 8001364:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001368:	483b      	ldr	r0, [pc, #236]	; (8001458 <TIM_OC_Callback+0x270>)
 800136a:	f001 fab1 	bl	80028d0 <HAL_GPIO_WritePin>
 800136e:	e049      	b.n	8001404 <TIM_OC_Callback+0x21c>
	}
	//- High frequency
	else if(2200-freq_deviation <freq && freq < 2200+freq_deviation ){
 8001370:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001374:	f5c3 6309 	rsb	r3, r3, #2192	; 0x890
 8001378:	3308      	adds	r3, #8
 800137a:	4a36      	ldr	r2, [pc, #216]	; (8001454 <TIM_OC_Callback+0x26c>)
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	4293      	cmp	r3, r2
 8001380:	da13      	bge.n	80013aa <TIM_OC_Callback+0x1c2>
 8001382:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001386:	f603 0298 	addw	r2, r3, #2200	; 0x898
 800138a:	4b32      	ldr	r3, [pc, #200]	; (8001454 <TIM_OC_Callback+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	dd0b      	ble.n	80013aa <TIM_OC_Callback+0x1c2>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8001392:	2201      	movs	r2, #1
 8001394:	2120      	movs	r1, #32
 8001396:	4830      	ldr	r0, [pc, #192]	; (8001458 <TIM_OC_Callback+0x270>)
 8001398:	f001 fa9a 	bl	80028d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,DH_Out_Pin,1);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	482d      	ldr	r0, [pc, #180]	; (8001458 <TIM_OC_Callback+0x270>)
 80013a4:	f001 fa94 	bl	80028d0 <HAL_GPIO_WritePin>
 80013a8:	e02c      	b.n	8001404 <TIM_OC_Callback+0x21c>
	}
	else if(-2200-freq_deviation <freq && freq < -2200+freq_deviation ){
 80013aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80013ae:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <TIM_OC_Callback+0x278>)
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	4a28      	ldr	r2, [pc, #160]	; (8001454 <TIM_OC_Callback+0x26c>)
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	4293      	cmp	r3, r2
 80013b8:	da13      	bge.n	80013e2 <TIM_OC_Callback+0x1fa>
 80013ba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80013be:	f6a3 0298 	subw	r2, r3, #2200	; 0x898
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <TIM_OC_Callback+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dd0b      	ble.n	80013e2 <TIM_OC_Callback+0x1fa>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 80013ca:	2201      	movs	r2, #1
 80013cc:	2120      	movs	r1, #32
 80013ce:	4822      	ldr	r0, [pc, #136]	; (8001458 <TIM_OC_Callback+0x270>)
 80013d0:	f001 fa7e 	bl	80028d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,DH_Out_Pin,1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013da:	481f      	ldr	r0, [pc, #124]	; (8001458 <TIM_OC_Callback+0x270>)
 80013dc:	f001 fa78 	bl	80028d0 <HAL_GPIO_WritePin>
 80013e0:	e010      	b.n	8001404 <TIM_OC_Callback+0x21c>
	}
	else {
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2120      	movs	r1, #32
 80013e6:	481c      	ldr	r0, [pc, #112]	; (8001458 <TIM_OC_Callback+0x270>)
 80013e8:	f001 fa72 	bl	80028d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,DL_Out_Pin,0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f2:	4819      	ldr	r0, [pc, #100]	; (8001458 <TIM_OC_Callback+0x270>)
 80013f4:	f001 fa6c 	bl	80028d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,DH_Out_Pin,0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fe:	4816      	ldr	r0, [pc, #88]	; (8001458 <TIM_OC_Callback+0x270>)
 8001400:	f001 fa66 	bl	80028d0 <HAL_GPIO_WritePin>
	}

	uint32_t next_sampl = curr_time + SAMP_COUNT;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <TIM_OC_Callback+0x248>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	225a      	movs	r2, #90	; 0x5a
 800140a:	4413      	add	r3, r2
 800140c:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,next_sampl);
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <TIM_OC_Callback+0x25c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bdb0      	pop	{r4, r5, r7, pc}
 800141e:	bf00      	nop
 8001420:	00000000 	.word	0x00000000
 8001424:	412e8480 	.word	0x412e8480
 8001428:	53c8d4f1 	.word	0x53c8d4f1
 800142c:	401921fb 	.word	0x401921fb
 8001430:	20000e28 	.word	0x20000e28
 8001434:	20001e30 	.word	0x20001e30
 8001438:	20000dd0 	.word	0x20000dd0
 800143c:	20000dc8 	.word	0x20000dc8
 8001440:	20000de0 	.word	0x20000de0
 8001444:	20001e48 	.word	0x20001e48
 8001448:	20000e2c 	.word	0x20000e2c
 800144c:	40a00000 	.word	0x40a00000
 8001450:	20001e38 	.word	0x20001e38
 8001454:	20000dc0 	.word	0x20000dc0
 8001458:	40020000 	.word	0x40020000
 800145c:	fffffb50 	.word	0xfffffb50
 8001460:	fffff768 	.word	0xfffff768

08001464 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001474:	d106      	bne.n	8001484 <HAL_TIM_OC_DelayElapsedCallback+0x20>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7f1b      	ldrb	r3, [r3, #28]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d102      	bne.n	8001484 <HAL_TIM_OC_DelayElapsedCallback+0x20>
	{
		TIM_OC_Callback();
 800147e:	f7ff feb3 	bl	80011e8 <TIM_OC_Callback>
	}
	return;
 8001482:	bf00      	nop
 8001484:	bf00      	nop
}
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_MspInit+0x4c>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <HAL_MspInit+0x4c>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_MspInit+0x4c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_MspInit+0x4c>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014da:	2007      	movs	r0, #7
 80014dc:	f001 f824 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1b      	ldr	r2, [pc, #108]	; (8001578 <HAL_ADC_MspInit+0x8c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d12f      	bne.n	800156e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_ADC_MspInit+0x90>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_ADC_MspInit+0x90>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_ADC_MspInit+0x90>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_ADC_MspInit+0x90>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <HAL_ADC_MspInit+0x90>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_ADC_MspInit+0x90>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001546:	2301      	movs	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154a:	2303      	movs	r3, #3
 800154c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <HAL_ADC_MspInit+0x94>)
 800155a:	f001 f827 	bl	80025ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2012      	movs	r0, #18
 8001564:	f000 ffeb 	bl	800253e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001568:	2012      	movs	r0, #18
 800156a:	f001 f804 	bl	8002576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40012000 	.word	0x40012000
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000

08001584 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001594:	d115      	bne.n	80015c2 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_TIM_OC_MspInit+0x48>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_TIM_OC_MspInit+0x48>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_TIM_OC_MspInit+0x48>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	201c      	movs	r0, #28
 80015b8:	f000 ffc1 	bl	800253e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015bc:	201c      	movs	r0, #28
 80015be:	f000 ffda 	bl	8002576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f0:	d11d      	bne.n	800162e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_TIM_MspPostInit+0x68>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_TIM_MspPostInit+0x68>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_TIM_MspPostInit+0x68>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800160e:	2302      	movs	r3, #2
 8001610:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800161e:	2301      	movs	r3, #1
 8001620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4619      	mov	r1, r3
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <HAL_TIM_MspPostInit+0x6c>)
 800162a:	f000 ffbf 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000

08001640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <HAL_UART_MspInit+0x84>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12b      	bne.n	80016ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_UART_MspInit+0x88>)
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800169a:	230c      	movs	r3, #12
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016aa:	2307      	movs	r3, #7
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <HAL_UART_MspInit+0x8c>)
 80016b6:	f000 ff79 	bl	80025ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	; 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40004400 	.word	0x40004400
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <MemManage_Handler+0x4>

080016ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001724:	f000 f8de 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <ADC_IRQHandler+0x10>)
 8001732:	f000 fa85 	bl	8001c40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000de0 	.word	0x20000de0

08001740 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <TIM2_IRQHandler+0x10>)
 8001746:	f001 fea1 	bl	800348c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20001e48 	.word	0x20001e48

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f002 ffc4 	bl	8004710 <__errno>
 8001788:	4602      	mov	r2, r0
 800178a:	230c      	movs	r3, #12
 800178c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20020000 	.word	0x20020000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	200001fc 	.word	0x200001fc
 80017bc:	20001ed0 	.word	0x20001ed0

080017c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <SystemInit+0x28>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <SystemInit+0x28>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <SystemInit+0x28>)
 80017d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017da:	609a      	str	r2, [r3, #8]
#endif
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001824 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017f2:	e003      	b.n	80017fc <LoopCopyDataInit>

080017f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017fa:	3104      	adds	r1, #4

080017fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001800:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001802:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001804:	d3f6      	bcc.n	80017f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001808:	e002      	b.n	8001810 <LoopFillZerobss>

0800180a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800180a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800180c:	f842 3b04 	str.w	r3, [r2], #4

08001810 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001812:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001814:	d3f9      	bcc.n	800180a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001816:	f7ff ffd3 	bl	80017c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181a:	f002 ff7f 	bl	800471c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181e:	f7ff fb0f 	bl	8000e40 <main>
  bx  lr    
 8001822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001824:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001828:	08006a94 	.word	0x08006a94
  ldr  r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001830:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001834:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001838:	20001ed0 	.word	0x20001ed0

0800183c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800183c:	e7fe      	b.n	800183c <CAN1_RX0_IRQHandler>
	...

08001840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <HAL_Init+0x40>)
 800184a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_Init+0x40>)
 8001856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a07      	ldr	r2, [pc, #28]	; (8001880 <HAL_Init+0x40>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001868:	2003      	movs	r0, #3
 800186a:	f000 fe5d 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186e:	2000      	movs	r0, #0
 8001870:	f000 f808 	bl	8001884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001874:	f7ff fe12 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x54>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x58>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fe75 	bl	8002592 <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d80a      	bhi.n	80018ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f000 fe3d 	bl	800253e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c4:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_InitTick+0x5c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000008 	.word	0x20000008
 8001908:	20001ec8 	.word	0x20001ec8

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20001ec8 	.word	0x20001ec8

08001924 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e033      	b.n	80019a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fdd2 	bl	80014ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	2b00      	cmp	r3, #0
 8001960:	d118      	bne.n	8001994 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800196a:	f023 0302 	bic.w	r3, r3, #2
 800196e:	f043 0202 	orr.w	r2, r3, #2
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fc00 	bl	800217c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f023 0303 	bic.w	r3, r3, #3
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
 8001992:	e001      	b.n	8001998 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_Start+0x1a>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e0a5      	b.n	8001b12 <HAL_ADC_Start+0x166>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d018      	beq.n	8001a0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019ec:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_ADC_Start+0x174>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a4c      	ldr	r2, [pc, #304]	; (8001b24 <HAL_ADC_Start+0x178>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	0c9a      	lsrs	r2, r3, #18
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a00:	e002      	b.n	8001a08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f9      	bne.n	8001a02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d179      	bne.n	8001b10 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a5a:	d106      	bne.n	8001a6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a60:	f023 0206 	bic.w	r2, r3, #6
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	645a      	str	r2, [r3, #68]	; 0x44
 8001a68:	e002      	b.n	8001a70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a78:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_ADC_Start+0x17c>)
 8001a7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d12a      	bne.n	8001ae8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a25      	ldr	r2, [pc, #148]	; (8001b2c <HAL_ADC_Start+0x180>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d015      	beq.n	8001ac8 <HAL_ADC_Start+0x11c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <HAL_ADC_Start+0x184>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d105      	bne.n	8001ab2 <HAL_ADC_Start+0x106>
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_ADC_Start+0x17c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <HAL_ADC_Start+0x188>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d129      	bne.n	8001b10 <HAL_ADC_Start+0x164>
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <HAL_ADC_Start+0x17c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d823      	bhi.n	8001b10 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d11c      	bne.n	8001b10 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	e013      	b.n	8001b10 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0f      	ldr	r2, [pc, #60]	; (8001b2c <HAL_ADC_Start+0x180>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10e      	bne.n	8001b10 <HAL_ADC_Start+0x164>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d107      	bne.n	8001b10 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b0e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000
 8001b24:	431bde83 	.word	0x431bde83
 8001b28:	40012300 	.word	0x40012300
 8001b2c:	40012000 	.word	0x40012000
 8001b30:	40012100 	.word	0x40012100
 8001b34:	40012200 	.word	0x40012200

08001b38 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b54:	d113      	bne.n	8001b7e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b64:	d10b      	bne.n	8001b7e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f043 0220 	orr.w	r2, r3, #32
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e05c      	b.n	8001c38 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b7e:	f7ff fec5 	bl	800190c <HAL_GetTick>
 8001b82:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b84:	e01a      	b.n	8001bbc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d016      	beq.n	8001bbc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <HAL_ADC_PollForConversion+0x6c>
 8001b94:	f7ff feba 	bl	800190c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d20b      	bcs.n	8001bbc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f043 0204 	orr.w	r2, r3, #4
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e03d      	b.n	8001c38 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d1dd      	bne.n	8001b86 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0212 	mvn.w	r2, #18
 8001bd2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d123      	bne.n	8001c36 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d11f      	bne.n	8001c36 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d111      	bne.n	8001c36 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d049      	beq.n	8001d16 <HAL_ADC_IRQHandler+0xd6>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d046      	beq.n	8001d16 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d105      	bne.n	8001ca0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d12b      	bne.n	8001d06 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d127      	bne.n	8001d06 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d119      	bne.n	8001d06 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0220 	bic.w	r2, r2, #32
 8001ce0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8e8 	bl	8001edc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0212 	mvn.w	r2, #18
 8001d14:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	2b80      	cmp	r3, #128	; 0x80
 8001d38:	bf0c      	ite	eq
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d057      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x1b8>
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d054      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d105      	bne.n	8001d66 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d139      	bne.n	8001de8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d12b      	bne.n	8001de8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d124      	bne.n	8001de8 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d11d      	bne.n	8001de8 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d119      	bne.n	8001de8 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fac3 	bl	8002374 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f06f 020c 	mvn.w	r2, #12
 8001df6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	bf0c      	ite	eq
 8001e06:	2301      	moveq	r3, #1
 8001e08:	2300      	movne	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e18:	2b40      	cmp	r3, #64	; 0x40
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d017      	beq.n	8001e5a <HAL_ADC_IRQHandler+0x21a>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d014      	beq.n	8001e5a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10d      	bne.n	8001e5a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f850 	bl	8001ef0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0201 	mvn.w	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d015      	beq.n	8001eba <HAL_ADC_IRQHandler+0x27a>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d012      	beq.n	8001eba <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	f043 0202 	orr.w	r2, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0220 	mvn.w	r2, #32
 8001ea8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f82a 	bl	8001f04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0220 	mvn.w	r2, #32
 8001eb8:	601a      	str	r2, [r3, #0]
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x1c>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e113      	b.n	800215c <HAL_ADC_ConfigChannel+0x244>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d925      	bls.n	8001f90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68d9      	ldr	r1, [r3, #12]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	3b1e      	subs	r3, #30
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43da      	mvns	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	400a      	ands	r2, r1
 8001f68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68d9      	ldr	r1, [r3, #12]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4403      	add	r3, r0
 8001f82:	3b1e      	subs	r3, #30
 8001f84:	409a      	lsls	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	e022      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6919      	ldr	r1, [r3, #16]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6919      	ldr	r1, [r3, #16]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4403      	add	r3, r0
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d824      	bhi.n	8002028 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	3b05      	subs	r3, #5
 8001ff0:	221f      	movs	r2, #31
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3b05      	subs	r3, #5
 800201a:	fa00 f203 	lsl.w	r2, r0, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	635a      	str	r2, [r3, #52]	; 0x34
 8002026:	e04c      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d824      	bhi.n	800207a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	3b23      	subs	r3, #35	; 0x23
 8002042:	221f      	movs	r2, #31
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43da      	mvns	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	400a      	ands	r2, r1
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	4618      	mov	r0, r3
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	3b23      	subs	r3, #35	; 0x23
 800206c:	fa00 f203 	lsl.w	r2, r0, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
 8002078:	e023      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	3b41      	subs	r3, #65	; 0x41
 800208c:	221f      	movs	r2, #31
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	400a      	ands	r2, r1
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	4618      	mov	r0, r3
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b41      	subs	r3, #65	; 0x41
 80020b6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_ADC_ConfigChannel+0x250>)
 80020c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_ADC_ConfigChannel+0x254>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d10f      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x1d8>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b12      	cmp	r3, #18
 80020d6:	d10b      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_ADC_ConfigChannel+0x254>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d12b      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x23a>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1c      	ldr	r2, [pc, #112]	; (8002170 <HAL_ADC_ConfigChannel+0x258>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d003      	beq.n	800210c <HAL_ADC_ConfigChannel+0x1f4>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b11      	cmp	r3, #17
 800210a:	d122      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a11      	ldr	r2, [pc, #68]	; (8002170 <HAL_ADC_ConfigChannel+0x258>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d111      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_ADC_ConfigChannel+0x25c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a11      	ldr	r2, [pc, #68]	; (8002178 <HAL_ADC_ConfigChannel+0x260>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	0c9a      	lsrs	r2, r3, #18
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002144:	e002      	b.n	800214c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3b01      	subs	r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f9      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40012300 	.word	0x40012300
 800216c:	40012000 	.word	0x40012000
 8002170:	10000012 	.word	0x10000012
 8002174:	20000000 	.word	0x20000000
 8002178:	431bde83 	.word	0x431bde83

0800217c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002184:	4b79      	ldr	r3, [pc, #484]	; (800236c <ADC_Init+0x1f0>)
 8002186:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	431a      	orrs	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	021a      	lsls	r2, r3, #8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6899      	ldr	r1, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	4a58      	ldr	r2, [pc, #352]	; (8002370 <ADC_Init+0x1f4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d022      	beq.n	800225a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002222:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6899      	ldr	r1, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6899      	ldr	r1, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	e00f      	b.n	800227a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002278:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0202 	bic.w	r2, r2, #2
 8002288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7e1b      	ldrb	r3, [r3, #24]
 8002294:	005a      	lsls	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d01b      	beq.n	80022e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	3b01      	subs	r3, #1
 80022d4:	035a      	lsls	r2, r3, #13
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	e007      	b.n	80022f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	3b01      	subs	r3, #1
 800230c:	051a      	lsls	r2, r3, #20
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6899      	ldr	r1, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002332:	025a      	lsls	r2, r3, #9
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6899      	ldr	r1, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	029a      	lsls	r2, r3, #10
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40012300 	.word	0x40012300
 8002370:	0f000001 	.word	0x0f000001

08002374 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <__NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <__NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	db0b      	blt.n	8002416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4907      	ldr	r1, [pc, #28]	; (8002424 <__NVIC_EnableIRQ+0x38>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2001      	movs	r0, #1
 800240e:	fa00 f202 	lsl.w	r2, r0, r2
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	; (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	; (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f1c3 0307 	rsb	r3, r3, #7
 8002496:	2b04      	cmp	r3, #4
 8002498:	bf28      	it	cs
 800249a:	2304      	movcs	r3, #4
 800249c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d902      	bls.n	80024ac <NVIC_EncodePriority+0x30>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3b03      	subs	r3, #3
 80024aa:	e000      	b.n	80024ae <NVIC_EncodePriority+0x32>
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	401a      	ands	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43d9      	mvns	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	4313      	orrs	r3, r2
         );
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f4:	d301      	bcc.n	80024fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00f      	b.n	800251a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <SysTick_Config+0x40>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002502:	210f      	movs	r1, #15
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f7ff ff8e 	bl	8002428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <SysTick_Config+0x40>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <SysTick_Config+0x40>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff29 	bl	8002388 <__NVIC_SetPriorityGrouping>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002550:	f7ff ff3e 	bl	80023d0 <__NVIC_GetPriorityGrouping>
 8002554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	6978      	ldr	r0, [r7, #20]
 800255c:	f7ff ff8e 	bl	800247c <NVIC_EncodePriority>
 8002560:	4602      	mov	r2, r0
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff5d 	bl	8002428 <__NVIC_SetPriority>
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff31 	bl	80023ec <__NVIC_EnableIRQ>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ffa2 	bl	80024e4 <SysTick_Config>
 80025a0:	4603      	mov	r3, r0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	; 0x24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e165      	b.n	8002894 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	f040 8154 	bne.w	800288e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d00b      	beq.n	8002606 <HAL_GPIO_Init+0x5a>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d007      	beq.n	8002606 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025fa:	2b11      	cmp	r3, #17
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b12      	cmp	r3, #18
 8002604:	d130      	bne.n	8002668 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 0201 	and.w	r2, r3, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0xfc>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b12      	cmp	r3, #18
 80026a6:	d123      	bne.n	80026f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	08da      	lsrs	r2, r3, #3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3208      	adds	r2, #8
 80026b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	220f      	movs	r2, #15
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	08da      	lsrs	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3208      	adds	r2, #8
 80026ea:	69b9      	ldr	r1, [r7, #24]
 80026ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0203 	and.w	r2, r3, #3
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80ae 	beq.w	800288e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b5c      	ldr	r3, [pc, #368]	; (80028a8 <HAL_GPIO_Init+0x2fc>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a5b      	ldr	r2, [pc, #364]	; (80028a8 <HAL_GPIO_Init+0x2fc>)
 800273c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b59      	ldr	r3, [pc, #356]	; (80028a8 <HAL_GPIO_Init+0x2fc>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800274e:	4a57      	ldr	r2, [pc, #348]	; (80028ac <HAL_GPIO_Init+0x300>)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	089b      	lsrs	r3, r3, #2
 8002754:	3302      	adds	r3, #2
 8002756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	220f      	movs	r2, #15
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4e      	ldr	r2, [pc, #312]	; (80028b0 <HAL_GPIO_Init+0x304>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d025      	beq.n	80027c6 <HAL_GPIO_Init+0x21a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4d      	ldr	r2, [pc, #308]	; (80028b4 <HAL_GPIO_Init+0x308>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01f      	beq.n	80027c2 <HAL_GPIO_Init+0x216>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <HAL_GPIO_Init+0x30c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d019      	beq.n	80027be <HAL_GPIO_Init+0x212>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4b      	ldr	r2, [pc, #300]	; (80028bc <HAL_GPIO_Init+0x310>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_GPIO_Init+0x20e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4a      	ldr	r2, [pc, #296]	; (80028c0 <HAL_GPIO_Init+0x314>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00d      	beq.n	80027b6 <HAL_GPIO_Init+0x20a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a49      	ldr	r2, [pc, #292]	; (80028c4 <HAL_GPIO_Init+0x318>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <HAL_GPIO_Init+0x206>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a48      	ldr	r2, [pc, #288]	; (80028c8 <HAL_GPIO_Init+0x31c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_GPIO_Init+0x202>
 80027aa:	2306      	movs	r3, #6
 80027ac:	e00c      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027ae:	2307      	movs	r3, #7
 80027b0:	e00a      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027b2:	2305      	movs	r3, #5
 80027b4:	e008      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027b6:	2304      	movs	r3, #4
 80027b8:	e006      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027ba:	2303      	movs	r3, #3
 80027bc:	e004      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027be:	2302      	movs	r3, #2
 80027c0:	e002      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_GPIO_Init+0x21c>
 80027c6:	2300      	movs	r3, #0
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	f002 0203 	and.w	r2, r2, #3
 80027ce:	0092      	lsls	r2, r2, #2
 80027d0:	4093      	lsls	r3, r2
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d8:	4934      	ldr	r1, [pc, #208]	; (80028ac <HAL_GPIO_Init+0x300>)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	3302      	adds	r3, #2
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e6:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_GPIO_Init+0x320>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800280a:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_GPIO_Init+0x320>)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002810:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <HAL_GPIO_Init+0x320>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002834:	4a25      	ldr	r2, [pc, #148]	; (80028cc <HAL_GPIO_Init+0x320>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283a:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_GPIO_Init+0x320>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285e:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_GPIO_Init+0x320>)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_GPIO_Init+0x320>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002888:	4a10      	ldr	r2, [pc, #64]	; (80028cc <HAL_GPIO_Init+0x320>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3301      	adds	r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b0f      	cmp	r3, #15
 8002898:	f67f ae96 	bls.w	80025c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800289c:	bf00      	nop
 800289e:	3724      	adds	r7, #36	; 0x24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40013800 	.word	0x40013800
 80028b0:	40020000 	.word	0x40020000
 80028b4:	40020400 	.word	0x40020400
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40020c00 	.word	0x40020c00
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40021400 	.word	0x40021400
 80028c8:	40021800 	.word	0x40021800
 80028cc:	40013c00 	.word	0x40013c00

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ec:	e003      	b.n	80028f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	041a      	lsls	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	619a      	str	r2, [r3, #24]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0cc      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b68      	ldr	r3, [pc, #416]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d90c      	bls.n	8002940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b65      	ldr	r3, [pc, #404]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0b8      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a58      	ldr	r2, [pc, #352]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002962:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800297a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	494d      	ldr	r1, [pc, #308]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d044      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d119      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e07f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d003      	beq.n	80029c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e067      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e2:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4934      	ldr	r1, [pc, #208]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f4:	f7fe ff8a 	bl	800190c <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fc:	f7fe ff86 	bl	800190c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e04f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 020c 	and.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1eb      	bne.n	80029fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d20c      	bcs.n	8002a4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e032      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4916      	ldr	r1, [pc, #88]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a76:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	490e      	ldr	r1, [pc, #56]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a8a:	f000 f855 	bl	8002b38 <HAL_RCC_GetSysClockFreq>
 8002a8e:	4601      	mov	r1, r0
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	5cd3      	ldrb	r3, [r2, r3]
 8002a9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002aa2:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe feea 	bl	8001884 <HAL_InitTick>

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023c00 	.word	0x40023c00
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	08006840 	.word	0x08006840
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	20000004 	.word	0x20000004

08002ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000000 	.word	0x20000000

08002ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aec:	f7ff fff0 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002af0:	4601      	mov	r1, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0a9b      	lsrs	r3, r3, #10
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4a03      	ldr	r2, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afe:	5cd3      	ldrb	r3, [r2, r3]
 8002b00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	08006850 	.word	0x08006850

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b14:	f7ff ffdc 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002b18:	4601      	mov	r1, r0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0b5b      	lsrs	r3, r3, #13
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4a03      	ldr	r2, [pc, #12]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b26:	5cd3      	ldrb	r3, [r2, r3]
 8002b28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40023800 	.word	0x40023800
 8002b34:	08006850 	.word	0x08006850

08002b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b52:	4bc6      	ldr	r3, [pc, #792]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x334>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	f200 817e 	bhi.w	8002e5c <HAL_RCC_GetSysClockFreq+0x324>
 8002b60:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <HAL_RCC_GetSysClockFreq+0x30>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b9d 	.word	0x08002b9d
 8002b6c:	08002e5d 	.word	0x08002e5d
 8002b70:	08002e5d 	.word	0x08002e5d
 8002b74:	08002e5d 	.word	0x08002e5d
 8002b78:	08002ba3 	.word	0x08002ba3
 8002b7c:	08002e5d 	.word	0x08002e5d
 8002b80:	08002e5d 	.word	0x08002e5d
 8002b84:	08002e5d 	.word	0x08002e5d
 8002b88:	08002ba9 	.word	0x08002ba9
 8002b8c:	08002e5d 	.word	0x08002e5d
 8002b90:	08002e5d 	.word	0x08002e5d
 8002b94:	08002e5d 	.word	0x08002e5d
 8002b98:	08002d05 	.word	0x08002d05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b9c:	4bb4      	ldr	r3, [pc, #720]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x338>)
 8002b9e:	613b      	str	r3, [r7, #16]
       break;
 8002ba0:	e15f      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ba2:	4bb4      	ldr	r3, [pc, #720]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002ba4:	613b      	str	r3, [r7, #16]
      break;
 8002ba6:	e15c      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba8:	4bb0      	ldr	r3, [pc, #704]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x334>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bb2:	4bae      	ldr	r3, [pc, #696]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x334>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d04a      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bbe:	4bab      	ldr	r3, [pc, #684]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x334>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	099b      	lsrs	r3, r3, #6
 8002bc4:	f04f 0400 	mov.w	r4, #0
 8002bc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	ea03 0501 	and.w	r5, r3, r1
 8002bd4:	ea04 0602 	and.w	r6, r4, r2
 8002bd8:	4629      	mov	r1, r5
 8002bda:	4632      	mov	r2, r6
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	f04f 0400 	mov.w	r4, #0
 8002be4:	0154      	lsls	r4, r2, #5
 8002be6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bea:	014b      	lsls	r3, r1, #5
 8002bec:	4619      	mov	r1, r3
 8002bee:	4622      	mov	r2, r4
 8002bf0:	1b49      	subs	r1, r1, r5
 8002bf2:	eb62 0206 	sbc.w	r2, r2, r6
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	f04f 0400 	mov.w	r4, #0
 8002bfe:	0194      	lsls	r4, r2, #6
 8002c00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c04:	018b      	lsls	r3, r1, #6
 8002c06:	1a5b      	subs	r3, r3, r1
 8002c08:	eb64 0402 	sbc.w	r4, r4, r2
 8002c0c:	f04f 0100 	mov.w	r1, #0
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	00e2      	lsls	r2, r4, #3
 8002c16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c1a:	00d9      	lsls	r1, r3, #3
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4614      	mov	r4, r2
 8002c20:	195b      	adds	r3, r3, r5
 8002c22:	eb44 0406 	adc.w	r4, r4, r6
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	0262      	lsls	r2, r4, #9
 8002c30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c34:	0259      	lsls	r1, r3, #9
 8002c36:	460b      	mov	r3, r1
 8002c38:	4614      	mov	r4, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f04f 0400 	mov.w	r4, #0
 8002c44:	461a      	mov	r2, r3
 8002c46:	4623      	mov	r3, r4
 8002c48:	f7fd ff7a 	bl	8000b40 <__aeabi_uldivmod>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e049      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c54:	4b85      	ldr	r3, [pc, #532]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x334>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	099b      	lsrs	r3, r3, #6
 8002c5a:	f04f 0400 	mov.w	r4, #0
 8002c5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	ea03 0501 	and.w	r5, r3, r1
 8002c6a:	ea04 0602 	and.w	r6, r4, r2
 8002c6e:	4629      	mov	r1, r5
 8002c70:	4632      	mov	r2, r6
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	f04f 0400 	mov.w	r4, #0
 8002c7a:	0154      	lsls	r4, r2, #5
 8002c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c80:	014b      	lsls	r3, r1, #5
 8002c82:	4619      	mov	r1, r3
 8002c84:	4622      	mov	r2, r4
 8002c86:	1b49      	subs	r1, r1, r5
 8002c88:	eb62 0206 	sbc.w	r2, r2, r6
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	f04f 0400 	mov.w	r4, #0
 8002c94:	0194      	lsls	r4, r2, #6
 8002c96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c9a:	018b      	lsls	r3, r1, #6
 8002c9c:	1a5b      	subs	r3, r3, r1
 8002c9e:	eb64 0402 	sbc.w	r4, r4, r2
 8002ca2:	f04f 0100 	mov.w	r1, #0
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	00e2      	lsls	r2, r4, #3
 8002cac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cb0:	00d9      	lsls	r1, r3, #3
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4614      	mov	r4, r2
 8002cb6:	195b      	adds	r3, r3, r5
 8002cb8:	eb44 0406 	adc.w	r4, r4, r6
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	02a2      	lsls	r2, r4, #10
 8002cc6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cca:	0299      	lsls	r1, r3, #10
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4614      	mov	r4, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f04f 0400 	mov.w	r4, #0
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4623      	mov	r3, r4
 8002cde:	f7fd ff2f 	bl	8000b40 <__aeabi_uldivmod>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	460c      	mov	r4, r1
 8002ce6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce8:	4b60      	ldr	r3, [pc, #384]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x334>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	613b      	str	r3, [r7, #16]
      break;
 8002d02:	e0ae      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x334>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d0e:	4b57      	ldr	r3, [pc, #348]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x334>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d04a      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1a:	4b54      	ldr	r3, [pc, #336]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x334>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	f04f 0400 	mov.w	r4, #0
 8002d24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	ea03 0501 	and.w	r5, r3, r1
 8002d30:	ea04 0602 	and.w	r6, r4, r2
 8002d34:	4629      	mov	r1, r5
 8002d36:	4632      	mov	r2, r6
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	f04f 0400 	mov.w	r4, #0
 8002d40:	0154      	lsls	r4, r2, #5
 8002d42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d46:	014b      	lsls	r3, r1, #5
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	1b49      	subs	r1, r1, r5
 8002d4e:	eb62 0206 	sbc.w	r2, r2, r6
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	f04f 0400 	mov.w	r4, #0
 8002d5a:	0194      	lsls	r4, r2, #6
 8002d5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d60:	018b      	lsls	r3, r1, #6
 8002d62:	1a5b      	subs	r3, r3, r1
 8002d64:	eb64 0402 	sbc.w	r4, r4, r2
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	00e2      	lsls	r2, r4, #3
 8002d72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d76:	00d9      	lsls	r1, r3, #3
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4614      	mov	r4, r2
 8002d7c:	195b      	adds	r3, r3, r5
 8002d7e:	eb44 0406 	adc.w	r4, r4, r6
 8002d82:	f04f 0100 	mov.w	r1, #0
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	0262      	lsls	r2, r4, #9
 8002d8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d90:	0259      	lsls	r1, r3, #9
 8002d92:	460b      	mov	r3, r1
 8002d94:	4614      	mov	r4, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	4621      	mov	r1, r4
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f04f 0400 	mov.w	r4, #0
 8002da0:	461a      	mov	r2, r3
 8002da2:	4623      	mov	r3, r4
 8002da4:	f7fd fecc 	bl	8000b40 <__aeabi_uldivmod>
 8002da8:	4603      	mov	r3, r0
 8002daa:	460c      	mov	r4, r1
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e049      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db0:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x334>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	f04f 0400 	mov.w	r4, #0
 8002dba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	ea03 0501 	and.w	r5, r3, r1
 8002dc6:	ea04 0602 	and.w	r6, r4, r2
 8002dca:	4629      	mov	r1, r5
 8002dcc:	4632      	mov	r2, r6
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	f04f 0400 	mov.w	r4, #0
 8002dd6:	0154      	lsls	r4, r2, #5
 8002dd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ddc:	014b      	lsls	r3, r1, #5
 8002dde:	4619      	mov	r1, r3
 8002de0:	4622      	mov	r2, r4
 8002de2:	1b49      	subs	r1, r1, r5
 8002de4:	eb62 0206 	sbc.w	r2, r2, r6
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	f04f 0400 	mov.w	r4, #0
 8002df0:	0194      	lsls	r4, r2, #6
 8002df2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002df6:	018b      	lsls	r3, r1, #6
 8002df8:	1a5b      	subs	r3, r3, r1
 8002dfa:	eb64 0402 	sbc.w	r4, r4, r2
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e0c:	00d9      	lsls	r1, r3, #3
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4614      	mov	r4, r2
 8002e12:	195b      	adds	r3, r3, r5
 8002e14:	eb44 0406 	adc.w	r4, r4, r6
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	02a2      	lsls	r2, r4, #10
 8002e22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e26:	0299      	lsls	r1, r3, #10
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4614      	mov	r4, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	4621      	mov	r1, r4
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f04f 0400 	mov.w	r4, #0
 8002e36:	461a      	mov	r2, r3
 8002e38:	4623      	mov	r3, r4
 8002e3a:	f7fd fe81 	bl	8000b40 <__aeabi_uldivmod>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	460c      	mov	r4, r1
 8002e42:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x334>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	0f1b      	lsrs	r3, r3, #28
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	613b      	str	r3, [r7, #16]
      break;
 8002e5a:	e002      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x338>)
 8002e5e:	613b      	str	r3, [r7, #16]
      break;
 8002e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e62:	693b      	ldr	r3, [r7, #16]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	007a1200 	.word	0x007a1200

08002e78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8083 	beq.w	8002f98 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e92:	4b95      	ldr	r3, [pc, #596]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d019      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e9e:	4b92      	ldr	r3, [pc, #584]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d106      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eaa:	4b8f      	ldr	r3, [pc, #572]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb6:	d00c      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb8:	4b8b      	ldr	r3, [pc, #556]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d112      	bne.n	8002eea <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec4:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed0:	d10b      	bne.n	8002eea <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed2:	4b85      	ldr	r3, [pc, #532]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d05b      	beq.n	8002f96 <HAL_RCC_OscConfig+0x11e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d157      	bne.n	8002f96 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e216      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_OscConfig+0x8a>
 8002ef4:	4b7c      	ldr	r3, [pc, #496]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a7b      	ldr	r2, [pc, #492]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	e01d      	b.n	8002f3e <HAL_RCC_OscConfig+0xc6>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f0a:	d10c      	bne.n	8002f26 <HAL_RCC_OscConfig+0xae>
 8002f0c:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a75      	ldr	r2, [pc, #468]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a72      	ldr	r2, [pc, #456]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	e00b      	b.n	8002f3e <HAL_RCC_OscConfig+0xc6>
 8002f26:	4b70      	ldr	r3, [pc, #448]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6f      	ldr	r2, [pc, #444]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b6d      	ldr	r3, [pc, #436]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6c      	ldr	r2, [pc, #432]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d013      	beq.n	8002f6e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7fe fce1 	bl	800190c <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f4e:	f7fe fcdd 	bl	800190c <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b64      	cmp	r3, #100	; 0x64
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e1db      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f60:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0xd6>
 8002f6c:	e014      	b.n	8002f98 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fccd 	bl	800190c <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f76:	f7fe fcc9 	bl	800190c <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b64      	cmp	r3, #100	; 0x64
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1c7      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f88:	4b57      	ldr	r3, [pc, #348]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f0      	bne.n	8002f76 <HAL_RCC_OscConfig+0xfe>
 8002f94:	e000      	b.n	8002f98 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f96:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d06f      	beq.n	8003084 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d017      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fb0:	4b4d      	ldr	r3, [pc, #308]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fbc:	4b4a      	ldr	r3, [pc, #296]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc8:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d11c      	bne.n	800300e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd4:	4b44      	ldr	r3, [pc, #272]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d116      	bne.n	800300e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe0:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x180>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e18f      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4938      	ldr	r1, [pc, #224]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300c:	e03a      	b.n	8003084 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d020      	beq.n	8003058 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003016:	4b35      	ldr	r3, [pc, #212]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fc76 	bl	800190c <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003024:	f7fe fc72 	bl	800190c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e170      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4925      	ldr	r1, [pc, #148]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
 8003056:	e015      	b.n	8003084 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003058:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe fc55 	bl	800190c <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003066:	f7fe fc51 	bl	800190c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e14f      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003078:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f0      	bne.n	8003066 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d037      	beq.n	8003100 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d016      	beq.n	80030c6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_RCC_OscConfig+0x278>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309e:	f7fe fc35 	bl	800190c <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a6:	f7fe fc31 	bl	800190c <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e12f      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 80030ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x22e>
 80030c4:	e01c      	b.n	8003100 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_RCC_OscConfig+0x278>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7fe fc1e 	bl	800190c <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d2:	e00f      	b.n	80030f4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d4:	f7fe fc1a 	bl	800190c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d908      	bls.n	80030f4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e118      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	42470000 	.word	0x42470000
 80030f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	4b8a      	ldr	r3, [pc, #552]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80030f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e9      	bne.n	80030d4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8097 	beq.w	800323c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003112:	4b83      	ldr	r3, [pc, #524]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	4b7f      	ldr	r3, [pc, #508]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	4a7e      	ldr	r2, [pc, #504]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312c:	6413      	str	r3, [r2, #64]	; 0x40
 800312e:	4b7c      	ldr	r3, [pc, #496]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800313a:	2301      	movs	r3, #1
 800313c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313e:	4b79      	ldr	r3, [pc, #484]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d118      	bne.n	800317c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314a:	4b76      	ldr	r3, [pc, #472]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a75      	ldr	r2, [pc, #468]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003156:	f7fe fbd9 	bl	800190c <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315e:	f7fe fbd5 	bl	800190c <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e0d3      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	4b6c      	ldr	r3, [pc, #432]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x31a>
 8003184:	4b66      	ldr	r3, [pc, #408]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	4a65      	ldr	r2, [pc, #404]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6713      	str	r3, [r2, #112]	; 0x70
 8003190:	e01c      	b.n	80031cc <HAL_RCC_OscConfig+0x354>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b05      	cmp	r3, #5
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x33c>
 800319a:	4b61      	ldr	r3, [pc, #388]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	4a60      	ldr	r2, [pc, #384]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80031a0:	f043 0304 	orr.w	r3, r3, #4
 80031a4:	6713      	str	r3, [r2, #112]	; 0x70
 80031a6:	4b5e      	ldr	r3, [pc, #376]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4a5d      	ldr	r2, [pc, #372]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6713      	str	r3, [r2, #112]	; 0x70
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0x354>
 80031b4:	4b5a      	ldr	r3, [pc, #360]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a59      	ldr	r2, [pc, #356]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	4b57      	ldr	r3, [pc, #348]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a56      	ldr	r2, [pc, #344]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80031c6:	f023 0304 	bic.w	r3, r3, #4
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d015      	beq.n	8003200 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7fe fb9a 	bl	800190c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fe fb96 	bl	800190c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e092      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f2:	4b4b      	ldr	r3, [pc, #300]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0ee      	beq.n	80031dc <HAL_RCC_OscConfig+0x364>
 80031fe:	e014      	b.n	800322a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fe fb84 	bl	800190c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003206:	e00a      	b.n	800321e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003208:	f7fe fb80 	bl	800190c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e07c      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321e:	4b40      	ldr	r3, [pc, #256]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ee      	bne.n	8003208 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322a:	7dfb      	ldrb	r3, [r7, #23]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003230:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	4a3a      	ldr	r2, [pc, #232]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 8003236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d068      	beq.n	8003316 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003244:	4b36      	ldr	r3, [pc, #216]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b08      	cmp	r3, #8
 800324e:	d060      	beq.n	8003312 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d145      	bne.n	80032e4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003258:	4b33      	ldr	r3, [pc, #204]	; (8003328 <HAL_RCC_OscConfig+0x4b0>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325e:	f7fe fb55 	bl	800190c <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003266:	f7fe fb51 	bl	800190c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e04f      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003278:	4b29      	ldr	r3, [pc, #164]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	019b      	lsls	r3, r3, #6
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	3b01      	subs	r3, #1
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	061b      	lsls	r3, r3, #24
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	071b      	lsls	r3, r3, #28
 80032b0:	491b      	ldr	r1, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b6:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <HAL_RCC_OscConfig+0x4b0>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fb26 	bl	800190c <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fe fb22 	bl	800190c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e020      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x44c>
 80032e2:	e018      	b.n	8003316 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e4:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_RCC_OscConfig+0x4b0>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fe fb0f 	bl	800190c <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fe fb0b 	bl	800190c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e009      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_RCC_OscConfig+0x4a8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x47a>
 8003310:	e001      	b.n	8003316 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40023800 	.word	0x40023800
 8003324:	40007000 	.word	0x40007000
 8003328:	42470060 	.word	0x42470060

0800332c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e01d      	b.n	800337a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe f916 	bl	8001584 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f000 fa1e 	bl	80037ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b0c      	cmp	r3, #12
 8003392:	d841      	bhi.n	8003418 <HAL_TIM_OC_Start_IT+0x94>
 8003394:	a201      	add	r2, pc, #4	; (adr r2, 800339c <HAL_TIM_OC_Start_IT+0x18>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	080033d1 	.word	0x080033d1
 80033a0:	08003419 	.word	0x08003419
 80033a4:	08003419 	.word	0x08003419
 80033a8:	08003419 	.word	0x08003419
 80033ac:	080033e3 	.word	0x080033e3
 80033b0:	08003419 	.word	0x08003419
 80033b4:	08003419 	.word	0x08003419
 80033b8:	08003419 	.word	0x08003419
 80033bc:	080033f5 	.word	0x080033f5
 80033c0:	08003419 	.word	0x08003419
 80033c4:	08003419 	.word	0x08003419
 80033c8:	08003419 	.word	0x08003419
 80033cc:	08003407 	.word	0x08003407
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0202 	orr.w	r2, r2, #2
 80033de:	60da      	str	r2, [r3, #12]
      break;
 80033e0:	e01b      	b.n	800341a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0204 	orr.w	r2, r2, #4
 80033f0:	60da      	str	r2, [r3, #12]
      break;
 80033f2:	e012      	b.n	800341a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0208 	orr.w	r2, r2, #8
 8003402:	60da      	str	r2, [r3, #12]
      break;
 8003404:	e009      	b.n	800341a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0210 	orr.w	r2, r2, #16
 8003414:	60da      	str	r2, [r3, #12]
      break;
 8003416:	e000      	b.n	800341a <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8003418:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fc12 	bl	8003c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a15      	ldr	r2, [pc, #84]	; (8003484 <HAL_TIM_OC_Start_IT+0x100>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_TIM_OC_Start_IT+0xb8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a14      	ldr	r2, [pc, #80]	; (8003488 <HAL_TIM_OC_Start_IT+0x104>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_TIM_OC_Start_IT+0xbc>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_TIM_OC_Start_IT+0xbe>
 8003440:	2300      	movs	r3, #0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b06      	cmp	r3, #6
 8003466:	d007      	beq.n	8003478 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40010000 	.word	0x40010000
 8003488:	40010400 	.word	0x40010400

0800348c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d122      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d11b      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0202 	mvn.w	r2, #2
 80034b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f94e 	bl	8003770 <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd ffc4 	bl	8001464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f951 	bl	8003784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d122      	bne.n	800353c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b04      	cmp	r3, #4
 8003502:	d11b      	bne.n	800353c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0204 	mvn.w	r2, #4
 800350c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f924 	bl	8003770 <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd ff9a 	bl	8001464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f927 	bl	8003784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b08      	cmp	r3, #8
 8003548:	d122      	bne.n	8003590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b08      	cmp	r3, #8
 8003556:	d11b      	bne.n	8003590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0208 	mvn.w	r2, #8
 8003560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2204      	movs	r2, #4
 8003566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8fa 	bl	8003770 <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd ff70 	bl	8001464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f8fd 	bl	8003784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b10      	cmp	r3, #16
 800359c:	d122      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d11b      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0210 	mvn.w	r2, #16
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2208      	movs	r2, #8
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8d0 	bl	8003770 <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fd ff46 	bl	8001464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8d3 	bl	8003784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d10e      	bne.n	8003610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d107      	bne.n	8003610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0201 	mvn.w	r2, #1
 8003608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f8a6 	bl	800375c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	2b80      	cmp	r3, #128	; 0x80
 800361c:	d10e      	bne.n	800363c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003628:	2b80      	cmp	r3, #128	; 0x80
 800362a:	d107      	bne.n	800363c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fbb4 	bl	8003da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d10e      	bne.n	8003668 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003654:	2b40      	cmp	r3, #64	; 0x40
 8003656:	d107      	bne.n	8003668 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f898 	bl	8003798 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b20      	cmp	r3, #32
 8003674:	d10e      	bne.n	8003694 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b20      	cmp	r3, #32
 8003682:	d107      	bne.n	8003694 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0220 	mvn.w	r2, #32
 800368c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fb7e 	bl	8003d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e04e      	b.n	8003754 <HAL_TIM_OC_ConfigChannel+0xb8>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d839      	bhi.n	8003740 <HAL_TIM_OC_ConfigChannel+0xa4>
 80036cc:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <HAL_TIM_OC_ConfigChannel+0x38>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	08003709 	.word	0x08003709
 80036d8:	08003741 	.word	0x08003741
 80036dc:	08003741 	.word	0x08003741
 80036e0:	08003741 	.word	0x08003741
 80036e4:	08003717 	.word	0x08003717
 80036e8:	08003741 	.word	0x08003741
 80036ec:	08003741 	.word	0x08003741
 80036f0:	08003741 	.word	0x08003741
 80036f4:	08003725 	.word	0x08003725
 80036f8:	08003741 	.word	0x08003741
 80036fc:	08003741 	.word	0x08003741
 8003700:	08003741 	.word	0x08003741
 8003704:	08003733 	.word	0x08003733
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f8ec 	bl	80038ec <TIM_OC1_SetConfig>
      break;
 8003714:	e015      	b.n	8003742 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f955 	bl	80039cc <TIM_OC2_SetConfig>
      break;
 8003722:	e00e      	b.n	8003742 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f9c4 	bl	8003ab8 <TIM_OC3_SetConfig>
      break;
 8003730:	e007      	b.n	8003742 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fa31 	bl	8003ba0 <TIM_OC4_SetConfig>
      break;
 800373e:	e000      	b.n	8003742 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003740:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a40      	ldr	r2, [pc, #256]	; (80038c0 <TIM_Base_SetConfig+0x114>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d013      	beq.n	80037ec <TIM_Base_SetConfig+0x40>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ca:	d00f      	beq.n	80037ec <TIM_Base_SetConfig+0x40>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a3d      	ldr	r2, [pc, #244]	; (80038c4 <TIM_Base_SetConfig+0x118>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00b      	beq.n	80037ec <TIM_Base_SetConfig+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a3c      	ldr	r2, [pc, #240]	; (80038c8 <TIM_Base_SetConfig+0x11c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d007      	beq.n	80037ec <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a3b      	ldr	r2, [pc, #236]	; (80038cc <TIM_Base_SetConfig+0x120>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a3a      	ldr	r2, [pc, #232]	; (80038d0 <TIM_Base_SetConfig+0x124>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d108      	bne.n	80037fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a2f      	ldr	r2, [pc, #188]	; (80038c0 <TIM_Base_SetConfig+0x114>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d02b      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380c:	d027      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a2c      	ldr	r2, [pc, #176]	; (80038c4 <TIM_Base_SetConfig+0x118>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d023      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a2b      	ldr	r2, [pc, #172]	; (80038c8 <TIM_Base_SetConfig+0x11c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d01f      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <TIM_Base_SetConfig+0x120>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01b      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a29      	ldr	r2, [pc, #164]	; (80038d0 <TIM_Base_SetConfig+0x124>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d017      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a28      	ldr	r2, [pc, #160]	; (80038d4 <TIM_Base_SetConfig+0x128>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a27      	ldr	r2, [pc, #156]	; (80038d8 <TIM_Base_SetConfig+0x12c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00f      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a26      	ldr	r2, [pc, #152]	; (80038dc <TIM_Base_SetConfig+0x130>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00b      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a25      	ldr	r2, [pc, #148]	; (80038e0 <TIM_Base_SetConfig+0x134>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d007      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a24      	ldr	r2, [pc, #144]	; (80038e4 <TIM_Base_SetConfig+0x138>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d003      	beq.n	800385e <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <TIM_Base_SetConfig+0x13c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d108      	bne.n	8003870 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <TIM_Base_SetConfig+0x114>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_Base_SetConfig+0xf8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a0c      	ldr	r2, [pc, #48]	; (80038d0 <TIM_Base_SetConfig+0x124>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d103      	bne.n	80038ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	615a      	str	r2, [r3, #20]
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40010000 	.word	0x40010000
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40000800 	.word	0x40000800
 80038cc:	40000c00 	.word	0x40000c00
 80038d0:	40010400 	.word	0x40010400
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40014400 	.word	0x40014400
 80038dc:	40014800 	.word	0x40014800
 80038e0:	40001800 	.word	0x40001800
 80038e4:	40001c00 	.word	0x40001c00
 80038e8:	40002000 	.word	0x40002000

080038ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	f023 0201 	bic.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0303 	bic.w	r3, r3, #3
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f023 0302 	bic.w	r3, r3, #2
 8003934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <TIM_OC1_SetConfig+0xd8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d003      	beq.n	8003950 <TIM_OC1_SetConfig+0x64>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <TIM_OC1_SetConfig+0xdc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d10c      	bne.n	800396a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 0308 	bic.w	r3, r3, #8
 8003956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f023 0304 	bic.w	r3, r3, #4
 8003968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <TIM_OC1_SetConfig+0xd8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_OC1_SetConfig+0x8e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <TIM_OC1_SetConfig+0xdc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d111      	bne.n	800399e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	621a      	str	r2, [r3, #32]
}
 80039b8:	bf00      	nop
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	40010000 	.word	0x40010000
 80039c8:	40010400 	.word	0x40010400

080039cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f023 0210 	bic.w	r2, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f023 0320 	bic.w	r3, r3, #32
 8003a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a22      	ldr	r2, [pc, #136]	; (8003ab0 <TIM_OC2_SetConfig+0xe4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_OC2_SetConfig+0x68>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a21      	ldr	r2, [pc, #132]	; (8003ab4 <TIM_OC2_SetConfig+0xe8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d10d      	bne.n	8003a50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <TIM_OC2_SetConfig+0xe4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_OC2_SetConfig+0x94>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a16      	ldr	r2, [pc, #88]	; (8003ab4 <TIM_OC2_SetConfig+0xe8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d113      	bne.n	8003a88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40010400 	.word	0x40010400

08003ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0303 	bic.w	r3, r3, #3
 8003aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <TIM_OC3_SetConfig+0xe0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_OC3_SetConfig+0x66>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a20      	ldr	r2, [pc, #128]	; (8003b9c <TIM_OC3_SetConfig+0xe4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10d      	bne.n	8003b3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <TIM_OC3_SetConfig+0xe0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d003      	beq.n	8003b4a <TIM_OC3_SetConfig+0x92>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <TIM_OC3_SetConfig+0xe4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d113      	bne.n	8003b72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	621a      	str	r2, [r3, #32]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40010400 	.word	0x40010400

08003ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	031b      	lsls	r3, r3, #12
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <TIM_OC4_SetConfig+0xa4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC4_SetConfig+0x68>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <TIM_OC4_SetConfig+0xa8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d109      	bne.n	8003c1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	019b      	lsls	r3, r3, #6
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40010000 	.word	0x40010000
 8003c48:	40010400 	.word	0x40010400

08003c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	2201      	movs	r2, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1a      	ldr	r2, [r3, #32]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	fa01 f303 	lsl.w	r3, r1, r3
 8003c84:	431a      	orrs	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	621a      	str	r2, [r3, #32]
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e05a      	b.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a21      	ldr	r2, [pc, #132]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d022      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfc:	d01d      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d018      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00e      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d009      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d004      	beq.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10c      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	40010400 	.word	0x40010400
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40001800 	.word	0x40001800

08003d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e03f      	b.n	8003e4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd fc2e 	bl	8001640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f90b 	bl	8004018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b088      	sub	sp, #32
 8003e56:	af02      	add	r7, sp, #8
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	f040 8083 	bne.w	8003f7a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_UART_Transmit+0x2e>
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e07b      	b.n	8003f7c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Transmit+0x40>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e074      	b.n	8003f7c <HAL_UART_Transmit+0x12a>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2221      	movs	r2, #33	; 0x21
 8003ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003ea8:	f7fd fd30 	bl	800190c <HAL_GetTick>
 8003eac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	88fa      	ldrh	r2, [r7, #6]
 8003eb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	88fa      	ldrh	r2, [r7, #6]
 8003eb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003ec2:	e042      	b.n	8003f4a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eda:	d122      	bne.n	8003f22 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2180      	movs	r1, #128	; 0x80
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f84c 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e042      	b.n	8003f7c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f08:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3302      	adds	r3, #2
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	e017      	b.n	8003f4a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	e013      	b.n	8003f4a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f829 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e01f      	b.n	8003f7c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	60ba      	str	r2, [r7, #8]
 8003f42:	781a      	ldrb	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1b7      	bne.n	8003ec4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2140      	movs	r1, #64	; 0x40
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f810 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e006      	b.n	8003f7c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f94:	e02c      	b.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d028      	beq.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa4:	f7fd fcb2 	bl	800190c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d21d      	bcs.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fc2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e00f      	b.n	8004010 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	429a      	cmp	r2, r3
 800400c:	d0c3      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800405a:	f023 030c 	bic.w	r3, r3, #12
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	68f9      	ldr	r1, [r7, #12]
 8004064:	430b      	orrs	r3, r1
 8004066:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004086:	f040 818b 	bne.w	80043a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4ac1      	ldr	r2, [pc, #772]	; (8004394 <UART_SetConfig+0x37c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d005      	beq.n	80040a0 <UART_SetConfig+0x88>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4abf      	ldr	r2, [pc, #764]	; (8004398 <UART_SetConfig+0x380>)
 800409a:	4293      	cmp	r3, r2
 800409c:	f040 80bd 	bne.w	800421a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7fe fd36 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 80040a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	461d      	mov	r5, r3
 80040aa:	f04f 0600 	mov.w	r6, #0
 80040ae:	46a8      	mov	r8, r5
 80040b0:	46b1      	mov	r9, r6
 80040b2:	eb18 0308 	adds.w	r3, r8, r8
 80040b6:	eb49 0409 	adc.w	r4, r9, r9
 80040ba:	4698      	mov	r8, r3
 80040bc:	46a1      	mov	r9, r4
 80040be:	eb18 0805 	adds.w	r8, r8, r5
 80040c2:	eb49 0906 	adc.w	r9, r9, r6
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040da:	4688      	mov	r8, r1
 80040dc:	4691      	mov	r9, r2
 80040de:	eb18 0005 	adds.w	r0, r8, r5
 80040e2:	eb49 0106 	adc.w	r1, r9, r6
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	461d      	mov	r5, r3
 80040ec:	f04f 0600 	mov.w	r6, #0
 80040f0:	196b      	adds	r3, r5, r5
 80040f2:	eb46 0406 	adc.w	r4, r6, r6
 80040f6:	461a      	mov	r2, r3
 80040f8:	4623      	mov	r3, r4
 80040fa:	f7fc fd21 	bl	8000b40 <__aeabi_uldivmod>
 80040fe:	4603      	mov	r3, r0
 8004100:	460c      	mov	r4, r1
 8004102:	461a      	mov	r2, r3
 8004104:	4ba5      	ldr	r3, [pc, #660]	; (800439c <UART_SetConfig+0x384>)
 8004106:	fba3 2302 	umull	r2, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	461d      	mov	r5, r3
 8004114:	f04f 0600 	mov.w	r6, #0
 8004118:	46a9      	mov	r9, r5
 800411a:	46b2      	mov	sl, r6
 800411c:	eb19 0309 	adds.w	r3, r9, r9
 8004120:	eb4a 040a 	adc.w	r4, sl, sl
 8004124:	4699      	mov	r9, r3
 8004126:	46a2      	mov	sl, r4
 8004128:	eb19 0905 	adds.w	r9, r9, r5
 800412c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800413c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004140:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004144:	4689      	mov	r9, r1
 8004146:	4692      	mov	sl, r2
 8004148:	eb19 0005 	adds.w	r0, r9, r5
 800414c:	eb4a 0106 	adc.w	r1, sl, r6
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	461d      	mov	r5, r3
 8004156:	f04f 0600 	mov.w	r6, #0
 800415a:	196b      	adds	r3, r5, r5
 800415c:	eb46 0406 	adc.w	r4, r6, r6
 8004160:	461a      	mov	r2, r3
 8004162:	4623      	mov	r3, r4
 8004164:	f7fc fcec 	bl	8000b40 <__aeabi_uldivmod>
 8004168:	4603      	mov	r3, r0
 800416a:	460c      	mov	r4, r1
 800416c:	461a      	mov	r2, r3
 800416e:	4b8b      	ldr	r3, [pc, #556]	; (800439c <UART_SetConfig+0x384>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	2164      	movs	r1, #100	; 0x64
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	3332      	adds	r3, #50	; 0x32
 8004182:	4a86      	ldr	r2, [pc, #536]	; (800439c <UART_SetConfig+0x384>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004190:	4498      	add	r8, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	461d      	mov	r5, r3
 8004196:	f04f 0600 	mov.w	r6, #0
 800419a:	46a9      	mov	r9, r5
 800419c:	46b2      	mov	sl, r6
 800419e:	eb19 0309 	adds.w	r3, r9, r9
 80041a2:	eb4a 040a 	adc.w	r4, sl, sl
 80041a6:	4699      	mov	r9, r3
 80041a8:	46a2      	mov	sl, r4
 80041aa:	eb19 0905 	adds.w	r9, r9, r5
 80041ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80041b2:	f04f 0100 	mov.w	r1, #0
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041c6:	4689      	mov	r9, r1
 80041c8:	4692      	mov	sl, r2
 80041ca:	eb19 0005 	adds.w	r0, r9, r5
 80041ce:	eb4a 0106 	adc.w	r1, sl, r6
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	461d      	mov	r5, r3
 80041d8:	f04f 0600 	mov.w	r6, #0
 80041dc:	196b      	adds	r3, r5, r5
 80041de:	eb46 0406 	adc.w	r4, r6, r6
 80041e2:	461a      	mov	r2, r3
 80041e4:	4623      	mov	r3, r4
 80041e6:	f7fc fcab 	bl	8000b40 <__aeabi_uldivmod>
 80041ea:	4603      	mov	r3, r0
 80041ec:	460c      	mov	r4, r1
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b6a      	ldr	r3, [pc, #424]	; (800439c <UART_SetConfig+0x384>)
 80041f2:	fba3 1302 	umull	r1, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2164      	movs	r1, #100	; 0x64
 80041fa:	fb01 f303 	mul.w	r3, r1, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	3332      	adds	r3, #50	; 0x32
 8004204:	4a65      	ldr	r2, [pc, #404]	; (800439c <UART_SetConfig+0x384>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	f003 0207 	and.w	r2, r3, #7
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4442      	add	r2, r8
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	e26f      	b.n	80046fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800421a:	f7fe fc65 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 800421e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	461d      	mov	r5, r3
 8004224:	f04f 0600 	mov.w	r6, #0
 8004228:	46a8      	mov	r8, r5
 800422a:	46b1      	mov	r9, r6
 800422c:	eb18 0308 	adds.w	r3, r8, r8
 8004230:	eb49 0409 	adc.w	r4, r9, r9
 8004234:	4698      	mov	r8, r3
 8004236:	46a1      	mov	r9, r4
 8004238:	eb18 0805 	adds.w	r8, r8, r5
 800423c:	eb49 0906 	adc.w	r9, r9, r6
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800424c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004250:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004254:	4688      	mov	r8, r1
 8004256:	4691      	mov	r9, r2
 8004258:	eb18 0005 	adds.w	r0, r8, r5
 800425c:	eb49 0106 	adc.w	r1, r9, r6
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	461d      	mov	r5, r3
 8004266:	f04f 0600 	mov.w	r6, #0
 800426a:	196b      	adds	r3, r5, r5
 800426c:	eb46 0406 	adc.w	r4, r6, r6
 8004270:	461a      	mov	r2, r3
 8004272:	4623      	mov	r3, r4
 8004274:	f7fc fc64 	bl	8000b40 <__aeabi_uldivmod>
 8004278:	4603      	mov	r3, r0
 800427a:	460c      	mov	r4, r1
 800427c:	461a      	mov	r2, r3
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <UART_SetConfig+0x384>)
 8004280:	fba3 2302 	umull	r2, r3, r3, r2
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	461d      	mov	r5, r3
 800428e:	f04f 0600 	mov.w	r6, #0
 8004292:	46a9      	mov	r9, r5
 8004294:	46b2      	mov	sl, r6
 8004296:	eb19 0309 	adds.w	r3, r9, r9
 800429a:	eb4a 040a 	adc.w	r4, sl, sl
 800429e:	4699      	mov	r9, r3
 80042a0:	46a2      	mov	sl, r4
 80042a2:	eb19 0905 	adds.w	r9, r9, r5
 80042a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80042aa:	f04f 0100 	mov.w	r1, #0
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042be:	4689      	mov	r9, r1
 80042c0:	4692      	mov	sl, r2
 80042c2:	eb19 0005 	adds.w	r0, r9, r5
 80042c6:	eb4a 0106 	adc.w	r1, sl, r6
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	461d      	mov	r5, r3
 80042d0:	f04f 0600 	mov.w	r6, #0
 80042d4:	196b      	adds	r3, r5, r5
 80042d6:	eb46 0406 	adc.w	r4, r6, r6
 80042da:	461a      	mov	r2, r3
 80042dc:	4623      	mov	r3, r4
 80042de:	f7fc fc2f 	bl	8000b40 <__aeabi_uldivmod>
 80042e2:	4603      	mov	r3, r0
 80042e4:	460c      	mov	r4, r1
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b2c      	ldr	r3, [pc, #176]	; (800439c <UART_SetConfig+0x384>)
 80042ea:	fba3 1302 	umull	r1, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2164      	movs	r1, #100	; 0x64
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	3332      	adds	r3, #50	; 0x32
 80042fc:	4a27      	ldr	r2, [pc, #156]	; (800439c <UART_SetConfig+0x384>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800430a:	4498      	add	r8, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	461d      	mov	r5, r3
 8004310:	f04f 0600 	mov.w	r6, #0
 8004314:	46a9      	mov	r9, r5
 8004316:	46b2      	mov	sl, r6
 8004318:	eb19 0309 	adds.w	r3, r9, r9
 800431c:	eb4a 040a 	adc.w	r4, sl, sl
 8004320:	4699      	mov	r9, r3
 8004322:	46a2      	mov	sl, r4
 8004324:	eb19 0905 	adds.w	r9, r9, r5
 8004328:	eb4a 0a06 	adc.w	sl, sl, r6
 800432c:	f04f 0100 	mov.w	r1, #0
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004338:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800433c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004340:	4689      	mov	r9, r1
 8004342:	4692      	mov	sl, r2
 8004344:	eb19 0005 	adds.w	r0, r9, r5
 8004348:	eb4a 0106 	adc.w	r1, sl, r6
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	461d      	mov	r5, r3
 8004352:	f04f 0600 	mov.w	r6, #0
 8004356:	196b      	adds	r3, r5, r5
 8004358:	eb46 0406 	adc.w	r4, r6, r6
 800435c:	461a      	mov	r2, r3
 800435e:	4623      	mov	r3, r4
 8004360:	f7fc fbee 	bl	8000b40 <__aeabi_uldivmod>
 8004364:	4603      	mov	r3, r0
 8004366:	460c      	mov	r4, r1
 8004368:	461a      	mov	r2, r3
 800436a:	4b0c      	ldr	r3, [pc, #48]	; (800439c <UART_SetConfig+0x384>)
 800436c:	fba3 1302 	umull	r1, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	2164      	movs	r1, #100	; 0x64
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	3332      	adds	r3, #50	; 0x32
 800437e:	4a07      	ldr	r2, [pc, #28]	; (800439c <UART_SetConfig+0x384>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	f003 0207 	and.w	r2, r3, #7
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4442      	add	r2, r8
 8004390:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004392:	e1b2      	b.n	80046fa <UART_SetConfig+0x6e2>
 8004394:	40011000 	.word	0x40011000
 8004398:	40011400 	.word	0x40011400
 800439c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4ad7      	ldr	r2, [pc, #860]	; (8004704 <UART_SetConfig+0x6ec>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d005      	beq.n	80043b6 <UART_SetConfig+0x39e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4ad6      	ldr	r2, [pc, #856]	; (8004708 <UART_SetConfig+0x6f0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	f040 80d1 	bne.w	8004558 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043b6:	f7fe fbab 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 80043ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	469a      	mov	sl, r3
 80043c0:	f04f 0b00 	mov.w	fp, #0
 80043c4:	46d0      	mov	r8, sl
 80043c6:	46d9      	mov	r9, fp
 80043c8:	eb18 0308 	adds.w	r3, r8, r8
 80043cc:	eb49 0409 	adc.w	r4, r9, r9
 80043d0:	4698      	mov	r8, r3
 80043d2:	46a1      	mov	r9, r4
 80043d4:	eb18 080a 	adds.w	r8, r8, sl
 80043d8:	eb49 090b 	adc.w	r9, r9, fp
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043f0:	4688      	mov	r8, r1
 80043f2:	4691      	mov	r9, r2
 80043f4:	eb1a 0508 	adds.w	r5, sl, r8
 80043f8:	eb4b 0609 	adc.w	r6, fp, r9
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4619      	mov	r1, r3
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	f04f 0400 	mov.w	r4, #0
 800440e:	0094      	lsls	r4, r2, #2
 8004410:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004414:	008b      	lsls	r3, r1, #2
 8004416:	461a      	mov	r2, r3
 8004418:	4623      	mov	r3, r4
 800441a:	4628      	mov	r0, r5
 800441c:	4631      	mov	r1, r6
 800441e:	f7fc fb8f 	bl	8000b40 <__aeabi_uldivmod>
 8004422:	4603      	mov	r3, r0
 8004424:	460c      	mov	r4, r1
 8004426:	461a      	mov	r2, r3
 8004428:	4bb8      	ldr	r3, [pc, #736]	; (800470c <UART_SetConfig+0x6f4>)
 800442a:	fba3 2302 	umull	r2, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	469b      	mov	fp, r3
 8004438:	f04f 0c00 	mov.w	ip, #0
 800443c:	46d9      	mov	r9, fp
 800443e:	46e2      	mov	sl, ip
 8004440:	eb19 0309 	adds.w	r3, r9, r9
 8004444:	eb4a 040a 	adc.w	r4, sl, sl
 8004448:	4699      	mov	r9, r3
 800444a:	46a2      	mov	sl, r4
 800444c:	eb19 090b 	adds.w	r9, r9, fp
 8004450:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004460:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004464:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004468:	4689      	mov	r9, r1
 800446a:	4692      	mov	sl, r2
 800446c:	eb1b 0509 	adds.w	r5, fp, r9
 8004470:	eb4c 060a 	adc.w	r6, ip, sl
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4619      	mov	r1, r3
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	f04f 0400 	mov.w	r4, #0
 8004486:	0094      	lsls	r4, r2, #2
 8004488:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800448c:	008b      	lsls	r3, r1, #2
 800448e:	461a      	mov	r2, r3
 8004490:	4623      	mov	r3, r4
 8004492:	4628      	mov	r0, r5
 8004494:	4631      	mov	r1, r6
 8004496:	f7fc fb53 	bl	8000b40 <__aeabi_uldivmod>
 800449a:	4603      	mov	r3, r0
 800449c:	460c      	mov	r4, r1
 800449e:	461a      	mov	r2, r3
 80044a0:	4b9a      	ldr	r3, [pc, #616]	; (800470c <UART_SetConfig+0x6f4>)
 80044a2:	fba3 1302 	umull	r1, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	2164      	movs	r1, #100	; 0x64
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	3332      	adds	r3, #50	; 0x32
 80044b4:	4a95      	ldr	r2, [pc, #596]	; (800470c <UART_SetConfig+0x6f4>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c0:	4498      	add	r8, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	469b      	mov	fp, r3
 80044c6:	f04f 0c00 	mov.w	ip, #0
 80044ca:	46d9      	mov	r9, fp
 80044cc:	46e2      	mov	sl, ip
 80044ce:	eb19 0309 	adds.w	r3, r9, r9
 80044d2:	eb4a 040a 	adc.w	r4, sl, sl
 80044d6:	4699      	mov	r9, r3
 80044d8:	46a2      	mov	sl, r4
 80044da:	eb19 090b 	adds.w	r9, r9, fp
 80044de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044f6:	4689      	mov	r9, r1
 80044f8:	4692      	mov	sl, r2
 80044fa:	eb1b 0509 	adds.w	r5, fp, r9
 80044fe:	eb4c 060a 	adc.w	r6, ip, sl
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	4619      	mov	r1, r3
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	f04f 0400 	mov.w	r4, #0
 8004514:	0094      	lsls	r4, r2, #2
 8004516:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800451a:	008b      	lsls	r3, r1, #2
 800451c:	461a      	mov	r2, r3
 800451e:	4623      	mov	r3, r4
 8004520:	4628      	mov	r0, r5
 8004522:	4631      	mov	r1, r6
 8004524:	f7fc fb0c 	bl	8000b40 <__aeabi_uldivmod>
 8004528:	4603      	mov	r3, r0
 800452a:	460c      	mov	r4, r1
 800452c:	461a      	mov	r2, r3
 800452e:	4b77      	ldr	r3, [pc, #476]	; (800470c <UART_SetConfig+0x6f4>)
 8004530:	fba3 1302 	umull	r1, r3, r3, r2
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	2164      	movs	r1, #100	; 0x64
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	3332      	adds	r3, #50	; 0x32
 8004542:	4a72      	ldr	r2, [pc, #456]	; (800470c <UART_SetConfig+0x6f4>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	f003 020f 	and.w	r2, r3, #15
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4442      	add	r2, r8
 8004554:	609a      	str	r2, [r3, #8]
 8004556:	e0d0      	b.n	80046fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004558:	f7fe fac6 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 800455c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	469a      	mov	sl, r3
 8004562:	f04f 0b00 	mov.w	fp, #0
 8004566:	46d0      	mov	r8, sl
 8004568:	46d9      	mov	r9, fp
 800456a:	eb18 0308 	adds.w	r3, r8, r8
 800456e:	eb49 0409 	adc.w	r4, r9, r9
 8004572:	4698      	mov	r8, r3
 8004574:	46a1      	mov	r9, r4
 8004576:	eb18 080a 	adds.w	r8, r8, sl
 800457a:	eb49 090b 	adc.w	r9, r9, fp
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800458a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800458e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004592:	4688      	mov	r8, r1
 8004594:	4691      	mov	r9, r2
 8004596:	eb1a 0508 	adds.w	r5, sl, r8
 800459a:	eb4b 0609 	adc.w	r6, fp, r9
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4619      	mov	r1, r3
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	f04f 0400 	mov.w	r4, #0
 80045b0:	0094      	lsls	r4, r2, #2
 80045b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045b6:	008b      	lsls	r3, r1, #2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4623      	mov	r3, r4
 80045bc:	4628      	mov	r0, r5
 80045be:	4631      	mov	r1, r6
 80045c0:	f7fc fabe 	bl	8000b40 <__aeabi_uldivmod>
 80045c4:	4603      	mov	r3, r0
 80045c6:	460c      	mov	r4, r1
 80045c8:	461a      	mov	r2, r3
 80045ca:	4b50      	ldr	r3, [pc, #320]	; (800470c <UART_SetConfig+0x6f4>)
 80045cc:	fba3 2302 	umull	r2, r3, r3, r2
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	469b      	mov	fp, r3
 80045da:	f04f 0c00 	mov.w	ip, #0
 80045de:	46d9      	mov	r9, fp
 80045e0:	46e2      	mov	sl, ip
 80045e2:	eb19 0309 	adds.w	r3, r9, r9
 80045e6:	eb4a 040a 	adc.w	r4, sl, sl
 80045ea:	4699      	mov	r9, r3
 80045ec:	46a2      	mov	sl, r4
 80045ee:	eb19 090b 	adds.w	r9, r9, fp
 80045f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045f6:	f04f 0100 	mov.w	r1, #0
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004602:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004606:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800460a:	4689      	mov	r9, r1
 800460c:	4692      	mov	sl, r2
 800460e:	eb1b 0509 	adds.w	r5, fp, r9
 8004612:	eb4c 060a 	adc.w	r6, ip, sl
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4619      	mov	r1, r3
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	f04f 0400 	mov.w	r4, #0
 8004628:	0094      	lsls	r4, r2, #2
 800462a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800462e:	008b      	lsls	r3, r1, #2
 8004630:	461a      	mov	r2, r3
 8004632:	4623      	mov	r3, r4
 8004634:	4628      	mov	r0, r5
 8004636:	4631      	mov	r1, r6
 8004638:	f7fc fa82 	bl	8000b40 <__aeabi_uldivmod>
 800463c:	4603      	mov	r3, r0
 800463e:	460c      	mov	r4, r1
 8004640:	461a      	mov	r2, r3
 8004642:	4b32      	ldr	r3, [pc, #200]	; (800470c <UART_SetConfig+0x6f4>)
 8004644:	fba3 1302 	umull	r1, r3, r3, r2
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	2164      	movs	r1, #100	; 0x64
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	3332      	adds	r3, #50	; 0x32
 8004656:	4a2d      	ldr	r2, [pc, #180]	; (800470c <UART_SetConfig+0x6f4>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004662:	4498      	add	r8, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	469b      	mov	fp, r3
 8004668:	f04f 0c00 	mov.w	ip, #0
 800466c:	46d9      	mov	r9, fp
 800466e:	46e2      	mov	sl, ip
 8004670:	eb19 0309 	adds.w	r3, r9, r9
 8004674:	eb4a 040a 	adc.w	r4, sl, sl
 8004678:	4699      	mov	r9, r3
 800467a:	46a2      	mov	sl, r4
 800467c:	eb19 090b 	adds.w	r9, r9, fp
 8004680:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004684:	f04f 0100 	mov.w	r1, #0
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004690:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004694:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004698:	4689      	mov	r9, r1
 800469a:	4692      	mov	sl, r2
 800469c:	eb1b 0509 	adds.w	r5, fp, r9
 80046a0:	eb4c 060a 	adc.w	r6, ip, sl
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4619      	mov	r1, r3
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	f04f 0400 	mov.w	r4, #0
 80046b6:	0094      	lsls	r4, r2, #2
 80046b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046bc:	008b      	lsls	r3, r1, #2
 80046be:	461a      	mov	r2, r3
 80046c0:	4623      	mov	r3, r4
 80046c2:	4628      	mov	r0, r5
 80046c4:	4631      	mov	r1, r6
 80046c6:	f7fc fa3b 	bl	8000b40 <__aeabi_uldivmod>
 80046ca:	4603      	mov	r3, r0
 80046cc:	460c      	mov	r4, r1
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b0e      	ldr	r3, [pc, #56]	; (800470c <UART_SetConfig+0x6f4>)
 80046d2:	fba3 1302 	umull	r1, r3, r3, r2
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2164      	movs	r1, #100	; 0x64
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	3332      	adds	r3, #50	; 0x32
 80046e4:	4a09      	ldr	r2, [pc, #36]	; (800470c <UART_SetConfig+0x6f4>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	f003 020f 	and.w	r2, r3, #15
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4442      	add	r2, r8
 80046f6:	609a      	str	r2, [r3, #8]
}
 80046f8:	e7ff      	b.n	80046fa <UART_SetConfig+0x6e2>
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004704:	40011000 	.word	0x40011000
 8004708:	40011400 	.word	0x40011400
 800470c:	51eb851f 	.word	0x51eb851f

08004710 <__errno>:
 8004710:	4b01      	ldr	r3, [pc, #4]	; (8004718 <__errno+0x8>)
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	2000000c 	.word	0x2000000c

0800471c <__libc_init_array>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	4e0d      	ldr	r6, [pc, #52]	; (8004754 <__libc_init_array+0x38>)
 8004720:	4c0d      	ldr	r4, [pc, #52]	; (8004758 <__libc_init_array+0x3c>)
 8004722:	1ba4      	subs	r4, r4, r6
 8004724:	10a4      	asrs	r4, r4, #2
 8004726:	2500      	movs	r5, #0
 8004728:	42a5      	cmp	r5, r4
 800472a:	d109      	bne.n	8004740 <__libc_init_array+0x24>
 800472c:	4e0b      	ldr	r6, [pc, #44]	; (800475c <__libc_init_array+0x40>)
 800472e:	4c0c      	ldr	r4, [pc, #48]	; (8004760 <__libc_init_array+0x44>)
 8004730:	f002 f872 	bl	8006818 <_init>
 8004734:	1ba4      	subs	r4, r4, r6
 8004736:	10a4      	asrs	r4, r4, #2
 8004738:	2500      	movs	r5, #0
 800473a:	42a5      	cmp	r5, r4
 800473c:	d105      	bne.n	800474a <__libc_init_array+0x2e>
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004744:	4798      	blx	r3
 8004746:	3501      	adds	r5, #1
 8004748:	e7ee      	b.n	8004728 <__libc_init_array+0xc>
 800474a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800474e:	4798      	blx	r3
 8004750:	3501      	adds	r5, #1
 8004752:	e7f2      	b.n	800473a <__libc_init_array+0x1e>
 8004754:	08006a8c 	.word	0x08006a8c
 8004758:	08006a8c 	.word	0x08006a8c
 800475c:	08006a8c 	.word	0x08006a8c
 8004760:	08006a90 	.word	0x08006a90

08004764 <memset>:
 8004764:	4402      	add	r2, r0
 8004766:	4603      	mov	r3, r0
 8004768:	4293      	cmp	r3, r2
 800476a:	d100      	bne.n	800476e <memset+0xa>
 800476c:	4770      	bx	lr
 800476e:	f803 1b01 	strb.w	r1, [r3], #1
 8004772:	e7f9      	b.n	8004768 <memset+0x4>

08004774 <__cvt>:
 8004774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004778:	ec55 4b10 	vmov	r4, r5, d0
 800477c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800477e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004782:	2d00      	cmp	r5, #0
 8004784:	460e      	mov	r6, r1
 8004786:	4691      	mov	r9, r2
 8004788:	4619      	mov	r1, r3
 800478a:	bfb8      	it	lt
 800478c:	4622      	movlt	r2, r4
 800478e:	462b      	mov	r3, r5
 8004790:	f027 0720 	bic.w	r7, r7, #32
 8004794:	bfbb      	ittet	lt
 8004796:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800479a:	461d      	movlt	r5, r3
 800479c:	2300      	movge	r3, #0
 800479e:	232d      	movlt	r3, #45	; 0x2d
 80047a0:	bfb8      	it	lt
 80047a2:	4614      	movlt	r4, r2
 80047a4:	2f46      	cmp	r7, #70	; 0x46
 80047a6:	700b      	strb	r3, [r1, #0]
 80047a8:	d004      	beq.n	80047b4 <__cvt+0x40>
 80047aa:	2f45      	cmp	r7, #69	; 0x45
 80047ac:	d100      	bne.n	80047b0 <__cvt+0x3c>
 80047ae:	3601      	adds	r6, #1
 80047b0:	2102      	movs	r1, #2
 80047b2:	e000      	b.n	80047b6 <__cvt+0x42>
 80047b4:	2103      	movs	r1, #3
 80047b6:	ab03      	add	r3, sp, #12
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	ab02      	add	r3, sp, #8
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	4632      	mov	r2, r6
 80047c0:	4653      	mov	r3, sl
 80047c2:	ec45 4b10 	vmov	d0, r4, r5
 80047c6:	f000 fbab 	bl	8004f20 <_dtoa_r>
 80047ca:	2f47      	cmp	r7, #71	; 0x47
 80047cc:	4680      	mov	r8, r0
 80047ce:	d102      	bne.n	80047d6 <__cvt+0x62>
 80047d0:	f019 0f01 	tst.w	r9, #1
 80047d4:	d026      	beq.n	8004824 <__cvt+0xb0>
 80047d6:	2f46      	cmp	r7, #70	; 0x46
 80047d8:	eb08 0906 	add.w	r9, r8, r6
 80047dc:	d111      	bne.n	8004802 <__cvt+0x8e>
 80047de:	f898 3000 	ldrb.w	r3, [r8]
 80047e2:	2b30      	cmp	r3, #48	; 0x30
 80047e4:	d10a      	bne.n	80047fc <__cvt+0x88>
 80047e6:	2200      	movs	r2, #0
 80047e8:	2300      	movs	r3, #0
 80047ea:	4620      	mov	r0, r4
 80047ec:	4629      	mov	r1, r5
 80047ee:	f7fc f937 	bl	8000a60 <__aeabi_dcmpeq>
 80047f2:	b918      	cbnz	r0, 80047fc <__cvt+0x88>
 80047f4:	f1c6 0601 	rsb	r6, r6, #1
 80047f8:	f8ca 6000 	str.w	r6, [sl]
 80047fc:	f8da 3000 	ldr.w	r3, [sl]
 8004800:	4499      	add	r9, r3
 8004802:	2200      	movs	r2, #0
 8004804:	2300      	movs	r3, #0
 8004806:	4620      	mov	r0, r4
 8004808:	4629      	mov	r1, r5
 800480a:	f7fc f929 	bl	8000a60 <__aeabi_dcmpeq>
 800480e:	b938      	cbnz	r0, 8004820 <__cvt+0xac>
 8004810:	2230      	movs	r2, #48	; 0x30
 8004812:	9b03      	ldr	r3, [sp, #12]
 8004814:	454b      	cmp	r3, r9
 8004816:	d205      	bcs.n	8004824 <__cvt+0xb0>
 8004818:	1c59      	adds	r1, r3, #1
 800481a:	9103      	str	r1, [sp, #12]
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	e7f8      	b.n	8004812 <__cvt+0x9e>
 8004820:	f8cd 900c 	str.w	r9, [sp, #12]
 8004824:	9b03      	ldr	r3, [sp, #12]
 8004826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004828:	eba3 0308 	sub.w	r3, r3, r8
 800482c:	4640      	mov	r0, r8
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	b004      	add	sp, #16
 8004832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004836 <__exponent>:
 8004836:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004838:	2900      	cmp	r1, #0
 800483a:	4604      	mov	r4, r0
 800483c:	bfba      	itte	lt
 800483e:	4249      	neglt	r1, r1
 8004840:	232d      	movlt	r3, #45	; 0x2d
 8004842:	232b      	movge	r3, #43	; 0x2b
 8004844:	2909      	cmp	r1, #9
 8004846:	f804 2b02 	strb.w	r2, [r4], #2
 800484a:	7043      	strb	r3, [r0, #1]
 800484c:	dd20      	ble.n	8004890 <__exponent+0x5a>
 800484e:	f10d 0307 	add.w	r3, sp, #7
 8004852:	461f      	mov	r7, r3
 8004854:	260a      	movs	r6, #10
 8004856:	fb91 f5f6 	sdiv	r5, r1, r6
 800485a:	fb06 1115 	mls	r1, r6, r5, r1
 800485e:	3130      	adds	r1, #48	; 0x30
 8004860:	2d09      	cmp	r5, #9
 8004862:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004866:	f103 32ff 	add.w	r2, r3, #4294967295
 800486a:	4629      	mov	r1, r5
 800486c:	dc09      	bgt.n	8004882 <__exponent+0x4c>
 800486e:	3130      	adds	r1, #48	; 0x30
 8004870:	3b02      	subs	r3, #2
 8004872:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004876:	42bb      	cmp	r3, r7
 8004878:	4622      	mov	r2, r4
 800487a:	d304      	bcc.n	8004886 <__exponent+0x50>
 800487c:	1a10      	subs	r0, r2, r0
 800487e:	b003      	add	sp, #12
 8004880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004882:	4613      	mov	r3, r2
 8004884:	e7e7      	b.n	8004856 <__exponent+0x20>
 8004886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800488a:	f804 2b01 	strb.w	r2, [r4], #1
 800488e:	e7f2      	b.n	8004876 <__exponent+0x40>
 8004890:	2330      	movs	r3, #48	; 0x30
 8004892:	4419      	add	r1, r3
 8004894:	7083      	strb	r3, [r0, #2]
 8004896:	1d02      	adds	r2, r0, #4
 8004898:	70c1      	strb	r1, [r0, #3]
 800489a:	e7ef      	b.n	800487c <__exponent+0x46>

0800489c <_printf_float>:
 800489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	b08d      	sub	sp, #52	; 0x34
 80048a2:	460c      	mov	r4, r1
 80048a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80048a8:	4616      	mov	r6, r2
 80048aa:	461f      	mov	r7, r3
 80048ac:	4605      	mov	r5, r0
 80048ae:	f001 f8ef 	bl	8005a90 <_localeconv_r>
 80048b2:	6803      	ldr	r3, [r0, #0]
 80048b4:	9304      	str	r3, [sp, #16]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fb fca6 	bl	8000208 <strlen>
 80048bc:	2300      	movs	r3, #0
 80048be:	930a      	str	r3, [sp, #40]	; 0x28
 80048c0:	f8d8 3000 	ldr.w	r3, [r8]
 80048c4:	9005      	str	r0, [sp, #20]
 80048c6:	3307      	adds	r3, #7
 80048c8:	f023 0307 	bic.w	r3, r3, #7
 80048cc:	f103 0208 	add.w	r2, r3, #8
 80048d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80048d4:	f8d4 b000 	ldr.w	fp, [r4]
 80048d8:	f8c8 2000 	str.w	r2, [r8]
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80048e4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80048e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048ec:	9307      	str	r3, [sp, #28]
 80048ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80048f2:	f04f 32ff 	mov.w	r2, #4294967295
 80048f6:	4ba7      	ldr	r3, [pc, #668]	; (8004b94 <_printf_float+0x2f8>)
 80048f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048fc:	f7fc f8e2 	bl	8000ac4 <__aeabi_dcmpun>
 8004900:	bb70      	cbnz	r0, 8004960 <_printf_float+0xc4>
 8004902:	f04f 32ff 	mov.w	r2, #4294967295
 8004906:	4ba3      	ldr	r3, [pc, #652]	; (8004b94 <_printf_float+0x2f8>)
 8004908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800490c:	f7fc f8bc 	bl	8000a88 <__aeabi_dcmple>
 8004910:	bb30      	cbnz	r0, 8004960 <_printf_float+0xc4>
 8004912:	2200      	movs	r2, #0
 8004914:	2300      	movs	r3, #0
 8004916:	4640      	mov	r0, r8
 8004918:	4649      	mov	r1, r9
 800491a:	f7fc f8ab 	bl	8000a74 <__aeabi_dcmplt>
 800491e:	b110      	cbz	r0, 8004926 <_printf_float+0x8a>
 8004920:	232d      	movs	r3, #45	; 0x2d
 8004922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004926:	4a9c      	ldr	r2, [pc, #624]	; (8004b98 <_printf_float+0x2fc>)
 8004928:	4b9c      	ldr	r3, [pc, #624]	; (8004b9c <_printf_float+0x300>)
 800492a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800492e:	bf8c      	ite	hi
 8004930:	4690      	movhi	r8, r2
 8004932:	4698      	movls	r8, r3
 8004934:	2303      	movs	r3, #3
 8004936:	f02b 0204 	bic.w	r2, fp, #4
 800493a:	6123      	str	r3, [r4, #16]
 800493c:	6022      	str	r2, [r4, #0]
 800493e:	f04f 0900 	mov.w	r9, #0
 8004942:	9700      	str	r7, [sp, #0]
 8004944:	4633      	mov	r3, r6
 8004946:	aa0b      	add	r2, sp, #44	; 0x2c
 8004948:	4621      	mov	r1, r4
 800494a:	4628      	mov	r0, r5
 800494c:	f000 f9e6 	bl	8004d1c <_printf_common>
 8004950:	3001      	adds	r0, #1
 8004952:	f040 808d 	bne.w	8004a70 <_printf_float+0x1d4>
 8004956:	f04f 30ff 	mov.w	r0, #4294967295
 800495a:	b00d      	add	sp, #52	; 0x34
 800495c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	4640      	mov	r0, r8
 8004966:	4649      	mov	r1, r9
 8004968:	f7fc f8ac 	bl	8000ac4 <__aeabi_dcmpun>
 800496c:	b110      	cbz	r0, 8004974 <_printf_float+0xd8>
 800496e:	4a8c      	ldr	r2, [pc, #560]	; (8004ba0 <_printf_float+0x304>)
 8004970:	4b8c      	ldr	r3, [pc, #560]	; (8004ba4 <_printf_float+0x308>)
 8004972:	e7da      	b.n	800492a <_printf_float+0x8e>
 8004974:	6861      	ldr	r1, [r4, #4]
 8004976:	1c4b      	adds	r3, r1, #1
 8004978:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800497c:	a80a      	add	r0, sp, #40	; 0x28
 800497e:	d13e      	bne.n	80049fe <_printf_float+0x162>
 8004980:	2306      	movs	r3, #6
 8004982:	6063      	str	r3, [r4, #4]
 8004984:	2300      	movs	r3, #0
 8004986:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800498a:	ab09      	add	r3, sp, #36	; 0x24
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	ec49 8b10 	vmov	d0, r8, r9
 8004992:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004996:	6022      	str	r2, [r4, #0]
 8004998:	f8cd a004 	str.w	sl, [sp, #4]
 800499c:	6861      	ldr	r1, [r4, #4]
 800499e:	4628      	mov	r0, r5
 80049a0:	f7ff fee8 	bl	8004774 <__cvt>
 80049a4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80049a8:	2b47      	cmp	r3, #71	; 0x47
 80049aa:	4680      	mov	r8, r0
 80049ac:	d109      	bne.n	80049c2 <_printf_float+0x126>
 80049ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b0:	1cd8      	adds	r0, r3, #3
 80049b2:	db02      	blt.n	80049ba <_printf_float+0x11e>
 80049b4:	6862      	ldr	r2, [r4, #4]
 80049b6:	4293      	cmp	r3, r2
 80049b8:	dd47      	ble.n	8004a4a <_printf_float+0x1ae>
 80049ba:	f1aa 0a02 	sub.w	sl, sl, #2
 80049be:	fa5f fa8a 	uxtb.w	sl, sl
 80049c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80049c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049c8:	d824      	bhi.n	8004a14 <_printf_float+0x178>
 80049ca:	3901      	subs	r1, #1
 80049cc:	4652      	mov	r2, sl
 80049ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049d2:	9109      	str	r1, [sp, #36]	; 0x24
 80049d4:	f7ff ff2f 	bl	8004836 <__exponent>
 80049d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049da:	1813      	adds	r3, r2, r0
 80049dc:	2a01      	cmp	r2, #1
 80049de:	4681      	mov	r9, r0
 80049e0:	6123      	str	r3, [r4, #16]
 80049e2:	dc02      	bgt.n	80049ea <_printf_float+0x14e>
 80049e4:	6822      	ldr	r2, [r4, #0]
 80049e6:	07d1      	lsls	r1, r2, #31
 80049e8:	d501      	bpl.n	80049ee <_printf_float+0x152>
 80049ea:	3301      	adds	r3, #1
 80049ec:	6123      	str	r3, [r4, #16]
 80049ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0a5      	beq.n	8004942 <_printf_float+0xa6>
 80049f6:	232d      	movs	r3, #45	; 0x2d
 80049f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049fc:	e7a1      	b.n	8004942 <_printf_float+0xa6>
 80049fe:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004a02:	f000 8177 	beq.w	8004cf4 <_printf_float+0x458>
 8004a06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004a0a:	d1bb      	bne.n	8004984 <_printf_float+0xe8>
 8004a0c:	2900      	cmp	r1, #0
 8004a0e:	d1b9      	bne.n	8004984 <_printf_float+0xe8>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e7b6      	b.n	8004982 <_printf_float+0xe6>
 8004a14:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004a18:	d119      	bne.n	8004a4e <_printf_float+0x1b2>
 8004a1a:	2900      	cmp	r1, #0
 8004a1c:	6863      	ldr	r3, [r4, #4]
 8004a1e:	dd0c      	ble.n	8004a3a <_printf_float+0x19e>
 8004a20:	6121      	str	r1, [r4, #16]
 8004a22:	b913      	cbnz	r3, 8004a2a <_printf_float+0x18e>
 8004a24:	6822      	ldr	r2, [r4, #0]
 8004a26:	07d2      	lsls	r2, r2, #31
 8004a28:	d502      	bpl.n	8004a30 <_printf_float+0x194>
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	440b      	add	r3, r1
 8004a2e:	6123      	str	r3, [r4, #16]
 8004a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a32:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a34:	f04f 0900 	mov.w	r9, #0
 8004a38:	e7d9      	b.n	80049ee <_printf_float+0x152>
 8004a3a:	b913      	cbnz	r3, 8004a42 <_printf_float+0x1a6>
 8004a3c:	6822      	ldr	r2, [r4, #0]
 8004a3e:	07d0      	lsls	r0, r2, #31
 8004a40:	d501      	bpl.n	8004a46 <_printf_float+0x1aa>
 8004a42:	3302      	adds	r3, #2
 8004a44:	e7f3      	b.n	8004a2e <_printf_float+0x192>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e7f1      	b.n	8004a2e <_printf_float+0x192>
 8004a4a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004a4e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004a52:	4293      	cmp	r3, r2
 8004a54:	db05      	blt.n	8004a62 <_printf_float+0x1c6>
 8004a56:	6822      	ldr	r2, [r4, #0]
 8004a58:	6123      	str	r3, [r4, #16]
 8004a5a:	07d1      	lsls	r1, r2, #31
 8004a5c:	d5e8      	bpl.n	8004a30 <_printf_float+0x194>
 8004a5e:	3301      	adds	r3, #1
 8004a60:	e7e5      	b.n	8004a2e <_printf_float+0x192>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bfd4      	ite	le
 8004a66:	f1c3 0302 	rsble	r3, r3, #2
 8004a6a:	2301      	movgt	r3, #1
 8004a6c:	4413      	add	r3, r2
 8004a6e:	e7de      	b.n	8004a2e <_printf_float+0x192>
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	055a      	lsls	r2, r3, #21
 8004a74:	d407      	bmi.n	8004a86 <_printf_float+0x1ea>
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	4642      	mov	r2, r8
 8004a7a:	4631      	mov	r1, r6
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	47b8      	blx	r7
 8004a80:	3001      	adds	r0, #1
 8004a82:	d12b      	bne.n	8004adc <_printf_float+0x240>
 8004a84:	e767      	b.n	8004956 <_printf_float+0xba>
 8004a86:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004a8a:	f240 80dc 	bls.w	8004c46 <_printf_float+0x3aa>
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2300      	movs	r3, #0
 8004a92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a96:	f7fb ffe3 	bl	8000a60 <__aeabi_dcmpeq>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d033      	beq.n	8004b06 <_printf_float+0x26a>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4a41      	ldr	r2, [pc, #260]	; (8004ba8 <_printf_float+0x30c>)
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b8      	blx	r7
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	f43f af54 	beq.w	8004956 <_printf_float+0xba>
 8004aae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	db02      	blt.n	8004abc <_printf_float+0x220>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	07d8      	lsls	r0, r3, #31
 8004aba:	d50f      	bpl.n	8004adc <_printf_float+0x240>
 8004abc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	f43f af45 	beq.w	8004956 <_printf_float+0xba>
 8004acc:	f04f 0800 	mov.w	r8, #0
 8004ad0:	f104 091a 	add.w	r9, r4, #26
 8004ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	4543      	cmp	r3, r8
 8004ada:	dc09      	bgt.n	8004af0 <_printf_float+0x254>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	079b      	lsls	r3, r3, #30
 8004ae0:	f100 8103 	bmi.w	8004cea <_printf_float+0x44e>
 8004ae4:	68e0      	ldr	r0, [r4, #12]
 8004ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ae8:	4298      	cmp	r0, r3
 8004aea:	bfb8      	it	lt
 8004aec:	4618      	movlt	r0, r3
 8004aee:	e734      	b.n	800495a <_printf_float+0xbe>
 8004af0:	2301      	movs	r3, #1
 8004af2:	464a      	mov	r2, r9
 8004af4:	4631      	mov	r1, r6
 8004af6:	4628      	mov	r0, r5
 8004af8:	47b8      	blx	r7
 8004afa:	3001      	adds	r0, #1
 8004afc:	f43f af2b 	beq.w	8004956 <_printf_float+0xba>
 8004b00:	f108 0801 	add.w	r8, r8, #1
 8004b04:	e7e6      	b.n	8004ad4 <_printf_float+0x238>
 8004b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	dc2b      	bgt.n	8004b64 <_printf_float+0x2c8>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	4a26      	ldr	r2, [pc, #152]	; (8004ba8 <_printf_float+0x30c>)
 8004b10:	4631      	mov	r1, r6
 8004b12:	4628      	mov	r0, r5
 8004b14:	47b8      	blx	r7
 8004b16:	3001      	adds	r0, #1
 8004b18:	f43f af1d 	beq.w	8004956 <_printf_float+0xba>
 8004b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1e:	b923      	cbnz	r3, 8004b2a <_printf_float+0x28e>
 8004b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b22:	b913      	cbnz	r3, 8004b2a <_printf_float+0x28e>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	07d9      	lsls	r1, r3, #31
 8004b28:	d5d8      	bpl.n	8004adc <_printf_float+0x240>
 8004b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4628      	mov	r0, r5
 8004b32:	47b8      	blx	r7
 8004b34:	3001      	adds	r0, #1
 8004b36:	f43f af0e 	beq.w	8004956 <_printf_float+0xba>
 8004b3a:	f04f 0900 	mov.w	r9, #0
 8004b3e:	f104 0a1a 	add.w	sl, r4, #26
 8004b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b44:	425b      	negs	r3, r3
 8004b46:	454b      	cmp	r3, r9
 8004b48:	dc01      	bgt.n	8004b4e <_printf_float+0x2b2>
 8004b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b4c:	e794      	b.n	8004a78 <_printf_float+0x1dc>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4652      	mov	r2, sl
 8004b52:	4631      	mov	r1, r6
 8004b54:	4628      	mov	r0, r5
 8004b56:	47b8      	blx	r7
 8004b58:	3001      	adds	r0, #1
 8004b5a:	f43f aefc 	beq.w	8004956 <_printf_float+0xba>
 8004b5e:	f109 0901 	add.w	r9, r9, #1
 8004b62:	e7ee      	b.n	8004b42 <_printf_float+0x2a6>
 8004b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	bfa8      	it	ge
 8004b6c:	461a      	movge	r2, r3
 8004b6e:	2a00      	cmp	r2, #0
 8004b70:	4691      	mov	r9, r2
 8004b72:	dd07      	ble.n	8004b84 <_printf_float+0x2e8>
 8004b74:	4613      	mov	r3, r2
 8004b76:	4631      	mov	r1, r6
 8004b78:	4642      	mov	r2, r8
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	47b8      	blx	r7
 8004b7e:	3001      	adds	r0, #1
 8004b80:	f43f aee9 	beq.w	8004956 <_printf_float+0xba>
 8004b84:	f104 031a 	add.w	r3, r4, #26
 8004b88:	f04f 0b00 	mov.w	fp, #0
 8004b8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b90:	9306      	str	r3, [sp, #24]
 8004b92:	e015      	b.n	8004bc0 <_printf_float+0x324>
 8004b94:	7fefffff 	.word	0x7fefffff
 8004b98:	0800685c 	.word	0x0800685c
 8004b9c:	08006858 	.word	0x08006858
 8004ba0:	08006864 	.word	0x08006864
 8004ba4:	08006860 	.word	0x08006860
 8004ba8:	08006868 	.word	0x08006868
 8004bac:	2301      	movs	r3, #1
 8004bae:	9a06      	ldr	r2, [sp, #24]
 8004bb0:	4631      	mov	r1, r6
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	47b8      	blx	r7
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	f43f aecd 	beq.w	8004956 <_printf_float+0xba>
 8004bbc:	f10b 0b01 	add.w	fp, fp, #1
 8004bc0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004bc4:	ebaa 0309 	sub.w	r3, sl, r9
 8004bc8:	455b      	cmp	r3, fp
 8004bca:	dcef      	bgt.n	8004bac <_printf_float+0x310>
 8004bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	44d0      	add	r8, sl
 8004bd4:	db15      	blt.n	8004c02 <_printf_float+0x366>
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	07da      	lsls	r2, r3, #31
 8004bda:	d412      	bmi.n	8004c02 <_printf_float+0x366>
 8004bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004be0:	eba3 020a 	sub.w	r2, r3, sl
 8004be4:	eba3 0a01 	sub.w	sl, r3, r1
 8004be8:	4592      	cmp	sl, r2
 8004bea:	bfa8      	it	ge
 8004bec:	4692      	movge	sl, r2
 8004bee:	f1ba 0f00 	cmp.w	sl, #0
 8004bf2:	dc0e      	bgt.n	8004c12 <_printf_float+0x376>
 8004bf4:	f04f 0800 	mov.w	r8, #0
 8004bf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004bfc:	f104 091a 	add.w	r9, r4, #26
 8004c00:	e019      	b.n	8004c36 <_printf_float+0x39a>
 8004c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c06:	4631      	mov	r1, r6
 8004c08:	4628      	mov	r0, r5
 8004c0a:	47b8      	blx	r7
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d1e5      	bne.n	8004bdc <_printf_float+0x340>
 8004c10:	e6a1      	b.n	8004956 <_printf_float+0xba>
 8004c12:	4653      	mov	r3, sl
 8004c14:	4642      	mov	r2, r8
 8004c16:	4631      	mov	r1, r6
 8004c18:	4628      	mov	r0, r5
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d1e9      	bne.n	8004bf4 <_printf_float+0x358>
 8004c20:	e699      	b.n	8004956 <_printf_float+0xba>
 8004c22:	2301      	movs	r3, #1
 8004c24:	464a      	mov	r2, r9
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	f43f ae92 	beq.w	8004956 <_printf_float+0xba>
 8004c32:	f108 0801 	add.w	r8, r8, #1
 8004c36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	eba3 030a 	sub.w	r3, r3, sl
 8004c40:	4543      	cmp	r3, r8
 8004c42:	dcee      	bgt.n	8004c22 <_printf_float+0x386>
 8004c44:	e74a      	b.n	8004adc <_printf_float+0x240>
 8004c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c48:	2a01      	cmp	r2, #1
 8004c4a:	dc01      	bgt.n	8004c50 <_printf_float+0x3b4>
 8004c4c:	07db      	lsls	r3, r3, #31
 8004c4e:	d53a      	bpl.n	8004cc6 <_printf_float+0x42a>
 8004c50:	2301      	movs	r3, #1
 8004c52:	4642      	mov	r2, r8
 8004c54:	4631      	mov	r1, r6
 8004c56:	4628      	mov	r0, r5
 8004c58:	47b8      	blx	r7
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	f43f ae7b 	beq.w	8004956 <_printf_float+0xba>
 8004c60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f108 0801 	add.w	r8, r8, #1
 8004c70:	f43f ae71 	beq.w	8004956 <_printf_float+0xba>
 8004c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c76:	2200      	movs	r2, #0
 8004c78:	f103 3aff 	add.w	sl, r3, #4294967295
 8004c7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c80:	2300      	movs	r3, #0
 8004c82:	f7fb feed 	bl	8000a60 <__aeabi_dcmpeq>
 8004c86:	b9c8      	cbnz	r0, 8004cbc <_printf_float+0x420>
 8004c88:	4653      	mov	r3, sl
 8004c8a:	4642      	mov	r2, r8
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4628      	mov	r0, r5
 8004c90:	47b8      	blx	r7
 8004c92:	3001      	adds	r0, #1
 8004c94:	d10e      	bne.n	8004cb4 <_printf_float+0x418>
 8004c96:	e65e      	b.n	8004956 <_printf_float+0xba>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f ae57 	beq.w	8004956 <_printf_float+0xba>
 8004ca8:	f108 0801 	add.w	r8, r8, #1
 8004cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	4543      	cmp	r3, r8
 8004cb2:	dcf1      	bgt.n	8004c98 <_printf_float+0x3fc>
 8004cb4:	464b      	mov	r3, r9
 8004cb6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cba:	e6de      	b.n	8004a7a <_printf_float+0x1de>
 8004cbc:	f04f 0800 	mov.w	r8, #0
 8004cc0:	f104 0a1a 	add.w	sl, r4, #26
 8004cc4:	e7f2      	b.n	8004cac <_printf_float+0x410>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e7df      	b.n	8004c8a <_printf_float+0x3ee>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	464a      	mov	r2, r9
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b8      	blx	r7
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f43f ae3e 	beq.w	8004956 <_printf_float+0xba>
 8004cda:	f108 0801 	add.w	r8, r8, #1
 8004cde:	68e3      	ldr	r3, [r4, #12]
 8004ce0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	4543      	cmp	r3, r8
 8004ce6:	dcf0      	bgt.n	8004cca <_printf_float+0x42e>
 8004ce8:	e6fc      	b.n	8004ae4 <_printf_float+0x248>
 8004cea:	f04f 0800 	mov.w	r8, #0
 8004cee:	f104 0919 	add.w	r9, r4, #25
 8004cf2:	e7f4      	b.n	8004cde <_printf_float+0x442>
 8004cf4:	2900      	cmp	r1, #0
 8004cf6:	f43f ae8b 	beq.w	8004a10 <_printf_float+0x174>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004d00:	ab09      	add	r3, sp, #36	; 0x24
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	ec49 8b10 	vmov	d0, r8, r9
 8004d08:	6022      	str	r2, [r4, #0]
 8004d0a:	f8cd a004 	str.w	sl, [sp, #4]
 8004d0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d12:	4628      	mov	r0, r5
 8004d14:	f7ff fd2e 	bl	8004774 <__cvt>
 8004d18:	4680      	mov	r8, r0
 8004d1a:	e648      	b.n	80049ae <_printf_float+0x112>

08004d1c <_printf_common>:
 8004d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d20:	4691      	mov	r9, r2
 8004d22:	461f      	mov	r7, r3
 8004d24:	688a      	ldr	r2, [r1, #8]
 8004d26:	690b      	ldr	r3, [r1, #16]
 8004d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	bfb8      	it	lt
 8004d30:	4613      	movlt	r3, r2
 8004d32:	f8c9 3000 	str.w	r3, [r9]
 8004d36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	b112      	cbz	r2, 8004d46 <_printf_common+0x2a>
 8004d40:	3301      	adds	r3, #1
 8004d42:	f8c9 3000 	str.w	r3, [r9]
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	0699      	lsls	r1, r3, #26
 8004d4a:	bf42      	ittt	mi
 8004d4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d50:	3302      	addmi	r3, #2
 8004d52:	f8c9 3000 	strmi.w	r3, [r9]
 8004d56:	6825      	ldr	r5, [r4, #0]
 8004d58:	f015 0506 	ands.w	r5, r5, #6
 8004d5c:	d107      	bne.n	8004d6e <_printf_common+0x52>
 8004d5e:	f104 0a19 	add.w	sl, r4, #25
 8004d62:	68e3      	ldr	r3, [r4, #12]
 8004d64:	f8d9 2000 	ldr.w	r2, [r9]
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	42ab      	cmp	r3, r5
 8004d6c:	dc28      	bgt.n	8004dc0 <_printf_common+0xa4>
 8004d6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d72:	6822      	ldr	r2, [r4, #0]
 8004d74:	3300      	adds	r3, #0
 8004d76:	bf18      	it	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	0692      	lsls	r2, r2, #26
 8004d7c:	d42d      	bmi.n	8004dda <_printf_common+0xbe>
 8004d7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d82:	4639      	mov	r1, r7
 8004d84:	4630      	mov	r0, r6
 8004d86:	47c0      	blx	r8
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d020      	beq.n	8004dce <_printf_common+0xb2>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	68e5      	ldr	r5, [r4, #12]
 8004d90:	f8d9 2000 	ldr.w	r2, [r9]
 8004d94:	f003 0306 	and.w	r3, r3, #6
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	bf08      	it	eq
 8004d9c:	1aad      	subeq	r5, r5, r2
 8004d9e:	68a3      	ldr	r3, [r4, #8]
 8004da0:	6922      	ldr	r2, [r4, #16]
 8004da2:	bf0c      	ite	eq
 8004da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da8:	2500      	movne	r5, #0
 8004daa:	4293      	cmp	r3, r2
 8004dac:	bfc4      	itt	gt
 8004dae:	1a9b      	subgt	r3, r3, r2
 8004db0:	18ed      	addgt	r5, r5, r3
 8004db2:	f04f 0900 	mov.w	r9, #0
 8004db6:	341a      	adds	r4, #26
 8004db8:	454d      	cmp	r5, r9
 8004dba:	d11a      	bne.n	8004df2 <_printf_common+0xd6>
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	e008      	b.n	8004dd2 <_printf_common+0xb6>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	4652      	mov	r2, sl
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	47c0      	blx	r8
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d103      	bne.n	8004dd6 <_printf_common+0xba>
 8004dce:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd6:	3501      	adds	r5, #1
 8004dd8:	e7c3      	b.n	8004d62 <_printf_common+0x46>
 8004dda:	18e1      	adds	r1, r4, r3
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	2030      	movs	r0, #48	; 0x30
 8004de0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004de4:	4422      	add	r2, r4
 8004de6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dee:	3302      	adds	r3, #2
 8004df0:	e7c5      	b.n	8004d7e <_printf_common+0x62>
 8004df2:	2301      	movs	r3, #1
 8004df4:	4622      	mov	r2, r4
 8004df6:	4639      	mov	r1, r7
 8004df8:	4630      	mov	r0, r6
 8004dfa:	47c0      	blx	r8
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d0e6      	beq.n	8004dce <_printf_common+0xb2>
 8004e00:	f109 0901 	add.w	r9, r9, #1
 8004e04:	e7d8      	b.n	8004db8 <_printf_common+0x9c>

08004e06 <quorem>:
 8004e06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	6903      	ldr	r3, [r0, #16]
 8004e0c:	690c      	ldr	r4, [r1, #16]
 8004e0e:	42a3      	cmp	r3, r4
 8004e10:	4680      	mov	r8, r0
 8004e12:	f2c0 8082 	blt.w	8004f1a <quorem+0x114>
 8004e16:	3c01      	subs	r4, #1
 8004e18:	f101 0714 	add.w	r7, r1, #20
 8004e1c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004e20:	f100 0614 	add.w	r6, r0, #20
 8004e24:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004e28:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004e2c:	eb06 030c 	add.w	r3, r6, ip
 8004e30:	3501      	adds	r5, #1
 8004e32:	eb07 090c 	add.w	r9, r7, ip
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	fbb0 f5f5 	udiv	r5, r0, r5
 8004e3c:	b395      	cbz	r5, 8004ea4 <quorem+0x9e>
 8004e3e:	f04f 0a00 	mov.w	sl, #0
 8004e42:	4638      	mov	r0, r7
 8004e44:	46b6      	mov	lr, r6
 8004e46:	46d3      	mov	fp, sl
 8004e48:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e4c:	b293      	uxth	r3, r2
 8004e4e:	fb05 a303 	mla	r3, r5, r3, sl
 8004e52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	ebab 0303 	sub.w	r3, fp, r3
 8004e5c:	0c12      	lsrs	r2, r2, #16
 8004e5e:	f8de b000 	ldr.w	fp, [lr]
 8004e62:	fb05 a202 	mla	r2, r5, r2, sl
 8004e66:	fa13 f38b 	uxtah	r3, r3, fp
 8004e6a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004e6e:	fa1f fb82 	uxth.w	fp, r2
 8004e72:	f8de 2000 	ldr.w	r2, [lr]
 8004e76:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004e7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e84:	4581      	cmp	r9, r0
 8004e86:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004e8a:	f84e 3b04 	str.w	r3, [lr], #4
 8004e8e:	d2db      	bcs.n	8004e48 <quorem+0x42>
 8004e90:	f856 300c 	ldr.w	r3, [r6, ip]
 8004e94:	b933      	cbnz	r3, 8004ea4 <quorem+0x9e>
 8004e96:	9b01      	ldr	r3, [sp, #4]
 8004e98:	3b04      	subs	r3, #4
 8004e9a:	429e      	cmp	r6, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	d330      	bcc.n	8004f02 <quorem+0xfc>
 8004ea0:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	f001 f829 	bl	8005efc <__mcmp>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	db25      	blt.n	8004efa <quorem+0xf4>
 8004eae:	3501      	adds	r5, #1
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f04f 0c00 	mov.w	ip, #0
 8004eb6:	f857 2b04 	ldr.w	r2, [r7], #4
 8004eba:	f8d0 e000 	ldr.w	lr, [r0]
 8004ebe:	b293      	uxth	r3, r2
 8004ec0:	ebac 0303 	sub.w	r3, ip, r3
 8004ec4:	0c12      	lsrs	r2, r2, #16
 8004ec6:	fa13 f38e 	uxtah	r3, r3, lr
 8004eca:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ece:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ed8:	45b9      	cmp	r9, r7
 8004eda:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ede:	f840 3b04 	str.w	r3, [r0], #4
 8004ee2:	d2e8      	bcs.n	8004eb6 <quorem+0xb0>
 8004ee4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004ee8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004eec:	b92a      	cbnz	r2, 8004efa <quorem+0xf4>
 8004eee:	3b04      	subs	r3, #4
 8004ef0:	429e      	cmp	r6, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	d30b      	bcc.n	8004f0e <quorem+0x108>
 8004ef6:	f8c8 4010 	str.w	r4, [r8, #16]
 8004efa:	4628      	mov	r0, r5
 8004efc:	b003      	add	sp, #12
 8004efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	3b04      	subs	r3, #4
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	d1ca      	bne.n	8004ea0 <quorem+0x9a>
 8004f0a:	3c01      	subs	r4, #1
 8004f0c:	e7c5      	b.n	8004e9a <quorem+0x94>
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	3b04      	subs	r3, #4
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	d1ef      	bne.n	8004ef6 <quorem+0xf0>
 8004f16:	3c01      	subs	r4, #1
 8004f18:	e7ea      	b.n	8004ef0 <quorem+0xea>
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	e7ee      	b.n	8004efc <quorem+0xf6>
	...

08004f20 <_dtoa_r>:
 8004f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f24:	ec57 6b10 	vmov	r6, r7, d0
 8004f28:	b097      	sub	sp, #92	; 0x5c
 8004f2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f2c:	9106      	str	r1, [sp, #24]
 8004f2e:	4604      	mov	r4, r0
 8004f30:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f32:	9312      	str	r3, [sp, #72]	; 0x48
 8004f34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f38:	e9cd 6700 	strd	r6, r7, [sp]
 8004f3c:	b93d      	cbnz	r5, 8004f4e <_dtoa_r+0x2e>
 8004f3e:	2010      	movs	r0, #16
 8004f40:	f000 fdb4 	bl	8005aac <malloc>
 8004f44:	6260      	str	r0, [r4, #36]	; 0x24
 8004f46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f4a:	6005      	str	r5, [r0, #0]
 8004f4c:	60c5      	str	r5, [r0, #12]
 8004f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f50:	6819      	ldr	r1, [r3, #0]
 8004f52:	b151      	cbz	r1, 8004f6a <_dtoa_r+0x4a>
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	604a      	str	r2, [r1, #4]
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4093      	lsls	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 fdeb 	bl	8005b3a <_Bfree>
 8004f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	1e3b      	subs	r3, r7, #0
 8004f6c:	bfbb      	ittet	lt
 8004f6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f72:	9301      	strlt	r3, [sp, #4]
 8004f74:	2300      	movge	r3, #0
 8004f76:	2201      	movlt	r2, #1
 8004f78:	bfac      	ite	ge
 8004f7a:	f8c8 3000 	strge.w	r3, [r8]
 8004f7e:	f8c8 2000 	strlt.w	r2, [r8]
 8004f82:	4baf      	ldr	r3, [pc, #700]	; (8005240 <_dtoa_r+0x320>)
 8004f84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004f88:	ea33 0308 	bics.w	r3, r3, r8
 8004f8c:	d114      	bne.n	8004fb8 <_dtoa_r+0x98>
 8004f8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f90:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	9b00      	ldr	r3, [sp, #0]
 8004f98:	b923      	cbnz	r3, 8004fa4 <_dtoa_r+0x84>
 8004f9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	f000 8542 	beq.w	8005a28 <_dtoa_r+0xb08>
 8004fa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fa6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005254 <_dtoa_r+0x334>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 8544 	beq.w	8005a38 <_dtoa_r+0xb18>
 8004fb0:	f10b 0303 	add.w	r3, fp, #3
 8004fb4:	f000 bd3e 	b.w	8005a34 <_dtoa_r+0xb14>
 8004fb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	f7fb fd4c 	bl	8000a60 <__aeabi_dcmpeq>
 8004fc8:	4681      	mov	r9, r0
 8004fca:	b168      	cbz	r0, 8004fe8 <_dtoa_r+0xc8>
 8004fcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fce:	2301      	movs	r3, #1
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8524 	beq.w	8005a22 <_dtoa_r+0xb02>
 8004fda:	4b9a      	ldr	r3, [pc, #616]	; (8005244 <_dtoa_r+0x324>)
 8004fdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fde:	f103 3bff 	add.w	fp, r3, #4294967295
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	f000 bd28 	b.w	8005a38 <_dtoa_r+0xb18>
 8004fe8:	aa14      	add	r2, sp, #80	; 0x50
 8004fea:	a915      	add	r1, sp, #84	; 0x54
 8004fec:	ec47 6b10 	vmov	d0, r6, r7
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f000 fffa 	bl	8005fea <__d2b>
 8004ff6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004ffa:	9004      	str	r0, [sp, #16]
 8004ffc:	2d00      	cmp	r5, #0
 8004ffe:	d07c      	beq.n	80050fa <_dtoa_r+0x1da>
 8005000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005004:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005008:	46b2      	mov	sl, r6
 800500a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800500e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005012:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005016:	2200      	movs	r2, #0
 8005018:	4b8b      	ldr	r3, [pc, #556]	; (8005248 <_dtoa_r+0x328>)
 800501a:	4650      	mov	r0, sl
 800501c:	4659      	mov	r1, fp
 800501e:	f7fb f8ff 	bl	8000220 <__aeabi_dsub>
 8005022:	a381      	add	r3, pc, #516	; (adr r3, 8005228 <_dtoa_r+0x308>)
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f7fb fab2 	bl	8000590 <__aeabi_dmul>
 800502c:	a380      	add	r3, pc, #512	; (adr r3, 8005230 <_dtoa_r+0x310>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f7fb f8f7 	bl	8000224 <__adddf3>
 8005036:	4606      	mov	r6, r0
 8005038:	4628      	mov	r0, r5
 800503a:	460f      	mov	r7, r1
 800503c:	f7fb fa3e 	bl	80004bc <__aeabi_i2d>
 8005040:	a37d      	add	r3, pc, #500	; (adr r3, 8005238 <_dtoa_r+0x318>)
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f7fb faa3 	bl	8000590 <__aeabi_dmul>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4630      	mov	r0, r6
 8005050:	4639      	mov	r1, r7
 8005052:	f7fb f8e7 	bl	8000224 <__adddf3>
 8005056:	4606      	mov	r6, r0
 8005058:	460f      	mov	r7, r1
 800505a:	f7fb fd49 	bl	8000af0 <__aeabi_d2iz>
 800505e:	2200      	movs	r2, #0
 8005060:	4682      	mov	sl, r0
 8005062:	2300      	movs	r3, #0
 8005064:	4630      	mov	r0, r6
 8005066:	4639      	mov	r1, r7
 8005068:	f7fb fd04 	bl	8000a74 <__aeabi_dcmplt>
 800506c:	b148      	cbz	r0, 8005082 <_dtoa_r+0x162>
 800506e:	4650      	mov	r0, sl
 8005070:	f7fb fa24 	bl	80004bc <__aeabi_i2d>
 8005074:	4632      	mov	r2, r6
 8005076:	463b      	mov	r3, r7
 8005078:	f7fb fcf2 	bl	8000a60 <__aeabi_dcmpeq>
 800507c:	b908      	cbnz	r0, 8005082 <_dtoa_r+0x162>
 800507e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005082:	f1ba 0f16 	cmp.w	sl, #22
 8005086:	d859      	bhi.n	800513c <_dtoa_r+0x21c>
 8005088:	4970      	ldr	r1, [pc, #448]	; (800524c <_dtoa_r+0x32c>)
 800508a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800508e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005092:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005096:	f7fb fd0b 	bl	8000ab0 <__aeabi_dcmpgt>
 800509a:	2800      	cmp	r0, #0
 800509c:	d050      	beq.n	8005140 <_dtoa_r+0x220>
 800509e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050a2:	2300      	movs	r3, #0
 80050a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80050a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050a8:	1b5d      	subs	r5, r3, r5
 80050aa:	f1b5 0801 	subs.w	r8, r5, #1
 80050ae:	bf49      	itett	mi
 80050b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80050b4:	2300      	movpl	r3, #0
 80050b6:	9305      	strmi	r3, [sp, #20]
 80050b8:	f04f 0800 	movmi.w	r8, #0
 80050bc:	bf58      	it	pl
 80050be:	9305      	strpl	r3, [sp, #20]
 80050c0:	f1ba 0f00 	cmp.w	sl, #0
 80050c4:	db3e      	blt.n	8005144 <_dtoa_r+0x224>
 80050c6:	2300      	movs	r3, #0
 80050c8:	44d0      	add	r8, sl
 80050ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80050ce:	9307      	str	r3, [sp, #28]
 80050d0:	9b06      	ldr	r3, [sp, #24]
 80050d2:	2b09      	cmp	r3, #9
 80050d4:	f200 8090 	bhi.w	80051f8 <_dtoa_r+0x2d8>
 80050d8:	2b05      	cmp	r3, #5
 80050da:	bfc4      	itt	gt
 80050dc:	3b04      	subgt	r3, #4
 80050de:	9306      	strgt	r3, [sp, #24]
 80050e0:	9b06      	ldr	r3, [sp, #24]
 80050e2:	f1a3 0302 	sub.w	r3, r3, #2
 80050e6:	bfcc      	ite	gt
 80050e8:	2500      	movgt	r5, #0
 80050ea:	2501      	movle	r5, #1
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	f200 808f 	bhi.w	8005210 <_dtoa_r+0x2f0>
 80050f2:	e8df f003 	tbb	[pc, r3]
 80050f6:	7f7d      	.short	0x7f7d
 80050f8:	7131      	.short	0x7131
 80050fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80050fe:	441d      	add	r5, r3
 8005100:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005104:	2820      	cmp	r0, #32
 8005106:	dd13      	ble.n	8005130 <_dtoa_r+0x210>
 8005108:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800510c:	9b00      	ldr	r3, [sp, #0]
 800510e:	fa08 f800 	lsl.w	r8, r8, r0
 8005112:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005116:	fa23 f000 	lsr.w	r0, r3, r0
 800511a:	ea48 0000 	orr.w	r0, r8, r0
 800511e:	f7fb f9bd 	bl	800049c <__aeabi_ui2d>
 8005122:	2301      	movs	r3, #1
 8005124:	4682      	mov	sl, r0
 8005126:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800512a:	3d01      	subs	r5, #1
 800512c:	9313      	str	r3, [sp, #76]	; 0x4c
 800512e:	e772      	b.n	8005016 <_dtoa_r+0xf6>
 8005130:	9b00      	ldr	r3, [sp, #0]
 8005132:	f1c0 0020 	rsb	r0, r0, #32
 8005136:	fa03 f000 	lsl.w	r0, r3, r0
 800513a:	e7f0      	b.n	800511e <_dtoa_r+0x1fe>
 800513c:	2301      	movs	r3, #1
 800513e:	e7b1      	b.n	80050a4 <_dtoa_r+0x184>
 8005140:	900f      	str	r0, [sp, #60]	; 0x3c
 8005142:	e7b0      	b.n	80050a6 <_dtoa_r+0x186>
 8005144:	9b05      	ldr	r3, [sp, #20]
 8005146:	eba3 030a 	sub.w	r3, r3, sl
 800514a:	9305      	str	r3, [sp, #20]
 800514c:	f1ca 0300 	rsb	r3, sl, #0
 8005150:	9307      	str	r3, [sp, #28]
 8005152:	2300      	movs	r3, #0
 8005154:	930e      	str	r3, [sp, #56]	; 0x38
 8005156:	e7bb      	b.n	80050d0 <_dtoa_r+0x1b0>
 8005158:	2301      	movs	r3, #1
 800515a:	930a      	str	r3, [sp, #40]	; 0x28
 800515c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	dd59      	ble.n	8005216 <_dtoa_r+0x2f6>
 8005162:	9302      	str	r3, [sp, #8]
 8005164:	4699      	mov	r9, r3
 8005166:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005168:	2200      	movs	r2, #0
 800516a:	6072      	str	r2, [r6, #4]
 800516c:	2204      	movs	r2, #4
 800516e:	f102 0014 	add.w	r0, r2, #20
 8005172:	4298      	cmp	r0, r3
 8005174:	6871      	ldr	r1, [r6, #4]
 8005176:	d953      	bls.n	8005220 <_dtoa_r+0x300>
 8005178:	4620      	mov	r0, r4
 800517a:	f000 fcaa 	bl	8005ad2 <_Balloc>
 800517e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005180:	6030      	str	r0, [r6, #0]
 8005182:	f1b9 0f0e 	cmp.w	r9, #14
 8005186:	f8d3 b000 	ldr.w	fp, [r3]
 800518a:	f200 80e6 	bhi.w	800535a <_dtoa_r+0x43a>
 800518e:	2d00      	cmp	r5, #0
 8005190:	f000 80e3 	beq.w	800535a <_dtoa_r+0x43a>
 8005194:	ed9d 7b00 	vldr	d7, [sp]
 8005198:	f1ba 0f00 	cmp.w	sl, #0
 800519c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80051a0:	dd74      	ble.n	800528c <_dtoa_r+0x36c>
 80051a2:	4a2a      	ldr	r2, [pc, #168]	; (800524c <_dtoa_r+0x32c>)
 80051a4:	f00a 030f 	and.w	r3, sl, #15
 80051a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80051ac:	ed93 7b00 	vldr	d7, [r3]
 80051b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80051b4:	06f0      	lsls	r0, r6, #27
 80051b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80051ba:	d565      	bpl.n	8005288 <_dtoa_r+0x368>
 80051bc:	4b24      	ldr	r3, [pc, #144]	; (8005250 <_dtoa_r+0x330>)
 80051be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051c6:	f7fb fb0d 	bl	80007e4 <__aeabi_ddiv>
 80051ca:	e9cd 0100 	strd	r0, r1, [sp]
 80051ce:	f006 060f 	and.w	r6, r6, #15
 80051d2:	2503      	movs	r5, #3
 80051d4:	4f1e      	ldr	r7, [pc, #120]	; (8005250 <_dtoa_r+0x330>)
 80051d6:	e04c      	b.n	8005272 <_dtoa_r+0x352>
 80051d8:	2301      	movs	r3, #1
 80051da:	930a      	str	r3, [sp, #40]	; 0x28
 80051dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051de:	4453      	add	r3, sl
 80051e0:	f103 0901 	add.w	r9, r3, #1
 80051e4:	9302      	str	r3, [sp, #8]
 80051e6:	464b      	mov	r3, r9
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	bfb8      	it	lt
 80051ec:	2301      	movlt	r3, #1
 80051ee:	e7ba      	b.n	8005166 <_dtoa_r+0x246>
 80051f0:	2300      	movs	r3, #0
 80051f2:	e7b2      	b.n	800515a <_dtoa_r+0x23a>
 80051f4:	2300      	movs	r3, #0
 80051f6:	e7f0      	b.n	80051da <_dtoa_r+0x2ba>
 80051f8:	2501      	movs	r5, #1
 80051fa:	2300      	movs	r3, #0
 80051fc:	9306      	str	r3, [sp, #24]
 80051fe:	950a      	str	r5, [sp, #40]	; 0x28
 8005200:	f04f 33ff 	mov.w	r3, #4294967295
 8005204:	9302      	str	r3, [sp, #8]
 8005206:	4699      	mov	r9, r3
 8005208:	2200      	movs	r2, #0
 800520a:	2312      	movs	r3, #18
 800520c:	920b      	str	r2, [sp, #44]	; 0x2c
 800520e:	e7aa      	b.n	8005166 <_dtoa_r+0x246>
 8005210:	2301      	movs	r3, #1
 8005212:	930a      	str	r3, [sp, #40]	; 0x28
 8005214:	e7f4      	b.n	8005200 <_dtoa_r+0x2e0>
 8005216:	2301      	movs	r3, #1
 8005218:	9302      	str	r3, [sp, #8]
 800521a:	4699      	mov	r9, r3
 800521c:	461a      	mov	r2, r3
 800521e:	e7f5      	b.n	800520c <_dtoa_r+0x2ec>
 8005220:	3101      	adds	r1, #1
 8005222:	6071      	str	r1, [r6, #4]
 8005224:	0052      	lsls	r2, r2, #1
 8005226:	e7a2      	b.n	800516e <_dtoa_r+0x24e>
 8005228:	636f4361 	.word	0x636f4361
 800522c:	3fd287a7 	.word	0x3fd287a7
 8005230:	8b60c8b3 	.word	0x8b60c8b3
 8005234:	3fc68a28 	.word	0x3fc68a28
 8005238:	509f79fb 	.word	0x509f79fb
 800523c:	3fd34413 	.word	0x3fd34413
 8005240:	7ff00000 	.word	0x7ff00000
 8005244:	08006869 	.word	0x08006869
 8005248:	3ff80000 	.word	0x3ff80000
 800524c:	080068a0 	.word	0x080068a0
 8005250:	08006878 	.word	0x08006878
 8005254:	08006873 	.word	0x08006873
 8005258:	07f1      	lsls	r1, r6, #31
 800525a:	d508      	bpl.n	800526e <_dtoa_r+0x34e>
 800525c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005264:	f7fb f994 	bl	8000590 <__aeabi_dmul>
 8005268:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800526c:	3501      	adds	r5, #1
 800526e:	1076      	asrs	r6, r6, #1
 8005270:	3708      	adds	r7, #8
 8005272:	2e00      	cmp	r6, #0
 8005274:	d1f0      	bne.n	8005258 <_dtoa_r+0x338>
 8005276:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800527a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800527e:	f7fb fab1 	bl	80007e4 <__aeabi_ddiv>
 8005282:	e9cd 0100 	strd	r0, r1, [sp]
 8005286:	e01a      	b.n	80052be <_dtoa_r+0x39e>
 8005288:	2502      	movs	r5, #2
 800528a:	e7a3      	b.n	80051d4 <_dtoa_r+0x2b4>
 800528c:	f000 80a0 	beq.w	80053d0 <_dtoa_r+0x4b0>
 8005290:	f1ca 0600 	rsb	r6, sl, #0
 8005294:	4b9f      	ldr	r3, [pc, #636]	; (8005514 <_dtoa_r+0x5f4>)
 8005296:	4fa0      	ldr	r7, [pc, #640]	; (8005518 <_dtoa_r+0x5f8>)
 8005298:	f006 020f 	and.w	r2, r6, #15
 800529c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052a8:	f7fb f972 	bl	8000590 <__aeabi_dmul>
 80052ac:	e9cd 0100 	strd	r0, r1, [sp]
 80052b0:	1136      	asrs	r6, r6, #4
 80052b2:	2300      	movs	r3, #0
 80052b4:	2502      	movs	r5, #2
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	d17f      	bne.n	80053ba <_dtoa_r+0x49a>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e1      	bne.n	8005282 <_dtoa_r+0x362>
 80052be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 8087 	beq.w	80053d4 <_dtoa_r+0x4b4>
 80052c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80052ca:	2200      	movs	r2, #0
 80052cc:	4b93      	ldr	r3, [pc, #588]	; (800551c <_dtoa_r+0x5fc>)
 80052ce:	4630      	mov	r0, r6
 80052d0:	4639      	mov	r1, r7
 80052d2:	f7fb fbcf 	bl	8000a74 <__aeabi_dcmplt>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d07c      	beq.n	80053d4 <_dtoa_r+0x4b4>
 80052da:	f1b9 0f00 	cmp.w	r9, #0
 80052de:	d079      	beq.n	80053d4 <_dtoa_r+0x4b4>
 80052e0:	9b02      	ldr	r3, [sp, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	dd35      	ble.n	8005352 <_dtoa_r+0x432>
 80052e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80052ea:	9308      	str	r3, [sp, #32]
 80052ec:	4639      	mov	r1, r7
 80052ee:	2200      	movs	r2, #0
 80052f0:	4b8b      	ldr	r3, [pc, #556]	; (8005520 <_dtoa_r+0x600>)
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7fb f94c 	bl	8000590 <__aeabi_dmul>
 80052f8:	e9cd 0100 	strd	r0, r1, [sp]
 80052fc:	9f02      	ldr	r7, [sp, #8]
 80052fe:	3501      	adds	r5, #1
 8005300:	4628      	mov	r0, r5
 8005302:	f7fb f8db 	bl	80004bc <__aeabi_i2d>
 8005306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800530a:	f7fb f941 	bl	8000590 <__aeabi_dmul>
 800530e:	2200      	movs	r2, #0
 8005310:	4b84      	ldr	r3, [pc, #528]	; (8005524 <_dtoa_r+0x604>)
 8005312:	f7fa ff87 	bl	8000224 <__adddf3>
 8005316:	4605      	mov	r5, r0
 8005318:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800531c:	2f00      	cmp	r7, #0
 800531e:	d15d      	bne.n	80053dc <_dtoa_r+0x4bc>
 8005320:	2200      	movs	r2, #0
 8005322:	4b81      	ldr	r3, [pc, #516]	; (8005528 <_dtoa_r+0x608>)
 8005324:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005328:	f7fa ff7a 	bl	8000220 <__aeabi_dsub>
 800532c:	462a      	mov	r2, r5
 800532e:	4633      	mov	r3, r6
 8005330:	e9cd 0100 	strd	r0, r1, [sp]
 8005334:	f7fb fbbc 	bl	8000ab0 <__aeabi_dcmpgt>
 8005338:	2800      	cmp	r0, #0
 800533a:	f040 8288 	bne.w	800584e <_dtoa_r+0x92e>
 800533e:	462a      	mov	r2, r5
 8005340:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005344:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005348:	f7fb fb94 	bl	8000a74 <__aeabi_dcmplt>
 800534c:	2800      	cmp	r0, #0
 800534e:	f040 827c 	bne.w	800584a <_dtoa_r+0x92a>
 8005352:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005356:	e9cd 2300 	strd	r2, r3, [sp]
 800535a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800535c:	2b00      	cmp	r3, #0
 800535e:	f2c0 8150 	blt.w	8005602 <_dtoa_r+0x6e2>
 8005362:	f1ba 0f0e 	cmp.w	sl, #14
 8005366:	f300 814c 	bgt.w	8005602 <_dtoa_r+0x6e2>
 800536a:	4b6a      	ldr	r3, [pc, #424]	; (8005514 <_dtoa_r+0x5f4>)
 800536c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005370:	ed93 7b00 	vldr	d7, [r3]
 8005374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005376:	2b00      	cmp	r3, #0
 8005378:	ed8d 7b02 	vstr	d7, [sp, #8]
 800537c:	f280 80d8 	bge.w	8005530 <_dtoa_r+0x610>
 8005380:	f1b9 0f00 	cmp.w	r9, #0
 8005384:	f300 80d4 	bgt.w	8005530 <_dtoa_r+0x610>
 8005388:	f040 825e 	bne.w	8005848 <_dtoa_r+0x928>
 800538c:	2200      	movs	r2, #0
 800538e:	4b66      	ldr	r3, [pc, #408]	; (8005528 <_dtoa_r+0x608>)
 8005390:	ec51 0b17 	vmov	r0, r1, d7
 8005394:	f7fb f8fc 	bl	8000590 <__aeabi_dmul>
 8005398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800539c:	f7fb fb7e 	bl	8000a9c <__aeabi_dcmpge>
 80053a0:	464f      	mov	r7, r9
 80053a2:	464e      	mov	r6, r9
 80053a4:	2800      	cmp	r0, #0
 80053a6:	f040 8234 	bne.w	8005812 <_dtoa_r+0x8f2>
 80053aa:	2331      	movs	r3, #49	; 0x31
 80053ac:	f10b 0501 	add.w	r5, fp, #1
 80053b0:	f88b 3000 	strb.w	r3, [fp]
 80053b4:	f10a 0a01 	add.w	sl, sl, #1
 80053b8:	e22f      	b.n	800581a <_dtoa_r+0x8fa>
 80053ba:	07f2      	lsls	r2, r6, #31
 80053bc:	d505      	bpl.n	80053ca <_dtoa_r+0x4aa>
 80053be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053c2:	f7fb f8e5 	bl	8000590 <__aeabi_dmul>
 80053c6:	3501      	adds	r5, #1
 80053c8:	2301      	movs	r3, #1
 80053ca:	1076      	asrs	r6, r6, #1
 80053cc:	3708      	adds	r7, #8
 80053ce:	e772      	b.n	80052b6 <_dtoa_r+0x396>
 80053d0:	2502      	movs	r5, #2
 80053d2:	e774      	b.n	80052be <_dtoa_r+0x39e>
 80053d4:	f8cd a020 	str.w	sl, [sp, #32]
 80053d8:	464f      	mov	r7, r9
 80053da:	e791      	b.n	8005300 <_dtoa_r+0x3e0>
 80053dc:	4b4d      	ldr	r3, [pc, #308]	; (8005514 <_dtoa_r+0x5f4>)
 80053de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80053e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d047      	beq.n	800547c <_dtoa_r+0x55c>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	2000      	movs	r0, #0
 80053f2:	494e      	ldr	r1, [pc, #312]	; (800552c <_dtoa_r+0x60c>)
 80053f4:	f7fb f9f6 	bl	80007e4 <__aeabi_ddiv>
 80053f8:	462a      	mov	r2, r5
 80053fa:	4633      	mov	r3, r6
 80053fc:	f7fa ff10 	bl	8000220 <__aeabi_dsub>
 8005400:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005404:	465d      	mov	r5, fp
 8005406:	e9dd 0100 	ldrd	r0, r1, [sp]
 800540a:	f7fb fb71 	bl	8000af0 <__aeabi_d2iz>
 800540e:	4606      	mov	r6, r0
 8005410:	f7fb f854 	bl	80004bc <__aeabi_i2d>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	e9dd 0100 	ldrd	r0, r1, [sp]
 800541c:	f7fa ff00 	bl	8000220 <__aeabi_dsub>
 8005420:	3630      	adds	r6, #48	; 0x30
 8005422:	f805 6b01 	strb.w	r6, [r5], #1
 8005426:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800542a:	e9cd 0100 	strd	r0, r1, [sp]
 800542e:	f7fb fb21 	bl	8000a74 <__aeabi_dcmplt>
 8005432:	2800      	cmp	r0, #0
 8005434:	d163      	bne.n	80054fe <_dtoa_r+0x5de>
 8005436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800543a:	2000      	movs	r0, #0
 800543c:	4937      	ldr	r1, [pc, #220]	; (800551c <_dtoa_r+0x5fc>)
 800543e:	f7fa feef 	bl	8000220 <__aeabi_dsub>
 8005442:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005446:	f7fb fb15 	bl	8000a74 <__aeabi_dcmplt>
 800544a:	2800      	cmp	r0, #0
 800544c:	f040 80b7 	bne.w	80055be <_dtoa_r+0x69e>
 8005450:	eba5 030b 	sub.w	r3, r5, fp
 8005454:	429f      	cmp	r7, r3
 8005456:	f77f af7c 	ble.w	8005352 <_dtoa_r+0x432>
 800545a:	2200      	movs	r2, #0
 800545c:	4b30      	ldr	r3, [pc, #192]	; (8005520 <_dtoa_r+0x600>)
 800545e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005462:	f7fb f895 	bl	8000590 <__aeabi_dmul>
 8005466:	2200      	movs	r2, #0
 8005468:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800546c:	4b2c      	ldr	r3, [pc, #176]	; (8005520 <_dtoa_r+0x600>)
 800546e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005472:	f7fb f88d 	bl	8000590 <__aeabi_dmul>
 8005476:	e9cd 0100 	strd	r0, r1, [sp]
 800547a:	e7c4      	b.n	8005406 <_dtoa_r+0x4e6>
 800547c:	462a      	mov	r2, r5
 800547e:	4633      	mov	r3, r6
 8005480:	f7fb f886 	bl	8000590 <__aeabi_dmul>
 8005484:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005488:	eb0b 0507 	add.w	r5, fp, r7
 800548c:	465e      	mov	r6, fp
 800548e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005492:	f7fb fb2d 	bl	8000af0 <__aeabi_d2iz>
 8005496:	4607      	mov	r7, r0
 8005498:	f7fb f810 	bl	80004bc <__aeabi_i2d>
 800549c:	3730      	adds	r7, #48	; 0x30
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054a6:	f7fa febb 	bl	8000220 <__aeabi_dsub>
 80054aa:	f806 7b01 	strb.w	r7, [r6], #1
 80054ae:	42ae      	cmp	r6, r5
 80054b0:	e9cd 0100 	strd	r0, r1, [sp]
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	d126      	bne.n	8005508 <_dtoa_r+0x5e8>
 80054ba:	4b1c      	ldr	r3, [pc, #112]	; (800552c <_dtoa_r+0x60c>)
 80054bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054c0:	f7fa feb0 	bl	8000224 <__adddf3>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054cc:	f7fb faf0 	bl	8000ab0 <__aeabi_dcmpgt>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d174      	bne.n	80055be <_dtoa_r+0x69e>
 80054d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80054d8:	2000      	movs	r0, #0
 80054da:	4914      	ldr	r1, [pc, #80]	; (800552c <_dtoa_r+0x60c>)
 80054dc:	f7fa fea0 	bl	8000220 <__aeabi_dsub>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054e8:	f7fb fac4 	bl	8000a74 <__aeabi_dcmplt>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	f43f af30 	beq.w	8005352 <_dtoa_r+0x432>
 80054f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054f6:	2b30      	cmp	r3, #48	; 0x30
 80054f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80054fc:	d002      	beq.n	8005504 <_dtoa_r+0x5e4>
 80054fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005502:	e04a      	b.n	800559a <_dtoa_r+0x67a>
 8005504:	4615      	mov	r5, r2
 8005506:	e7f4      	b.n	80054f2 <_dtoa_r+0x5d2>
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <_dtoa_r+0x600>)
 800550a:	f7fb f841 	bl	8000590 <__aeabi_dmul>
 800550e:	e9cd 0100 	strd	r0, r1, [sp]
 8005512:	e7bc      	b.n	800548e <_dtoa_r+0x56e>
 8005514:	080068a0 	.word	0x080068a0
 8005518:	08006878 	.word	0x08006878
 800551c:	3ff00000 	.word	0x3ff00000
 8005520:	40240000 	.word	0x40240000
 8005524:	401c0000 	.word	0x401c0000
 8005528:	40140000 	.word	0x40140000
 800552c:	3fe00000 	.word	0x3fe00000
 8005530:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005534:	465d      	mov	r5, fp
 8005536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800553a:	4630      	mov	r0, r6
 800553c:	4639      	mov	r1, r7
 800553e:	f7fb f951 	bl	80007e4 <__aeabi_ddiv>
 8005542:	f7fb fad5 	bl	8000af0 <__aeabi_d2iz>
 8005546:	4680      	mov	r8, r0
 8005548:	f7fa ffb8 	bl	80004bc <__aeabi_i2d>
 800554c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005550:	f7fb f81e 	bl	8000590 <__aeabi_dmul>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4630      	mov	r0, r6
 800555a:	4639      	mov	r1, r7
 800555c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005560:	f7fa fe5e 	bl	8000220 <__aeabi_dsub>
 8005564:	f805 6b01 	strb.w	r6, [r5], #1
 8005568:	eba5 060b 	sub.w	r6, r5, fp
 800556c:	45b1      	cmp	r9, r6
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	d139      	bne.n	80055e8 <_dtoa_r+0x6c8>
 8005574:	f7fa fe56 	bl	8000224 <__adddf3>
 8005578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800557c:	4606      	mov	r6, r0
 800557e:	460f      	mov	r7, r1
 8005580:	f7fb fa96 	bl	8000ab0 <__aeabi_dcmpgt>
 8005584:	b9c8      	cbnz	r0, 80055ba <_dtoa_r+0x69a>
 8005586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800558a:	4630      	mov	r0, r6
 800558c:	4639      	mov	r1, r7
 800558e:	f7fb fa67 	bl	8000a60 <__aeabi_dcmpeq>
 8005592:	b110      	cbz	r0, 800559a <_dtoa_r+0x67a>
 8005594:	f018 0f01 	tst.w	r8, #1
 8005598:	d10f      	bne.n	80055ba <_dtoa_r+0x69a>
 800559a:	9904      	ldr	r1, [sp, #16]
 800559c:	4620      	mov	r0, r4
 800559e:	f000 facc 	bl	8005b3a <_Bfree>
 80055a2:	2300      	movs	r3, #0
 80055a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055a6:	702b      	strb	r3, [r5, #0]
 80055a8:	f10a 0301 	add.w	r3, sl, #1
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8241 	beq.w	8005a38 <_dtoa_r+0xb18>
 80055b6:	601d      	str	r5, [r3, #0]
 80055b8:	e23e      	b.n	8005a38 <_dtoa_r+0xb18>
 80055ba:	f8cd a020 	str.w	sl, [sp, #32]
 80055be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80055c2:	2a39      	cmp	r2, #57	; 0x39
 80055c4:	f105 33ff 	add.w	r3, r5, #4294967295
 80055c8:	d108      	bne.n	80055dc <_dtoa_r+0x6bc>
 80055ca:	459b      	cmp	fp, r3
 80055cc:	d10a      	bne.n	80055e4 <_dtoa_r+0x6c4>
 80055ce:	9b08      	ldr	r3, [sp, #32]
 80055d0:	3301      	adds	r3, #1
 80055d2:	9308      	str	r3, [sp, #32]
 80055d4:	2330      	movs	r3, #48	; 0x30
 80055d6:	f88b 3000 	strb.w	r3, [fp]
 80055da:	465b      	mov	r3, fp
 80055dc:	781a      	ldrb	r2, [r3, #0]
 80055de:	3201      	adds	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	e78c      	b.n	80054fe <_dtoa_r+0x5de>
 80055e4:	461d      	mov	r5, r3
 80055e6:	e7ea      	b.n	80055be <_dtoa_r+0x69e>
 80055e8:	2200      	movs	r2, #0
 80055ea:	4b9b      	ldr	r3, [pc, #620]	; (8005858 <_dtoa_r+0x938>)
 80055ec:	f7fa ffd0 	bl	8000590 <__aeabi_dmul>
 80055f0:	2200      	movs	r2, #0
 80055f2:	2300      	movs	r3, #0
 80055f4:	4606      	mov	r6, r0
 80055f6:	460f      	mov	r7, r1
 80055f8:	f7fb fa32 	bl	8000a60 <__aeabi_dcmpeq>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d09a      	beq.n	8005536 <_dtoa_r+0x616>
 8005600:	e7cb      	b.n	800559a <_dtoa_r+0x67a>
 8005602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005604:	2a00      	cmp	r2, #0
 8005606:	f000 808b 	beq.w	8005720 <_dtoa_r+0x800>
 800560a:	9a06      	ldr	r2, [sp, #24]
 800560c:	2a01      	cmp	r2, #1
 800560e:	dc6e      	bgt.n	80056ee <_dtoa_r+0x7ce>
 8005610:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005612:	2a00      	cmp	r2, #0
 8005614:	d067      	beq.n	80056e6 <_dtoa_r+0x7c6>
 8005616:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800561a:	9f07      	ldr	r7, [sp, #28]
 800561c:	9d05      	ldr	r5, [sp, #20]
 800561e:	9a05      	ldr	r2, [sp, #20]
 8005620:	2101      	movs	r1, #1
 8005622:	441a      	add	r2, r3
 8005624:	4620      	mov	r0, r4
 8005626:	9205      	str	r2, [sp, #20]
 8005628:	4498      	add	r8, r3
 800562a:	f000 fb26 	bl	8005c7a <__i2b>
 800562e:	4606      	mov	r6, r0
 8005630:	2d00      	cmp	r5, #0
 8005632:	dd0c      	ble.n	800564e <_dtoa_r+0x72e>
 8005634:	f1b8 0f00 	cmp.w	r8, #0
 8005638:	dd09      	ble.n	800564e <_dtoa_r+0x72e>
 800563a:	4545      	cmp	r5, r8
 800563c:	9a05      	ldr	r2, [sp, #20]
 800563e:	462b      	mov	r3, r5
 8005640:	bfa8      	it	ge
 8005642:	4643      	movge	r3, r8
 8005644:	1ad2      	subs	r2, r2, r3
 8005646:	9205      	str	r2, [sp, #20]
 8005648:	1aed      	subs	r5, r5, r3
 800564a:	eba8 0803 	sub.w	r8, r8, r3
 800564e:	9b07      	ldr	r3, [sp, #28]
 8005650:	b1eb      	cbz	r3, 800568e <_dtoa_r+0x76e>
 8005652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005654:	2b00      	cmp	r3, #0
 8005656:	d067      	beq.n	8005728 <_dtoa_r+0x808>
 8005658:	b18f      	cbz	r7, 800567e <_dtoa_r+0x75e>
 800565a:	4631      	mov	r1, r6
 800565c:	463a      	mov	r2, r7
 800565e:	4620      	mov	r0, r4
 8005660:	f000 fbaa 	bl	8005db8 <__pow5mult>
 8005664:	9a04      	ldr	r2, [sp, #16]
 8005666:	4601      	mov	r1, r0
 8005668:	4606      	mov	r6, r0
 800566a:	4620      	mov	r0, r4
 800566c:	f000 fb0e 	bl	8005c8c <__multiply>
 8005670:	9904      	ldr	r1, [sp, #16]
 8005672:	9008      	str	r0, [sp, #32]
 8005674:	4620      	mov	r0, r4
 8005676:	f000 fa60 	bl	8005b3a <_Bfree>
 800567a:	9b08      	ldr	r3, [sp, #32]
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	9b07      	ldr	r3, [sp, #28]
 8005680:	1bda      	subs	r2, r3, r7
 8005682:	d004      	beq.n	800568e <_dtoa_r+0x76e>
 8005684:	9904      	ldr	r1, [sp, #16]
 8005686:	4620      	mov	r0, r4
 8005688:	f000 fb96 	bl	8005db8 <__pow5mult>
 800568c:	9004      	str	r0, [sp, #16]
 800568e:	2101      	movs	r1, #1
 8005690:	4620      	mov	r0, r4
 8005692:	f000 faf2 	bl	8005c7a <__i2b>
 8005696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005698:	4607      	mov	r7, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 81d0 	beq.w	8005a40 <_dtoa_r+0xb20>
 80056a0:	461a      	mov	r2, r3
 80056a2:	4601      	mov	r1, r0
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 fb87 	bl	8005db8 <__pow5mult>
 80056aa:	9b06      	ldr	r3, [sp, #24]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	4607      	mov	r7, r0
 80056b0:	dc40      	bgt.n	8005734 <_dtoa_r+0x814>
 80056b2:	9b00      	ldr	r3, [sp, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d139      	bne.n	800572c <_dtoa_r+0x80c>
 80056b8:	9b01      	ldr	r3, [sp, #4]
 80056ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d136      	bne.n	8005730 <_dtoa_r+0x810>
 80056c2:	9b01      	ldr	r3, [sp, #4]
 80056c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056c8:	0d1b      	lsrs	r3, r3, #20
 80056ca:	051b      	lsls	r3, r3, #20
 80056cc:	b12b      	cbz	r3, 80056da <_dtoa_r+0x7ba>
 80056ce:	9b05      	ldr	r3, [sp, #20]
 80056d0:	3301      	adds	r3, #1
 80056d2:	9305      	str	r3, [sp, #20]
 80056d4:	f108 0801 	add.w	r8, r8, #1
 80056d8:	2301      	movs	r3, #1
 80056da:	9307      	str	r3, [sp, #28]
 80056dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d12a      	bne.n	8005738 <_dtoa_r+0x818>
 80056e2:	2001      	movs	r0, #1
 80056e4:	e030      	b.n	8005748 <_dtoa_r+0x828>
 80056e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056ec:	e795      	b.n	800561a <_dtoa_r+0x6fa>
 80056ee:	9b07      	ldr	r3, [sp, #28]
 80056f0:	f109 37ff 	add.w	r7, r9, #4294967295
 80056f4:	42bb      	cmp	r3, r7
 80056f6:	bfbf      	itttt	lt
 80056f8:	9b07      	ldrlt	r3, [sp, #28]
 80056fa:	9707      	strlt	r7, [sp, #28]
 80056fc:	1afa      	sublt	r2, r7, r3
 80056fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005700:	bfbb      	ittet	lt
 8005702:	189b      	addlt	r3, r3, r2
 8005704:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005706:	1bdf      	subge	r7, r3, r7
 8005708:	2700      	movlt	r7, #0
 800570a:	f1b9 0f00 	cmp.w	r9, #0
 800570e:	bfb5      	itete	lt
 8005710:	9b05      	ldrlt	r3, [sp, #20]
 8005712:	9d05      	ldrge	r5, [sp, #20]
 8005714:	eba3 0509 	sublt.w	r5, r3, r9
 8005718:	464b      	movge	r3, r9
 800571a:	bfb8      	it	lt
 800571c:	2300      	movlt	r3, #0
 800571e:	e77e      	b.n	800561e <_dtoa_r+0x6fe>
 8005720:	9f07      	ldr	r7, [sp, #28]
 8005722:	9d05      	ldr	r5, [sp, #20]
 8005724:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005726:	e783      	b.n	8005630 <_dtoa_r+0x710>
 8005728:	9a07      	ldr	r2, [sp, #28]
 800572a:	e7ab      	b.n	8005684 <_dtoa_r+0x764>
 800572c:	2300      	movs	r3, #0
 800572e:	e7d4      	b.n	80056da <_dtoa_r+0x7ba>
 8005730:	9b00      	ldr	r3, [sp, #0]
 8005732:	e7d2      	b.n	80056da <_dtoa_r+0x7ba>
 8005734:	2300      	movs	r3, #0
 8005736:	9307      	str	r3, [sp, #28]
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800573e:	6918      	ldr	r0, [r3, #16]
 8005740:	f000 fa4d 	bl	8005bde <__hi0bits>
 8005744:	f1c0 0020 	rsb	r0, r0, #32
 8005748:	4440      	add	r0, r8
 800574a:	f010 001f 	ands.w	r0, r0, #31
 800574e:	d047      	beq.n	80057e0 <_dtoa_r+0x8c0>
 8005750:	f1c0 0320 	rsb	r3, r0, #32
 8005754:	2b04      	cmp	r3, #4
 8005756:	dd3b      	ble.n	80057d0 <_dtoa_r+0x8b0>
 8005758:	9b05      	ldr	r3, [sp, #20]
 800575a:	f1c0 001c 	rsb	r0, r0, #28
 800575e:	4403      	add	r3, r0
 8005760:	9305      	str	r3, [sp, #20]
 8005762:	4405      	add	r5, r0
 8005764:	4480      	add	r8, r0
 8005766:	9b05      	ldr	r3, [sp, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	dd05      	ble.n	8005778 <_dtoa_r+0x858>
 800576c:	461a      	mov	r2, r3
 800576e:	9904      	ldr	r1, [sp, #16]
 8005770:	4620      	mov	r0, r4
 8005772:	f000 fb6f 	bl	8005e54 <__lshift>
 8005776:	9004      	str	r0, [sp, #16]
 8005778:	f1b8 0f00 	cmp.w	r8, #0
 800577c:	dd05      	ble.n	800578a <_dtoa_r+0x86a>
 800577e:	4639      	mov	r1, r7
 8005780:	4642      	mov	r2, r8
 8005782:	4620      	mov	r0, r4
 8005784:	f000 fb66 	bl	8005e54 <__lshift>
 8005788:	4607      	mov	r7, r0
 800578a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800578c:	b353      	cbz	r3, 80057e4 <_dtoa_r+0x8c4>
 800578e:	4639      	mov	r1, r7
 8005790:	9804      	ldr	r0, [sp, #16]
 8005792:	f000 fbb3 	bl	8005efc <__mcmp>
 8005796:	2800      	cmp	r0, #0
 8005798:	da24      	bge.n	80057e4 <_dtoa_r+0x8c4>
 800579a:	2300      	movs	r3, #0
 800579c:	220a      	movs	r2, #10
 800579e:	9904      	ldr	r1, [sp, #16]
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 f9e1 	bl	8005b68 <__multadd>
 80057a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057a8:	9004      	str	r0, [sp, #16]
 80057aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 814d 	beq.w	8005a4e <_dtoa_r+0xb2e>
 80057b4:	2300      	movs	r3, #0
 80057b6:	4631      	mov	r1, r6
 80057b8:	220a      	movs	r2, #10
 80057ba:	4620      	mov	r0, r4
 80057bc:	f000 f9d4 	bl	8005b68 <__multadd>
 80057c0:	9b02      	ldr	r3, [sp, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	4606      	mov	r6, r0
 80057c6:	dc4f      	bgt.n	8005868 <_dtoa_r+0x948>
 80057c8:	9b06      	ldr	r3, [sp, #24]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	dd4c      	ble.n	8005868 <_dtoa_r+0x948>
 80057ce:	e011      	b.n	80057f4 <_dtoa_r+0x8d4>
 80057d0:	d0c9      	beq.n	8005766 <_dtoa_r+0x846>
 80057d2:	9a05      	ldr	r2, [sp, #20]
 80057d4:	331c      	adds	r3, #28
 80057d6:	441a      	add	r2, r3
 80057d8:	9205      	str	r2, [sp, #20]
 80057da:	441d      	add	r5, r3
 80057dc:	4498      	add	r8, r3
 80057de:	e7c2      	b.n	8005766 <_dtoa_r+0x846>
 80057e0:	4603      	mov	r3, r0
 80057e2:	e7f6      	b.n	80057d2 <_dtoa_r+0x8b2>
 80057e4:	f1b9 0f00 	cmp.w	r9, #0
 80057e8:	dc38      	bgt.n	800585c <_dtoa_r+0x93c>
 80057ea:	9b06      	ldr	r3, [sp, #24]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	dd35      	ble.n	800585c <_dtoa_r+0x93c>
 80057f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80057f4:	9b02      	ldr	r3, [sp, #8]
 80057f6:	b963      	cbnz	r3, 8005812 <_dtoa_r+0x8f2>
 80057f8:	4639      	mov	r1, r7
 80057fa:	2205      	movs	r2, #5
 80057fc:	4620      	mov	r0, r4
 80057fe:	f000 f9b3 	bl	8005b68 <__multadd>
 8005802:	4601      	mov	r1, r0
 8005804:	4607      	mov	r7, r0
 8005806:	9804      	ldr	r0, [sp, #16]
 8005808:	f000 fb78 	bl	8005efc <__mcmp>
 800580c:	2800      	cmp	r0, #0
 800580e:	f73f adcc 	bgt.w	80053aa <_dtoa_r+0x48a>
 8005812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005814:	465d      	mov	r5, fp
 8005816:	ea6f 0a03 	mvn.w	sl, r3
 800581a:	f04f 0900 	mov.w	r9, #0
 800581e:	4639      	mov	r1, r7
 8005820:	4620      	mov	r0, r4
 8005822:	f000 f98a 	bl	8005b3a <_Bfree>
 8005826:	2e00      	cmp	r6, #0
 8005828:	f43f aeb7 	beq.w	800559a <_dtoa_r+0x67a>
 800582c:	f1b9 0f00 	cmp.w	r9, #0
 8005830:	d005      	beq.n	800583e <_dtoa_r+0x91e>
 8005832:	45b1      	cmp	r9, r6
 8005834:	d003      	beq.n	800583e <_dtoa_r+0x91e>
 8005836:	4649      	mov	r1, r9
 8005838:	4620      	mov	r0, r4
 800583a:	f000 f97e 	bl	8005b3a <_Bfree>
 800583e:	4631      	mov	r1, r6
 8005840:	4620      	mov	r0, r4
 8005842:	f000 f97a 	bl	8005b3a <_Bfree>
 8005846:	e6a8      	b.n	800559a <_dtoa_r+0x67a>
 8005848:	2700      	movs	r7, #0
 800584a:	463e      	mov	r6, r7
 800584c:	e7e1      	b.n	8005812 <_dtoa_r+0x8f2>
 800584e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005852:	463e      	mov	r6, r7
 8005854:	e5a9      	b.n	80053aa <_dtoa_r+0x48a>
 8005856:	bf00      	nop
 8005858:	40240000 	.word	0x40240000
 800585c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800585e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 80fa 	beq.w	8005a5c <_dtoa_r+0xb3c>
 8005868:	2d00      	cmp	r5, #0
 800586a:	dd05      	ble.n	8005878 <_dtoa_r+0x958>
 800586c:	4631      	mov	r1, r6
 800586e:	462a      	mov	r2, r5
 8005870:	4620      	mov	r0, r4
 8005872:	f000 faef 	bl	8005e54 <__lshift>
 8005876:	4606      	mov	r6, r0
 8005878:	9b07      	ldr	r3, [sp, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d04c      	beq.n	8005918 <_dtoa_r+0x9f8>
 800587e:	6871      	ldr	r1, [r6, #4]
 8005880:	4620      	mov	r0, r4
 8005882:	f000 f926 	bl	8005ad2 <_Balloc>
 8005886:	6932      	ldr	r2, [r6, #16]
 8005888:	3202      	adds	r2, #2
 800588a:	4605      	mov	r5, r0
 800588c:	0092      	lsls	r2, r2, #2
 800588e:	f106 010c 	add.w	r1, r6, #12
 8005892:	300c      	adds	r0, #12
 8005894:	f000 f912 	bl	8005abc <memcpy>
 8005898:	2201      	movs	r2, #1
 800589a:	4629      	mov	r1, r5
 800589c:	4620      	mov	r0, r4
 800589e:	f000 fad9 	bl	8005e54 <__lshift>
 80058a2:	9b00      	ldr	r3, [sp, #0]
 80058a4:	f8cd b014 	str.w	fp, [sp, #20]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	46b1      	mov	r9, r6
 80058ae:	9307      	str	r3, [sp, #28]
 80058b0:	4606      	mov	r6, r0
 80058b2:	4639      	mov	r1, r7
 80058b4:	9804      	ldr	r0, [sp, #16]
 80058b6:	f7ff faa6 	bl	8004e06 <quorem>
 80058ba:	4649      	mov	r1, r9
 80058bc:	4605      	mov	r5, r0
 80058be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80058c2:	9804      	ldr	r0, [sp, #16]
 80058c4:	f000 fb1a 	bl	8005efc <__mcmp>
 80058c8:	4632      	mov	r2, r6
 80058ca:	9000      	str	r0, [sp, #0]
 80058cc:	4639      	mov	r1, r7
 80058ce:	4620      	mov	r0, r4
 80058d0:	f000 fb2e 	bl	8005f30 <__mdiff>
 80058d4:	68c3      	ldr	r3, [r0, #12]
 80058d6:	4602      	mov	r2, r0
 80058d8:	bb03      	cbnz	r3, 800591c <_dtoa_r+0x9fc>
 80058da:	4601      	mov	r1, r0
 80058dc:	9008      	str	r0, [sp, #32]
 80058de:	9804      	ldr	r0, [sp, #16]
 80058e0:	f000 fb0c 	bl	8005efc <__mcmp>
 80058e4:	9a08      	ldr	r2, [sp, #32]
 80058e6:	4603      	mov	r3, r0
 80058e8:	4611      	mov	r1, r2
 80058ea:	4620      	mov	r0, r4
 80058ec:	9308      	str	r3, [sp, #32]
 80058ee:	f000 f924 	bl	8005b3a <_Bfree>
 80058f2:	9b08      	ldr	r3, [sp, #32]
 80058f4:	b9a3      	cbnz	r3, 8005920 <_dtoa_r+0xa00>
 80058f6:	9a06      	ldr	r2, [sp, #24]
 80058f8:	b992      	cbnz	r2, 8005920 <_dtoa_r+0xa00>
 80058fa:	9a07      	ldr	r2, [sp, #28]
 80058fc:	b982      	cbnz	r2, 8005920 <_dtoa_r+0xa00>
 80058fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005902:	d029      	beq.n	8005958 <_dtoa_r+0xa38>
 8005904:	9b00      	ldr	r3, [sp, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	dd01      	ble.n	800590e <_dtoa_r+0x9ee>
 800590a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800590e:	9b05      	ldr	r3, [sp, #20]
 8005910:	1c5d      	adds	r5, r3, #1
 8005912:	f883 8000 	strb.w	r8, [r3]
 8005916:	e782      	b.n	800581e <_dtoa_r+0x8fe>
 8005918:	4630      	mov	r0, r6
 800591a:	e7c2      	b.n	80058a2 <_dtoa_r+0x982>
 800591c:	2301      	movs	r3, #1
 800591e:	e7e3      	b.n	80058e8 <_dtoa_r+0x9c8>
 8005920:	9a00      	ldr	r2, [sp, #0]
 8005922:	2a00      	cmp	r2, #0
 8005924:	db04      	blt.n	8005930 <_dtoa_r+0xa10>
 8005926:	d125      	bne.n	8005974 <_dtoa_r+0xa54>
 8005928:	9a06      	ldr	r2, [sp, #24]
 800592a:	bb1a      	cbnz	r2, 8005974 <_dtoa_r+0xa54>
 800592c:	9a07      	ldr	r2, [sp, #28]
 800592e:	bb0a      	cbnz	r2, 8005974 <_dtoa_r+0xa54>
 8005930:	2b00      	cmp	r3, #0
 8005932:	ddec      	ble.n	800590e <_dtoa_r+0x9ee>
 8005934:	2201      	movs	r2, #1
 8005936:	9904      	ldr	r1, [sp, #16]
 8005938:	4620      	mov	r0, r4
 800593a:	f000 fa8b 	bl	8005e54 <__lshift>
 800593e:	4639      	mov	r1, r7
 8005940:	9004      	str	r0, [sp, #16]
 8005942:	f000 fadb 	bl	8005efc <__mcmp>
 8005946:	2800      	cmp	r0, #0
 8005948:	dc03      	bgt.n	8005952 <_dtoa_r+0xa32>
 800594a:	d1e0      	bne.n	800590e <_dtoa_r+0x9ee>
 800594c:	f018 0f01 	tst.w	r8, #1
 8005950:	d0dd      	beq.n	800590e <_dtoa_r+0x9ee>
 8005952:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005956:	d1d8      	bne.n	800590a <_dtoa_r+0x9ea>
 8005958:	9b05      	ldr	r3, [sp, #20]
 800595a:	9a05      	ldr	r2, [sp, #20]
 800595c:	1c5d      	adds	r5, r3, #1
 800595e:	2339      	movs	r3, #57	; 0x39
 8005960:	7013      	strb	r3, [r2, #0]
 8005962:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005966:	2b39      	cmp	r3, #57	; 0x39
 8005968:	f105 32ff 	add.w	r2, r5, #4294967295
 800596c:	d04f      	beq.n	8005a0e <_dtoa_r+0xaee>
 800596e:	3301      	adds	r3, #1
 8005970:	7013      	strb	r3, [r2, #0]
 8005972:	e754      	b.n	800581e <_dtoa_r+0x8fe>
 8005974:	9a05      	ldr	r2, [sp, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f102 0501 	add.w	r5, r2, #1
 800597c:	dd06      	ble.n	800598c <_dtoa_r+0xa6c>
 800597e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005982:	d0e9      	beq.n	8005958 <_dtoa_r+0xa38>
 8005984:	f108 0801 	add.w	r8, r8, #1
 8005988:	9b05      	ldr	r3, [sp, #20]
 800598a:	e7c2      	b.n	8005912 <_dtoa_r+0x9f2>
 800598c:	9a02      	ldr	r2, [sp, #8]
 800598e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005992:	eba5 030b 	sub.w	r3, r5, fp
 8005996:	4293      	cmp	r3, r2
 8005998:	d021      	beq.n	80059de <_dtoa_r+0xabe>
 800599a:	2300      	movs	r3, #0
 800599c:	220a      	movs	r2, #10
 800599e:	9904      	ldr	r1, [sp, #16]
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 f8e1 	bl	8005b68 <__multadd>
 80059a6:	45b1      	cmp	r9, r6
 80059a8:	9004      	str	r0, [sp, #16]
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	f04f 020a 	mov.w	r2, #10
 80059b2:	4649      	mov	r1, r9
 80059b4:	4620      	mov	r0, r4
 80059b6:	d105      	bne.n	80059c4 <_dtoa_r+0xaa4>
 80059b8:	f000 f8d6 	bl	8005b68 <__multadd>
 80059bc:	4681      	mov	r9, r0
 80059be:	4606      	mov	r6, r0
 80059c0:	9505      	str	r5, [sp, #20]
 80059c2:	e776      	b.n	80058b2 <_dtoa_r+0x992>
 80059c4:	f000 f8d0 	bl	8005b68 <__multadd>
 80059c8:	4631      	mov	r1, r6
 80059ca:	4681      	mov	r9, r0
 80059cc:	2300      	movs	r3, #0
 80059ce:	220a      	movs	r2, #10
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 f8c9 	bl	8005b68 <__multadd>
 80059d6:	4606      	mov	r6, r0
 80059d8:	e7f2      	b.n	80059c0 <_dtoa_r+0xaa0>
 80059da:	f04f 0900 	mov.w	r9, #0
 80059de:	2201      	movs	r2, #1
 80059e0:	9904      	ldr	r1, [sp, #16]
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 fa36 	bl	8005e54 <__lshift>
 80059e8:	4639      	mov	r1, r7
 80059ea:	9004      	str	r0, [sp, #16]
 80059ec:	f000 fa86 	bl	8005efc <__mcmp>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	dcb6      	bgt.n	8005962 <_dtoa_r+0xa42>
 80059f4:	d102      	bne.n	80059fc <_dtoa_r+0xadc>
 80059f6:	f018 0f01 	tst.w	r8, #1
 80059fa:	d1b2      	bne.n	8005962 <_dtoa_r+0xa42>
 80059fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a00:	2b30      	cmp	r3, #48	; 0x30
 8005a02:	f105 32ff 	add.w	r2, r5, #4294967295
 8005a06:	f47f af0a 	bne.w	800581e <_dtoa_r+0x8fe>
 8005a0a:	4615      	mov	r5, r2
 8005a0c:	e7f6      	b.n	80059fc <_dtoa_r+0xadc>
 8005a0e:	4593      	cmp	fp, r2
 8005a10:	d105      	bne.n	8005a1e <_dtoa_r+0xafe>
 8005a12:	2331      	movs	r3, #49	; 0x31
 8005a14:	f10a 0a01 	add.w	sl, sl, #1
 8005a18:	f88b 3000 	strb.w	r3, [fp]
 8005a1c:	e6ff      	b.n	800581e <_dtoa_r+0x8fe>
 8005a1e:	4615      	mov	r5, r2
 8005a20:	e79f      	b.n	8005962 <_dtoa_r+0xa42>
 8005a22:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005a88 <_dtoa_r+0xb68>
 8005a26:	e007      	b.n	8005a38 <_dtoa_r+0xb18>
 8005a28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005a8c <_dtoa_r+0xb6c>
 8005a2e:	b11b      	cbz	r3, 8005a38 <_dtoa_r+0xb18>
 8005a30:	f10b 0308 	add.w	r3, fp, #8
 8005a34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	4658      	mov	r0, fp
 8005a3a:	b017      	add	sp, #92	; 0x5c
 8005a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a40:	9b06      	ldr	r3, [sp, #24]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	f77f ae35 	ble.w	80056b2 <_dtoa_r+0x792>
 8005a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a4a:	9307      	str	r3, [sp, #28]
 8005a4c:	e649      	b.n	80056e2 <_dtoa_r+0x7c2>
 8005a4e:	9b02      	ldr	r3, [sp, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	dc03      	bgt.n	8005a5c <_dtoa_r+0xb3c>
 8005a54:	9b06      	ldr	r3, [sp, #24]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	f73f aecc 	bgt.w	80057f4 <_dtoa_r+0x8d4>
 8005a5c:	465d      	mov	r5, fp
 8005a5e:	4639      	mov	r1, r7
 8005a60:	9804      	ldr	r0, [sp, #16]
 8005a62:	f7ff f9d0 	bl	8004e06 <quorem>
 8005a66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005a6a:	f805 8b01 	strb.w	r8, [r5], #1
 8005a6e:	9a02      	ldr	r2, [sp, #8]
 8005a70:	eba5 030b 	sub.w	r3, r5, fp
 8005a74:	429a      	cmp	r2, r3
 8005a76:	ddb0      	ble.n	80059da <_dtoa_r+0xaba>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	220a      	movs	r2, #10
 8005a7c:	9904      	ldr	r1, [sp, #16]
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f000 f872 	bl	8005b68 <__multadd>
 8005a84:	9004      	str	r0, [sp, #16]
 8005a86:	e7ea      	b.n	8005a5e <_dtoa_r+0xb3e>
 8005a88:	08006868 	.word	0x08006868
 8005a8c:	0800686a 	.word	0x0800686a

08005a90 <_localeconv_r>:
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <_localeconv_r+0x14>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6a18      	ldr	r0, [r3, #32]
 8005a96:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <_localeconv_r+0x18>)
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	bf08      	it	eq
 8005a9c:	4618      	moveq	r0, r3
 8005a9e:	30f0      	adds	r0, #240	; 0xf0
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c
 8005aa8:	20000070 	.word	0x20000070

08005aac <malloc>:
 8005aac:	4b02      	ldr	r3, [pc, #8]	; (8005ab8 <malloc+0xc>)
 8005aae:	4601      	mov	r1, r0
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	f000 baf7 	b.w	80060a4 <_malloc_r>
 8005ab6:	bf00      	nop
 8005ab8:	2000000c 	.word	0x2000000c

08005abc <memcpy>:
 8005abc:	b510      	push	{r4, lr}
 8005abe:	1e43      	subs	r3, r0, #1
 8005ac0:	440a      	add	r2, r1
 8005ac2:	4291      	cmp	r1, r2
 8005ac4:	d100      	bne.n	8005ac8 <memcpy+0xc>
 8005ac6:	bd10      	pop	{r4, pc}
 8005ac8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005acc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ad0:	e7f7      	b.n	8005ac2 <memcpy+0x6>

08005ad2 <_Balloc>:
 8005ad2:	b570      	push	{r4, r5, r6, lr}
 8005ad4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	460e      	mov	r6, r1
 8005ada:	b93d      	cbnz	r5, 8005aec <_Balloc+0x1a>
 8005adc:	2010      	movs	r0, #16
 8005ade:	f7ff ffe5 	bl	8005aac <malloc>
 8005ae2:	6260      	str	r0, [r4, #36]	; 0x24
 8005ae4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ae8:	6005      	str	r5, [r0, #0]
 8005aea:	60c5      	str	r5, [r0, #12]
 8005aec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005aee:	68eb      	ldr	r3, [r5, #12]
 8005af0:	b183      	cbz	r3, 8005b14 <_Balloc+0x42>
 8005af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005afa:	b9b8      	cbnz	r0, 8005b2c <_Balloc+0x5a>
 8005afc:	2101      	movs	r1, #1
 8005afe:	fa01 f506 	lsl.w	r5, r1, r6
 8005b02:	1d6a      	adds	r2, r5, #5
 8005b04:	0092      	lsls	r2, r2, #2
 8005b06:	4620      	mov	r0, r4
 8005b08:	f000 fabe 	bl	8006088 <_calloc_r>
 8005b0c:	b160      	cbz	r0, 8005b28 <_Balloc+0x56>
 8005b0e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005b12:	e00e      	b.n	8005b32 <_Balloc+0x60>
 8005b14:	2221      	movs	r2, #33	; 0x21
 8005b16:	2104      	movs	r1, #4
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 fab5 	bl	8006088 <_calloc_r>
 8005b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b20:	60e8      	str	r0, [r5, #12]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e4      	bne.n	8005af2 <_Balloc+0x20>
 8005b28:	2000      	movs	r0, #0
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	6802      	ldr	r2, [r0, #0]
 8005b2e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005b32:	2300      	movs	r3, #0
 8005b34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b38:	e7f7      	b.n	8005b2a <_Balloc+0x58>

08005b3a <_Bfree>:
 8005b3a:	b570      	push	{r4, r5, r6, lr}
 8005b3c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005b3e:	4606      	mov	r6, r0
 8005b40:	460d      	mov	r5, r1
 8005b42:	b93c      	cbnz	r4, 8005b54 <_Bfree+0x1a>
 8005b44:	2010      	movs	r0, #16
 8005b46:	f7ff ffb1 	bl	8005aac <malloc>
 8005b4a:	6270      	str	r0, [r6, #36]	; 0x24
 8005b4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b50:	6004      	str	r4, [r0, #0]
 8005b52:	60c4      	str	r4, [r0, #12]
 8005b54:	b13d      	cbz	r5, 8005b66 <_Bfree+0x2c>
 8005b56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005b58:	686a      	ldr	r2, [r5, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b60:	6029      	str	r1, [r5, #0]
 8005b62:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005b66:	bd70      	pop	{r4, r5, r6, pc}

08005b68 <__multadd>:
 8005b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6c:	690d      	ldr	r5, [r1, #16]
 8005b6e:	461f      	mov	r7, r3
 8005b70:	4606      	mov	r6, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	f101 0c14 	add.w	ip, r1, #20
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f8dc 0000 	ldr.w	r0, [ip]
 8005b7e:	b281      	uxth	r1, r0
 8005b80:	fb02 7101 	mla	r1, r2, r1, r7
 8005b84:	0c0f      	lsrs	r7, r1, #16
 8005b86:	0c00      	lsrs	r0, r0, #16
 8005b88:	fb02 7000 	mla	r0, r2, r0, r7
 8005b8c:	b289      	uxth	r1, r1
 8005b8e:	3301      	adds	r3, #1
 8005b90:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005b94:	429d      	cmp	r5, r3
 8005b96:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005b9a:	f84c 1b04 	str.w	r1, [ip], #4
 8005b9e:	dcec      	bgt.n	8005b7a <__multadd+0x12>
 8005ba0:	b1d7      	cbz	r7, 8005bd8 <__multadd+0x70>
 8005ba2:	68a3      	ldr	r3, [r4, #8]
 8005ba4:	42ab      	cmp	r3, r5
 8005ba6:	dc12      	bgt.n	8005bce <__multadd+0x66>
 8005ba8:	6861      	ldr	r1, [r4, #4]
 8005baa:	4630      	mov	r0, r6
 8005bac:	3101      	adds	r1, #1
 8005bae:	f7ff ff90 	bl	8005ad2 <_Balloc>
 8005bb2:	6922      	ldr	r2, [r4, #16]
 8005bb4:	3202      	adds	r2, #2
 8005bb6:	f104 010c 	add.w	r1, r4, #12
 8005bba:	4680      	mov	r8, r0
 8005bbc:	0092      	lsls	r2, r2, #2
 8005bbe:	300c      	adds	r0, #12
 8005bc0:	f7ff ff7c 	bl	8005abc <memcpy>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	f7ff ffb7 	bl	8005b3a <_Bfree>
 8005bcc:	4644      	mov	r4, r8
 8005bce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bd2:	3501      	adds	r5, #1
 8005bd4:	615f      	str	r7, [r3, #20]
 8005bd6:	6125      	str	r5, [r4, #16]
 8005bd8:	4620      	mov	r0, r4
 8005bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005bde <__hi0bits>:
 8005bde:	0c02      	lsrs	r2, r0, #16
 8005be0:	0412      	lsls	r2, r2, #16
 8005be2:	4603      	mov	r3, r0
 8005be4:	b9b2      	cbnz	r2, 8005c14 <__hi0bits+0x36>
 8005be6:	0403      	lsls	r3, r0, #16
 8005be8:	2010      	movs	r0, #16
 8005bea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005bee:	bf04      	itt	eq
 8005bf0:	021b      	lsleq	r3, r3, #8
 8005bf2:	3008      	addeq	r0, #8
 8005bf4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005bf8:	bf04      	itt	eq
 8005bfa:	011b      	lsleq	r3, r3, #4
 8005bfc:	3004      	addeq	r0, #4
 8005bfe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c02:	bf04      	itt	eq
 8005c04:	009b      	lsleq	r3, r3, #2
 8005c06:	3002      	addeq	r0, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	db06      	blt.n	8005c1a <__hi0bits+0x3c>
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	d503      	bpl.n	8005c18 <__hi0bits+0x3a>
 8005c10:	3001      	adds	r0, #1
 8005c12:	4770      	bx	lr
 8005c14:	2000      	movs	r0, #0
 8005c16:	e7e8      	b.n	8005bea <__hi0bits+0xc>
 8005c18:	2020      	movs	r0, #32
 8005c1a:	4770      	bx	lr

08005c1c <__lo0bits>:
 8005c1c:	6803      	ldr	r3, [r0, #0]
 8005c1e:	f013 0207 	ands.w	r2, r3, #7
 8005c22:	4601      	mov	r1, r0
 8005c24:	d00b      	beq.n	8005c3e <__lo0bits+0x22>
 8005c26:	07da      	lsls	r2, r3, #31
 8005c28:	d423      	bmi.n	8005c72 <__lo0bits+0x56>
 8005c2a:	0798      	lsls	r0, r3, #30
 8005c2c:	bf49      	itett	mi
 8005c2e:	085b      	lsrmi	r3, r3, #1
 8005c30:	089b      	lsrpl	r3, r3, #2
 8005c32:	2001      	movmi	r0, #1
 8005c34:	600b      	strmi	r3, [r1, #0]
 8005c36:	bf5c      	itt	pl
 8005c38:	600b      	strpl	r3, [r1, #0]
 8005c3a:	2002      	movpl	r0, #2
 8005c3c:	4770      	bx	lr
 8005c3e:	b298      	uxth	r0, r3
 8005c40:	b9a8      	cbnz	r0, 8005c6e <__lo0bits+0x52>
 8005c42:	0c1b      	lsrs	r3, r3, #16
 8005c44:	2010      	movs	r0, #16
 8005c46:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c4a:	bf04      	itt	eq
 8005c4c:	0a1b      	lsreq	r3, r3, #8
 8005c4e:	3008      	addeq	r0, #8
 8005c50:	071a      	lsls	r2, r3, #28
 8005c52:	bf04      	itt	eq
 8005c54:	091b      	lsreq	r3, r3, #4
 8005c56:	3004      	addeq	r0, #4
 8005c58:	079a      	lsls	r2, r3, #30
 8005c5a:	bf04      	itt	eq
 8005c5c:	089b      	lsreq	r3, r3, #2
 8005c5e:	3002      	addeq	r0, #2
 8005c60:	07da      	lsls	r2, r3, #31
 8005c62:	d402      	bmi.n	8005c6a <__lo0bits+0x4e>
 8005c64:	085b      	lsrs	r3, r3, #1
 8005c66:	d006      	beq.n	8005c76 <__lo0bits+0x5a>
 8005c68:	3001      	adds	r0, #1
 8005c6a:	600b      	str	r3, [r1, #0]
 8005c6c:	4770      	bx	lr
 8005c6e:	4610      	mov	r0, r2
 8005c70:	e7e9      	b.n	8005c46 <__lo0bits+0x2a>
 8005c72:	2000      	movs	r0, #0
 8005c74:	4770      	bx	lr
 8005c76:	2020      	movs	r0, #32
 8005c78:	4770      	bx	lr

08005c7a <__i2b>:
 8005c7a:	b510      	push	{r4, lr}
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	2101      	movs	r1, #1
 8005c80:	f7ff ff27 	bl	8005ad2 <_Balloc>
 8005c84:	2201      	movs	r2, #1
 8005c86:	6144      	str	r4, [r0, #20]
 8005c88:	6102      	str	r2, [r0, #16]
 8005c8a:	bd10      	pop	{r4, pc}

08005c8c <__multiply>:
 8005c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c90:	4614      	mov	r4, r2
 8005c92:	690a      	ldr	r2, [r1, #16]
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	bfb8      	it	lt
 8005c9a:	460b      	movlt	r3, r1
 8005c9c:	4688      	mov	r8, r1
 8005c9e:	bfbc      	itt	lt
 8005ca0:	46a0      	movlt	r8, r4
 8005ca2:	461c      	movlt	r4, r3
 8005ca4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ca8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005cac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005cb4:	eb07 0609 	add.w	r6, r7, r9
 8005cb8:	42b3      	cmp	r3, r6
 8005cba:	bfb8      	it	lt
 8005cbc:	3101      	addlt	r1, #1
 8005cbe:	f7ff ff08 	bl	8005ad2 <_Balloc>
 8005cc2:	f100 0514 	add.w	r5, r0, #20
 8005cc6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005cca:	462b      	mov	r3, r5
 8005ccc:	2200      	movs	r2, #0
 8005cce:	4573      	cmp	r3, lr
 8005cd0:	d316      	bcc.n	8005d00 <__multiply+0x74>
 8005cd2:	f104 0214 	add.w	r2, r4, #20
 8005cd6:	f108 0114 	add.w	r1, r8, #20
 8005cda:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005cde:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	9b00      	ldr	r3, [sp, #0]
 8005ce6:	9201      	str	r2, [sp, #4]
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d80c      	bhi.n	8005d06 <__multiply+0x7a>
 8005cec:	2e00      	cmp	r6, #0
 8005cee:	dd03      	ble.n	8005cf8 <__multiply+0x6c>
 8005cf0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d05d      	beq.n	8005db4 <__multiply+0x128>
 8005cf8:	6106      	str	r6, [r0, #16]
 8005cfa:	b003      	add	sp, #12
 8005cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d00:	f843 2b04 	str.w	r2, [r3], #4
 8005d04:	e7e3      	b.n	8005cce <__multiply+0x42>
 8005d06:	f8b2 b000 	ldrh.w	fp, [r2]
 8005d0a:	f1bb 0f00 	cmp.w	fp, #0
 8005d0e:	d023      	beq.n	8005d58 <__multiply+0xcc>
 8005d10:	4689      	mov	r9, r1
 8005d12:	46ac      	mov	ip, r5
 8005d14:	f04f 0800 	mov.w	r8, #0
 8005d18:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d1c:	f8dc a000 	ldr.w	sl, [ip]
 8005d20:	b2a3      	uxth	r3, r4
 8005d22:	fa1f fa8a 	uxth.w	sl, sl
 8005d26:	fb0b a303 	mla	r3, fp, r3, sl
 8005d2a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d2e:	f8dc 4000 	ldr.w	r4, [ip]
 8005d32:	4443      	add	r3, r8
 8005d34:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d38:	fb0b 840a 	mla	r4, fp, sl, r8
 8005d3c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005d40:	46e2      	mov	sl, ip
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d48:	454f      	cmp	r7, r9
 8005d4a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d4e:	f84a 3b04 	str.w	r3, [sl], #4
 8005d52:	d82b      	bhi.n	8005dac <__multiply+0x120>
 8005d54:	f8cc 8004 	str.w	r8, [ip, #4]
 8005d58:	9b01      	ldr	r3, [sp, #4]
 8005d5a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005d5e:	3204      	adds	r2, #4
 8005d60:	f1ba 0f00 	cmp.w	sl, #0
 8005d64:	d020      	beq.n	8005da8 <__multiply+0x11c>
 8005d66:	682b      	ldr	r3, [r5, #0]
 8005d68:	4689      	mov	r9, r1
 8005d6a:	46a8      	mov	r8, r5
 8005d6c:	f04f 0b00 	mov.w	fp, #0
 8005d70:	f8b9 c000 	ldrh.w	ip, [r9]
 8005d74:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005d78:	fb0a 440c 	mla	r4, sl, ip, r4
 8005d7c:	445c      	add	r4, fp
 8005d7e:	46c4      	mov	ip, r8
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d86:	f84c 3b04 	str.w	r3, [ip], #4
 8005d8a:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d8e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005d92:	0c1b      	lsrs	r3, r3, #16
 8005d94:	fb0a b303 	mla	r3, sl, r3, fp
 8005d98:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005d9c:	454f      	cmp	r7, r9
 8005d9e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005da2:	d805      	bhi.n	8005db0 <__multiply+0x124>
 8005da4:	f8c8 3004 	str.w	r3, [r8, #4]
 8005da8:	3504      	adds	r5, #4
 8005daa:	e79b      	b.n	8005ce4 <__multiply+0x58>
 8005dac:	46d4      	mov	ip, sl
 8005dae:	e7b3      	b.n	8005d18 <__multiply+0x8c>
 8005db0:	46e0      	mov	r8, ip
 8005db2:	e7dd      	b.n	8005d70 <__multiply+0xe4>
 8005db4:	3e01      	subs	r6, #1
 8005db6:	e799      	b.n	8005cec <__multiply+0x60>

08005db8 <__pow5mult>:
 8005db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dbc:	4615      	mov	r5, r2
 8005dbe:	f012 0203 	ands.w	r2, r2, #3
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	460f      	mov	r7, r1
 8005dc6:	d007      	beq.n	8005dd8 <__pow5mult+0x20>
 8005dc8:	3a01      	subs	r2, #1
 8005dca:	4c21      	ldr	r4, [pc, #132]	; (8005e50 <__pow5mult+0x98>)
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dd2:	f7ff fec9 	bl	8005b68 <__multadd>
 8005dd6:	4607      	mov	r7, r0
 8005dd8:	10ad      	asrs	r5, r5, #2
 8005dda:	d035      	beq.n	8005e48 <__pow5mult+0x90>
 8005ddc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dde:	b93c      	cbnz	r4, 8005df0 <__pow5mult+0x38>
 8005de0:	2010      	movs	r0, #16
 8005de2:	f7ff fe63 	bl	8005aac <malloc>
 8005de6:	6270      	str	r0, [r6, #36]	; 0x24
 8005de8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dec:	6004      	str	r4, [r0, #0]
 8005dee:	60c4      	str	r4, [r0, #12]
 8005df0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005df4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005df8:	b94c      	cbnz	r4, 8005e0e <__pow5mult+0x56>
 8005dfa:	f240 2171 	movw	r1, #625	; 0x271
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f7ff ff3b 	bl	8005c7a <__i2b>
 8005e04:	2300      	movs	r3, #0
 8005e06:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	6003      	str	r3, [r0, #0]
 8005e0e:	f04f 0800 	mov.w	r8, #0
 8005e12:	07eb      	lsls	r3, r5, #31
 8005e14:	d50a      	bpl.n	8005e2c <__pow5mult+0x74>
 8005e16:	4639      	mov	r1, r7
 8005e18:	4622      	mov	r2, r4
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f7ff ff36 	bl	8005c8c <__multiply>
 8005e20:	4639      	mov	r1, r7
 8005e22:	4681      	mov	r9, r0
 8005e24:	4630      	mov	r0, r6
 8005e26:	f7ff fe88 	bl	8005b3a <_Bfree>
 8005e2a:	464f      	mov	r7, r9
 8005e2c:	106d      	asrs	r5, r5, #1
 8005e2e:	d00b      	beq.n	8005e48 <__pow5mult+0x90>
 8005e30:	6820      	ldr	r0, [r4, #0]
 8005e32:	b938      	cbnz	r0, 8005e44 <__pow5mult+0x8c>
 8005e34:	4622      	mov	r2, r4
 8005e36:	4621      	mov	r1, r4
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f7ff ff27 	bl	8005c8c <__multiply>
 8005e3e:	6020      	str	r0, [r4, #0]
 8005e40:	f8c0 8000 	str.w	r8, [r0]
 8005e44:	4604      	mov	r4, r0
 8005e46:	e7e4      	b.n	8005e12 <__pow5mult+0x5a>
 8005e48:	4638      	mov	r0, r7
 8005e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4e:	bf00      	nop
 8005e50:	08006968 	.word	0x08006968

08005e54 <__lshift>:
 8005e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e58:	460c      	mov	r4, r1
 8005e5a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e5e:	6923      	ldr	r3, [r4, #16]
 8005e60:	6849      	ldr	r1, [r1, #4]
 8005e62:	eb0a 0903 	add.w	r9, sl, r3
 8005e66:	68a3      	ldr	r3, [r4, #8]
 8005e68:	4607      	mov	r7, r0
 8005e6a:	4616      	mov	r6, r2
 8005e6c:	f109 0501 	add.w	r5, r9, #1
 8005e70:	42ab      	cmp	r3, r5
 8005e72:	db32      	blt.n	8005eda <__lshift+0x86>
 8005e74:	4638      	mov	r0, r7
 8005e76:	f7ff fe2c 	bl	8005ad2 <_Balloc>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	f100 0114 	add.w	r1, r0, #20
 8005e82:	461a      	mov	r2, r3
 8005e84:	4553      	cmp	r3, sl
 8005e86:	db2b      	blt.n	8005ee0 <__lshift+0x8c>
 8005e88:	6920      	ldr	r0, [r4, #16]
 8005e8a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e8e:	f104 0314 	add.w	r3, r4, #20
 8005e92:	f016 021f 	ands.w	r2, r6, #31
 8005e96:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e9a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e9e:	d025      	beq.n	8005eec <__lshift+0x98>
 8005ea0:	f1c2 0e20 	rsb	lr, r2, #32
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	681e      	ldr	r6, [r3, #0]
 8005ea8:	468a      	mov	sl, r1
 8005eaa:	4096      	lsls	r6, r2
 8005eac:	4330      	orrs	r0, r6
 8005eae:	f84a 0b04 	str.w	r0, [sl], #4
 8005eb2:	f853 0b04 	ldr.w	r0, [r3], #4
 8005eb6:	459c      	cmp	ip, r3
 8005eb8:	fa20 f00e 	lsr.w	r0, r0, lr
 8005ebc:	d814      	bhi.n	8005ee8 <__lshift+0x94>
 8005ebe:	6048      	str	r0, [r1, #4]
 8005ec0:	b108      	cbz	r0, 8005ec6 <__lshift+0x72>
 8005ec2:	f109 0502 	add.w	r5, r9, #2
 8005ec6:	3d01      	subs	r5, #1
 8005ec8:	4638      	mov	r0, r7
 8005eca:	f8c8 5010 	str.w	r5, [r8, #16]
 8005ece:	4621      	mov	r1, r4
 8005ed0:	f7ff fe33 	bl	8005b3a <_Bfree>
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eda:	3101      	adds	r1, #1
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	e7c7      	b.n	8005e70 <__lshift+0x1c>
 8005ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	e7cd      	b.n	8005e84 <__lshift+0x30>
 8005ee8:	4651      	mov	r1, sl
 8005eea:	e7dc      	b.n	8005ea6 <__lshift+0x52>
 8005eec:	3904      	subs	r1, #4
 8005eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ef6:	459c      	cmp	ip, r3
 8005ef8:	d8f9      	bhi.n	8005eee <__lshift+0x9a>
 8005efa:	e7e4      	b.n	8005ec6 <__lshift+0x72>

08005efc <__mcmp>:
 8005efc:	6903      	ldr	r3, [r0, #16]
 8005efe:	690a      	ldr	r2, [r1, #16]
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	b530      	push	{r4, r5, lr}
 8005f04:	d10c      	bne.n	8005f20 <__mcmp+0x24>
 8005f06:	0092      	lsls	r2, r2, #2
 8005f08:	3014      	adds	r0, #20
 8005f0a:	3114      	adds	r1, #20
 8005f0c:	1884      	adds	r4, r0, r2
 8005f0e:	4411      	add	r1, r2
 8005f10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f18:	4295      	cmp	r5, r2
 8005f1a:	d003      	beq.n	8005f24 <__mcmp+0x28>
 8005f1c:	d305      	bcc.n	8005f2a <__mcmp+0x2e>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4618      	mov	r0, r3
 8005f22:	bd30      	pop	{r4, r5, pc}
 8005f24:	42a0      	cmp	r0, r4
 8005f26:	d3f3      	bcc.n	8005f10 <__mcmp+0x14>
 8005f28:	e7fa      	b.n	8005f20 <__mcmp+0x24>
 8005f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2e:	e7f7      	b.n	8005f20 <__mcmp+0x24>

08005f30 <__mdiff>:
 8005f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	460d      	mov	r5, r1
 8005f36:	4607      	mov	r7, r0
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	4614      	mov	r4, r2
 8005f3e:	f7ff ffdd 	bl	8005efc <__mcmp>
 8005f42:	1e06      	subs	r6, r0, #0
 8005f44:	d108      	bne.n	8005f58 <__mdiff+0x28>
 8005f46:	4631      	mov	r1, r6
 8005f48:	4638      	mov	r0, r7
 8005f4a:	f7ff fdc2 	bl	8005ad2 <_Balloc>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f58:	bfa4      	itt	ge
 8005f5a:	4623      	movge	r3, r4
 8005f5c:	462c      	movge	r4, r5
 8005f5e:	4638      	mov	r0, r7
 8005f60:	6861      	ldr	r1, [r4, #4]
 8005f62:	bfa6      	itte	ge
 8005f64:	461d      	movge	r5, r3
 8005f66:	2600      	movge	r6, #0
 8005f68:	2601      	movlt	r6, #1
 8005f6a:	f7ff fdb2 	bl	8005ad2 <_Balloc>
 8005f6e:	692b      	ldr	r3, [r5, #16]
 8005f70:	60c6      	str	r6, [r0, #12]
 8005f72:	6926      	ldr	r6, [r4, #16]
 8005f74:	f105 0914 	add.w	r9, r5, #20
 8005f78:	f104 0214 	add.w	r2, r4, #20
 8005f7c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005f80:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005f84:	f100 0514 	add.w	r5, r0, #20
 8005f88:	f04f 0e00 	mov.w	lr, #0
 8005f8c:	f852 ab04 	ldr.w	sl, [r2], #4
 8005f90:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f94:	fa1e f18a 	uxtah	r1, lr, sl
 8005f98:	b2a3      	uxth	r3, r4
 8005f9a:	1ac9      	subs	r1, r1, r3
 8005f9c:	0c23      	lsrs	r3, r4, #16
 8005f9e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005fa2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005fa6:	b289      	uxth	r1, r1
 8005fa8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005fac:	45c8      	cmp	r8, r9
 8005fae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005fb2:	4694      	mov	ip, r2
 8005fb4:	f845 3b04 	str.w	r3, [r5], #4
 8005fb8:	d8e8      	bhi.n	8005f8c <__mdiff+0x5c>
 8005fba:	45bc      	cmp	ip, r7
 8005fbc:	d304      	bcc.n	8005fc8 <__mdiff+0x98>
 8005fbe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005fc2:	b183      	cbz	r3, 8005fe6 <__mdiff+0xb6>
 8005fc4:	6106      	str	r6, [r0, #16]
 8005fc6:	e7c5      	b.n	8005f54 <__mdiff+0x24>
 8005fc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005fcc:	fa1e f381 	uxtah	r3, lr, r1
 8005fd0:	141a      	asrs	r2, r3, #16
 8005fd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fdc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005fe0:	f845 3b04 	str.w	r3, [r5], #4
 8005fe4:	e7e9      	b.n	8005fba <__mdiff+0x8a>
 8005fe6:	3e01      	subs	r6, #1
 8005fe8:	e7e9      	b.n	8005fbe <__mdiff+0x8e>

08005fea <__d2b>:
 8005fea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005fee:	460e      	mov	r6, r1
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	ec59 8b10 	vmov	r8, r9, d0
 8005ff6:	4615      	mov	r5, r2
 8005ff8:	f7ff fd6b 	bl	8005ad2 <_Balloc>
 8005ffc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006000:	4607      	mov	r7, r0
 8006002:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006006:	bb34      	cbnz	r4, 8006056 <__d2b+0x6c>
 8006008:	9301      	str	r3, [sp, #4]
 800600a:	f1b8 0300 	subs.w	r3, r8, #0
 800600e:	d027      	beq.n	8006060 <__d2b+0x76>
 8006010:	a802      	add	r0, sp, #8
 8006012:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006016:	f7ff fe01 	bl	8005c1c <__lo0bits>
 800601a:	9900      	ldr	r1, [sp, #0]
 800601c:	b1f0      	cbz	r0, 800605c <__d2b+0x72>
 800601e:	9a01      	ldr	r2, [sp, #4]
 8006020:	f1c0 0320 	rsb	r3, r0, #32
 8006024:	fa02 f303 	lsl.w	r3, r2, r3
 8006028:	430b      	orrs	r3, r1
 800602a:	40c2      	lsrs	r2, r0
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	9201      	str	r2, [sp, #4]
 8006030:	9b01      	ldr	r3, [sp, #4]
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	2b00      	cmp	r3, #0
 8006036:	bf14      	ite	ne
 8006038:	2102      	movne	r1, #2
 800603a:	2101      	moveq	r1, #1
 800603c:	6139      	str	r1, [r7, #16]
 800603e:	b1c4      	cbz	r4, 8006072 <__d2b+0x88>
 8006040:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006044:	4404      	add	r4, r0
 8006046:	6034      	str	r4, [r6, #0]
 8006048:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800604c:	6028      	str	r0, [r5, #0]
 800604e:	4638      	mov	r0, r7
 8006050:	b003      	add	sp, #12
 8006052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800605a:	e7d5      	b.n	8006008 <__d2b+0x1e>
 800605c:	6179      	str	r1, [r7, #20]
 800605e:	e7e7      	b.n	8006030 <__d2b+0x46>
 8006060:	a801      	add	r0, sp, #4
 8006062:	f7ff fddb 	bl	8005c1c <__lo0bits>
 8006066:	9b01      	ldr	r3, [sp, #4]
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	2101      	movs	r1, #1
 800606c:	6139      	str	r1, [r7, #16]
 800606e:	3020      	adds	r0, #32
 8006070:	e7e5      	b.n	800603e <__d2b+0x54>
 8006072:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006076:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800607a:	6030      	str	r0, [r6, #0]
 800607c:	6918      	ldr	r0, [r3, #16]
 800607e:	f7ff fdae 	bl	8005bde <__hi0bits>
 8006082:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006086:	e7e1      	b.n	800604c <__d2b+0x62>

08006088 <_calloc_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	fb02 f401 	mul.w	r4, r2, r1
 800608e:	4621      	mov	r1, r4
 8006090:	f000 f808 	bl	80060a4 <_malloc_r>
 8006094:	4605      	mov	r5, r0
 8006096:	b118      	cbz	r0, 80060a0 <_calloc_r+0x18>
 8006098:	4622      	mov	r2, r4
 800609a:	2100      	movs	r1, #0
 800609c:	f7fe fb62 	bl	8004764 <memset>
 80060a0:	4628      	mov	r0, r5
 80060a2:	bd38      	pop	{r3, r4, r5, pc}

080060a4 <_malloc_r>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	1ccd      	adds	r5, r1, #3
 80060a8:	f025 0503 	bic.w	r5, r5, #3
 80060ac:	3508      	adds	r5, #8
 80060ae:	2d0c      	cmp	r5, #12
 80060b0:	bf38      	it	cc
 80060b2:	250c      	movcc	r5, #12
 80060b4:	2d00      	cmp	r5, #0
 80060b6:	4606      	mov	r6, r0
 80060b8:	db01      	blt.n	80060be <_malloc_r+0x1a>
 80060ba:	42a9      	cmp	r1, r5
 80060bc:	d903      	bls.n	80060c6 <_malloc_r+0x22>
 80060be:	230c      	movs	r3, #12
 80060c0:	6033      	str	r3, [r6, #0]
 80060c2:	2000      	movs	r0, #0
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
 80060c6:	f000 f869 	bl	800619c <__malloc_lock>
 80060ca:	4a21      	ldr	r2, [pc, #132]	; (8006150 <_malloc_r+0xac>)
 80060cc:	6814      	ldr	r4, [r2, #0]
 80060ce:	4621      	mov	r1, r4
 80060d0:	b991      	cbnz	r1, 80060f8 <_malloc_r+0x54>
 80060d2:	4c20      	ldr	r4, [pc, #128]	; (8006154 <_malloc_r+0xb0>)
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	b91b      	cbnz	r3, 80060e0 <_malloc_r+0x3c>
 80060d8:	4630      	mov	r0, r6
 80060da:	f000 f83d 	bl	8006158 <_sbrk_r>
 80060de:	6020      	str	r0, [r4, #0]
 80060e0:	4629      	mov	r1, r5
 80060e2:	4630      	mov	r0, r6
 80060e4:	f000 f838 	bl	8006158 <_sbrk_r>
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d124      	bne.n	8006136 <_malloc_r+0x92>
 80060ec:	230c      	movs	r3, #12
 80060ee:	6033      	str	r3, [r6, #0]
 80060f0:	4630      	mov	r0, r6
 80060f2:	f000 f854 	bl	800619e <__malloc_unlock>
 80060f6:	e7e4      	b.n	80060c2 <_malloc_r+0x1e>
 80060f8:	680b      	ldr	r3, [r1, #0]
 80060fa:	1b5b      	subs	r3, r3, r5
 80060fc:	d418      	bmi.n	8006130 <_malloc_r+0x8c>
 80060fe:	2b0b      	cmp	r3, #11
 8006100:	d90f      	bls.n	8006122 <_malloc_r+0x7e>
 8006102:	600b      	str	r3, [r1, #0]
 8006104:	50cd      	str	r5, [r1, r3]
 8006106:	18cc      	adds	r4, r1, r3
 8006108:	4630      	mov	r0, r6
 800610a:	f000 f848 	bl	800619e <__malloc_unlock>
 800610e:	f104 000b 	add.w	r0, r4, #11
 8006112:	1d23      	adds	r3, r4, #4
 8006114:	f020 0007 	bic.w	r0, r0, #7
 8006118:	1ac3      	subs	r3, r0, r3
 800611a:	d0d3      	beq.n	80060c4 <_malloc_r+0x20>
 800611c:	425a      	negs	r2, r3
 800611e:	50e2      	str	r2, [r4, r3]
 8006120:	e7d0      	b.n	80060c4 <_malloc_r+0x20>
 8006122:	428c      	cmp	r4, r1
 8006124:	684b      	ldr	r3, [r1, #4]
 8006126:	bf16      	itet	ne
 8006128:	6063      	strne	r3, [r4, #4]
 800612a:	6013      	streq	r3, [r2, #0]
 800612c:	460c      	movne	r4, r1
 800612e:	e7eb      	b.n	8006108 <_malloc_r+0x64>
 8006130:	460c      	mov	r4, r1
 8006132:	6849      	ldr	r1, [r1, #4]
 8006134:	e7cc      	b.n	80060d0 <_malloc_r+0x2c>
 8006136:	1cc4      	adds	r4, r0, #3
 8006138:	f024 0403 	bic.w	r4, r4, #3
 800613c:	42a0      	cmp	r0, r4
 800613e:	d005      	beq.n	800614c <_malloc_r+0xa8>
 8006140:	1a21      	subs	r1, r4, r0
 8006142:	4630      	mov	r0, r6
 8006144:	f000 f808 	bl	8006158 <_sbrk_r>
 8006148:	3001      	adds	r0, #1
 800614a:	d0cf      	beq.n	80060ec <_malloc_r+0x48>
 800614c:	6025      	str	r5, [r4, #0]
 800614e:	e7db      	b.n	8006108 <_malloc_r+0x64>
 8006150:	20000200 	.word	0x20000200
 8006154:	20000204 	.word	0x20000204

08006158 <_sbrk_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4c06      	ldr	r4, [pc, #24]	; (8006174 <_sbrk_r+0x1c>)
 800615c:	2300      	movs	r3, #0
 800615e:	4605      	mov	r5, r0
 8006160:	4608      	mov	r0, r1
 8006162:	6023      	str	r3, [r4, #0]
 8006164:	f7fb faf6 	bl	8001754 <_sbrk>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_sbrk_r+0x1a>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	b103      	cbz	r3, 8006172 <_sbrk_r+0x1a>
 8006170:	602b      	str	r3, [r5, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20001ecc 	.word	0x20001ecc

08006178 <__ascii_mbtowc>:
 8006178:	b082      	sub	sp, #8
 800617a:	b901      	cbnz	r1, 800617e <__ascii_mbtowc+0x6>
 800617c:	a901      	add	r1, sp, #4
 800617e:	b142      	cbz	r2, 8006192 <__ascii_mbtowc+0x1a>
 8006180:	b14b      	cbz	r3, 8006196 <__ascii_mbtowc+0x1e>
 8006182:	7813      	ldrb	r3, [r2, #0]
 8006184:	600b      	str	r3, [r1, #0]
 8006186:	7812      	ldrb	r2, [r2, #0]
 8006188:	1c10      	adds	r0, r2, #0
 800618a:	bf18      	it	ne
 800618c:	2001      	movne	r0, #1
 800618e:	b002      	add	sp, #8
 8006190:	4770      	bx	lr
 8006192:	4610      	mov	r0, r2
 8006194:	e7fb      	b.n	800618e <__ascii_mbtowc+0x16>
 8006196:	f06f 0001 	mvn.w	r0, #1
 800619a:	e7f8      	b.n	800618e <__ascii_mbtowc+0x16>

0800619c <__malloc_lock>:
 800619c:	4770      	bx	lr

0800619e <__malloc_unlock>:
 800619e:	4770      	bx	lr

080061a0 <__ascii_wctomb>:
 80061a0:	b149      	cbz	r1, 80061b6 <__ascii_wctomb+0x16>
 80061a2:	2aff      	cmp	r2, #255	; 0xff
 80061a4:	bf85      	ittet	hi
 80061a6:	238a      	movhi	r3, #138	; 0x8a
 80061a8:	6003      	strhi	r3, [r0, #0]
 80061aa:	700a      	strbls	r2, [r1, #0]
 80061ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80061b0:	bf98      	it	ls
 80061b2:	2001      	movls	r0, #1
 80061b4:	4770      	bx	lr
 80061b6:	4608      	mov	r0, r1
 80061b8:	4770      	bx	lr
	...

080061bc <asin>:
 80061bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061be:	ed2d 8b02 	vpush	{d8}
 80061c2:	4e26      	ldr	r6, [pc, #152]	; (800625c <asin+0xa0>)
 80061c4:	b08b      	sub	sp, #44	; 0x2c
 80061c6:	ec55 4b10 	vmov	r4, r5, d0
 80061ca:	f000 f851 	bl	8006270 <__ieee754_asin>
 80061ce:	f996 3000 	ldrsb.w	r3, [r6]
 80061d2:	eeb0 8a40 	vmov.f32	s16, s0
 80061d6:	eef0 8a60 	vmov.f32	s17, s1
 80061da:	3301      	adds	r3, #1
 80061dc:	d036      	beq.n	800624c <asin+0x90>
 80061de:	4622      	mov	r2, r4
 80061e0:	462b      	mov	r3, r5
 80061e2:	4620      	mov	r0, r4
 80061e4:	4629      	mov	r1, r5
 80061e6:	f7fa fc6d 	bl	8000ac4 <__aeabi_dcmpun>
 80061ea:	4607      	mov	r7, r0
 80061ec:	bb70      	cbnz	r0, 800624c <asin+0x90>
 80061ee:	ec45 4b10 	vmov	d0, r4, r5
 80061f2:	f000 fafd 	bl	80067f0 <fabs>
 80061f6:	2200      	movs	r2, #0
 80061f8:	4b19      	ldr	r3, [pc, #100]	; (8006260 <asin+0xa4>)
 80061fa:	ec51 0b10 	vmov	r0, r1, d0
 80061fe:	f7fa fc57 	bl	8000ab0 <__aeabi_dcmpgt>
 8006202:	b318      	cbz	r0, 800624c <asin+0x90>
 8006204:	2301      	movs	r3, #1
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	4816      	ldr	r0, [pc, #88]	; (8006264 <asin+0xa8>)
 800620a:	4b17      	ldr	r3, [pc, #92]	; (8006268 <asin+0xac>)
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	9708      	str	r7, [sp, #32]
 8006210:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006214:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006218:	f000 faf6 	bl	8006808 <nan>
 800621c:	f996 3000 	ldrsb.w	r3, [r6]
 8006220:	2b02      	cmp	r3, #2
 8006222:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006226:	d104      	bne.n	8006232 <asin+0x76>
 8006228:	f7fe fa72 	bl	8004710 <__errno>
 800622c:	2321      	movs	r3, #33	; 0x21
 800622e:	6003      	str	r3, [r0, #0]
 8006230:	e004      	b.n	800623c <asin+0x80>
 8006232:	4668      	mov	r0, sp
 8006234:	f000 fae5 	bl	8006802 <matherr>
 8006238:	2800      	cmp	r0, #0
 800623a:	d0f5      	beq.n	8006228 <asin+0x6c>
 800623c:	9b08      	ldr	r3, [sp, #32]
 800623e:	b11b      	cbz	r3, 8006248 <asin+0x8c>
 8006240:	f7fe fa66 	bl	8004710 <__errno>
 8006244:	9b08      	ldr	r3, [sp, #32]
 8006246:	6003      	str	r3, [r0, #0]
 8006248:	ed9d 8b06 	vldr	d8, [sp, #24]
 800624c:	eeb0 0a48 	vmov.f32	s0, s16
 8006250:	eef0 0a68 	vmov.f32	s1, s17
 8006254:	b00b      	add	sp, #44	; 0x2c
 8006256:	ecbd 8b02 	vpop	{d8}
 800625a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800625c:	200001dc 	.word	0x200001dc
 8006260:	3ff00000 	.word	0x3ff00000
 8006264:	0800697d 	.word	0x0800697d
 8006268:	08006a7f 	.word	0x08006a7f
 800626c:	00000000 	.word	0x00000000

08006270 <__ieee754_asin>:
 8006270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	ec55 4b10 	vmov	r4, r5, d0
 8006278:	4bcb      	ldr	r3, [pc, #812]	; (80065a8 <__ieee754_asin+0x338>)
 800627a:	b087      	sub	sp, #28
 800627c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8006280:	429f      	cmp	r7, r3
 8006282:	9501      	str	r5, [sp, #4]
 8006284:	dd31      	ble.n	80062ea <__ieee754_asin+0x7a>
 8006286:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800628a:	ee10 3a10 	vmov	r3, s0
 800628e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8006292:	433b      	orrs	r3, r7
 8006294:	d117      	bne.n	80062c6 <__ieee754_asin+0x56>
 8006296:	a3aa      	add	r3, pc, #680	; (adr r3, 8006540 <__ieee754_asin+0x2d0>)
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	ee10 0a10 	vmov	r0, s0
 80062a0:	4629      	mov	r1, r5
 80062a2:	f7fa f975 	bl	8000590 <__aeabi_dmul>
 80062a6:	a3a8      	add	r3, pc, #672	; (adr r3, 8006548 <__ieee754_asin+0x2d8>)
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	4606      	mov	r6, r0
 80062ae:	460f      	mov	r7, r1
 80062b0:	4620      	mov	r0, r4
 80062b2:	4629      	mov	r1, r5
 80062b4:	f7fa f96c 	bl	8000590 <__aeabi_dmul>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4630      	mov	r0, r6
 80062be:	4639      	mov	r1, r7
 80062c0:	f7f9 ffb0 	bl	8000224 <__adddf3>
 80062c4:	e00a      	b.n	80062dc <__ieee754_asin+0x6c>
 80062c6:	ee10 2a10 	vmov	r2, s0
 80062ca:	462b      	mov	r3, r5
 80062cc:	4620      	mov	r0, r4
 80062ce:	4629      	mov	r1, r5
 80062d0:	f7f9 ffa6 	bl	8000220 <__aeabi_dsub>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	f7fa fa84 	bl	80007e4 <__aeabi_ddiv>
 80062dc:	4604      	mov	r4, r0
 80062de:	460d      	mov	r5, r1
 80062e0:	ec45 4b10 	vmov	d0, r4, r5
 80062e4:	b007      	add	sp, #28
 80062e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ea:	4bb0      	ldr	r3, [pc, #704]	; (80065ac <__ieee754_asin+0x33c>)
 80062ec:	429f      	cmp	r7, r3
 80062ee:	dc11      	bgt.n	8006314 <__ieee754_asin+0xa4>
 80062f0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80062f4:	f280 80ae 	bge.w	8006454 <__ieee754_asin+0x1e4>
 80062f8:	a395      	add	r3, pc, #596	; (adr r3, 8006550 <__ieee754_asin+0x2e0>)
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	ee10 0a10 	vmov	r0, s0
 8006302:	4629      	mov	r1, r5
 8006304:	f7f9 ff8e 	bl	8000224 <__adddf3>
 8006308:	2200      	movs	r2, #0
 800630a:	4ba9      	ldr	r3, [pc, #676]	; (80065b0 <__ieee754_asin+0x340>)
 800630c:	f7fa fbd0 	bl	8000ab0 <__aeabi_dcmpgt>
 8006310:	2800      	cmp	r0, #0
 8006312:	d1e5      	bne.n	80062e0 <__ieee754_asin+0x70>
 8006314:	ec45 4b10 	vmov	d0, r4, r5
 8006318:	f000 fa6a 	bl	80067f0 <fabs>
 800631c:	2000      	movs	r0, #0
 800631e:	ec53 2b10 	vmov	r2, r3, d0
 8006322:	49a3      	ldr	r1, [pc, #652]	; (80065b0 <__ieee754_asin+0x340>)
 8006324:	f7f9 ff7c 	bl	8000220 <__aeabi_dsub>
 8006328:	2200      	movs	r2, #0
 800632a:	4ba2      	ldr	r3, [pc, #648]	; (80065b4 <__ieee754_asin+0x344>)
 800632c:	f7fa f930 	bl	8000590 <__aeabi_dmul>
 8006330:	a389      	add	r3, pc, #548	; (adr r3, 8006558 <__ieee754_asin+0x2e8>)
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	4604      	mov	r4, r0
 8006338:	460d      	mov	r5, r1
 800633a:	f7fa f929 	bl	8000590 <__aeabi_dmul>
 800633e:	a388      	add	r3, pc, #544	; (adr r3, 8006560 <__ieee754_asin+0x2f0>)
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	f7f9 ff6e 	bl	8000224 <__adddf3>
 8006348:	4622      	mov	r2, r4
 800634a:	462b      	mov	r3, r5
 800634c:	f7fa f920 	bl	8000590 <__aeabi_dmul>
 8006350:	a385      	add	r3, pc, #532	; (adr r3, 8006568 <__ieee754_asin+0x2f8>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f7f9 ff63 	bl	8000220 <__aeabi_dsub>
 800635a:	4622      	mov	r2, r4
 800635c:	462b      	mov	r3, r5
 800635e:	f7fa f917 	bl	8000590 <__aeabi_dmul>
 8006362:	a383      	add	r3, pc, #524	; (adr r3, 8006570 <__ieee754_asin+0x300>)
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	f7f9 ff5c 	bl	8000224 <__adddf3>
 800636c:	4622      	mov	r2, r4
 800636e:	462b      	mov	r3, r5
 8006370:	f7fa f90e 	bl	8000590 <__aeabi_dmul>
 8006374:	a380      	add	r3, pc, #512	; (adr r3, 8006578 <__ieee754_asin+0x308>)
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f7f9 ff51 	bl	8000220 <__aeabi_dsub>
 800637e:	4622      	mov	r2, r4
 8006380:	462b      	mov	r3, r5
 8006382:	f7fa f905 	bl	8000590 <__aeabi_dmul>
 8006386:	a37e      	add	r3, pc, #504	; (adr r3, 8006580 <__ieee754_asin+0x310>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f7f9 ff4a 	bl	8000224 <__adddf3>
 8006390:	4622      	mov	r2, r4
 8006392:	462b      	mov	r3, r5
 8006394:	f7fa f8fc 	bl	8000590 <__aeabi_dmul>
 8006398:	a37b      	add	r3, pc, #492	; (adr r3, 8006588 <__ieee754_asin+0x318>)
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	4680      	mov	r8, r0
 80063a0:	4689      	mov	r9, r1
 80063a2:	4620      	mov	r0, r4
 80063a4:	4629      	mov	r1, r5
 80063a6:	f7fa f8f3 	bl	8000590 <__aeabi_dmul>
 80063aa:	a379      	add	r3, pc, #484	; (adr r3, 8006590 <__ieee754_asin+0x320>)
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f7f9 ff36 	bl	8000220 <__aeabi_dsub>
 80063b4:	4622      	mov	r2, r4
 80063b6:	462b      	mov	r3, r5
 80063b8:	f7fa f8ea 	bl	8000590 <__aeabi_dmul>
 80063bc:	a376      	add	r3, pc, #472	; (adr r3, 8006598 <__ieee754_asin+0x328>)
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	f7f9 ff2f 	bl	8000224 <__adddf3>
 80063c6:	4622      	mov	r2, r4
 80063c8:	462b      	mov	r3, r5
 80063ca:	f7fa f8e1 	bl	8000590 <__aeabi_dmul>
 80063ce:	a374      	add	r3, pc, #464	; (adr r3, 80065a0 <__ieee754_asin+0x330>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f7f9 ff24 	bl	8000220 <__aeabi_dsub>
 80063d8:	4622      	mov	r2, r4
 80063da:	462b      	mov	r3, r5
 80063dc:	f7fa f8d8 	bl	8000590 <__aeabi_dmul>
 80063e0:	4b73      	ldr	r3, [pc, #460]	; (80065b0 <__ieee754_asin+0x340>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	f7f9 ff1e 	bl	8000224 <__adddf3>
 80063e8:	ec45 4b10 	vmov	d0, r4, r5
 80063ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063f0:	f000 f94e 	bl	8006690 <__ieee754_sqrt>
 80063f4:	4b70      	ldr	r3, [pc, #448]	; (80065b8 <__ieee754_asin+0x348>)
 80063f6:	429f      	cmp	r7, r3
 80063f8:	ec5b ab10 	vmov	sl, fp, d0
 80063fc:	f340 80de 	ble.w	80065bc <__ieee754_asin+0x34c>
 8006400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006404:	4640      	mov	r0, r8
 8006406:	4649      	mov	r1, r9
 8006408:	f7fa f9ec 	bl	80007e4 <__aeabi_ddiv>
 800640c:	4652      	mov	r2, sl
 800640e:	465b      	mov	r3, fp
 8006410:	f7fa f8be 	bl	8000590 <__aeabi_dmul>
 8006414:	4652      	mov	r2, sl
 8006416:	465b      	mov	r3, fp
 8006418:	f7f9 ff04 	bl	8000224 <__adddf3>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	f7f9 ff00 	bl	8000224 <__adddf3>
 8006424:	a348      	add	r3, pc, #288	; (adr r3, 8006548 <__ieee754_asin+0x2d8>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f7f9 fef9 	bl	8000220 <__aeabi_dsub>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	a143      	add	r1, pc, #268	; (adr r1, 8006540 <__ieee754_asin+0x2d0>)
 8006434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006438:	f7f9 fef2 	bl	8000220 <__aeabi_dsub>
 800643c:	9b01      	ldr	r3, [sp, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	bfdc      	itt	le
 8006442:	4602      	movle	r2, r0
 8006444:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006448:	4604      	mov	r4, r0
 800644a:	460d      	mov	r5, r1
 800644c:	bfdc      	itt	le
 800644e:	4614      	movle	r4, r2
 8006450:	461d      	movle	r5, r3
 8006452:	e745      	b.n	80062e0 <__ieee754_asin+0x70>
 8006454:	ee10 2a10 	vmov	r2, s0
 8006458:	ee10 0a10 	vmov	r0, s0
 800645c:	462b      	mov	r3, r5
 800645e:	4629      	mov	r1, r5
 8006460:	f7fa f896 	bl	8000590 <__aeabi_dmul>
 8006464:	a33c      	add	r3, pc, #240	; (adr r3, 8006558 <__ieee754_asin+0x2e8>)
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	4606      	mov	r6, r0
 800646c:	460f      	mov	r7, r1
 800646e:	f7fa f88f 	bl	8000590 <__aeabi_dmul>
 8006472:	a33b      	add	r3, pc, #236	; (adr r3, 8006560 <__ieee754_asin+0x2f0>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f7f9 fed4 	bl	8000224 <__adddf3>
 800647c:	4632      	mov	r2, r6
 800647e:	463b      	mov	r3, r7
 8006480:	f7fa f886 	bl	8000590 <__aeabi_dmul>
 8006484:	a338      	add	r3, pc, #224	; (adr r3, 8006568 <__ieee754_asin+0x2f8>)
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	f7f9 fec9 	bl	8000220 <__aeabi_dsub>
 800648e:	4632      	mov	r2, r6
 8006490:	463b      	mov	r3, r7
 8006492:	f7fa f87d 	bl	8000590 <__aeabi_dmul>
 8006496:	a336      	add	r3, pc, #216	; (adr r3, 8006570 <__ieee754_asin+0x300>)
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f7f9 fec2 	bl	8000224 <__adddf3>
 80064a0:	4632      	mov	r2, r6
 80064a2:	463b      	mov	r3, r7
 80064a4:	f7fa f874 	bl	8000590 <__aeabi_dmul>
 80064a8:	a333      	add	r3, pc, #204	; (adr r3, 8006578 <__ieee754_asin+0x308>)
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f7f9 feb7 	bl	8000220 <__aeabi_dsub>
 80064b2:	4632      	mov	r2, r6
 80064b4:	463b      	mov	r3, r7
 80064b6:	f7fa f86b 	bl	8000590 <__aeabi_dmul>
 80064ba:	a331      	add	r3, pc, #196	; (adr r3, 8006580 <__ieee754_asin+0x310>)
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f7f9 feb0 	bl	8000224 <__adddf3>
 80064c4:	4632      	mov	r2, r6
 80064c6:	463b      	mov	r3, r7
 80064c8:	f7fa f862 	bl	8000590 <__aeabi_dmul>
 80064cc:	a32e      	add	r3, pc, #184	; (adr r3, 8006588 <__ieee754_asin+0x318>)
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	4680      	mov	r8, r0
 80064d4:	4689      	mov	r9, r1
 80064d6:	4630      	mov	r0, r6
 80064d8:	4639      	mov	r1, r7
 80064da:	f7fa f859 	bl	8000590 <__aeabi_dmul>
 80064de:	a32c      	add	r3, pc, #176	; (adr r3, 8006590 <__ieee754_asin+0x320>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f7f9 fe9c 	bl	8000220 <__aeabi_dsub>
 80064e8:	4632      	mov	r2, r6
 80064ea:	463b      	mov	r3, r7
 80064ec:	f7fa f850 	bl	8000590 <__aeabi_dmul>
 80064f0:	a329      	add	r3, pc, #164	; (adr r3, 8006598 <__ieee754_asin+0x328>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7f9 fe95 	bl	8000224 <__adddf3>
 80064fa:	4632      	mov	r2, r6
 80064fc:	463b      	mov	r3, r7
 80064fe:	f7fa f847 	bl	8000590 <__aeabi_dmul>
 8006502:	a327      	add	r3, pc, #156	; (adr r3, 80065a0 <__ieee754_asin+0x330>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f7f9 fe8a 	bl	8000220 <__aeabi_dsub>
 800650c:	4632      	mov	r2, r6
 800650e:	463b      	mov	r3, r7
 8006510:	f7fa f83e 	bl	8000590 <__aeabi_dmul>
 8006514:	2200      	movs	r2, #0
 8006516:	4b26      	ldr	r3, [pc, #152]	; (80065b0 <__ieee754_asin+0x340>)
 8006518:	f7f9 fe84 	bl	8000224 <__adddf3>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4640      	mov	r0, r8
 8006522:	4649      	mov	r1, r9
 8006524:	f7fa f95e 	bl	80007e4 <__aeabi_ddiv>
 8006528:	4622      	mov	r2, r4
 800652a:	462b      	mov	r3, r5
 800652c:	f7fa f830 	bl	8000590 <__aeabi_dmul>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4620      	mov	r0, r4
 8006536:	4629      	mov	r1, r5
 8006538:	e6c2      	b.n	80062c0 <__ieee754_asin+0x50>
 800653a:	bf00      	nop
 800653c:	f3af 8000 	nop.w
 8006540:	54442d18 	.word	0x54442d18
 8006544:	3ff921fb 	.word	0x3ff921fb
 8006548:	33145c07 	.word	0x33145c07
 800654c:	3c91a626 	.word	0x3c91a626
 8006550:	8800759c 	.word	0x8800759c
 8006554:	7e37e43c 	.word	0x7e37e43c
 8006558:	0dfdf709 	.word	0x0dfdf709
 800655c:	3f023de1 	.word	0x3f023de1
 8006560:	7501b288 	.word	0x7501b288
 8006564:	3f49efe0 	.word	0x3f49efe0
 8006568:	b5688f3b 	.word	0xb5688f3b
 800656c:	3fa48228 	.word	0x3fa48228
 8006570:	0e884455 	.word	0x0e884455
 8006574:	3fc9c155 	.word	0x3fc9c155
 8006578:	03eb6f7d 	.word	0x03eb6f7d
 800657c:	3fd4d612 	.word	0x3fd4d612
 8006580:	55555555 	.word	0x55555555
 8006584:	3fc55555 	.word	0x3fc55555
 8006588:	b12e9282 	.word	0xb12e9282
 800658c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006590:	1b8d0159 	.word	0x1b8d0159
 8006594:	3fe6066c 	.word	0x3fe6066c
 8006598:	9c598ac8 	.word	0x9c598ac8
 800659c:	40002ae5 	.word	0x40002ae5
 80065a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80065a4:	40033a27 	.word	0x40033a27
 80065a8:	3fefffff 	.word	0x3fefffff
 80065ac:	3fdfffff 	.word	0x3fdfffff
 80065b0:	3ff00000 	.word	0x3ff00000
 80065b4:	3fe00000 	.word	0x3fe00000
 80065b8:	3fef3332 	.word	0x3fef3332
 80065bc:	ee10 2a10 	vmov	r2, s0
 80065c0:	ee10 0a10 	vmov	r0, s0
 80065c4:	465b      	mov	r3, fp
 80065c6:	4659      	mov	r1, fp
 80065c8:	f7f9 fe2c 	bl	8000224 <__adddf3>
 80065cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7fa f904 	bl	80007e4 <__aeabi_ddiv>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065e4:	f7f9 ffd4 	bl	8000590 <__aeabi_dmul>
 80065e8:	2600      	movs	r6, #0
 80065ea:	4680      	mov	r8, r0
 80065ec:	4689      	mov	r9, r1
 80065ee:	4632      	mov	r2, r6
 80065f0:	465b      	mov	r3, fp
 80065f2:	4630      	mov	r0, r6
 80065f4:	4659      	mov	r1, fp
 80065f6:	f7f9 ffcb 	bl	8000590 <__aeabi_dmul>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4620      	mov	r0, r4
 8006600:	4629      	mov	r1, r5
 8006602:	f7f9 fe0d 	bl	8000220 <__aeabi_dsub>
 8006606:	4632      	mov	r2, r6
 8006608:	4604      	mov	r4, r0
 800660a:	460d      	mov	r5, r1
 800660c:	465b      	mov	r3, fp
 800660e:	4650      	mov	r0, sl
 8006610:	4659      	mov	r1, fp
 8006612:	f7f9 fe07 	bl	8000224 <__adddf3>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4620      	mov	r0, r4
 800661c:	4629      	mov	r1, r5
 800661e:	f7fa f8e1 	bl	80007e4 <__aeabi_ddiv>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	f7f9 fdfd 	bl	8000224 <__adddf3>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	a114      	add	r1, pc, #80	; (adr r1, 8006680 <__ieee754_asin+0x410>)
 8006630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006634:	f7f9 fdf4 	bl	8000220 <__aeabi_dsub>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4640      	mov	r0, r8
 800663e:	4649      	mov	r1, r9
 8006640:	f7f9 fdee 	bl	8000220 <__aeabi_dsub>
 8006644:	465f      	mov	r7, fp
 8006646:	4604      	mov	r4, r0
 8006648:	460d      	mov	r5, r1
 800664a:	4632      	mov	r2, r6
 800664c:	465b      	mov	r3, fp
 800664e:	4630      	mov	r0, r6
 8006650:	4639      	mov	r1, r7
 8006652:	f7f9 fde7 	bl	8000224 <__adddf3>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	a10b      	add	r1, pc, #44	; (adr r1, 8006688 <__ieee754_asin+0x418>)
 800665c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006660:	f7f9 fdde 	bl	8000220 <__aeabi_dsub>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4620      	mov	r0, r4
 800666a:	4629      	mov	r1, r5
 800666c:	f7f9 fdd8 	bl	8000220 <__aeabi_dsub>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	a104      	add	r1, pc, #16	; (adr r1, 8006688 <__ieee754_asin+0x418>)
 8006676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800667a:	e6dd      	b.n	8006438 <__ieee754_asin+0x1c8>
 800667c:	f3af 8000 	nop.w
 8006680:	33145c07 	.word	0x33145c07
 8006684:	3c91a626 	.word	0x3c91a626
 8006688:	54442d18 	.word	0x54442d18
 800668c:	3fe921fb 	.word	0x3fe921fb

08006690 <__ieee754_sqrt>:
 8006690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006694:	4955      	ldr	r1, [pc, #340]	; (80067ec <__ieee754_sqrt+0x15c>)
 8006696:	ec55 4b10 	vmov	r4, r5, d0
 800669a:	43a9      	bics	r1, r5
 800669c:	462b      	mov	r3, r5
 800669e:	462a      	mov	r2, r5
 80066a0:	d112      	bne.n	80066c8 <__ieee754_sqrt+0x38>
 80066a2:	ee10 2a10 	vmov	r2, s0
 80066a6:	ee10 0a10 	vmov	r0, s0
 80066aa:	4629      	mov	r1, r5
 80066ac:	f7f9 ff70 	bl	8000590 <__aeabi_dmul>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4620      	mov	r0, r4
 80066b6:	4629      	mov	r1, r5
 80066b8:	f7f9 fdb4 	bl	8000224 <__adddf3>
 80066bc:	4604      	mov	r4, r0
 80066be:	460d      	mov	r5, r1
 80066c0:	ec45 4b10 	vmov	d0, r4, r5
 80066c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c8:	2d00      	cmp	r5, #0
 80066ca:	ee10 0a10 	vmov	r0, s0
 80066ce:	4621      	mov	r1, r4
 80066d0:	dc0f      	bgt.n	80066f2 <__ieee754_sqrt+0x62>
 80066d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80066d6:	4330      	orrs	r0, r6
 80066d8:	d0f2      	beq.n	80066c0 <__ieee754_sqrt+0x30>
 80066da:	b155      	cbz	r5, 80066f2 <__ieee754_sqrt+0x62>
 80066dc:	ee10 2a10 	vmov	r2, s0
 80066e0:	4620      	mov	r0, r4
 80066e2:	4629      	mov	r1, r5
 80066e4:	f7f9 fd9c 	bl	8000220 <__aeabi_dsub>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	f7fa f87a 	bl	80007e4 <__aeabi_ddiv>
 80066f0:	e7e4      	b.n	80066bc <__ieee754_sqrt+0x2c>
 80066f2:	151b      	asrs	r3, r3, #20
 80066f4:	d073      	beq.n	80067de <__ieee754_sqrt+0x14e>
 80066f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80066fa:	07dd      	lsls	r5, r3, #31
 80066fc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006700:	bf48      	it	mi
 8006702:	0fc8      	lsrmi	r0, r1, #31
 8006704:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006708:	bf44      	itt	mi
 800670a:	0049      	lslmi	r1, r1, #1
 800670c:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006710:	2500      	movs	r5, #0
 8006712:	1058      	asrs	r0, r3, #1
 8006714:	0fcb      	lsrs	r3, r1, #31
 8006716:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800671a:	0049      	lsls	r1, r1, #1
 800671c:	2316      	movs	r3, #22
 800671e:	462c      	mov	r4, r5
 8006720:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006724:	19a7      	adds	r7, r4, r6
 8006726:	4297      	cmp	r7, r2
 8006728:	bfde      	ittt	le
 800672a:	19bc      	addle	r4, r7, r6
 800672c:	1bd2      	suble	r2, r2, r7
 800672e:	19ad      	addle	r5, r5, r6
 8006730:	0fcf      	lsrs	r7, r1, #31
 8006732:	3b01      	subs	r3, #1
 8006734:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006738:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800673c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006740:	d1f0      	bne.n	8006724 <__ieee754_sqrt+0x94>
 8006742:	f04f 0c20 	mov.w	ip, #32
 8006746:	469e      	mov	lr, r3
 8006748:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800674c:	42a2      	cmp	r2, r4
 800674e:	eb06 070e 	add.w	r7, r6, lr
 8006752:	dc02      	bgt.n	800675a <__ieee754_sqrt+0xca>
 8006754:	d112      	bne.n	800677c <__ieee754_sqrt+0xec>
 8006756:	428f      	cmp	r7, r1
 8006758:	d810      	bhi.n	800677c <__ieee754_sqrt+0xec>
 800675a:	2f00      	cmp	r7, #0
 800675c:	eb07 0e06 	add.w	lr, r7, r6
 8006760:	da42      	bge.n	80067e8 <__ieee754_sqrt+0x158>
 8006762:	f1be 0f00 	cmp.w	lr, #0
 8006766:	db3f      	blt.n	80067e8 <__ieee754_sqrt+0x158>
 8006768:	f104 0801 	add.w	r8, r4, #1
 800676c:	1b12      	subs	r2, r2, r4
 800676e:	428f      	cmp	r7, r1
 8006770:	bf88      	it	hi
 8006772:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006776:	1bc9      	subs	r1, r1, r7
 8006778:	4433      	add	r3, r6
 800677a:	4644      	mov	r4, r8
 800677c:	0052      	lsls	r2, r2, #1
 800677e:	f1bc 0c01 	subs.w	ip, ip, #1
 8006782:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006786:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800678a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800678e:	d1dd      	bne.n	800674c <__ieee754_sqrt+0xbc>
 8006790:	430a      	orrs	r2, r1
 8006792:	d006      	beq.n	80067a2 <__ieee754_sqrt+0x112>
 8006794:	1c5c      	adds	r4, r3, #1
 8006796:	bf13      	iteet	ne
 8006798:	3301      	addne	r3, #1
 800679a:	3501      	addeq	r5, #1
 800679c:	4663      	moveq	r3, ip
 800679e:	f023 0301 	bicne.w	r3, r3, #1
 80067a2:	106a      	asrs	r2, r5, #1
 80067a4:	085b      	lsrs	r3, r3, #1
 80067a6:	07e9      	lsls	r1, r5, #31
 80067a8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80067ac:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80067b0:	bf48      	it	mi
 80067b2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80067b6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80067ba:	461c      	mov	r4, r3
 80067bc:	e780      	b.n	80066c0 <__ieee754_sqrt+0x30>
 80067be:	0aca      	lsrs	r2, r1, #11
 80067c0:	3815      	subs	r0, #21
 80067c2:	0549      	lsls	r1, r1, #21
 80067c4:	2a00      	cmp	r2, #0
 80067c6:	d0fa      	beq.n	80067be <__ieee754_sqrt+0x12e>
 80067c8:	02d6      	lsls	r6, r2, #11
 80067ca:	d50a      	bpl.n	80067e2 <__ieee754_sqrt+0x152>
 80067cc:	f1c3 0420 	rsb	r4, r3, #32
 80067d0:	fa21 f404 	lsr.w	r4, r1, r4
 80067d4:	1e5d      	subs	r5, r3, #1
 80067d6:	4099      	lsls	r1, r3
 80067d8:	4322      	orrs	r2, r4
 80067da:	1b43      	subs	r3, r0, r5
 80067dc:	e78b      	b.n	80066f6 <__ieee754_sqrt+0x66>
 80067de:	4618      	mov	r0, r3
 80067e0:	e7f0      	b.n	80067c4 <__ieee754_sqrt+0x134>
 80067e2:	0052      	lsls	r2, r2, #1
 80067e4:	3301      	adds	r3, #1
 80067e6:	e7ef      	b.n	80067c8 <__ieee754_sqrt+0x138>
 80067e8:	46a0      	mov	r8, r4
 80067ea:	e7bf      	b.n	800676c <__ieee754_sqrt+0xdc>
 80067ec:	7ff00000 	.word	0x7ff00000

080067f0 <fabs>:
 80067f0:	ec51 0b10 	vmov	r0, r1, d0
 80067f4:	ee10 2a10 	vmov	r2, s0
 80067f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80067fc:	ec43 2b10 	vmov	d0, r2, r3
 8006800:	4770      	bx	lr

08006802 <matherr>:
 8006802:	2000      	movs	r0, #0
 8006804:	4770      	bx	lr
	...

08006808 <nan>:
 8006808:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006810 <nan+0x8>
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	00000000 	.word	0x00000000
 8006814:	7ff80000 	.word	0x7ff80000

08006818 <_init>:
 8006818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681a:	bf00      	nop
 800681c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681e:	bc08      	pop	{r3}
 8006820:	469e      	mov	lr, r3
 8006822:	4770      	bx	lr

08006824 <_fini>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	bf00      	nop
 8006828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682a:	bc08      	pop	{r3}
 800682c:	469e      	mov	lr, r3
 800682e:	4770      	bx	lr
