
UART_COMMPC_Yaqoob2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003dac  08003dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec4  08003ec4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ecc  08003ecc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ecc  08003ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000070  08003f44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003f44  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000958c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019c2  00000000  00000000  0002962c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d8  00000000  00000000  0002aff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  0002b7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e16  00000000  00000000  0002bec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007294  00000000  00000000  0004dcde  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8aa7  00000000  00000000  00054f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011da19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002474  00000000  00000000  0011da94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003d94 	.word	0x08003d94

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08003d94 	.word	0x08003d94

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fbae 	bl	8000c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f816 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f8cc 	bl	80006ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000514:	f000 f8aa 	bl	800066c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f87e 	bl	8000618 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting my application...\r\n");
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <main+0x2c>)
 800051e:	f003 f813 	bl	8003548 <puts>

  //** Fixed size command of 3 bytes *[]#, Initialise
  //Handles received data
  	HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 8000522:	2203      	movs	r2, #3
 8000524:	4903      	ldr	r1, [pc, #12]	; (8000534 <main+0x30>)
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <main+0x34>)
 8000528:	f002 f858 	bl	80025dc <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x28>
 800052e:	bf00      	nop
 8000530:	08003dac 	.word	0x08003dac
 8000534:	200000fc 	.word	0x200000fc
 8000538:	20000118 	.word	0x20000118

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 031c 	add.w	r3, r7, #28
 8000546:	2234      	movs	r2, #52	; 0x34
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f002 ff98 	bl	8003480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b2a      	ldr	r3, [pc, #168]	; (8000610 <SystemClock_Config+0xd4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a29      	ldr	r2, [pc, #164]	; (8000610 <SystemClock_Config+0xd4>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b27      	ldr	r3, [pc, #156]	; (8000610 <SystemClock_Config+0xd4>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800057c:	2300      	movs	r3, #0
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	4b24      	ldr	r3, [pc, #144]	; (8000614 <SystemClock_Config+0xd8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a22      	ldr	r2, [pc, #136]	; (8000614 <SystemClock_Config+0xd8>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <SystemClock_Config+0xd8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005b0:	2310      	movs	r3, #16
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fcc6 	bl	8001f5c <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005d6:	f000 f979 	bl	80008cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2102      	movs	r1, #2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f9f6 	bl	80019e8 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000602:	f000 f963 	bl	80008cc <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_USART2_UART_Init+0x50>)
 8000620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART2_UART_Init+0x4c>)
 8000650:	f001 fede 	bl	8002410 <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800065a:	f000 f937 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000118 	.word	0x20000118
 8000668:	40004400 	.word	0x40004400

0800066c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_DMA_Init+0x3c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <MX_DMA_Init+0x3c>)
 800067c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_DMA_Init+0x3c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	2010      	movs	r0, #16
 8000694:	f000 fc35 	bl	8000f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000698:	2010      	movs	r0, #16
 800069a:	f000 fc4e 	bl	8000f3a <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b2d      	ldr	r3, [pc, #180]	; (800077c <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a2c      	ldr	r2, [pc, #176]	; (800077c <MX_GPIO_Init+0xd0>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a25      	ldr	r2, [pc, #148]	; (800077c <MX_GPIO_Init+0xd0>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a1e      	ldr	r2, [pc, #120]	; (800077c <MX_GPIO_Init+0xd0>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a17      	ldr	r2, [pc, #92]	; (800077c <MX_GPIO_Init+0xd0>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2120      	movs	r1, #32
 8000736:	4812      	ldr	r0, [pc, #72]	; (8000780 <MX_GPIO_Init+0xd4>)
 8000738:	f001 f93c 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800073c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_GPIO_Init+0xd8>)
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <MX_GPIO_Init+0xdc>)
 8000752:	f000 ff9d 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000756:	2320      	movs	r3, #32
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0xd4>)
 800076e:	f000 ff8f 	bl	8001690 <HAL_GPIO_Init>

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000
 8000784:	10210000 	.word	0x10210000
 8000788:	40020800 	.word	0x40020800

0800078c <__io_putchar>:

/* USER CODE BEGIN 4 */
//just use printf to transmit data
PUTCHAR_PROTOTYPE
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000794:	1d39      	adds	r1, r7, #4
 8000796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800079a:	2201      	movs	r2, #1
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <__io_putchar+0x20>)
 800079e:	f001 fe84 	bl	80024aa <HAL_UART_Transmit>

  return ch;
 80007a2:	687b      	ldr	r3, [r7, #4]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000118 	.word	0x20000118

080007b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */

  switch(myUART_State){
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <HAL_UART_RxCpltCallback+0x94>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <HAL_UART_RxCpltCallback+0x16>
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d02e      	beq.n	8000822 <HAL_UART_RxCpltCallback+0x72>
 80007c4:	e034      	b.n	8000830 <HAL_UART_RxCpltCallback+0x80>
  case UT_START:
	  if(rxBuf[0]=='*' && rxBuf[2]=='#'){
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <HAL_UART_RxCpltCallback+0x98>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b2a      	cmp	r3, #42	; 0x2a
 80007cc:	d11f      	bne.n	800080e <HAL_UART_RxCpltCallback+0x5e>
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <HAL_UART_RxCpltCallback+0x98>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	2b23      	cmp	r3, #35	; 0x23
 80007d4:	d11b      	bne.n	800080e <HAL_UART_RxCpltCallback+0x5e>
			//Start UART DMA receive based on User specified length (Caviat: always ensure user requested)
		  	if(rxBuf[1] <= sizeof(rxBuf)){
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <HAL_UART_RxCpltCallback+0x98>)
 80007d8:	785b      	ldrb	r3, [r3, #1]
 80007da:	2b19      	cmp	r3, #25
 80007dc:	d80e      	bhi.n	80007fc <HAL_UART_RxCpltCallback+0x4c>
		  		printf("Send COMMAND: \r\n");
 80007de:	481b      	ldr	r0, [pc, #108]	; (800084c <HAL_UART_RxCpltCallback+0x9c>)
 80007e0:	f002 feb2 	bl	8003548 <puts>
		  		HAL_UART_Receive_DMA(&huart2,(uint8_t *)rxBuf, rxBuf[1]);
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_UART_RxCpltCallback+0x98>)
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	4916      	ldr	r1, [pc, #88]	; (8000848 <HAL_UART_RxCpltCallback+0x98>)
 80007ee:	4818      	ldr	r0, [pc, #96]	; (8000850 <HAL_UART_RxCpltCallback+0xa0>)
 80007f0:	f001 fef4 	bl	80025dc <HAL_UART_Receive_DMA>
		  		myUART_State = UT_APP;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <HAL_UART_RxCpltCallback+0x94>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
		  	if(rxBuf[1] <= sizeof(rxBuf)){
 80007fa:	e011      	b.n	8000820 <HAL_UART_RxCpltCallback+0x70>
		  	}
		  	else{
		  		printf("Invalid size\r\n");
 80007fc:	4815      	ldr	r0, [pc, #84]	; (8000854 <HAL_UART_RxCpltCallback+0xa4>)
 80007fe:	f002 fea3 	bl	8003548 <puts>
		  		HAL_UART_Receive_DMA(&huart2,(uint8_t *)rxBuf,3);
 8000802:	2203      	movs	r2, #3
 8000804:	4910      	ldr	r1, [pc, #64]	; (8000848 <HAL_UART_RxCpltCallback+0x98>)
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <HAL_UART_RxCpltCallback+0xa0>)
 8000808:	f001 fee8 	bl	80025dc <HAL_UART_Receive_DMA>
		  	if(rxBuf[1] <= sizeof(rxBuf)){
 800080c:	e008      	b.n	8000820 <HAL_UART_RxCpltCallback+0x70>
		  	}
	  }
	  else{
			printf("Invalid command\r\n");
 800080e:	4812      	ldr	r0, [pc, #72]	; (8000858 <HAL_UART_RxCpltCallback+0xa8>)
 8000810:	f002 fe9a 	bl	8003548 <puts>
			HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 8000814:	2203      	movs	r2, #3
 8000816:	490c      	ldr	r1, [pc, #48]	; (8000848 <HAL_UART_RxCpltCallback+0x98>)
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <HAL_UART_RxCpltCallback+0xa0>)
 800081a:	f001 fedf 	bl	80025dc <HAL_UART_Receive_DMA>
	  }
	  break;
 800081e:	e007      	b.n	8000830 <HAL_UART_RxCpltCallback+0x80>
 8000820:	e006      	b.n	8000830 <HAL_UART_RxCpltCallback+0x80>
  case UT_APP:
	  application_handling(rxBuf);
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <HAL_UART_RxCpltCallback+0x98>)
 8000824:	f000 f81a 	bl	800085c <application_handling>
	  memset(rxBuf, sizeof(rxBuf),0); //resets buffer to 0 to not leave any garbage
	  //Get back to state 1
	  myUART_State = UT_START;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_UART_RxCpltCallback+0x94>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
	  break;
 800082e:	bf00      	nop
  }
  HAL_UART_Receive_DMA(&huart2,(uint8_t *)rxBuf,3); //listen for another message
 8000830:	2203      	movs	r2, #3
 8000832:	4905      	ldr	r1, [pc, #20]	; (8000848 <HAL_UART_RxCpltCallback+0x98>)
 8000834:	4806      	ldr	r0, [pc, #24]	; (8000850 <HAL_UART_RxCpltCallback+0xa0>)
 8000836:	f001 fed1 	bl	80025dc <HAL_UART_Receive_DMA>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000008c 	.word	0x2000008c
 8000848:	200000fc 	.word	0x200000fc
 800084c:	08003dc8 	.word	0x08003dc8
 8000850:	20000118 	.word	0x20000118
 8000854:	08003dd8 	.word	0x08003dd8
 8000858:	08003de8 	.word	0x08003de8

0800085c <application_handling>:

//UART Application handling function
void application_handling(char *cmd)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	if(strstr(cmd, "LED ON") != NULL)
 8000864:	4913      	ldr	r1, [pc, #76]	; (80008b4 <application_handling+0x58>)
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f002 fe76 	bl	8003558 <strstr>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d008      	beq.n	8000884 <application_handling+0x28>
	{
		//Turn LED ON
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2120      	movs	r1, #32
 8000876:	4810      	ldr	r0, [pc, #64]	; (80008b8 <application_handling+0x5c>)
 8000878:	f001 f89c 	bl	80019b4 <HAL_GPIO_WritePin>
		printf("LED Turned ON\r\n");
 800087c:	480f      	ldr	r0, [pc, #60]	; (80008bc <application_handling+0x60>)
 800087e:	f002 fe63 	bl	8003548 <puts>
	else
	{
		//Invalid command
		printf("Invalid Command!\r\n");
	}
}
 8000882:	e012      	b.n	80008aa <application_handling+0x4e>
	else if(strstr(cmd, "LED OFF") != NULL)
 8000884:	490e      	ldr	r1, [pc, #56]	; (80008c0 <application_handling+0x64>)
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f002 fe66 	bl	8003558 <strstr>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d008      	beq.n	80008a4 <application_handling+0x48>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	4808      	ldr	r0, [pc, #32]	; (80008b8 <application_handling+0x5c>)
 8000898:	f001 f88c 	bl	80019b4 <HAL_GPIO_WritePin>
		printf("LED Turned OFF\r\n");
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <application_handling+0x68>)
 800089e:	f002 fe53 	bl	8003548 <puts>
}
 80008a2:	e002      	b.n	80008aa <application_handling+0x4e>
		printf("Invalid Command!\r\n");
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <application_handling+0x6c>)
 80008a6:	f002 fe4f 	bl	8003548 <puts>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	08003dfc 	.word	0x08003dfc
 80008b8:	40020000 	.word	0x40020000
 80008bc:	08003e04 	.word	0x08003e04
 80008c0:	08003e14 	.word	0x08003e14
 80008c4:	08003e1c 	.word	0x08003e1c
 80008c8:	08003e2c 	.word	0x08003e2c

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <HAL_MspInit+0x4c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800091a:	2007      	movs	r0, #7
 800091c:	f000 fae6 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a34      	ldr	r2, [pc, #208]	; (8000a1c <HAL_UART_MspInit+0xf0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d161      	bne.n	8000a12 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <HAL_UART_MspInit+0xf4>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <HAL_UART_MspInit+0xf4>)
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <HAL_UART_MspInit+0xf4>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <HAL_UART_MspInit+0xf4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <HAL_UART_MspInit+0xf4>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <HAL_UART_MspInit+0xf4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000986:	230c      	movs	r3, #12
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000996:	2307      	movs	r3, #7
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4820      	ldr	r0, [pc, #128]	; (8000a24 <HAL_UART_MspInit+0xf8>)
 80009a2:	f000 fe75 	bl	8001690 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009a8:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <HAL_UART_MspInit+0x100>)
 80009aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009e6:	4810      	ldr	r0, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009e8:	f000 fac2 	bl	8000f70 <HAL_DMA_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80009f2:	f7ff ff6b 	bl	80008cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_UART_MspInit+0xfc>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2026      	movs	r0, #38	; 0x26
 8000a08:	f000 fa7b 	bl	8000f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a0c:	2026      	movs	r0, #38	; 0x26
 8000a0e:	f000 fa94 	bl	8000f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	40026088 	.word	0x40026088

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a84:	f000 f942 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <DMA1_Stream5_IRQHandler+0x10>)
 8000a92:	f000 fb95 	bl	80011c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000009c 	.word	0x2000009c

08000aa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <USART2_IRQHandler+0x10>)
 8000aa6:	f001 fe19 	bl	80026dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000118 	.word	0x20000118

08000ab4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	e00a      	b.n	8000adc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ac6:	f3af 8000 	nop.w
 8000aca:	4601      	mov	r1, r0
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	b2ca      	uxtb	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf0      	blt.n	8000ac6 <_read+0x12>
	}

return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e009      	b.n	8000b14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fe3f 	bl	800078c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf1      	blt.n	8000b00 <_write+0x12>
	}
	return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_close>:

int _close(int file)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_isatty>:

int _isatty(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
	return 1;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_sbrk+0x50>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x16>
		heap_end = &end;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <_sbrk+0x50>)
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <_sbrk+0x54>)
 8000ba4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <_sbrk+0x50>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <_sbrk+0x50>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	466a      	mov	r2, sp
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d907      	bls.n	8000bca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000bba:	f002 fc37 	bl	800342c <__errno>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	e006      	b.n	8000bd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <_sbrk+0x50>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a03      	ldr	r2, [pc, #12]	; (8000be0 <_sbrk+0x50>)
 8000bd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000090 	.word	0x20000090
 8000be4:	20000160 	.word	0x20000160

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <SystemInit+0x28>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <SystemInit+0x28>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SystemInit+0x28>)
 8000bfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c02:	609a      	str	r2, [r3, #8]
#endif
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c1a:	e003      	b.n	8000c24 <LoopCopyDataInit>

08000c1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c22:	3104      	adds	r1, #4

08000c24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c2c:	d3f6      	bcc.n	8000c1c <CopyDataInit>
  ldr  r2, =_sbss
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c30:	e002      	b.n	8000c38 <LoopFillZerobss>

08000c32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c34:	f842 3b04 	str.w	r3, [r2], #4

08000c38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c3c:	d3f9      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c3e:	f7ff ffd3 	bl	8000be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c42:	f002 fbf9 	bl	8003438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c46:	f7ff fc5d 	bl	8000504 <main>
  bx  lr    
 8000c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c50:	08003ed4 	.word	0x08003ed4
  ldr  r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c58:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000c5c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000c60:	20000160 	.word	0x20000160

08000c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC_IRQHandler>
	...

08000c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <HAL_Init+0x40>)
 8000c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_Init+0x40>)
 8000c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_Init+0x40>)
 8000c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f92b 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 f808 	bl	8000cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9c:	f7ff fe1e 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023c00 	.word	0x40023c00

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x54>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_InitTick+0x58>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f943 	bl	8000f56 <HAL_SYSTICK_Config>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00e      	b.n	8000cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d80a      	bhi.n	8000cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f000 f90b 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cec:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <HAL_InitTick+0x5c>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e000      	b.n	8000cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000004 	.word	0x20000004

08000d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x20>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x24>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_IncTick+0x24>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000158 	.word	0x20000158

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000158 	.word	0x20000158

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	; (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff8e 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff29 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff3e 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff8e 	bl	8000e40 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5d 	bl	8000dec <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff31 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffa2 	bl	8000ea8 <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff feda 	bl	8000d34 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e099      	b.n	80010c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2202      	movs	r2, #2
 8000f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fac:	e00f      	b.n	8000fce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fae:	f7ff fec1 	bl	8000d34 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b05      	cmp	r3, #5
 8000fba:	d908      	bls.n	8000fce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e078      	b.n	80010c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e8      	bne.n	8000fae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <HAL_DMA_Init+0x158>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4313      	orrs	r3, r2
 800101e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	2b04      	cmp	r3, #4
 8001026:	d107      	bne.n	8001038 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4313      	orrs	r3, r2
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4313      	orrs	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f023 0307 	bic.w	r3, r3, #7
 800104e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	4313      	orrs	r3, r2
 8001058:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	2b04      	cmp	r3, #4
 8001060:	d117      	bne.n	8001092 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4313      	orrs	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00e      	beq.n	8001092 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 fa91 	bl	800159c <DMA_CheckFifoParam>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2240      	movs	r2, #64	; 0x40
 8001084:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800108e:	2301      	movs	r3, #1
 8001090:	e016      	b.n	80010c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 fa48 	bl	8001530 <DMA_CalcBaseAndBitshift>
 80010a0:	4603      	mov	r3, r0
 80010a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a8:	223f      	movs	r2, #63	; 0x3f
 80010aa:	409a      	lsls	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	f010803f 	.word	0xf010803f

080010cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <HAL_DMA_Start_IT+0x26>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e040      	b.n	8001174 <HAL_DMA_Start_IT+0xa8>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b01      	cmp	r3, #1
 8001104:	d12f      	bne.n	8001166 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2202      	movs	r2, #2
 800110a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 f9da 	bl	80014d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001124:	223f      	movs	r2, #63	; 0x3f
 8001126:	409a      	lsls	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0216 	orr.w	r2, r2, #22
 800113a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	2b00      	cmp	r3, #0
 8001142:	d007      	beq.n	8001154 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0208 	orr.w	r2, r2, #8
 8001152:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e005      	b.n	8001172 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800116e:	2302      	movs	r3, #2
 8001170:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001172:	7dfb      	ldrb	r3, [r7, #23]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d004      	beq.n	800119a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00c      	b.n	80011b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2205      	movs	r2, #5
 800119e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0201 	bic.w	r2, r2, #1
 80011b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011cc:	4b92      	ldr	r3, [pc, #584]	; (8001418 <HAL_DMA_IRQHandler+0x258>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a92      	ldr	r2, [pc, #584]	; (800141c <HAL_DMA_IRQHandler+0x25c>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0a9b      	lsrs	r3, r3, #10
 80011d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ea:	2208      	movs	r2, #8
 80011ec:	409a      	lsls	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d01a      	beq.n	800122c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0204 	bic.w	r2, r2, #4
 8001212:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001218:	2208      	movs	r2, #8
 800121a:	409a      	lsls	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	2201      	movs	r2, #1
 8001232:	409a      	lsls	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d012      	beq.n	8001262 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124e:	2201      	movs	r2, #1
 8001250:	409a      	lsls	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125a:	f043 0202 	orr.w	r2, r3, #2
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	2204      	movs	r2, #4
 8001268:	409a      	lsls	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d012      	beq.n	8001298 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00b      	beq.n	8001298 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001284:	2204      	movs	r2, #4
 8001286:	409a      	lsls	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001290:	f043 0204 	orr.w	r2, r3, #4
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129c:	2210      	movs	r2, #16
 800129e:	409a      	lsls	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d043      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d03c      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ba:	2210      	movs	r2, #16
 80012bc:	409a      	lsls	r2, r3
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d018      	beq.n	8001302 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d108      	bne.n	80012f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d024      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	4798      	blx	r3
 80012ee:	e01f      	b.n	8001330 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01b      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	4798      	blx	r3
 8001300:	e016      	b.n	8001330 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d107      	bne.n	8001320 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0208 	bic.w	r2, r2, #8
 800131e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2220      	movs	r2, #32
 8001336:	409a      	lsls	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 808e 	beq.w	800145e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8086 	beq.w	800145e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001356:	2220      	movs	r2, #32
 8001358:	409a      	lsls	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b05      	cmp	r3, #5
 8001368:	d136      	bne.n	80013d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0216 	bic.w	r2, r2, #22
 8001378:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	695a      	ldr	r2, [r3, #20]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001388:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	2b00      	cmp	r3, #0
 8001390:	d103      	bne.n	800139a <HAL_DMA_IRQHandler+0x1da>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001396:	2b00      	cmp	r3, #0
 8001398:	d007      	beq.n	80013aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0208 	bic.w	r2, r2, #8
 80013a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ae:	223f      	movs	r2, #63	; 0x3f
 80013b0:	409a      	lsls	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d07d      	beq.n	80014ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	4798      	blx	r3
        }
        return;
 80013d6:	e078      	b.n	80014ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01c      	beq.n	8001420 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d108      	bne.n	8001406 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d030      	beq.n	800145e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	4798      	blx	r3
 8001404:	e02b      	b.n	800145e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140a:	2b00      	cmp	r3, #0
 800140c:	d027      	beq.n	800145e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	4798      	blx	r3
 8001416:	e022      	b.n	800145e <HAL_DMA_IRQHandler+0x29e>
 8001418:	20000000 	.word	0x20000000
 800141c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10f      	bne.n	800144e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0210 	bic.w	r2, r2, #16
 800143c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001462:	2b00      	cmp	r3, #0
 8001464:	d032      	beq.n	80014cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d022      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2205      	movs	r2, #5
 8001476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0201 	bic.w	r2, r2, #1
 8001488:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	3301      	adds	r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	429a      	cmp	r2, r3
 8001494:	d307      	bcc.n	80014a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f2      	bne.n	800148a <HAL_DMA_IRQHandler+0x2ca>
 80014a4:	e000      	b.n	80014a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80014a6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
 80014c8:	e000      	b.n	80014cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80014ca:	bf00      	nop
    }
  }
}
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop

080014d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b40      	cmp	r3, #64	; 0x40
 8001500:	d108      	bne.n	8001514 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001512:	e007      	b.n	8001524 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	60da      	str	r2, [r3, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	3b10      	subs	r3, #16
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <DMA_CalcBaseAndBitshift+0x64>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <DMA_CalcBaseAndBitshift+0x68>)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d909      	bls.n	8001572 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001566:	f023 0303 	bic.w	r3, r3, #3
 800156a:	1d1a      	adds	r2, r3, #4
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	659a      	str	r2, [r3, #88]	; 0x58
 8001570:	e007      	b.n	8001582 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800157a:	f023 0303 	bic.w	r3, r3, #3
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	aaaaaaab 	.word	0xaaaaaaab
 8001598:	08003e58 	.word	0x08003e58

0800159c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d11f      	bne.n	80015f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d855      	bhi.n	8001668 <DMA_CheckFifoParam+0xcc>
 80015bc:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <DMA_CheckFifoParam+0x28>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080015d5 	.word	0x080015d5
 80015c8:	080015e7 	.word	0x080015e7
 80015cc:	080015d5 	.word	0x080015d5
 80015d0:	08001669 	.word	0x08001669
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d045      	beq.n	800166c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015e4:	e042      	b.n	800166c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015ee:	d13f      	bne.n	8001670 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015f4:	e03c      	b.n	8001670 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015fe:	d121      	bne.n	8001644 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d836      	bhi.n	8001674 <DMA_CheckFifoParam+0xd8>
 8001606:	a201      	add	r2, pc, #4	; (adr r2, 800160c <DMA_CheckFifoParam+0x70>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	0800161d 	.word	0x0800161d
 8001610:	08001623 	.word	0x08001623
 8001614:	0800161d 	.word	0x0800161d
 8001618:	08001635 	.word	0x08001635
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
      break;
 8001620:	e02f      	b.n	8001682 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d024      	beq.n	8001678 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001632:	e021      	b.n	8001678 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800163c:	d11e      	bne.n	800167c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001642:	e01b      	b.n	800167c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d902      	bls.n	8001650 <DMA_CheckFifoParam+0xb4>
 800164a:	2b03      	cmp	r3, #3
 800164c:	d003      	beq.n	8001656 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800164e:	e018      	b.n	8001682 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
      break;
 8001654:	e015      	b.n	8001682 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00e      	beq.n	8001680 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
      break;
 8001666:	e00b      	b.n	8001680 <DMA_CheckFifoParam+0xe4>
      break;
 8001668:	bf00      	nop
 800166a:	e00a      	b.n	8001682 <DMA_CheckFifoParam+0xe6>
      break;
 800166c:	bf00      	nop
 800166e:	e008      	b.n	8001682 <DMA_CheckFifoParam+0xe6>
      break;
 8001670:	bf00      	nop
 8001672:	e006      	b.n	8001682 <DMA_CheckFifoParam+0xe6>
      break;
 8001674:	bf00      	nop
 8001676:	e004      	b.n	8001682 <DMA_CheckFifoParam+0xe6>
      break;
 8001678:	bf00      	nop
 800167a:	e002      	b.n	8001682 <DMA_CheckFifoParam+0xe6>
      break;   
 800167c:	bf00      	nop
 800167e:	e000      	b.n	8001682 <DMA_CheckFifoParam+0xe6>
      break;
 8001680:	bf00      	nop
    }
  } 
  
  return status; 
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	e165      	b.n	8001978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 8154 	bne.w	8001972 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d00b      	beq.n	80016ea <HAL_GPIO_Init+0x5a>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d007      	beq.n	80016ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016de:	2b11      	cmp	r3, #17
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d130      	bne.n	800174c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 0201 	and.w	r2, r3, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0xfc>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b12      	cmp	r3, #18
 800178a:	d123      	bne.n	80017d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	69b9      	ldr	r1, [r7, #24]
 80017d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0203 	and.w	r2, r3, #3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80ae 	beq.w	8001972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b5c      	ldr	r3, [pc, #368]	; (800198c <HAL_GPIO_Init+0x2fc>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a5b      	ldr	r2, [pc, #364]	; (800198c <HAL_GPIO_Init+0x2fc>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b59      	ldr	r3, [pc, #356]	; (800198c <HAL_GPIO_Init+0x2fc>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001832:	4a57      	ldr	r2, [pc, #348]	; (8001990 <HAL_GPIO_Init+0x300>)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	089b      	lsrs	r3, r3, #2
 8001838:	3302      	adds	r3, #2
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	220f      	movs	r2, #15
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4e      	ldr	r2, [pc, #312]	; (8001994 <HAL_GPIO_Init+0x304>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d025      	beq.n	80018aa <HAL_GPIO_Init+0x21a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4d      	ldr	r2, [pc, #308]	; (8001998 <HAL_GPIO_Init+0x308>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d01f      	beq.n	80018a6 <HAL_GPIO_Init+0x216>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4c      	ldr	r2, [pc, #304]	; (800199c <HAL_GPIO_Init+0x30c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d019      	beq.n	80018a2 <HAL_GPIO_Init+0x212>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <HAL_GPIO_Init+0x310>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d013      	beq.n	800189e <HAL_GPIO_Init+0x20e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <HAL_GPIO_Init+0x314>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00d      	beq.n	800189a <HAL_GPIO_Init+0x20a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a49      	ldr	r2, [pc, #292]	; (80019a8 <HAL_GPIO_Init+0x318>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d007      	beq.n	8001896 <HAL_GPIO_Init+0x206>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a48      	ldr	r2, [pc, #288]	; (80019ac <HAL_GPIO_Init+0x31c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d101      	bne.n	8001892 <HAL_GPIO_Init+0x202>
 800188e:	2306      	movs	r3, #6
 8001890:	e00c      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 8001892:	2307      	movs	r3, #7
 8001894:	e00a      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 8001896:	2305      	movs	r3, #5
 8001898:	e008      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 800189a:	2304      	movs	r3, #4
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 800189e:	2303      	movs	r3, #3
 80018a0:	e004      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x21c>
 80018aa:	2300      	movs	r3, #0
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f002 0203 	and.w	r2, r2, #3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4093      	lsls	r3, r2
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018bc:	4934      	ldr	r1, [pc, #208]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ca:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <HAL_GPIO_Init+0x320>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ee:	4a30      	ldr	r2, [pc, #192]	; (80019b0 <HAL_GPIO_Init+0x320>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018f4:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_GPIO_Init+0x320>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001918:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <HAL_GPIO_Init+0x320>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_GPIO_Init+0x320>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001942:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <HAL_GPIO_Init+0x320>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_GPIO_Init+0x320>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800196c:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_GPIO_Init+0x320>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3301      	adds	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b0f      	cmp	r3, #15
 800197c:	f67f ae96 	bls.w	80016ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001980:	bf00      	nop
 8001982:	3724      	adds	r7, #36	; 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40023800 	.word	0x40023800
 8001990:	40013800 	.word	0x40013800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40021400 	.word	0x40021400
 80019ac:	40021800 	.word	0x40021800
 80019b0:	40013c00 	.word	0x40013c00

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
 80019c0:	4613      	mov	r3, r2
 80019c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c4:	787b      	ldrb	r3, [r7, #1]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019d0:	e003      	b.n	80019da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	041a      	lsls	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	619a      	str	r2, [r3, #24]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0cc      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d90c      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b65      	ldr	r3, [pc, #404]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0b8      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a3c:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	494d      	ldr	r1, [pc, #308]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d044      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d119      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e07f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e067      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4934      	ldr	r1, [pc, #208]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f92c 	bl	8000d34 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff f928 	bl	8000d34 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e04f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d20c      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e032      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4916      	ldr	r1, [pc, #88]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b6e:	f000 f855 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001b72:	4601      	mov	r1, r0
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	fa21 f303 	lsr.w	r3, r1, r3
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f88c 	bl	8000cac <HAL_InitTick>

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023c00 	.word	0x40023c00
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	08003e40 	.word	0x08003e40
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000004 	.word	0x20000004

08001bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000000 	.word	0x20000000

08001bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bd0:	f7ff fff0 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001bd4:	4601      	mov	r1, r0
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	0a9b      	lsrs	r3, r3, #10
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	08003e50 	.word	0x08003e50

08001bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bf8:	f7ff ffdc 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001bfc:	4601      	mov	r1, r0
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0b5b      	lsrs	r3, r3, #13
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4a03      	ldr	r2, [pc, #12]	; (8001c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c0a:	5cd3      	ldrb	r3, [r2, r3]
 8001c0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	08003e50 	.word	0x08003e50

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c36:	4bc6      	ldr	r3, [pc, #792]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	f200 817e 	bhi.w	8001f40 <HAL_RCC_GetSysClockFreq+0x324>
 8001c44:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <HAL_RCC_GetSysClockFreq+0x30>)
 8001c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4a:	bf00      	nop
 8001c4c:	08001c81 	.word	0x08001c81
 8001c50:	08001f41 	.word	0x08001f41
 8001c54:	08001f41 	.word	0x08001f41
 8001c58:	08001f41 	.word	0x08001f41
 8001c5c:	08001c87 	.word	0x08001c87
 8001c60:	08001f41 	.word	0x08001f41
 8001c64:	08001f41 	.word	0x08001f41
 8001c68:	08001f41 	.word	0x08001f41
 8001c6c:	08001c8d 	.word	0x08001c8d
 8001c70:	08001f41 	.word	0x08001f41
 8001c74:	08001f41 	.word	0x08001f41
 8001c78:	08001f41 	.word	0x08001f41
 8001c7c:	08001de9 	.word	0x08001de9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4bb4      	ldr	r3, [pc, #720]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x338>)
 8001c82:	613b      	str	r3, [r7, #16]
       break;
 8001c84:	e15f      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c86:	4bb4      	ldr	r3, [pc, #720]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001c88:	613b      	str	r3, [r7, #16]
      break;
 8001c8a:	e15c      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c8c:	4bb0      	ldr	r3, [pc, #704]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c94:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c96:	4bae      	ldr	r3, [pc, #696]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d04a      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca2:	4bab      	ldr	r3, [pc, #684]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	f04f 0400 	mov.w	r4, #0
 8001cac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	ea03 0501 	and.w	r5, r3, r1
 8001cb8:	ea04 0602 	and.w	r6, r4, r2
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	4632      	mov	r2, r6
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	f04f 0400 	mov.w	r4, #0
 8001cc8:	0154      	lsls	r4, r2, #5
 8001cca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cce:	014b      	lsls	r3, r1, #5
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4622      	mov	r2, r4
 8001cd4:	1b49      	subs	r1, r1, r5
 8001cd6:	eb62 0206 	sbc.w	r2, r2, r6
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	f04f 0400 	mov.w	r4, #0
 8001ce2:	0194      	lsls	r4, r2, #6
 8001ce4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ce8:	018b      	lsls	r3, r1, #6
 8001cea:	1a5b      	subs	r3, r3, r1
 8001cec:	eb64 0402 	sbc.w	r4, r4, r2
 8001cf0:	f04f 0100 	mov.w	r1, #0
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	00e2      	lsls	r2, r4, #3
 8001cfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cfe:	00d9      	lsls	r1, r3, #3
 8001d00:	460b      	mov	r3, r1
 8001d02:	4614      	mov	r4, r2
 8001d04:	195b      	adds	r3, r3, r5
 8001d06:	eb44 0406 	adc.w	r4, r4, r6
 8001d0a:	f04f 0100 	mov.w	r1, #0
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	0262      	lsls	r2, r4, #9
 8001d14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d18:	0259      	lsls	r1, r3, #9
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4614      	mov	r4, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4621      	mov	r1, r4
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f04f 0400 	mov.w	r4, #0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4623      	mov	r3, r4
 8001d2c:	f7fe fa6a 	bl	8000204 <__aeabi_uldivmod>
 8001d30:	4603      	mov	r3, r0
 8001d32:	460c      	mov	r4, r1
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e049      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d38:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	f04f 0400 	mov.w	r4, #0
 8001d42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	ea03 0501 	and.w	r5, r3, r1
 8001d4e:	ea04 0602 	and.w	r6, r4, r2
 8001d52:	4629      	mov	r1, r5
 8001d54:	4632      	mov	r2, r6
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	f04f 0400 	mov.w	r4, #0
 8001d5e:	0154      	lsls	r4, r2, #5
 8001d60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d64:	014b      	lsls	r3, r1, #5
 8001d66:	4619      	mov	r1, r3
 8001d68:	4622      	mov	r2, r4
 8001d6a:	1b49      	subs	r1, r1, r5
 8001d6c:	eb62 0206 	sbc.w	r2, r2, r6
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	f04f 0400 	mov.w	r4, #0
 8001d78:	0194      	lsls	r4, r2, #6
 8001d7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d7e:	018b      	lsls	r3, r1, #6
 8001d80:	1a5b      	subs	r3, r3, r1
 8001d82:	eb64 0402 	sbc.w	r4, r4, r2
 8001d86:	f04f 0100 	mov.w	r1, #0
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	00e2      	lsls	r2, r4, #3
 8001d90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d94:	00d9      	lsls	r1, r3, #3
 8001d96:	460b      	mov	r3, r1
 8001d98:	4614      	mov	r4, r2
 8001d9a:	195b      	adds	r3, r3, r5
 8001d9c:	eb44 0406 	adc.w	r4, r4, r6
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	02a2      	lsls	r2, r4, #10
 8001daa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001dae:	0299      	lsls	r1, r3, #10
 8001db0:	460b      	mov	r3, r1
 8001db2:	4614      	mov	r4, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	4621      	mov	r1, r4
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f04f 0400 	mov.w	r4, #0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4623      	mov	r3, r4
 8001dc2:	f7fe fa1f 	bl	8000204 <__aeabi_uldivmod>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	460c      	mov	r4, r1
 8001dca:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dcc:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	613b      	str	r3, [r7, #16]
      break;
 8001de6:	e0ae      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001df2:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d04a      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfe:	4b54      	ldr	r3, [pc, #336]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	099b      	lsrs	r3, r3, #6
 8001e04:	f04f 0400 	mov.w	r4, #0
 8001e08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	ea03 0501 	and.w	r5, r3, r1
 8001e14:	ea04 0602 	and.w	r6, r4, r2
 8001e18:	4629      	mov	r1, r5
 8001e1a:	4632      	mov	r2, r6
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	f04f 0400 	mov.w	r4, #0
 8001e24:	0154      	lsls	r4, r2, #5
 8001e26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e2a:	014b      	lsls	r3, r1, #5
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4622      	mov	r2, r4
 8001e30:	1b49      	subs	r1, r1, r5
 8001e32:	eb62 0206 	sbc.w	r2, r2, r6
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	f04f 0400 	mov.w	r4, #0
 8001e3e:	0194      	lsls	r4, r2, #6
 8001e40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e44:	018b      	lsls	r3, r1, #6
 8001e46:	1a5b      	subs	r3, r3, r1
 8001e48:	eb64 0402 	sbc.w	r4, r4, r2
 8001e4c:	f04f 0100 	mov.w	r1, #0
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	00e2      	lsls	r2, r4, #3
 8001e56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e5a:	00d9      	lsls	r1, r3, #3
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4614      	mov	r4, r2
 8001e60:	195b      	adds	r3, r3, r5
 8001e62:	eb44 0406 	adc.w	r4, r4, r6
 8001e66:	f04f 0100 	mov.w	r1, #0
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	0262      	lsls	r2, r4, #9
 8001e70:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e74:	0259      	lsls	r1, r3, #9
 8001e76:	460b      	mov	r3, r1
 8001e78:	4614      	mov	r4, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f04f 0400 	mov.w	r4, #0
 8001e84:	461a      	mov	r2, r3
 8001e86:	4623      	mov	r3, r4
 8001e88:	f7fe f9bc 	bl	8000204 <__aeabi_uldivmod>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	460c      	mov	r4, r1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e049      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	f04f 0400 	mov.w	r4, #0
 8001e9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	ea03 0501 	and.w	r5, r3, r1
 8001eaa:	ea04 0602 	and.w	r6, r4, r2
 8001eae:	4629      	mov	r1, r5
 8001eb0:	4632      	mov	r2, r6
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	f04f 0400 	mov.w	r4, #0
 8001eba:	0154      	lsls	r4, r2, #5
 8001ebc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ec0:	014b      	lsls	r3, r1, #5
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4622      	mov	r2, r4
 8001ec6:	1b49      	subs	r1, r1, r5
 8001ec8:	eb62 0206 	sbc.w	r2, r2, r6
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	f04f 0400 	mov.w	r4, #0
 8001ed4:	0194      	lsls	r4, r2, #6
 8001ed6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001eda:	018b      	lsls	r3, r1, #6
 8001edc:	1a5b      	subs	r3, r3, r1
 8001ede:	eb64 0402 	sbc.w	r4, r4, r2
 8001ee2:	f04f 0100 	mov.w	r1, #0
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	00e2      	lsls	r2, r4, #3
 8001eec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ef0:	00d9      	lsls	r1, r3, #3
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4614      	mov	r4, r2
 8001ef6:	195b      	adds	r3, r3, r5
 8001ef8:	eb44 0406 	adc.w	r4, r4, r6
 8001efc:	f04f 0100 	mov.w	r1, #0
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	02a2      	lsls	r2, r4, #10
 8001f06:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f0a:	0299      	lsls	r1, r3, #10
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4614      	mov	r4, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	4621      	mov	r1, r4
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f04f 0400 	mov.w	r4, #0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4623      	mov	r3, r4
 8001f1e:	f7fe f971 	bl	8000204 <__aeabi_uldivmod>
 8001f22:	4603      	mov	r3, r0
 8001f24:	460c      	mov	r4, r1
 8001f26:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	0f1b      	lsrs	r3, r3, #28
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	613b      	str	r3, [r7, #16]
      break;
 8001f3e:	e002      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x338>)
 8001f42:	613b      	str	r3, [r7, #16]
      break;
 8001f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f46:	693b      	ldr	r3, [r7, #16]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	00f42400 	.word	0x00f42400
 8001f58:	007a1200 	.word	0x007a1200

08001f5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8083 	beq.w	800207c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f76:	4b95      	ldr	r3, [pc, #596]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d019      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f82:	4b92      	ldr	r3, [pc, #584]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d106      	bne.n	8001f9c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f8e:	4b8f      	ldr	r3, [pc, #572]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f9a:	d00c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9c:	4b8b      	ldr	r3, [pc, #556]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fa4:	2b0c      	cmp	r3, #12
 8001fa6:	d112      	bne.n	8001fce <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa8:	4b88      	ldr	r3, [pc, #544]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb4:	d10b      	bne.n	8001fce <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb6:	4b85      	ldr	r3, [pc, #532]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d05b      	beq.n	800207a <HAL_RCC_OscConfig+0x11e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d157      	bne.n	800207a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e216      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x8a>
 8001fd8:	4b7c      	ldr	r3, [pc, #496]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a7b      	ldr	r2, [pc, #492]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8001fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	e01d      	b.n	8002022 <HAL_RCC_OscConfig+0xc6>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fee:	d10c      	bne.n	800200a <HAL_RCC_OscConfig+0xae>
 8001ff0:	4b76      	ldr	r3, [pc, #472]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a75      	ldr	r2, [pc, #468]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8001ff6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b73      	ldr	r3, [pc, #460]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a72      	ldr	r2, [pc, #456]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e00b      	b.n	8002022 <HAL_RCC_OscConfig+0xc6>
 800200a:	4b70      	ldr	r3, [pc, #448]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a6f      	ldr	r2, [pc, #444]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8002010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b6d      	ldr	r3, [pc, #436]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a6c      	ldr	r2, [pc, #432]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 800201c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d013      	beq.n	8002052 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7fe fe83 	bl	8000d34 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002032:	f7fe fe7f 	bl	8000d34 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b64      	cmp	r3, #100	; 0x64
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e1db      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002044:	4b61      	ldr	r3, [pc, #388]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0xd6>
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7fe fe6f 	bl	8000d34 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205a:	f7fe fe6b 	bl	8000d34 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b64      	cmp	r3, #100	; 0x64
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e1c7      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206c:	4b57      	ldr	r3, [pc, #348]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f0      	bne.n	800205a <HAL_RCC_OscConfig+0xfe>
 8002078:	e000      	b.n	800207c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d06f      	beq.n	8002168 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002088:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b00      	cmp	r3, #0
 8002092:	d017      	beq.n	80020c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002094:	4b4d      	ldr	r3, [pc, #308]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800209c:	2b08      	cmp	r3, #8
 800209e:	d105      	bne.n	80020ac <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020a0:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ac:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d11c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b8:	4b44      	ldr	r3, [pc, #272]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d116      	bne.n	80020f2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c4:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_OscConfig+0x180>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e18f      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020dc:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4938      	ldr	r1, [pc, #224]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f0:	e03a      	b.n	8002168 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d020      	beq.n	800213c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7fe fe18 	bl	8000d34 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002108:	f7fe fe14 	bl	8000d34 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e170      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4925      	ldr	r1, [pc, #148]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
 800213a:	e015      	b.n	8002168 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7fe fdf7 	bl	8000d34 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800214a:	f7fe fdf3 	bl	8000d34 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e14f      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d037      	beq.n	80021e4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d016      	beq.n	80021aa <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_RCC_OscConfig+0x278>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7fe fdd7 	bl	8000d34 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218a:	f7fe fdd3 	bl	8000d34 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e12f      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 800219e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x22e>
 80021a8:	e01c      	b.n	80021e4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_RCC_OscConfig+0x278>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7fe fdc0 	bl	8000d34 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b6:	e00f      	b.n	80021d8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b8:	f7fe fdbc 	bl	8000d34 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d908      	bls.n	80021d8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e118      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	42470000 	.word	0x42470000
 80021d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	4b8a      	ldr	r3, [pc, #552]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 80021da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e9      	bne.n	80021b8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8097 	beq.w	8002320 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f6:	4b83      	ldr	r3, [pc, #524]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10f      	bne.n	8002222 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b7f      	ldr	r3, [pc, #508]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a7e      	ldr	r2, [pc, #504]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b7c      	ldr	r3, [pc, #496]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b79      	ldr	r3, [pc, #484]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b76      	ldr	r3, [pc, #472]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a75      	ldr	r2, [pc, #468]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7fe fd7b 	bl	8000d34 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7fe fd77 	bl	8000d34 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0d3      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b6c      	ldr	r3, [pc, #432]	; (8002408 <HAL_RCC_OscConfig+0x4ac>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x31a>
 8002268:	4b66      	ldr	r3, [pc, #408]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226c:	4a65      	ldr	r2, [pc, #404]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6713      	str	r3, [r2, #112]	; 0x70
 8002274:	e01c      	b.n	80022b0 <HAL_RCC_OscConfig+0x354>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b05      	cmp	r3, #5
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x33c>
 800227e:	4b61      	ldr	r3, [pc, #388]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	4a60      	ldr	r2, [pc, #384]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6713      	str	r3, [r2, #112]	; 0x70
 800228a:	4b5e      	ldr	r3, [pc, #376]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228e:	4a5d      	ldr	r2, [pc, #372]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6713      	str	r3, [r2, #112]	; 0x70
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0x354>
 8002298:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a59      	ldr	r2, [pc, #356]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
 80022a4:	4b57      	ldr	r3, [pc, #348]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	4a56      	ldr	r2, [pc, #344]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 80022aa:	f023 0304 	bic.w	r3, r3, #4
 80022ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7fe fd3c 	bl	8000d34 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe fd38 	bl	8000d34 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e092      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0ee      	beq.n	80022c0 <HAL_RCC_OscConfig+0x364>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe fd26 	bl	8000d34 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe fd22 	bl	8000d34 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e07c      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002302:	4b40      	ldr	r3, [pc, #256]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ee      	bne.n	80022ec <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d105      	bne.n	8002320 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002314:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	4a3a      	ldr	r2, [pc, #232]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 800231a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d068      	beq.n	80023fa <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d060      	beq.n	80023f6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d145      	bne.n	80023c8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233c:	4b33      	ldr	r3, [pc, #204]	; (800240c <HAL_RCC_OscConfig+0x4b0>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe fcf7 	bl	8000d34 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe fcf3 	bl	8000d34 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e04f      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	019b      	lsls	r3, r3, #6
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	3b01      	subs	r3, #1
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	061b      	lsls	r3, r3, #24
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	071b      	lsls	r3, r3, #28
 8002394:	491b      	ldr	r1, [pc, #108]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_RCC_OscConfig+0x4b0>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fcc8 	bl	8000d34 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fe fcc4 	bl	8000d34 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e020      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x44c>
 80023c6:	e018      	b.n	80023fa <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_RCC_OscConfig+0x4b0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7fe fcb1 	bl	8000d34 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe fcad 	bl	8000d34 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e009      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCC_OscConfig+0x4a8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x47a>
 80023f4:	e001      	b.n	80023fa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40023800 	.word	0x40023800
 8002408:	40007000 	.word	0x40007000
 800240c:	42470060 	.word	0x42470060

08002410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e03f      	b.n	80024a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe fa78 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2224      	movs	r2, #36	; 0x24
 8002440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fc6d 	bl	8002d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b088      	sub	sp, #32
 80024ae:	af02      	add	r7, sp, #8
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	4613      	mov	r3, r2
 80024b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	f040 8083 	bne.w	80025d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_UART_Transmit+0x2e>
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e07b      	b.n	80025d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_UART_Transmit+0x40>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e074      	b.n	80025d4 <HAL_UART_Transmit+0x12a>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2221      	movs	r2, #33	; 0x21
 80024fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002500:	f7fe fc18 	bl	8000d34 <HAL_GetTick>
 8002504:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	88fa      	ldrh	r2, [r7, #6]
 800250a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800251a:	e042      	b.n	80025a2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002532:	d122      	bne.n	800257a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2200      	movs	r2, #0
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fa76 	bl	8002a30 <UART_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e042      	b.n	80025d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002560:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d103      	bne.n	8002572 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	3302      	adds	r3, #2
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	e017      	b.n	80025a2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	3301      	adds	r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	e013      	b.n	80025a2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fa53 	bl	8002a30 <UART_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e01f      	b.n	80025d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	60ba      	str	r2, [r7, #8]
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1b7      	bne.n	800251c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2200      	movs	r2, #0
 80025b4:	2140      	movs	r1, #64	; 0x40
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fa3a 	bl	8002a30 <UART_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e006      	b.n	80025d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
  }
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d166      	bne.n	80026c4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_UART_Receive_DMA+0x26>
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e05f      	b.n	80026c6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_UART_Receive_DMA+0x38>
 8002610:	2302      	movs	r3, #2
 8002612:	e058      	b.n	80026c6 <HAL_UART_Receive_DMA+0xea>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2222      	movs	r2, #34	; 0x22
 8002632:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <HAL_UART_Receive_DMA+0xf4>)
 800263c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <HAL_UART_Receive_DMA+0xf8>)
 8002644:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	4a23      	ldr	r2, [pc, #140]	; (80026d8 <HAL_UART_Receive_DMA+0xfc>)
 800264c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	2200      	movs	r2, #0
 8002654:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8002656:	f107 0308 	add.w	r3, r7, #8
 800265a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3304      	adds	r3, #4
 8002666:	4619      	mov	r1, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	f7fe fd2d 	bl	80010cc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026be:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	08002919 	.word	0x08002919
 80026d4:	08002981 	.word	0x08002981
 80026d8:	0800299d 	.word	0x0800299d

080026dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_UART_IRQHandler+0x52>
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fa82 	bl	8002c30 <UART_Receive_IT>
      return;
 800272c:	e0d1      	b.n	80028d2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80b0 	beq.w	8002896 <HAL_UART_IRQHandler+0x1ba>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <HAL_UART_IRQHandler+0x70>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80a5 	beq.w	8002896 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_UART_IRQHandler+0x90>
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002764:	f043 0201 	orr.w	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_UART_IRQHandler+0xb0>
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	f043 0202 	orr.w	r2, r3, #2
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_UART_IRQHandler+0xd0>
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00f      	beq.n	80027d6 <HAL_UART_IRQHandler+0xfa>
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d104      	bne.n	80027ca <HAL_UART_IRQHandler+0xee>
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ce:	f043 0208 	orr.w	r2, r3, #8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d078      	beq.n	80028d0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_UART_IRQHandler+0x11c>
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa1c 	bl	8002c30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <HAL_UART_IRQHandler+0x144>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d031      	beq.n	8002884 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f965 	bl	8002af0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d123      	bne.n	800287c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002842:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002850:	4a21      	ldr	r2, [pc, #132]	; (80028d8 <HAL_UART_IRQHandler+0x1fc>)
 8002852:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fc8f 	bl	800117c <HAL_DMA_Abort_IT>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d016      	beq.n	8002892 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800286e:	4610      	mov	r0, r2
 8002870:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002872:	e00e      	b.n	8002892 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f845 	bl	8002904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800287a:	e00a      	b.n	8002892 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f841 	bl	8002904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002882:	e006      	b.n	8002892 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f83d 	bl	8002904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002890:	e01e      	b.n	80028d0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002892:	bf00      	nop
    return;
 8002894:	e01c      	b.n	80028d0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_UART_IRQHandler+0x1d6>
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f952 	bl	8002b54 <UART_Transmit_IT>
    return;
 80028b0:	e00f      	b.n	80028d2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_UART_IRQHandler+0x1f6>
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f99a 	bl	8002c00 <UART_EndTransmit_IT>
    return;
 80028cc:	bf00      	nop
 80028ce:	e000      	b.n	80028d2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80028d0:	bf00      	nop
  }
}
 80028d2:	3720      	adds	r7, #32
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	08002b2d 	.word	0x08002b2d

080028dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d11e      	bne.n	8002972 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002948:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002968:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f7fd ff1c 	bl	80007b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff ffae 	bl	80028f0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b8:	2b80      	cmp	r3, #128	; 0x80
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b21      	cmp	r3, #33	; 0x21
 80029ce:	d108      	bne.n	80029e2 <UART_DMAError+0x46>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2200      	movs	r2, #0
 80029da:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80029dc:	68b8      	ldr	r0, [r7, #8]
 80029de:	f000 f871 	bl	8002ac4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ec:	2b40      	cmp	r3, #64	; 0x40
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b22      	cmp	r3, #34	; 0x22
 8002a02:	d108      	bne.n	8002a16 <UART_DMAError+0x7a>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002a10:	68b8      	ldr	r0, [r7, #8]
 8002a12:	f000 f86d 	bl	8002af0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a22:	68b8      	ldr	r0, [r7, #8]
 8002a24:	f7ff ff6e 	bl	8002904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a40:	e02c      	b.n	8002a9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d028      	beq.n	8002a9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a50:	f7fe f970 	bl	8000d34 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d21d      	bcs.n	8002a9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e00f      	b.n	8002abc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d0c3      	beq.n	8002a42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ada:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff fedc 	bl	8002904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b21      	cmp	r3, #33	; 0x21
 8002b66:	d144      	bne.n	8002bf2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b70:	d11a      	bne.n	8002ba8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b86:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	1c9a      	adds	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	621a      	str	r2, [r3, #32]
 8002b9a:	e00e      	b.n	8002bba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	621a      	str	r2, [r3, #32]
 8002ba6:	e008      	b.n	8002bba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	1c59      	adds	r1, r3, #1
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6211      	str	r1, [r2, #32]
 8002bb2:	781a      	ldrb	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff fe5b 	bl	80028dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b22      	cmp	r3, #34	; 0x22
 8002c42:	d171      	bne.n	8002d28 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4c:	d123      	bne.n	8002c96 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10e      	bne.n	8002c7a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	1c9a      	adds	r2, r3, #2
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
 8002c78:	e029      	b.n	8002cce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
 8002c94:	e01b      	b.n	8002cce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6858      	ldr	r0, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	1c59      	adds	r1, r3, #1
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6291      	str	r1, [r2, #40]	; 0x28
 8002cae:	b2c2      	uxtb	r2, r0
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e00c      	b.n	8002cce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	1c58      	adds	r0, r3, #1
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	6288      	str	r0, [r1, #40]	; 0x28
 8002cc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d120      	bne.n	8002d24 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0220 	bic.w	r2, r2, #32
 8002cf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd fd48 	bl	80007b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e002      	b.n	8002d2a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e000      	b.n	8002d2a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d76:	f023 030c 	bic.w	r3, r3, #12
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	68f9      	ldr	r1, [r7, #12]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da2:	f040 818b 	bne.w	80030bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4ac1      	ldr	r2, [pc, #772]	; (80030b0 <UART_SetConfig+0x37c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d005      	beq.n	8002dbc <UART_SetConfig+0x88>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4abf      	ldr	r2, [pc, #764]	; (80030b4 <UART_SetConfig+0x380>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	f040 80bd 	bne.w	8002f36 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dbc:	f7fe ff1a 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
 8002dc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	461d      	mov	r5, r3
 8002dc6:	f04f 0600 	mov.w	r6, #0
 8002dca:	46a8      	mov	r8, r5
 8002dcc:	46b1      	mov	r9, r6
 8002dce:	eb18 0308 	adds.w	r3, r8, r8
 8002dd2:	eb49 0409 	adc.w	r4, r9, r9
 8002dd6:	4698      	mov	r8, r3
 8002dd8:	46a1      	mov	r9, r4
 8002dda:	eb18 0805 	adds.w	r8, r8, r5
 8002dde:	eb49 0906 	adc.w	r9, r9, r6
 8002de2:	f04f 0100 	mov.w	r1, #0
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002dee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002df2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002df6:	4688      	mov	r8, r1
 8002df8:	4691      	mov	r9, r2
 8002dfa:	eb18 0005 	adds.w	r0, r8, r5
 8002dfe:	eb49 0106 	adc.w	r1, r9, r6
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	461d      	mov	r5, r3
 8002e08:	f04f 0600 	mov.w	r6, #0
 8002e0c:	196b      	adds	r3, r5, r5
 8002e0e:	eb46 0406 	adc.w	r4, r6, r6
 8002e12:	461a      	mov	r2, r3
 8002e14:	4623      	mov	r3, r4
 8002e16:	f7fd f9f5 	bl	8000204 <__aeabi_uldivmod>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4ba5      	ldr	r3, [pc, #660]	; (80030b8 <UART_SetConfig+0x384>)
 8002e22:	fba3 2302 	umull	r2, r3, r3, r2
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	461d      	mov	r5, r3
 8002e30:	f04f 0600 	mov.w	r6, #0
 8002e34:	46a9      	mov	r9, r5
 8002e36:	46b2      	mov	sl, r6
 8002e38:	eb19 0309 	adds.w	r3, r9, r9
 8002e3c:	eb4a 040a 	adc.w	r4, sl, sl
 8002e40:	4699      	mov	r9, r3
 8002e42:	46a2      	mov	sl, r4
 8002e44:	eb19 0905 	adds.w	r9, r9, r5
 8002e48:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e4c:	f04f 0100 	mov.w	r1, #0
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e60:	4689      	mov	r9, r1
 8002e62:	4692      	mov	sl, r2
 8002e64:	eb19 0005 	adds.w	r0, r9, r5
 8002e68:	eb4a 0106 	adc.w	r1, sl, r6
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	461d      	mov	r5, r3
 8002e72:	f04f 0600 	mov.w	r6, #0
 8002e76:	196b      	adds	r3, r5, r5
 8002e78:	eb46 0406 	adc.w	r4, r6, r6
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4623      	mov	r3, r4
 8002e80:	f7fd f9c0 	bl	8000204 <__aeabi_uldivmod>
 8002e84:	4603      	mov	r3, r0
 8002e86:	460c      	mov	r4, r1
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b8b      	ldr	r3, [pc, #556]	; (80030b8 <UART_SetConfig+0x384>)
 8002e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	2164      	movs	r1, #100	; 0x64
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	3332      	adds	r3, #50	; 0x32
 8002e9e:	4a86      	ldr	r2, [pc, #536]	; (80030b8 <UART_SetConfig+0x384>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eac:	4498      	add	r8, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	461d      	mov	r5, r3
 8002eb2:	f04f 0600 	mov.w	r6, #0
 8002eb6:	46a9      	mov	r9, r5
 8002eb8:	46b2      	mov	sl, r6
 8002eba:	eb19 0309 	adds.w	r3, r9, r9
 8002ebe:	eb4a 040a 	adc.w	r4, sl, sl
 8002ec2:	4699      	mov	r9, r3
 8002ec4:	46a2      	mov	sl, r4
 8002ec6:	eb19 0905 	adds.w	r9, r9, r5
 8002eca:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ede:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ee2:	4689      	mov	r9, r1
 8002ee4:	4692      	mov	sl, r2
 8002ee6:	eb19 0005 	adds.w	r0, r9, r5
 8002eea:	eb4a 0106 	adc.w	r1, sl, r6
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	461d      	mov	r5, r3
 8002ef4:	f04f 0600 	mov.w	r6, #0
 8002ef8:	196b      	adds	r3, r5, r5
 8002efa:	eb46 0406 	adc.w	r4, r6, r6
 8002efe:	461a      	mov	r2, r3
 8002f00:	4623      	mov	r3, r4
 8002f02:	f7fd f97f 	bl	8000204 <__aeabi_uldivmod>
 8002f06:	4603      	mov	r3, r0
 8002f08:	460c      	mov	r4, r1
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <UART_SetConfig+0x384>)
 8002f0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2164      	movs	r1, #100	; 0x64
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	3332      	adds	r3, #50	; 0x32
 8002f20:	4a65      	ldr	r2, [pc, #404]	; (80030b8 <UART_SetConfig+0x384>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	f003 0207 	and.w	r2, r3, #7
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4442      	add	r2, r8
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	e26f      	b.n	8003416 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f36:	f7fe fe49 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 8002f3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	461d      	mov	r5, r3
 8002f40:	f04f 0600 	mov.w	r6, #0
 8002f44:	46a8      	mov	r8, r5
 8002f46:	46b1      	mov	r9, r6
 8002f48:	eb18 0308 	adds.w	r3, r8, r8
 8002f4c:	eb49 0409 	adc.w	r4, r9, r9
 8002f50:	4698      	mov	r8, r3
 8002f52:	46a1      	mov	r9, r4
 8002f54:	eb18 0805 	adds.w	r8, r8, r5
 8002f58:	eb49 0906 	adc.w	r9, r9, r6
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f70:	4688      	mov	r8, r1
 8002f72:	4691      	mov	r9, r2
 8002f74:	eb18 0005 	adds.w	r0, r8, r5
 8002f78:	eb49 0106 	adc.w	r1, r9, r6
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	461d      	mov	r5, r3
 8002f82:	f04f 0600 	mov.w	r6, #0
 8002f86:	196b      	adds	r3, r5, r5
 8002f88:	eb46 0406 	adc.w	r4, r6, r6
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4623      	mov	r3, r4
 8002f90:	f7fd f938 	bl	8000204 <__aeabi_uldivmod>
 8002f94:	4603      	mov	r3, r0
 8002f96:	460c      	mov	r4, r1
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <UART_SetConfig+0x384>)
 8002f9c:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	461d      	mov	r5, r3
 8002faa:	f04f 0600 	mov.w	r6, #0
 8002fae:	46a9      	mov	r9, r5
 8002fb0:	46b2      	mov	sl, r6
 8002fb2:	eb19 0309 	adds.w	r3, r9, r9
 8002fb6:	eb4a 040a 	adc.w	r4, sl, sl
 8002fba:	4699      	mov	r9, r3
 8002fbc:	46a2      	mov	sl, r4
 8002fbe:	eb19 0905 	adds.w	r9, r9, r5
 8002fc2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fda:	4689      	mov	r9, r1
 8002fdc:	4692      	mov	sl, r2
 8002fde:	eb19 0005 	adds.w	r0, r9, r5
 8002fe2:	eb4a 0106 	adc.w	r1, sl, r6
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	461d      	mov	r5, r3
 8002fec:	f04f 0600 	mov.w	r6, #0
 8002ff0:	196b      	adds	r3, r5, r5
 8002ff2:	eb46 0406 	adc.w	r4, r6, r6
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4623      	mov	r3, r4
 8002ffa:	f7fd f903 	bl	8000204 <__aeabi_uldivmod>
 8002ffe:	4603      	mov	r3, r0
 8003000:	460c      	mov	r4, r1
 8003002:	461a      	mov	r2, r3
 8003004:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <UART_SetConfig+0x384>)
 8003006:	fba3 1302 	umull	r1, r3, r3, r2
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2164      	movs	r1, #100	; 0x64
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	3332      	adds	r3, #50	; 0x32
 8003018:	4a27      	ldr	r2, [pc, #156]	; (80030b8 <UART_SetConfig+0x384>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003026:	4498      	add	r8, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	461d      	mov	r5, r3
 800302c:	f04f 0600 	mov.w	r6, #0
 8003030:	46a9      	mov	r9, r5
 8003032:	46b2      	mov	sl, r6
 8003034:	eb19 0309 	adds.w	r3, r9, r9
 8003038:	eb4a 040a 	adc.w	r4, sl, sl
 800303c:	4699      	mov	r9, r3
 800303e:	46a2      	mov	sl, r4
 8003040:	eb19 0905 	adds.w	r9, r9, r5
 8003044:	eb4a 0a06 	adc.w	sl, sl, r6
 8003048:	f04f 0100 	mov.w	r1, #0
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003054:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003058:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800305c:	4689      	mov	r9, r1
 800305e:	4692      	mov	sl, r2
 8003060:	eb19 0005 	adds.w	r0, r9, r5
 8003064:	eb4a 0106 	adc.w	r1, sl, r6
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	461d      	mov	r5, r3
 800306e:	f04f 0600 	mov.w	r6, #0
 8003072:	196b      	adds	r3, r5, r5
 8003074:	eb46 0406 	adc.w	r4, r6, r6
 8003078:	461a      	mov	r2, r3
 800307a:	4623      	mov	r3, r4
 800307c:	f7fd f8c2 	bl	8000204 <__aeabi_uldivmod>
 8003080:	4603      	mov	r3, r0
 8003082:	460c      	mov	r4, r1
 8003084:	461a      	mov	r2, r3
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <UART_SetConfig+0x384>)
 8003088:	fba3 1302 	umull	r1, r3, r3, r2
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	2164      	movs	r1, #100	; 0x64
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	3332      	adds	r3, #50	; 0x32
 800309a:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <UART_SetConfig+0x384>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	f003 0207 	and.w	r2, r3, #7
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4442      	add	r2, r8
 80030ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80030ae:	e1b2      	b.n	8003416 <UART_SetConfig+0x6e2>
 80030b0:	40011000 	.word	0x40011000
 80030b4:	40011400 	.word	0x40011400
 80030b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4ad7      	ldr	r2, [pc, #860]	; (8003420 <UART_SetConfig+0x6ec>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d005      	beq.n	80030d2 <UART_SetConfig+0x39e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4ad6      	ldr	r2, [pc, #856]	; (8003424 <UART_SetConfig+0x6f0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	f040 80d1 	bne.w	8003274 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80030d2:	f7fe fd8f 	bl	8001bf4 <HAL_RCC_GetPCLK2Freq>
 80030d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	469a      	mov	sl, r3
 80030dc:	f04f 0b00 	mov.w	fp, #0
 80030e0:	46d0      	mov	r8, sl
 80030e2:	46d9      	mov	r9, fp
 80030e4:	eb18 0308 	adds.w	r3, r8, r8
 80030e8:	eb49 0409 	adc.w	r4, r9, r9
 80030ec:	4698      	mov	r8, r3
 80030ee:	46a1      	mov	r9, r4
 80030f0:	eb18 080a 	adds.w	r8, r8, sl
 80030f4:	eb49 090b 	adc.w	r9, r9, fp
 80030f8:	f04f 0100 	mov.w	r1, #0
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003104:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003108:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800310c:	4688      	mov	r8, r1
 800310e:	4691      	mov	r9, r2
 8003110:	eb1a 0508 	adds.w	r5, sl, r8
 8003114:	eb4b 0609 	adc.w	r6, fp, r9
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4619      	mov	r1, r3
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	f04f 0400 	mov.w	r4, #0
 800312a:	0094      	lsls	r4, r2, #2
 800312c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003130:	008b      	lsls	r3, r1, #2
 8003132:	461a      	mov	r2, r3
 8003134:	4623      	mov	r3, r4
 8003136:	4628      	mov	r0, r5
 8003138:	4631      	mov	r1, r6
 800313a:	f7fd f863 	bl	8000204 <__aeabi_uldivmod>
 800313e:	4603      	mov	r3, r0
 8003140:	460c      	mov	r4, r1
 8003142:	461a      	mov	r2, r3
 8003144:	4bb8      	ldr	r3, [pc, #736]	; (8003428 <UART_SetConfig+0x6f4>)
 8003146:	fba3 2302 	umull	r2, r3, r3, r2
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	469b      	mov	fp, r3
 8003154:	f04f 0c00 	mov.w	ip, #0
 8003158:	46d9      	mov	r9, fp
 800315a:	46e2      	mov	sl, ip
 800315c:	eb19 0309 	adds.w	r3, r9, r9
 8003160:	eb4a 040a 	adc.w	r4, sl, sl
 8003164:	4699      	mov	r9, r3
 8003166:	46a2      	mov	sl, r4
 8003168:	eb19 090b 	adds.w	r9, r9, fp
 800316c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003170:	f04f 0100 	mov.w	r1, #0
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800317c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003180:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003184:	4689      	mov	r9, r1
 8003186:	4692      	mov	sl, r2
 8003188:	eb1b 0509 	adds.w	r5, fp, r9
 800318c:	eb4c 060a 	adc.w	r6, ip, sl
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4619      	mov	r1, r3
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	f04f 0400 	mov.w	r4, #0
 80031a2:	0094      	lsls	r4, r2, #2
 80031a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031a8:	008b      	lsls	r3, r1, #2
 80031aa:	461a      	mov	r2, r3
 80031ac:	4623      	mov	r3, r4
 80031ae:	4628      	mov	r0, r5
 80031b0:	4631      	mov	r1, r6
 80031b2:	f7fd f827 	bl	8000204 <__aeabi_uldivmod>
 80031b6:	4603      	mov	r3, r0
 80031b8:	460c      	mov	r4, r1
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b9a      	ldr	r3, [pc, #616]	; (8003428 <UART_SetConfig+0x6f4>)
 80031be:	fba3 1302 	umull	r1, r3, r3, r2
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2164      	movs	r1, #100	; 0x64
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	3332      	adds	r3, #50	; 0x32
 80031d0:	4a95      	ldr	r2, [pc, #596]	; (8003428 <UART_SetConfig+0x6f4>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031dc:	4498      	add	r8, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	469b      	mov	fp, r3
 80031e2:	f04f 0c00 	mov.w	ip, #0
 80031e6:	46d9      	mov	r9, fp
 80031e8:	46e2      	mov	sl, ip
 80031ea:	eb19 0309 	adds.w	r3, r9, r9
 80031ee:	eb4a 040a 	adc.w	r4, sl, sl
 80031f2:	4699      	mov	r9, r3
 80031f4:	46a2      	mov	sl, r4
 80031f6:	eb19 090b 	adds.w	r9, r9, fp
 80031fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800320a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800320e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003212:	4689      	mov	r9, r1
 8003214:	4692      	mov	sl, r2
 8003216:	eb1b 0509 	adds.w	r5, fp, r9
 800321a:	eb4c 060a 	adc.w	r6, ip, sl
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4619      	mov	r1, r3
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	f04f 0400 	mov.w	r4, #0
 8003230:	0094      	lsls	r4, r2, #2
 8003232:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003236:	008b      	lsls	r3, r1, #2
 8003238:	461a      	mov	r2, r3
 800323a:	4623      	mov	r3, r4
 800323c:	4628      	mov	r0, r5
 800323e:	4631      	mov	r1, r6
 8003240:	f7fc ffe0 	bl	8000204 <__aeabi_uldivmod>
 8003244:	4603      	mov	r3, r0
 8003246:	460c      	mov	r4, r1
 8003248:	461a      	mov	r2, r3
 800324a:	4b77      	ldr	r3, [pc, #476]	; (8003428 <UART_SetConfig+0x6f4>)
 800324c:	fba3 1302 	umull	r1, r3, r3, r2
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	2164      	movs	r1, #100	; 0x64
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	3332      	adds	r3, #50	; 0x32
 800325e:	4a72      	ldr	r2, [pc, #456]	; (8003428 <UART_SetConfig+0x6f4>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	f003 020f 	and.w	r2, r3, #15
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4442      	add	r2, r8
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	e0d0      	b.n	8003416 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003274:	f7fe fcaa 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 8003278:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	469a      	mov	sl, r3
 800327e:	f04f 0b00 	mov.w	fp, #0
 8003282:	46d0      	mov	r8, sl
 8003284:	46d9      	mov	r9, fp
 8003286:	eb18 0308 	adds.w	r3, r8, r8
 800328a:	eb49 0409 	adc.w	r4, r9, r9
 800328e:	4698      	mov	r8, r3
 8003290:	46a1      	mov	r9, r4
 8003292:	eb18 080a 	adds.w	r8, r8, sl
 8003296:	eb49 090b 	adc.w	r9, r9, fp
 800329a:	f04f 0100 	mov.w	r1, #0
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032ae:	4688      	mov	r8, r1
 80032b0:	4691      	mov	r9, r2
 80032b2:	eb1a 0508 	adds.w	r5, sl, r8
 80032b6:	eb4b 0609 	adc.w	r6, fp, r9
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4619      	mov	r1, r3
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	f04f 0400 	mov.w	r4, #0
 80032cc:	0094      	lsls	r4, r2, #2
 80032ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032d2:	008b      	lsls	r3, r1, #2
 80032d4:	461a      	mov	r2, r3
 80032d6:	4623      	mov	r3, r4
 80032d8:	4628      	mov	r0, r5
 80032da:	4631      	mov	r1, r6
 80032dc:	f7fc ff92 	bl	8000204 <__aeabi_uldivmod>
 80032e0:	4603      	mov	r3, r0
 80032e2:	460c      	mov	r4, r1
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b50      	ldr	r3, [pc, #320]	; (8003428 <UART_SetConfig+0x6f4>)
 80032e8:	fba3 2302 	umull	r2, r3, r3, r2
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	469b      	mov	fp, r3
 80032f6:	f04f 0c00 	mov.w	ip, #0
 80032fa:	46d9      	mov	r9, fp
 80032fc:	46e2      	mov	sl, ip
 80032fe:	eb19 0309 	adds.w	r3, r9, r9
 8003302:	eb4a 040a 	adc.w	r4, sl, sl
 8003306:	4699      	mov	r9, r3
 8003308:	46a2      	mov	sl, r4
 800330a:	eb19 090b 	adds.w	r9, r9, fp
 800330e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800331e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003322:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003326:	4689      	mov	r9, r1
 8003328:	4692      	mov	sl, r2
 800332a:	eb1b 0509 	adds.w	r5, fp, r9
 800332e:	eb4c 060a 	adc.w	r6, ip, sl
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4619      	mov	r1, r3
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	f04f 0400 	mov.w	r4, #0
 8003344:	0094      	lsls	r4, r2, #2
 8003346:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800334a:	008b      	lsls	r3, r1, #2
 800334c:	461a      	mov	r2, r3
 800334e:	4623      	mov	r3, r4
 8003350:	4628      	mov	r0, r5
 8003352:	4631      	mov	r1, r6
 8003354:	f7fc ff56 	bl	8000204 <__aeabi_uldivmod>
 8003358:	4603      	mov	r3, r0
 800335a:	460c      	mov	r4, r1
 800335c:	461a      	mov	r2, r3
 800335e:	4b32      	ldr	r3, [pc, #200]	; (8003428 <UART_SetConfig+0x6f4>)
 8003360:	fba3 1302 	umull	r1, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	2164      	movs	r1, #100	; 0x64
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	3332      	adds	r3, #50	; 0x32
 8003372:	4a2d      	ldr	r2, [pc, #180]	; (8003428 <UART_SetConfig+0x6f4>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337e:	4498      	add	r8, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	469b      	mov	fp, r3
 8003384:	f04f 0c00 	mov.w	ip, #0
 8003388:	46d9      	mov	r9, fp
 800338a:	46e2      	mov	sl, ip
 800338c:	eb19 0309 	adds.w	r3, r9, r9
 8003390:	eb4a 040a 	adc.w	r4, sl, sl
 8003394:	4699      	mov	r9, r3
 8003396:	46a2      	mov	sl, r4
 8003398:	eb19 090b 	adds.w	r9, r9, fp
 800339c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033b4:	4689      	mov	r9, r1
 80033b6:	4692      	mov	sl, r2
 80033b8:	eb1b 0509 	adds.w	r5, fp, r9
 80033bc:	eb4c 060a 	adc.w	r6, ip, sl
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4619      	mov	r1, r3
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	f04f 0400 	mov.w	r4, #0
 80033d2:	0094      	lsls	r4, r2, #2
 80033d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033d8:	008b      	lsls	r3, r1, #2
 80033da:	461a      	mov	r2, r3
 80033dc:	4623      	mov	r3, r4
 80033de:	4628      	mov	r0, r5
 80033e0:	4631      	mov	r1, r6
 80033e2:	f7fc ff0f 	bl	8000204 <__aeabi_uldivmod>
 80033e6:	4603      	mov	r3, r0
 80033e8:	460c      	mov	r4, r1
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <UART_SetConfig+0x6f4>)
 80033ee:	fba3 1302 	umull	r1, r3, r3, r2
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2164      	movs	r1, #100	; 0x64
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	3332      	adds	r3, #50	; 0x32
 8003400:	4a09      	ldr	r2, [pc, #36]	; (8003428 <UART_SetConfig+0x6f4>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	f003 020f 	and.w	r2, r3, #15
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4442      	add	r2, r8
 8003412:	609a      	str	r2, [r3, #8]
}
 8003414:	e7ff      	b.n	8003416 <UART_SetConfig+0x6e2>
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003420:	40011000 	.word	0x40011000
 8003424:	40011400 	.word	0x40011400
 8003428:	51eb851f 	.word	0x51eb851f

0800342c <__errno>:
 800342c:	4b01      	ldr	r3, [pc, #4]	; (8003434 <__errno+0x8>)
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	2000000c 	.word	0x2000000c

08003438 <__libc_init_array>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	4e0d      	ldr	r6, [pc, #52]	; (8003470 <__libc_init_array+0x38>)
 800343c:	4c0d      	ldr	r4, [pc, #52]	; (8003474 <__libc_init_array+0x3c>)
 800343e:	1ba4      	subs	r4, r4, r6
 8003440:	10a4      	asrs	r4, r4, #2
 8003442:	2500      	movs	r5, #0
 8003444:	42a5      	cmp	r5, r4
 8003446:	d109      	bne.n	800345c <__libc_init_array+0x24>
 8003448:	4e0b      	ldr	r6, [pc, #44]	; (8003478 <__libc_init_array+0x40>)
 800344a:	4c0c      	ldr	r4, [pc, #48]	; (800347c <__libc_init_array+0x44>)
 800344c:	f000 fca2 	bl	8003d94 <_init>
 8003450:	1ba4      	subs	r4, r4, r6
 8003452:	10a4      	asrs	r4, r4, #2
 8003454:	2500      	movs	r5, #0
 8003456:	42a5      	cmp	r5, r4
 8003458:	d105      	bne.n	8003466 <__libc_init_array+0x2e>
 800345a:	bd70      	pop	{r4, r5, r6, pc}
 800345c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003460:	4798      	blx	r3
 8003462:	3501      	adds	r5, #1
 8003464:	e7ee      	b.n	8003444 <__libc_init_array+0xc>
 8003466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800346a:	4798      	blx	r3
 800346c:	3501      	adds	r5, #1
 800346e:	e7f2      	b.n	8003456 <__libc_init_array+0x1e>
 8003470:	08003ecc 	.word	0x08003ecc
 8003474:	08003ecc 	.word	0x08003ecc
 8003478:	08003ecc 	.word	0x08003ecc
 800347c:	08003ed0 	.word	0x08003ed0

08003480 <memset>:
 8003480:	4402      	add	r2, r0
 8003482:	4603      	mov	r3, r0
 8003484:	4293      	cmp	r3, r2
 8003486:	d100      	bne.n	800348a <memset+0xa>
 8003488:	4770      	bx	lr
 800348a:	f803 1b01 	strb.w	r1, [r3], #1
 800348e:	e7f9      	b.n	8003484 <memset+0x4>

08003490 <_puts_r>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	460e      	mov	r6, r1
 8003494:	4605      	mov	r5, r0
 8003496:	b118      	cbz	r0, 80034a0 <_puts_r+0x10>
 8003498:	6983      	ldr	r3, [r0, #24]
 800349a:	b90b      	cbnz	r3, 80034a0 <_puts_r+0x10>
 800349c:	f000 fa26 	bl	80038ec <__sinit>
 80034a0:	69ab      	ldr	r3, [r5, #24]
 80034a2:	68ac      	ldr	r4, [r5, #8]
 80034a4:	b913      	cbnz	r3, 80034ac <_puts_r+0x1c>
 80034a6:	4628      	mov	r0, r5
 80034a8:	f000 fa20 	bl	80038ec <__sinit>
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <_puts_r+0xac>)
 80034ae:	429c      	cmp	r4, r3
 80034b0:	d117      	bne.n	80034e2 <_puts_r+0x52>
 80034b2:	686c      	ldr	r4, [r5, #4]
 80034b4:	89a3      	ldrh	r3, [r4, #12]
 80034b6:	071b      	lsls	r3, r3, #28
 80034b8:	d51d      	bpl.n	80034f6 <_puts_r+0x66>
 80034ba:	6923      	ldr	r3, [r4, #16]
 80034bc:	b1db      	cbz	r3, 80034f6 <_puts_r+0x66>
 80034be:	3e01      	subs	r6, #1
 80034c0:	68a3      	ldr	r3, [r4, #8]
 80034c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034c6:	3b01      	subs	r3, #1
 80034c8:	60a3      	str	r3, [r4, #8]
 80034ca:	b9e9      	cbnz	r1, 8003508 <_puts_r+0x78>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da2e      	bge.n	800352e <_puts_r+0x9e>
 80034d0:	4622      	mov	r2, r4
 80034d2:	210a      	movs	r1, #10
 80034d4:	4628      	mov	r0, r5
 80034d6:	f000 f859 	bl	800358c <__swbuf_r>
 80034da:	3001      	adds	r0, #1
 80034dc:	d011      	beq.n	8003502 <_puts_r+0x72>
 80034de:	200a      	movs	r0, #10
 80034e0:	e011      	b.n	8003506 <_puts_r+0x76>
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <_puts_r+0xb0>)
 80034e4:	429c      	cmp	r4, r3
 80034e6:	d101      	bne.n	80034ec <_puts_r+0x5c>
 80034e8:	68ac      	ldr	r4, [r5, #8]
 80034ea:	e7e3      	b.n	80034b4 <_puts_r+0x24>
 80034ec:	4b15      	ldr	r3, [pc, #84]	; (8003544 <_puts_r+0xb4>)
 80034ee:	429c      	cmp	r4, r3
 80034f0:	bf08      	it	eq
 80034f2:	68ec      	ldreq	r4, [r5, #12]
 80034f4:	e7de      	b.n	80034b4 <_puts_r+0x24>
 80034f6:	4621      	mov	r1, r4
 80034f8:	4628      	mov	r0, r5
 80034fa:	f000 f899 	bl	8003630 <__swsetup_r>
 80034fe:	2800      	cmp	r0, #0
 8003500:	d0dd      	beq.n	80034be <_puts_r+0x2e>
 8003502:	f04f 30ff 	mov.w	r0, #4294967295
 8003506:	bd70      	pop	{r4, r5, r6, pc}
 8003508:	2b00      	cmp	r3, #0
 800350a:	da04      	bge.n	8003516 <_puts_r+0x86>
 800350c:	69a2      	ldr	r2, [r4, #24]
 800350e:	429a      	cmp	r2, r3
 8003510:	dc06      	bgt.n	8003520 <_puts_r+0x90>
 8003512:	290a      	cmp	r1, #10
 8003514:	d004      	beq.n	8003520 <_puts_r+0x90>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	6022      	str	r2, [r4, #0]
 800351c:	7019      	strb	r1, [r3, #0]
 800351e:	e7cf      	b.n	80034c0 <_puts_r+0x30>
 8003520:	4622      	mov	r2, r4
 8003522:	4628      	mov	r0, r5
 8003524:	f000 f832 	bl	800358c <__swbuf_r>
 8003528:	3001      	adds	r0, #1
 800352a:	d1c9      	bne.n	80034c0 <_puts_r+0x30>
 800352c:	e7e9      	b.n	8003502 <_puts_r+0x72>
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	200a      	movs	r0, #10
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	6022      	str	r2, [r4, #0]
 8003536:	7018      	strb	r0, [r3, #0]
 8003538:	e7e5      	b.n	8003506 <_puts_r+0x76>
 800353a:	bf00      	nop
 800353c:	08003e84 	.word	0x08003e84
 8003540:	08003ea4 	.word	0x08003ea4
 8003544:	08003e64 	.word	0x08003e64

08003548 <puts>:
 8003548:	4b02      	ldr	r3, [pc, #8]	; (8003554 <puts+0xc>)
 800354a:	4601      	mov	r1, r0
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	f7ff bf9f 	b.w	8003490 <_puts_r>
 8003552:	bf00      	nop
 8003554:	2000000c 	.word	0x2000000c

08003558 <strstr>:
 8003558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355a:	7803      	ldrb	r3, [r0, #0]
 800355c:	b17b      	cbz	r3, 800357e <strstr+0x26>
 800355e:	4604      	mov	r4, r0
 8003560:	7823      	ldrb	r3, [r4, #0]
 8003562:	4620      	mov	r0, r4
 8003564:	1c66      	adds	r6, r4, #1
 8003566:	b17b      	cbz	r3, 8003588 <strstr+0x30>
 8003568:	1e4a      	subs	r2, r1, #1
 800356a:	1e63      	subs	r3, r4, #1
 800356c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8003570:	b14d      	cbz	r5, 8003586 <strstr+0x2e>
 8003572:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003576:	42af      	cmp	r7, r5
 8003578:	4634      	mov	r4, r6
 800357a:	d0f7      	beq.n	800356c <strstr+0x14>
 800357c:	e7f0      	b.n	8003560 <strstr+0x8>
 800357e:	780b      	ldrb	r3, [r1, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf18      	it	ne
 8003584:	2000      	movne	r0, #0
 8003586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003588:	4618      	mov	r0, r3
 800358a:	e7fc      	b.n	8003586 <strstr+0x2e>

0800358c <__swbuf_r>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	460e      	mov	r6, r1
 8003590:	4614      	mov	r4, r2
 8003592:	4605      	mov	r5, r0
 8003594:	b118      	cbz	r0, 800359e <__swbuf_r+0x12>
 8003596:	6983      	ldr	r3, [r0, #24]
 8003598:	b90b      	cbnz	r3, 800359e <__swbuf_r+0x12>
 800359a:	f000 f9a7 	bl	80038ec <__sinit>
 800359e:	4b21      	ldr	r3, [pc, #132]	; (8003624 <__swbuf_r+0x98>)
 80035a0:	429c      	cmp	r4, r3
 80035a2:	d12a      	bne.n	80035fa <__swbuf_r+0x6e>
 80035a4:	686c      	ldr	r4, [r5, #4]
 80035a6:	69a3      	ldr	r3, [r4, #24]
 80035a8:	60a3      	str	r3, [r4, #8]
 80035aa:	89a3      	ldrh	r3, [r4, #12]
 80035ac:	071a      	lsls	r2, r3, #28
 80035ae:	d52e      	bpl.n	800360e <__swbuf_r+0x82>
 80035b0:	6923      	ldr	r3, [r4, #16]
 80035b2:	b363      	cbz	r3, 800360e <__swbuf_r+0x82>
 80035b4:	6923      	ldr	r3, [r4, #16]
 80035b6:	6820      	ldr	r0, [r4, #0]
 80035b8:	1ac0      	subs	r0, r0, r3
 80035ba:	6963      	ldr	r3, [r4, #20]
 80035bc:	b2f6      	uxtb	r6, r6
 80035be:	4283      	cmp	r3, r0
 80035c0:	4637      	mov	r7, r6
 80035c2:	dc04      	bgt.n	80035ce <__swbuf_r+0x42>
 80035c4:	4621      	mov	r1, r4
 80035c6:	4628      	mov	r0, r5
 80035c8:	f000 f926 	bl	8003818 <_fflush_r>
 80035cc:	bb28      	cbnz	r0, 800361a <__swbuf_r+0x8e>
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	60a3      	str	r3, [r4, #8]
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	6022      	str	r2, [r4, #0]
 80035da:	701e      	strb	r6, [r3, #0]
 80035dc:	6963      	ldr	r3, [r4, #20]
 80035de:	3001      	adds	r0, #1
 80035e0:	4283      	cmp	r3, r0
 80035e2:	d004      	beq.n	80035ee <__swbuf_r+0x62>
 80035e4:	89a3      	ldrh	r3, [r4, #12]
 80035e6:	07db      	lsls	r3, r3, #31
 80035e8:	d519      	bpl.n	800361e <__swbuf_r+0x92>
 80035ea:	2e0a      	cmp	r6, #10
 80035ec:	d117      	bne.n	800361e <__swbuf_r+0x92>
 80035ee:	4621      	mov	r1, r4
 80035f0:	4628      	mov	r0, r5
 80035f2:	f000 f911 	bl	8003818 <_fflush_r>
 80035f6:	b190      	cbz	r0, 800361e <__swbuf_r+0x92>
 80035f8:	e00f      	b.n	800361a <__swbuf_r+0x8e>
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <__swbuf_r+0x9c>)
 80035fc:	429c      	cmp	r4, r3
 80035fe:	d101      	bne.n	8003604 <__swbuf_r+0x78>
 8003600:	68ac      	ldr	r4, [r5, #8]
 8003602:	e7d0      	b.n	80035a6 <__swbuf_r+0x1a>
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <__swbuf_r+0xa0>)
 8003606:	429c      	cmp	r4, r3
 8003608:	bf08      	it	eq
 800360a:	68ec      	ldreq	r4, [r5, #12]
 800360c:	e7cb      	b.n	80035a6 <__swbuf_r+0x1a>
 800360e:	4621      	mov	r1, r4
 8003610:	4628      	mov	r0, r5
 8003612:	f000 f80d 	bl	8003630 <__swsetup_r>
 8003616:	2800      	cmp	r0, #0
 8003618:	d0cc      	beq.n	80035b4 <__swbuf_r+0x28>
 800361a:	f04f 37ff 	mov.w	r7, #4294967295
 800361e:	4638      	mov	r0, r7
 8003620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003622:	bf00      	nop
 8003624:	08003e84 	.word	0x08003e84
 8003628:	08003ea4 	.word	0x08003ea4
 800362c:	08003e64 	.word	0x08003e64

08003630 <__swsetup_r>:
 8003630:	4b32      	ldr	r3, [pc, #200]	; (80036fc <__swsetup_r+0xcc>)
 8003632:	b570      	push	{r4, r5, r6, lr}
 8003634:	681d      	ldr	r5, [r3, #0]
 8003636:	4606      	mov	r6, r0
 8003638:	460c      	mov	r4, r1
 800363a:	b125      	cbz	r5, 8003646 <__swsetup_r+0x16>
 800363c:	69ab      	ldr	r3, [r5, #24]
 800363e:	b913      	cbnz	r3, 8003646 <__swsetup_r+0x16>
 8003640:	4628      	mov	r0, r5
 8003642:	f000 f953 	bl	80038ec <__sinit>
 8003646:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <__swsetup_r+0xd0>)
 8003648:	429c      	cmp	r4, r3
 800364a:	d10f      	bne.n	800366c <__swsetup_r+0x3c>
 800364c:	686c      	ldr	r4, [r5, #4]
 800364e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003652:	b29a      	uxth	r2, r3
 8003654:	0715      	lsls	r5, r2, #28
 8003656:	d42c      	bmi.n	80036b2 <__swsetup_r+0x82>
 8003658:	06d0      	lsls	r0, r2, #27
 800365a:	d411      	bmi.n	8003680 <__swsetup_r+0x50>
 800365c:	2209      	movs	r2, #9
 800365e:	6032      	str	r2, [r6, #0]
 8003660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003664:	81a3      	strh	r3, [r4, #12]
 8003666:	f04f 30ff 	mov.w	r0, #4294967295
 800366a:	e03e      	b.n	80036ea <__swsetup_r+0xba>
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <__swsetup_r+0xd4>)
 800366e:	429c      	cmp	r4, r3
 8003670:	d101      	bne.n	8003676 <__swsetup_r+0x46>
 8003672:	68ac      	ldr	r4, [r5, #8]
 8003674:	e7eb      	b.n	800364e <__swsetup_r+0x1e>
 8003676:	4b24      	ldr	r3, [pc, #144]	; (8003708 <__swsetup_r+0xd8>)
 8003678:	429c      	cmp	r4, r3
 800367a:	bf08      	it	eq
 800367c:	68ec      	ldreq	r4, [r5, #12]
 800367e:	e7e6      	b.n	800364e <__swsetup_r+0x1e>
 8003680:	0751      	lsls	r1, r2, #29
 8003682:	d512      	bpl.n	80036aa <__swsetup_r+0x7a>
 8003684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003686:	b141      	cbz	r1, 800369a <__swsetup_r+0x6a>
 8003688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800368c:	4299      	cmp	r1, r3
 800368e:	d002      	beq.n	8003696 <__swsetup_r+0x66>
 8003690:	4630      	mov	r0, r6
 8003692:	f000 fa19 	bl	8003ac8 <_free_r>
 8003696:	2300      	movs	r3, #0
 8003698:	6363      	str	r3, [r4, #52]	; 0x34
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036a0:	81a3      	strh	r3, [r4, #12]
 80036a2:	2300      	movs	r3, #0
 80036a4:	6063      	str	r3, [r4, #4]
 80036a6:	6923      	ldr	r3, [r4, #16]
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	f043 0308 	orr.w	r3, r3, #8
 80036b0:	81a3      	strh	r3, [r4, #12]
 80036b2:	6923      	ldr	r3, [r4, #16]
 80036b4:	b94b      	cbnz	r3, 80036ca <__swsetup_r+0x9a>
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c0:	d003      	beq.n	80036ca <__swsetup_r+0x9a>
 80036c2:	4621      	mov	r1, r4
 80036c4:	4630      	mov	r0, r6
 80036c6:	f000 f9bf 	bl	8003a48 <__smakebuf_r>
 80036ca:	89a2      	ldrh	r2, [r4, #12]
 80036cc:	f012 0301 	ands.w	r3, r2, #1
 80036d0:	d00c      	beq.n	80036ec <__swsetup_r+0xbc>
 80036d2:	2300      	movs	r3, #0
 80036d4:	60a3      	str	r3, [r4, #8]
 80036d6:	6963      	ldr	r3, [r4, #20]
 80036d8:	425b      	negs	r3, r3
 80036da:	61a3      	str	r3, [r4, #24]
 80036dc:	6923      	ldr	r3, [r4, #16]
 80036de:	b953      	cbnz	r3, 80036f6 <__swsetup_r+0xc6>
 80036e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80036e8:	d1ba      	bne.n	8003660 <__swsetup_r+0x30>
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
 80036ec:	0792      	lsls	r2, r2, #30
 80036ee:	bf58      	it	pl
 80036f0:	6963      	ldrpl	r3, [r4, #20]
 80036f2:	60a3      	str	r3, [r4, #8]
 80036f4:	e7f2      	b.n	80036dc <__swsetup_r+0xac>
 80036f6:	2000      	movs	r0, #0
 80036f8:	e7f7      	b.n	80036ea <__swsetup_r+0xba>
 80036fa:	bf00      	nop
 80036fc:	2000000c 	.word	0x2000000c
 8003700:	08003e84 	.word	0x08003e84
 8003704:	08003ea4 	.word	0x08003ea4
 8003708:	08003e64 	.word	0x08003e64

0800370c <__sflush_r>:
 800370c:	898a      	ldrh	r2, [r1, #12]
 800370e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003712:	4605      	mov	r5, r0
 8003714:	0710      	lsls	r0, r2, #28
 8003716:	460c      	mov	r4, r1
 8003718:	d458      	bmi.n	80037cc <__sflush_r+0xc0>
 800371a:	684b      	ldr	r3, [r1, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	dc05      	bgt.n	800372c <__sflush_r+0x20>
 8003720:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	dc02      	bgt.n	800372c <__sflush_r+0x20>
 8003726:	2000      	movs	r0, #0
 8003728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800372c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800372e:	2e00      	cmp	r6, #0
 8003730:	d0f9      	beq.n	8003726 <__sflush_r+0x1a>
 8003732:	2300      	movs	r3, #0
 8003734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003738:	682f      	ldr	r7, [r5, #0]
 800373a:	6a21      	ldr	r1, [r4, #32]
 800373c:	602b      	str	r3, [r5, #0]
 800373e:	d032      	beq.n	80037a6 <__sflush_r+0x9a>
 8003740:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	075a      	lsls	r2, r3, #29
 8003746:	d505      	bpl.n	8003754 <__sflush_r+0x48>
 8003748:	6863      	ldr	r3, [r4, #4]
 800374a:	1ac0      	subs	r0, r0, r3
 800374c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800374e:	b10b      	cbz	r3, 8003754 <__sflush_r+0x48>
 8003750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003752:	1ac0      	subs	r0, r0, r3
 8003754:	2300      	movs	r3, #0
 8003756:	4602      	mov	r2, r0
 8003758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800375a:	6a21      	ldr	r1, [r4, #32]
 800375c:	4628      	mov	r0, r5
 800375e:	47b0      	blx	r6
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	d106      	bne.n	8003774 <__sflush_r+0x68>
 8003766:	6829      	ldr	r1, [r5, #0]
 8003768:	291d      	cmp	r1, #29
 800376a:	d848      	bhi.n	80037fe <__sflush_r+0xf2>
 800376c:	4a29      	ldr	r2, [pc, #164]	; (8003814 <__sflush_r+0x108>)
 800376e:	40ca      	lsrs	r2, r1
 8003770:	07d6      	lsls	r6, r2, #31
 8003772:	d544      	bpl.n	80037fe <__sflush_r+0xf2>
 8003774:	2200      	movs	r2, #0
 8003776:	6062      	str	r2, [r4, #4]
 8003778:	04d9      	lsls	r1, r3, #19
 800377a:	6922      	ldr	r2, [r4, #16]
 800377c:	6022      	str	r2, [r4, #0]
 800377e:	d504      	bpl.n	800378a <__sflush_r+0x7e>
 8003780:	1c42      	adds	r2, r0, #1
 8003782:	d101      	bne.n	8003788 <__sflush_r+0x7c>
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	b903      	cbnz	r3, 800378a <__sflush_r+0x7e>
 8003788:	6560      	str	r0, [r4, #84]	; 0x54
 800378a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800378c:	602f      	str	r7, [r5, #0]
 800378e:	2900      	cmp	r1, #0
 8003790:	d0c9      	beq.n	8003726 <__sflush_r+0x1a>
 8003792:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003796:	4299      	cmp	r1, r3
 8003798:	d002      	beq.n	80037a0 <__sflush_r+0x94>
 800379a:	4628      	mov	r0, r5
 800379c:	f000 f994 	bl	8003ac8 <_free_r>
 80037a0:	2000      	movs	r0, #0
 80037a2:	6360      	str	r0, [r4, #52]	; 0x34
 80037a4:	e7c0      	b.n	8003728 <__sflush_r+0x1c>
 80037a6:	2301      	movs	r3, #1
 80037a8:	4628      	mov	r0, r5
 80037aa:	47b0      	blx	r6
 80037ac:	1c41      	adds	r1, r0, #1
 80037ae:	d1c8      	bne.n	8003742 <__sflush_r+0x36>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0c5      	beq.n	8003742 <__sflush_r+0x36>
 80037b6:	2b1d      	cmp	r3, #29
 80037b8:	d001      	beq.n	80037be <__sflush_r+0xb2>
 80037ba:	2b16      	cmp	r3, #22
 80037bc:	d101      	bne.n	80037c2 <__sflush_r+0xb6>
 80037be:	602f      	str	r7, [r5, #0]
 80037c0:	e7b1      	b.n	8003726 <__sflush_r+0x1a>
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037c8:	81a3      	strh	r3, [r4, #12]
 80037ca:	e7ad      	b.n	8003728 <__sflush_r+0x1c>
 80037cc:	690f      	ldr	r7, [r1, #16]
 80037ce:	2f00      	cmp	r7, #0
 80037d0:	d0a9      	beq.n	8003726 <__sflush_r+0x1a>
 80037d2:	0793      	lsls	r3, r2, #30
 80037d4:	680e      	ldr	r6, [r1, #0]
 80037d6:	bf08      	it	eq
 80037d8:	694b      	ldreq	r3, [r1, #20]
 80037da:	600f      	str	r7, [r1, #0]
 80037dc:	bf18      	it	ne
 80037de:	2300      	movne	r3, #0
 80037e0:	eba6 0807 	sub.w	r8, r6, r7
 80037e4:	608b      	str	r3, [r1, #8]
 80037e6:	f1b8 0f00 	cmp.w	r8, #0
 80037ea:	dd9c      	ble.n	8003726 <__sflush_r+0x1a>
 80037ec:	4643      	mov	r3, r8
 80037ee:	463a      	mov	r2, r7
 80037f0:	6a21      	ldr	r1, [r4, #32]
 80037f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037f4:	4628      	mov	r0, r5
 80037f6:	47b0      	blx	r6
 80037f8:	2800      	cmp	r0, #0
 80037fa:	dc06      	bgt.n	800380a <__sflush_r+0xfe>
 80037fc:	89a3      	ldrh	r3, [r4, #12]
 80037fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003802:	81a3      	strh	r3, [r4, #12]
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	e78e      	b.n	8003728 <__sflush_r+0x1c>
 800380a:	4407      	add	r7, r0
 800380c:	eba8 0800 	sub.w	r8, r8, r0
 8003810:	e7e9      	b.n	80037e6 <__sflush_r+0xda>
 8003812:	bf00      	nop
 8003814:	20400001 	.word	0x20400001

08003818 <_fflush_r>:
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	690b      	ldr	r3, [r1, #16]
 800381c:	4605      	mov	r5, r0
 800381e:	460c      	mov	r4, r1
 8003820:	b1db      	cbz	r3, 800385a <_fflush_r+0x42>
 8003822:	b118      	cbz	r0, 800382c <_fflush_r+0x14>
 8003824:	6983      	ldr	r3, [r0, #24]
 8003826:	b90b      	cbnz	r3, 800382c <_fflush_r+0x14>
 8003828:	f000 f860 	bl	80038ec <__sinit>
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <_fflush_r+0x48>)
 800382e:	429c      	cmp	r4, r3
 8003830:	d109      	bne.n	8003846 <_fflush_r+0x2e>
 8003832:	686c      	ldr	r4, [r5, #4]
 8003834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003838:	b17b      	cbz	r3, 800385a <_fflush_r+0x42>
 800383a:	4621      	mov	r1, r4
 800383c:	4628      	mov	r0, r5
 800383e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003842:	f7ff bf63 	b.w	800370c <__sflush_r>
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <_fflush_r+0x4c>)
 8003848:	429c      	cmp	r4, r3
 800384a:	d101      	bne.n	8003850 <_fflush_r+0x38>
 800384c:	68ac      	ldr	r4, [r5, #8]
 800384e:	e7f1      	b.n	8003834 <_fflush_r+0x1c>
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <_fflush_r+0x50>)
 8003852:	429c      	cmp	r4, r3
 8003854:	bf08      	it	eq
 8003856:	68ec      	ldreq	r4, [r5, #12]
 8003858:	e7ec      	b.n	8003834 <_fflush_r+0x1c>
 800385a:	2000      	movs	r0, #0
 800385c:	bd38      	pop	{r3, r4, r5, pc}
 800385e:	bf00      	nop
 8003860:	08003e84 	.word	0x08003e84
 8003864:	08003ea4 	.word	0x08003ea4
 8003868:	08003e64 	.word	0x08003e64

0800386c <std>:
 800386c:	2300      	movs	r3, #0
 800386e:	b510      	push	{r4, lr}
 8003870:	4604      	mov	r4, r0
 8003872:	e9c0 3300 	strd	r3, r3, [r0]
 8003876:	6083      	str	r3, [r0, #8]
 8003878:	8181      	strh	r1, [r0, #12]
 800387a:	6643      	str	r3, [r0, #100]	; 0x64
 800387c:	81c2      	strh	r2, [r0, #14]
 800387e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003882:	6183      	str	r3, [r0, #24]
 8003884:	4619      	mov	r1, r3
 8003886:	2208      	movs	r2, #8
 8003888:	305c      	adds	r0, #92	; 0x5c
 800388a:	f7ff fdf9 	bl	8003480 <memset>
 800388e:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <std+0x38>)
 8003890:	6263      	str	r3, [r4, #36]	; 0x24
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <std+0x3c>)
 8003894:	62a3      	str	r3, [r4, #40]	; 0x28
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <std+0x40>)
 8003898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <std+0x44>)
 800389c:	6224      	str	r4, [r4, #32]
 800389e:	6323      	str	r3, [r4, #48]	; 0x30
 80038a0:	bd10      	pop	{r4, pc}
 80038a2:	bf00      	nop
 80038a4:	08003c39 	.word	0x08003c39
 80038a8:	08003c5b 	.word	0x08003c5b
 80038ac:	08003c93 	.word	0x08003c93
 80038b0:	08003cb7 	.word	0x08003cb7

080038b4 <_cleanup_r>:
 80038b4:	4901      	ldr	r1, [pc, #4]	; (80038bc <_cleanup_r+0x8>)
 80038b6:	f000 b885 	b.w	80039c4 <_fwalk_reent>
 80038ba:	bf00      	nop
 80038bc:	08003819 	.word	0x08003819

080038c0 <__sfmoreglue>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	1e4a      	subs	r2, r1, #1
 80038c4:	2568      	movs	r5, #104	; 0x68
 80038c6:	4355      	muls	r5, r2
 80038c8:	460e      	mov	r6, r1
 80038ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038ce:	f000 f949 	bl	8003b64 <_malloc_r>
 80038d2:	4604      	mov	r4, r0
 80038d4:	b140      	cbz	r0, 80038e8 <__sfmoreglue+0x28>
 80038d6:	2100      	movs	r1, #0
 80038d8:	e9c0 1600 	strd	r1, r6, [r0]
 80038dc:	300c      	adds	r0, #12
 80038de:	60a0      	str	r0, [r4, #8]
 80038e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038e4:	f7ff fdcc 	bl	8003480 <memset>
 80038e8:	4620      	mov	r0, r4
 80038ea:	bd70      	pop	{r4, r5, r6, pc}

080038ec <__sinit>:
 80038ec:	6983      	ldr	r3, [r0, #24]
 80038ee:	b510      	push	{r4, lr}
 80038f0:	4604      	mov	r4, r0
 80038f2:	bb33      	cbnz	r3, 8003942 <__sinit+0x56>
 80038f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80038f8:	6503      	str	r3, [r0, #80]	; 0x50
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <__sinit+0x58>)
 80038fc:	4a12      	ldr	r2, [pc, #72]	; (8003948 <__sinit+0x5c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6282      	str	r2, [r0, #40]	; 0x28
 8003902:	4298      	cmp	r0, r3
 8003904:	bf04      	itt	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	6183      	streq	r3, [r0, #24]
 800390a:	f000 f81f 	bl	800394c <__sfp>
 800390e:	6060      	str	r0, [r4, #4]
 8003910:	4620      	mov	r0, r4
 8003912:	f000 f81b 	bl	800394c <__sfp>
 8003916:	60a0      	str	r0, [r4, #8]
 8003918:	4620      	mov	r0, r4
 800391a:	f000 f817 	bl	800394c <__sfp>
 800391e:	2200      	movs	r2, #0
 8003920:	60e0      	str	r0, [r4, #12]
 8003922:	2104      	movs	r1, #4
 8003924:	6860      	ldr	r0, [r4, #4]
 8003926:	f7ff ffa1 	bl	800386c <std>
 800392a:	2201      	movs	r2, #1
 800392c:	2109      	movs	r1, #9
 800392e:	68a0      	ldr	r0, [r4, #8]
 8003930:	f7ff ff9c 	bl	800386c <std>
 8003934:	2202      	movs	r2, #2
 8003936:	2112      	movs	r1, #18
 8003938:	68e0      	ldr	r0, [r4, #12]
 800393a:	f7ff ff97 	bl	800386c <std>
 800393e:	2301      	movs	r3, #1
 8003940:	61a3      	str	r3, [r4, #24]
 8003942:	bd10      	pop	{r4, pc}
 8003944:	08003e60 	.word	0x08003e60
 8003948:	080038b5 	.word	0x080038b5

0800394c <__sfp>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <__sfp+0x70>)
 8003950:	681e      	ldr	r6, [r3, #0]
 8003952:	69b3      	ldr	r3, [r6, #24]
 8003954:	4607      	mov	r7, r0
 8003956:	b913      	cbnz	r3, 800395e <__sfp+0x12>
 8003958:	4630      	mov	r0, r6
 800395a:	f7ff ffc7 	bl	80038ec <__sinit>
 800395e:	3648      	adds	r6, #72	; 0x48
 8003960:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003964:	3b01      	subs	r3, #1
 8003966:	d503      	bpl.n	8003970 <__sfp+0x24>
 8003968:	6833      	ldr	r3, [r6, #0]
 800396a:	b133      	cbz	r3, 800397a <__sfp+0x2e>
 800396c:	6836      	ldr	r6, [r6, #0]
 800396e:	e7f7      	b.n	8003960 <__sfp+0x14>
 8003970:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003974:	b16d      	cbz	r5, 8003992 <__sfp+0x46>
 8003976:	3468      	adds	r4, #104	; 0x68
 8003978:	e7f4      	b.n	8003964 <__sfp+0x18>
 800397a:	2104      	movs	r1, #4
 800397c:	4638      	mov	r0, r7
 800397e:	f7ff ff9f 	bl	80038c0 <__sfmoreglue>
 8003982:	6030      	str	r0, [r6, #0]
 8003984:	2800      	cmp	r0, #0
 8003986:	d1f1      	bne.n	800396c <__sfp+0x20>
 8003988:	230c      	movs	r3, #12
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	4604      	mov	r4, r0
 800398e:	4620      	mov	r0, r4
 8003990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <__sfp+0x74>)
 8003994:	6665      	str	r5, [r4, #100]	; 0x64
 8003996:	e9c4 5500 	strd	r5, r5, [r4]
 800399a:	60a5      	str	r5, [r4, #8]
 800399c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80039a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80039a4:	2208      	movs	r2, #8
 80039a6:	4629      	mov	r1, r5
 80039a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039ac:	f7ff fd68 	bl	8003480 <memset>
 80039b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039b8:	e7e9      	b.n	800398e <__sfp+0x42>
 80039ba:	bf00      	nop
 80039bc:	08003e60 	.word	0x08003e60
 80039c0:	ffff0001 	.word	0xffff0001

080039c4 <_fwalk_reent>:
 80039c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039c8:	4680      	mov	r8, r0
 80039ca:	4689      	mov	r9, r1
 80039cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039d0:	2600      	movs	r6, #0
 80039d2:	b914      	cbnz	r4, 80039da <_fwalk_reent+0x16>
 80039d4:	4630      	mov	r0, r6
 80039d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80039de:	3f01      	subs	r7, #1
 80039e0:	d501      	bpl.n	80039e6 <_fwalk_reent+0x22>
 80039e2:	6824      	ldr	r4, [r4, #0]
 80039e4:	e7f5      	b.n	80039d2 <_fwalk_reent+0xe>
 80039e6:	89ab      	ldrh	r3, [r5, #12]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d907      	bls.n	80039fc <_fwalk_reent+0x38>
 80039ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039f0:	3301      	adds	r3, #1
 80039f2:	d003      	beq.n	80039fc <_fwalk_reent+0x38>
 80039f4:	4629      	mov	r1, r5
 80039f6:	4640      	mov	r0, r8
 80039f8:	47c8      	blx	r9
 80039fa:	4306      	orrs	r6, r0
 80039fc:	3568      	adds	r5, #104	; 0x68
 80039fe:	e7ee      	b.n	80039de <_fwalk_reent+0x1a>

08003a00 <__swhatbuf_r>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	460e      	mov	r6, r1
 8003a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a08:	2900      	cmp	r1, #0
 8003a0a:	b096      	sub	sp, #88	; 0x58
 8003a0c:	4614      	mov	r4, r2
 8003a0e:	461d      	mov	r5, r3
 8003a10:	da07      	bge.n	8003a22 <__swhatbuf_r+0x22>
 8003a12:	2300      	movs	r3, #0
 8003a14:	602b      	str	r3, [r5, #0]
 8003a16:	89b3      	ldrh	r3, [r6, #12]
 8003a18:	061a      	lsls	r2, r3, #24
 8003a1a:	d410      	bmi.n	8003a3e <__swhatbuf_r+0x3e>
 8003a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a20:	e00e      	b.n	8003a40 <__swhatbuf_r+0x40>
 8003a22:	466a      	mov	r2, sp
 8003a24:	f000 f96e 	bl	8003d04 <_fstat_r>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	dbf2      	blt.n	8003a12 <__swhatbuf_r+0x12>
 8003a2c:	9a01      	ldr	r2, [sp, #4]
 8003a2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a36:	425a      	negs	r2, r3
 8003a38:	415a      	adcs	r2, r3
 8003a3a:	602a      	str	r2, [r5, #0]
 8003a3c:	e7ee      	b.n	8003a1c <__swhatbuf_r+0x1c>
 8003a3e:	2340      	movs	r3, #64	; 0x40
 8003a40:	2000      	movs	r0, #0
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	b016      	add	sp, #88	; 0x58
 8003a46:	bd70      	pop	{r4, r5, r6, pc}

08003a48 <__smakebuf_r>:
 8003a48:	898b      	ldrh	r3, [r1, #12]
 8003a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a4c:	079d      	lsls	r5, r3, #30
 8003a4e:	4606      	mov	r6, r0
 8003a50:	460c      	mov	r4, r1
 8003a52:	d507      	bpl.n	8003a64 <__smakebuf_r+0x1c>
 8003a54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	6123      	str	r3, [r4, #16]
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	6163      	str	r3, [r4, #20]
 8003a60:	b002      	add	sp, #8
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	ab01      	add	r3, sp, #4
 8003a66:	466a      	mov	r2, sp
 8003a68:	f7ff ffca 	bl	8003a00 <__swhatbuf_r>
 8003a6c:	9900      	ldr	r1, [sp, #0]
 8003a6e:	4605      	mov	r5, r0
 8003a70:	4630      	mov	r0, r6
 8003a72:	f000 f877 	bl	8003b64 <_malloc_r>
 8003a76:	b948      	cbnz	r0, 8003a8c <__smakebuf_r+0x44>
 8003a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a7c:	059a      	lsls	r2, r3, #22
 8003a7e:	d4ef      	bmi.n	8003a60 <__smakebuf_r+0x18>
 8003a80:	f023 0303 	bic.w	r3, r3, #3
 8003a84:	f043 0302 	orr.w	r3, r3, #2
 8003a88:	81a3      	strh	r3, [r4, #12]
 8003a8a:	e7e3      	b.n	8003a54 <__smakebuf_r+0xc>
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <__smakebuf_r+0x7c>)
 8003a8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	6020      	str	r0, [r4, #0]
 8003a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a98:	81a3      	strh	r3, [r4, #12]
 8003a9a:	9b00      	ldr	r3, [sp, #0]
 8003a9c:	6163      	str	r3, [r4, #20]
 8003a9e:	9b01      	ldr	r3, [sp, #4]
 8003aa0:	6120      	str	r0, [r4, #16]
 8003aa2:	b15b      	cbz	r3, 8003abc <__smakebuf_r+0x74>
 8003aa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 f93d 	bl	8003d28 <_isatty_r>
 8003aae:	b128      	cbz	r0, 8003abc <__smakebuf_r+0x74>
 8003ab0:	89a3      	ldrh	r3, [r4, #12]
 8003ab2:	f023 0303 	bic.w	r3, r3, #3
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	81a3      	strh	r3, [r4, #12]
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	431d      	orrs	r5, r3
 8003ac0:	81a5      	strh	r5, [r4, #12]
 8003ac2:	e7cd      	b.n	8003a60 <__smakebuf_r+0x18>
 8003ac4:	080038b5 	.word	0x080038b5

08003ac8 <_free_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	4605      	mov	r5, r0
 8003acc:	2900      	cmp	r1, #0
 8003ace:	d045      	beq.n	8003b5c <_free_r+0x94>
 8003ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ad4:	1f0c      	subs	r4, r1, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bfb8      	it	lt
 8003ada:	18e4      	addlt	r4, r4, r3
 8003adc:	f000 f946 	bl	8003d6c <__malloc_lock>
 8003ae0:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <_free_r+0x98>)
 8003ae2:	6813      	ldr	r3, [r2, #0]
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	b933      	cbnz	r3, 8003af6 <_free_r+0x2e>
 8003ae8:	6063      	str	r3, [r4, #4]
 8003aea:	6014      	str	r4, [r2, #0]
 8003aec:	4628      	mov	r0, r5
 8003aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003af2:	f000 b93c 	b.w	8003d6e <__malloc_unlock>
 8003af6:	42a3      	cmp	r3, r4
 8003af8:	d90c      	bls.n	8003b14 <_free_r+0x4c>
 8003afa:	6821      	ldr	r1, [r4, #0]
 8003afc:	1862      	adds	r2, r4, r1
 8003afe:	4293      	cmp	r3, r2
 8003b00:	bf04      	itt	eq
 8003b02:	681a      	ldreq	r2, [r3, #0]
 8003b04:	685b      	ldreq	r3, [r3, #4]
 8003b06:	6063      	str	r3, [r4, #4]
 8003b08:	bf04      	itt	eq
 8003b0a:	1852      	addeq	r2, r2, r1
 8003b0c:	6022      	streq	r2, [r4, #0]
 8003b0e:	6004      	str	r4, [r0, #0]
 8003b10:	e7ec      	b.n	8003aec <_free_r+0x24>
 8003b12:	4613      	mov	r3, r2
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	b10a      	cbz	r2, 8003b1c <_free_r+0x54>
 8003b18:	42a2      	cmp	r2, r4
 8003b1a:	d9fa      	bls.n	8003b12 <_free_r+0x4a>
 8003b1c:	6819      	ldr	r1, [r3, #0]
 8003b1e:	1858      	adds	r0, r3, r1
 8003b20:	42a0      	cmp	r0, r4
 8003b22:	d10b      	bne.n	8003b3c <_free_r+0x74>
 8003b24:	6820      	ldr	r0, [r4, #0]
 8003b26:	4401      	add	r1, r0
 8003b28:	1858      	adds	r0, r3, r1
 8003b2a:	4282      	cmp	r2, r0
 8003b2c:	6019      	str	r1, [r3, #0]
 8003b2e:	d1dd      	bne.n	8003aec <_free_r+0x24>
 8003b30:	6810      	ldr	r0, [r2, #0]
 8003b32:	6852      	ldr	r2, [r2, #4]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	4401      	add	r1, r0
 8003b38:	6019      	str	r1, [r3, #0]
 8003b3a:	e7d7      	b.n	8003aec <_free_r+0x24>
 8003b3c:	d902      	bls.n	8003b44 <_free_r+0x7c>
 8003b3e:	230c      	movs	r3, #12
 8003b40:	602b      	str	r3, [r5, #0]
 8003b42:	e7d3      	b.n	8003aec <_free_r+0x24>
 8003b44:	6820      	ldr	r0, [r4, #0]
 8003b46:	1821      	adds	r1, r4, r0
 8003b48:	428a      	cmp	r2, r1
 8003b4a:	bf04      	itt	eq
 8003b4c:	6811      	ldreq	r1, [r2, #0]
 8003b4e:	6852      	ldreq	r2, [r2, #4]
 8003b50:	6062      	str	r2, [r4, #4]
 8003b52:	bf04      	itt	eq
 8003b54:	1809      	addeq	r1, r1, r0
 8003b56:	6021      	streq	r1, [r4, #0]
 8003b58:	605c      	str	r4, [r3, #4]
 8003b5a:	e7c7      	b.n	8003aec <_free_r+0x24>
 8003b5c:	bd38      	pop	{r3, r4, r5, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000094 	.word	0x20000094

08003b64 <_malloc_r>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	1ccd      	adds	r5, r1, #3
 8003b68:	f025 0503 	bic.w	r5, r5, #3
 8003b6c:	3508      	adds	r5, #8
 8003b6e:	2d0c      	cmp	r5, #12
 8003b70:	bf38      	it	cc
 8003b72:	250c      	movcc	r5, #12
 8003b74:	2d00      	cmp	r5, #0
 8003b76:	4606      	mov	r6, r0
 8003b78:	db01      	blt.n	8003b7e <_malloc_r+0x1a>
 8003b7a:	42a9      	cmp	r1, r5
 8003b7c:	d903      	bls.n	8003b86 <_malloc_r+0x22>
 8003b7e:	230c      	movs	r3, #12
 8003b80:	6033      	str	r3, [r6, #0]
 8003b82:	2000      	movs	r0, #0
 8003b84:	bd70      	pop	{r4, r5, r6, pc}
 8003b86:	f000 f8f1 	bl	8003d6c <__malloc_lock>
 8003b8a:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <_malloc_r+0xac>)
 8003b8c:	6814      	ldr	r4, [r2, #0]
 8003b8e:	4621      	mov	r1, r4
 8003b90:	b991      	cbnz	r1, 8003bb8 <_malloc_r+0x54>
 8003b92:	4c20      	ldr	r4, [pc, #128]	; (8003c14 <_malloc_r+0xb0>)
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	b91b      	cbnz	r3, 8003ba0 <_malloc_r+0x3c>
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f000 f83d 	bl	8003c18 <_sbrk_r>
 8003b9e:	6020      	str	r0, [r4, #0]
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	f000 f838 	bl	8003c18 <_sbrk_r>
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	d124      	bne.n	8003bf6 <_malloc_r+0x92>
 8003bac:	230c      	movs	r3, #12
 8003bae:	6033      	str	r3, [r6, #0]
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f000 f8dc 	bl	8003d6e <__malloc_unlock>
 8003bb6:	e7e4      	b.n	8003b82 <_malloc_r+0x1e>
 8003bb8:	680b      	ldr	r3, [r1, #0]
 8003bba:	1b5b      	subs	r3, r3, r5
 8003bbc:	d418      	bmi.n	8003bf0 <_malloc_r+0x8c>
 8003bbe:	2b0b      	cmp	r3, #11
 8003bc0:	d90f      	bls.n	8003be2 <_malloc_r+0x7e>
 8003bc2:	600b      	str	r3, [r1, #0]
 8003bc4:	50cd      	str	r5, [r1, r3]
 8003bc6:	18cc      	adds	r4, r1, r3
 8003bc8:	4630      	mov	r0, r6
 8003bca:	f000 f8d0 	bl	8003d6e <__malloc_unlock>
 8003bce:	f104 000b 	add.w	r0, r4, #11
 8003bd2:	1d23      	adds	r3, r4, #4
 8003bd4:	f020 0007 	bic.w	r0, r0, #7
 8003bd8:	1ac3      	subs	r3, r0, r3
 8003bda:	d0d3      	beq.n	8003b84 <_malloc_r+0x20>
 8003bdc:	425a      	negs	r2, r3
 8003bde:	50e2      	str	r2, [r4, r3]
 8003be0:	e7d0      	b.n	8003b84 <_malloc_r+0x20>
 8003be2:	428c      	cmp	r4, r1
 8003be4:	684b      	ldr	r3, [r1, #4]
 8003be6:	bf16      	itet	ne
 8003be8:	6063      	strne	r3, [r4, #4]
 8003bea:	6013      	streq	r3, [r2, #0]
 8003bec:	460c      	movne	r4, r1
 8003bee:	e7eb      	b.n	8003bc8 <_malloc_r+0x64>
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	6849      	ldr	r1, [r1, #4]
 8003bf4:	e7cc      	b.n	8003b90 <_malloc_r+0x2c>
 8003bf6:	1cc4      	adds	r4, r0, #3
 8003bf8:	f024 0403 	bic.w	r4, r4, #3
 8003bfc:	42a0      	cmp	r0, r4
 8003bfe:	d005      	beq.n	8003c0c <_malloc_r+0xa8>
 8003c00:	1a21      	subs	r1, r4, r0
 8003c02:	4630      	mov	r0, r6
 8003c04:	f000 f808 	bl	8003c18 <_sbrk_r>
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d0cf      	beq.n	8003bac <_malloc_r+0x48>
 8003c0c:	6025      	str	r5, [r4, #0]
 8003c0e:	e7db      	b.n	8003bc8 <_malloc_r+0x64>
 8003c10:	20000094 	.word	0x20000094
 8003c14:	20000098 	.word	0x20000098

08003c18 <_sbrk_r>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	4c06      	ldr	r4, [pc, #24]	; (8003c34 <_sbrk_r+0x1c>)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	4605      	mov	r5, r0
 8003c20:	4608      	mov	r0, r1
 8003c22:	6023      	str	r3, [r4, #0]
 8003c24:	f7fc ffb4 	bl	8000b90 <_sbrk>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d102      	bne.n	8003c32 <_sbrk_r+0x1a>
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	b103      	cbz	r3, 8003c32 <_sbrk_r+0x1a>
 8003c30:	602b      	str	r3, [r5, #0]
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	2000015c 	.word	0x2000015c

08003c38 <__sread>:
 8003c38:	b510      	push	{r4, lr}
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c40:	f000 f896 	bl	8003d70 <_read_r>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	bfab      	itete	ge
 8003c48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8003c4c:	181b      	addge	r3, r3, r0
 8003c4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c52:	bfac      	ite	ge
 8003c54:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c56:	81a3      	strhlt	r3, [r4, #12]
 8003c58:	bd10      	pop	{r4, pc}

08003c5a <__swrite>:
 8003c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5e:	461f      	mov	r7, r3
 8003c60:	898b      	ldrh	r3, [r1, #12]
 8003c62:	05db      	lsls	r3, r3, #23
 8003c64:	4605      	mov	r5, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	4616      	mov	r6, r2
 8003c6a:	d505      	bpl.n	8003c78 <__swrite+0x1e>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c74:	f000 f868 	bl	8003d48 <_lseek_r>
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c82:	81a3      	strh	r3, [r4, #12]
 8003c84:	4632      	mov	r2, r6
 8003c86:	463b      	mov	r3, r7
 8003c88:	4628      	mov	r0, r5
 8003c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c8e:	f000 b817 	b.w	8003cc0 <_write_r>

08003c92 <__sseek>:
 8003c92:	b510      	push	{r4, lr}
 8003c94:	460c      	mov	r4, r1
 8003c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c9a:	f000 f855 	bl	8003d48 <_lseek_r>
 8003c9e:	1c43      	adds	r3, r0, #1
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	bf15      	itete	ne
 8003ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cae:	81a3      	strheq	r3, [r4, #12]
 8003cb0:	bf18      	it	ne
 8003cb2:	81a3      	strhne	r3, [r4, #12]
 8003cb4:	bd10      	pop	{r4, pc}

08003cb6 <__sclose>:
 8003cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cba:	f000 b813 	b.w	8003ce4 <_close_r>
	...

08003cc0 <_write_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4c07      	ldr	r4, [pc, #28]	; (8003ce0 <_write_r+0x20>)
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	4608      	mov	r0, r1
 8003cc8:	4611      	mov	r1, r2
 8003cca:	2200      	movs	r2, #0
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f7fc ff0d 	bl	8000aee <_write>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_write_r+0x1e>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_write_r+0x1e>
 8003cdc:	602b      	str	r3, [r5, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	2000015c 	.word	0x2000015c

08003ce4 <_close_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4c06      	ldr	r4, [pc, #24]	; (8003d00 <_close_r+0x1c>)
 8003ce8:	2300      	movs	r3, #0
 8003cea:	4605      	mov	r5, r0
 8003cec:	4608      	mov	r0, r1
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	f7fc ff19 	bl	8000b26 <_close>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d102      	bne.n	8003cfe <_close_r+0x1a>
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	b103      	cbz	r3, 8003cfe <_close_r+0x1a>
 8003cfc:	602b      	str	r3, [r5, #0]
 8003cfe:	bd38      	pop	{r3, r4, r5, pc}
 8003d00:	2000015c 	.word	0x2000015c

08003d04 <_fstat_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4c07      	ldr	r4, [pc, #28]	; (8003d24 <_fstat_r+0x20>)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	f7fc ff14 	bl	8000b3e <_fstat>
 8003d16:	1c43      	adds	r3, r0, #1
 8003d18:	d102      	bne.n	8003d20 <_fstat_r+0x1c>
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	b103      	cbz	r3, 8003d20 <_fstat_r+0x1c>
 8003d1e:	602b      	str	r3, [r5, #0]
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
 8003d22:	bf00      	nop
 8003d24:	2000015c 	.word	0x2000015c

08003d28 <_isatty_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4c06      	ldr	r4, [pc, #24]	; (8003d44 <_isatty_r+0x1c>)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	4605      	mov	r5, r0
 8003d30:	4608      	mov	r0, r1
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	f7fc ff13 	bl	8000b5e <_isatty>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	d102      	bne.n	8003d42 <_isatty_r+0x1a>
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	b103      	cbz	r3, 8003d42 <_isatty_r+0x1a>
 8003d40:	602b      	str	r3, [r5, #0]
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	2000015c 	.word	0x2000015c

08003d48 <_lseek_r>:
 8003d48:	b538      	push	{r3, r4, r5, lr}
 8003d4a:	4c07      	ldr	r4, [pc, #28]	; (8003d68 <_lseek_r+0x20>)
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	4608      	mov	r0, r1
 8003d50:	4611      	mov	r1, r2
 8003d52:	2200      	movs	r2, #0
 8003d54:	6022      	str	r2, [r4, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f7fc ff0c 	bl	8000b74 <_lseek>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d102      	bne.n	8003d66 <_lseek_r+0x1e>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	b103      	cbz	r3, 8003d66 <_lseek_r+0x1e>
 8003d64:	602b      	str	r3, [r5, #0]
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	2000015c 	.word	0x2000015c

08003d6c <__malloc_lock>:
 8003d6c:	4770      	bx	lr

08003d6e <__malloc_unlock>:
 8003d6e:	4770      	bx	lr

08003d70 <_read_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4c07      	ldr	r4, [pc, #28]	; (8003d90 <_read_r+0x20>)
 8003d74:	4605      	mov	r5, r0
 8003d76:	4608      	mov	r0, r1
 8003d78:	4611      	mov	r1, r2
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	6022      	str	r2, [r4, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f7fc fe98 	bl	8000ab4 <_read>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	d102      	bne.n	8003d8e <_read_r+0x1e>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	b103      	cbz	r3, 8003d8e <_read_r+0x1e>
 8003d8c:	602b      	str	r3, [r5, #0]
 8003d8e:	bd38      	pop	{r3, r4, r5, pc}
 8003d90:	2000015c 	.word	0x2000015c

08003d94 <_init>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr

08003da0 <_fini>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	bf00      	nop
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr
