
Clock Recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003880  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a5c  08003a5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a64  08003a64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000010  08003a7c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003a7c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8f1  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017e3  00000000  00000000  0002a931  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  0002c118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  0002ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020dc3  00000000  00000000  0002d780  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000835e  00000000  00000000  0004e543  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb4c3  00000000  00000000  000568a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121d64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030bc  00000000  00000000  00121de0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003a2c 	.word	0x08003a2c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003a2c 	.word	0x08003a2c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fcd1 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f833 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f9ad 	bl	8000870 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f981 	bl	800081c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800051a:	f000 f90f 	bl	800073c <MX_TIM4_Init>
  MX_TIM2_Init();
 800051e:	f000 f897 	bl	8000650 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000522:	2100      	movs	r1, #0
 8000524:	4810      	ldr	r0, [pc, #64]	; (8000568 <main+0x64>)
 8000526:	f001 fd81 	bl	800202c <HAL_TIM_OC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800052a:	2100      	movs	r1, #0
 800052c:	480f      	ldr	r0, [pc, #60]	; (800056c <main+0x68>)
 800052e:	f001 fe37 	bl	80021a0 <HAL_TIM_IC_Start_IT>
  uint32_t captureVal;
  time = HAL_GetTick();
 8000532:	f000 fd23 	bl	8000f7c <HAL_GetTick>
 8000536:	4602      	mov	r2, r0
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <main+0x6c>)
 800053a:	601a      	str	r2, [r3, #0]
  uint32_t millis_wait = 50;
 800053c:	2332      	movs	r3, #50	; 0x32
 800053e:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GetTick() - time > millis_wait){
 8000540:	f000 fd1c 	bl	8000f7c <HAL_GetTick>
 8000544:	4602      	mov	r2, r0
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <main+0x6c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	429a      	cmp	r2, r3
 8000550:	d2f6      	bcs.n	8000540 <main+0x3c>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000552:	2101      	movs	r1, #1
 8000554:	4807      	ldr	r0, [pc, #28]	; (8000574 <main+0x70>)
 8000556:	f000 ffda 	bl	800150e <HAL_GPIO_TogglePin>
		  time = HAL_GetTick();
 800055a:	f000 fd0f 	bl	8000f7c <HAL_GetTick>
 800055e:	4602      	mov	r2, r0
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <main+0x6c>)
 8000562:	601a      	str	r2, [r3, #0]
	  if(HAL_GetTick() - time > millis_wait){
 8000564:	e7ec      	b.n	8000540 <main+0x3c>
 8000566:	bf00      	nop
 8000568:	20000104 	.word	0x20000104
 800056c:	20000058 	.word	0x20000058
 8000570:	2000009c 	.word	0x2000009c
 8000574:	40020000 	.word	0x40020000

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2234      	movs	r2, #52	; 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fa48 	bl	8003a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a28      	ldr	r2, [pc, #160]	; (8000648 <SystemClock_Config+0xd0>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <SystemClock_Config+0xd0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <SystemClock_Config+0xd4>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80005f0:	2350      	movs	r3, #80	; 0x50
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fa57 	bl	8001ab8 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000610:	f000 fab0 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	2102      	movs	r1, #2
 8000630:	4618      	mov	r0, r3
 8000632:	f000 ff87 	bl	8001544 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800063c:	f000 fa9a 	bl	8000b74 <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	; 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
 800067c:	615a      	str	r2, [r3, #20]
 800067e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000680:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <MX_TIM2_Init+0xe8>)
 8000682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_TIM2_Init+0xe8>)
 800068a:	2201      	movs	r2, #1
 800068c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068e:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <MX_TIM2_Init+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <MX_TIM2_Init+0xe8>)
 8000696:	f04f 32ff 	mov.w	r2, #4294967295
 800069a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_TIM2_Init+0xe8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006a8:	4823      	ldr	r0, [pc, #140]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006aa:	f001 fc5f 	bl	8001f6c <HAL_TIM_Base_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006b4:	f000 fa5e 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c2:	4619      	mov	r1, r3
 80006c4:	481c      	ldr	r0, [pc, #112]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006c6:	f001 ffd7 	bl	8002678 <HAL_TIM_ConfigClockSource>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006d0:	f000 fa50 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80006d4:	4818      	ldr	r0, [pc, #96]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006d6:	f001 fc74 	bl	8001fc2 <HAL_TIM_OC_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006e0:	f000 fa48 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4619      	mov	r1, r3
 80006f2:	4811      	ldr	r0, [pc, #68]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006f4:	f002 fd14 	bl	8003120 <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006fe:	f000 fa39 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <MX_TIM2_Init+0xe8>)
 800071a:	f001 feb1 	bl	8002480 <HAL_TIM_OC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000724:	f000 fa26 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <MX_TIM2_Init+0xe8>)
 800072a:	f000 fabf 	bl	8000cac <HAL_TIM_MspPostInit>

}
 800072e:	bf00      	nop
 8000730:	3738      	adds	r7, #56	; 0x38
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000104 	.word	0x20000104

0800073c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_TIM4_Init+0xd8>)
 8000768:	4a2b      	ldr	r2, [pc, #172]	; (8000818 <MX_TIM4_Init+0xdc>)
 800076a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 800076c:	4b29      	ldr	r3, [pc, #164]	; (8000814 <MX_TIM4_Init+0xd8>)
 800076e:	2201      	movs	r2, #1
 8000770:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <MX_TIM4_Init+0xd8>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_TIM4_Init+0xd8>)
 800077a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800077e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_TIM4_Init+0xd8>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <MX_TIM4_Init+0xd8>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800078c:	4821      	ldr	r0, [pc, #132]	; (8000814 <MX_TIM4_Init+0xd8>)
 800078e:	f001 fbed 	bl	8001f6c <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000798:	f000 f9ec 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	4619      	mov	r1, r3
 80007a8:	481a      	ldr	r0, [pc, #104]	; (8000814 <MX_TIM4_Init+0xd8>)
 80007aa:	f001 ff65 	bl	8002678 <HAL_TIM_ConfigClockSource>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80007b4:	f000 f9de 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80007b8:	4816      	ldr	r0, [pc, #88]	; (8000814 <MX_TIM4_Init+0xd8>)
 80007ba:	f001 fcbb 	bl	8002134 <HAL_TIM_IC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80007c4:	f000 f9d6 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	480f      	ldr	r0, [pc, #60]	; (8000814 <MX_TIM4_Init+0xd8>)
 80007d8:	f002 fca2 	bl	8003120 <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80007e2:	f000 f9c7 	bl	8000b74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80007e6:	230a      	movs	r3, #10
 80007e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007ea:	2301      	movs	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_TIM4_Init+0xd8>)
 80007fe:	f001 fe9f 	bl	8002540 <HAL_TIM_IC_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000808:	f000 f9b4 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	; 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000058 	.word	0x20000058
 8000818:	40000800 	.word	0x40000800

0800081c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_USART2_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000854:	f002 fcf4 	bl	8003240 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085e:	f000 f989 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000144 	.word	0x20000144
 800086c:	40004400 	.word	0x40004400

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a2c      	ldr	r2, [pc, #176]	; (8000940 <MX_GPIO_Init+0xd0>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a25      	ldr	r2, [pc, #148]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a1e      	ldr	r2, [pc, #120]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a17      	ldr	r2, [pc, #92]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2121      	movs	r1, #33	; 0x21
 80008fa:	4812      	ldr	r0, [pc, #72]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008fc:	f000 fdee 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_GPIO_Init+0xd8>)
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_GPIO_Init+0xdc>)
 8000916:	f000 fc4f 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 800091a:	2321      	movs	r3, #33	; 0x21
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_GPIO_Init+0xd4>)
 8000932:	f000 fc41 	bl	80011b8 <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000
 8000948:	10210000 	.word	0x10210000
 800094c:	40020800 	.word	0x40020800

08000950 <DifferenceWithinWindow>:

/* USER CODE BEGIN 4 */
bool DifferenceWithinWindow(uint32_t difference, uint8_t bit_number)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
	// does the margin get multiplied, too?

	//	uint32_t upper_bound = (((bit_number + 1) * SYMBOL_PERIOD) + SYMBOL_MARGIN);
	//	uint32_t lower_bound = (((bit_number + 1) * SYMBOL_PERIOD) - SYMBOL_MARGIN);

	uint32_t upper_bound = (((bit_number + 1) * (SYMBOL_PERIOD + SYMBOL_MARGIN)));
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	3301      	adds	r3, #1
 8000960:	4619      	mov	r1, r3
 8000962:	f248 2235 	movw	r2, #33333	; 0x8235
 8000966:	f640 5305 	movw	r3, #3333	; 0xd05
 800096a:	4413      	add	r3, r2
 800096c:	fb03 f301 	mul.w	r3, r3, r1
 8000970:	60fb      	str	r3, [r7, #12]
	uint32_t lower_bound = (((bit_number + 1) * (SYMBOL_PERIOD - SYMBOL_MARGIN)));
 8000972:	78fb      	ldrb	r3, [r7, #3]
 8000974:	3301      	adds	r3, #1
 8000976:	4619      	mov	r1, r3
 8000978:	f248 2235 	movw	r2, #33333	; 0x8235
 800097c:	f640 5305 	movw	r3, #3333	; 0xd05
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	fb03 f301 	mul.w	r3, r3, r1
 8000986:	60bb      	str	r3, [r7, #8]

	if ((lower_bound < difference) && (difference < upper_bound))
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	429a      	cmp	r2, r3
 800098e:	d205      	bcs.n	800099c <DifferenceWithinWindow+0x4c>
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	429a      	cmp	r2, r3
 8000996:	d201      	bcs.n	800099c <DifferenceWithinWindow+0x4c>
	{
		return true;
 8000998:	2301      	movs	r3, #1
 800099a:	e000      	b.n	800099e <DifferenceWithinWindow+0x4e>
	}
	return false;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <HAL_TIM_IC_CaptureCallback>:
bool signal_edge = RISING_EDGE;	// so we know what edge we are looking for (really, the opposite of the edge that was captured last
uint32_t this_capture = 0;		// simply stores either the rising or falling capture, based on which state we are in (avoids duplicate code)
uint8_t bit_num = 0;			// loop counter for difference timing correlator

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a48      	ldr	r2, [pc, #288]	; (8000adc <HAL_TIM_IC_CaptureCallback+0x130>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	f040 808a 	bne.w	8000ad4 <HAL_TIM_IC_CaptureCallback+0x128>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7f1b      	ldrb	r3, [r3, #28]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	f040 8085 	bne.w	8000ad4 <HAL_TIM_IC_CaptureCallback+0x128>
	{
		//Used to keep track of times this callback occurs
		IC_count4++;
 80009ca:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <HAL_TIM_IC_CaptureCallback+0x134>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	4a43      	ldr	r2, [pc, #268]	; (8000ae0 <HAL_TIM_IC_CaptureCallback+0x134>)
 80009d2:	6013      	str	r3, [r2, #0]

		//Rising Edge
		if (signal_edge == RISING_EDGE)
 80009d4:	4b43      	ldr	r3, [pc, #268]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x138>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d020      	beq.n	8000a1e <HAL_TIM_IC_CaptureCallback+0x72>
		{
			//Capture time that this interrupt occurs
			rising_capture = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);		// read the captured value
 80009dc:	2100      	movs	r1, #0
 80009de:	4842      	ldr	r0, [pc, #264]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009e0:	f001 ff02 	bl	80027e8 <HAL_TIM_ReadCapturedValue>
 80009e4:	4602      	mov	r2, r0
 80009e6:	4b41      	ldr	r3, [pc, #260]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x140>)
 80009e8:	601a      	str	r2, [r3, #0]
			rise_captured = true;
 80009ea:	4b41      	ldr	r3, [pc, #260]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
			signal_edge = FALLING_EDGE;		// look for falling edge on next capture
 80009f0:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x138>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]

			if (rise_captured && fall_captured)
 80009f6:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d02f      	beq.n	8000a5e <HAL_TIM_IC_CaptureCallback+0xb2>
 80009fe:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d02b      	beq.n	8000a5e <HAL_TIM_IC_CaptureCallback+0xb2>
			{
				capture_difference = rising_capture - falling_capture;		// calculate difference
 8000a06:	4b39      	ldr	r3, [pc, #228]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x140>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	4a3a      	ldr	r2, [pc, #232]	; (8000afc <HAL_TIM_IC_CaptureCallback+0x150>)
 8000a12:	6013      	str	r3, [r2, #0]
				this_capture = rising_capture;		// set current sample to rising edge
 8000a14:	4b35      	ldr	r3, [pc, #212]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x140>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a39      	ldr	r2, [pc, #228]	; (8000b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e01f      	b.n	8000a5e <HAL_TIM_IC_CaptureCallback+0xb2>
		}

		//Falling Edge
		else
		{
			falling_capture = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);		// read the captured value
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4831      	ldr	r0, [pc, #196]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000a22:	f001 fee1 	bl	80027e8 <HAL_TIM_ReadCapturedValue>
 8000a26:	4602      	mov	r2, r0
 8000a28:	4b33      	ldr	r3, [pc, #204]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000a2a:	601a      	str	r2, [r3, #0]
			fall_captured = true;
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
			signal_edge = RISING_EDGE;		// look for rising edge on next capture
 8000a32:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]

			if (rise_captured && fall_captured)
 8000a38:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00e      	beq.n	8000a5e <HAL_TIM_IC_CaptureCallback+0xb2>
 8000a40:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d00a      	beq.n	8000a5e <HAL_TIM_IC_CaptureCallback+0xb2>
			{
				capture_difference = falling_capture - rising_capture;		// calculate difference
 8000a48:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b27      	ldr	r3, [pc, #156]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x140>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <HAL_TIM_IC_CaptureCallback+0x150>)
 8000a54:	6013      	str	r3, [r2, #0]
				this_capture = falling_capture;
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a29      	ldr	r2, [pc, #164]	; (8000b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000a5c:	6013      	str	r3, [r2, #0]
			}
		}

		if (rise_captured && fall_captured)
 8000a5e:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d036      	beq.n	8000ad4 <HAL_TIM_IC_CaptureCallback+0x128>
 8000a66:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d032      	beq.n	8000ad4 <HAL_TIM_IC_CaptureCallback+0x128>
		{
			// this may need to be adjusted to account for HDLC limitation of valid data to 6 consecutive 1 bits (6 bit periods without a transition)
			// but works as is
			for (bit_num = 0; bit_num < 8; bit_num ++)
 8000a6e:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e029      	b.n	8000aca <HAL_TIM_IC_CaptureCallback+0x11e>
			{
				if (DifferenceWithinWindow(capture_difference, bit_num))		// iteratively check to see if the difference between the last and current transition falls within any acceptable bit window
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <HAL_TIM_IC_CaptureCallback+0x150>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4610      	mov	r0, r2
 8000a82:	f7ff ff65 	bl	8000950 <DifferenceWithinWindow>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d018      	beq.n	8000abe <HAL_TIM_IC_CaptureCallback+0x112>
				{
					new_bit_period = (capture_difference / (bit_num + 1));		// if correlated, we calculate when we expect the next transition to theoretically fall, if the next bit period were the same as the current one
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_TIM_IC_CaptureCallback+0x150>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	3201      	adds	r2, #1
 8000a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a9a:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000a9c:	6013      	str	r3, [r2, #0]
																				// this configuration will generate a 600 Hz (1200 transition/second) clock on the output compare module/pin
					next_capture_time = this_capture + new_bit_period;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x160>)
 8000aaa:	6013      	str	r3, [r2, #0]
					next_time = next_capture_time;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_TIM_IC_CaptureCallback+0x160>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000ab2:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, next_time);
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000aba:	6812      	ldr	r2, [r2, #0]
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
			for (bit_num = 0; bit_num < 8; bit_num ++)
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b07      	cmp	r3, #7
 8000ad0:	d9d1      	bls.n	8000a76 <HAL_TIM_IC_CaptureCallback+0xca>
				// probably need to do something in the event that we did not correlate with any of the acceptable windows
			}
		}
	}

	return;
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop

}
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40000800 	.word	0x40000800
 8000ae0:	2000003c 	.word	0x2000003c
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000058 	.word	0x20000058
 8000aec:	20000040 	.word	0x20000040
 8000af0:	20000048 	.word	0x20000048
 8000af4:	20000049 	.word	0x20000049
 8000af8:	20000044 	.word	0x20000044
 8000afc:	2000002c 	.word	0x2000002c
 8000b00:	2000004c 	.word	0x2000004c
 8000b04:	20000050 	.word	0x20000050
 8000b08:	20000030 	.word	0x20000030
 8000b0c:	20000034 	.word	0x20000034
 8000b10:	20000038 	.word	0x20000038
 8000b14:	20000104 	.word	0x20000104

08000b18 <HAL_TIM_OC_DelayElapsedCallback>:

int OC_count2 = 0;
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b28:	d116      	bne.n	8000b58 <HAL_TIM_OC_DelayElapsedCallback+0x40>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7f1b      	ldrb	r3, [r3, #28]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d112      	bne.n	8000b58 <HAL_TIM_OC_DelayElapsedCallback+0x40>
	{
		OC_count2++;
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8000b3a:	6013      	str	r3, [r2, #0]
		next_time = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1) + (new_bit_period);
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000b4a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, next_time);
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return;
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
}
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	20000054 	.word	0x20000054
 8000b68:	20000104 	.word	0x20000104
 8000b6c:	20000030 	.word	0x20000030
 8000b70:	20000038 	.word	0x20000038

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc2:	2007      	movs	r0, #7
 8000bc4:	f000 fab6 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf4:	d116      	bne.n	8000c24 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <HAL_TIM_Base_MspInit+0xcc>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	201c      	movs	r0, #28
 8000c18:	f000 fa97 	bl	800114a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c1c:	201c      	movs	r0, #28
 8000c1e:	f000 fab0 	bl	8001182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c22:	e038      	b.n	8000c96 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM4)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <HAL_TIM_Base_MspInit+0xd0>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d133      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c66:	2340      	movs	r3, #64	; 0x40
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c76:	2302      	movs	r3, #2
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4809      	ldr	r0, [pc, #36]	; (8000ca8 <HAL_TIM_Base_MspInit+0xd4>)
 8000c82:	f000 fa99 	bl	80011b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	201e      	movs	r0, #30
 8000c8c:	f000 fa5d 	bl	800114a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c90:	201e      	movs	r0, #30
 8000c92:	f000 fa76 	bl	8001182 <HAL_NVIC_EnableIRQ>
}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40000800 	.word	0x40000800
 8000ca8:	40020400 	.word	0x40020400

08000cac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ccc:	d11e      	bne.n	8000d0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_TIM_MspPostInit+0x68>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <HAL_TIM_MspPostInit+0x68>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_TIM_MspPostInit+0x68>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	4804      	ldr	r0, [pc, #16]	; (8000d18 <HAL_TIM_MspPostInit+0x6c>)
 8000d08:	f000 fa56 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <HAL_UART_MspInit+0x84>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d12b      	bne.n	8000d96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d76:	230c      	movs	r3, #12
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d86:	2307      	movs	r3, #7
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <HAL_UART_MspInit+0x8c>)
 8000d92:	f000 fa11 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020000 	.word	0x40020000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 f8a8 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <TIM2_IRQHandler+0x10>)
 8000e0e:	f001 fa2f 	bl	8002270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000104 	.word	0x20000104

08000e1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <TIM4_IRQHandler+0x10>)
 8000e22:	f001 fa25 	bl	8002270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000058 	.word	0x20000058

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <SystemInit+0x28>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <SystemInit+0x28>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SystemInit+0x28>)
 8000e46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e62:	e003      	b.n	8000e6c <LoopCopyDataInit>

08000e64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e6a:	3104      	adds	r1, #4

08000e6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e6c:	480b      	ldr	r0, [pc, #44]	; (8000e9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e74:	d3f6      	bcc.n	8000e64 <CopyDataInit>
  ldr  r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e78:	e002      	b.n	8000e80 <LoopFillZerobss>

08000e7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e7c:	f842 3b04 	str.w	r3, [r2], #4

08000e80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e84:	d3f9      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e86:	f7ff ffd3 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f002 fda3 	bl	80039d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff fb39 	bl	8000504 <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e98:	08003a6c 	.word	0x08003a6c
  ldr  r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ea0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000ea4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000ea8:	20000188 	.word	0x20000188

08000eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_Init+0x40>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_Init+0x40>)
 8000ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_Init+0x40>)
 8000ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f92b 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 f808 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f7ff fe4e 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x54>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x58>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f943 	bl	800119e <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00e      	b.n	8000f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d80a      	bhi.n	8000f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f000 f90b 	bl	800114a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_InitTick+0x5c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000004 	.word	0x20000004
 8000f4c:	2000000c 	.word	0x2000000c
 8000f50:	20000008 	.word	0x20000008

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	2000000c 	.word	0x2000000c
 8000f78:	20000184 	.word	0x20000184

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000184 	.word	0x20000184

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4907      	ldr	r1, [pc, #28]	; (8001030 <__NVIC_EnableIRQ+0x38>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001100:	d301      	bcc.n	8001106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <SysTick_Config+0x40>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110e:	210f      	movs	r1, #15
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f7ff ff8e 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <SysTick_Config+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <SysTick_Config+0x40>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff29 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115c:	f7ff ff3e 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	6978      	ldr	r0, [r7, #20]
 8001168:	f7ff ff8e 	bl	8001088 <NVIC_EncodePriority>
 800116c:	4602      	mov	r2, r0
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff5d 	bl	8001034 <__NVIC_SetPriority>
}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff31 	bl	8000ff8 <__NVIC_EnableIRQ>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ffa2 	bl	80010f0 <SysTick_Config>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	e165      	b.n	80014a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d4:	2201      	movs	r2, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	f040 8154 	bne.w	800149a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d00b      	beq.n	8001212 <HAL_GPIO_Init+0x5a>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001206:	2b11      	cmp	r3, #17
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b12      	cmp	r3, #18
 8001210:	d130      	bne.n	8001274 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001248:	2201      	movs	r2, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 0201 	and.w	r2, r3, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0xfc>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b12      	cmp	r3, #18
 80012b2:	d123      	bne.n	80012fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	08da      	lsrs	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3208      	adds	r2, #8
 80012f6:	69b9      	ldr	r1, [r7, #24]
 80012f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0203 	and.w	r2, r3, #3
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80ae 	beq.w	800149a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <HAL_GPIO_Init+0x2fc>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <HAL_GPIO_Init+0x2fc>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <HAL_GPIO_Init+0x2fc>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135a:	4a57      	ldr	r2, [pc, #348]	; (80014b8 <HAL_GPIO_Init+0x300>)
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4e      	ldr	r2, [pc, #312]	; (80014bc <HAL_GPIO_Init+0x304>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d025      	beq.n	80013d2 <HAL_GPIO_Init+0x21a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4d      	ldr	r2, [pc, #308]	; (80014c0 <HAL_GPIO_Init+0x308>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d01f      	beq.n	80013ce <HAL_GPIO_Init+0x216>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4c      	ldr	r2, [pc, #304]	; (80014c4 <HAL_GPIO_Init+0x30c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d019      	beq.n	80013ca <HAL_GPIO_Init+0x212>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4b      	ldr	r2, [pc, #300]	; (80014c8 <HAL_GPIO_Init+0x310>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0x20e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4a      	ldr	r2, [pc, #296]	; (80014cc <HAL_GPIO_Init+0x314>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00d      	beq.n	80013c2 <HAL_GPIO_Init+0x20a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a49      	ldr	r2, [pc, #292]	; (80014d0 <HAL_GPIO_Init+0x318>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0x206>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <HAL_GPIO_Init+0x31c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_GPIO_Init+0x202>
 80013b6:	2306      	movs	r3, #6
 80013b8:	e00c      	b.n	80013d4 <HAL_GPIO_Init+0x21c>
 80013ba:	2307      	movs	r3, #7
 80013bc:	e00a      	b.n	80013d4 <HAL_GPIO_Init+0x21c>
 80013be:	2305      	movs	r3, #5
 80013c0:	e008      	b.n	80013d4 <HAL_GPIO_Init+0x21c>
 80013c2:	2304      	movs	r3, #4
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x21c>
 80013c6:	2303      	movs	r3, #3
 80013c8:	e004      	b.n	80013d4 <HAL_GPIO_Init+0x21c>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_Init+0x21c>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_GPIO_Init+0x21c>
 80013d2:	2300      	movs	r3, #0
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	f002 0203 	and.w	r2, r2, #3
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	4093      	lsls	r3, r2
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e4:	4934      	ldr	r1, [pc, #208]	; (80014b8 <HAL_GPIO_Init+0x300>)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <HAL_GPIO_Init+0x320>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001416:	4a30      	ldr	r2, [pc, #192]	; (80014d8 <HAL_GPIO_Init+0x320>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800141c:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <HAL_GPIO_Init+0x320>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001440:	4a25      	ldr	r2, [pc, #148]	; (80014d8 <HAL_GPIO_Init+0x320>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <HAL_GPIO_Init+0x320>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146a:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <HAL_GPIO_Init+0x320>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_GPIO_Init+0x320>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001494:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <HAL_GPIO_Init+0x320>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3301      	adds	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	2b0f      	cmp	r3, #15
 80014a4:	f67f ae96 	bls.w	80011d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a8:	bf00      	nop
 80014aa:	3724      	adds	r7, #36	; 0x24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40021400 	.word	0x40021400
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40013c00 	.word	0x40013c00

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f8:	e003      	b.n	8001502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	619a      	str	r2, [r3, #24]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	401a      	ands	r2, r3
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	429a      	cmp	r2, r3
 8001526:	d104      	bne.n	8001532 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	041a      	lsls	r2, r3, #16
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001530:	e002      	b.n	8001538 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0cc      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d90c      	bls.n	8001580 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b65      	ldr	r3, [pc, #404]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b63      	ldr	r3, [pc, #396]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0b8      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001598:	4b59      	ldr	r3, [pc, #356]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a58      	ldr	r2, [pc, #352]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b0:	4b53      	ldr	r3, [pc, #332]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a52      	ldr	r2, [pc, #328]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015bc:	4b50      	ldr	r3, [pc, #320]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	494d      	ldr	r1, [pc, #308]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d044      	beq.n	8001664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b47      	ldr	r3, [pc, #284]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d119      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e07f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d003      	beq.n	8001602 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001602:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e06f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001612:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e067      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001622:	4b37      	ldr	r3, [pc, #220]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 0203 	bic.w	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4934      	ldr	r1, [pc, #208]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001634:	f7ff fca2 	bl	8000f7c <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	e00a      	b.n	8001652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163c:	f7ff fc9e 	bl	8000f7c <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e04f      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 020c 	and.w	r2, r3, #12
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	429a      	cmp	r2, r3
 8001662:	d1eb      	bne.n	800163c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001664:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d20c      	bcs.n	800168c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e032      	b.n	80016f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4916      	ldr	r1, [pc, #88]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	490e      	ldr	r1, [pc, #56]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ca:	f000 f855 	bl	8001778 <HAL_RCC_GetSysClockFreq>
 80016ce:	4601      	mov	r1, r0
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	fa21 f303 	lsr.w	r3, r1, r3
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fc02 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023c00 	.word	0x40023c00
 8001700:	40023800 	.word	0x40023800
 8001704:	08003a44 	.word	0x08003a44
 8001708:	20000004 	.word	0x20000004
 800170c:	20000008 	.word	0x20000008

08001710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_RCC_GetHCLKFreq+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800172c:	f7ff fff0 	bl	8001710 <HAL_RCC_GetHCLKFreq>
 8001730:	4601      	mov	r1, r0
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	0a9b      	lsrs	r3, r3, #10
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <HAL_RCC_GetPCLK1Freq+0x24>)
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001744:	4618      	mov	r0, r3
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	08003a54 	.word	0x08003a54

08001750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001754:	f7ff ffdc 	bl	8001710 <HAL_RCC_GetHCLKFreq>
 8001758:	4601      	mov	r1, r0
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	0b5b      	lsrs	r3, r3, #13
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	4a03      	ldr	r2, [pc, #12]	; (8001774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001766:	5cd3      	ldrb	r3, [r2, r3]
 8001768:	fa21 f303 	lsr.w	r3, r1, r3
}
 800176c:	4618      	mov	r0, r3
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40023800 	.word	0x40023800
 8001774:	08003a54 	.word	0x08003a54

08001778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001792:	4bc6      	ldr	r3, [pc, #792]	; (8001aac <HAL_RCC_GetSysClockFreq+0x334>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b0c      	cmp	r3, #12
 800179c:	f200 817e 	bhi.w	8001a9c <HAL_RCC_GetSysClockFreq+0x324>
 80017a0:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <HAL_RCC_GetSysClockFreq+0x30>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017dd 	.word	0x080017dd
 80017ac:	08001a9d 	.word	0x08001a9d
 80017b0:	08001a9d 	.word	0x08001a9d
 80017b4:	08001a9d 	.word	0x08001a9d
 80017b8:	080017e3 	.word	0x080017e3
 80017bc:	08001a9d 	.word	0x08001a9d
 80017c0:	08001a9d 	.word	0x08001a9d
 80017c4:	08001a9d 	.word	0x08001a9d
 80017c8:	080017e9 	.word	0x080017e9
 80017cc:	08001a9d 	.word	0x08001a9d
 80017d0:	08001a9d 	.word	0x08001a9d
 80017d4:	08001a9d 	.word	0x08001a9d
 80017d8:	08001945 	.word	0x08001945
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4bb4      	ldr	r3, [pc, #720]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x338>)
 80017de:	613b      	str	r3, [r7, #16]
       break;
 80017e0:	e15f      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e2:	4bb4      	ldr	r3, [pc, #720]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80017e4:	613b      	str	r3, [r7, #16]
      break;
 80017e6:	e15c      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e8:	4bb0      	ldr	r3, [pc, #704]	; (8001aac <HAL_RCC_GetSysClockFreq+0x334>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f2:	4bae      	ldr	r3, [pc, #696]	; (8001aac <HAL_RCC_GetSysClockFreq+0x334>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d04a      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fe:	4bab      	ldr	r3, [pc, #684]	; (8001aac <HAL_RCC_GetSysClockFreq+0x334>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	099b      	lsrs	r3, r3, #6
 8001804:	f04f 0400 	mov.w	r4, #0
 8001808:	f240 11ff 	movw	r1, #511	; 0x1ff
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	ea03 0501 	and.w	r5, r3, r1
 8001814:	ea04 0602 	and.w	r6, r4, r2
 8001818:	4629      	mov	r1, r5
 800181a:	4632      	mov	r2, r6
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	f04f 0400 	mov.w	r4, #0
 8001824:	0154      	lsls	r4, r2, #5
 8001826:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800182a:	014b      	lsls	r3, r1, #5
 800182c:	4619      	mov	r1, r3
 800182e:	4622      	mov	r2, r4
 8001830:	1b49      	subs	r1, r1, r5
 8001832:	eb62 0206 	sbc.w	r2, r2, r6
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	f04f 0400 	mov.w	r4, #0
 800183e:	0194      	lsls	r4, r2, #6
 8001840:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001844:	018b      	lsls	r3, r1, #6
 8001846:	1a5b      	subs	r3, r3, r1
 8001848:	eb64 0402 	sbc.w	r4, r4, r2
 800184c:	f04f 0100 	mov.w	r1, #0
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	00e2      	lsls	r2, r4, #3
 8001856:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800185a:	00d9      	lsls	r1, r3, #3
 800185c:	460b      	mov	r3, r1
 800185e:	4614      	mov	r4, r2
 8001860:	195b      	adds	r3, r3, r5
 8001862:	eb44 0406 	adc.w	r4, r4, r6
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	0262      	lsls	r2, r4, #9
 8001870:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001874:	0259      	lsls	r1, r3, #9
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	4618      	mov	r0, r3
 800187c:	4621      	mov	r1, r4
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f04f 0400 	mov.w	r4, #0
 8001884:	461a      	mov	r2, r3
 8001886:	4623      	mov	r3, r4
 8001888:	f7fe fcbc 	bl	8000204 <__aeabi_uldivmod>
 800188c:	4603      	mov	r3, r0
 800188e:	460c      	mov	r4, r1
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	e049      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001894:	4b85      	ldr	r3, [pc, #532]	; (8001aac <HAL_RCC_GetSysClockFreq+0x334>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	f04f 0400 	mov.w	r4, #0
 800189e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	ea03 0501 	and.w	r5, r3, r1
 80018aa:	ea04 0602 	and.w	r6, r4, r2
 80018ae:	4629      	mov	r1, r5
 80018b0:	4632      	mov	r2, r6
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	f04f 0400 	mov.w	r4, #0
 80018ba:	0154      	lsls	r4, r2, #5
 80018bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018c0:	014b      	lsls	r3, r1, #5
 80018c2:	4619      	mov	r1, r3
 80018c4:	4622      	mov	r2, r4
 80018c6:	1b49      	subs	r1, r1, r5
 80018c8:	eb62 0206 	sbc.w	r2, r2, r6
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	f04f 0400 	mov.w	r4, #0
 80018d4:	0194      	lsls	r4, r2, #6
 80018d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018da:	018b      	lsls	r3, r1, #6
 80018dc:	1a5b      	subs	r3, r3, r1
 80018de:	eb64 0402 	sbc.w	r4, r4, r2
 80018e2:	f04f 0100 	mov.w	r1, #0
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	00e2      	lsls	r2, r4, #3
 80018ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018f0:	00d9      	lsls	r1, r3, #3
 80018f2:	460b      	mov	r3, r1
 80018f4:	4614      	mov	r4, r2
 80018f6:	195b      	adds	r3, r3, r5
 80018f8:	eb44 0406 	adc.w	r4, r4, r6
 80018fc:	f04f 0100 	mov.w	r1, #0
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	02a2      	lsls	r2, r4, #10
 8001906:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800190a:	0299      	lsls	r1, r3, #10
 800190c:	460b      	mov	r3, r1
 800190e:	4614      	mov	r4, r2
 8001910:	4618      	mov	r0, r3
 8001912:	4621      	mov	r1, r4
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f04f 0400 	mov.w	r4, #0
 800191a:	461a      	mov	r2, r3
 800191c:	4623      	mov	r3, r4
 800191e:	f7fe fc71 	bl	8000204 <__aeabi_uldivmod>
 8001922:	4603      	mov	r3, r0
 8001924:	460c      	mov	r4, r1
 8001926:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001928:	4b60      	ldr	r3, [pc, #384]	; (8001aac <HAL_RCC_GetSysClockFreq+0x334>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	3301      	adds	r3, #1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	613b      	str	r3, [r7, #16]
      break;
 8001942:	e0ae      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001944:	4b59      	ldr	r3, [pc, #356]	; (8001aac <HAL_RCC_GetSysClockFreq+0x334>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800194c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194e:	4b57      	ldr	r3, [pc, #348]	; (8001aac <HAL_RCC_GetSysClockFreq+0x334>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d04a      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195a:	4b54      	ldr	r3, [pc, #336]	; (8001aac <HAL_RCC_GetSysClockFreq+0x334>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	f04f 0400 	mov.w	r4, #0
 8001964:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	ea03 0501 	and.w	r5, r3, r1
 8001970:	ea04 0602 	and.w	r6, r4, r2
 8001974:	4629      	mov	r1, r5
 8001976:	4632      	mov	r2, r6
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	f04f 0400 	mov.w	r4, #0
 8001980:	0154      	lsls	r4, r2, #5
 8001982:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001986:	014b      	lsls	r3, r1, #5
 8001988:	4619      	mov	r1, r3
 800198a:	4622      	mov	r2, r4
 800198c:	1b49      	subs	r1, r1, r5
 800198e:	eb62 0206 	sbc.w	r2, r2, r6
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	f04f 0400 	mov.w	r4, #0
 800199a:	0194      	lsls	r4, r2, #6
 800199c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019a0:	018b      	lsls	r3, r1, #6
 80019a2:	1a5b      	subs	r3, r3, r1
 80019a4:	eb64 0402 	sbc.w	r4, r4, r2
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	00e2      	lsls	r2, r4, #3
 80019b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019b6:	00d9      	lsls	r1, r3, #3
 80019b8:	460b      	mov	r3, r1
 80019ba:	4614      	mov	r4, r2
 80019bc:	195b      	adds	r3, r3, r5
 80019be:	eb44 0406 	adc.w	r4, r4, r6
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	0262      	lsls	r2, r4, #9
 80019cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80019d0:	0259      	lsls	r1, r3, #9
 80019d2:	460b      	mov	r3, r1
 80019d4:	4614      	mov	r4, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	4621      	mov	r1, r4
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f04f 0400 	mov.w	r4, #0
 80019e0:	461a      	mov	r2, r3
 80019e2:	4623      	mov	r3, r4
 80019e4:	f7fe fc0e 	bl	8000204 <__aeabi_uldivmod>
 80019e8:	4603      	mov	r3, r0
 80019ea:	460c      	mov	r4, r1
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e049      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f0:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_RCC_GetSysClockFreq+0x334>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	099b      	lsrs	r3, r3, #6
 80019f6:	f04f 0400 	mov.w	r4, #0
 80019fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	ea03 0501 	and.w	r5, r3, r1
 8001a06:	ea04 0602 	and.w	r6, r4, r2
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	4632      	mov	r2, r6
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	f04f 0400 	mov.w	r4, #0
 8001a16:	0154      	lsls	r4, r2, #5
 8001a18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a1c:	014b      	lsls	r3, r1, #5
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4622      	mov	r2, r4
 8001a22:	1b49      	subs	r1, r1, r5
 8001a24:	eb62 0206 	sbc.w	r2, r2, r6
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	f04f 0400 	mov.w	r4, #0
 8001a30:	0194      	lsls	r4, r2, #6
 8001a32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a36:	018b      	lsls	r3, r1, #6
 8001a38:	1a5b      	subs	r3, r3, r1
 8001a3a:	eb64 0402 	sbc.w	r4, r4, r2
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	00e2      	lsls	r2, r4, #3
 8001a48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a4c:	00d9      	lsls	r1, r3, #3
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4614      	mov	r4, r2
 8001a52:	195b      	adds	r3, r3, r5
 8001a54:	eb44 0406 	adc.w	r4, r4, r6
 8001a58:	f04f 0100 	mov.w	r1, #0
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	02a2      	lsls	r2, r4, #10
 8001a62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a66:	0299      	lsls	r1, r3, #10
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4614      	mov	r4, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	4621      	mov	r1, r4
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f04f 0400 	mov.w	r4, #0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4623      	mov	r3, r4
 8001a7a:	f7fe fbc3 	bl	8000204 <__aeabi_uldivmod>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	460c      	mov	r4, r1
 8001a82:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_GetSysClockFreq+0x334>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	0f1b      	lsrs	r3, r3, #28
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a98:	613b      	str	r3, [r7, #16]
      break;
 8001a9a:	e002      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x338>)
 8001a9e:	613b      	str	r3, [r7, #16]
      break;
 8001aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa2:	693b      	ldr	r3, [r7, #16]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	00f42400 	.word	0x00f42400
 8001ab4:	007a1200 	.word	0x007a1200

08001ab8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8083 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ad2:	4b95      	ldr	r3, [pc, #596]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d019      	beq.n	8001b12 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ade:	4b92      	ldr	r3, [pc, #584]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aea:	4b8f      	ldr	r3, [pc, #572]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001af6:	d00c      	beq.n	8001b12 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af8:	4b8b      	ldr	r3, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	d112      	bne.n	8001b2a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b04:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b10:	d10b      	bne.n	8001b2a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b12:	4b85      	ldr	r3, [pc, #532]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d05b      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x11e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d157      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e216      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x8a>
 8001b34:	4b7c      	ldr	r3, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a7b      	ldr	r2, [pc, #492]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e01d      	b.n	8001b7e <HAL_RCC_OscConfig+0xc6>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b4a:	d10c      	bne.n	8001b66 <HAL_RCC_OscConfig+0xae>
 8001b4c:	4b76      	ldr	r3, [pc, #472]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a75      	ldr	r2, [pc, #468]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a72      	ldr	r2, [pc, #456]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	e00b      	b.n	8001b7e <HAL_RCC_OscConfig+0xc6>
 8001b66:	4b70      	ldr	r3, [pc, #448]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a6f      	ldr	r2, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b6d      	ldr	r3, [pc, #436]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a6c      	ldr	r2, [pc, #432]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d013      	beq.n	8001bae <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff f9f9 	bl	8000f7c <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b8e:	f7ff f9f5 	bl	8000f7c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b64      	cmp	r3, #100	; 0x64
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e1db      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba0:	4b61      	ldr	r3, [pc, #388]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0xd6>
 8001bac:	e014      	b.n	8001bd8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff f9e5 	bl	8000f7c <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb6:	f7ff f9e1 	bl	8000f7c <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b64      	cmp	r3, #100	; 0x64
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1c7      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc8:	4b57      	ldr	r3, [pc, #348]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f0      	bne.n	8001bb6 <HAL_RCC_OscConfig+0xfe>
 8001bd4:	e000      	b.n	8001bd8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d06f      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001be4:	4b50      	ldr	r3, [pc, #320]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d017      	beq.n	8001c20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bf0:	4b4d      	ldr	r3, [pc, #308]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d105      	bne.n	8001c08 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bfc:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00b      	beq.n	8001c20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c08:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c10:	2b0c      	cmp	r3, #12
 8001c12:	d11c      	bne.n	8001c4e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c14:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d116      	bne.n	8001c4e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c20:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_OscConfig+0x180>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e18f      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4938      	ldr	r1, [pc, #224]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4c:	e03a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d020      	beq.n	8001c98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c56:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f98e 	bl	8000f7c <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff f98a 	bl	8000f7c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e170      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c82:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4925      	ldr	r1, [pc, #148]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
 8001c96:	e015      	b.n	8001cc4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7ff f96d 	bl	8000f7c <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff f969 	bl	8000f7c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e14f      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d037      	beq.n	8001d40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d016      	beq.n	8001d06 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_RCC_OscConfig+0x278>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7ff f94d 	bl	8000f7c <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce6:	f7ff f949 	bl	8000f7c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e12f      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x22e>
 8001d04:	e01c      	b.n	8001d40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_RCC_OscConfig+0x278>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f936 	bl	8000f7c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d12:	e00f      	b.n	8001d34 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff f932 	bl	8000f7c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d908      	bls.n	8001d34 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e118      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	42470000 	.word	0x42470000
 8001d30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d34:	4b8a      	ldr	r3, [pc, #552]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1e9      	bne.n	8001d14 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 8097 	beq.w	8001e7c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d52:	4b83      	ldr	r3, [pc, #524]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10f      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a7e      	ldr	r2, [pc, #504]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b7c      	ldr	r3, [pc, #496]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7e:	4b79      	ldr	r3, [pc, #484]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a75      	ldr	r2, [pc, #468]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d96:	f7ff f8f1 	bl	8000f7c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7ff f8ed 	bl	8000f7c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0d3      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x31a>
 8001dc4:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	4a65      	ldr	r2, [pc, #404]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd0:	e01c      	b.n	8001e0c <HAL_RCC_OscConfig+0x354>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x33c>
 8001dda:	4b61      	ldr	r3, [pc, #388]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dde:	4a60      	ldr	r2, [pc, #384]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6713      	str	r3, [r2, #112]	; 0x70
 8001de6:	4b5e      	ldr	r3, [pc, #376]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	4a5d      	ldr	r2, [pc, #372]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6713      	str	r3, [r2, #112]	; 0x70
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0x354>
 8001df4:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	4a59      	ldr	r2, [pc, #356]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001dfa:	f023 0301 	bic.w	r3, r3, #1
 8001dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001e00:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	4a56      	ldr	r2, [pc, #344]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001e06:	f023 0304 	bic.w	r3, r3, #4
 8001e0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d015      	beq.n	8001e40 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7ff f8b2 	bl	8000f7c <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1c:	f7ff f8ae 	bl	8000f7c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e092      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e32:	4b4b      	ldr	r3, [pc, #300]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0ee      	beq.n	8001e1c <HAL_RCC_OscConfig+0x364>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff f89c 	bl	8000f7c <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7ff f898 	bl	8000f7c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e07c      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5e:	4b40      	ldr	r3, [pc, #256]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1ee      	bne.n	8001e48 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e70:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a3a      	ldr	r2, [pc, #232]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d068      	beq.n	8001f56 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e84:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d060      	beq.n	8001f52 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d145      	bne.n	8001f24 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e98:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <HAL_RCC_OscConfig+0x4b0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7ff f86d 	bl	8000f7c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7ff f869 	bl	8000f7c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e04f      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb8:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	019b      	lsls	r3, r3, #6
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	085b      	lsrs	r3, r3, #1
 8001edc:	3b01      	subs	r3, #1
 8001ede:	041b      	lsls	r3, r3, #16
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	061b      	lsls	r3, r3, #24
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	071b      	lsls	r3, r3, #28
 8001ef0:	491b      	ldr	r1, [pc, #108]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_RCC_OscConfig+0x4b0>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff f83e 	bl	8000f7c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff f83a 	bl	8000f7c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e020      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x44c>
 8001f22:	e018      	b.n	8001f56 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_RCC_OscConfig+0x4b0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2a:	f7ff f827 	bl	8000f7c <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f32:	f7ff f823 	bl	8000f7c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e009      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_OscConfig+0x4a8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x47a>
 8001f50:	e001      	b.n	8001f56 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40007000 	.word	0x40007000
 8001f68:	42470060 	.word	0x42470060

08001f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e01d      	b.n	8001fba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe fe1e 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4610      	mov	r0, r2
 8001fac:	f000 fc7e 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e01d      	b.n	8002010 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f815 	bl	8002018 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f000 fc53 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b0c      	cmp	r3, #12
 800203a:	d841      	bhi.n	80020c0 <HAL_TIM_OC_Start_IT+0x94>
 800203c:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <HAL_TIM_OC_Start_IT+0x18>)
 800203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002042:	bf00      	nop
 8002044:	08002079 	.word	0x08002079
 8002048:	080020c1 	.word	0x080020c1
 800204c:	080020c1 	.word	0x080020c1
 8002050:	080020c1 	.word	0x080020c1
 8002054:	0800208b 	.word	0x0800208b
 8002058:	080020c1 	.word	0x080020c1
 800205c:	080020c1 	.word	0x080020c1
 8002060:	080020c1 	.word	0x080020c1
 8002064:	0800209d 	.word	0x0800209d
 8002068:	080020c1 	.word	0x080020c1
 800206c:	080020c1 	.word	0x080020c1
 8002070:	080020c1 	.word	0x080020c1
 8002074:	080020af 	.word	0x080020af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0202 	orr.w	r2, r2, #2
 8002086:	60da      	str	r2, [r3, #12]
      break;
 8002088:	e01b      	b.n	80020c2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0204 	orr.w	r2, r2, #4
 8002098:	60da      	str	r2, [r3, #12]
      break;
 800209a:	e012      	b.n	80020c2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0208 	orr.w	r2, r2, #8
 80020aa:	60da      	str	r2, [r3, #12]
      break;
 80020ac:	e009      	b.n	80020c2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0210 	orr.w	r2, r2, #16
 80020bc:	60da      	str	r2, [r3, #12]
      break;
 80020be:	e000      	b.n	80020c2 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80020c0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2201      	movs	r2, #1
 80020c8:	6839      	ldr	r1, [r7, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 f802 	bl	80030d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a15      	ldr	r2, [pc, #84]	; (800212c <HAL_TIM_OC_Start_IT+0x100>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d004      	beq.n	80020e4 <HAL_TIM_OC_Start_IT+0xb8>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a14      	ldr	r2, [pc, #80]	; (8002130 <HAL_TIM_OC_Start_IT+0x104>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_TIM_OC_Start_IT+0xbc>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_TIM_OC_Start_IT+0xbe>
 80020e8:	2300      	movs	r3, #0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b06      	cmp	r3, #6
 800210e:	d007      	beq.n	8002120 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40010400 	.word	0x40010400

08002134 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e01d      	b.n	8002182 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f815 	bl	800218a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f000 fb9a 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	d841      	bhi.n	8002234 <HAL_TIM_IC_Start_IT+0x94>
 80021b0:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <HAL_TIM_IC_Start_IT+0x18>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021ed 	.word	0x080021ed
 80021bc:	08002235 	.word	0x08002235
 80021c0:	08002235 	.word	0x08002235
 80021c4:	08002235 	.word	0x08002235
 80021c8:	080021ff 	.word	0x080021ff
 80021cc:	08002235 	.word	0x08002235
 80021d0:	08002235 	.word	0x08002235
 80021d4:	08002235 	.word	0x08002235
 80021d8:	08002211 	.word	0x08002211
 80021dc:	08002235 	.word	0x08002235
 80021e0:	08002235 	.word	0x08002235
 80021e4:	08002235 	.word	0x08002235
 80021e8:	08002223 	.word	0x08002223
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0202 	orr.w	r2, r2, #2
 80021fa:	60da      	str	r2, [r3, #12]
      break;
 80021fc:	e01b      	b.n	8002236 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0204 	orr.w	r2, r2, #4
 800220c:	60da      	str	r2, [r3, #12]
      break;
 800220e:	e012      	b.n	8002236 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0208 	orr.w	r2, r2, #8
 800221e:	60da      	str	r2, [r3, #12]
      break;
 8002220:	e009      	b.n	8002236 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0210 	orr.w	r2, r2, #16
 8002230:	60da      	str	r2, [r3, #12]
      break;
 8002232:	e000      	b.n	8002236 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002234:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2201      	movs	r2, #1
 800223c:	6839      	ldr	r1, [r7, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 ff48 	bl	80030d4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b06      	cmp	r3, #6
 8002254:	d007      	beq.n	8002266 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b02      	cmp	r3, #2
 8002284:	d122      	bne.n	80022cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b02      	cmp	r3, #2
 8002292:	d11b      	bne.n	80022cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0202 	mvn.w	r2, #2
 800229c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe fb7a 	bl	80009ac <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fc2c 	bl	8000b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 fadf 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d122      	bne.n	8002320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d11b      	bne.n	8002320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0204 	mvn.w	r2, #4
 80022f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7fe fb50 	bl	80009ac <HAL_TIM_IC_CaptureCallback>
 800230c:	e005      	b.n	800231a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7fe fc02 	bl	8000b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fab5 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b08      	cmp	r3, #8
 800232c:	d122      	bne.n	8002374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b08      	cmp	r3, #8
 800233a:	d11b      	bne.n	8002374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0208 	mvn.w	r2, #8
 8002344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2204      	movs	r2, #4
 800234a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fb26 	bl	80009ac <HAL_TIM_IC_CaptureCallback>
 8002360:	e005      	b.n	800236e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe fbd8 	bl	8000b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fa8b 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b10      	cmp	r3, #16
 8002380:	d122      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b10      	cmp	r3, #16
 800238e:	d11b      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0210 	mvn.w	r2, #16
 8002398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2208      	movs	r2, #8
 800239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7fe fafc 	bl	80009ac <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fbae 	bl	8000b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 fa61 	bl	8002884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d107      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0201 	mvn.w	r2, #1
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa3e 	bl	8002870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	2b80      	cmp	r3, #128	; 0x80
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240c:	2b80      	cmp	r3, #128	; 0x80
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 ff06 	bl	800322c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	d10e      	bne.n	800244c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002438:	2b40      	cmp	r3, #64	; 0x40
 800243a:	d107      	bne.n	800244c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fa26 	bl	8002898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b20      	cmp	r3, #32
 8002458:	d10e      	bne.n	8002478 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b20      	cmp	r3, #32
 8002466:	d107      	bne.n	8002478 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0220 	mvn.w	r2, #32
 8002470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fed0 	bl	8003218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_TIM_OC_ConfigChannel+0x1a>
 8002496:	2302      	movs	r3, #2
 8002498:	e04e      	b.n	8002538 <HAL_TIM_OC_ConfigChannel+0xb8>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	d839      	bhi.n	8002524 <HAL_TIM_OC_ConfigChannel+0xa4>
 80024b0:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024ed 	.word	0x080024ed
 80024bc:	08002525 	.word	0x08002525
 80024c0:	08002525 	.word	0x08002525
 80024c4:	08002525 	.word	0x08002525
 80024c8:	080024fb 	.word	0x080024fb
 80024cc:	08002525 	.word	0x08002525
 80024d0:	08002525 	.word	0x08002525
 80024d4:	08002525 	.word	0x08002525
 80024d8:	08002509 	.word	0x08002509
 80024dc:	08002525 	.word	0x08002525
 80024e0:	08002525 	.word	0x08002525
 80024e4:	08002525 	.word	0x08002525
 80024e8:	08002517 	.word	0x08002517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fa7a 	bl	80029ec <TIM_OC1_SetConfig>
      break;
 80024f8:	e015      	b.n	8002526 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fae3 	bl	8002acc <TIM_OC2_SetConfig>
      break;
 8002506:	e00e      	b.n	8002526 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fb52 	bl	8002bb8 <TIM_OC3_SetConfig>
      break;
 8002514:	e007      	b.n	8002526 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fbbf 	bl	8002ca0 <TIM_OC4_SetConfig>
      break;
 8002522:	e000      	b.n	8002526 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8002524:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_TIM_IC_ConfigChannel+0x1a>
 8002556:	2302      	movs	r3, #2
 8002558:	e08a      	b.n	8002670 <HAL_TIM_IC_ConfigChannel+0x130>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2202      	movs	r2, #2
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d11b      	bne.n	80025a8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	6819      	ldr	r1, [r3, #0]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f000 fbe4 	bl	8002d4c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 020c 	bic.w	r2, r2, #12
 8002592:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6999      	ldr	r1, [r3, #24]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	619a      	str	r2, [r3, #24]
 80025a6:	e05a      	b.n	800265e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d11c      	bne.n	80025e8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f000 fc68 	bl	8002e92 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6999      	ldr	r1, [r3, #24]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	021a      	lsls	r2, r3, #8
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	619a      	str	r2, [r3, #24]
 80025e6:	e03a      	b.n	800265e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d11b      	bne.n	8002626 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f000 fcb5 	bl	8002f6c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 020c 	bic.w	r2, r2, #12
 8002610:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69d9      	ldr	r1, [r3, #28]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	61da      	str	r2, [r3, #28]
 8002624:	e01b      	b.n	800265e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	6819      	ldr	r1, [r3, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f000 fcd5 	bl	8002fe4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002648:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69d9      	ldr	r1, [r3, #28]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	021a      	lsls	r2, r3, #8
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_TIM_ConfigClockSource+0x18>
 800268c:	2302      	movs	r3, #2
 800268e:	e0a6      	b.n	80027de <HAL_TIM_ConfigClockSource+0x166>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d067      	beq.n	8002798 <HAL_TIM_ConfigClockSource+0x120>
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d80b      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x6c>
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d073      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x140>
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d802      	bhi.n	80026da <HAL_TIM_ConfigClockSource+0x62>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d06f      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80026d8:	e078      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d06c      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x140>
 80026de:	2b30      	cmp	r3, #48	; 0x30
 80026e0:	d06a      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80026e2:	e073      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026e4:	2b70      	cmp	r3, #112	; 0x70
 80026e6:	d00d      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x8c>
 80026e8:	2b70      	cmp	r3, #112	; 0x70
 80026ea:	d804      	bhi.n	80026f6 <HAL_TIM_ConfigClockSource+0x7e>
 80026ec:	2b50      	cmp	r3, #80	; 0x50
 80026ee:	d033      	beq.n	8002758 <HAL_TIM_ConfigClockSource+0xe0>
 80026f0:	2b60      	cmp	r3, #96	; 0x60
 80026f2:	d041      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80026f4:	e06a      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fa:	d066      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x152>
 80026fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002700:	d017      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002702:	e063      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6899      	ldr	r1, [r3, #8]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f000 fcbe 	bl	8003094 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002726:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	609a      	str	r2, [r3, #8]
      break;
 8002730:	e04c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6899      	ldr	r1, [r3, #8]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f000 fca7 	bl	8003094 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002754:	609a      	str	r2, [r3, #8]
      break;
 8002756:	e039      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	461a      	mov	r2, r3
 8002766:	f000 fb65 	bl	8002e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2150      	movs	r1, #80	; 0x50
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fc74 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002776:	e029      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	461a      	mov	r2, r3
 8002786:	f000 fbc1 	bl	8002f0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2160      	movs	r1, #96	; 0x60
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fc64 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002796:	e019      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f000 fb45 	bl	8002e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2140      	movs	r1, #64	; 0x40
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fc54 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 80027b6:	e009      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f000 fc4b 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 80027c8:	e000      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80027ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	d831      	bhi.n	8002860 <HAL_TIM_ReadCapturedValue+0x78>
 80027fc:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <HAL_TIM_ReadCapturedValue+0x1c>)
 80027fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002802:	bf00      	nop
 8002804:	08002839 	.word	0x08002839
 8002808:	08002861 	.word	0x08002861
 800280c:	08002861 	.word	0x08002861
 8002810:	08002861 	.word	0x08002861
 8002814:	08002843 	.word	0x08002843
 8002818:	08002861 	.word	0x08002861
 800281c:	08002861 	.word	0x08002861
 8002820:	08002861 	.word	0x08002861
 8002824:	0800284d 	.word	0x0800284d
 8002828:	08002861 	.word	0x08002861
 800282c:	08002861 	.word	0x08002861
 8002830:	08002861 	.word	0x08002861
 8002834:	08002857 	.word	0x08002857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	60fb      	str	r3, [r7, #12]

      break;
 8002840:	e00f      	b.n	8002862 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	60fb      	str	r3, [r7, #12]

      break;
 800284a:	e00a      	b.n	8002862 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	60fb      	str	r3, [r7, #12]

      break;
 8002854:	e005      	b.n	8002862 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	60fb      	str	r3, [r7, #12]

      break;
 800285e:	e000      	b.n	8002862 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002860:	bf00      	nop
  }

  return tmpreg;
 8002862:	68fb      	ldr	r3, [r7, #12]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a40      	ldr	r2, [pc, #256]	; (80029c0 <TIM_Base_SetConfig+0x114>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d013      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d00f      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3d      	ldr	r2, [pc, #244]	; (80029c4 <TIM_Base_SetConfig+0x118>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00b      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3c      	ldr	r2, [pc, #240]	; (80029c8 <TIM_Base_SetConfig+0x11c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <TIM_Base_SetConfig+0x120>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d003      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3a      	ldr	r2, [pc, #232]	; (80029d0 <TIM_Base_SetConfig+0x124>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d108      	bne.n	80028fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a2f      	ldr	r2, [pc, #188]	; (80029c0 <TIM_Base_SetConfig+0x114>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02b      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290c:	d027      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2c      	ldr	r2, [pc, #176]	; (80029c4 <TIM_Base_SetConfig+0x118>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d023      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2b      	ldr	r2, [pc, #172]	; (80029c8 <TIM_Base_SetConfig+0x11c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01f      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <TIM_Base_SetConfig+0x120>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01b      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a29      	ldr	r2, [pc, #164]	; (80029d0 <TIM_Base_SetConfig+0x124>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d017      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a28      	ldr	r2, [pc, #160]	; (80029d4 <TIM_Base_SetConfig+0x128>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a27      	ldr	r2, [pc, #156]	; (80029d8 <TIM_Base_SetConfig+0x12c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00f      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a26      	ldr	r2, [pc, #152]	; (80029dc <TIM_Base_SetConfig+0x130>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00b      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a25      	ldr	r2, [pc, #148]	; (80029e0 <TIM_Base_SetConfig+0x134>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <TIM_Base_SetConfig+0x138>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <TIM_Base_SetConfig+0x13c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d108      	bne.n	8002970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <TIM_Base_SetConfig+0x114>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <TIM_Base_SetConfig+0xf8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <TIM_Base_SetConfig+0x124>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d103      	bne.n	80029ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	615a      	str	r2, [r3, #20]
}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	40000c00 	.word	0x40000c00
 80029d0:	40010400 	.word	0x40010400
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800
 80029e0:	40001800 	.word	0x40001800
 80029e4:	40001c00 	.word	0x40001c00
 80029e8:	40002000 	.word	0x40002000

080029ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f023 0201 	bic.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0303 	bic.w	r3, r3, #3
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 0302 	bic.w	r3, r3, #2
 8002a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a20      	ldr	r2, [pc, #128]	; (8002ac4 <TIM_OC1_SetConfig+0xd8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d003      	beq.n	8002a50 <TIM_OC1_SetConfig+0x64>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <TIM_OC1_SetConfig+0xdc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10c      	bne.n	8002a6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f023 0308 	bic.w	r3, r3, #8
 8002a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <TIM_OC1_SetConfig+0xd8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d003      	beq.n	8002a7a <TIM_OC1_SetConfig+0x8e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <TIM_OC1_SetConfig+0xdc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d111      	bne.n	8002a9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	621a      	str	r2, [r3, #32]
}
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40010400 	.word	0x40010400

08002acc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f023 0210 	bic.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0320 	bic.w	r3, r3, #32
 8002b16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <TIM_OC2_SetConfig+0xe4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d003      	beq.n	8002b34 <TIM_OC2_SetConfig+0x68>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <TIM_OC2_SetConfig+0xe8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10d      	bne.n	8002b50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <TIM_OC2_SetConfig+0xe4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d003      	beq.n	8002b60 <TIM_OC2_SetConfig+0x94>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <TIM_OC2_SetConfig+0xe8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d113      	bne.n	8002b88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	621a      	str	r2, [r3, #32]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a21      	ldr	r2, [pc, #132]	; (8002c98 <TIM_OC3_SetConfig+0xe0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d003      	beq.n	8002c1e <TIM_OC3_SetConfig+0x66>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a20      	ldr	r2, [pc, #128]	; (8002c9c <TIM_OC3_SetConfig+0xe4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10d      	bne.n	8002c3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <TIM_OC3_SetConfig+0xe0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_OC3_SetConfig+0x92>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <TIM_OC3_SetConfig+0xe4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d113      	bne.n	8002c72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	621a      	str	r2, [r3, #32]
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	40010400 	.word	0x40010400

08002ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	031b      	lsls	r3, r3, #12
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <TIM_OC4_SetConfig+0xa4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d003      	beq.n	8002d08 <TIM_OC4_SetConfig+0x68>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a11      	ldr	r2, [pc, #68]	; (8002d48 <TIM_OC4_SetConfig+0xa8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d109      	bne.n	8002d1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	019b      	lsls	r3, r3, #6
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	621a      	str	r2, [r3, #32]
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40010400 	.word	0x40010400

08002d4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4a28      	ldr	r2, [pc, #160]	; (8002e18 <TIM_TI1_SetConfig+0xcc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d01b      	beq.n	8002db2 <TIM_TI1_SetConfig+0x66>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d017      	beq.n	8002db2 <TIM_TI1_SetConfig+0x66>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4a25      	ldr	r2, [pc, #148]	; (8002e1c <TIM_TI1_SetConfig+0xd0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <TIM_TI1_SetConfig+0x66>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <TIM_TI1_SetConfig+0xd4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00f      	beq.n	8002db2 <TIM_TI1_SetConfig+0x66>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4a23      	ldr	r2, [pc, #140]	; (8002e24 <TIM_TI1_SetConfig+0xd8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <TIM_TI1_SetConfig+0x66>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4a22      	ldr	r2, [pc, #136]	; (8002e28 <TIM_TI1_SetConfig+0xdc>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <TIM_TI1_SetConfig+0x66>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a21      	ldr	r2, [pc, #132]	; (8002e2c <TIM_TI1_SetConfig+0xe0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_TI1_SetConfig+0x66>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <TIM_TI1_SetConfig+0xe4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <TIM_TI1_SetConfig+0x6a>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <TIM_TI1_SetConfig+0x6c>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	e003      	b.n	8002dd6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ddc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f023 030a 	bic.w	r3, r3, #10
 8002df0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f003 030a 	and.w	r3, r3, #10
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	621a      	str	r2, [r3, #32]
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	40000400 	.word	0x40000400
 8002e20:	40000800 	.word	0x40000800
 8002e24:	40000c00 	.word	0x40000c00
 8002e28:	40010400 	.word	0x40010400
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	40001800 	.word	0x40001800

08002e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f023 0201 	bic.w	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f023 030a 	bic.w	r3, r3, #10
 8002e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b087      	sub	sp, #28
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f023 0210 	bic.w	r2, r3, #16
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	031b      	lsls	r3, r3, #12
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	621a      	str	r2, [r3, #32]
}
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f023 0210 	bic.w	r2, r3, #16
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	031b      	lsls	r3, r3, #12
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	621a      	str	r2, [r3, #32]
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f023 0303 	bic.w	r3, r3, #3
 8002f98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	621a      	str	r2, [r3, #32]
}
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003010:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003022:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	031b      	lsls	r3, r3, #12
 8003028:	b29b      	uxth	r3, r3
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003036:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	031b      	lsls	r3, r3, #12
 800303c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	621a      	str	r2, [r3, #32]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800305e:	b480      	push	{r7}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	f043 0307 	orr.w	r3, r3, #7
 8003080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	021a      	lsls	r2, r3, #8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2201      	movs	r2, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	401a      	ands	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003134:	2302      	movs	r3, #2
 8003136:	e05a      	b.n	80031ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a21      	ldr	r2, [pc, #132]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d022      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d01d      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d018      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00e      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a18      	ldr	r2, [pc, #96]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d009      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a17      	ldr	r2, [pc, #92]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a15      	ldr	r2, [pc, #84]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10c      	bne.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40010400 	.word	0x40010400
 8003210:	40014000 	.word	0x40014000
 8003214:	40001800 	.word	0x40001800

08003218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e03f      	b.n	80032d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd fd58 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	; 0x24
 8003270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f829 	bl	80032dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800331e:	f023 030c 	bic.w	r3, r3, #12
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	68f9      	ldr	r1, [r7, #12]
 8003328:	430b      	orrs	r3, r1
 800332a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334a:	f040 818b 	bne.w	8003664 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4ac1      	ldr	r2, [pc, #772]	; (8003658 <UART_SetConfig+0x37c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d005      	beq.n	8003364 <UART_SetConfig+0x88>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4abf      	ldr	r2, [pc, #764]	; (800365c <UART_SetConfig+0x380>)
 800335e:	4293      	cmp	r3, r2
 8003360:	f040 80bd 	bne.w	80034de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003364:	f7fe f9f4 	bl	8001750 <HAL_RCC_GetPCLK2Freq>
 8003368:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	461d      	mov	r5, r3
 800336e:	f04f 0600 	mov.w	r6, #0
 8003372:	46a8      	mov	r8, r5
 8003374:	46b1      	mov	r9, r6
 8003376:	eb18 0308 	adds.w	r3, r8, r8
 800337a:	eb49 0409 	adc.w	r4, r9, r9
 800337e:	4698      	mov	r8, r3
 8003380:	46a1      	mov	r9, r4
 8003382:	eb18 0805 	adds.w	r8, r8, r5
 8003386:	eb49 0906 	adc.w	r9, r9, r6
 800338a:	f04f 0100 	mov.w	r1, #0
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003396:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800339a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800339e:	4688      	mov	r8, r1
 80033a0:	4691      	mov	r9, r2
 80033a2:	eb18 0005 	adds.w	r0, r8, r5
 80033a6:	eb49 0106 	adc.w	r1, r9, r6
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	461d      	mov	r5, r3
 80033b0:	f04f 0600 	mov.w	r6, #0
 80033b4:	196b      	adds	r3, r5, r5
 80033b6:	eb46 0406 	adc.w	r4, r6, r6
 80033ba:	461a      	mov	r2, r3
 80033bc:	4623      	mov	r3, r4
 80033be:	f7fc ff21 	bl	8000204 <__aeabi_uldivmod>
 80033c2:	4603      	mov	r3, r0
 80033c4:	460c      	mov	r4, r1
 80033c6:	461a      	mov	r2, r3
 80033c8:	4ba5      	ldr	r3, [pc, #660]	; (8003660 <UART_SetConfig+0x384>)
 80033ca:	fba3 2302 	umull	r2, r3, r3, r2
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	461d      	mov	r5, r3
 80033d8:	f04f 0600 	mov.w	r6, #0
 80033dc:	46a9      	mov	r9, r5
 80033de:	46b2      	mov	sl, r6
 80033e0:	eb19 0309 	adds.w	r3, r9, r9
 80033e4:	eb4a 040a 	adc.w	r4, sl, sl
 80033e8:	4699      	mov	r9, r3
 80033ea:	46a2      	mov	sl, r4
 80033ec:	eb19 0905 	adds.w	r9, r9, r5
 80033f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80033f4:	f04f 0100 	mov.w	r1, #0
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003400:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003404:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003408:	4689      	mov	r9, r1
 800340a:	4692      	mov	sl, r2
 800340c:	eb19 0005 	adds.w	r0, r9, r5
 8003410:	eb4a 0106 	adc.w	r1, sl, r6
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	461d      	mov	r5, r3
 800341a:	f04f 0600 	mov.w	r6, #0
 800341e:	196b      	adds	r3, r5, r5
 8003420:	eb46 0406 	adc.w	r4, r6, r6
 8003424:	461a      	mov	r2, r3
 8003426:	4623      	mov	r3, r4
 8003428:	f7fc feec 	bl	8000204 <__aeabi_uldivmod>
 800342c:	4603      	mov	r3, r0
 800342e:	460c      	mov	r4, r1
 8003430:	461a      	mov	r2, r3
 8003432:	4b8b      	ldr	r3, [pc, #556]	; (8003660 <UART_SetConfig+0x384>)
 8003434:	fba3 1302 	umull	r1, r3, r3, r2
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	2164      	movs	r1, #100	; 0x64
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	3332      	adds	r3, #50	; 0x32
 8003446:	4a86      	ldr	r2, [pc, #536]	; (8003660 <UART_SetConfig+0x384>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003454:	4498      	add	r8, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	461d      	mov	r5, r3
 800345a:	f04f 0600 	mov.w	r6, #0
 800345e:	46a9      	mov	r9, r5
 8003460:	46b2      	mov	sl, r6
 8003462:	eb19 0309 	adds.w	r3, r9, r9
 8003466:	eb4a 040a 	adc.w	r4, sl, sl
 800346a:	4699      	mov	r9, r3
 800346c:	46a2      	mov	sl, r4
 800346e:	eb19 0905 	adds.w	r9, r9, r5
 8003472:	eb4a 0a06 	adc.w	sl, sl, r6
 8003476:	f04f 0100 	mov.w	r1, #0
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003482:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003486:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800348a:	4689      	mov	r9, r1
 800348c:	4692      	mov	sl, r2
 800348e:	eb19 0005 	adds.w	r0, r9, r5
 8003492:	eb4a 0106 	adc.w	r1, sl, r6
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	461d      	mov	r5, r3
 800349c:	f04f 0600 	mov.w	r6, #0
 80034a0:	196b      	adds	r3, r5, r5
 80034a2:	eb46 0406 	adc.w	r4, r6, r6
 80034a6:	461a      	mov	r2, r3
 80034a8:	4623      	mov	r3, r4
 80034aa:	f7fc feab 	bl	8000204 <__aeabi_uldivmod>
 80034ae:	4603      	mov	r3, r0
 80034b0:	460c      	mov	r4, r1
 80034b2:	461a      	mov	r2, r3
 80034b4:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <UART_SetConfig+0x384>)
 80034b6:	fba3 1302 	umull	r1, r3, r3, r2
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	2164      	movs	r1, #100	; 0x64
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	3332      	adds	r3, #50	; 0x32
 80034c8:	4a65      	ldr	r2, [pc, #404]	; (8003660 <UART_SetConfig+0x384>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	f003 0207 	and.w	r2, r3, #7
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4442      	add	r2, r8
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	e26f      	b.n	80039be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034de:	f7fe f923 	bl	8001728 <HAL_RCC_GetPCLK1Freq>
 80034e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	461d      	mov	r5, r3
 80034e8:	f04f 0600 	mov.w	r6, #0
 80034ec:	46a8      	mov	r8, r5
 80034ee:	46b1      	mov	r9, r6
 80034f0:	eb18 0308 	adds.w	r3, r8, r8
 80034f4:	eb49 0409 	adc.w	r4, r9, r9
 80034f8:	4698      	mov	r8, r3
 80034fa:	46a1      	mov	r9, r4
 80034fc:	eb18 0805 	adds.w	r8, r8, r5
 8003500:	eb49 0906 	adc.w	r9, r9, r6
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003510:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003514:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003518:	4688      	mov	r8, r1
 800351a:	4691      	mov	r9, r2
 800351c:	eb18 0005 	adds.w	r0, r8, r5
 8003520:	eb49 0106 	adc.w	r1, r9, r6
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	461d      	mov	r5, r3
 800352a:	f04f 0600 	mov.w	r6, #0
 800352e:	196b      	adds	r3, r5, r5
 8003530:	eb46 0406 	adc.w	r4, r6, r6
 8003534:	461a      	mov	r2, r3
 8003536:	4623      	mov	r3, r4
 8003538:	f7fc fe64 	bl	8000204 <__aeabi_uldivmod>
 800353c:	4603      	mov	r3, r0
 800353e:	460c      	mov	r4, r1
 8003540:	461a      	mov	r2, r3
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <UART_SetConfig+0x384>)
 8003544:	fba3 2302 	umull	r2, r3, r3, r2
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	461d      	mov	r5, r3
 8003552:	f04f 0600 	mov.w	r6, #0
 8003556:	46a9      	mov	r9, r5
 8003558:	46b2      	mov	sl, r6
 800355a:	eb19 0309 	adds.w	r3, r9, r9
 800355e:	eb4a 040a 	adc.w	r4, sl, sl
 8003562:	4699      	mov	r9, r3
 8003564:	46a2      	mov	sl, r4
 8003566:	eb19 0905 	adds.w	r9, r9, r5
 800356a:	eb4a 0a06 	adc.w	sl, sl, r6
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800357a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800357e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003582:	4689      	mov	r9, r1
 8003584:	4692      	mov	sl, r2
 8003586:	eb19 0005 	adds.w	r0, r9, r5
 800358a:	eb4a 0106 	adc.w	r1, sl, r6
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	461d      	mov	r5, r3
 8003594:	f04f 0600 	mov.w	r6, #0
 8003598:	196b      	adds	r3, r5, r5
 800359a:	eb46 0406 	adc.w	r4, r6, r6
 800359e:	461a      	mov	r2, r3
 80035a0:	4623      	mov	r3, r4
 80035a2:	f7fc fe2f 	bl	8000204 <__aeabi_uldivmod>
 80035a6:	4603      	mov	r3, r0
 80035a8:	460c      	mov	r4, r1
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <UART_SetConfig+0x384>)
 80035ae:	fba3 1302 	umull	r1, r3, r3, r2
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2164      	movs	r1, #100	; 0x64
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	3332      	adds	r3, #50	; 0x32
 80035c0:	4a27      	ldr	r2, [pc, #156]	; (8003660 <UART_SetConfig+0x384>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035ce:	4498      	add	r8, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	461d      	mov	r5, r3
 80035d4:	f04f 0600 	mov.w	r6, #0
 80035d8:	46a9      	mov	r9, r5
 80035da:	46b2      	mov	sl, r6
 80035dc:	eb19 0309 	adds.w	r3, r9, r9
 80035e0:	eb4a 040a 	adc.w	r4, sl, sl
 80035e4:	4699      	mov	r9, r3
 80035e6:	46a2      	mov	sl, r4
 80035e8:	eb19 0905 	adds.w	r9, r9, r5
 80035ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80035f0:	f04f 0100 	mov.w	r1, #0
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003600:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003604:	4689      	mov	r9, r1
 8003606:	4692      	mov	sl, r2
 8003608:	eb19 0005 	adds.w	r0, r9, r5
 800360c:	eb4a 0106 	adc.w	r1, sl, r6
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	461d      	mov	r5, r3
 8003616:	f04f 0600 	mov.w	r6, #0
 800361a:	196b      	adds	r3, r5, r5
 800361c:	eb46 0406 	adc.w	r4, r6, r6
 8003620:	461a      	mov	r2, r3
 8003622:	4623      	mov	r3, r4
 8003624:	f7fc fdee 	bl	8000204 <__aeabi_uldivmod>
 8003628:	4603      	mov	r3, r0
 800362a:	460c      	mov	r4, r1
 800362c:	461a      	mov	r2, r3
 800362e:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <UART_SetConfig+0x384>)
 8003630:	fba3 1302 	umull	r1, r3, r3, r2
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	2164      	movs	r1, #100	; 0x64
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	3332      	adds	r3, #50	; 0x32
 8003642:	4a07      	ldr	r2, [pc, #28]	; (8003660 <UART_SetConfig+0x384>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	f003 0207 	and.w	r2, r3, #7
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4442      	add	r2, r8
 8003654:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003656:	e1b2      	b.n	80039be <UART_SetConfig+0x6e2>
 8003658:	40011000 	.word	0x40011000
 800365c:	40011400 	.word	0x40011400
 8003660:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4ad7      	ldr	r2, [pc, #860]	; (80039c8 <UART_SetConfig+0x6ec>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d005      	beq.n	800367a <UART_SetConfig+0x39e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4ad6      	ldr	r2, [pc, #856]	; (80039cc <UART_SetConfig+0x6f0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	f040 80d1 	bne.w	800381c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800367a:	f7fe f869 	bl	8001750 <HAL_RCC_GetPCLK2Freq>
 800367e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	469a      	mov	sl, r3
 8003684:	f04f 0b00 	mov.w	fp, #0
 8003688:	46d0      	mov	r8, sl
 800368a:	46d9      	mov	r9, fp
 800368c:	eb18 0308 	adds.w	r3, r8, r8
 8003690:	eb49 0409 	adc.w	r4, r9, r9
 8003694:	4698      	mov	r8, r3
 8003696:	46a1      	mov	r9, r4
 8003698:	eb18 080a 	adds.w	r8, r8, sl
 800369c:	eb49 090b 	adc.w	r9, r9, fp
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036b4:	4688      	mov	r8, r1
 80036b6:	4691      	mov	r9, r2
 80036b8:	eb1a 0508 	adds.w	r5, sl, r8
 80036bc:	eb4b 0609 	adc.w	r6, fp, r9
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4619      	mov	r1, r3
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	f04f 0400 	mov.w	r4, #0
 80036d2:	0094      	lsls	r4, r2, #2
 80036d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036d8:	008b      	lsls	r3, r1, #2
 80036da:	461a      	mov	r2, r3
 80036dc:	4623      	mov	r3, r4
 80036de:	4628      	mov	r0, r5
 80036e0:	4631      	mov	r1, r6
 80036e2:	f7fc fd8f 	bl	8000204 <__aeabi_uldivmod>
 80036e6:	4603      	mov	r3, r0
 80036e8:	460c      	mov	r4, r1
 80036ea:	461a      	mov	r2, r3
 80036ec:	4bb8      	ldr	r3, [pc, #736]	; (80039d0 <UART_SetConfig+0x6f4>)
 80036ee:	fba3 2302 	umull	r2, r3, r3, r2
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	469b      	mov	fp, r3
 80036fc:	f04f 0c00 	mov.w	ip, #0
 8003700:	46d9      	mov	r9, fp
 8003702:	46e2      	mov	sl, ip
 8003704:	eb19 0309 	adds.w	r3, r9, r9
 8003708:	eb4a 040a 	adc.w	r4, sl, sl
 800370c:	4699      	mov	r9, r3
 800370e:	46a2      	mov	sl, r4
 8003710:	eb19 090b 	adds.w	r9, r9, fp
 8003714:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003718:	f04f 0100 	mov.w	r1, #0
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003724:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003728:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800372c:	4689      	mov	r9, r1
 800372e:	4692      	mov	sl, r2
 8003730:	eb1b 0509 	adds.w	r5, fp, r9
 8003734:	eb4c 060a 	adc.w	r6, ip, sl
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4619      	mov	r1, r3
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	f04f 0400 	mov.w	r4, #0
 800374a:	0094      	lsls	r4, r2, #2
 800374c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003750:	008b      	lsls	r3, r1, #2
 8003752:	461a      	mov	r2, r3
 8003754:	4623      	mov	r3, r4
 8003756:	4628      	mov	r0, r5
 8003758:	4631      	mov	r1, r6
 800375a:	f7fc fd53 	bl	8000204 <__aeabi_uldivmod>
 800375e:	4603      	mov	r3, r0
 8003760:	460c      	mov	r4, r1
 8003762:	461a      	mov	r2, r3
 8003764:	4b9a      	ldr	r3, [pc, #616]	; (80039d0 <UART_SetConfig+0x6f4>)
 8003766:	fba3 1302 	umull	r1, r3, r3, r2
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2164      	movs	r1, #100	; 0x64
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	3332      	adds	r3, #50	; 0x32
 8003778:	4a95      	ldr	r2, [pc, #596]	; (80039d0 <UART_SetConfig+0x6f4>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003784:	4498      	add	r8, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	469b      	mov	fp, r3
 800378a:	f04f 0c00 	mov.w	ip, #0
 800378e:	46d9      	mov	r9, fp
 8003790:	46e2      	mov	sl, ip
 8003792:	eb19 0309 	adds.w	r3, r9, r9
 8003796:	eb4a 040a 	adc.w	r4, sl, sl
 800379a:	4699      	mov	r9, r3
 800379c:	46a2      	mov	sl, r4
 800379e:	eb19 090b 	adds.w	r9, r9, fp
 80037a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037a6:	f04f 0100 	mov.w	r1, #0
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037ba:	4689      	mov	r9, r1
 80037bc:	4692      	mov	sl, r2
 80037be:	eb1b 0509 	adds.w	r5, fp, r9
 80037c2:	eb4c 060a 	adc.w	r6, ip, sl
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4619      	mov	r1, r3
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	f04f 0400 	mov.w	r4, #0
 80037d8:	0094      	lsls	r4, r2, #2
 80037da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037de:	008b      	lsls	r3, r1, #2
 80037e0:	461a      	mov	r2, r3
 80037e2:	4623      	mov	r3, r4
 80037e4:	4628      	mov	r0, r5
 80037e6:	4631      	mov	r1, r6
 80037e8:	f7fc fd0c 	bl	8000204 <__aeabi_uldivmod>
 80037ec:	4603      	mov	r3, r0
 80037ee:	460c      	mov	r4, r1
 80037f0:	461a      	mov	r2, r3
 80037f2:	4b77      	ldr	r3, [pc, #476]	; (80039d0 <UART_SetConfig+0x6f4>)
 80037f4:	fba3 1302 	umull	r1, r3, r3, r2
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	2164      	movs	r1, #100	; 0x64
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	3332      	adds	r3, #50	; 0x32
 8003806:	4a72      	ldr	r2, [pc, #456]	; (80039d0 <UART_SetConfig+0x6f4>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	f003 020f 	and.w	r2, r3, #15
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4442      	add	r2, r8
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	e0d0      	b.n	80039be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800381c:	f7fd ff84 	bl	8001728 <HAL_RCC_GetPCLK1Freq>
 8003820:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	469a      	mov	sl, r3
 8003826:	f04f 0b00 	mov.w	fp, #0
 800382a:	46d0      	mov	r8, sl
 800382c:	46d9      	mov	r9, fp
 800382e:	eb18 0308 	adds.w	r3, r8, r8
 8003832:	eb49 0409 	adc.w	r4, r9, r9
 8003836:	4698      	mov	r8, r3
 8003838:	46a1      	mov	r9, r4
 800383a:	eb18 080a 	adds.w	r8, r8, sl
 800383e:	eb49 090b 	adc.w	r9, r9, fp
 8003842:	f04f 0100 	mov.w	r1, #0
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800384e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003852:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003856:	4688      	mov	r8, r1
 8003858:	4691      	mov	r9, r2
 800385a:	eb1a 0508 	adds.w	r5, sl, r8
 800385e:	eb4b 0609 	adc.w	r6, fp, r9
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4619      	mov	r1, r3
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	f04f 0400 	mov.w	r4, #0
 8003874:	0094      	lsls	r4, r2, #2
 8003876:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800387a:	008b      	lsls	r3, r1, #2
 800387c:	461a      	mov	r2, r3
 800387e:	4623      	mov	r3, r4
 8003880:	4628      	mov	r0, r5
 8003882:	4631      	mov	r1, r6
 8003884:	f7fc fcbe 	bl	8000204 <__aeabi_uldivmod>
 8003888:	4603      	mov	r3, r0
 800388a:	460c      	mov	r4, r1
 800388c:	461a      	mov	r2, r3
 800388e:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <UART_SetConfig+0x6f4>)
 8003890:	fba3 2302 	umull	r2, r3, r3, r2
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	469b      	mov	fp, r3
 800389e:	f04f 0c00 	mov.w	ip, #0
 80038a2:	46d9      	mov	r9, fp
 80038a4:	46e2      	mov	sl, ip
 80038a6:	eb19 0309 	adds.w	r3, r9, r9
 80038aa:	eb4a 040a 	adc.w	r4, sl, sl
 80038ae:	4699      	mov	r9, r3
 80038b0:	46a2      	mov	sl, r4
 80038b2:	eb19 090b 	adds.w	r9, r9, fp
 80038b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ce:	4689      	mov	r9, r1
 80038d0:	4692      	mov	sl, r2
 80038d2:	eb1b 0509 	adds.w	r5, fp, r9
 80038d6:	eb4c 060a 	adc.w	r6, ip, sl
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4619      	mov	r1, r3
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	f04f 0400 	mov.w	r4, #0
 80038ec:	0094      	lsls	r4, r2, #2
 80038ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038f2:	008b      	lsls	r3, r1, #2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4623      	mov	r3, r4
 80038f8:	4628      	mov	r0, r5
 80038fa:	4631      	mov	r1, r6
 80038fc:	f7fc fc82 	bl	8000204 <__aeabi_uldivmod>
 8003900:	4603      	mov	r3, r0
 8003902:	460c      	mov	r4, r1
 8003904:	461a      	mov	r2, r3
 8003906:	4b32      	ldr	r3, [pc, #200]	; (80039d0 <UART_SetConfig+0x6f4>)
 8003908:	fba3 1302 	umull	r1, r3, r3, r2
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	2164      	movs	r1, #100	; 0x64
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	3332      	adds	r3, #50	; 0x32
 800391a:	4a2d      	ldr	r2, [pc, #180]	; (80039d0 <UART_SetConfig+0x6f4>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	095b      	lsrs	r3, r3, #5
 8003922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003926:	4498      	add	r8, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	469b      	mov	fp, r3
 800392c:	f04f 0c00 	mov.w	ip, #0
 8003930:	46d9      	mov	r9, fp
 8003932:	46e2      	mov	sl, ip
 8003934:	eb19 0309 	adds.w	r3, r9, r9
 8003938:	eb4a 040a 	adc.w	r4, sl, sl
 800393c:	4699      	mov	r9, r3
 800393e:	46a2      	mov	sl, r4
 8003940:	eb19 090b 	adds.w	r9, r9, fp
 8003944:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003948:	f04f 0100 	mov.w	r1, #0
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003954:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003958:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800395c:	4689      	mov	r9, r1
 800395e:	4692      	mov	sl, r2
 8003960:	eb1b 0509 	adds.w	r5, fp, r9
 8003964:	eb4c 060a 	adc.w	r6, ip, sl
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4619      	mov	r1, r3
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	f04f 0400 	mov.w	r4, #0
 800397a:	0094      	lsls	r4, r2, #2
 800397c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003980:	008b      	lsls	r3, r1, #2
 8003982:	461a      	mov	r2, r3
 8003984:	4623      	mov	r3, r4
 8003986:	4628      	mov	r0, r5
 8003988:	4631      	mov	r1, r6
 800398a:	f7fc fc3b 	bl	8000204 <__aeabi_uldivmod>
 800398e:	4603      	mov	r3, r0
 8003990:	460c      	mov	r4, r1
 8003992:	461a      	mov	r2, r3
 8003994:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <UART_SetConfig+0x6f4>)
 8003996:	fba3 1302 	umull	r1, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2164      	movs	r1, #100	; 0x64
 800399e:	fb01 f303 	mul.w	r3, r1, r3
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	3332      	adds	r3, #50	; 0x32
 80039a8:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <UART_SetConfig+0x6f4>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	f003 020f 	and.w	r2, r3, #15
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4442      	add	r2, r8
 80039ba:	609a      	str	r2, [r3, #8]
}
 80039bc:	e7ff      	b.n	80039be <UART_SetConfig+0x6e2>
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c8:	40011000 	.word	0x40011000
 80039cc:	40011400 	.word	0x40011400
 80039d0:	51eb851f 	.word	0x51eb851f

080039d4 <__libc_init_array>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	4e0d      	ldr	r6, [pc, #52]	; (8003a0c <__libc_init_array+0x38>)
 80039d8:	4c0d      	ldr	r4, [pc, #52]	; (8003a10 <__libc_init_array+0x3c>)
 80039da:	1ba4      	subs	r4, r4, r6
 80039dc:	10a4      	asrs	r4, r4, #2
 80039de:	2500      	movs	r5, #0
 80039e0:	42a5      	cmp	r5, r4
 80039e2:	d109      	bne.n	80039f8 <__libc_init_array+0x24>
 80039e4:	4e0b      	ldr	r6, [pc, #44]	; (8003a14 <__libc_init_array+0x40>)
 80039e6:	4c0c      	ldr	r4, [pc, #48]	; (8003a18 <__libc_init_array+0x44>)
 80039e8:	f000 f820 	bl	8003a2c <_init>
 80039ec:	1ba4      	subs	r4, r4, r6
 80039ee:	10a4      	asrs	r4, r4, #2
 80039f0:	2500      	movs	r5, #0
 80039f2:	42a5      	cmp	r5, r4
 80039f4:	d105      	bne.n	8003a02 <__libc_init_array+0x2e>
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039fc:	4798      	blx	r3
 80039fe:	3501      	adds	r5, #1
 8003a00:	e7ee      	b.n	80039e0 <__libc_init_array+0xc>
 8003a02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a06:	4798      	blx	r3
 8003a08:	3501      	adds	r5, #1
 8003a0a:	e7f2      	b.n	80039f2 <__libc_init_array+0x1e>
 8003a0c:	08003a64 	.word	0x08003a64
 8003a10:	08003a64 	.word	0x08003a64
 8003a14:	08003a64 	.word	0x08003a64
 8003a18:	08003a68 	.word	0x08003a68

08003a1c <memset>:
 8003a1c:	4402      	add	r2, r0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d100      	bne.n	8003a26 <memset+0xa>
 8003a24:	4770      	bx	lr
 8003a26:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2a:	e7f9      	b.n	8003a20 <memset+0x4>

08003a2c <_init>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	bf00      	nop
 8003a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a32:	bc08      	pop	{r3}
 8003a34:	469e      	mov	lr, r3
 8003a36:	4770      	bx	lr

08003a38 <_fini>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	bf00      	nop
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr
