
Clock Recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003828  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080039ec  080039ec  000139ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a04  08003a04  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a0c  08003a0c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a10  08003a10  00013a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000010  08003a24  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003a24  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8ef  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017ab  00000000  00000000  0002a92f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b90  00000000  00000000  0002c0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac8  00000000  00000000  0002cc70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020de1  00000000  00000000  0002d738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000833e  00000000  00000000  0004e519  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb51a  00000000  00000000  00056857  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121d71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003090  00000000  00000000  00121dec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080039d4 	.word	0x080039d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080039d4 	.word	0x080039d4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fca5 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f833 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f9ad 	bl	8000870 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f981 	bl	800081c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800051a:	f000 f90f 	bl	800073c <MX_TIM4_Init>
  MX_TIM2_Init();
 800051e:	f000 f897 	bl	8000650 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000522:	2100      	movs	r1, #0
 8000524:	4810      	ldr	r0, [pc, #64]	; (8000568 <main+0x64>)
 8000526:	f001 fd55 	bl	8001fd4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800052a:	2100      	movs	r1, #0
 800052c:	480f      	ldr	r0, [pc, #60]	; (800056c <main+0x68>)
 800052e:	f001 fe0b 	bl	8002148 <HAL_TIM_IC_Start_IT>
  uint32_t captureVal;
  time = HAL_GetTick();
 8000532:	f000 fcf7 	bl	8000f24 <HAL_GetTick>
 8000536:	4602      	mov	r2, r0
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <main+0x6c>)
 800053a:	601a      	str	r2, [r3, #0]
  uint32_t millis_wait = 500;
 800053c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000540:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GetTick() - time >= millis_wait){
 8000542:	f000 fcef 	bl	8000f24 <HAL_GetTick>
 8000546:	4602      	mov	r2, r0
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <main+0x6c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	d8f6      	bhi.n	8000542 <main+0x3e>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000554:	2101      	movs	r1, #1
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <main+0x70>)
 8000558:	f000 ffad 	bl	80014b6 <HAL_GPIO_TogglePin>
		  time = HAL_GetTick();
 800055c:	f000 fce2 	bl	8000f24 <HAL_GetTick>
 8000560:	4602      	mov	r2, r0
 8000562:	4b03      	ldr	r3, [pc, #12]	; (8000570 <main+0x6c>)
 8000564:	601a      	str	r2, [r3, #0]
	  if(HAL_GetTick() - time >= millis_wait){
 8000566:	e7ec      	b.n	8000542 <main+0x3e>
 8000568:	200000f0 	.word	0x200000f0
 800056c:	20000044 	.word	0x20000044
 8000570:	20000088 	.word	0x20000088
 8000574:	40020000 	.word	0x40020000

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2234      	movs	r2, #52	; 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fa1c 	bl	80039c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a28      	ldr	r2, [pc, #160]	; (8000648 <SystemClock_Config+0xd0>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <SystemClock_Config+0xd0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <SystemClock_Config+0xd4>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80005f0:	2350      	movs	r3, #80	; 0x50
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fa2b 	bl	8001a60 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000610:	f000 fa84 	bl	8000b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	2102      	movs	r1, #2
 8000630:	4618      	mov	r0, r3
 8000632:	f000 ff5b 	bl	80014ec <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800063c:	f000 fa6e 	bl	8000b1c <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	; 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
 800067c:	615a      	str	r2, [r3, #20]
 800067e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000680:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <MX_TIM2_Init+0xe8>)
 8000682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_TIM2_Init+0xe8>)
 800068a:	2201      	movs	r2, #1
 800068c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068e:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <MX_TIM2_Init+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <MX_TIM2_Init+0xe8>)
 8000696:	f04f 32ff 	mov.w	r2, #4294967295
 800069a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_TIM2_Init+0xe8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006a8:	4823      	ldr	r0, [pc, #140]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006aa:	f001 fc33 	bl	8001f14 <HAL_TIM_Base_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006b4:	f000 fa32 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c2:	4619      	mov	r1, r3
 80006c4:	481c      	ldr	r0, [pc, #112]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006c6:	f001 ffab 	bl	8002620 <HAL_TIM_ConfigClockSource>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006d0:	f000 fa24 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80006d4:	4818      	ldr	r0, [pc, #96]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006d6:	f001 fc48 	bl	8001f6a <HAL_TIM_OC_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006e0:	f000 fa1c 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4619      	mov	r1, r3
 80006f2:	4811      	ldr	r0, [pc, #68]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006f4:	f002 fce8 	bl	80030c8 <HAL_TIMEx_MasterConfigSynchronization>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006fe:	f000 fa0d 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <MX_TIM2_Init+0xe8>)
 800071a:	f001 fe85 	bl	8002428 <HAL_TIM_OC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000724:	f000 f9fa 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <MX_TIM2_Init+0xe8>)
 800072a:	f000 fa93 	bl	8000c54 <HAL_TIM_MspPostInit>

}
 800072e:	bf00      	nop
 8000730:	3738      	adds	r7, #56	; 0x38
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000f0 	.word	0x200000f0

0800073c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_TIM4_Init+0xd8>)
 8000768:	4a2b      	ldr	r2, [pc, #172]	; (8000818 <MX_TIM4_Init+0xdc>)
 800076a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 800076c:	4b29      	ldr	r3, [pc, #164]	; (8000814 <MX_TIM4_Init+0xd8>)
 800076e:	2201      	movs	r2, #1
 8000770:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <MX_TIM4_Init+0xd8>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_TIM4_Init+0xd8>)
 800077a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800077e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_TIM4_Init+0xd8>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b23      	ldr	r3, [pc, #140]	; (8000814 <MX_TIM4_Init+0xd8>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800078c:	4821      	ldr	r0, [pc, #132]	; (8000814 <MX_TIM4_Init+0xd8>)
 800078e:	f001 fbc1 	bl	8001f14 <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000798:	f000 f9c0 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	4619      	mov	r1, r3
 80007a8:	481a      	ldr	r0, [pc, #104]	; (8000814 <MX_TIM4_Init+0xd8>)
 80007aa:	f001 ff39 	bl	8002620 <HAL_TIM_ConfigClockSource>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80007b4:	f000 f9b2 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80007b8:	4816      	ldr	r0, [pc, #88]	; (8000814 <MX_TIM4_Init+0xd8>)
 80007ba:	f001 fc8f 	bl	80020dc <HAL_TIM_IC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80007c4:	f000 f9aa 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	480f      	ldr	r0, [pc, #60]	; (8000814 <MX_TIM4_Init+0xd8>)
 80007d8:	f002 fc76 	bl	80030c8 <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80007e2:	f000 f99b 	bl	8000b1c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80007e6:	230a      	movs	r3, #10
 80007e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007ea:	2301      	movs	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_TIM4_Init+0xd8>)
 80007fe:	f001 fe73 	bl	80024e8 <HAL_TIM_IC_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000808:	f000 f988 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	; 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000044 	.word	0x20000044
 8000818:	40000800 	.word	0x40000800

0800081c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_USART2_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000854:	f002 fcc8 	bl	80031e8 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085e:	f000 f95d 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000130 	.word	0x20000130
 800086c:	40004400 	.word	0x40004400

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <MX_GPIO_Init+0xd4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a2d      	ldr	r2, [pc, #180]	; (8000944 <MX_GPIO_Init+0xd4>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <MX_GPIO_Init+0xd4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a26      	ldr	r2, [pc, #152]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Ch2_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 7108 	mov.w	r1, #544	; 0x220
 80008fc:	4812      	ldr	r0, [pc, #72]	; (8000948 <MX_GPIO_Init+0xd8>)
 80008fe:	f000 fdc1 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_GPIO_Init+0xdc>)
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	480e      	ldr	r0, [pc, #56]	; (8000950 <MX_GPIO_Init+0xe0>)
 8000918:	f000 fc22 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Ch2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Ch2_Pin;
 800091c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_GPIO_Init+0xd8>)
 8000936:	f000 fc13 	bl	8001160 <HAL_GPIO_Init>

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000
 800094c:	10210000 	.word	0x10210000
 8000950:	40020800 	.word	0x40020800

08000954 <HAL_TIM_IC_CaptureCallback>:
// this function is automatically called whenever the input capture interrupt hits



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	static uint32_t falling_capture = 0;	// stores the timer tick value of the most recent falling edge
	static bool rise_captured = false;		// these are used to ensure that we aren't trying to compute the difference
	static bool fall_captured = false;		// before we have captured both a rising and falling edge
	static bool signal_edge = RISING_EDGE;	// so we know what edge we are looking for (really, the opposite of the edge that was captured last

	uint32_t this_capture = 0;		// simply stores either the rising or falling capture, based on which state we are in (avoids duplicate code)
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]

	//Make sure this is the right timer and channel
	if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a3e      	ldr	r2, [pc, #248]	; (8000a60 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d175      	bne.n	8000a56 <HAL_TIM_IC_CaptureCallback+0x102>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7f1b      	ldrb	r3, [r3, #28]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d171      	bne.n	8000a56 <HAL_TIM_IC_CaptureCallback+0x102>
	{
		//Reset roll-over value
		captured_bits_count = 0;
 8000972:	4b3c      	ldr	r3, [pc, #240]	; (8000a64 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]

		//Grap pin state for OC timer
		freq_pin_state = signal_edge;
 8000978:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0x114>)
 800097a:	781a      	ldrb	r2, [r3, #0]
 800097c:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <HAL_TIM_IC_CaptureCallback+0x118>)
 800097e:	701a      	strb	r2, [r3, #0]

		//Rising Edge
		if (signal_edge)
 8000980:	4b39      	ldr	r3, [pc, #228]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d01f      	beq.n	80009c8 <HAL_TIM_IC_CaptureCallback+0x74>
		{
			rising_capture = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1); //Time-stamp interrupt
 8000988:	2100      	movs	r1, #0
 800098a:	4839      	ldr	r0, [pc, #228]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800098c:	f001 ff00 	bl	8002790 <HAL_TIM_ReadCapturedValue>
 8000990:	4602      	mov	r2, r0
 8000992:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000994:	601a      	str	r2, [r3, #0]
			signal_edge = FALLING_EDGE;		// look for falling edge on next capture
 8000996:	4b34      	ldr	r3, [pc, #208]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
			rise_captured = true;
 800099c:	4b36      	ldr	r3, [pc, #216]	; (8000a78 <HAL_TIM_IC_CaptureCallback+0x124>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]

			if (rise_captured && fall_captured)
 80009a2:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <HAL_TIM_IC_CaptureCallback+0x124>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d02d      	beq.n	8000a06 <HAL_TIM_IC_CaptureCallback+0xb2>
 80009aa:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <HAL_TIM_IC_CaptureCallback+0x128>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d029      	beq.n	8000a06 <HAL_TIM_IC_CaptureCallback+0xb2>
			{
				capture_difference = rising_capture - falling_capture;		// calculate difference
 80009b2:	4b30      	ldr	r3, [pc, #192]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0x120>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	4a31      	ldr	r2, [pc, #196]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0x130>)
 80009be:	6013      	str	r3, [r2, #0]
				this_capture = rising_capture;		// set current sample to rising edge
 80009c0:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0x120>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e01e      	b.n	8000a06 <HAL_TIM_IC_CaptureCallback+0xb2>
		}

		//Falling edge
		else
		{
			falling_capture = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);		//Time-stamp interrupt
 80009c8:	2100      	movs	r1, #0
 80009ca:	4829      	ldr	r0, [pc, #164]	; (8000a70 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80009cc:	f001 fee0 	bl	8002790 <HAL_TIM_ReadCapturedValue>
 80009d0:	4602      	mov	r2, r0
 80009d2:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80009d4:	601a      	str	r2, [r3, #0]
			fall_captured = true;
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <HAL_TIM_IC_CaptureCallback+0x128>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
			signal_edge = RISING_EDGE;		// look for rising edge on next capture
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <HAL_TIM_IC_CaptureCallback+0x114>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]

			if (rise_captured && fall_captured)
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <HAL_TIM_IC_CaptureCallback+0x124>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00d      	beq.n	8000a06 <HAL_TIM_IC_CaptureCallback+0xb2>
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <HAL_TIM_IC_CaptureCallback+0x128>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d009      	beq.n	8000a06 <HAL_TIM_IC_CaptureCallback+0xb2>
			{
				capture_difference = falling_capture - rising_capture;		// calculate difference
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0x120>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0x130>)
 80009fe:	6013      	str	r3, [r2, #0]
				this_capture = falling_capture;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60fb      	str	r3, [r7, #12]
			}
		}

		//Have now captured the transition period
		//Can use this to align sampling clock
		if (rise_captured && fall_captured)
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d023      	beq.n	8000a56 <HAL_TIM_IC_CaptureCallback+0x102>
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_TIM_IC_CaptureCallback+0x128>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d01f      	beq.n	8000a56 <HAL_TIM_IC_CaptureCallback+0x102>
		{
			//Check if the transition was a valid transition period to use
			if(SYMBOL_PERIOD-SYMBOL_MARGIN < capture_difference && capture_difference < SYMBOL_PERIOD+SYMBOL_MARGIN){
 8000a16:	f248 2235 	movw	r2, #33333	; 0x8235
 8000a1a:	f640 5305 	movw	r3, #3333	; 0xd05
 8000a1e:	1ad2      	subs	r2, r2, r3
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d216      	bcs.n	8000a56 <HAL_TIM_IC_CaptureCallback+0x102>
 8000a28:	f248 2235 	movw	r2, #33333	; 0x8235
 8000a2c:	f640 5305 	movw	r3, #3333	; 0xd05
 8000a30:	441a      	add	r2, r3
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d90d      	bls.n	8000a56 <HAL_TIM_IC_CaptureCallback+0x102>

				//Predict clock
				uint32_t next_sampl = this_capture + bit_sample_period;
 8000a3a:	f248 2335 	movw	r3, #33333	; 0x8235
 8000a3e:	085b      	lsrs	r3, r3, #1
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	4413      	add	r3, r2
 8000a44:	60bb      	str	r3, [r7, #8]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, next_sampl);
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34

				//Have now synced with clock
				clk_sync = true;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_TIM_IC_CaptureCallback+0x138>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return;
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
}
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40000800 	.word	0x40000800
 8000a64:	20000034 	.word	0x20000034
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000036 	.word	0x20000036
 8000a70:	20000044 	.word	0x20000044
 8000a74:	20000038 	.word	0x20000038
 8000a78:	2000003c 	.word	0x2000003c
 8000a7c:	2000003d 	.word	0x2000003d
 8000a80:	20000040 	.word	0x20000040
 8000a84:	2000002c 	.word	0x2000002c
 8000a88:	200000f0 	.word	0x200000f0
 8000a8c:	20000035 	.word	0x20000035

08000a90 <HAL_TIM_OC_DelayElapsedCallback>:

// this function is called automatically whenever the output compare interrupt hits
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa0:	d12c      	bne.n	8000afc <HAL_TIM_OC_DelayElapsedCallback+0x6c>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7f1b      	ldrb	r3, [r3, #28]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d128      	bne.n	8000afc <HAL_TIM_OC_DelayElapsedCallback+0x6c>
	{

		uint32_t this_capture = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab0:	617b      	str	r3, [r7, #20]
		uint32_t next_sampl = this_capture + bit_sample_period;
 8000ab2:	f248 2335 	movw	r3, #33333	; 0x8235
 8000ab6:	085b      	lsrs	r3, r3, #1
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	4413      	add	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (+ (new_bit_period))); // if we have not received a transition to the input capture module, we want to refresh the output compare module with the last known bit period
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34

		//Check if this is valid data
		if(clk_sync){
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d007      	beq.n	8000ae0 <HAL_TIM_OC_DelayElapsedCallback+0x50>
			/* Use freq_pin_state to load values into a buffer.*/
			bool bit = freq_pin_state;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	73fb      	strb	r3, [r7, #15]

			HAL_GPIO_TogglePin(GPIOA,Ch2_Pin); //Toggle output when sampled
 8000ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000adc:	f000 fceb 	bl	80014b6 <HAL_GPIO_TogglePin>
		}

		//Inc number of bits since last clock sync
		captured_bits_count++;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8000aea:	701a      	strb	r2, [r3, #0]
		if(captured_bits_count > samp_per_bit * no_clk_max_cnt){
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b10      	cmp	r3, #16
 8000af2:	d903      	bls.n	8000afc <HAL_TIM_OC_DelayElapsedCallback+0x6c>
			clk_sync = false;	//Clock is no longer sync
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
		}
	}

	return;
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
}
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000f0 	.word	0x200000f0
 8000b08:	20000030 	.word	0x20000030
 8000b0c:	20000035 	.word	0x20000035
 8000b10:	20000036 	.word	0x20000036
 8000b14:	40020000 	.word	0x40020000
 8000b18:	20000034 	.word	0x20000034

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b6a:	2007      	movs	r0, #7
 8000b6c:	f000 fab6 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b9c:	d116      	bne.n	8000bcc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <HAL_TIM_Base_MspInit+0xcc>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <HAL_TIM_Base_MspInit+0xcc>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <HAL_TIM_Base_MspInit+0xcc>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	201c      	movs	r0, #28
 8000bc0:	f000 fa97 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bc4:	201c      	movs	r0, #28
 8000bc6:	f000 fab0 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000bca:	e038      	b.n	8000c3e <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM4)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <HAL_TIM_Base_MspInit+0xd0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d133      	bne.n	8000c3e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <HAL_TIM_Base_MspInit+0xcc>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a1a      	ldr	r2, [pc, #104]	; (8000c48 <HAL_TIM_Base_MspInit+0xcc>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_TIM_Base_MspInit+0xcc>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_TIM_Base_MspInit+0xcc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <HAL_TIM_Base_MspInit+0xcc>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_TIM_Base_MspInit+0xcc>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4809      	ldr	r0, [pc, #36]	; (8000c50 <HAL_TIM_Base_MspInit+0xd4>)
 8000c2a:	f000 fa99 	bl	8001160 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	201e      	movs	r0, #30
 8000c34:	f000 fa5d 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c38:	201e      	movs	r0, #30
 8000c3a:	f000 fa76 	bl	800112a <HAL_NVIC_EnableIRQ>
}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40000800 	.word	0x40000800
 8000c50:	40020400 	.word	0x40020400

08000c54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c74:	d11e      	bne.n	8000cb4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_TIM_MspPostInit+0x68>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <HAL_TIM_MspPostInit+0x68>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_TIM_MspPostInit+0x68>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <HAL_TIM_MspPostInit+0x6c>)
 8000cb0:	f000 fa56 	bl	8001160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <HAL_UART_MspInit+0x84>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d12b      	bne.n	8000d3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d1e:	230c      	movs	r3, #12
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_UART_MspInit+0x8c>)
 8000d3a:	f000 fa11 	bl	8001160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40004400 	.word	0x40004400
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <MemManage_Handler+0x4>

08000d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da8:	f000 f8a8 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <TIM2_IRQHandler+0x10>)
 8000db6:	f001 fa2f 	bl	8002218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000f0 	.word	0x200000f0

08000dc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <TIM4_IRQHandler+0x10>)
 8000dca:	f001 fa25 	bl	8002218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000044 	.word	0x20000044

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <SystemInit+0x28>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <SystemInit+0x28>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SystemInit+0x28>)
 8000dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df2:	609a      	str	r2, [r3, #8]
#endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e0a:	e003      	b.n	8000e14 <LoopCopyDataInit>

08000e0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e12:	3104      	adds	r1, #4

08000e14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e1c:	d3f6      	bcc.n	8000e0c <CopyDataInit>
  ldr  r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e20:	e002      	b.n	8000e28 <LoopFillZerobss>

08000e22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e24:	f842 3b04 	str.w	r3, [r2], #4

08000e28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e2c:	d3f9      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e2e:	f7ff ffd3 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f002 fda3 	bl	800397c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fb65 	bl	8000504 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e40:	08003a14 	.word	0x08003a14
  ldr  r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e48:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000e4c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000e50:	20000174 	.word	0x20000174

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f92b 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fe4e 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f943 	bl	8001146 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f90b 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000004 	.word	0x20000004
 8000ef4:	2000000c 	.word	0x2000000c
 8000ef8:	20000008 	.word	0x20000008

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	2000000c 	.word	0x2000000c
 8000f20:	20000170 	.word	0x20000170

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000170 	.word	0x20000170

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff3e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff31 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	e165      	b.n	8001448 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	429a      	cmp	r2, r3
 8001196:	f040 8154 	bne.w	8001442 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d00b      	beq.n	80011ba <HAL_GPIO_Init+0x5a>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ae:	2b11      	cmp	r3, #17
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b12      	cmp	r3, #18
 80011b8:	d130      	bne.n	800121c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0xfc>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b12      	cmp	r3, #18
 800125a:	d123      	bne.n	80012a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	220f      	movs	r2, #15
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3208      	adds	r2, #8
 800129e:	69b9      	ldr	r1, [r7, #24]
 80012a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0203 	and.w	r2, r3, #3
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80ae 	beq.w	8001442 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b5c      	ldr	r3, [pc, #368]	; (800145c <HAL_GPIO_Init+0x2fc>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a5b      	ldr	r2, [pc, #364]	; (800145c <HAL_GPIO_Init+0x2fc>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_GPIO_Init+0x2fc>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001302:	4a57      	ldr	r2, [pc, #348]	; (8001460 <HAL_GPIO_Init+0x300>)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3302      	adds	r3, #2
 800130a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4e      	ldr	r2, [pc, #312]	; (8001464 <HAL_GPIO_Init+0x304>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d025      	beq.n	800137a <HAL_GPIO_Init+0x21a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4d      	ldr	r2, [pc, #308]	; (8001468 <HAL_GPIO_Init+0x308>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01f      	beq.n	8001376 <HAL_GPIO_Init+0x216>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4c      	ldr	r2, [pc, #304]	; (800146c <HAL_GPIO_Init+0x30c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x212>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4b      	ldr	r2, [pc, #300]	; (8001470 <HAL_GPIO_Init+0x310>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x20e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <HAL_GPIO_Init+0x314>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x20a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a49      	ldr	r2, [pc, #292]	; (8001478 <HAL_GPIO_Init+0x318>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x206>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a48      	ldr	r2, [pc, #288]	; (800147c <HAL_GPIO_Init+0x31c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x202>
 800135e:	2306      	movs	r3, #6
 8001360:	e00c      	b.n	800137c <HAL_GPIO_Init+0x21c>
 8001362:	2307      	movs	r3, #7
 8001364:	e00a      	b.n	800137c <HAL_GPIO_Init+0x21c>
 8001366:	2305      	movs	r3, #5
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x21c>
 800136a:	2304      	movs	r3, #4
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x21c>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x21c>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x21c>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x21c>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800138c:	4934      	ldr	r1, [pc, #208]	; (8001460 <HAL_GPIO_Init+0x300>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139a:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_GPIO_Init+0x320>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013be:	4a30      	ldr	r2, [pc, #192]	; (8001480 <HAL_GPIO_Init+0x320>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <HAL_GPIO_Init+0x320>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e8:	4a25      	ldr	r2, [pc, #148]	; (8001480 <HAL_GPIO_Init+0x320>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_GPIO_Init+0x320>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001412:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <HAL_GPIO_Init+0x320>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_GPIO_Init+0x320>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800143c:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_GPIO_Init+0x320>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f ae96 	bls.w	800117c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	3724      	adds	r7, #36	; 0x24
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40023800 	.word	0x40023800
 8001460:	40013800 	.word	0x40013800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40021400 	.word	0x40021400
 800147c:	40021800 	.word	0x40021800
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a0:	e003      	b.n	80014aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	041a      	lsls	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	460b      	mov	r3, r1
 80014c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	401a      	ands	r2, r3
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d104      	bne.n	80014da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	041a      	lsls	r2, r3, #16
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80014d8:	e002      	b.n	80014e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0cc      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001500:	4b68      	ldr	r3, [pc, #416]	; (80016a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d90c      	bls.n	8001528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150e:	4b65      	ldr	r3, [pc, #404]	; (80016a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001516:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d001      	beq.n	8001528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0b8      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d020      	beq.n	8001576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001540:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4a58      	ldr	r2, [pc, #352]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800154a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001558:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4a52      	ldr	r2, [pc, #328]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001564:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	494d      	ldr	r1, [pc, #308]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	4313      	orrs	r3, r2
 8001574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d044      	beq.n	800160c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d119      	bne.n	80015ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e07f      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d003      	beq.n	80015aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015aa:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d109      	bne.n	80015ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e06f      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ba:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e067      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ca:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f023 0203 	bic.w	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4934      	ldr	r1, [pc, #208]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015dc:	f7ff fca2 	bl	8000f24 <HAL_GetTick>
 80015e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e4:	f7ff fc9e 	bl	8000f24 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e04f      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 020c 	and.w	r2, r3, #12
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	429a      	cmp	r2, r3
 800160a:	d1eb      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_RCC_ClockConfig+0x1b8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d20c      	bcs.n	8001634 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d001      	beq.n	8001634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e032      	b.n	800169a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4916      	ldr	r1, [pc, #88]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	490e      	ldr	r1, [pc, #56]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	4313      	orrs	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001672:	f000 f855 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 8001676:	4601      	mov	r1, r0
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	5cd3      	ldrb	r3, [r2, r3]
 8001686:	fa21 f303 	lsr.w	r3, r1, r3
 800168a:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fc02 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023c00 	.word	0x40023c00
 80016a8:	40023800 	.word	0x40023800
 80016ac:	080039ec 	.word	0x080039ec
 80016b0:	20000004 	.word	0x20000004
 80016b4:	20000008 	.word	0x20000008

080016b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_RCC_GetHCLKFreq+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016d4:	f7ff fff0 	bl	80016b8 <HAL_RCC_GetHCLKFreq>
 80016d8:	4601      	mov	r1, r0
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	0a9b      	lsrs	r3, r3, #10
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40023800 	.word	0x40023800
 80016f4:	080039fc 	.word	0x080039fc

080016f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016fc:	f7ff ffdc 	bl	80016b8 <HAL_RCC_GetHCLKFreq>
 8001700:	4601      	mov	r1, r0
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	0b5b      	lsrs	r3, r3, #13
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	4a03      	ldr	r2, [pc, #12]	; (800171c <HAL_RCC_GetPCLK2Freq+0x24>)
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	080039fc 	.word	0x080039fc

08001720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800173a:	4bc6      	ldr	r3, [pc, #792]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x334>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b0c      	cmp	r3, #12
 8001744:	f200 817e 	bhi.w	8001a44 <HAL_RCC_GetSysClockFreq+0x324>
 8001748:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <HAL_RCC_GetSysClockFreq+0x30>)
 800174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174e:	bf00      	nop
 8001750:	08001785 	.word	0x08001785
 8001754:	08001a45 	.word	0x08001a45
 8001758:	08001a45 	.word	0x08001a45
 800175c:	08001a45 	.word	0x08001a45
 8001760:	0800178b 	.word	0x0800178b
 8001764:	08001a45 	.word	0x08001a45
 8001768:	08001a45 	.word	0x08001a45
 800176c:	08001a45 	.word	0x08001a45
 8001770:	08001791 	.word	0x08001791
 8001774:	08001a45 	.word	0x08001a45
 8001778:	08001a45 	.word	0x08001a45
 800177c:	08001a45 	.word	0x08001a45
 8001780:	080018ed 	.word	0x080018ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001784:	4bb4      	ldr	r3, [pc, #720]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x338>)
 8001786:	613b      	str	r3, [r7, #16]
       break;
 8001788:	e15f      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800178a:	4bb4      	ldr	r3, [pc, #720]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x33c>)
 800178c:	613b      	str	r3, [r7, #16]
      break;
 800178e:	e15c      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001790:	4bb0      	ldr	r3, [pc, #704]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001798:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800179a:	4bae      	ldr	r3, [pc, #696]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x334>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d04a      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a6:	4bab      	ldr	r3, [pc, #684]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x334>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	099b      	lsrs	r3, r3, #6
 80017ac:	f04f 0400 	mov.w	r4, #0
 80017b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	ea03 0501 	and.w	r5, r3, r1
 80017bc:	ea04 0602 	and.w	r6, r4, r2
 80017c0:	4629      	mov	r1, r5
 80017c2:	4632      	mov	r2, r6
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	f04f 0400 	mov.w	r4, #0
 80017cc:	0154      	lsls	r4, r2, #5
 80017ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017d2:	014b      	lsls	r3, r1, #5
 80017d4:	4619      	mov	r1, r3
 80017d6:	4622      	mov	r2, r4
 80017d8:	1b49      	subs	r1, r1, r5
 80017da:	eb62 0206 	sbc.w	r2, r2, r6
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	f04f 0400 	mov.w	r4, #0
 80017e6:	0194      	lsls	r4, r2, #6
 80017e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017ec:	018b      	lsls	r3, r1, #6
 80017ee:	1a5b      	subs	r3, r3, r1
 80017f0:	eb64 0402 	sbc.w	r4, r4, r2
 80017f4:	f04f 0100 	mov.w	r1, #0
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	00e2      	lsls	r2, r4, #3
 80017fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001802:	00d9      	lsls	r1, r3, #3
 8001804:	460b      	mov	r3, r1
 8001806:	4614      	mov	r4, r2
 8001808:	195b      	adds	r3, r3, r5
 800180a:	eb44 0406 	adc.w	r4, r4, r6
 800180e:	f04f 0100 	mov.w	r1, #0
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	0262      	lsls	r2, r4, #9
 8001818:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800181c:	0259      	lsls	r1, r3, #9
 800181e:	460b      	mov	r3, r1
 8001820:	4614      	mov	r4, r2
 8001822:	4618      	mov	r0, r3
 8001824:	4621      	mov	r1, r4
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f04f 0400 	mov.w	r4, #0
 800182c:	461a      	mov	r2, r3
 800182e:	4623      	mov	r3, r4
 8001830:	f7fe fce8 	bl	8000204 <__aeabi_uldivmod>
 8001834:	4603      	mov	r3, r0
 8001836:	460c      	mov	r4, r1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	e049      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183c:	4b85      	ldr	r3, [pc, #532]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x334>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	099b      	lsrs	r3, r3, #6
 8001842:	f04f 0400 	mov.w	r4, #0
 8001846:	f240 11ff 	movw	r1, #511	; 0x1ff
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	ea03 0501 	and.w	r5, r3, r1
 8001852:	ea04 0602 	and.w	r6, r4, r2
 8001856:	4629      	mov	r1, r5
 8001858:	4632      	mov	r2, r6
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	f04f 0400 	mov.w	r4, #0
 8001862:	0154      	lsls	r4, r2, #5
 8001864:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001868:	014b      	lsls	r3, r1, #5
 800186a:	4619      	mov	r1, r3
 800186c:	4622      	mov	r2, r4
 800186e:	1b49      	subs	r1, r1, r5
 8001870:	eb62 0206 	sbc.w	r2, r2, r6
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	f04f 0400 	mov.w	r4, #0
 800187c:	0194      	lsls	r4, r2, #6
 800187e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001882:	018b      	lsls	r3, r1, #6
 8001884:	1a5b      	subs	r3, r3, r1
 8001886:	eb64 0402 	sbc.w	r4, r4, r2
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	00e2      	lsls	r2, r4, #3
 8001894:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001898:	00d9      	lsls	r1, r3, #3
 800189a:	460b      	mov	r3, r1
 800189c:	4614      	mov	r4, r2
 800189e:	195b      	adds	r3, r3, r5
 80018a0:	eb44 0406 	adc.w	r4, r4, r6
 80018a4:	f04f 0100 	mov.w	r1, #0
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	02a2      	lsls	r2, r4, #10
 80018ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018b2:	0299      	lsls	r1, r3, #10
 80018b4:	460b      	mov	r3, r1
 80018b6:	4614      	mov	r4, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	4621      	mov	r1, r4
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f04f 0400 	mov.w	r4, #0
 80018c2:	461a      	mov	r2, r3
 80018c4:	4623      	mov	r3, r4
 80018c6:	f7fe fc9d 	bl	8000204 <__aeabi_uldivmod>
 80018ca:	4603      	mov	r3, r0
 80018cc:	460c      	mov	r4, r1
 80018ce:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018d0:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x334>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	0c1b      	lsrs	r3, r3, #16
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	3301      	adds	r3, #1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	613b      	str	r3, [r7, #16]
      break;
 80018ea:	e0ae      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ec:	4b59      	ldr	r3, [pc, #356]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x334>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f6:	4b57      	ldr	r3, [pc, #348]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x334>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d04a      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001902:	4b54      	ldr	r3, [pc, #336]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	099b      	lsrs	r3, r3, #6
 8001908:	f04f 0400 	mov.w	r4, #0
 800190c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	ea03 0501 	and.w	r5, r3, r1
 8001918:	ea04 0602 	and.w	r6, r4, r2
 800191c:	4629      	mov	r1, r5
 800191e:	4632      	mov	r2, r6
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	f04f 0400 	mov.w	r4, #0
 8001928:	0154      	lsls	r4, r2, #5
 800192a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800192e:	014b      	lsls	r3, r1, #5
 8001930:	4619      	mov	r1, r3
 8001932:	4622      	mov	r2, r4
 8001934:	1b49      	subs	r1, r1, r5
 8001936:	eb62 0206 	sbc.w	r2, r2, r6
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	f04f 0400 	mov.w	r4, #0
 8001942:	0194      	lsls	r4, r2, #6
 8001944:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001948:	018b      	lsls	r3, r1, #6
 800194a:	1a5b      	subs	r3, r3, r1
 800194c:	eb64 0402 	sbc.w	r4, r4, r2
 8001950:	f04f 0100 	mov.w	r1, #0
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	00e2      	lsls	r2, r4, #3
 800195a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800195e:	00d9      	lsls	r1, r3, #3
 8001960:	460b      	mov	r3, r1
 8001962:	4614      	mov	r4, r2
 8001964:	195b      	adds	r3, r3, r5
 8001966:	eb44 0406 	adc.w	r4, r4, r6
 800196a:	f04f 0100 	mov.w	r1, #0
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	0262      	lsls	r2, r4, #9
 8001974:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001978:	0259      	lsls	r1, r3, #9
 800197a:	460b      	mov	r3, r1
 800197c:	4614      	mov	r4, r2
 800197e:	4618      	mov	r0, r3
 8001980:	4621      	mov	r1, r4
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f04f 0400 	mov.w	r4, #0
 8001988:	461a      	mov	r2, r3
 800198a:	4623      	mov	r3, r4
 800198c:	f7fe fc3a 	bl	8000204 <__aeabi_uldivmod>
 8001990:	4603      	mov	r3, r0
 8001992:	460c      	mov	r4, r1
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e049      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001998:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x334>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	f04f 0400 	mov.w	r4, #0
 80019a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	ea03 0501 	and.w	r5, r3, r1
 80019ae:	ea04 0602 	and.w	r6, r4, r2
 80019b2:	4629      	mov	r1, r5
 80019b4:	4632      	mov	r2, r6
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	f04f 0400 	mov.w	r4, #0
 80019be:	0154      	lsls	r4, r2, #5
 80019c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019c4:	014b      	lsls	r3, r1, #5
 80019c6:	4619      	mov	r1, r3
 80019c8:	4622      	mov	r2, r4
 80019ca:	1b49      	subs	r1, r1, r5
 80019cc:	eb62 0206 	sbc.w	r2, r2, r6
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	f04f 0400 	mov.w	r4, #0
 80019d8:	0194      	lsls	r4, r2, #6
 80019da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019de:	018b      	lsls	r3, r1, #6
 80019e0:	1a5b      	subs	r3, r3, r1
 80019e2:	eb64 0402 	sbc.w	r4, r4, r2
 80019e6:	f04f 0100 	mov.w	r1, #0
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	00e2      	lsls	r2, r4, #3
 80019f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019f4:	00d9      	lsls	r1, r3, #3
 80019f6:	460b      	mov	r3, r1
 80019f8:	4614      	mov	r4, r2
 80019fa:	195b      	adds	r3, r3, r5
 80019fc:	eb44 0406 	adc.w	r4, r4, r6
 8001a00:	f04f 0100 	mov.w	r1, #0
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	02a2      	lsls	r2, r4, #10
 8001a0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a0e:	0299      	lsls	r1, r3, #10
 8001a10:	460b      	mov	r3, r1
 8001a12:	4614      	mov	r4, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	4621      	mov	r1, r4
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f04f 0400 	mov.w	r4, #0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4623      	mov	r3, r4
 8001a22:	f7fe fbef 	bl	8000204 <__aeabi_uldivmod>
 8001a26:	4603      	mov	r3, r0
 8001a28:	460c      	mov	r4, r1
 8001a2a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	0f1b      	lsrs	r3, r3, #28
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	613b      	str	r3, [r7, #16]
      break;
 8001a42:	e002      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x338>)
 8001a46:	613b      	str	r3, [r7, #16]
      break;
 8001a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a4a:	693b      	ldr	r3, [r7, #16]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	00f42400 	.word	0x00f42400
 8001a5c:	007a1200 	.word	0x007a1200

08001a60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8083 	beq.w	8001b80 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a7a:	4b95      	ldr	r3, [pc, #596]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d019      	beq.n	8001aba <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a86:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d106      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a92:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a9e:	d00c      	beq.n	8001aba <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa0:	4b8b      	ldr	r3, [pc, #556]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	d112      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aac:	4b88      	ldr	r3, [pc, #544]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aba:	4b85      	ldr	r3, [pc, #532]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d05b      	beq.n	8001b7e <HAL_RCC_OscConfig+0x11e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d157      	bne.n	8001b7e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e216      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ada:	d106      	bne.n	8001aea <HAL_RCC_OscConfig+0x8a>
 8001adc:	4b7c      	ldr	r3, [pc, #496]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a7b      	ldr	r2, [pc, #492]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e01d      	b.n	8001b26 <HAL_RCC_OscConfig+0xc6>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af2:	d10c      	bne.n	8001b0e <HAL_RCC_OscConfig+0xae>
 8001af4:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a75      	ldr	r2, [pc, #468]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b73      	ldr	r3, [pc, #460]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a72      	ldr	r2, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e00b      	b.n	8001b26 <HAL_RCC_OscConfig+0xc6>
 8001b0e:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6f      	ldr	r2, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6c      	ldr	r2, [pc, #432]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d013      	beq.n	8001b56 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f9f9 	bl	8000f24 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b36:	f7ff f9f5 	bl	8000f24 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	; 0x64
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e1db      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b48:	4b61      	ldr	r3, [pc, #388]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0xd6>
 8001b54:	e014      	b.n	8001b80 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b56:	f7ff f9e5 	bl	8000f24 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5e:	f7ff f9e1 	bl	8000f24 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b64      	cmp	r3, #100	; 0x64
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e1c7      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b70:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f0      	bne.n	8001b5e <HAL_RCC_OscConfig+0xfe>
 8001b7c:	e000      	b.n	8001b80 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d06f      	beq.n	8001c6c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b8c:	4b50      	ldr	r3, [pc, #320]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d017      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b98:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d105      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ba4:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00b      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb0:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	d11c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bbc:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d116      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc8:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_OscConfig+0x180>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e18f      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4938      	ldr	r1, [pc, #224]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf4:	e03a      	b.n	8001c6c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d020      	beq.n	8001c40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfe:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff f98e 	bl	8000f24 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f98a 	bl	8000f24 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e170      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4925      	ldr	r1, [pc, #148]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
 8001c3e:	e015      	b.n	8001c6c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_OscConfig+0x274>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff f96d 	bl	8000f24 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff f969 	bl	8000f24 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e14f      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d037      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d016      	beq.n	8001cae <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_RCC_OscConfig+0x278>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c86:	f7ff f94d 	bl	8000f24 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8e:	f7ff f949 	bl	8000f24 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e12f      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x22e>
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_OscConfig+0x278>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f936 	bl	8000f24 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f932 	bl	8000f24 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d908      	bls.n	8001cdc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e118      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	42470000 	.word	0x42470000
 8001cd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b8a      	ldr	r3, [pc, #552]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e9      	bne.n	8001cbc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8097 	beq.w	8001e24 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b83      	ldr	r3, [pc, #524]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10f      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b7f      	ldr	r3, [pc, #508]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a7e      	ldr	r2, [pc, #504]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b79      	ldr	r3, [pc, #484]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	4b76      	ldr	r3, [pc, #472]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a75      	ldr	r2, [pc, #468]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f8f1 	bl	8000f24 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff f8ed 	bl	8000f24 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0d3      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <HAL_RCC_OscConfig+0x4ac>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x31a>
 8001d6c:	4b66      	ldr	r3, [pc, #408]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	4a65      	ldr	r2, [pc, #404]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6713      	str	r3, [r2, #112]	; 0x70
 8001d78:	e01c      	b.n	8001db4 <HAL_RCC_OscConfig+0x354>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x33c>
 8001d82:	4b61      	ldr	r3, [pc, #388]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a60      	ldr	r2, [pc, #384]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8e:	4b5e      	ldr	r3, [pc, #376]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	4a5d      	ldr	r2, [pc, #372]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0x354>
 8001d9c:	4b5a      	ldr	r3, [pc, #360]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a59      	ldr	r2, [pc, #356]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	4b57      	ldr	r3, [pc, #348]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4a56      	ldr	r2, [pc, #344]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d015      	beq.n	8001de8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff f8b2 	bl	8000f24 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc4:	f7ff f8ae 	bl	8000f24 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e092      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0ee      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x364>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff f89c 	bl	8000f24 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f7ff f898 	bl	8000f24 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e07c      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e06:	4b40      	ldr	r3, [pc, #256]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1ee      	bne.n	8001df0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e18:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	4a3a      	ldr	r2, [pc, #232]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d068      	beq.n	8001efe <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e2c:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d060      	beq.n	8001efa <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d145      	bne.n	8001ecc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e40:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <HAL_RCC_OscConfig+0x4b0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7ff f86d 	bl	8000f24 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7ff f869 	bl	8000f24 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e04f      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69da      	ldr	r2, [r3, #28]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	019b      	lsls	r3, r3, #6
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	085b      	lsrs	r3, r3, #1
 8001e84:	3b01      	subs	r3, #1
 8001e86:	041b      	lsls	r3, r3, #16
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	061b      	lsls	r3, r3, #24
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	071b      	lsls	r3, r3, #28
 8001e98:	491b      	ldr	r1, [pc, #108]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <HAL_RCC_OscConfig+0x4b0>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f83e 	bl	8000f24 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff f83a 	bl	8000f24 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e020      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x44c>
 8001eca:	e018      	b.n	8001efe <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_RCC_OscConfig+0x4b0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed2:	f7ff f827 	bl	8000f24 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff f823 	bl	8000f24 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e009      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_RCC_OscConfig+0x4a8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f0      	bne.n	8001eda <HAL_RCC_OscConfig+0x47a>
 8001ef8:	e001      	b.n	8001efe <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	42470060 	.word	0x42470060

08001f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e01d      	b.n	8001f62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fe1e 	bl	8000b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f000 fc7e 	bl	8002854 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e01d      	b.n	8001fb8 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d106      	bne.n	8001f96 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f815 	bl	8001fc0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4610      	mov	r0, r2
 8001faa:	f000 fc53 	bl	8002854 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	d841      	bhi.n	8002068 <HAL_TIM_OC_Start_IT+0x94>
 8001fe4:	a201      	add	r2, pc, #4	; (adr r2, 8001fec <HAL_TIM_OC_Start_IT+0x18>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	08002021 	.word	0x08002021
 8001ff0:	08002069 	.word	0x08002069
 8001ff4:	08002069 	.word	0x08002069
 8001ff8:	08002069 	.word	0x08002069
 8001ffc:	08002033 	.word	0x08002033
 8002000:	08002069 	.word	0x08002069
 8002004:	08002069 	.word	0x08002069
 8002008:	08002069 	.word	0x08002069
 800200c:	08002045 	.word	0x08002045
 8002010:	08002069 	.word	0x08002069
 8002014:	08002069 	.word	0x08002069
 8002018:	08002069 	.word	0x08002069
 800201c:	08002057 	.word	0x08002057
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0202 	orr.w	r2, r2, #2
 800202e:	60da      	str	r2, [r3, #12]
      break;
 8002030:	e01b      	b.n	800206a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0204 	orr.w	r2, r2, #4
 8002040:	60da      	str	r2, [r3, #12]
      break;
 8002042:	e012      	b.n	800206a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0208 	orr.w	r2, r2, #8
 8002052:	60da      	str	r2, [r3, #12]
      break;
 8002054:	e009      	b.n	800206a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0210 	orr.w	r2, r2, #16
 8002064:	60da      	str	r2, [r3, #12]
      break;
 8002066:	e000      	b.n	800206a <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8002068:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f001 f802 	bl	800307c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <HAL_TIM_OC_Start_IT+0x100>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d004      	beq.n	800208c <HAL_TIM_OC_Start_IT+0xb8>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_TIM_OC_Start_IT+0x104>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_TIM_OC_Start_IT+0xbc>
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_TIM_OC_Start_IT+0xbe>
 8002090:	2300      	movs	r3, #0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b06      	cmp	r3, #6
 80020b6:	d007      	beq.n	80020c8 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e01d      	b.n	800212a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f815 	bl	8002132 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f000 fb9a 	bl	8002854 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b0c      	cmp	r3, #12
 8002156:	d841      	bhi.n	80021dc <HAL_TIM_IC_Start_IT+0x94>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <HAL_TIM_IC_Start_IT+0x18>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	08002195 	.word	0x08002195
 8002164:	080021dd 	.word	0x080021dd
 8002168:	080021dd 	.word	0x080021dd
 800216c:	080021dd 	.word	0x080021dd
 8002170:	080021a7 	.word	0x080021a7
 8002174:	080021dd 	.word	0x080021dd
 8002178:	080021dd 	.word	0x080021dd
 800217c:	080021dd 	.word	0x080021dd
 8002180:	080021b9 	.word	0x080021b9
 8002184:	080021dd 	.word	0x080021dd
 8002188:	080021dd 	.word	0x080021dd
 800218c:	080021dd 	.word	0x080021dd
 8002190:	080021cb 	.word	0x080021cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0202 	orr.w	r2, r2, #2
 80021a2:	60da      	str	r2, [r3, #12]
      break;
 80021a4:	e01b      	b.n	80021de <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0204 	orr.w	r2, r2, #4
 80021b4:	60da      	str	r2, [r3, #12]
      break;
 80021b6:	e012      	b.n	80021de <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0208 	orr.w	r2, r2, #8
 80021c6:	60da      	str	r2, [r3, #12]
      break;
 80021c8:	e009      	b.n	80021de <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0210 	orr.w	r2, r2, #16
 80021d8:	60da      	str	r2, [r3, #12]
      break;
 80021da:	e000      	b.n	80021de <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80021dc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2201      	movs	r2, #1
 80021e4:	6839      	ldr	r1, [r7, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 ff48 	bl	800307c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d007      	beq.n	800220e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b02      	cmp	r3, #2
 800222c:	d122      	bne.n	8002274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b02      	cmp	r3, #2
 800223a:	d11b      	bne.n	8002274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0202 	mvn.w	r2, #2
 8002244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fb7a 	bl	8000954 <HAL_TIM_IC_CaptureCallback>
 8002260:	e005      	b.n	800226e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe fc14 	bl	8000a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fadf 	bl	800282c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b04      	cmp	r3, #4
 8002280:	d122      	bne.n	80022c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b04      	cmp	r3, #4
 800228e:	d11b      	bne.n	80022c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0204 	mvn.w	r2, #4
 8002298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fb50 	bl	8000954 <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe fbea 	bl	8000a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fab5 	bl	800282c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d122      	bne.n	800231c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d11b      	bne.n	800231c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0208 	mvn.w	r2, #8
 80022ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe fb26 	bl	8000954 <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fbc0 	bl	8000a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fa8b 	bl	800282c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b10      	cmp	r3, #16
 8002328:	d122      	bne.n	8002370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b10      	cmp	r3, #16
 8002336:	d11b      	bne.n	8002370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0210 	mvn.w	r2, #16
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2208      	movs	r2, #8
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fafc 	bl	8000954 <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fb96 	bl	8000a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fa61 	bl	800282c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10e      	bne.n	800239c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0201 	mvn.w	r2, #1
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fa3e 	bl	8002818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b80      	cmp	r3, #128	; 0x80
 80023a8:	d10e      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	d107      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 ff06 	bl	80031d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	2b40      	cmp	r3, #64	; 0x40
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d107      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa26 	bl	8002840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b20      	cmp	r3, #32
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0220 	mvn.w	r2, #32
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fed0 	bl	80031c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_TIM_OC_ConfigChannel+0x1a>
 800243e:	2302      	movs	r3, #2
 8002440:	e04e      	b.n	80024e0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2202      	movs	r2, #2
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d839      	bhi.n	80024cc <HAL_TIM_OC_ConfigChannel+0xa4>
 8002458:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <HAL_TIM_OC_ConfigChannel+0x38>)
 800245a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245e:	bf00      	nop
 8002460:	08002495 	.word	0x08002495
 8002464:	080024cd 	.word	0x080024cd
 8002468:	080024cd 	.word	0x080024cd
 800246c:	080024cd 	.word	0x080024cd
 8002470:	080024a3 	.word	0x080024a3
 8002474:	080024cd 	.word	0x080024cd
 8002478:	080024cd 	.word	0x080024cd
 800247c:	080024cd 	.word	0x080024cd
 8002480:	080024b1 	.word	0x080024b1
 8002484:	080024cd 	.word	0x080024cd
 8002488:	080024cd 	.word	0x080024cd
 800248c:	080024cd 	.word	0x080024cd
 8002490:	080024bf 	.word	0x080024bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fa7a 	bl	8002994 <TIM_OC1_SetConfig>
      break;
 80024a0:	e015      	b.n	80024ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fae3 	bl	8002a74 <TIM_OC2_SetConfig>
      break;
 80024ae:	e00e      	b.n	80024ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fb52 	bl	8002b60 <TIM_OC3_SetConfig>
      break;
 80024bc:	e007      	b.n	80024ce <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fbbf 	bl	8002c48 <TIM_OC4_SetConfig>
      break;
 80024ca:	e000      	b.n	80024ce <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80024cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_IC_ConfigChannel+0x1a>
 80024fe:	2302      	movs	r3, #2
 8002500:	e08a      	b.n	8002618 <HAL_TIM_IC_ConfigChannel+0x130>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2202      	movs	r2, #2
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d11b      	bne.n	8002550 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f000 fbe4 	bl	8002cf4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 020c 	bic.w	r2, r2, #12
 800253a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6999      	ldr	r1, [r3, #24]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	619a      	str	r2, [r3, #24]
 800254e:	e05a      	b.n	8002606 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b04      	cmp	r3, #4
 8002554:	d11c      	bne.n	8002590 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f000 fc68 	bl	8002e3a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002578:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6999      	ldr	r1, [r3, #24]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	021a      	lsls	r2, r3, #8
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	619a      	str	r2, [r3, #24]
 800258e:	e03a      	b.n	8002606 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b08      	cmp	r3, #8
 8002594:	d11b      	bne.n	80025ce <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f000 fcb5 	bl	8002f14 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 020c 	bic.w	r2, r2, #12
 80025b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69d9      	ldr	r1, [r3, #28]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	61da      	str	r2, [r3, #28]
 80025cc:	e01b      	b.n	8002606 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f000 fcd5 	bl	8002f8c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69d9      	ldr	r1, [r3, #28]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	021a      	lsls	r2, r3, #8
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_TIM_ConfigClockSource+0x18>
 8002634:	2302      	movs	r3, #2
 8002636:	e0a6      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x166>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800265e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d067      	beq.n	8002740 <HAL_TIM_ConfigClockSource+0x120>
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d80b      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x6c>
 8002674:	2b10      	cmp	r3, #16
 8002676:	d073      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x140>
 8002678:	2b10      	cmp	r3, #16
 800267a:	d802      	bhi.n	8002682 <HAL_TIM_ConfigClockSource+0x62>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d06f      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002680:	e078      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002682:	2b20      	cmp	r3, #32
 8002684:	d06c      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x140>
 8002686:	2b30      	cmp	r3, #48	; 0x30
 8002688:	d06a      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800268a:	e073      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800268c:	2b70      	cmp	r3, #112	; 0x70
 800268e:	d00d      	beq.n	80026ac <HAL_TIM_ConfigClockSource+0x8c>
 8002690:	2b70      	cmp	r3, #112	; 0x70
 8002692:	d804      	bhi.n	800269e <HAL_TIM_ConfigClockSource+0x7e>
 8002694:	2b50      	cmp	r3, #80	; 0x50
 8002696:	d033      	beq.n	8002700 <HAL_TIM_ConfigClockSource+0xe0>
 8002698:	2b60      	cmp	r3, #96	; 0x60
 800269a:	d041      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800269c:	e06a      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800269e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a2:	d066      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x152>
 80026a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a8:	d017      	beq.n	80026da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80026aa:	e063      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f000 fcbe 	bl	800303c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	609a      	str	r2, [r3, #8]
      break;
 80026d8:	e04c      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f000 fca7 	bl	800303c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026fc:	609a      	str	r2, [r3, #8]
      break;
 80026fe:	e039      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	461a      	mov	r2, r3
 800270e:	f000 fb65 	bl	8002ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2150      	movs	r1, #80	; 0x50
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fc74 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 800271e:	e029      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	461a      	mov	r2, r3
 800272e:	f000 fbc1 	bl	8002eb4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2160      	movs	r1, #96	; 0x60
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fc64 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 800273e:	e019      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	461a      	mov	r2, r3
 800274e:	f000 fb45 	bl	8002ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2140      	movs	r1, #64	; 0x40
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fc54 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 800275e:	e009      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	4610      	mov	r0, r2
 800276c:	f000 fc4b 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 8002770:	e000      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b0c      	cmp	r3, #12
 80027a2:	d831      	bhi.n	8002808 <HAL_TIM_ReadCapturedValue+0x78>
 80027a4:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80027a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027aa:	bf00      	nop
 80027ac:	080027e1 	.word	0x080027e1
 80027b0:	08002809 	.word	0x08002809
 80027b4:	08002809 	.word	0x08002809
 80027b8:	08002809 	.word	0x08002809
 80027bc:	080027eb 	.word	0x080027eb
 80027c0:	08002809 	.word	0x08002809
 80027c4:	08002809 	.word	0x08002809
 80027c8:	08002809 	.word	0x08002809
 80027cc:	080027f5 	.word	0x080027f5
 80027d0:	08002809 	.word	0x08002809
 80027d4:	08002809 	.word	0x08002809
 80027d8:	08002809 	.word	0x08002809
 80027dc:	080027ff 	.word	0x080027ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	60fb      	str	r3, [r7, #12]

      break;
 80027e8:	e00f      	b.n	800280a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	60fb      	str	r3, [r7, #12]

      break;
 80027f2:	e00a      	b.n	800280a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fa:	60fb      	str	r3, [r7, #12]

      break;
 80027fc:	e005      	b.n	800280a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	60fb      	str	r3, [r7, #12]

      break;
 8002806:	e000      	b.n	800280a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002808:	bf00      	nop
  }

  return tmpreg;
 800280a:	68fb      	ldr	r3, [r7, #12]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a40      	ldr	r2, [pc, #256]	; (8002968 <TIM_Base_SetConfig+0x114>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d013      	beq.n	8002894 <TIM_Base_SetConfig+0x40>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002872:	d00f      	beq.n	8002894 <TIM_Base_SetConfig+0x40>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a3d      	ldr	r2, [pc, #244]	; (800296c <TIM_Base_SetConfig+0x118>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00b      	beq.n	8002894 <TIM_Base_SetConfig+0x40>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a3c      	ldr	r2, [pc, #240]	; (8002970 <TIM_Base_SetConfig+0x11c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <TIM_Base_SetConfig+0x40>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a3b      	ldr	r2, [pc, #236]	; (8002974 <TIM_Base_SetConfig+0x120>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d003      	beq.n	8002894 <TIM_Base_SetConfig+0x40>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a3a      	ldr	r2, [pc, #232]	; (8002978 <TIM_Base_SetConfig+0x124>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d108      	bne.n	80028a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a2f      	ldr	r2, [pc, #188]	; (8002968 <TIM_Base_SetConfig+0x114>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d02b      	beq.n	8002906 <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b4:	d027      	beq.n	8002906 <TIM_Base_SetConfig+0xb2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a2c      	ldr	r2, [pc, #176]	; (800296c <TIM_Base_SetConfig+0x118>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d023      	beq.n	8002906 <TIM_Base_SetConfig+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a2b      	ldr	r2, [pc, #172]	; (8002970 <TIM_Base_SetConfig+0x11c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d01f      	beq.n	8002906 <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a2a      	ldr	r2, [pc, #168]	; (8002974 <TIM_Base_SetConfig+0x120>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01b      	beq.n	8002906 <TIM_Base_SetConfig+0xb2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a29      	ldr	r2, [pc, #164]	; (8002978 <TIM_Base_SetConfig+0x124>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d017      	beq.n	8002906 <TIM_Base_SetConfig+0xb2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a28      	ldr	r2, [pc, #160]	; (800297c <TIM_Base_SetConfig+0x128>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <TIM_Base_SetConfig+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a27      	ldr	r2, [pc, #156]	; (8002980 <TIM_Base_SetConfig+0x12c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00f      	beq.n	8002906 <TIM_Base_SetConfig+0xb2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a26      	ldr	r2, [pc, #152]	; (8002984 <TIM_Base_SetConfig+0x130>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00b      	beq.n	8002906 <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a25      	ldr	r2, [pc, #148]	; (8002988 <TIM_Base_SetConfig+0x134>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d007      	beq.n	8002906 <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a24      	ldr	r2, [pc, #144]	; (800298c <TIM_Base_SetConfig+0x138>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d003      	beq.n	8002906 <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a23      	ldr	r2, [pc, #140]	; (8002990 <TIM_Base_SetConfig+0x13c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d108      	bne.n	8002918 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <TIM_Base_SetConfig+0x114>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d003      	beq.n	800294c <TIM_Base_SetConfig+0xf8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <TIM_Base_SetConfig+0x124>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d103      	bne.n	8002954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	615a      	str	r2, [r3, #20]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40010000 	.word	0x40010000
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800
 8002974:	40000c00 	.word	0x40000c00
 8002978:	40010400 	.word	0x40010400
 800297c:	40014000 	.word	0x40014000
 8002980:	40014400 	.word	0x40014400
 8002984:	40014800 	.word	0x40014800
 8002988:	40001800 	.word	0x40001800
 800298c:	40001c00 	.word	0x40001c00
 8002990:	40002000 	.word	0x40002000

08002994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f023 0201 	bic.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 0302 	bic.w	r3, r3, #2
 80029dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <TIM_OC1_SetConfig+0xd8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d003      	beq.n	80029f8 <TIM_OC1_SetConfig+0x64>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <TIM_OC1_SetConfig+0xdc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10c      	bne.n	8002a12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0308 	bic.w	r3, r3, #8
 80029fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <TIM_OC1_SetConfig+0xd8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <TIM_OC1_SetConfig+0x8e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <TIM_OC1_SetConfig+0xdc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d111      	bne.n	8002a46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	621a      	str	r2, [r3, #32]
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40010400 	.word	0x40010400

08002a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f023 0210 	bic.w	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f023 0320 	bic.w	r3, r3, #32
 8002abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <TIM_OC2_SetConfig+0xe4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <TIM_OC2_SetConfig+0x68>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a21      	ldr	r2, [pc, #132]	; (8002b5c <TIM_OC2_SetConfig+0xe8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d10d      	bne.n	8002af8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <TIM_OC2_SetConfig+0xe4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d003      	beq.n	8002b08 <TIM_OC2_SetConfig+0x94>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <TIM_OC2_SetConfig+0xe8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d113      	bne.n	8002b30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	621a      	str	r2, [r3, #32]
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40010000 	.word	0x40010000
 8002b5c:	40010400 	.word	0x40010400

08002b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <TIM_OC3_SetConfig+0xe0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d003      	beq.n	8002bc6 <TIM_OC3_SetConfig+0x66>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <TIM_OC3_SetConfig+0xe4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10d      	bne.n	8002be2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <TIM_OC3_SetConfig+0xe0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d003      	beq.n	8002bf2 <TIM_OC3_SetConfig+0x92>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <TIM_OC3_SetConfig+0xe4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d113      	bne.n	8002c1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	621a      	str	r2, [r3, #32]
}
 8002c34:	bf00      	nop
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40010000 	.word	0x40010000
 8002c44:	40010400 	.word	0x40010400

08002c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	031b      	lsls	r3, r3, #12
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a12      	ldr	r2, [pc, #72]	; (8002cec <TIM_OC4_SetConfig+0xa4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d003      	beq.n	8002cb0 <TIM_OC4_SetConfig+0x68>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <TIM_OC4_SetConfig+0xa8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d109      	bne.n	8002cc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	621a      	str	r2, [r3, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f023 0201 	bic.w	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <TIM_TI1_SetConfig+0xcc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01b      	beq.n	8002d5a <TIM_TI1_SetConfig+0x66>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d017      	beq.n	8002d5a <TIM_TI1_SetConfig+0x66>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <TIM_TI1_SetConfig+0xd0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <TIM_TI1_SetConfig+0x66>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <TIM_TI1_SetConfig+0xd4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00f      	beq.n	8002d5a <TIM_TI1_SetConfig+0x66>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a23      	ldr	r2, [pc, #140]	; (8002dcc <TIM_TI1_SetConfig+0xd8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00b      	beq.n	8002d5a <TIM_TI1_SetConfig+0x66>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <TIM_TI1_SetConfig+0xdc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <TIM_TI1_SetConfig+0x66>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4a21      	ldr	r2, [pc, #132]	; (8002dd4 <TIM_TI1_SetConfig+0xe0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d003      	beq.n	8002d5a <TIM_TI1_SetConfig+0x66>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <TIM_TI1_SetConfig+0xe4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <TIM_TI1_SetConfig+0x6a>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <TIM_TI1_SetConfig+0x6c>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 0303 	bic.w	r3, r3, #3
 8002d6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e003      	b.n	8002d7e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f023 030a 	bic.w	r3, r3, #10
 8002d98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f003 030a 	and.w	r3, r3, #10
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	621a      	str	r2, [r3, #32]
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40010000 	.word	0x40010000
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40000800 	.word	0x40000800
 8002dcc:	40000c00 	.word	0x40000c00
 8002dd0:	40010400 	.word	0x40010400
 8002dd4:	40014000 	.word	0x40014000
 8002dd8:	40001800 	.word	0x40001800

08002ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f023 0201 	bic.w	r2, r3, #1
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f023 030a 	bic.w	r3, r3, #10
 8002e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	621a      	str	r2, [r3, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b087      	sub	sp, #28
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f023 0210 	bic.w	r2, r3, #16
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	031b      	lsls	r3, r3, #12
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	621a      	str	r2, [r3, #32]
}
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f023 0210 	bic.w	r2, r3, #16
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ede:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	031b      	lsls	r3, r3, #12
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ef0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	621a      	str	r2, [r3, #32]
}
 8002f08:	bf00      	nop
 8002f0a:	371c      	adds	r7, #28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f023 0303 	bic.w	r3, r3, #3
 8002f40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002f64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	621a      	str	r2, [r3, #32]
}
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	031b      	lsls	r3, r3, #12
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002fde:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	031b      	lsls	r3, r3, #12
 8002fe4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	f043 0307 	orr.w	r3, r3, #7
 8003028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003056:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	021a      	lsls	r2, r3, #8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	431a      	orrs	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	609a      	str	r2, [r3, #8]
}
 8003070:	bf00      	nop
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	2201      	movs	r2, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a1a      	ldr	r2, [r3, #32]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	43db      	mvns	r3, r3
 800309e:	401a      	ands	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a1a      	ldr	r2, [r3, #32]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	431a      	orrs	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030dc:	2302      	movs	r3, #2
 80030de:	e05a      	b.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a21      	ldr	r2, [pc, #132]	; (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312c:	d01d      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d018      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1a      	ldr	r2, [pc, #104]	; (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00e      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a15      	ldr	r2, [pc, #84]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d10c      	bne.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	4313      	orrs	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40000c00 	.word	0x40000c00
 80031b4:	40010400 	.word	0x40010400
 80031b8:	40014000 	.word	0x40014000
 80031bc:	40001800 	.word	0x40001800

080031c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e03f      	b.n	800327a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fd fd58 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	; 0x24
 8003218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800322a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f829 	bl	8003284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032c6:	f023 030c 	bic.w	r3, r3, #12
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6812      	ldr	r2, [r2, #0]
 80032ce:	68f9      	ldr	r1, [r7, #12]
 80032d0:	430b      	orrs	r3, r1
 80032d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f2:	f040 818b 	bne.w	800360c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4ac1      	ldr	r2, [pc, #772]	; (8003600 <UART_SetConfig+0x37c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d005      	beq.n	800330c <UART_SetConfig+0x88>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4abf      	ldr	r2, [pc, #764]	; (8003604 <UART_SetConfig+0x380>)
 8003306:	4293      	cmp	r3, r2
 8003308:	f040 80bd 	bne.w	8003486 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800330c:	f7fe f9f4 	bl	80016f8 <HAL_RCC_GetPCLK2Freq>
 8003310:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	461d      	mov	r5, r3
 8003316:	f04f 0600 	mov.w	r6, #0
 800331a:	46a8      	mov	r8, r5
 800331c:	46b1      	mov	r9, r6
 800331e:	eb18 0308 	adds.w	r3, r8, r8
 8003322:	eb49 0409 	adc.w	r4, r9, r9
 8003326:	4698      	mov	r8, r3
 8003328:	46a1      	mov	r9, r4
 800332a:	eb18 0805 	adds.w	r8, r8, r5
 800332e:	eb49 0906 	adc.w	r9, r9, r6
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800333e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003342:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003346:	4688      	mov	r8, r1
 8003348:	4691      	mov	r9, r2
 800334a:	eb18 0005 	adds.w	r0, r8, r5
 800334e:	eb49 0106 	adc.w	r1, r9, r6
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	461d      	mov	r5, r3
 8003358:	f04f 0600 	mov.w	r6, #0
 800335c:	196b      	adds	r3, r5, r5
 800335e:	eb46 0406 	adc.w	r4, r6, r6
 8003362:	461a      	mov	r2, r3
 8003364:	4623      	mov	r3, r4
 8003366:	f7fc ff4d 	bl	8000204 <__aeabi_uldivmod>
 800336a:	4603      	mov	r3, r0
 800336c:	460c      	mov	r4, r1
 800336e:	461a      	mov	r2, r3
 8003370:	4ba5      	ldr	r3, [pc, #660]	; (8003608 <UART_SetConfig+0x384>)
 8003372:	fba3 2302 	umull	r2, r3, r3, r2
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	461d      	mov	r5, r3
 8003380:	f04f 0600 	mov.w	r6, #0
 8003384:	46a9      	mov	r9, r5
 8003386:	46b2      	mov	sl, r6
 8003388:	eb19 0309 	adds.w	r3, r9, r9
 800338c:	eb4a 040a 	adc.w	r4, sl, sl
 8003390:	4699      	mov	r9, r3
 8003392:	46a2      	mov	sl, r4
 8003394:	eb19 0905 	adds.w	r9, r9, r5
 8003398:	eb4a 0a06 	adc.w	sl, sl, r6
 800339c:	f04f 0100 	mov.w	r1, #0
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033b0:	4689      	mov	r9, r1
 80033b2:	4692      	mov	sl, r2
 80033b4:	eb19 0005 	adds.w	r0, r9, r5
 80033b8:	eb4a 0106 	adc.w	r1, sl, r6
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	461d      	mov	r5, r3
 80033c2:	f04f 0600 	mov.w	r6, #0
 80033c6:	196b      	adds	r3, r5, r5
 80033c8:	eb46 0406 	adc.w	r4, r6, r6
 80033cc:	461a      	mov	r2, r3
 80033ce:	4623      	mov	r3, r4
 80033d0:	f7fc ff18 	bl	8000204 <__aeabi_uldivmod>
 80033d4:	4603      	mov	r3, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	461a      	mov	r2, r3
 80033da:	4b8b      	ldr	r3, [pc, #556]	; (8003608 <UART_SetConfig+0x384>)
 80033dc:	fba3 1302 	umull	r1, r3, r3, r2
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	2164      	movs	r1, #100	; 0x64
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	3332      	adds	r3, #50	; 0x32
 80033ee:	4a86      	ldr	r2, [pc, #536]	; (8003608 <UART_SetConfig+0x384>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033fc:	4498      	add	r8, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	461d      	mov	r5, r3
 8003402:	f04f 0600 	mov.w	r6, #0
 8003406:	46a9      	mov	r9, r5
 8003408:	46b2      	mov	sl, r6
 800340a:	eb19 0309 	adds.w	r3, r9, r9
 800340e:	eb4a 040a 	adc.w	r4, sl, sl
 8003412:	4699      	mov	r9, r3
 8003414:	46a2      	mov	sl, r4
 8003416:	eb19 0905 	adds.w	r9, r9, r5
 800341a:	eb4a 0a06 	adc.w	sl, sl, r6
 800341e:	f04f 0100 	mov.w	r1, #0
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800342a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800342e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003432:	4689      	mov	r9, r1
 8003434:	4692      	mov	sl, r2
 8003436:	eb19 0005 	adds.w	r0, r9, r5
 800343a:	eb4a 0106 	adc.w	r1, sl, r6
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	461d      	mov	r5, r3
 8003444:	f04f 0600 	mov.w	r6, #0
 8003448:	196b      	adds	r3, r5, r5
 800344a:	eb46 0406 	adc.w	r4, r6, r6
 800344e:	461a      	mov	r2, r3
 8003450:	4623      	mov	r3, r4
 8003452:	f7fc fed7 	bl	8000204 <__aeabi_uldivmod>
 8003456:	4603      	mov	r3, r0
 8003458:	460c      	mov	r4, r1
 800345a:	461a      	mov	r2, r3
 800345c:	4b6a      	ldr	r3, [pc, #424]	; (8003608 <UART_SetConfig+0x384>)
 800345e:	fba3 1302 	umull	r1, r3, r3, r2
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2164      	movs	r1, #100	; 0x64
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	3332      	adds	r3, #50	; 0x32
 8003470:	4a65      	ldr	r2, [pc, #404]	; (8003608 <UART_SetConfig+0x384>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	f003 0207 	and.w	r2, r3, #7
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4442      	add	r2, r8
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e26f      	b.n	8003966 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003486:	f7fe f923 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 800348a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	461d      	mov	r5, r3
 8003490:	f04f 0600 	mov.w	r6, #0
 8003494:	46a8      	mov	r8, r5
 8003496:	46b1      	mov	r9, r6
 8003498:	eb18 0308 	adds.w	r3, r8, r8
 800349c:	eb49 0409 	adc.w	r4, r9, r9
 80034a0:	4698      	mov	r8, r3
 80034a2:	46a1      	mov	r9, r4
 80034a4:	eb18 0805 	adds.w	r8, r8, r5
 80034a8:	eb49 0906 	adc.w	r9, r9, r6
 80034ac:	f04f 0100 	mov.w	r1, #0
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034c0:	4688      	mov	r8, r1
 80034c2:	4691      	mov	r9, r2
 80034c4:	eb18 0005 	adds.w	r0, r8, r5
 80034c8:	eb49 0106 	adc.w	r1, r9, r6
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	461d      	mov	r5, r3
 80034d2:	f04f 0600 	mov.w	r6, #0
 80034d6:	196b      	adds	r3, r5, r5
 80034d8:	eb46 0406 	adc.w	r4, r6, r6
 80034dc:	461a      	mov	r2, r3
 80034de:	4623      	mov	r3, r4
 80034e0:	f7fc fe90 	bl	8000204 <__aeabi_uldivmod>
 80034e4:	4603      	mov	r3, r0
 80034e6:	460c      	mov	r4, r1
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b47      	ldr	r3, [pc, #284]	; (8003608 <UART_SetConfig+0x384>)
 80034ec:	fba3 2302 	umull	r2, r3, r3, r2
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	461d      	mov	r5, r3
 80034fa:	f04f 0600 	mov.w	r6, #0
 80034fe:	46a9      	mov	r9, r5
 8003500:	46b2      	mov	sl, r6
 8003502:	eb19 0309 	adds.w	r3, r9, r9
 8003506:	eb4a 040a 	adc.w	r4, sl, sl
 800350a:	4699      	mov	r9, r3
 800350c:	46a2      	mov	sl, r4
 800350e:	eb19 0905 	adds.w	r9, r9, r5
 8003512:	eb4a 0a06 	adc.w	sl, sl, r6
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003522:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003526:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800352a:	4689      	mov	r9, r1
 800352c:	4692      	mov	sl, r2
 800352e:	eb19 0005 	adds.w	r0, r9, r5
 8003532:	eb4a 0106 	adc.w	r1, sl, r6
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	461d      	mov	r5, r3
 800353c:	f04f 0600 	mov.w	r6, #0
 8003540:	196b      	adds	r3, r5, r5
 8003542:	eb46 0406 	adc.w	r4, r6, r6
 8003546:	461a      	mov	r2, r3
 8003548:	4623      	mov	r3, r4
 800354a:	f7fc fe5b 	bl	8000204 <__aeabi_uldivmod>
 800354e:	4603      	mov	r3, r0
 8003550:	460c      	mov	r4, r1
 8003552:	461a      	mov	r2, r3
 8003554:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <UART_SetConfig+0x384>)
 8003556:	fba3 1302 	umull	r1, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2164      	movs	r1, #100	; 0x64
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	3332      	adds	r3, #50	; 0x32
 8003568:	4a27      	ldr	r2, [pc, #156]	; (8003608 <UART_SetConfig+0x384>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003576:	4498      	add	r8, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	461d      	mov	r5, r3
 800357c:	f04f 0600 	mov.w	r6, #0
 8003580:	46a9      	mov	r9, r5
 8003582:	46b2      	mov	sl, r6
 8003584:	eb19 0309 	adds.w	r3, r9, r9
 8003588:	eb4a 040a 	adc.w	r4, sl, sl
 800358c:	4699      	mov	r9, r3
 800358e:	46a2      	mov	sl, r4
 8003590:	eb19 0905 	adds.w	r9, r9, r5
 8003594:	eb4a 0a06 	adc.w	sl, sl, r6
 8003598:	f04f 0100 	mov.w	r1, #0
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035ac:	4689      	mov	r9, r1
 80035ae:	4692      	mov	sl, r2
 80035b0:	eb19 0005 	adds.w	r0, r9, r5
 80035b4:	eb4a 0106 	adc.w	r1, sl, r6
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	461d      	mov	r5, r3
 80035be:	f04f 0600 	mov.w	r6, #0
 80035c2:	196b      	adds	r3, r5, r5
 80035c4:	eb46 0406 	adc.w	r4, r6, r6
 80035c8:	461a      	mov	r2, r3
 80035ca:	4623      	mov	r3, r4
 80035cc:	f7fc fe1a 	bl	8000204 <__aeabi_uldivmod>
 80035d0:	4603      	mov	r3, r0
 80035d2:	460c      	mov	r4, r1
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <UART_SetConfig+0x384>)
 80035d8:	fba3 1302 	umull	r1, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	2164      	movs	r1, #100	; 0x64
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	3332      	adds	r3, #50	; 0x32
 80035ea:	4a07      	ldr	r2, [pc, #28]	; (8003608 <UART_SetConfig+0x384>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	f003 0207 	and.w	r2, r3, #7
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4442      	add	r2, r8
 80035fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80035fe:	e1b2      	b.n	8003966 <UART_SetConfig+0x6e2>
 8003600:	40011000 	.word	0x40011000
 8003604:	40011400 	.word	0x40011400
 8003608:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4ad7      	ldr	r2, [pc, #860]	; (8003970 <UART_SetConfig+0x6ec>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d005      	beq.n	8003622 <UART_SetConfig+0x39e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4ad6      	ldr	r2, [pc, #856]	; (8003974 <UART_SetConfig+0x6f0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	f040 80d1 	bne.w	80037c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003622:	f7fe f869 	bl	80016f8 <HAL_RCC_GetPCLK2Freq>
 8003626:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	469a      	mov	sl, r3
 800362c:	f04f 0b00 	mov.w	fp, #0
 8003630:	46d0      	mov	r8, sl
 8003632:	46d9      	mov	r9, fp
 8003634:	eb18 0308 	adds.w	r3, r8, r8
 8003638:	eb49 0409 	adc.w	r4, r9, r9
 800363c:	4698      	mov	r8, r3
 800363e:	46a1      	mov	r9, r4
 8003640:	eb18 080a 	adds.w	r8, r8, sl
 8003644:	eb49 090b 	adc.w	r9, r9, fp
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003654:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003658:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800365c:	4688      	mov	r8, r1
 800365e:	4691      	mov	r9, r2
 8003660:	eb1a 0508 	adds.w	r5, sl, r8
 8003664:	eb4b 0609 	adc.w	r6, fp, r9
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	4619      	mov	r1, r3
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	f04f 0400 	mov.w	r4, #0
 800367a:	0094      	lsls	r4, r2, #2
 800367c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003680:	008b      	lsls	r3, r1, #2
 8003682:	461a      	mov	r2, r3
 8003684:	4623      	mov	r3, r4
 8003686:	4628      	mov	r0, r5
 8003688:	4631      	mov	r1, r6
 800368a:	f7fc fdbb 	bl	8000204 <__aeabi_uldivmod>
 800368e:	4603      	mov	r3, r0
 8003690:	460c      	mov	r4, r1
 8003692:	461a      	mov	r2, r3
 8003694:	4bb8      	ldr	r3, [pc, #736]	; (8003978 <UART_SetConfig+0x6f4>)
 8003696:	fba3 2302 	umull	r2, r3, r3, r2
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	469b      	mov	fp, r3
 80036a4:	f04f 0c00 	mov.w	ip, #0
 80036a8:	46d9      	mov	r9, fp
 80036aa:	46e2      	mov	sl, ip
 80036ac:	eb19 0309 	adds.w	r3, r9, r9
 80036b0:	eb4a 040a 	adc.w	r4, sl, sl
 80036b4:	4699      	mov	r9, r3
 80036b6:	46a2      	mov	sl, r4
 80036b8:	eb19 090b 	adds.w	r9, r9, fp
 80036bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036d4:	4689      	mov	r9, r1
 80036d6:	4692      	mov	sl, r2
 80036d8:	eb1b 0509 	adds.w	r5, fp, r9
 80036dc:	eb4c 060a 	adc.w	r6, ip, sl
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4619      	mov	r1, r3
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	f04f 0400 	mov.w	r4, #0
 80036f2:	0094      	lsls	r4, r2, #2
 80036f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036f8:	008b      	lsls	r3, r1, #2
 80036fa:	461a      	mov	r2, r3
 80036fc:	4623      	mov	r3, r4
 80036fe:	4628      	mov	r0, r5
 8003700:	4631      	mov	r1, r6
 8003702:	f7fc fd7f 	bl	8000204 <__aeabi_uldivmod>
 8003706:	4603      	mov	r3, r0
 8003708:	460c      	mov	r4, r1
 800370a:	461a      	mov	r2, r3
 800370c:	4b9a      	ldr	r3, [pc, #616]	; (8003978 <UART_SetConfig+0x6f4>)
 800370e:	fba3 1302 	umull	r1, r3, r3, r2
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2164      	movs	r1, #100	; 0x64
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	3332      	adds	r3, #50	; 0x32
 8003720:	4a95      	ldr	r2, [pc, #596]	; (8003978 <UART_SetConfig+0x6f4>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800372c:	4498      	add	r8, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	469b      	mov	fp, r3
 8003732:	f04f 0c00 	mov.w	ip, #0
 8003736:	46d9      	mov	r9, fp
 8003738:	46e2      	mov	sl, ip
 800373a:	eb19 0309 	adds.w	r3, r9, r9
 800373e:	eb4a 040a 	adc.w	r4, sl, sl
 8003742:	4699      	mov	r9, r3
 8003744:	46a2      	mov	sl, r4
 8003746:	eb19 090b 	adds.w	r9, r9, fp
 800374a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800375a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800375e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003762:	4689      	mov	r9, r1
 8003764:	4692      	mov	sl, r2
 8003766:	eb1b 0509 	adds.w	r5, fp, r9
 800376a:	eb4c 060a 	adc.w	r6, ip, sl
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4619      	mov	r1, r3
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	f04f 0400 	mov.w	r4, #0
 8003780:	0094      	lsls	r4, r2, #2
 8003782:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003786:	008b      	lsls	r3, r1, #2
 8003788:	461a      	mov	r2, r3
 800378a:	4623      	mov	r3, r4
 800378c:	4628      	mov	r0, r5
 800378e:	4631      	mov	r1, r6
 8003790:	f7fc fd38 	bl	8000204 <__aeabi_uldivmod>
 8003794:	4603      	mov	r3, r0
 8003796:	460c      	mov	r4, r1
 8003798:	461a      	mov	r2, r3
 800379a:	4b77      	ldr	r3, [pc, #476]	; (8003978 <UART_SetConfig+0x6f4>)
 800379c:	fba3 1302 	umull	r1, r3, r3, r2
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	2164      	movs	r1, #100	; 0x64
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	3332      	adds	r3, #50	; 0x32
 80037ae:	4a72      	ldr	r2, [pc, #456]	; (8003978 <UART_SetConfig+0x6f4>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	f003 020f 	and.w	r2, r3, #15
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4442      	add	r2, r8
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	e0d0      	b.n	8003966 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80037c4:	f7fd ff84 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 80037c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	469a      	mov	sl, r3
 80037ce:	f04f 0b00 	mov.w	fp, #0
 80037d2:	46d0      	mov	r8, sl
 80037d4:	46d9      	mov	r9, fp
 80037d6:	eb18 0308 	adds.w	r3, r8, r8
 80037da:	eb49 0409 	adc.w	r4, r9, r9
 80037de:	4698      	mov	r8, r3
 80037e0:	46a1      	mov	r9, r4
 80037e2:	eb18 080a 	adds.w	r8, r8, sl
 80037e6:	eb49 090b 	adc.w	r9, r9, fp
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037fe:	4688      	mov	r8, r1
 8003800:	4691      	mov	r9, r2
 8003802:	eb1a 0508 	adds.w	r5, sl, r8
 8003806:	eb4b 0609 	adc.w	r6, fp, r9
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4619      	mov	r1, r3
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	f04f 0400 	mov.w	r4, #0
 800381c:	0094      	lsls	r4, r2, #2
 800381e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003822:	008b      	lsls	r3, r1, #2
 8003824:	461a      	mov	r2, r3
 8003826:	4623      	mov	r3, r4
 8003828:	4628      	mov	r0, r5
 800382a:	4631      	mov	r1, r6
 800382c:	f7fc fcea 	bl	8000204 <__aeabi_uldivmod>
 8003830:	4603      	mov	r3, r0
 8003832:	460c      	mov	r4, r1
 8003834:	461a      	mov	r2, r3
 8003836:	4b50      	ldr	r3, [pc, #320]	; (8003978 <UART_SetConfig+0x6f4>)
 8003838:	fba3 2302 	umull	r2, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	469b      	mov	fp, r3
 8003846:	f04f 0c00 	mov.w	ip, #0
 800384a:	46d9      	mov	r9, fp
 800384c:	46e2      	mov	sl, ip
 800384e:	eb19 0309 	adds.w	r3, r9, r9
 8003852:	eb4a 040a 	adc.w	r4, sl, sl
 8003856:	4699      	mov	r9, r3
 8003858:	46a2      	mov	sl, r4
 800385a:	eb19 090b 	adds.w	r9, r9, fp
 800385e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800386e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003872:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003876:	4689      	mov	r9, r1
 8003878:	4692      	mov	sl, r2
 800387a:	eb1b 0509 	adds.w	r5, fp, r9
 800387e:	eb4c 060a 	adc.w	r6, ip, sl
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4619      	mov	r1, r3
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	f04f 0400 	mov.w	r4, #0
 8003894:	0094      	lsls	r4, r2, #2
 8003896:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800389a:	008b      	lsls	r3, r1, #2
 800389c:	461a      	mov	r2, r3
 800389e:	4623      	mov	r3, r4
 80038a0:	4628      	mov	r0, r5
 80038a2:	4631      	mov	r1, r6
 80038a4:	f7fc fcae 	bl	8000204 <__aeabi_uldivmod>
 80038a8:	4603      	mov	r3, r0
 80038aa:	460c      	mov	r4, r1
 80038ac:	461a      	mov	r2, r3
 80038ae:	4b32      	ldr	r3, [pc, #200]	; (8003978 <UART_SetConfig+0x6f4>)
 80038b0:	fba3 1302 	umull	r1, r3, r3, r2
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	2164      	movs	r1, #100	; 0x64
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	3332      	adds	r3, #50	; 0x32
 80038c2:	4a2d      	ldr	r2, [pc, #180]	; (8003978 <UART_SetConfig+0x6f4>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ce:	4498      	add	r8, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	469b      	mov	fp, r3
 80038d4:	f04f 0c00 	mov.w	ip, #0
 80038d8:	46d9      	mov	r9, fp
 80038da:	46e2      	mov	sl, ip
 80038dc:	eb19 0309 	adds.w	r3, r9, r9
 80038e0:	eb4a 040a 	adc.w	r4, sl, sl
 80038e4:	4699      	mov	r9, r3
 80038e6:	46a2      	mov	sl, r4
 80038e8:	eb19 090b 	adds.w	r9, r9, fp
 80038ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038f0:	f04f 0100 	mov.w	r1, #0
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003900:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003904:	4689      	mov	r9, r1
 8003906:	4692      	mov	sl, r2
 8003908:	eb1b 0509 	adds.w	r5, fp, r9
 800390c:	eb4c 060a 	adc.w	r6, ip, sl
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4619      	mov	r1, r3
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	f04f 0400 	mov.w	r4, #0
 8003922:	0094      	lsls	r4, r2, #2
 8003924:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003928:	008b      	lsls	r3, r1, #2
 800392a:	461a      	mov	r2, r3
 800392c:	4623      	mov	r3, r4
 800392e:	4628      	mov	r0, r5
 8003930:	4631      	mov	r1, r6
 8003932:	f7fc fc67 	bl	8000204 <__aeabi_uldivmod>
 8003936:	4603      	mov	r3, r0
 8003938:	460c      	mov	r4, r1
 800393a:	461a      	mov	r2, r3
 800393c:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <UART_SetConfig+0x6f4>)
 800393e:	fba3 1302 	umull	r1, r3, r3, r2
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2164      	movs	r1, #100	; 0x64
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	3332      	adds	r3, #50	; 0x32
 8003950:	4a09      	ldr	r2, [pc, #36]	; (8003978 <UART_SetConfig+0x6f4>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	f003 020f 	and.w	r2, r3, #15
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4442      	add	r2, r8
 8003962:	609a      	str	r2, [r3, #8]
}
 8003964:	e7ff      	b.n	8003966 <UART_SetConfig+0x6e2>
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003970:	40011000 	.word	0x40011000
 8003974:	40011400 	.word	0x40011400
 8003978:	51eb851f 	.word	0x51eb851f

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	4e0d      	ldr	r6, [pc, #52]	; (80039b4 <__libc_init_array+0x38>)
 8003980:	4c0d      	ldr	r4, [pc, #52]	; (80039b8 <__libc_init_array+0x3c>)
 8003982:	1ba4      	subs	r4, r4, r6
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	2500      	movs	r5, #0
 8003988:	42a5      	cmp	r5, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	4e0b      	ldr	r6, [pc, #44]	; (80039bc <__libc_init_array+0x40>)
 800398e:	4c0c      	ldr	r4, [pc, #48]	; (80039c0 <__libc_init_array+0x44>)
 8003990:	f000 f820 	bl	80039d4 <_init>
 8003994:	1ba4      	subs	r4, r4, r6
 8003996:	10a4      	asrs	r4, r4, #2
 8003998:	2500      	movs	r5, #0
 800399a:	42a5      	cmp	r5, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039a4:	4798      	blx	r3
 80039a6:	3501      	adds	r5, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039ae:	4798      	blx	r3
 80039b0:	3501      	adds	r5, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	08003a0c 	.word	0x08003a0c
 80039b8:	08003a0c 	.word	0x08003a0c
 80039bc:	08003a0c 	.word	0x08003a0c
 80039c0:	08003a10 	.word	0x08003a10

080039c4 <memset>:
 80039c4:	4402      	add	r2, r0
 80039c6:	4603      	mov	r3, r0
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d100      	bne.n	80039ce <memset+0xa>
 80039cc:	4770      	bx	lr
 80039ce:	f803 1b01 	strb.w	r1, [r3], #1
 80039d2:	e7f9      	b.n	80039c8 <memset+0x4>

080039d4 <_init>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	bf00      	nop
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr

080039e0 <_fini>:
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	bf00      	nop
 80039e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e6:	bc08      	pop	{r3}
 80039e8:	469e      	mov	lr, r3
 80039ea:	4770      	bx	lr
