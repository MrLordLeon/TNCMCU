/*
 * FreqIO.h
 *
 *  Created on: Jul 21, 2020
 *      Author: monke
 *
 *      This file is dedicated to functions for creating and reading frequencies.
 */

#ifndef SRC_FREQIO_H_
#define SRC_FREQIO_H_
#include "main.h"
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include <assert.h>
#include "math.h"

//Needed uController Objects
//****************************************************************************************************************
extern DAC_HandleTypeDef hdac;
extern DMA_HandleTypeDef hdma_dac1;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart2;
//Connectivity
//****************************************************************************************************************
extern char uartData[3000];

//General Program
//****************************************************************************************************************
/*
 * 	Bool used to determine if in TX or RX mode.
 * 	TX = 1
 * 	RX = 0
 *
 */
extern bool mode;

void initProgram(bool modeStart);
void toggleMode();

/*
 * 	Function to be ran at Tim3 interrupt
 */
void Tim3IT();
/*
 * 	Function to be ran at external trigger.
 */
void FreqCounterPinEXTI();

//GENERATING FREQ
//****************************************************************************************************************
#define TIM2_AUTORELOAD_TX	100			//Timer2 period, used to control DAC and generate audio
#define TIM3_AUTORELOAD_TX	831 		//Timer3 period, used to controller baudrate for TX

#define PI 					3.1415926
#define OUT_AMPL			100
//#define OUT_AMPL			505			//Amplitude of outpute wave. 4096 -> 1.65V Peak
//#define OUT_AMPL			4096
#define LOWF_SAMP 			83 			//This is the sample count for the low frequency , as configured maps to 1200Hz
#define HIGHF_SAMP			45			//This is the sample count for the high frequency, as configured maps to 2200Hz
#define FREQ_SAMP			200
uint32_t sine_wave[FREQ_SAMP] = {
	2048,2112,2177,2241,2305,2368,2432,2495,
	2557,2619,2681,2742,2802,2861,2920,2978,
	3035,3091,3145,3199,3252,3303,3353,3402,
	3450,3496,3541,3584,3626,3666,3705,3742,
	3777,3811,3843,3873,3901,3928,3952,3975,
	3996,4015,4032,4047,4060,4071,4080,4087,
	4092,4095,4096,4095,4092,4087,4080,4071,
	4060,4047,4032,4015,3996,3975,3952,3928,
	3901,3873,3843,3811,3777,3742,3705,3666,
	3626,3584,3541,3496,3450,3402,3353,3303,
	3252,3199,3145,3091,3035,2978,2920,2861,
	2802,2742,2681,2619,2557,2495,2432,2368,
	2305,2241,2177,2112,2048,1984,1919,1855,
	1791,1728,1664,1601,1539,1477,1415,1354,
	1294,1235,1176,1118,1061,1005,951,897,
	844,793,743,694,646,600,555,512,
	470,430,391,354,319,285,253,223,
	195,168,144,121,100,81,64,49,
	36,25,16,9,4,1,0,1,
	4,9,16,25,36,49,64,81,
	100,121,144,168,195,223,253,285,
	319,354,391,430,470,512,555,600,
	646,694,743,793,844,897,951,1005,
	1061,1118,1176,1235,1294,1354,1415,1477,
	1539,1601,1664,1728,1791,1855,1919,1984
};

extern bool bitStream[10];

extern uint32_t lowFrequency[2*LOWF_SAMP];		//LUT used to store 2 wavelengths of data for lower frequency
extern uint32_t highFrequency[2*HIGHF_SAMP];	//LUT used to store 2 wavelengths of data for higher frequency

extern bool 	midbit;
extern bool		changeMode;

void edit_sineval(uint32_t *sinArray, int arraySize, int waves, float shiftPercent);
void bitToAudio(bool *bitStream, int arraySize,bool direction);
void generateBitstream();
void initOUTData();

//READING FREQ
//****************************************************************************************************************
#define	SAMP_PER_BAUD		2			//Increase sample rate to detect higher frequencies.
#define TIM2_AUTORELOAD_RX	10000		//Timer2 period, used for determining frequency
#define TIM3_AUTORELOAD_RX	833/SAMP_PER_BAUD//Timer3 period, used to trigger periodBuffer fill,dont touch this one.

#define PCONVERT 		10000000		//f = 1/T, used for converting period to frequency
#define HIGHFREQ 		2200			//Higher freq to detect w/ afsk
#define LOWFREQ			1200			//Lower freq to detect w/ afsk
#define FREQDEV			400				//Max potential deviation in target frequency to detect

#define	BUFFER_SCALE		32			//Scalar for buffer base
#define BIT_BUFF_BASE		16			//Base amount of bits to store
#define RX_BUFFERSIZE		SAMP_PER_BAUD * BIT_BUFF_BASE * BUFFER_SCALE

extern uint32_t periodBuffer[RX_BUFFERSIZE];	//Stores the period values from interrupt
extern uint32_t bitBuffer[RX_BUFFERSIZE];		//Stores bitstream values
extern uint8_t	sampusecount;					//Used to determine old data
extern uint16_t periodSaveCount;				//Used to keep track of index to save period
extern uint16_t trackBit;						//Used to keep track of bits being loaded into bit buffer
extern uint16_t bitSaveCount;					//Used to keep track of bit saved to bit buffer
extern bool		freqSelect;						//Tracks lasts state of output freq for NRZI encoding

/*
 *	Function to convert freq to bitstream:
 *		returns 1 if detect higher freq within threshold
 *		returns 0 if detect lower freq within threshold
 *		return if frequency is outside afsk set range
 */
int pertobit(uint32_t inputPeriod);
/*
 *	Function to take period buffer values and loads the next bit into bit buffer.
 *	Also returns the determined bitvalue
 *	0 	= 1200Hz
 *	1  	= 2200Hz
 *	-1	= Invalid frequency
 */
int loadBit();
/*
 *	Loads an octet at a time.
 *	Returns -1 if an invalid frequency is detected
 *	Returns 0 if the octet is valid and not an ax.25 flag
 *	Returns 1 if the octet is the ax.25 flag
 */
int loadOctet(bool* bufferptr);
/*
 *	Fills the ax.25 buffer with octets excluding the flags
 *	Returns -1 if need to change mode
 *	Returns 1 if the packet was valid frequencies
 */
int streamGet();


#endif /* SRC_FREQIO_H_ */
