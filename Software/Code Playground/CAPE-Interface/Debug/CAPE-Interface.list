
CAPE-Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023f4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080025b8  080025b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002600  08002600  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002608  08002608  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002608  08002608  00012608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  0800261c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  0800261c  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b1f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000141c  00000000  00000000  00026b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000680  00000000  00000000  00027f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c8  00000000  00000000  000285f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000202dc  00000000  00000000  00028bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006155  00000000  00000000  00048e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3af9  00000000  00000000  0004eff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00112aea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001934  00000000  00000000  00112b68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080025a0 	.word	0x080025a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080025a0 	.word	0x080025a0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <TNC_Tx>:
uint16_t last_tnc_count = 0;
uint16_t last_tnc_cmd_len = 0;


int TNC_Tx(uint8_t *message, uint16_t msg_len)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b0ee      	sub	sp, #440	; 0x1b8
 8000508:	af00      	add	r7, sp, #0
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	6018      	str	r0, [r3, #0]
 800050e:	460a      	mov	r2, r1
 8000510:	1cbb      	adds	r3, r7, #2
 8000512:	801a      	strh	r2, [r3, #0]

	uint8_t tnc_msg[400];
	uint16_t current_index = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
	 *
	 */



	uint8_t tnc_header[18] = {0xC0, 0x00, 0xAE, 0x6A, 0xAA, 0x98, 0x40, 0x40, 0x62, 0xAE, 0x6A, 0xAA, 0x98, 0x40, 0x40, 0xF7, 0x03, 0xF0};
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	4a3e      	ldr	r2, [pc, #248]	; (8000618 <TNC_Tx+0x114>)
 8000520:	461c      	mov	r4, r3
 8000522:	4615      	mov	r5, r2
 8000524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000528:	682b      	ldr	r3, [r5, #0]
 800052a:	8023      	strh	r3, [r4, #0]
	uint8_t end_char[1] = {0xC0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	22c0      	movs	r2, #192	; 0xc0
 8000532:	701a      	strb	r2, [r3, #0]



//	NL();
	// perform escaping
	for (uint16_t i = 0; i < msg_len; i ++)
 8000534:	2300      	movs	r3, #0
 8000536:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4
 800053a:	e048      	b.n	80005ce <TNC_Tx+0xca>
	{
		//		TerminalHex(message[i]);
		if (message[i] == 0xC0)
 800053c:	f8b7 31b4 	ldrh.w	r3, [r7, #436]	; 0x1b4
 8000540:	1d3a      	adds	r2, r7, #4
 8000542:	6812      	ldr	r2, [r2, #0]
 8000544:	4413      	add	r3, r2
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2bc0      	cmp	r3, #192	; 0xc0
 800054a:	d111      	bne.n	8000570 <TNC_Tx+0x6c>
		{

			//		TerminalHex(message[i]);
			//		TerminalNum(i);
			//		TerminalWrite(" Escaping FEND...   ");
			tnc_msg[current_index] = 0xDB;
 800054c:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8000550:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000554:	21db      	movs	r1, #219	; 0xdb
 8000556:	54d1      	strb	r1, [r2, r3]
			current_index ++;
 8000558:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 800055c:	3301      	adds	r3, #1
 800055e:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
			tnc_msg[current_index] = 0xDC;
 8000562:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8000566:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800056a:	21dc      	movs	r1, #220	; 0xdc
 800056c:	54d1      	strb	r1, [r2, r3]
 800056e:	e024      	b.n	80005ba <TNC_Tx+0xb6>
		}
		else if (message[i] == 0xDB)
 8000570:	f8b7 31b4 	ldrh.w	r3, [r7, #436]	; 0x1b4
 8000574:	1d3a      	adds	r2, r7, #4
 8000576:	6812      	ldr	r2, [r2, #0]
 8000578:	4413      	add	r3, r2
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2bdb      	cmp	r3, #219	; 0xdb
 800057e:	d111      	bne.n	80005a4 <TNC_Tx+0xa0>
		{
			//		TerminalHex(message[i]);
			//		TerminalNum(i);
			//		TerminalWrite("Escaping FESC...   ");
			tnc_msg[current_index] = 0xDB;
 8000580:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8000584:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000588:	21db      	movs	r1, #219	; 0xdb
 800058a:	54d1      	strb	r1, [r2, r3]
			current_index ++;
 800058c:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8000590:	3301      	adds	r3, #1
 8000592:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
			tnc_msg[current_index] = 0xDD;
 8000596:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 800059a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800059e:	21dd      	movs	r1, #221	; 0xdd
 80005a0:	54d1      	strb	r1, [r2, r3]
 80005a2:	e00a      	b.n	80005ba <TNC_Tx+0xb6>
		}
		else
		{
			tnc_msg[current_index] = message[i];
 80005a4:	f8b7 31b4 	ldrh.w	r3, [r7, #436]	; 0x1b4
 80005a8:	1d3a      	adds	r2, r7, #4
 80005aa:	6812      	ldr	r2, [r2, #0]
 80005ac:	441a      	add	r2, r3
 80005ae:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 80005b2:	7811      	ldrb	r1, [r2, #0]
 80005b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005b8:	54d1      	strb	r1, [r2, r3]

		}
		current_index ++;
 80005ba:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 80005be:	3301      	adds	r3, #1
 80005c0:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
	for (uint16_t i = 0; i < msg_len; i ++)
 80005c4:	f8b7 31b4 	ldrh.w	r3, [r7, #436]	; 0x1b4
 80005c8:	3301      	adds	r3, #1
 80005ca:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4
 80005ce:	1cbb      	adds	r3, r7, #2
 80005d0:	f8b7 21b4 	ldrh.w	r2, [r7, #436]	; 0x1b4
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d3b0      	bcc.n	800053c <TNC_Tx+0x38>
	//
	//	     HAL_UART_Transmit(&huart2, digipeat, 7, 50);
	//
	//	     HAL_UART_Transmit(&huart2, endHeader, 2, 50);

	HAL_UART_Transmit(&huart1, tnc_header, 18, 50);
 80005da:	f107 0110 	add.w	r1, r7, #16
 80005de:	2332      	movs	r3, #50	; 0x32
 80005e0:	2212      	movs	r2, #18
 80005e2:	480e      	ldr	r0, [pc, #56]	; (800061c <TNC_Tx+0x118>)
 80005e4:	f001 fb51 	bl	8001c8a <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, tnc_msg, current_index, 500);
 80005e8:	f8b7 21b6 	ldrh.w	r2, [r7, #438]	; 0x1b6
 80005ec:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80005f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <TNC_Tx+0x118>)
 80005f6:	f001 fb48 	bl	8001c8a <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, end_char, 1, 50);
 80005fa:	f107 010c 	add.w	r1, r7, #12
 80005fe:	2332      	movs	r3, #50	; 0x32
 8000600:	2201      	movs	r2, #1
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <TNC_Tx+0x118>)
 8000604:	f001 fb41 	bl	8001c8a <HAL_UART_Transmit>

	return current_index;
 8000608:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6


}
 800060c:	4618      	mov	r0, r3
 800060e:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8000612:	46bd      	mov	sp, r7
 8000614:	bdb0      	pop	{r4, r5, r7, pc}
 8000616:	bf00      	nop
 8000618:	080025b8 	.word	0x080025b8
 800061c:	2000002c 	.word	0x2000002c

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 faa9 	bl	8000b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f85b 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f91b 	bl	8000868 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000632:	f000 f8ef 	bl	8000814 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000636:	f000 f8c3 	bl	80007c0 <MX_USART1_UART_Init>
//  for (uint8_t i = 0; i < 0xFF; i ++)
//  {
//	  tnc_array[i] = i;
//  }

  int arr_size = 256;
 800063a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063e:	613b      	str	r3, [r7, #16]
  uint8_t tnc_array[arr_size];
 8000640:	693d      	ldr	r5, [r7, #16]
 8000642:	1e6b      	subs	r3, r5, #1
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	462b      	mov	r3, r5
 8000648:	4619      	mov	r1, r3
 800064a:	f04f 0200 	mov.w	r2, #0
 800064e:	f04f 0300 	mov.w	r3, #0
 8000652:	f04f 0400 	mov.w	r4, #0
 8000656:	00d4      	lsls	r4, r2, #3
 8000658:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800065c:	00cb      	lsls	r3, r1, #3
 800065e:	462b      	mov	r3, r5
 8000660:	4619      	mov	r1, r3
 8000662:	f04f 0200 	mov.w	r2, #0
 8000666:	f04f 0300 	mov.w	r3, #0
 800066a:	f04f 0400 	mov.w	r4, #0
 800066e:	00d4      	lsls	r4, r2, #3
 8000670:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000674:	00cb      	lsls	r3, r1, #3
 8000676:	462b      	mov	r3, r5
 8000678:	3307      	adds	r3, #7
 800067a:	08db      	lsrs	r3, r3, #3
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	ebad 0d03 	sub.w	sp, sp, r3
 8000682:	466b      	mov	r3, sp
 8000684:	3300      	adds	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]

  for (int i = 0; i < arr_size; i ++)
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	e009      	b.n	80006a2 <main+0x82>
  {
	  tnc_array[i] = i;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	b2d9      	uxtb	r1, r3
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	4413      	add	r3, r2
 8000698:	460a      	mov	r2, r1
 800069a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < arr_size; i ++)
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	3301      	adds	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	dbf1      	blt.n	800068e <main+0x6e>
  }

  bool oc_running = false;
 80006aa:	2300      	movs	r3, #0
 80006ac:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ((HAL_GetTick() - tnc_tx_timer) > 4000)
 80006ae:	f000 facb 	bl	8000c48 <HAL_GetTick>
 80006b2:	4602      	mov	r2, r0
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <main+0xc0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80006be:	d90a      	bls.n	80006d6 <main+0xb6>
	  {
		  TNC_Tx(tnc_array, sizeof(tnc_array));
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	b2aa      	uxth	r2, r5
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff1c 	bl	8000504 <TNC_Tx>


		  tnc_tx_timer = HAL_GetTick();
 80006cc:	f000 fabc 	bl	8000c48 <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <main+0xc0>)
 80006d4:	601a      	str	r2, [r3, #0]
	  }

	  HAL_Delay(1);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f000 fac2 	bl	8000c60 <HAL_Delay>
	  if ((HAL_GetTick() - tnc_tx_timer) > 4000)
 80006dc:	e7e7      	b.n	80006ae <main+0x8e>
 80006de:	bf00      	nop
 80006e0:	20000028 	.word	0x20000028

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2234      	movs	r2, #52	; 0x34
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 ff4c 	bl	8002590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <SystemClock_Config+0xd4>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a29      	ldr	r2, [pc, #164]	; (80007b8 <SystemClock_Config+0xd4>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <SystemClock_Config+0xd4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	4b24      	ldr	r3, [pc, #144]	; (80007bc <SystemClock_Config+0xd8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000730:	4a22      	ldr	r2, [pc, #136]	; (80007bc <SystemClock_Config+0xd8>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b20      	ldr	r3, [pc, #128]	; (80007bc <SystemClock_Config+0xd8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000758:	2310      	movs	r3, #16
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800075c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000762:	2304      	movs	r3, #4
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4618      	mov	r0, r3
 8000774:	f000 ffe2 	bl	800173c <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800077e:	f000 f8e3 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2302      	movs	r3, #2
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2102      	movs	r1, #2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fd12 	bl	80011c8 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007aa:	f000 f8cd 	bl	8000948 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_USART1_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007cc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80007d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007f8:	f001 f9fa 	bl	8001bf0 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 f8a1 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000002c 	.word	0x2000002c
 8000810:	40011000 	.word	0x40011000

08000814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_USART2_UART_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800084c:	f001 f9d0 	bl	8001bf0 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000856:	f000 f877 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000006c 	.word	0x2000006c
 8000864:	40004400 	.word	0x40004400

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a2c      	ldr	r2, [pc, #176]	; (8000938 <MX_GPIO_Init+0xd0>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b26      	ldr	r3, [pc, #152]	; (8000938 <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a25      	ldr	r2, [pc, #148]	; (8000938 <MX_GPIO_Init+0xd0>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_GPIO_Init+0xd0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <MX_GPIO_Init+0xd0>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <MX_GPIO_Init+0xd0>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2120      	movs	r1, #32
 80008f2:	4812      	ldr	r0, [pc, #72]	; (800093c <MX_GPIO_Init+0xd4>)
 80008f4:	f000 fc4e 	bl	8001194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_GPIO_Init+0xd8>)
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_GPIO_Init+0xdc>)
 800090e:	f000 faaf 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000912:	2320      	movs	r3, #32
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_GPIO_Init+0xd4>)
 800092a:	f000 faa1 	bl	8000e70 <HAL_GPIO_Init>

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40020000 	.word	0x40020000
 8000940:	10210000 	.word	0x10210000
 8000944:	40020800 	.word	0x40020800

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000996:	2007      	movs	r0, #7
 8000998:	f000 fa36 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a32      	ldr	r2, [pc, #200]	; (8000a90 <HAL_UART_MspInit+0xe8>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12d      	bne.n	8000a26 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <HAL_UART_MspInit+0xec>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a30      	ldr	r2, [pc, #192]	; (8000a94 <HAL_UART_MspInit+0xec>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <HAL_UART_MspInit+0xec>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <HAL_UART_MspInit+0xec>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a29      	ldr	r2, [pc, #164]	; (8000a94 <HAL_UART_MspInit+0xec>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <HAL_UART_MspInit+0xec>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_TX_TNC_RX_Pin|ST_RX_TNC_TX_Pin;
 8000a02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a14:	2307      	movs	r3, #7
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	481e      	ldr	r0, [pc, #120]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a20:	f000 fa26 	bl	8000e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a24:	e030      	b.n	8000a88 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <HAL_UART_MspInit+0xf4>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d12b      	bne.n	8000a88 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <HAL_UART_MspInit+0xec>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <HAL_UART_MspInit+0xec>)
 8000a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_UART_MspInit+0xec>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0xec>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <HAL_UART_MspInit+0xec>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_UART_MspInit+0xec>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a68:	230c      	movs	r3, #12
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 8000a84:	f000 f9f4 	bl	8000e70 <HAL_GPIO_Init>
}
 8000a88:	bf00      	nop
 8000a8a:	3730      	adds	r7, #48	; 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40011000 	.word	0x40011000
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f894 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <SystemInit+0x28>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <SystemInit+0x28>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SystemInit+0x28>)
 8000b12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b16:	609a      	str	r2, [r3, #8]
#endif
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b2e:	e003      	b.n	8000b38 <LoopCopyDataInit>

08000b30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b36:	3104      	adds	r1, #4

08000b38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b38:	480b      	ldr	r0, [pc, #44]	; (8000b68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b40:	d3f6      	bcc.n	8000b30 <CopyDataInit>
  ldr  r2, =_sbss
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b44:	e002      	b.n	8000b4c <LoopFillZerobss>

08000b46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b48:	f842 3b04 	str.w	r3, [r2], #4

08000b4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b50:	d3f9      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b52:	f7ff ffd3 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f001 fcf7 	bl	8002548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fd61 	bl	8000620 <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b64:	08002610 	.word	0x08002610
  ldr  r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b6c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b70:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b74:	200000b0 	.word	0x200000b0

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_Init+0x40>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_Init+0x40>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x40>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f92f 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f808 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fed2 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x54>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x58>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f939 	bl	8000e56 <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00e      	b.n	8000c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d80a      	bhi.n	8000c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f90f 	bl	8000e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_InitTick+0x5c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000004 	.word	0x20000004

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	200000ac 	.word	0x200000ac

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200000ac 	.word	0x200000ac

08000c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c68:	f7ff ffee 	bl	8000c48 <HAL_GetTick>
 8000c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c78:	d005      	beq.n	8000c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_Delay+0x40>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c86:	bf00      	nop
 8000c88:	f7ff ffde 	bl	8000c48 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d8f7      	bhi.n	8000c88 <HAL_Delay+0x28>
  {
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00f      	b.n	8000dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <SysTick_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de2:	210f      	movs	r1, #15
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f7ff ff8e 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <SysTick_Config+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SysTick_Config+0x40>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff47 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e30:	f7ff ff5c 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f7ff ff8e 	bl	8000d5c <NVIC_EncodePriority>
 8000e40:	4602      	mov	r2, r0
 8000e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff5d 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ffb0 	bl	8000dc4 <SysTick_Config>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	e165      	b.n	8001158 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	f040 8154 	bne.w	8001152 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d00b      	beq.n	8000eca <HAL_GPIO_Init+0x5a>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d007      	beq.n	8000eca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b12      	cmp	r3, #18
 8000ec8:	d130      	bne.n	8000f2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	091b      	lsrs	r3, r3, #4
 8000f16:	f003 0201 	and.w	r2, r3, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0xfc>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b12      	cmp	r3, #18
 8000f6a:	d123      	bne.n	8000fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	69b9      	ldr	r1, [r7, #24]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0203 	and.w	r2, r3, #3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80ae 	beq.w	8001152 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b5c      	ldr	r3, [pc, #368]	; (800116c <HAL_GPIO_Init+0x2fc>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a5b      	ldr	r2, [pc, #364]	; (800116c <HAL_GPIO_Init+0x2fc>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b59      	ldr	r3, [pc, #356]	; (800116c <HAL_GPIO_Init+0x2fc>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001012:	4a57      	ldr	r2, [pc, #348]	; (8001170 <HAL_GPIO_Init+0x300>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4e      	ldr	r2, [pc, #312]	; (8001174 <HAL_GPIO_Init+0x304>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d025      	beq.n	800108a <HAL_GPIO_Init+0x21a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4d      	ldr	r2, [pc, #308]	; (8001178 <HAL_GPIO_Init+0x308>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01f      	beq.n	8001086 <HAL_GPIO_Init+0x216>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4c      	ldr	r2, [pc, #304]	; (800117c <HAL_GPIO_Init+0x30c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <HAL_GPIO_Init+0x212>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4b      	ldr	r2, [pc, #300]	; (8001180 <HAL_GPIO_Init+0x310>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0x20e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4a      	ldr	r2, [pc, #296]	; (8001184 <HAL_GPIO_Init+0x314>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00d      	beq.n	800107a <HAL_GPIO_Init+0x20a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a49      	ldr	r2, [pc, #292]	; (8001188 <HAL_GPIO_Init+0x318>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x206>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a48      	ldr	r2, [pc, #288]	; (800118c <HAL_GPIO_Init+0x31c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_GPIO_Init+0x202>
 800106e:	2306      	movs	r3, #6
 8001070:	e00c      	b.n	800108c <HAL_GPIO_Init+0x21c>
 8001072:	2307      	movs	r3, #7
 8001074:	e00a      	b.n	800108c <HAL_GPIO_Init+0x21c>
 8001076:	2305      	movs	r3, #5
 8001078:	e008      	b.n	800108c <HAL_GPIO_Init+0x21c>
 800107a:	2304      	movs	r3, #4
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x21c>
 800107e:	2303      	movs	r3, #3
 8001080:	e004      	b.n	800108c <HAL_GPIO_Init+0x21c>
 8001082:	2302      	movs	r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x21c>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x21c>
 800108a:	2300      	movs	r3, #0
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	f002 0203 	and.w	r2, r2, #3
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4093      	lsls	r3, r2
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800109c:	4934      	ldr	r1, [pc, #208]	; (8001170 <HAL_GPIO_Init+0x300>)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <HAL_GPIO_Init+0x320>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ce:	4a30      	ldr	r2, [pc, #192]	; (8001190 <HAL_GPIO_Init+0x320>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <HAL_GPIO_Init+0x320>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f8:	4a25      	ldr	r2, [pc, #148]	; (8001190 <HAL_GPIO_Init+0x320>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <HAL_GPIO_Init+0x320>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001122:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <HAL_GPIO_Init+0x320>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_GPIO_Init+0x320>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800114c:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_GPIO_Init+0x320>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3301      	adds	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	f67f ae96 	bls.w	8000e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001160:	bf00      	nop
 8001162:	3724      	adds	r7, #36	; 0x24
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	40023800 	.word	0x40023800
 8001170:	40013800 	.word	0x40013800
 8001174:	40020000 	.word	0x40020000
 8001178:	40020400 	.word	0x40020400
 800117c:	40020800 	.word	0x40020800
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40021000 	.word	0x40021000
 8001188:	40021400 	.word	0x40021400
 800118c:	40021800 	.word	0x40021800
 8001190:	40013c00 	.word	0x40013c00

08001194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b0:	e003      	b.n	80011ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	041a      	lsls	r2, r3, #16
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	619a      	str	r2, [r3, #24]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0cc      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011dc:	4b68      	ldr	r3, [pc, #416]	; (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 030f 	and.w	r3, r3, #15
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d90c      	bls.n	8001204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b65      	ldr	r3, [pc, #404]	; (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f2:	4b63      	ldr	r3, [pc, #396]	; (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e0b8      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d020      	beq.n	8001252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800121c:	4b59      	ldr	r3, [pc, #356]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4a58      	ldr	r2, [pc, #352]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001226:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001234:	4b53      	ldr	r3, [pc, #332]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4a52      	ldr	r2, [pc, #328]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800123e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001240:	4b50      	ldr	r3, [pc, #320]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	494d      	ldr	r1, [pc, #308]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	4313      	orrs	r3, r2
 8001250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d044      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d107      	bne.n	8001276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b47      	ldr	r3, [pc, #284]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d119      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e07f      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d003      	beq.n	8001286 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001282:	2b03      	cmp	r3, #3
 8001284:	d107      	bne.n	8001296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e06f      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e067      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a6:	4b37      	ldr	r3, [pc, #220]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f023 0203 	bic.w	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4934      	ldr	r1, [pc, #208]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b8:	f7ff fcc6 	bl	8000c48 <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c0:	f7ff fcc2 	bl	8000c48 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e04f      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 020c 	and.w	r2, r3, #12
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d1eb      	bne.n	80012c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012e8:	4b25      	ldr	r3, [pc, #148]	; (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d20c      	bcs.n	8001310 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e032      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	4916      	ldr	r1, [pc, #88]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	4313      	orrs	r3, r2
 800132c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d009      	beq.n	800134e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	490e      	ldr	r1, [pc, #56]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	4313      	orrs	r3, r2
 800134c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800134e:	f000 f855 	bl	80013fc <HAL_RCC_GetSysClockFreq>
 8001352:	4601      	mov	r1, r0
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	fa21 f303 	lsr.w	r3, r1, r3
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_RCC_ClockConfig+0x1c8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fc26 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00
 8001384:	40023800 	.word	0x40023800
 8001388:	080025e8 	.word	0x080025e8
 800138c:	20000000 	.word	0x20000000
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000000 	.word	0x20000000

080013ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013b0:	f7ff fff0 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013b4:	4601      	mov	r1, r0
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	0a9b      	lsrs	r3, r3, #10
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	4a03      	ldr	r2, [pc, #12]	; (80013d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	080025f8 	.word	0x080025f8

080013d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013d8:	f7ff ffdc 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013dc:	4601      	mov	r1, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	0b5b      	lsrs	r3, r3, #13
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ea:	5cd3      	ldrb	r3, [r2, r3]
 80013ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	080025f8 	.word	0x080025f8

080013fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001416:	4bc6      	ldr	r3, [pc, #792]	; (8001730 <HAL_RCC_GetSysClockFreq+0x334>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b0c      	cmp	r3, #12
 8001420:	f200 817e 	bhi.w	8001720 <HAL_RCC_GetSysClockFreq+0x324>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <HAL_RCC_GetSysClockFreq+0x30>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	08001461 	.word	0x08001461
 8001430:	08001721 	.word	0x08001721
 8001434:	08001721 	.word	0x08001721
 8001438:	08001721 	.word	0x08001721
 800143c:	08001467 	.word	0x08001467
 8001440:	08001721 	.word	0x08001721
 8001444:	08001721 	.word	0x08001721
 8001448:	08001721 	.word	0x08001721
 800144c:	0800146d 	.word	0x0800146d
 8001450:	08001721 	.word	0x08001721
 8001454:	08001721 	.word	0x08001721
 8001458:	08001721 	.word	0x08001721
 800145c:	080015c9 	.word	0x080015c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001460:	4bb4      	ldr	r3, [pc, #720]	; (8001734 <HAL_RCC_GetSysClockFreq+0x338>)
 8001462:	613b      	str	r3, [r7, #16]
       break;
 8001464:	e15f      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001466:	4bb4      	ldr	r3, [pc, #720]	; (8001738 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001468:	613b      	str	r3, [r7, #16]
      break;
 800146a:	e15c      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800146c:	4bb0      	ldr	r3, [pc, #704]	; (8001730 <HAL_RCC_GetSysClockFreq+0x334>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001474:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001476:	4bae      	ldr	r3, [pc, #696]	; (8001730 <HAL_RCC_GetSysClockFreq+0x334>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d04a      	beq.n	8001518 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001482:	4bab      	ldr	r3, [pc, #684]	; (8001730 <HAL_RCC_GetSysClockFreq+0x334>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	099b      	lsrs	r3, r3, #6
 8001488:	f04f 0400 	mov.w	r4, #0
 800148c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	ea03 0501 	and.w	r5, r3, r1
 8001498:	ea04 0602 	and.w	r6, r4, r2
 800149c:	4629      	mov	r1, r5
 800149e:	4632      	mov	r2, r6
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	f04f 0400 	mov.w	r4, #0
 80014a8:	0154      	lsls	r4, r2, #5
 80014aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014ae:	014b      	lsls	r3, r1, #5
 80014b0:	4619      	mov	r1, r3
 80014b2:	4622      	mov	r2, r4
 80014b4:	1b49      	subs	r1, r1, r5
 80014b6:	eb62 0206 	sbc.w	r2, r2, r6
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	f04f 0400 	mov.w	r4, #0
 80014c2:	0194      	lsls	r4, r2, #6
 80014c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014c8:	018b      	lsls	r3, r1, #6
 80014ca:	1a5b      	subs	r3, r3, r1
 80014cc:	eb64 0402 	sbc.w	r4, r4, r2
 80014d0:	f04f 0100 	mov.w	r1, #0
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	00e2      	lsls	r2, r4, #3
 80014da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014de:	00d9      	lsls	r1, r3, #3
 80014e0:	460b      	mov	r3, r1
 80014e2:	4614      	mov	r4, r2
 80014e4:	195b      	adds	r3, r3, r5
 80014e6:	eb44 0406 	adc.w	r4, r4, r6
 80014ea:	f04f 0100 	mov.w	r1, #0
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	0262      	lsls	r2, r4, #9
 80014f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80014f8:	0259      	lsls	r1, r3, #9
 80014fa:	460b      	mov	r3, r1
 80014fc:	4614      	mov	r4, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	4621      	mov	r1, r4
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f04f 0400 	mov.w	r4, #0
 8001508:	461a      	mov	r2, r3
 800150a:	4623      	mov	r3, r4
 800150c:	f7fe fe7a 	bl	8000204 <__aeabi_uldivmod>
 8001510:	4603      	mov	r3, r0
 8001512:	460c      	mov	r4, r1
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e049      	b.n	80015ac <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001518:	4b85      	ldr	r3, [pc, #532]	; (8001730 <HAL_RCC_GetSysClockFreq+0x334>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	099b      	lsrs	r3, r3, #6
 800151e:	f04f 0400 	mov.w	r4, #0
 8001522:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	ea03 0501 	and.w	r5, r3, r1
 800152e:	ea04 0602 	and.w	r6, r4, r2
 8001532:	4629      	mov	r1, r5
 8001534:	4632      	mov	r2, r6
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	f04f 0400 	mov.w	r4, #0
 800153e:	0154      	lsls	r4, r2, #5
 8001540:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001544:	014b      	lsls	r3, r1, #5
 8001546:	4619      	mov	r1, r3
 8001548:	4622      	mov	r2, r4
 800154a:	1b49      	subs	r1, r1, r5
 800154c:	eb62 0206 	sbc.w	r2, r2, r6
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	f04f 0400 	mov.w	r4, #0
 8001558:	0194      	lsls	r4, r2, #6
 800155a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800155e:	018b      	lsls	r3, r1, #6
 8001560:	1a5b      	subs	r3, r3, r1
 8001562:	eb64 0402 	sbc.w	r4, r4, r2
 8001566:	f04f 0100 	mov.w	r1, #0
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	00e2      	lsls	r2, r4, #3
 8001570:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001574:	00d9      	lsls	r1, r3, #3
 8001576:	460b      	mov	r3, r1
 8001578:	4614      	mov	r4, r2
 800157a:	195b      	adds	r3, r3, r5
 800157c:	eb44 0406 	adc.w	r4, r4, r6
 8001580:	f04f 0100 	mov.w	r1, #0
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	02a2      	lsls	r2, r4, #10
 800158a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800158e:	0299      	lsls	r1, r3, #10
 8001590:	460b      	mov	r3, r1
 8001592:	4614      	mov	r4, r2
 8001594:	4618      	mov	r0, r3
 8001596:	4621      	mov	r1, r4
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f04f 0400 	mov.w	r4, #0
 800159e:	461a      	mov	r2, r3
 80015a0:	4623      	mov	r3, r4
 80015a2:	f7fe fe2f 	bl	8000204 <__aeabi_uldivmod>
 80015a6:	4603      	mov	r3, r0
 80015a8:	460c      	mov	r4, r1
 80015aa:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015ac:	4b60      	ldr	r3, [pc, #384]	; (8001730 <HAL_RCC_GetSysClockFreq+0x334>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	0c1b      	lsrs	r3, r3, #16
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	3301      	adds	r3, #1
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c4:	613b      	str	r3, [r7, #16]
      break;
 80015c6:	e0ae      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c8:	4b59      	ldr	r3, [pc, #356]	; (8001730 <HAL_RCC_GetSysClockFreq+0x334>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015d0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015d2:	4b57      	ldr	r3, [pc, #348]	; (8001730 <HAL_RCC_GetSysClockFreq+0x334>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d04a      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015de:	4b54      	ldr	r3, [pc, #336]	; (8001730 <HAL_RCC_GetSysClockFreq+0x334>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	099b      	lsrs	r3, r3, #6
 80015e4:	f04f 0400 	mov.w	r4, #0
 80015e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	ea03 0501 	and.w	r5, r3, r1
 80015f4:	ea04 0602 	and.w	r6, r4, r2
 80015f8:	4629      	mov	r1, r5
 80015fa:	4632      	mov	r2, r6
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	f04f 0400 	mov.w	r4, #0
 8001604:	0154      	lsls	r4, r2, #5
 8001606:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800160a:	014b      	lsls	r3, r1, #5
 800160c:	4619      	mov	r1, r3
 800160e:	4622      	mov	r2, r4
 8001610:	1b49      	subs	r1, r1, r5
 8001612:	eb62 0206 	sbc.w	r2, r2, r6
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	f04f 0400 	mov.w	r4, #0
 800161e:	0194      	lsls	r4, r2, #6
 8001620:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001624:	018b      	lsls	r3, r1, #6
 8001626:	1a5b      	subs	r3, r3, r1
 8001628:	eb64 0402 	sbc.w	r4, r4, r2
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	00e2      	lsls	r2, r4, #3
 8001636:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800163a:	00d9      	lsls	r1, r3, #3
 800163c:	460b      	mov	r3, r1
 800163e:	4614      	mov	r4, r2
 8001640:	195b      	adds	r3, r3, r5
 8001642:	eb44 0406 	adc.w	r4, r4, r6
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	0262      	lsls	r2, r4, #9
 8001650:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001654:	0259      	lsls	r1, r3, #9
 8001656:	460b      	mov	r3, r1
 8001658:	4614      	mov	r4, r2
 800165a:	4618      	mov	r0, r3
 800165c:	4621      	mov	r1, r4
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f04f 0400 	mov.w	r4, #0
 8001664:	461a      	mov	r2, r3
 8001666:	4623      	mov	r3, r4
 8001668:	f7fe fdcc 	bl	8000204 <__aeabi_uldivmod>
 800166c:	4603      	mov	r3, r0
 800166e:	460c      	mov	r4, r1
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e049      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001674:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_RCC_GetSysClockFreq+0x334>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	f04f 0400 	mov.w	r4, #0
 800167e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	ea03 0501 	and.w	r5, r3, r1
 800168a:	ea04 0602 	and.w	r6, r4, r2
 800168e:	4629      	mov	r1, r5
 8001690:	4632      	mov	r2, r6
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	f04f 0400 	mov.w	r4, #0
 800169a:	0154      	lsls	r4, r2, #5
 800169c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	4619      	mov	r1, r3
 80016a4:	4622      	mov	r2, r4
 80016a6:	1b49      	subs	r1, r1, r5
 80016a8:	eb62 0206 	sbc.w	r2, r2, r6
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	f04f 0400 	mov.w	r4, #0
 80016b4:	0194      	lsls	r4, r2, #6
 80016b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016ba:	018b      	lsls	r3, r1, #6
 80016bc:	1a5b      	subs	r3, r3, r1
 80016be:	eb64 0402 	sbc.w	r4, r4, r2
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	00e2      	lsls	r2, r4, #3
 80016cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016d0:	00d9      	lsls	r1, r3, #3
 80016d2:	460b      	mov	r3, r1
 80016d4:	4614      	mov	r4, r2
 80016d6:	195b      	adds	r3, r3, r5
 80016d8:	eb44 0406 	adc.w	r4, r4, r6
 80016dc:	f04f 0100 	mov.w	r1, #0
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	02a2      	lsls	r2, r4, #10
 80016e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016ea:	0299      	lsls	r1, r3, #10
 80016ec:	460b      	mov	r3, r1
 80016ee:	4614      	mov	r4, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	4621      	mov	r1, r4
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f04f 0400 	mov.w	r4, #0
 80016fa:	461a      	mov	r2, r3
 80016fc:	4623      	mov	r3, r4
 80016fe:	f7fe fd81 	bl	8000204 <__aeabi_uldivmod>
 8001702:	4603      	mov	r3, r0
 8001704:	460c      	mov	r4, r1
 8001706:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_RCC_GetSysClockFreq+0x334>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	0f1b      	lsrs	r3, r3, #28
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	fbb2 f3f3 	udiv	r3, r2, r3
 800171c:	613b      	str	r3, [r7, #16]
      break;
 800171e:	e002      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <HAL_RCC_GetSysClockFreq+0x338>)
 8001722:	613b      	str	r3, [r7, #16]
      break;
 8001724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001726:	693b      	ldr	r3, [r7, #16]
}
 8001728:	4618      	mov	r0, r3
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	00f42400 	.word	0x00f42400
 8001738:	007a1200 	.word	0x007a1200

0800173c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 8083 	beq.w	800185c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001756:	4b95      	ldr	r3, [pc, #596]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b04      	cmp	r3, #4
 8001760:	d019      	beq.n	8001796 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001762:	4b92      	ldr	r3, [pc, #584]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800176a:	2b08      	cmp	r3, #8
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800176e:	4b8f      	ldr	r3, [pc, #572]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800177a:	d00c      	beq.n	8001796 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177c:	4b8b      	ldr	r3, [pc, #556]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d112      	bne.n	80017ae <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001788:	4b88      	ldr	r3, [pc, #544]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001794:	d10b      	bne.n	80017ae <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001796:	4b85      	ldr	r3, [pc, #532]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d05b      	beq.n	800185a <HAL_RCC_OscConfig+0x11e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d157      	bne.n	800185a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e216      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x8a>
 80017b8:	4b7c      	ldr	r3, [pc, #496]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a7b      	ldr	r2, [pc, #492]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e01d      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0xae>
 80017d0:	4b76      	ldr	r3, [pc, #472]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a75      	ldr	r2, [pc, #468]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a72      	ldr	r2, [pc, #456]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e00b      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
 80017ea:	4b70      	ldr	r3, [pc, #448]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a6f      	ldr	r2, [pc, #444]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b6d      	ldr	r3, [pc, #436]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a6c      	ldr	r2, [pc, #432]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80017fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001800:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d013      	beq.n	8001832 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7ff fa1d 	bl	8000c48 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001812:	f7ff fa19 	bl	8000c48 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b64      	cmp	r3, #100	; 0x64
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1db      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001824:	4b61      	ldr	r3, [pc, #388]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0xd6>
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff fa09 	bl	8000c48 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800183a:	f7ff fa05 	bl	8000c48 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e1c7      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184c:	4b57      	ldr	r3, [pc, #348]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0xfe>
 8001858:	e000      	b.n	800185c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d06f      	beq.n	8001948 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b00      	cmp	r3, #0
 8001872:	d017      	beq.n	80018a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001874:	4b4d      	ldr	r3, [pc, #308]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800187c:	2b08      	cmp	r3, #8
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001880:	4b4a      	ldr	r3, [pc, #296]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00b      	beq.n	80018a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188c:	4b47      	ldr	r3, [pc, #284]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001894:	2b0c      	cmp	r3, #12
 8001896:	d11c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001898:	4b44      	ldr	r3, [pc, #272]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d116      	bne.n	80018d2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a4:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_OscConfig+0x180>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e18f      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4938      	ldr	r1, [pc, #224]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d0:	e03a      	b.n	8001948 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d020      	beq.n	800191c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <HAL_RCC_OscConfig+0x274>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff f9b2 	bl	8000c48 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e8:	f7ff f9ae 	bl	8000c48 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e170      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4925      	ldr	r1, [pc, #148]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
 800191a:	e015      	b.n	8001948 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_RCC_OscConfig+0x274>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff f991 	bl	8000c48 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff f98d 	bl	8000c48 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e14f      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d037      	beq.n	80019c4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d016      	beq.n	800198a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_RCC_OscConfig+0x278>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001962:	f7ff f971 	bl	8000c48 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196a:	f7ff f96d 	bl	8000c48 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e12f      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 800197e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x22e>
 8001988:	e01c      	b.n	80019c4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_RCC_OscConfig+0x278>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7ff f95a 	bl	8000c48 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001996:	e00f      	b.n	80019b8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff f956 	bl	8000c48 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d908      	bls.n	80019b8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e118      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	42470000 	.word	0x42470000
 80019b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	4b8a      	ldr	r3, [pc, #552]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 80019ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1e9      	bne.n	8001998 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 8097 	beq.w	8001b00 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d6:	4b83      	ldr	r3, [pc, #524]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10f      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b7f      	ldr	r3, [pc, #508]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a7e      	ldr	r2, [pc, #504]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b7c      	ldr	r3, [pc, #496]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019fe:	2301      	movs	r3, #1
 8001a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b79      	ldr	r3, [pc, #484]	; (8001be8 <HAL_RCC_OscConfig+0x4ac>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0e:	4b76      	ldr	r3, [pc, #472]	; (8001be8 <HAL_RCC_OscConfig+0x4ac>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a75      	ldr	r2, [pc, #468]	; (8001be8 <HAL_RCC_OscConfig+0x4ac>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f915 	bl	8000c48 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a22:	f7ff f911 	bl	8000c48 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0d3      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	4b6c      	ldr	r3, [pc, #432]	; (8001be8 <HAL_RCC_OscConfig+0x4ac>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x31a>
 8001a48:	4b66      	ldr	r3, [pc, #408]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4c:	4a65      	ldr	r2, [pc, #404]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6713      	str	r3, [r2, #112]	; 0x70
 8001a54:	e01c      	b.n	8001a90 <HAL_RCC_OscConfig+0x354>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x33c>
 8001a5e:	4b61      	ldr	r3, [pc, #388]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a62:	4a60      	ldr	r2, [pc, #384]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6a:	4b5e      	ldr	r3, [pc, #376]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	4a5d      	ldr	r2, [pc, #372]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6713      	str	r3, [r2, #112]	; 0x70
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_OscConfig+0x354>
 8001a78:	4b5a      	ldr	r3, [pc, #360]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	4a59      	ldr	r2, [pc, #356]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	6713      	str	r3, [r2, #112]	; 0x70
 8001a84:	4b57      	ldr	r3, [pc, #348]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	4a56      	ldr	r2, [pc, #344]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001a8a:	f023 0304 	bic.w	r3, r3, #4
 8001a8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d015      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff f8d6 	bl	8000c48 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7ff f8d2 	bl	8000c48 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e092      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab6:	4b4b      	ldr	r3, [pc, #300]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0ee      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x364>
 8001ac2:	e014      	b.n	8001aee <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff f8c0 	bl	8000c48 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001acc:	f7ff f8bc 	bl	8000c48 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e07c      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae2:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ee      	bne.n	8001acc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af4:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	4a3a      	ldr	r2, [pc, #232]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d068      	beq.n	8001bda <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d060      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d145      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1c:	4b33      	ldr	r3, [pc, #204]	; (8001bec <HAL_RCC_OscConfig+0x4b0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff f891 	bl	8000c48 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff f88d 	bl	8000c48 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e04f      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3c:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69da      	ldr	r2, [r3, #28]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	019b      	lsls	r3, r3, #6
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	3b01      	subs	r3, #1
 8001b62:	041b      	lsls	r3, r3, #16
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	061b      	lsls	r3, r3, #24
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	071b      	lsls	r3, r3, #28
 8001b74:	491b      	ldr	r1, [pc, #108]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <HAL_RCC_OscConfig+0x4b0>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff f862 	bl	8000c48 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f85e 	bl	8000c48 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e020      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x44c>
 8001ba6:	e018      	b.n	8001bda <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_RCC_OscConfig+0x4b0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff f84b 	bl	8000c48 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7ff f847 	bl	8000c48 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e009      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_RCC_OscConfig+0x4a8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f0      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x47a>
 8001bd4:	e001      	b.n	8001bda <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40007000 	.word	0x40007000
 8001bec:	42470060 	.word	0x42470060

08001bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e03f      	b.n	8001c82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7fe fec6 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2224      	movs	r2, #36	; 0x24
 8001c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f90b 	bl	8001e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b088      	sub	sp, #32
 8001c8e:	af02      	add	r7, sp, #8
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	f040 8083 	bne.w	8001db2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_UART_Transmit+0x2e>
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e07b      	b.n	8001db4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_UART_Transmit+0x40>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e074      	b.n	8001db4 <HAL_UART_Transmit+0x12a>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2221      	movs	r2, #33	; 0x21
 8001cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ce0:	f7fe ffb2 	bl	8000c48 <HAL_GetTick>
 8001ce4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	88fa      	ldrh	r2, [r7, #6]
 8001cea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	88fa      	ldrh	r2, [r7, #6]
 8001cf0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001cfa:	e042      	b.n	8001d82 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d12:	d122      	bne.n	8001d5a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f84c 	bl	8001dbc <UART_WaitOnFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e042      	b.n	8001db4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d40:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	e017      	b.n	8001d82 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	3301      	adds	r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	e013      	b.n	8001d82 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2200      	movs	r2, #0
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f829 	bl	8001dbc <UART_WaitOnFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e01f      	b.n	8001db4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	60ba      	str	r2, [r7, #8]
 8001d7a:	781a      	ldrb	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1b7      	bne.n	8001cfc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2200      	movs	r2, #0
 8001d94:	2140      	movs	r1, #64	; 0x40
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f810 	bl	8001dbc <UART_WaitOnFlagUntilTimeout>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e006      	b.n	8001db4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001db2:	2302      	movs	r3, #2
  }
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dcc:	e02c      	b.n	8001e28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d028      	beq.n	8001e28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <UART_WaitOnFlagUntilTimeout+0x30>
 8001ddc:	f7fe ff34 	bl	8000c48 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d21d      	bcs.n	8001e28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001dfa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e00f      	b.n	8001e48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	4013      	ands	r3, r2
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d0c3      	beq.n	8001dce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e54:	b085      	sub	sp, #20
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e92:	f023 030c 	bic.w	r3, r3, #12
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ebe:	f040 818b 	bne.w	80021d8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4ac1      	ldr	r2, [pc, #772]	; (80021cc <UART_SetConfig+0x37c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d005      	beq.n	8001ed8 <UART_SetConfig+0x88>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4abf      	ldr	r2, [pc, #764]	; (80021d0 <UART_SetConfig+0x380>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	f040 80bd 	bne.w	8002052 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ed8:	f7ff fa7c 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8001edc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	461d      	mov	r5, r3
 8001ee2:	f04f 0600 	mov.w	r6, #0
 8001ee6:	46a8      	mov	r8, r5
 8001ee8:	46b1      	mov	r9, r6
 8001eea:	eb18 0308 	adds.w	r3, r8, r8
 8001eee:	eb49 0409 	adc.w	r4, r9, r9
 8001ef2:	4698      	mov	r8, r3
 8001ef4:	46a1      	mov	r9, r4
 8001ef6:	eb18 0805 	adds.w	r8, r8, r5
 8001efa:	eb49 0906 	adc.w	r9, r9, r6
 8001efe:	f04f 0100 	mov.w	r1, #0
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f12:	4688      	mov	r8, r1
 8001f14:	4691      	mov	r9, r2
 8001f16:	eb18 0005 	adds.w	r0, r8, r5
 8001f1a:	eb49 0106 	adc.w	r1, r9, r6
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	461d      	mov	r5, r3
 8001f24:	f04f 0600 	mov.w	r6, #0
 8001f28:	196b      	adds	r3, r5, r5
 8001f2a:	eb46 0406 	adc.w	r4, r6, r6
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4623      	mov	r3, r4
 8001f32:	f7fe f967 	bl	8000204 <__aeabi_uldivmod>
 8001f36:	4603      	mov	r3, r0
 8001f38:	460c      	mov	r4, r1
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4ba5      	ldr	r3, [pc, #660]	; (80021d4 <UART_SetConfig+0x384>)
 8001f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	461d      	mov	r5, r3
 8001f4c:	f04f 0600 	mov.w	r6, #0
 8001f50:	46a9      	mov	r9, r5
 8001f52:	46b2      	mov	sl, r6
 8001f54:	eb19 0309 	adds.w	r3, r9, r9
 8001f58:	eb4a 040a 	adc.w	r4, sl, sl
 8001f5c:	4699      	mov	r9, r3
 8001f5e:	46a2      	mov	sl, r4
 8001f60:	eb19 0905 	adds.w	r9, r9, r5
 8001f64:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f7c:	4689      	mov	r9, r1
 8001f7e:	4692      	mov	sl, r2
 8001f80:	eb19 0005 	adds.w	r0, r9, r5
 8001f84:	eb4a 0106 	adc.w	r1, sl, r6
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	461d      	mov	r5, r3
 8001f8e:	f04f 0600 	mov.w	r6, #0
 8001f92:	196b      	adds	r3, r5, r5
 8001f94:	eb46 0406 	adc.w	r4, r6, r6
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4623      	mov	r3, r4
 8001f9c:	f7fe f932 	bl	8000204 <__aeabi_uldivmod>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	460c      	mov	r4, r1
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b8b      	ldr	r3, [pc, #556]	; (80021d4 <UART_SetConfig+0x384>)
 8001fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	2164      	movs	r1, #100	; 0x64
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	3332      	adds	r3, #50	; 0x32
 8001fba:	4a86      	ldr	r2, [pc, #536]	; (80021d4 <UART_SetConfig+0x384>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fc8:	4498      	add	r8, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	461d      	mov	r5, r3
 8001fce:	f04f 0600 	mov.w	r6, #0
 8001fd2:	46a9      	mov	r9, r5
 8001fd4:	46b2      	mov	sl, r6
 8001fd6:	eb19 0309 	adds.w	r3, r9, r9
 8001fda:	eb4a 040a 	adc.w	r4, sl, sl
 8001fde:	4699      	mov	r9, r3
 8001fe0:	46a2      	mov	sl, r4
 8001fe2:	eb19 0905 	adds.w	r9, r9, r5
 8001fe6:	eb4a 0a06 	adc.w	sl, sl, r6
 8001fea:	f04f 0100 	mov.w	r1, #0
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ff6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ffa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ffe:	4689      	mov	r9, r1
 8002000:	4692      	mov	sl, r2
 8002002:	eb19 0005 	adds.w	r0, r9, r5
 8002006:	eb4a 0106 	adc.w	r1, sl, r6
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	461d      	mov	r5, r3
 8002010:	f04f 0600 	mov.w	r6, #0
 8002014:	196b      	adds	r3, r5, r5
 8002016:	eb46 0406 	adc.w	r4, r6, r6
 800201a:	461a      	mov	r2, r3
 800201c:	4623      	mov	r3, r4
 800201e:	f7fe f8f1 	bl	8000204 <__aeabi_uldivmod>
 8002022:	4603      	mov	r3, r0
 8002024:	460c      	mov	r4, r1
 8002026:	461a      	mov	r2, r3
 8002028:	4b6a      	ldr	r3, [pc, #424]	; (80021d4 <UART_SetConfig+0x384>)
 800202a:	fba3 1302 	umull	r1, r3, r3, r2
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	2164      	movs	r1, #100	; 0x64
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	3332      	adds	r3, #50	; 0x32
 800203c:	4a65      	ldr	r2, [pc, #404]	; (80021d4 <UART_SetConfig+0x384>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	f003 0207 	and.w	r2, r3, #7
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4442      	add	r2, r8
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	e26f      	b.n	8002532 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002052:	f7ff f9ab 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8002056:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	461d      	mov	r5, r3
 800205c:	f04f 0600 	mov.w	r6, #0
 8002060:	46a8      	mov	r8, r5
 8002062:	46b1      	mov	r9, r6
 8002064:	eb18 0308 	adds.w	r3, r8, r8
 8002068:	eb49 0409 	adc.w	r4, r9, r9
 800206c:	4698      	mov	r8, r3
 800206e:	46a1      	mov	r9, r4
 8002070:	eb18 0805 	adds.w	r8, r8, r5
 8002074:	eb49 0906 	adc.w	r9, r9, r6
 8002078:	f04f 0100 	mov.w	r1, #0
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002084:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002088:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800208c:	4688      	mov	r8, r1
 800208e:	4691      	mov	r9, r2
 8002090:	eb18 0005 	adds.w	r0, r8, r5
 8002094:	eb49 0106 	adc.w	r1, r9, r6
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	461d      	mov	r5, r3
 800209e:	f04f 0600 	mov.w	r6, #0
 80020a2:	196b      	adds	r3, r5, r5
 80020a4:	eb46 0406 	adc.w	r4, r6, r6
 80020a8:	461a      	mov	r2, r3
 80020aa:	4623      	mov	r3, r4
 80020ac:	f7fe f8aa 	bl	8000204 <__aeabi_uldivmod>
 80020b0:	4603      	mov	r3, r0
 80020b2:	460c      	mov	r4, r1
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <UART_SetConfig+0x384>)
 80020b8:	fba3 2302 	umull	r2, r3, r3, r2
 80020bc:	095b      	lsrs	r3, r3, #5
 80020be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	461d      	mov	r5, r3
 80020c6:	f04f 0600 	mov.w	r6, #0
 80020ca:	46a9      	mov	r9, r5
 80020cc:	46b2      	mov	sl, r6
 80020ce:	eb19 0309 	adds.w	r3, r9, r9
 80020d2:	eb4a 040a 	adc.w	r4, sl, sl
 80020d6:	4699      	mov	r9, r3
 80020d8:	46a2      	mov	sl, r4
 80020da:	eb19 0905 	adds.w	r9, r9, r5
 80020de:	eb4a 0a06 	adc.w	sl, sl, r6
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020f6:	4689      	mov	r9, r1
 80020f8:	4692      	mov	sl, r2
 80020fa:	eb19 0005 	adds.w	r0, r9, r5
 80020fe:	eb4a 0106 	adc.w	r1, sl, r6
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	461d      	mov	r5, r3
 8002108:	f04f 0600 	mov.w	r6, #0
 800210c:	196b      	adds	r3, r5, r5
 800210e:	eb46 0406 	adc.w	r4, r6, r6
 8002112:	461a      	mov	r2, r3
 8002114:	4623      	mov	r3, r4
 8002116:	f7fe f875 	bl	8000204 <__aeabi_uldivmod>
 800211a:	4603      	mov	r3, r0
 800211c:	460c      	mov	r4, r1
 800211e:	461a      	mov	r2, r3
 8002120:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <UART_SetConfig+0x384>)
 8002122:	fba3 1302 	umull	r1, r3, r3, r2
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2164      	movs	r1, #100	; 0x64
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	3332      	adds	r3, #50	; 0x32
 8002134:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <UART_SetConfig+0x384>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002142:	4498      	add	r8, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	461d      	mov	r5, r3
 8002148:	f04f 0600 	mov.w	r6, #0
 800214c:	46a9      	mov	r9, r5
 800214e:	46b2      	mov	sl, r6
 8002150:	eb19 0309 	adds.w	r3, r9, r9
 8002154:	eb4a 040a 	adc.w	r4, sl, sl
 8002158:	4699      	mov	r9, r3
 800215a:	46a2      	mov	sl, r4
 800215c:	eb19 0905 	adds.w	r9, r9, r5
 8002160:	eb4a 0a06 	adc.w	sl, sl, r6
 8002164:	f04f 0100 	mov.w	r1, #0
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002170:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002174:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002178:	4689      	mov	r9, r1
 800217a:	4692      	mov	sl, r2
 800217c:	eb19 0005 	adds.w	r0, r9, r5
 8002180:	eb4a 0106 	adc.w	r1, sl, r6
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	461d      	mov	r5, r3
 800218a:	f04f 0600 	mov.w	r6, #0
 800218e:	196b      	adds	r3, r5, r5
 8002190:	eb46 0406 	adc.w	r4, r6, r6
 8002194:	461a      	mov	r2, r3
 8002196:	4623      	mov	r3, r4
 8002198:	f7fe f834 	bl	8000204 <__aeabi_uldivmod>
 800219c:	4603      	mov	r3, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <UART_SetConfig+0x384>)
 80021a4:	fba3 1302 	umull	r1, r3, r3, r2
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	2164      	movs	r1, #100	; 0x64
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	3332      	adds	r3, #50	; 0x32
 80021b6:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <UART_SetConfig+0x384>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	f003 0207 	and.w	r2, r3, #7
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4442      	add	r2, r8
 80021c8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80021ca:	e1b2      	b.n	8002532 <UART_SetConfig+0x6e2>
 80021cc:	40011000 	.word	0x40011000
 80021d0:	40011400 	.word	0x40011400
 80021d4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4ad7      	ldr	r2, [pc, #860]	; (800253c <UART_SetConfig+0x6ec>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d005      	beq.n	80021ee <UART_SetConfig+0x39e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4ad6      	ldr	r2, [pc, #856]	; (8002540 <UART_SetConfig+0x6f0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	f040 80d1 	bne.w	8002390 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80021ee:	f7ff f8f1 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 80021f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	469a      	mov	sl, r3
 80021f8:	f04f 0b00 	mov.w	fp, #0
 80021fc:	46d0      	mov	r8, sl
 80021fe:	46d9      	mov	r9, fp
 8002200:	eb18 0308 	adds.w	r3, r8, r8
 8002204:	eb49 0409 	adc.w	r4, r9, r9
 8002208:	4698      	mov	r8, r3
 800220a:	46a1      	mov	r9, r4
 800220c:	eb18 080a 	adds.w	r8, r8, sl
 8002210:	eb49 090b 	adc.w	r9, r9, fp
 8002214:	f04f 0100 	mov.w	r1, #0
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002220:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002224:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002228:	4688      	mov	r8, r1
 800222a:	4691      	mov	r9, r2
 800222c:	eb1a 0508 	adds.w	r5, sl, r8
 8002230:	eb4b 0609 	adc.w	r6, fp, r9
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4619      	mov	r1, r3
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	f04f 0400 	mov.w	r4, #0
 8002246:	0094      	lsls	r4, r2, #2
 8002248:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800224c:	008b      	lsls	r3, r1, #2
 800224e:	461a      	mov	r2, r3
 8002250:	4623      	mov	r3, r4
 8002252:	4628      	mov	r0, r5
 8002254:	4631      	mov	r1, r6
 8002256:	f7fd ffd5 	bl	8000204 <__aeabi_uldivmod>
 800225a:	4603      	mov	r3, r0
 800225c:	460c      	mov	r4, r1
 800225e:	461a      	mov	r2, r3
 8002260:	4bb8      	ldr	r3, [pc, #736]	; (8002544 <UART_SetConfig+0x6f4>)
 8002262:	fba3 2302 	umull	r2, r3, r3, r2
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	469b      	mov	fp, r3
 8002270:	f04f 0c00 	mov.w	ip, #0
 8002274:	46d9      	mov	r9, fp
 8002276:	46e2      	mov	sl, ip
 8002278:	eb19 0309 	adds.w	r3, r9, r9
 800227c:	eb4a 040a 	adc.w	r4, sl, sl
 8002280:	4699      	mov	r9, r3
 8002282:	46a2      	mov	sl, r4
 8002284:	eb19 090b 	adds.w	r9, r9, fp
 8002288:	eb4a 0a0c 	adc.w	sl, sl, ip
 800228c:	f04f 0100 	mov.w	r1, #0
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002298:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800229c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022a0:	4689      	mov	r9, r1
 80022a2:	4692      	mov	sl, r2
 80022a4:	eb1b 0509 	adds.w	r5, fp, r9
 80022a8:	eb4c 060a 	adc.w	r6, ip, sl
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	f04f 0400 	mov.w	r4, #0
 80022be:	0094      	lsls	r4, r2, #2
 80022c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022c4:	008b      	lsls	r3, r1, #2
 80022c6:	461a      	mov	r2, r3
 80022c8:	4623      	mov	r3, r4
 80022ca:	4628      	mov	r0, r5
 80022cc:	4631      	mov	r1, r6
 80022ce:	f7fd ff99 	bl	8000204 <__aeabi_uldivmod>
 80022d2:	4603      	mov	r3, r0
 80022d4:	460c      	mov	r4, r1
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b9a      	ldr	r3, [pc, #616]	; (8002544 <UART_SetConfig+0x6f4>)
 80022da:	fba3 1302 	umull	r1, r3, r3, r2
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2164      	movs	r1, #100	; 0x64
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	3332      	adds	r3, #50	; 0x32
 80022ec:	4a95      	ldr	r2, [pc, #596]	; (8002544 <UART_SetConfig+0x6f4>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f8:	4498      	add	r8, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	469b      	mov	fp, r3
 80022fe:	f04f 0c00 	mov.w	ip, #0
 8002302:	46d9      	mov	r9, fp
 8002304:	46e2      	mov	sl, ip
 8002306:	eb19 0309 	adds.w	r3, r9, r9
 800230a:	eb4a 040a 	adc.w	r4, sl, sl
 800230e:	4699      	mov	r9, r3
 8002310:	46a2      	mov	sl, r4
 8002312:	eb19 090b 	adds.w	r9, r9, fp
 8002316:	eb4a 0a0c 	adc.w	sl, sl, ip
 800231a:	f04f 0100 	mov.w	r1, #0
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002326:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800232a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800232e:	4689      	mov	r9, r1
 8002330:	4692      	mov	sl, r2
 8002332:	eb1b 0509 	adds.w	r5, fp, r9
 8002336:	eb4c 060a 	adc.w	r6, ip, sl
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4619      	mov	r1, r3
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	f04f 0400 	mov.w	r4, #0
 800234c:	0094      	lsls	r4, r2, #2
 800234e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002352:	008b      	lsls	r3, r1, #2
 8002354:	461a      	mov	r2, r3
 8002356:	4623      	mov	r3, r4
 8002358:	4628      	mov	r0, r5
 800235a:	4631      	mov	r1, r6
 800235c:	f7fd ff52 	bl	8000204 <__aeabi_uldivmod>
 8002360:	4603      	mov	r3, r0
 8002362:	460c      	mov	r4, r1
 8002364:	461a      	mov	r2, r3
 8002366:	4b77      	ldr	r3, [pc, #476]	; (8002544 <UART_SetConfig+0x6f4>)
 8002368:	fba3 1302 	umull	r1, r3, r3, r2
 800236c:	095b      	lsrs	r3, r3, #5
 800236e:	2164      	movs	r1, #100	; 0x64
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	3332      	adds	r3, #50	; 0x32
 800237a:	4a72      	ldr	r2, [pc, #456]	; (8002544 <UART_SetConfig+0x6f4>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	f003 020f 	and.w	r2, r3, #15
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4442      	add	r2, r8
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	e0d0      	b.n	8002532 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002390:	f7ff f80c 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8002394:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	469a      	mov	sl, r3
 800239a:	f04f 0b00 	mov.w	fp, #0
 800239e:	46d0      	mov	r8, sl
 80023a0:	46d9      	mov	r9, fp
 80023a2:	eb18 0308 	adds.w	r3, r8, r8
 80023a6:	eb49 0409 	adc.w	r4, r9, r9
 80023aa:	4698      	mov	r8, r3
 80023ac:	46a1      	mov	r9, r4
 80023ae:	eb18 080a 	adds.w	r8, r8, sl
 80023b2:	eb49 090b 	adc.w	r9, r9, fp
 80023b6:	f04f 0100 	mov.w	r1, #0
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023ca:	4688      	mov	r8, r1
 80023cc:	4691      	mov	r9, r2
 80023ce:	eb1a 0508 	adds.w	r5, sl, r8
 80023d2:	eb4b 0609 	adc.w	r6, fp, r9
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4619      	mov	r1, r3
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	f04f 0400 	mov.w	r4, #0
 80023e8:	0094      	lsls	r4, r2, #2
 80023ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023ee:	008b      	lsls	r3, r1, #2
 80023f0:	461a      	mov	r2, r3
 80023f2:	4623      	mov	r3, r4
 80023f4:	4628      	mov	r0, r5
 80023f6:	4631      	mov	r1, r6
 80023f8:	f7fd ff04 	bl	8000204 <__aeabi_uldivmod>
 80023fc:	4603      	mov	r3, r0
 80023fe:	460c      	mov	r4, r1
 8002400:	461a      	mov	r2, r3
 8002402:	4b50      	ldr	r3, [pc, #320]	; (8002544 <UART_SetConfig+0x6f4>)
 8002404:	fba3 2302 	umull	r2, r3, r3, r2
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	469b      	mov	fp, r3
 8002412:	f04f 0c00 	mov.w	ip, #0
 8002416:	46d9      	mov	r9, fp
 8002418:	46e2      	mov	sl, ip
 800241a:	eb19 0309 	adds.w	r3, r9, r9
 800241e:	eb4a 040a 	adc.w	r4, sl, sl
 8002422:	4699      	mov	r9, r3
 8002424:	46a2      	mov	sl, r4
 8002426:	eb19 090b 	adds.w	r9, r9, fp
 800242a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800242e:	f04f 0100 	mov.w	r1, #0
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800243a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800243e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002442:	4689      	mov	r9, r1
 8002444:	4692      	mov	sl, r2
 8002446:	eb1b 0509 	adds.w	r5, fp, r9
 800244a:	eb4c 060a 	adc.w	r6, ip, sl
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4619      	mov	r1, r3
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	f04f 0400 	mov.w	r4, #0
 8002460:	0094      	lsls	r4, r2, #2
 8002462:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002466:	008b      	lsls	r3, r1, #2
 8002468:	461a      	mov	r2, r3
 800246a:	4623      	mov	r3, r4
 800246c:	4628      	mov	r0, r5
 800246e:	4631      	mov	r1, r6
 8002470:	f7fd fec8 	bl	8000204 <__aeabi_uldivmod>
 8002474:	4603      	mov	r3, r0
 8002476:	460c      	mov	r4, r1
 8002478:	461a      	mov	r2, r3
 800247a:	4b32      	ldr	r3, [pc, #200]	; (8002544 <UART_SetConfig+0x6f4>)
 800247c:	fba3 1302 	umull	r1, r3, r3, r2
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	2164      	movs	r1, #100	; 0x64
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	3332      	adds	r3, #50	; 0x32
 800248e:	4a2d      	ldr	r2, [pc, #180]	; (8002544 <UART_SetConfig+0x6f4>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800249a:	4498      	add	r8, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	469b      	mov	fp, r3
 80024a0:	f04f 0c00 	mov.w	ip, #0
 80024a4:	46d9      	mov	r9, fp
 80024a6:	46e2      	mov	sl, ip
 80024a8:	eb19 0309 	adds.w	r3, r9, r9
 80024ac:	eb4a 040a 	adc.w	r4, sl, sl
 80024b0:	4699      	mov	r9, r3
 80024b2:	46a2      	mov	sl, r4
 80024b4:	eb19 090b 	adds.w	r9, r9, fp
 80024b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024bc:	f04f 0100 	mov.w	r1, #0
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024d0:	4689      	mov	r9, r1
 80024d2:	4692      	mov	sl, r2
 80024d4:	eb1b 0509 	adds.w	r5, fp, r9
 80024d8:	eb4c 060a 	adc.w	r6, ip, sl
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	f04f 0400 	mov.w	r4, #0
 80024ee:	0094      	lsls	r4, r2, #2
 80024f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024f4:	008b      	lsls	r3, r1, #2
 80024f6:	461a      	mov	r2, r3
 80024f8:	4623      	mov	r3, r4
 80024fa:	4628      	mov	r0, r5
 80024fc:	4631      	mov	r1, r6
 80024fe:	f7fd fe81 	bl	8000204 <__aeabi_uldivmod>
 8002502:	4603      	mov	r3, r0
 8002504:	460c      	mov	r4, r1
 8002506:	461a      	mov	r2, r3
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <UART_SetConfig+0x6f4>)
 800250a:	fba3 1302 	umull	r1, r3, r3, r2
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2164      	movs	r1, #100	; 0x64
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	3332      	adds	r3, #50	; 0x32
 800251c:	4a09      	ldr	r2, [pc, #36]	; (8002544 <UART_SetConfig+0x6f4>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	f003 020f 	and.w	r2, r3, #15
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4442      	add	r2, r8
 800252e:	609a      	str	r2, [r3, #8]
}
 8002530:	e7ff      	b.n	8002532 <UART_SetConfig+0x6e2>
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800253c:	40011000 	.word	0x40011000
 8002540:	40011400 	.word	0x40011400
 8002544:	51eb851f 	.word	0x51eb851f

08002548 <__libc_init_array>:
 8002548:	b570      	push	{r4, r5, r6, lr}
 800254a:	4e0d      	ldr	r6, [pc, #52]	; (8002580 <__libc_init_array+0x38>)
 800254c:	4c0d      	ldr	r4, [pc, #52]	; (8002584 <__libc_init_array+0x3c>)
 800254e:	1ba4      	subs	r4, r4, r6
 8002550:	10a4      	asrs	r4, r4, #2
 8002552:	2500      	movs	r5, #0
 8002554:	42a5      	cmp	r5, r4
 8002556:	d109      	bne.n	800256c <__libc_init_array+0x24>
 8002558:	4e0b      	ldr	r6, [pc, #44]	; (8002588 <__libc_init_array+0x40>)
 800255a:	4c0c      	ldr	r4, [pc, #48]	; (800258c <__libc_init_array+0x44>)
 800255c:	f000 f820 	bl	80025a0 <_init>
 8002560:	1ba4      	subs	r4, r4, r6
 8002562:	10a4      	asrs	r4, r4, #2
 8002564:	2500      	movs	r5, #0
 8002566:	42a5      	cmp	r5, r4
 8002568:	d105      	bne.n	8002576 <__libc_init_array+0x2e>
 800256a:	bd70      	pop	{r4, r5, r6, pc}
 800256c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002570:	4798      	blx	r3
 8002572:	3501      	adds	r5, #1
 8002574:	e7ee      	b.n	8002554 <__libc_init_array+0xc>
 8002576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800257a:	4798      	blx	r3
 800257c:	3501      	adds	r5, #1
 800257e:	e7f2      	b.n	8002566 <__libc_init_array+0x1e>
 8002580:	08002608 	.word	0x08002608
 8002584:	08002608 	.word	0x08002608
 8002588:	08002608 	.word	0x08002608
 800258c:	0800260c 	.word	0x0800260c

08002590 <memset>:
 8002590:	4402      	add	r2, r0
 8002592:	4603      	mov	r3, r0
 8002594:	4293      	cmp	r3, r2
 8002596:	d100      	bne.n	800259a <memset+0xa>
 8002598:	4770      	bx	lr
 800259a:	f803 1b01 	strb.w	r1, [r3], #1
 800259e:	e7f9      	b.n	8002594 <memset+0x4>

080025a0 <_init>:
 80025a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a2:	bf00      	nop
 80025a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a6:	bc08      	pop	{r3}
 80025a8:	469e      	mov	lr, r3
 80025aa:	4770      	bx	lr

080025ac <_fini>:
 80025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ae:	bf00      	nop
 80025b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b2:	bc08      	pop	{r3}
 80025b4:	469e      	mov	lr, r3
 80025b6:	4770      	bx	lr
