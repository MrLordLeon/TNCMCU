
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  08007c68  08007c68  00017c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008400  08008400  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008400  08008400  00018400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008408  08008408  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008408  08008408  00018408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800840c  0800840c  0001840c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d30  20000078  08008488  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004da8  08008488  00024da8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011320  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024ed  00000000  00000000  000313c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb0  00000000  00000000  000338b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  00034768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e83  00000000  00000000  00035518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000baee  00000000  00000000  0005839b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d266a  00000000  00000000  00063e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001364f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000446c  00000000  00000000  00136570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c4c 	.word	0x08007c4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08007c4c 	.word	0x08007c4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b972 	b.w	8000ef8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	4688      	mov	r8, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14b      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	d967      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0720 	rsb	r7, r2, #32
 8000c4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c52:	4095      	lsls	r5, r2
 8000c54:	ea47 0803 	orr.w	r8, r7, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c64:	fa1f fc85 	uxth.w	ip, r5
 8000c68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c70:	fb07 f10c 	mul.w	r1, r7, ip
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18eb      	adds	r3, r5, r3
 8000c7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7e:	f080 811b 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8118 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000c88:	3f02      	subs	r7, #2
 8000c8a:	442b      	add	r3, r5
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca0:	45a4      	cmp	ip, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	192c      	adds	r4, r5, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	442c      	add	r4, r5
 8000cb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cbc:	eba4 040c 	sub.w	r4, r4, ip
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	b11e      	cbz	r6, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xbe>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80eb 	beq.w	8000eb2 <__udivmoddi4+0x286>
 8000cdc:	2700      	movs	r7, #0
 8000cde:	e9c6 0100 	strd	r0, r1, [r6]
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f783 	clz	r7, r3
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d147      	bne.n	8000d82 <__udivmoddi4+0x156>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd0>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80fa 	bhi.w	8000ef0 <__udivmoddi4+0x2c4>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	4698      	mov	r8, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xe8>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 808f 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1e:	1b49      	subs	r1, r1, r5
 8000d20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d24:	fa1f f885 	uxth.w	r8, r5
 8000d28:	2701      	movs	r7, #1
 8000d2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb08 f10c 	mul.w	r1, r8, ip
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d40:	18eb      	adds	r3, r5, r3
 8000d42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	f200 80cd 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d4e:	4684      	mov	ip, r0
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	b2a3      	uxth	r3, r4
 8000d54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d60:	fb08 f800 	mul.w	r8, r8, r0
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x14c>
 8000d68:	192c      	adds	r4, r5, r4
 8000d6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x14a>
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	f200 80b6 	bhi.w	8000ee2 <__udivmoddi4+0x2b6>
 8000d76:	4618      	mov	r0, r3
 8000d78:	eba4 0408 	sub.w	r4, r4, r8
 8000d7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d80:	e79f      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d82:	f1c7 0c20 	rsb	ip, r7, #32
 8000d86:	40bb      	lsls	r3, r7
 8000d88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d90:	fa01 f407 	lsl.w	r4, r1, r7
 8000d94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000da0:	4325      	orrs	r5, r4
 8000da2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da6:	0c2c      	lsrs	r4, r5, #16
 8000da8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dac:	fa1f fa8e 	uxth.w	sl, lr
 8000db0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db4:	fb09 f40a 	mul.w	r4, r9, sl
 8000db8:	429c      	cmp	r4, r3
 8000dba:	fa02 f207 	lsl.w	r2, r2, r7
 8000dbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	f080 8087 	bcs.w	8000ede <__udivmoddi4+0x2b2>
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	f240 8084 	bls.w	8000ede <__udivmoddi4+0x2b2>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4473      	add	r3, lr
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	b2ad      	uxth	r5, r5
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000df0:	45a2      	cmp	sl, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1e 0404 	adds.w	r4, lr, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfc:	d26b      	bcs.n	8000ed6 <__udivmoddi4+0x2aa>
 8000dfe:	45a2      	cmp	sl, r4
 8000e00:	d969      	bls.n	8000ed6 <__udivmoddi4+0x2aa>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4474      	add	r4, lr
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	eba4 040a 	sub.w	r4, r4, sl
 8000e12:	454c      	cmp	r4, r9
 8000e14:	46c2      	mov	sl, r8
 8000e16:	464b      	mov	r3, r9
 8000e18:	d354      	bcc.n	8000ec4 <__udivmoddi4+0x298>
 8000e1a:	d051      	beq.n	8000ec0 <__udivmoddi4+0x294>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d069      	beq.n	8000ef4 <__udivmoddi4+0x2c8>
 8000e20:	ebb1 050a 	subs.w	r5, r1, sl
 8000e24:	eb64 0403 	sbc.w	r4, r4, r3
 8000e28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e2c:	40fd      	lsrs	r5, r7
 8000e2e:	40fc      	lsrs	r4, r7
 8000e30:	ea4c 0505 	orr.w	r5, ip, r5
 8000e34:	e9c6 5400 	strd	r5, r4, [r6]
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e747      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f703 	lsr.w	r7, r0, r3
 8000e44:	4095      	lsls	r5, r2
 8000e46:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e52:	4338      	orrs	r0, r7
 8000e54:	0c01      	lsrs	r1, r0, #16
 8000e56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e5a:	fa1f f885 	uxth.w	r8, r5
 8000e5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb07 f308 	mul.w	r3, r7, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x256>
 8000e72:	1869      	adds	r1, r5, r1
 8000e74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e78:	d22f      	bcs.n	8000eda <__udivmoddi4+0x2ae>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d92d      	bls.n	8000eda <__udivmoddi4+0x2ae>
 8000e7e:	3f02      	subs	r7, #2
 8000e80:	4429      	add	r1, r5
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	b281      	uxth	r1, r0
 8000e86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb00 f308 	mul.w	r3, r0, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x27e>
 8000e9a:	1869      	adds	r1, r5, r1
 8000e9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ea0:	d217      	bcs.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d915      	bls.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4429      	add	r1, r5
 8000eaa:	1ac9      	subs	r1, r1, r3
 8000eac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eb0:	e73b      	b.n	8000d2a <__udivmoddi4+0xfe>
 8000eb2:	4637      	mov	r7, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e709      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb8:	4607      	mov	r7, r0
 8000eba:	e6e7      	b.n	8000c8c <__udivmoddi4+0x60>
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ec0:	4541      	cmp	r1, r8
 8000ec2:	d2ab      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ecc:	3801      	subs	r0, #1
 8000ece:	4613      	mov	r3, r2
 8000ed0:	e7a4      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	e7e9      	b.n	8000eaa <__udivmoddi4+0x27e>
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	e795      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000eda:	4667      	mov	r7, ip
 8000edc:	e7d1      	b.n	8000e82 <__udivmoddi4+0x256>
 8000ede:	4681      	mov	r9, r0
 8000ee0:	e77c      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	442c      	add	r4, r5
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0x14c>
 8000ee8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eec:	442b      	add	r3, r5
 8000eee:	e72f      	b.n	8000d50 <__udivmoddi4+0x124>
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	e708      	b.n	8000d06 <__udivmoddi4+0xda>
 8000ef4:	4637      	mov	r7, r6
 8000ef6:	e6e9      	b.n	8000ccc <__udivmoddi4+0xa0>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	80fb      	strh	r3, [r7, #6]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	717b      	strb	r3, [r7, #5]
    int temp;

    sprintf(uartData, "\nSelector              = %d",select_8_16);
 8000f0c:	797b      	ldrb	r3, [r7, #5]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4950      	ldr	r1, [pc, #320]	; (8001054 <conv_HEX_to_BIN+0x158>)
 8000f12:	4851      	ldr	r0, [pc, #324]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000f14:	f005 fa8c 	bl	8006430 <siprintf>
    HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f18:	484f      	ldr	r0, [pc, #316]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000f1a:	f7ff f979 	bl	8000210 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	230a      	movs	r3, #10
 8000f24:	494c      	ldr	r1, [pc, #304]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000f26:	484d      	ldr	r0, [pc, #308]	; (800105c <conv_HEX_to_BIN+0x160>)
 8000f28:	f004 fb59 	bl	80055de <HAL_UART_Transmit>

    sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	494b      	ldr	r1, [pc, #300]	; (8001060 <conv_HEX_to_BIN+0x164>)
 8000f32:	4849      	ldr	r0, [pc, #292]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000f34:	f005 fa7c 	bl	8006430 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f38:	4847      	ldr	r0, [pc, #284]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000f3a:	f7ff f969 	bl	8000210 <strlen>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	230a      	movs	r3, #10
 8000f44:	4944      	ldr	r1, [pc, #272]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000f46:	4845      	ldr	r0, [pc, #276]	; (800105c <conv_HEX_to_BIN+0x160>)
 8000f48:	f004 fb49 	bl	80055de <HAL_UART_Transmit>

    if(select_8_16){
 8000f4c:	797b      	ldrb	r3, [r7, #5]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d01f      	beq.n	8000f92 <conv_HEX_to_BIN+0x96>
		for(int i = 0; i < 8; i++){
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e018      	b.n	8000f8a <conv_HEX_to_BIN+0x8e>
			temp = hex_byte_in >> i;
 8000f58:	88fa      	ldrh	r2, [r7, #6]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa42 f303 	asr.w	r3, r2, r3
 8000f60:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	bfb8      	it	lt
 8000f6c:	425b      	neglt	r3, r3
 8000f6e:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	bf14      	ite	ne
 8000f7c:	2201      	movne	r2, #1
 8000f7e:	2200      	moveq	r2, #0
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b07      	cmp	r3, #7
 8000f8e:	dde3      	ble.n	8000f58 <conv_HEX_to_BIN+0x5c>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000f90:	e05c      	b.n	800104c <conv_HEX_to_BIN+0x150>
	   sprintf(uartData, "\nByte value            = %x\nBinary value[LSB:MSB] =",hex_byte_in);
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4933      	ldr	r1, [pc, #204]	; (8001064 <conv_HEX_to_BIN+0x168>)
 8000f98:	482f      	ldr	r0, [pc, #188]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000f9a:	f005 fa49 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f9e:	482e      	ldr	r0, [pc, #184]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000fa0:	f7ff f936 	bl	8000210 <strlen>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	230a      	movs	r3, #10
 8000faa:	492b      	ldr	r1, [pc, #172]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000fac:	482b      	ldr	r0, [pc, #172]	; (800105c <conv_HEX_to_BIN+0x160>)
 8000fae:	f004 fb16 	bl	80055de <HAL_UART_Transmit>
		for(int i = 0; i < 16; i++){
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	e036      	b.n	8001026 <conv_HEX_to_BIN+0x12a>
			temp = hex_byte_in >> i;
 8000fb8:	88fa      	ldrh	r2, [r7, #6]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	fa42 f303 	asr.w	r3, r2, r3
 8000fc0:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " b=%d ",temp);
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4928      	ldr	r1, [pc, #160]	; (8001068 <conv_HEX_to_BIN+0x16c>)
 8000fc6:	4824      	ldr	r0, [pc, #144]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000fc8:	f005 fa32 	bl	8006430 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fcc:	4822      	ldr	r0, [pc, #136]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000fce:	f7ff f91f 	bl	8000210 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	491f      	ldr	r1, [pc, #124]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000fda:	4820      	ldr	r0, [pc, #128]	; (800105c <conv_HEX_to_BIN+0x160>)
 8000fdc:	f004 faff 	bl	80055de <HAL_UART_Transmit>
			temp = temp%2;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	bfb8      	it	lt
 8000fea:	425b      	neglt	r3, r3
 8000fec:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " a=%d ",temp);
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	491e      	ldr	r1, [pc, #120]	; (800106c <conv_HEX_to_BIN+0x170>)
 8000ff2:	4819      	ldr	r0, [pc, #100]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000ff4:	f005 fa1c 	bl	8006430 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ff8:	4817      	ldr	r0, [pc, #92]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8000ffa:	f7ff f909 	bl	8000210 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	230a      	movs	r3, #10
 8001004:	4914      	ldr	r1, [pc, #80]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8001006:	4815      	ldr	r0, [pc, #84]	; (800105c <conv_HEX_to_BIN+0x160>)
 8001008:	f004 fae9 	bl	80055de <HAL_UART_Transmit>
			*(bin_byte_out+i) = temp;
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	2a00      	cmp	r2, #0
 8001016:	bf14      	ite	ne
 8001018:	2201      	movne	r2, #1
 800101a:	2200      	moveq	r2, #0
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	3301      	adds	r3, #1
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	ddc5      	ble.n	8000fb8 <conv_HEX_to_BIN+0xbc>
		sprintf(uartData, "\n ");
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <conv_HEX_to_BIN+0x174>)
 8001030:	8811      	ldrh	r1, [r2, #0]
 8001032:	7892      	ldrb	r2, [r2, #2]
 8001034:	8019      	strh	r1, [r3, #0]
 8001036:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001038:	4807      	ldr	r0, [pc, #28]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 800103a:	f7ff f8e9 	bl	8000210 <strlen>
 800103e:	4603      	mov	r3, r0
 8001040:	b29a      	uxth	r2, r3
 8001042:	230a      	movs	r3, #10
 8001044:	4904      	ldr	r1, [pc, #16]	; (8001058 <conv_HEX_to_BIN+0x15c>)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <conv_HEX_to_BIN+0x160>)
 8001048:	f004 fac9 	bl	80055de <HAL_UART_Transmit>
}
 800104c:	bf00      	nop
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	08007c68 	.word	0x08007c68
 8001058:	20001f3c 	.word	0x20001f3c
 800105c:	20003d60 	.word	0x20003d60
 8001060:	08007c84 	.word	0x08007c84
 8001064:	08007cb8 	.word	0x08007cb8
 8001068:	08007cec 	.word	0x08007cec
 800106c:	08007cf4 	.word	0x08007cf4
 8001070:	08007cfc 	.word	0x08007cfc

08001074 <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8001078:	2201      	movs	r2, #1
 800107a:	4909      	ldr	r1, [pc, #36]	; (80010a0 <init_AX25+0x2c>)
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <init_AX25+0x30>)
 800107e:	f004 fb47 	bl	8005710 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <init_AX25+0x34>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <init_AX25+0x34>)
 800108a:	2200      	movs	r2, #0
 800108c:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <init_AX25+0x34>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <init_AX25+0x34>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20001418 	.word	0x20001418
 80010a4:	20003d60 	.word	0x20003d60
 80010a8:	2000140c 	.word	0x2000140c

080010ac <tx_rx>:

void tx_rx() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	if (changeMode) {
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <tx_rx+0x6c>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <tx_rx+0x18>
		changeMode = 0;
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <tx_rx+0x6c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
		toggleMode();
 80010c0:	f001 f890 	bl	80021e4 <toggleMode>
	}

	if (mode) {
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <tx_rx+0x70>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <tx_rx+0x26>
		receiving_KISS();
 80010cc:	f000 fd86 	bl	8001bdc <receiving_KISS>

			streamGet();
		}
		HAL_Delay(1000);
	}
}
 80010d0:	e01d      	b.n	800110e <tx_rx+0x62>
		for(int i = 0;i<10;i++){
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	e013      	b.n	8001100 <tx_rx+0x54>
			sprintf(uartData, "Running streamGet() %d time\r\n",i);
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4911      	ldr	r1, [pc, #68]	; (8001120 <tx_rx+0x74>)
 80010dc:	4811      	ldr	r0, [pc, #68]	; (8001124 <tx_rx+0x78>)
 80010de:	f005 f9a7 	bl	8006430 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010e2:	4810      	ldr	r0, [pc, #64]	; (8001124 <tx_rx+0x78>)
 80010e4:	f7ff f894 	bl	8000210 <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	230a      	movs	r3, #10
 80010ee:	490d      	ldr	r1, [pc, #52]	; (8001124 <tx_rx+0x78>)
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <tx_rx+0x7c>)
 80010f2:	f004 fa74 	bl	80055de <HAL_UART_Transmit>
			streamGet();
 80010f6:	f001 fb4b 	bl	8002790 <streamGet>
		for(int i = 0;i<10;i++){
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3301      	adds	r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b09      	cmp	r3, #9
 8001104:	dde8      	ble.n	80010d8 <tx_rx+0x2c>
		HAL_Delay(1000);
 8001106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110a:	f002 f965 	bl	80033d8 <HAL_Delay>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000099 	.word	0x20000099
 800111c:	20003d08 	.word	0x20003d08
 8001120:	08007d00 	.word	0x08007d00
 8001124:	20001f3c 	.word	0x20001f3c
 8001128:	20003d60 	.word	0x20003d60

0800112c <print_AX25>:
	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET); //stop transmitting

	sprintf(uartData, "Ending AFSK transmission\n");
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
void print_AX25(){
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	b08d      	sub	sp, #52	; 0x34
 8001130:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001132:	4b96      	ldr	r3, [pc, #600]	; (800138c <print_AX25+0x260>)
 8001134:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800113c:	330c      	adds	r3, #12
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 8001142:	4b93      	ldr	r3, [pc, #588]	; (8001390 <print_AX25+0x264>)
 8001144:	4a93      	ldr	r2, [pc, #588]	; (8001394 <print_AX25+0x268>)
 8001146:	4614      	mov	r4, r2
 8001148:	469c      	mov	ip, r3
 800114a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800114e:	4665      	mov	r5, ip
 8001150:	4626      	mov	r6, r4
 8001152:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001154:	6028      	str	r0, [r5, #0]
 8001156:	6069      	str	r1, [r5, #4]
 8001158:	60aa      	str	r2, [r5, #8]
 800115a:	60eb      	str	r3, [r5, #12]
 800115c:	3410      	adds	r4, #16
 800115e:	f10c 0c10 	add.w	ip, ip, #16
 8001162:	4574      	cmp	r4, lr
 8001164:	d1f3      	bne.n	800114e <print_AX25+0x22>
 8001166:	4663      	mov	r3, ip
 8001168:	4622      	mov	r2, r4
 800116a:	6810      	ldr	r0, [r2, #0]
 800116c:	6018      	str	r0, [r3, #0]
 800116e:	8891      	ldrh	r1, [r2, #4]
 8001170:	7992      	ldrb	r2, [r2, #6]
 8001172:	8099      	strh	r1, [r3, #4]
 8001174:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001176:	4886      	ldr	r0, [pc, #536]	; (8001390 <print_AX25+0x264>)
 8001178:	f7ff f84a 	bl	8000210 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	230a      	movs	r3, #10
 8001182:	4983      	ldr	r1, [pc, #524]	; (8001390 <print_AX25+0x264>)
 8001184:	4884      	ldr	r0, [pc, #528]	; (8001398 <print_AX25+0x26c>)
 8001186:	f004 fa2a 	bl	80055de <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->address) + address_len - 1;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001190:	3310      	adds	r3, #16
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	336f      	adds	r3, #111	; 0x6f
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
 800119c:	e041      	b.n	8001222 <print_AX25+0xf6>
		sprintf(uartData, "Address Field %d =",i+1);
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	3301      	adds	r3, #1
 80011a2:	461a      	mov	r2, r3
 80011a4:	497d      	ldr	r1, [pc, #500]	; (800139c <print_AX25+0x270>)
 80011a6:	487a      	ldr	r0, [pc, #488]	; (8001390 <print_AX25+0x264>)
 80011a8:	f005 f942 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011ac:	4878      	ldr	r0, [pc, #480]	; (8001390 <print_AX25+0x264>)
 80011ae:	f7ff f82f 	bl	8000210 <strlen>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	230a      	movs	r3, #10
 80011b8:	4975      	ldr	r1, [pc, #468]	; (8001390 <print_AX25+0x264>)
 80011ba:	4877      	ldr	r0, [pc, #476]	; (8001398 <print_AX25+0x26c>)
 80011bc:	f004 fa0f 	bl	80055de <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
 80011c4:	e016      	b.n	80011f4 <print_AX25+0xc8>
			sprintf(uartData, " %d ",*(curr_mem-j));
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	425b      	negs	r3, r3
 80011ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4973      	ldr	r1, [pc, #460]	; (80013a0 <print_AX25+0x274>)
 80011d4:	486e      	ldr	r0, [pc, #440]	; (8001390 <print_AX25+0x264>)
 80011d6:	f005 f92b 	bl	8006430 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011da:	486d      	ldr	r0, [pc, #436]	; (8001390 <print_AX25+0x264>)
 80011dc:	f7ff f818 	bl	8000210 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	230a      	movs	r3, #10
 80011e6:	496a      	ldr	r1, [pc, #424]	; (8001390 <print_AX25+0x264>)
 80011e8:	486b      	ldr	r0, [pc, #428]	; (8001398 <print_AX25+0x26c>)
 80011ea:	f004 f9f8 	bl	80055de <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	3301      	adds	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	2b07      	cmp	r3, #7
 80011f8:	dde5      	ble.n	80011c6 <print_AX25+0x9a>
		}
		curr_mem -= 8;
 80011fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fc:	3b08      	subs	r3, #8
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8001200:	4a63      	ldr	r2, [pc, #396]	; (8001390 <print_AX25+0x264>)
 8001202:	4b68      	ldr	r3, [pc, #416]	; (80013a4 <print_AX25+0x278>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001208:	4861      	ldr	r0, [pc, #388]	; (8001390 <print_AX25+0x264>)
 800120a:	f7ff f801 	bl	8000210 <strlen>
 800120e:	4603      	mov	r3, r0
 8001210:	b29a      	uxth	r2, r3
 8001212:	230a      	movs	r3, #10
 8001214:	495e      	ldr	r1, [pc, #376]	; (8001390 <print_AX25+0x264>)
 8001216:	4860      	ldr	r0, [pc, #384]	; (8001398 <print_AX25+0x26c>)
 8001218:	f004 f9e1 	bl	80055de <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	3301      	adds	r3, #1
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
 8001222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001224:	2b0d      	cmp	r3, #13
 8001226:	ddba      	ble.n	800119e <print_AX25+0x72>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800122e:	3314      	adds	r3, #20
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8001234:	4a56      	ldr	r2, [pc, #344]	; (8001390 <print_AX25+0x264>)
 8001236:	4b5c      	ldr	r3, [pc, #368]	; (80013a8 <print_AX25+0x27c>)
 8001238:	4615      	mov	r5, r2
 800123a:	461c      	mov	r4, r3
 800123c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800123e:	6028      	str	r0, [r5, #0]
 8001240:	6069      	str	r1, [r5, #4]
 8001242:	60aa      	str	r2, [r5, #8]
 8001244:	60eb      	str	r3, [r5, #12]
 8001246:	8823      	ldrh	r3, [r4, #0]
 8001248:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800124a:	4851      	ldr	r0, [pc, #324]	; (8001390 <print_AX25+0x264>)
 800124c:	f7fe ffe0 	bl	8000210 <strlen>
 8001250:	4603      	mov	r3, r0
 8001252:	b29a      	uxth	r2, r3
 8001254:	230a      	movs	r3, #10
 8001256:	494e      	ldr	r1, [pc, #312]	; (8001390 <print_AX25+0x264>)
 8001258:	484f      	ldr	r0, [pc, #316]	; (8001398 <print_AX25+0x26c>)
 800125a:	f004 f9c0 	bl	80055de <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	e017      	b.n	8001294 <print_AX25+0x168>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	494b      	ldr	r1, [pc, #300]	; (80013a0 <print_AX25+0x274>)
 8001274:	4846      	ldr	r0, [pc, #280]	; (8001390 <print_AX25+0x264>)
 8001276:	f005 f8db 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800127a:	4845      	ldr	r0, [pc, #276]	; (8001390 <print_AX25+0x264>)
 800127c:	f7fe ffc8 	bl	8000210 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	b29a      	uxth	r2, r3
 8001284:	230a      	movs	r3, #10
 8001286:	4942      	ldr	r1, [pc, #264]	; (8001390 <print_AX25+0x264>)
 8001288:	4843      	ldr	r0, [pc, #268]	; (8001398 <print_AX25+0x26c>)
 800128a:	f004 f9a8 	bl	80055de <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	3301      	adds	r3, #1
 8001292:	623b      	str	r3, [r7, #32]
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	2b07      	cmp	r3, #7
 8001298:	dde4      	ble.n	8001264 <print_AX25+0x138>
	}
	sprintf(uartData, "\n");
 800129a:	4a3d      	ldr	r2, [pc, #244]	; (8001390 <print_AX25+0x264>)
 800129c:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <print_AX25+0x278>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012a2:	483b      	ldr	r0, [pc, #236]	; (8001390 <print_AX25+0x264>)
 80012a4:	f7fe ffb4 	bl	8000210 <strlen>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	230a      	movs	r3, #10
 80012ae:	4938      	ldr	r1, [pc, #224]	; (8001390 <print_AX25+0x264>)
 80012b0:	4839      	ldr	r0, [pc, #228]	; (8001398 <print_AX25+0x26c>)
 80012b2:	f004 f994 	bl	80055de <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80012bc:	3318      	adds	r3, #24
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 80012c2:	4a33      	ldr	r2, [pc, #204]	; (8001390 <print_AX25+0x264>)
 80012c4:	4b39      	ldr	r3, [pc, #228]	; (80013ac <print_AX25+0x280>)
 80012c6:	4615      	mov	r5, r2
 80012c8:	461c      	mov	r4, r3
 80012ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012cc:	6028      	str	r0, [r5, #0]
 80012ce:	6069      	str	r1, [r5, #4]
 80012d0:	60aa      	str	r2, [r5, #8]
 80012d2:	60eb      	str	r3, [r5, #12]
 80012d4:	8823      	ldrh	r3, [r4, #0]
 80012d6:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012d8:	482d      	ldr	r0, [pc, #180]	; (8001390 <print_AX25+0x264>)
 80012da:	f7fe ff99 	bl	8000210 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	230a      	movs	r3, #10
 80012e4:	492a      	ldr	r1, [pc, #168]	; (8001390 <print_AX25+0x264>)
 80012e6:	482c      	ldr	r0, [pc, #176]	; (8001398 <print_AX25+0x26c>)
 80012e8:	f004 f979 	bl	80055de <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	e017      	b.n	8001322 <print_AX25+0x1f6>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f1c3 0307 	rsb	r3, r3, #7
 80012f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	4927      	ldr	r1, [pc, #156]	; (80013a0 <print_AX25+0x274>)
 8001302:	4823      	ldr	r0, [pc, #140]	; (8001390 <print_AX25+0x264>)
 8001304:	f005 f894 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001308:	4821      	ldr	r0, [pc, #132]	; (8001390 <print_AX25+0x264>)
 800130a:	f7fe ff81 	bl	8000210 <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	230a      	movs	r3, #10
 8001314:	491e      	ldr	r1, [pc, #120]	; (8001390 <print_AX25+0x264>)
 8001316:	4820      	ldr	r0, [pc, #128]	; (8001398 <print_AX25+0x26c>)
 8001318:	f004 f961 	bl	80055de <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	3301      	adds	r3, #1
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	2b07      	cmp	r3, #7
 8001326:	dde4      	ble.n	80012f2 <print_AX25+0x1c6>
	}
	sprintf(uartData, "\n");
 8001328:	4a19      	ldr	r2, [pc, #100]	; (8001390 <print_AX25+0x264>)
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <print_AX25+0x278>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001330:	4817      	ldr	r0, [pc, #92]	; (8001390 <print_AX25+0x264>)
 8001332:	f7fe ff6d 	bl	8000210 <strlen>
 8001336:	4603      	mov	r3, r0
 8001338:	b29a      	uxth	r2, r3
 800133a:	230a      	movs	r3, #10
 800133c:	4914      	ldr	r1, [pc, #80]	; (8001390 <print_AX25+0x264>)
 800133e:	4816      	ldr	r0, [pc, #88]	; (8001398 <print_AX25+0x26c>)
 8001340:	f004 f94d 	bl	80055de <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800134a:	331c      	adds	r3, #28
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3b01      	subs	r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	e056      	b.n	8001410 <print_AX25+0x2e4>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	3301      	adds	r3, #1
 8001366:	461a      	mov	r2, r3
 8001368:	4911      	ldr	r1, [pc, #68]	; (80013b0 <print_AX25+0x284>)
 800136a:	4809      	ldr	r0, [pc, #36]	; (8001390 <print_AX25+0x264>)
 800136c:	f005 f860 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <print_AX25+0x264>)
 8001372:	f7fe ff4d 	bl	8000210 <strlen>
 8001376:	4603      	mov	r3, r0
 8001378:	b29a      	uxth	r2, r3
 800137a:	230a      	movs	r3, #10
 800137c:	4904      	ldr	r1, [pc, #16]	; (8001390 <print_AX25+0x264>)
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <print_AX25+0x26c>)
 8001380:	f004 f92d 	bl	80055de <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	e02b      	b.n	80013e2 <print_AX25+0x2b6>
 800138a:	bf00      	nop
 800138c:	200000b0 	.word	0x200000b0
 8001390:	20001f3c 	.word	0x20001f3c
 8001394:	08007d5c 	.word	0x08007d5c
 8001398:	20003d60 	.word	0x20003d60
 800139c:	08007d94 	.word	0x08007d94
 80013a0:	08007da8 	.word	0x08007da8
 80013a4:	08007db0 	.word	0x08007db0
 80013a8:	08007db4 	.word	0x08007db4
 80013ac:	08007dc8 	.word	0x08007dc8
 80013b0:	08007ddc 	.word	0x08007ddc
			sprintf(uartData, " %d ",*(curr_mem-j));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	425b      	negs	r3, r3
 80013b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4943      	ldr	r1, [pc, #268]	; (80014d0 <print_AX25+0x3a4>)
 80013c2:	4844      	ldr	r0, [pc, #272]	; (80014d4 <print_AX25+0x3a8>)
 80013c4:	f005 f834 	bl	8006430 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013c8:	4842      	ldr	r0, [pc, #264]	; (80014d4 <print_AX25+0x3a8>)
 80013ca:	f7fe ff21 	bl	8000210 <strlen>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	230a      	movs	r3, #10
 80013d4:	493f      	ldr	r1, [pc, #252]	; (80014d4 <print_AX25+0x3a8>)
 80013d6:	4840      	ldr	r0, [pc, #256]	; (80014d8 <print_AX25+0x3ac>)
 80013d8:	f004 f901 	bl	80055de <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2b07      	cmp	r3, #7
 80013e6:	dde5      	ble.n	80013b4 <print_AX25+0x288>
		}
		curr_mem -= 8;
 80013e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ea:	3b08      	subs	r3, #8
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80013ee:	4a39      	ldr	r2, [pc, #228]	; (80014d4 <print_AX25+0x3a8>)
 80013f0:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <print_AX25+0x3b0>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013f6:	4837      	ldr	r0, [pc, #220]	; (80014d4 <print_AX25+0x3a8>)
 80013f8:	f7fe ff0a 	bl	8000210 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	230a      	movs	r3, #10
 8001402:	4934      	ldr	r1, [pc, #208]	; (80014d4 <print_AX25+0x3a8>)
 8001404:	4834      	ldr	r0, [pc, #208]	; (80014d8 <print_AX25+0x3ac>)
 8001406:	f004 f8ea 	bl	80055de <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	3301      	adds	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	da00      	bge.n	800141e <print_AX25+0x2f2>
 800141c:	3307      	adds	r3, #7
 800141e:	10db      	asrs	r3, r3, #3
 8001420:	3b01      	subs	r3, #1
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	429a      	cmp	r2, r3
 8001426:	db9c      	blt.n	8001362 <print_AX25+0x236>
	}

	curr_mem = (local_packet->FCS) + 8;
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800142e:	3304      	adds	r3, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3308      	adds	r3, #8
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(FCS_len/8);i++){
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	e042      	b.n	80014c2 <print_AX25+0x396>
		sprintf(uartData, "FCS Field %d     =",i+1)	;
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	3301      	adds	r3, #1
 8001440:	461a      	mov	r2, r3
 8001442:	4927      	ldr	r1, [pc, #156]	; (80014e0 <print_AX25+0x3b4>)
 8001444:	4823      	ldr	r0, [pc, #140]	; (80014d4 <print_AX25+0x3a8>)
 8001446:	f004 fff3 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800144a:	4822      	ldr	r0, [pc, #136]	; (80014d4 <print_AX25+0x3a8>)
 800144c:	f7fe fee0 	bl	8000210 <strlen>
 8001450:	4603      	mov	r3, r0
 8001452:	b29a      	uxth	r2, r3
 8001454:	230a      	movs	r3, #10
 8001456:	491f      	ldr	r1, [pc, #124]	; (80014d4 <print_AX25+0x3a8>)
 8001458:	481f      	ldr	r0, [pc, #124]	; (80014d8 <print_AX25+0x3ac>)
 800145a:	f004 f8c0 	bl	80055de <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	e017      	b.n	8001494 <print_AX25+0x368>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f1c3 0307 	rsb	r3, r3, #7
 800146a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4917      	ldr	r1, [pc, #92]	; (80014d0 <print_AX25+0x3a4>)
 8001474:	4817      	ldr	r0, [pc, #92]	; (80014d4 <print_AX25+0x3a8>)
 8001476:	f004 ffdb 	bl	8006430 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800147a:	4816      	ldr	r0, [pc, #88]	; (80014d4 <print_AX25+0x3a8>)
 800147c:	f7fe fec8 	bl	8000210 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	b29a      	uxth	r2, r3
 8001484:	230a      	movs	r3, #10
 8001486:	4913      	ldr	r1, [pc, #76]	; (80014d4 <print_AX25+0x3a8>)
 8001488:	4813      	ldr	r0, [pc, #76]	; (80014d8 <print_AX25+0x3ac>)
 800148a:	f004 f8a8 	bl	80055de <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3301      	adds	r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b07      	cmp	r3, #7
 8001498:	dde4      	ble.n	8001464 <print_AX25+0x338>
		}
		curr_mem -= 8;
 800149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149c:	3b08      	subs	r3, #8
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <print_AX25+0x3a8>)
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <print_AX25+0x3b0>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <print_AX25+0x3a8>)
 80014aa:	f7fe feb1 	bl	8000210 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	230a      	movs	r3, #10
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <print_AX25+0x3a8>)
 80014b6:	4808      	ldr	r0, [pc, #32]	; (80014d8 <print_AX25+0x3ac>)
 80014b8:	f004 f891 	bl	80055de <HAL_UART_Transmit>
	for(int i = 0;i<(FCS_len/8);i++){
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	3301      	adds	r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	ddb9      	ble.n	800143c <print_AX25+0x310>
	}
}
 80014c8:	bf00      	nop
 80014ca:	3734      	adds	r7, #52	; 0x34
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d0:	08007da8 	.word	0x08007da8
 80014d4:	20001f3c 	.word	0x20001f3c
 80014d8:	20003d60 	.word	0x20003d60
 80014dc:	08007db0 	.word	0x08007db0
 80014e0:	08007df0 	.word	0x08007df0

080014e4 <print_KISS>:
	struct UART_INPUT* local_UART_packet = &global_packet;

	HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}

void print_KISS(){
 80014e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e6:	b08d      	sub	sp, #52	; 0x34
 80014e8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80014ea:	4baf      	ldr	r3, [pc, #700]	; (80017a8 <print_KISS+0x2c4>)
 80014ec:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80014f4:	330c      	adds	r3, #12
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 80014fa:	4bac      	ldr	r3, [pc, #688]	; (80017ac <print_KISS+0x2c8>)
 80014fc:	4aac      	ldr	r2, [pc, #688]	; (80017b0 <print_KISS+0x2cc>)
 80014fe:	4614      	mov	r4, r2
 8001500:	469c      	mov	ip, r3
 8001502:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001506:	4665      	mov	r5, ip
 8001508:	4626      	mov	r6, r4
 800150a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800150c:	6028      	str	r0, [r5, #0]
 800150e:	6069      	str	r1, [r5, #4]
 8001510:	60aa      	str	r2, [r5, #8]
 8001512:	60eb      	str	r3, [r5, #12]
 8001514:	3410      	adds	r4, #16
 8001516:	f10c 0c10 	add.w	ip, ip, #16
 800151a:	4574      	cmp	r4, lr
 800151c:	d1f3      	bne.n	8001506 <print_KISS+0x22>
 800151e:	4663      	mov	r3, ip
 8001520:	4622      	mov	r2, r4
 8001522:	6810      	ldr	r0, [r2, #0]
 8001524:	6018      	str	r0, [r3, #0]
 8001526:	8891      	ldrh	r1, [r2, #4]
 8001528:	7992      	ldrb	r2, [r2, #6]
 800152a:	8099      	strh	r1, [r3, #4]
 800152c:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800152e:	489f      	ldr	r0, [pc, #636]	; (80017ac <print_KISS+0x2c8>)
 8001530:	f7fe fe6e 	bl	8000210 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	b29a      	uxth	r2, r3
 8001538:	230a      	movs	r3, #10
 800153a:	499c      	ldr	r1, [pc, #624]	; (80017ac <print_KISS+0x2c8>)
 800153c:	489d      	ldr	r0, [pc, #628]	; (80017b4 <print_KISS+0x2d0>)
 800153e:	f004 f84e 	bl	80055de <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address + address_len + 16 - 1);//start at the flag start
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001548:	3310      	adds	r3, #16
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	337f      	adds	r3, #127	; 0x7f
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 8001550:	4a96      	ldr	r2, [pc, #600]	; (80017ac <print_KISS+0x2c8>)
 8001552:	4b99      	ldr	r3, [pc, #612]	; (80017b8 <print_KISS+0x2d4>)
 8001554:	4615      	mov	r5, r2
 8001556:	461c      	mov	r4, r3
 8001558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800155a:	6028      	str	r0, [r5, #0]
 800155c:	6069      	str	r1, [r5, #4]
 800155e:	60aa      	str	r2, [r5, #8]
 8001560:	60eb      	str	r3, [r5, #12]
 8001562:	8823      	ldrh	r3, [r4, #0]
 8001564:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001566:	4891      	ldr	r0, [pc, #580]	; (80017ac <print_KISS+0x2c8>)
 8001568:	f7fe fe52 	bl	8000210 <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	b29a      	uxth	r2, r3
 8001570:	230a      	movs	r3, #10
 8001572:	498e      	ldr	r1, [pc, #568]	; (80017ac <print_KISS+0x2c8>)
 8001574:	488f      	ldr	r0, [pc, #572]	; (80017b4 <print_KISS+0x2d0>)
 8001576:	f004 f832 	bl	80055de <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
 800157e:	e016      	b.n	80015ae <print_KISS+0xca>
		sprintf(uartData, " %d ",*(curr_mem-i));
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	425b      	negs	r3, r3
 8001584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001586:	4413      	add	r3, r2
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	498b      	ldr	r1, [pc, #556]	; (80017bc <print_KISS+0x2d8>)
 800158e:	4887      	ldr	r0, [pc, #540]	; (80017ac <print_KISS+0x2c8>)
 8001590:	f004 ff4e 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001594:	4885      	ldr	r0, [pc, #532]	; (80017ac <print_KISS+0x2c8>)
 8001596:	f7fe fe3b 	bl	8000210 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	230a      	movs	r3, #10
 80015a0:	4982      	ldr	r1, [pc, #520]	; (80017ac <print_KISS+0x2c8>)
 80015a2:	4884      	ldr	r0, [pc, #528]	; (80017b4 <print_KISS+0x2d0>)
 80015a4:	f004 f81b 	bl	80055de <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	3301      	adds	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b0:	2b07      	cmp	r3, #7
 80015b2:	dde5      	ble.n	8001580 <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 80015b4:	4a7d      	ldr	r2, [pc, #500]	; (80017ac <print_KISS+0x2c8>)
 80015b6:	4b82      	ldr	r3, [pc, #520]	; (80017c0 <print_KISS+0x2dc>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015bc:	487b      	ldr	r0, [pc, #492]	; (80017ac <print_KISS+0x2c8>)
 80015be:	f7fe fe27 	bl	8000210 <strlen>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	230a      	movs	r3, #10
 80015c8:	4978      	ldr	r1, [pc, #480]	; (80017ac <print_KISS+0x2c8>)
 80015ca:	487a      	ldr	r0, [pc, #488]	; (80017b4 <print_KISS+0x2d0>)
 80015cc:	f004 f807 	bl	80055de <HAL_UART_Transmit>

	curr_mem = (local_packet->address) + address_len - 1;
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80015d6:	3310      	adds	r3, #16
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	336f      	adds	r3, #111	; 0x6f
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
 80015e2:	e041      	b.n	8001668 <print_KISS+0x184>
		sprintf(uartData, "Address Field %d =",i+1);
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	3301      	adds	r3, #1
 80015e8:	461a      	mov	r2, r3
 80015ea:	4976      	ldr	r1, [pc, #472]	; (80017c4 <print_KISS+0x2e0>)
 80015ec:	486f      	ldr	r0, [pc, #444]	; (80017ac <print_KISS+0x2c8>)
 80015ee:	f004 ff1f 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015f2:	486e      	ldr	r0, [pc, #440]	; (80017ac <print_KISS+0x2c8>)
 80015f4:	f7fe fe0c 	bl	8000210 <strlen>
 80015f8:	4603      	mov	r3, r0
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	230a      	movs	r3, #10
 80015fe:	496b      	ldr	r1, [pc, #428]	; (80017ac <print_KISS+0x2c8>)
 8001600:	486c      	ldr	r0, [pc, #432]	; (80017b4 <print_KISS+0x2d0>)
 8001602:	f003 ffec 	bl	80055de <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
 800160a:	e016      	b.n	800163a <print_KISS+0x156>
			sprintf(uartData, " %d ",*(curr_mem-j));
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	425b      	negs	r3, r3
 8001610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001612:	4413      	add	r3, r2
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	4968      	ldr	r1, [pc, #416]	; (80017bc <print_KISS+0x2d8>)
 800161a:	4864      	ldr	r0, [pc, #400]	; (80017ac <print_KISS+0x2c8>)
 800161c:	f004 ff08 	bl	8006430 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001620:	4862      	ldr	r0, [pc, #392]	; (80017ac <print_KISS+0x2c8>)
 8001622:	f7fe fdf5 	bl	8000210 <strlen>
 8001626:	4603      	mov	r3, r0
 8001628:	b29a      	uxth	r2, r3
 800162a:	230a      	movs	r3, #10
 800162c:	495f      	ldr	r1, [pc, #380]	; (80017ac <print_KISS+0x2c8>)
 800162e:	4861      	ldr	r0, [pc, #388]	; (80017b4 <print_KISS+0x2d0>)
 8001630:	f003 ffd5 	bl	80055de <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	3301      	adds	r3, #1
 8001638:	623b      	str	r3, [r7, #32]
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2b07      	cmp	r3, #7
 800163e:	dde5      	ble.n	800160c <print_KISS+0x128>
		}
		curr_mem -= 8;
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	3b08      	subs	r3, #8
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8001646:	4a59      	ldr	r2, [pc, #356]	; (80017ac <print_KISS+0x2c8>)
 8001648:	4b5d      	ldr	r3, [pc, #372]	; (80017c0 <print_KISS+0x2dc>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800164e:	4857      	ldr	r0, [pc, #348]	; (80017ac <print_KISS+0x2c8>)
 8001650:	f7fe fdde 	bl	8000210 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	230a      	movs	r3, #10
 800165a:	4954      	ldr	r1, [pc, #336]	; (80017ac <print_KISS+0x2c8>)
 800165c:	4855      	ldr	r0, [pc, #340]	; (80017b4 <print_KISS+0x2d0>)
 800165e:	f003 ffbe 	bl	80055de <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	3301      	adds	r3, #1
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	2b0d      	cmp	r3, #13
 800166c:	ddba      	ble.n	80015e4 <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001674:	3314      	adds	r3, #20
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 800167a:	4a4c      	ldr	r2, [pc, #304]	; (80017ac <print_KISS+0x2c8>)
 800167c:	4b52      	ldr	r3, [pc, #328]	; (80017c8 <print_KISS+0x2e4>)
 800167e:	4615      	mov	r5, r2
 8001680:	461c      	mov	r4, r3
 8001682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001684:	6028      	str	r0, [r5, #0]
 8001686:	6069      	str	r1, [r5, #4]
 8001688:	60aa      	str	r2, [r5, #8]
 800168a:	60eb      	str	r3, [r5, #12]
 800168c:	8823      	ldrh	r3, [r4, #0]
 800168e:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001690:	4846      	ldr	r0, [pc, #280]	; (80017ac <print_KISS+0x2c8>)
 8001692:	f7fe fdbd 	bl	8000210 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b29a      	uxth	r2, r3
 800169a:	230a      	movs	r3, #10
 800169c:	4943      	ldr	r1, [pc, #268]	; (80017ac <print_KISS+0x2c8>)
 800169e:	4845      	ldr	r0, [pc, #276]	; (80017b4 <print_KISS+0x2d0>)
 80016a0:	f003 ff9d 	bl	80055de <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	e017      	b.n	80016da <print_KISS+0x1f6>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f1c3 0307 	rsb	r3, r3, #7
 80016b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4940      	ldr	r1, [pc, #256]	; (80017bc <print_KISS+0x2d8>)
 80016ba:	483c      	ldr	r0, [pc, #240]	; (80017ac <print_KISS+0x2c8>)
 80016bc:	f004 feb8 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80016c0:	483a      	ldr	r0, [pc, #232]	; (80017ac <print_KISS+0x2c8>)
 80016c2:	f7fe fda5 	bl	8000210 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	230a      	movs	r3, #10
 80016cc:	4937      	ldr	r1, [pc, #220]	; (80017ac <print_KISS+0x2c8>)
 80016ce:	4839      	ldr	r0, [pc, #228]	; (80017b4 <print_KISS+0x2d0>)
 80016d0:	f003 ff85 	bl	80055de <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3301      	adds	r3, #1
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	2b07      	cmp	r3, #7
 80016de:	dde4      	ble.n	80016aa <print_KISS+0x1c6>
	}
	sprintf(uartData, "\n");
 80016e0:	4a32      	ldr	r2, [pc, #200]	; (80017ac <print_KISS+0x2c8>)
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <print_KISS+0x2dc>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80016e8:	4830      	ldr	r0, [pc, #192]	; (80017ac <print_KISS+0x2c8>)
 80016ea:	f7fe fd91 	bl	8000210 <strlen>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	230a      	movs	r3, #10
 80016f4:	492d      	ldr	r1, [pc, #180]	; (80017ac <print_KISS+0x2c8>)
 80016f6:	482f      	ldr	r0, [pc, #188]	; (80017b4 <print_KISS+0x2d0>)
 80016f8:	f003 ff71 	bl	80055de <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001702:	3318      	adds	r3, #24
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8001708:	4a28      	ldr	r2, [pc, #160]	; (80017ac <print_KISS+0x2c8>)
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <print_KISS+0x2e8>)
 800170c:	4615      	mov	r5, r2
 800170e:	461c      	mov	r4, r3
 8001710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001712:	6028      	str	r0, [r5, #0]
 8001714:	6069      	str	r1, [r5, #4]
 8001716:	60aa      	str	r2, [r5, #8]
 8001718:	60eb      	str	r3, [r5, #12]
 800171a:	8823      	ldrh	r3, [r4, #0]
 800171c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800171e:	4823      	ldr	r0, [pc, #140]	; (80017ac <print_KISS+0x2c8>)
 8001720:	f7fe fd76 	bl	8000210 <strlen>
 8001724:	4603      	mov	r3, r0
 8001726:	b29a      	uxth	r2, r3
 8001728:	230a      	movs	r3, #10
 800172a:	4920      	ldr	r1, [pc, #128]	; (80017ac <print_KISS+0x2c8>)
 800172c:	4821      	ldr	r0, [pc, #132]	; (80017b4 <print_KISS+0x2d0>)
 800172e:	f003 ff56 	bl	80055de <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	e017      	b.n	8001768 <print_KISS+0x284>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001740:	4413      	add	r3, r2
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	491d      	ldr	r1, [pc, #116]	; (80017bc <print_KISS+0x2d8>)
 8001748:	4818      	ldr	r0, [pc, #96]	; (80017ac <print_KISS+0x2c8>)
 800174a:	f004 fe71 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800174e:	4817      	ldr	r0, [pc, #92]	; (80017ac <print_KISS+0x2c8>)
 8001750:	f7fe fd5e 	bl	8000210 <strlen>
 8001754:	4603      	mov	r3, r0
 8001756:	b29a      	uxth	r2, r3
 8001758:	230a      	movs	r3, #10
 800175a:	4914      	ldr	r1, [pc, #80]	; (80017ac <print_KISS+0x2c8>)
 800175c:	4815      	ldr	r0, [pc, #84]	; (80017b4 <print_KISS+0x2d0>)
 800175e:	f003 ff3e 	bl	80055de <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	3301      	adds	r3, #1
 8001766:	61bb      	str	r3, [r7, #24]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b07      	cmp	r3, #7
 800176c:	dde4      	ble.n	8001738 <print_KISS+0x254>
	}
	sprintf(uartData, "\n");
 800176e:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <print_KISS+0x2c8>)
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <print_KISS+0x2dc>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001776:	480d      	ldr	r0, [pc, #52]	; (80017ac <print_KISS+0x2c8>)
 8001778:	f7fe fd4a 	bl	8000210 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	230a      	movs	r3, #10
 8001782:	490a      	ldr	r1, [pc, #40]	; (80017ac <print_KISS+0x2c8>)
 8001784:	480b      	ldr	r0, [pc, #44]	; (80017b4 <print_KISS+0x2d0>)
 8001786:	f003 ff2a 	bl	80055de <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001790:	331c      	adds	r3, #28
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3b01      	subs	r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e055      	b.n	8001854 <print_KISS+0x370>
 80017a8:	200000b0 	.word	0x200000b0
 80017ac:	20001f3c 	.word	0x20001f3c
 80017b0:	08007e04 	.word	0x08007e04
 80017b4:	20003d60 	.word	0x20003d60
 80017b8:	08007e3c 	.word	0x08007e3c
 80017bc:	08007da8 	.word	0x08007da8
 80017c0:	08007db0 	.word	0x08007db0
 80017c4:	08007d94 	.word	0x08007d94
 80017c8:	08007db4 	.word	0x08007db4
 80017cc:	08007dc8 	.word	0x08007dc8
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	461a      	mov	r2, r3
 80017d6:	494a      	ldr	r1, [pc, #296]	; (8001900 <print_KISS+0x41c>)
 80017d8:	484a      	ldr	r0, [pc, #296]	; (8001904 <print_KISS+0x420>)
 80017da:	f004 fe29 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80017de:	4849      	ldr	r0, [pc, #292]	; (8001904 <print_KISS+0x420>)
 80017e0:	f7fe fd16 	bl	8000210 <strlen>
 80017e4:	4603      	mov	r3, r0
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	230a      	movs	r3, #10
 80017ea:	4946      	ldr	r1, [pc, #280]	; (8001904 <print_KISS+0x420>)
 80017ec:	4846      	ldr	r0, [pc, #280]	; (8001908 <print_KISS+0x424>)
 80017ee:	f003 fef6 	bl	80055de <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	e016      	b.n	8001826 <print_KISS+0x342>
			sprintf(uartData, " %d ",*(curr_mem-j));
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	425b      	negs	r3, r3
 80017fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	4941      	ldr	r1, [pc, #260]	; (800190c <print_KISS+0x428>)
 8001806:	483f      	ldr	r0, [pc, #252]	; (8001904 <print_KISS+0x420>)
 8001808:	f004 fe12 	bl	8006430 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800180c:	483d      	ldr	r0, [pc, #244]	; (8001904 <print_KISS+0x420>)
 800180e:	f7fe fcff 	bl	8000210 <strlen>
 8001812:	4603      	mov	r3, r0
 8001814:	b29a      	uxth	r2, r3
 8001816:	230a      	movs	r3, #10
 8001818:	493a      	ldr	r1, [pc, #232]	; (8001904 <print_KISS+0x420>)
 800181a:	483b      	ldr	r0, [pc, #236]	; (8001908 <print_KISS+0x424>)
 800181c:	f003 fedf 	bl	80055de <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	3301      	adds	r3, #1
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	2b07      	cmp	r3, #7
 800182a:	dde5      	ble.n	80017f8 <print_KISS+0x314>
		}
		curr_mem -= 8;
 800182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182e:	3b08      	subs	r3, #8
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8001832:	4a34      	ldr	r2, [pc, #208]	; (8001904 <print_KISS+0x420>)
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <print_KISS+0x42c>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800183a:	4832      	ldr	r0, [pc, #200]	; (8001904 <print_KISS+0x420>)
 800183c:	f7fe fce8 	bl	8000210 <strlen>
 8001840:	4603      	mov	r3, r0
 8001842:	b29a      	uxth	r2, r3
 8001844:	230a      	movs	r3, #10
 8001846:	492f      	ldr	r1, [pc, #188]	; (8001904 <print_KISS+0x420>)
 8001848:	482f      	ldr	r0, [pc, #188]	; (8001908 <print_KISS+0x424>)
 800184a:	f003 fec8 	bl	80055de <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	da00      	bge.n	8001862 <print_KISS+0x37e>
 8001860:	3307      	adds	r3, #7
 8001862:	10db      	asrs	r3, r3, #3
 8001864:	3b01      	subs	r3, #1
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbb1      	blt.n	80017d0 <print_KISS+0x2ec>
	}

	//Print Stop Flag
	curr_mem = local_packet->KISS_PACKET;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 8001874:	4a23      	ldr	r2, [pc, #140]	; (8001904 <print_KISS+0x420>)
 8001876:	4b27      	ldr	r3, [pc, #156]	; (8001914 <print_KISS+0x430>)
 8001878:	4615      	mov	r5, r2
 800187a:	461c      	mov	r4, r3
 800187c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187e:	6028      	str	r0, [r5, #0]
 8001880:	6069      	str	r1, [r5, #4]
 8001882:	60aa      	str	r2, [r5, #8]
 8001884:	60eb      	str	r3, [r5, #12]
 8001886:	8823      	ldrh	r3, [r4, #0]
 8001888:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800188a:	481e      	ldr	r0, [pc, #120]	; (8001904 <print_KISS+0x420>)
 800188c:	f7fe fcc0 	bl	8000210 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	230a      	movs	r3, #10
 8001896:	491b      	ldr	r1, [pc, #108]	; (8001904 <print_KISS+0x420>)
 8001898:	481b      	ldr	r0, [pc, #108]	; (8001908 <print_KISS+0x424>)
 800189a:	f003 fea0 	bl	80055de <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e017      	b.n	80018d4 <print_KISS+0x3f0>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ac:	4413      	add	r3, r2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4916      	ldr	r1, [pc, #88]	; (800190c <print_KISS+0x428>)
 80018b4:	4813      	ldr	r0, [pc, #76]	; (8001904 <print_KISS+0x420>)
 80018b6:	f004 fdbb 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018ba:	4812      	ldr	r0, [pc, #72]	; (8001904 <print_KISS+0x420>)
 80018bc:	f7fe fca8 	bl	8000210 <strlen>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	230a      	movs	r3, #10
 80018c6:	490f      	ldr	r1, [pc, #60]	; (8001904 <print_KISS+0x420>)
 80018c8:	480f      	ldr	r0, [pc, #60]	; (8001908 <print_KISS+0x424>)
 80018ca:	f003 fe88 	bl	80055de <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b07      	cmp	r3, #7
 80018d8:	dde4      	ble.n	80018a4 <print_KISS+0x3c0>
	}
	sprintf(uartData, "\n");
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <print_KISS+0x420>)
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <print_KISS+0x42c>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018e2:	4808      	ldr	r0, [pc, #32]	; (8001904 <print_KISS+0x420>)
 80018e4:	f7fe fc94 	bl	8000210 <strlen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	230a      	movs	r3, #10
 80018ee:	4905      	ldr	r1, [pc, #20]	; (8001904 <print_KISS+0x420>)
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <print_KISS+0x424>)
 80018f2:	f003 fe74 	bl	80055de <HAL_UART_Transmit>

}
 80018f6:	bf00      	nop
 80018f8:	3734      	adds	r7, #52	; 0x34
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fe:	bf00      	nop
 8001900:	08007ddc 	.word	0x08007ddc
 8001904:	20001f3c 	.word	0x20001f3c
 8001908:	20003d60 	.word	0x20003d60
 800190c:	08007da8 	.word	0x08007da8
 8001910:	08007db0 	.word	0x08007db0
 8001914:	08007e50 	.word	0x08007e50

08001918 <UART2_EXCEPTION_CALLBACK>:
//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 800191c:	2201      	movs	r2, #1
 800191e:	491d      	ldr	r1, [pc, #116]	; (8001994 <UART2_EXCEPTION_CALLBACK+0x7c>)
 8001920:	481d      	ldr	r0, [pc, #116]	; (8001998 <UART2_EXCEPTION_CALLBACK+0x80>)
 8001922:	f003 fef5 	bl	8005710 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001928:	2200      	movs	r2, #0
 800192a:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 800192e:	7b1b      	ldrb	r3, [r3, #12]
 8001930:	2bc0      	cmp	r3, #192	; 0xc0
 8001932:	d104      	bne.n	800193e <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	3301      	adds	r3, #1
 800193a:	4a18      	ldr	r2, [pc, #96]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 800193c:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <UART2_EXCEPTION_CALLBACK+0x88>)
 8001946:	4413      	add	r3, r2
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 800194a:	7b12      	ldrb	r2, [r2, #12]
 800194c:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	4a11      	ldr	r2, [pc, #68]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001956:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b01      	cmp	r3, #1
 800195e:	dd16      	ble.n	800198e <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <UART2_EXCEPTION_CALLBACK+0x8c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	f083 0301 	eor.w	r3, r3, #1
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <UART2_EXCEPTION_CALLBACK+0x90>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 800197c:	2201      	movs	r2, #1
 800197e:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a05      	ldr	r2, [pc, #20]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001986:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <UART2_EXCEPTION_CALLBACK+0x84>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

	  }
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20001418 	.word	0x20001418
 8001998:	20003d60 	.word	0x20003d60
 800199c:	2000140c 	.word	0x2000140c
 80019a0:	2000141a 	.word	0x2000141a
 80019a4:	20003d08 	.word	0x20003d08
 80019a8:	20000099 	.word	0x20000099

080019ac <set_packet_pointer_AX25>:

//	return true; //valid packet
}


void set_packet_pointer_AX25(){
 80019ac:	b5b0      	push	{r4, r5, r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80019b2:	4b66      	ldr	r3, [pc, #408]	; (8001b4c <set_packet_pointer_AX25+0x1a0>)
 80019b4:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 80019b6:	2310      	movs	r3, #16
 80019b8:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer to AX25\n");
 80019ba:	4a65      	ldr	r2, [pc, #404]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 80019bc:	4b65      	ldr	r3, [pc, #404]	; (8001b54 <set_packet_pointer_AX25+0x1a8>)
 80019be:	4615      	mov	r5, r2
 80019c0:	461c      	mov	r4, r3
 80019c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c4:	6028      	str	r0, [r5, #0]
 80019c6:	6069      	str	r1, [r5, #4]
 80019c8:	60aa      	str	r2, [r5, #8]
 80019ca:	60eb      	str	r3, [r5, #12]
 80019cc:	cc03      	ldmia	r4!, {r0, r1}
 80019ce:	6128      	str	r0, [r5, #16]
 80019d0:	6169      	str	r1, [r5, #20]
 80019d2:	7823      	ldrb	r3, [r4, #0]
 80019d4:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80019d6:	485e      	ldr	r0, [pc, #376]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 80019d8:	f7fe fc1a 	bl	8000210 <strlen>
 80019dc:	4603      	mov	r3, r0
 80019de:	b29a      	uxth	r2, r3
 80019e0:	230a      	movs	r3, #10
 80019e2:	495b      	ldr	r1, [pc, #364]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 80019e4:	485c      	ldr	r0, [pc, #368]	; (8001b58 <set_packet_pointer_AX25+0x1ac>)
 80019e6:	f003 fdfa 	bl	80055de <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer to address\n");
 80019ee:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 80019f0:	4b5a      	ldr	r3, [pc, #360]	; (8001b5c <set_packet_pointer_AX25+0x1b0>)
 80019f2:	4615      	mov	r5, r2
 80019f4:	461c      	mov	r4, r3
 80019f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f8:	6028      	str	r0, [r5, #0]
 80019fa:	6069      	str	r1, [r5, #4]
 80019fc:	60aa      	str	r2, [r5, #8]
 80019fe:	60eb      	str	r3, [r5, #12]
 8001a00:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001a02:	6128      	str	r0, [r5, #16]
 8001a04:	6169      	str	r1, [r5, #20]
 8001a06:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001a08:	4851      	ldr	r0, [pc, #324]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001a0a:	f7fe fc01 	bl	8000210 <strlen>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	230a      	movs	r3, #10
 8001a14:	494e      	ldr	r1, [pc, #312]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001a16:	4850      	ldr	r0, [pc, #320]	; (8001b58 <set_packet_pointer_AX25+0x1ac>)
 8001a18:	f003 fde1 	bl	80055de <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a22:	3310      	adds	r3, #16
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3370      	adds	r3, #112	; 0x70
 8001a2c:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3370      	adds	r3, #112	; 0x70
 8001a32:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer to control\n");
 8001a34:	4a46      	ldr	r2, [pc, #280]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001a36:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <set_packet_pointer_AX25+0x1b4>)
 8001a38:	4615      	mov	r5, r2
 8001a3a:	461c      	mov	r4, r3
 8001a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3e:	6028      	str	r0, [r5, #0]
 8001a40:	6069      	str	r1, [r5, #4]
 8001a42:	60aa      	str	r2, [r5, #8]
 8001a44:	60eb      	str	r3, [r5, #12]
 8001a46:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001a48:	6128      	str	r0, [r5, #16]
 8001a4a:	6169      	str	r1, [r5, #20]
 8001a4c:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001a4e:	4840      	ldr	r0, [pc, #256]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001a50:	f7fe fbde 	bl	8000210 <strlen>
 8001a54:	4603      	mov	r3, r0
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	230a      	movs	r3, #10
 8001a5a:	493d      	ldr	r1, [pc, #244]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001a5c:	483e      	ldr	r0, [pc, #248]	; (8001b58 <set_packet_pointer_AX25+0x1ac>)
 8001a5e:	f003 fdbe 	bl	80055de <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a68:	3314      	adds	r3, #20
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3308      	adds	r3, #8
 8001a72:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	3308      	adds	r3, #8
 8001a78:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer to PID\n");
 8001a7a:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001a7c:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <set_packet_pointer_AX25+0x1b8>)
 8001a7e:	4615      	mov	r5, r2
 8001a80:	461c      	mov	r4, r3
 8001a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a84:	6028      	str	r0, [r5, #0]
 8001a86:	6069      	str	r1, [r5, #4]
 8001a88:	60aa      	str	r2, [r5, #8]
 8001a8a:	60eb      	str	r3, [r5, #12]
 8001a8c:	cc03      	ldmia	r4!, {r0, r1}
 8001a8e:	6128      	str	r0, [r5, #16]
 8001a90:	6169      	str	r1, [r5, #20]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001a92:	482f      	ldr	r0, [pc, #188]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001a94:	f7fe fbbc 	bl	8000210 <strlen>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	492c      	ldr	r1, [pc, #176]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001aa0:	482d      	ldr	r0, [pc, #180]	; (8001b58 <set_packet_pointer_AX25+0x1ac>)
 8001aa2:	f003 fd9c 	bl	80055de <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001aac:	3318      	adds	r3, #24
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3308      	adds	r3, #8
 8001ab6:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	3308      	adds	r3, #8
 8001abc:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer to Info\n");
 8001abe:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <set_packet_pointer_AX25+0x1bc>)
 8001ac2:	4615      	mov	r5, r2
 8001ac4:	461c      	mov	r4, r3
 8001ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac8:	6028      	str	r0, [r5, #0]
 8001aca:	6069      	str	r1, [r5, #4]
 8001acc:	60aa      	str	r2, [r5, #8]
 8001ace:	60eb      	str	r3, [r5, #12]
 8001ad0:	cc03      	ldmia	r4!, {r0, r1}
 8001ad2:	6128      	str	r0, [r5, #16]
 8001ad4:	6169      	str	r1, [r5, #20]
 8001ad6:	7823      	ldrb	r3, [r4, #0]
 8001ad8:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ada:	481d      	ldr	r0, [pc, #116]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001adc:	f7fe fb98 	bl	8000210 <strlen>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	491a      	ldr	r1, [pc, #104]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001ae8:	481b      	ldr	r0, [pc, #108]	; (8001b58 <set_packet_pointer_AX25+0x1ac>)
 8001aea:	f003 fd78 	bl	80055de <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001af4:	331c      	adds	r3, #28
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer to FCS\n");
 8001b0a:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <set_packet_pointer_AX25+0x1c0>)
 8001b0e:	4615      	mov	r5, r2
 8001b10:	461c      	mov	r4, r3
 8001b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b14:	6028      	str	r0, [r5, #0]
 8001b16:	6069      	str	r1, [r5, #4]
 8001b18:	60aa      	str	r2, [r5, #8]
 8001b1a:	60eb      	str	r3, [r5, #12]
 8001b1c:	cc03      	ldmia	r4!, {r0, r1}
 8001b1e:	6128      	str	r0, [r5, #16]
 8001b20:	6169      	str	r1, [r5, #20]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b22:	480b      	ldr	r0, [pc, #44]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001b24:	f7fe fb74 	bl	8000210 <strlen>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	230a      	movs	r3, #10
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <set_packet_pointer_AX25+0x1a4>)
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <set_packet_pointer_AX25+0x1ac>)
 8001b32:	f003 fd54 	bl	80055de <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bdb0      	pop	{r4, r5, r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200000b0 	.word	0x200000b0
 8001b50:	20001f3c 	.word	0x20001f3c
 8001b54:	08007f84 	.word	0x08007f84
 8001b58:	20003d60 	.word	0x20003d60
 8001b5c:	08007fa0 	.word	0x08007fa0
 8001b60:	08007fbc 	.word	0x08007fbc
 8001b64:	08007fd8 	.word	0x08007fd8
 8001b68:	08007ff0 	.word	0x08007ff0
 8001b6c:	0800800c 	.word	0x0800800c

08001b70 <clear_AX25>:
	memcpy(curr_mem,KISS_FLAG,FLAG_SIZE*bool_size);

	KISS_TO_HEX();

}
void clear_AX25(){
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <clear_AX25+0x5c>)
 8001b78:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 8001b7a:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <clear_AX25+0x60>)
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <clear_AX25+0x64>)
 8001b7e:	4615      	mov	r5, r2
 8001b80:	461c      	mov	r4, r3
 8001b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b84:	6028      	str	r0, [r5, #0]
 8001b86:	6069      	str	r1, [r5, #4]
 8001b88:	60aa      	str	r2, [r5, #8]
 8001b8a:	60eb      	str	r3, [r5, #12]
 8001b8c:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001b8e:	6128      	str	r0, [r5, #16]
 8001b90:	6169      	str	r1, [r5, #20]
 8001b92:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b94:	480e      	ldr	r0, [pc, #56]	; (8001bd0 <clear_AX25+0x60>)
 8001b96:	f7fe fb3b 	bl	8000210 <strlen>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	230a      	movs	r3, #10
 8001ba0:	490b      	ldr	r1, [pc, #44]	; (8001bd0 <clear_AX25+0x60>)
 8001ba2:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <clear_AX25+0x68>)
 8001ba4:	f003 fd1b 	bl	80055de <HAL_UART_Transmit>

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f640 225f 	movw	r2, #2655	; 0xa5f
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f004 fc29 	bl	8006408 <memcpy>
	local_packet->got_packet = false;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001bbc:	3309      	adds	r3, #9
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200000b0 	.word	0x200000b0
 8001bd0:	20001f3c 	.word	0x20001f3c
 8001bd4:	08008024 	.word	0x08008024
 8001bd8:	20003d60 	.word	0x20003d60

08001bdc <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8001be2:	4b33      	ldr	r3, [pc, #204]	; (8001cb0 <receiving_KISS+0xd4>)
 8001be4:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001be6:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <receiving_KISS+0xd8>)
 8001be8:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	7b5b      	ldrb	r3, [r3, #13]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d059      	beq.n	8001ca6 <receiving_KISS+0xca>
		sprintf(uartData, "\nGot a packet via UART of size %d, printing now...\n",local_UART_packet->received_byte_cnt);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	492f      	ldr	r1, [pc, #188]	; (8001cb8 <receiving_KISS+0xdc>)
 8001bfa:	4830      	ldr	r0, [pc, #192]	; (8001cbc <receiving_KISS+0xe0>)
 8001bfc:	f004 fc18 	bl	8006430 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c00:	482e      	ldr	r0, [pc, #184]	; (8001cbc <receiving_KISS+0xe0>)
 8001c02:	f7fe fb05 	bl	8000210 <strlen>
 8001c06:	4603      	mov	r3, r0
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	492b      	ldr	r1, [pc, #172]	; (8001cbc <receiving_KISS+0xe0>)
 8001c0e:	482c      	ldr	r0, [pc, #176]	; (8001cc0 <receiving_KISS+0xe4>)
 8001c10:	f003 fce5 	bl	80055de <HAL_UART_Transmit>
		int byte_cnt = local_UART_packet->received_byte_cnt;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i < byte_cnt;i++){
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e01f      	b.n	8001c60 <receiving_KISS+0x84>
			//Hex value from UART
			 //start from LS Byte = Highest index
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[byte_cnt-1-i];
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	1e5a      	subs	r2, r3, #1
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	7b9b      	ldrb	r3, [r3, #14]
 8001c2e:	71bb      	strb	r3, [r7, #6]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3307      	adds	r3, #7
 8001c3e:	603b      	str	r3, [r7, #0]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 8001c40:	79bb      	ldrb	r3, [r7, #6]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2201      	movs	r2, #1
 8001c46:	6839      	ldr	r1, [r7, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff f957 	bl	8000efc <conv_HEX_to_BIN>

//			local_UART_packet->got_packet = false;
			local_packet->got_packet = true;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c54:	3309      	adds	r3, #9
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i < byte_cnt;i++){
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbdb      	blt.n	8001c20 <receiving_KISS+0x44>
		}
		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c72:	330c      	adds	r3, #12
 8001c74:	601a      	str	r2, [r3, #0]
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset)*8;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3b12      	subs	r3, #18
 8001c82:	00da      	lsls	r2, r3, #3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c8a:	601a      	str	r2, [r3, #0]

		//Convert KISS packet to AX.25 packet
		bool success = KISS_TO_AX25();
 8001c8c:	f000 f878 	bl	8001d80 <KISS_TO_AX25>
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]
		//Upon exit, have a perfectly good AX.25 packet

		//Output AFSK waveform for radio
		if(success) {
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <receiving_KISS+0xc2>
//			output_AX25();
			print_AX25();
 8001c9a:	f7ff fa47 	bl	800112c <print_AX25>
		}
		clear_AX25();
 8001c9e:	f7ff ff67 	bl	8001b70 <clear_AX25>
		return success;
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	e000      	b.n	8001ca8 <receiving_KISS+0xcc>
	}
	return false;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	2000140c 	.word	0x2000140c
 8001cb4:	200000b0 	.word	0x200000b0
 8001cb8:	08008040 	.word	0x08008040
 8001cbc:	20001f3c 	.word	0x20001f3c
 8001cc0:	20003d60 	.word	0x20003d60

08001cc4 <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 8001cc4:	b5b0      	push	{r4, r5, r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001cca:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <set_packet_pointer_KISS+0xac>)
 8001ccc:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS\n");
 8001cce:	4a29      	ldr	r2, [pc, #164]	; (8001d74 <set_packet_pointer_KISS+0xb0>)
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <set_packet_pointer_KISS+0xb4>)
 8001cd2:	4614      	mov	r4, r2
 8001cd4:	461d      	mov	r5, r3
 8001cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd8:	6020      	str	r0, [r4, #0]
 8001cda:	6061      	str	r1, [r4, #4]
 8001cdc:	60a2      	str	r2, [r4, #8]
 8001cde:	60e3      	str	r3, [r4, #12]
 8001ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce2:	6120      	str	r0, [r4, #16]
 8001ce4:	6161      	str	r1, [r4, #20]
 8001ce6:	61a2      	str	r2, [r4, #24]
 8001ce8:	61e3      	str	r3, [r4, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001cea:	4822      	ldr	r0, [pc, #136]	; (8001d74 <set_packet_pointer_KISS+0xb0>)
 8001cec:	f7fe fa90 	bl	8000210 <strlen>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	230a      	movs	r3, #10
 8001cf6:	491f      	ldr	r1, [pc, #124]	; (8001d74 <set_packet_pointer_KISS+0xb0>)
 8001cf8:	4820      	ldr	r0, [pc, #128]	; (8001d7c <set_packet_pointer_KISS+0xb8>)
 8001cfa:	f003 fc70 	bl	80055de <HAL_UART_Transmit>

	bool *curr_mem = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d0a:	330c      	adds	r3, #12
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3b02      	subs	r3, #2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	603b      	str	r3, [r7, #0]

	curr_mem -= address_len;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	3b70      	subs	r3, #112	; 0x70
 8001d1a:	603b      	str	r3, [r7, #0]
	local_packet->address = curr_mem;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d22:	3310      	adds	r3, #16
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	601a      	str	r2, [r3, #0]

	curr_mem -= control_len;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	3b08      	subs	r3, #8
 8001d2c:	603b      	str	r3, [r7, #0]
	local_packet->control = curr_mem;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d34:	3314      	adds	r3, #20
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	601a      	str	r2, [r3, #0]

	curr_mem -= PID_len;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	3b08      	subs	r3, #8
 8001d3e:	603b      	str	r3, [r7, #0]
	local_packet->PID = curr_mem;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d46:	3318      	adds	r3, #24
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	601a      	str	r2, [r3, #0]

	curr_mem -= local_packet->Info_Len;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	425b      	negs	r3, r3
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	4413      	add	r3, r2
 8001d5a:	603b      	str	r3, [r7, #0]
	local_packet->Info = curr_mem;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d62:	331c      	adds	r3, #28
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	601a      	str	r2, [r3, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d70:	200000b0 	.word	0x200000b0
 8001d74:	20001f3c 	.word	0x20001f3c
 8001d78:	08008074 	.word	0x08008074
 8001d7c:	20003d60 	.word	0x20003d60

08001d80 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001d86:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <KISS_TO_AX25+0x10c>)
 8001d88:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Before KISS -> AX.25 conversion\n");
 8001d8a:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <KISS_TO_AX25+0x110>)
 8001d8c:	4a41      	ldr	r2, [pc, #260]	; (8001e94 <KISS_TO_AX25+0x114>)
 8001d8e:	4614      	mov	r4, r2
 8001d90:	469c      	mov	ip, r3
 8001d92:	f104 0e20 	add.w	lr, r4, #32
 8001d96:	4665      	mov	r5, ip
 8001d98:	4626      	mov	r6, r4
 8001d9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d9c:	6028      	str	r0, [r5, #0]
 8001d9e:	6069      	str	r1, [r5, #4]
 8001da0:	60aa      	str	r2, [r5, #8]
 8001da2:	60eb      	str	r3, [r5, #12]
 8001da4:	3410      	adds	r4, #16
 8001da6:	f10c 0c10 	add.w	ip, ip, #16
 8001daa:	4574      	cmp	r4, lr
 8001dac:	d1f3      	bne.n	8001d96 <KISS_TO_AX25+0x16>
 8001dae:	4663      	mov	r3, ip
 8001db0:	4622      	mov	r2, r4
 8001db2:	7812      	ldrb	r2, [r2, #0]
 8001db4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001db6:	4836      	ldr	r0, [pc, #216]	; (8001e90 <KISS_TO_AX25+0x110>)
 8001db8:	f7fe fa2a 	bl	8000210 <strlen>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	230a      	movs	r3, #10
 8001dc2:	4933      	ldr	r1, [pc, #204]	; (8001e90 <KISS_TO_AX25+0x110>)
 8001dc4:	4834      	ldr	r0, [pc, #208]	; (8001e98 <KISS_TO_AX25+0x118>)
 8001dc6:	f003 fc0a 	bl	80055de <HAL_UART_Transmit>

	set_packet_pointer_KISS();
 8001dca:	f7ff ff7b 	bl	8001cc4 <set_packet_pointer_KISS>
	print_KISS();
 8001dce:	f7ff fb89 	bl	80014e4 <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001dde:	330c      	adds	r3, #12
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3b02      	subs	r3, #2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	603b      	str	r3, [r7, #0]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 8001dea:	f7ff fddf 	bl	80019ac <set_packet_pointer_AX25>

	cpy_from_ptr -= address_len;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	3b70      	subs	r3, #112	; 0x70
 8001df2:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->address,cpy_from_ptr,address_len);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001dfa:	3310      	adds	r3, #16
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2270      	movs	r2, #112	; 0x70
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 fb00 	bl	8006408 <memcpy>

	cpy_from_ptr -= control_len;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	3b08      	subs	r3, #8
 8001e0c:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001e14:	3314      	adds	r3, #20
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2208      	movs	r2, #8
 8001e1a:	6839      	ldr	r1, [r7, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f004 faf3 	bl	8006408 <memcpy>

	cpy_from_ptr -= PID_len;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	3b08      	subs	r3, #8
 8001e26:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001e2e:	3318      	adds	r3, #24
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2208      	movs	r2, #8
 8001e34:	6839      	ldr	r1, [r7, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fae6 	bl	8006408 <memcpy>

	cpy_from_ptr -= local_packet->Info_Len;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	425b      	negs	r3, r3
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001e52:	331c      	adds	r3, #28
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6839      	ldr	r1, [r7, #0]
 8001e62:	f004 fad1 	bl	8006408 <memcpy>

	//USE CRC HERE TO GENERATE FCS FIELD
	rxBit_count = address_len + control_len + PID_len + local_packet->Info_Len - 8;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3378      	adds	r3, #120	; 0x78
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <KISS_TO_AX25+0x11c>)
 8001e72:	6013      	str	r3, [r2, #0]
	crc_generate();
 8001e74:	f000 f88c 	bl	8001f90 <crc_generate>

	//BIT STUFFING NEEDED
//	bitstuffing(local_packet);
	rxBit_count = 0;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <KISS_TO_AX25+0x11c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
	print_AX25();
 8001e7e:	f7ff f955 	bl	800112c <print_AX25>
	return true; //valid packet
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8c:	200000b0 	.word	0x200000b0
 8001e90:	20001f3c 	.word	0x20001f3c
 8001e94:	08008094 	.word	0x08008094
 8001e98:	20003d60 	.word	0x20003d60
 8001e9c:	20000094 	.word	0x20000094

08001ea0 <crc_calc>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001eac:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <crc_calc+0xdc>)
 8001eae:	61fb      	str	r3, [r7, #28]
	int out_bit;
	int roll_bit = *crc_ptr_in & 0x0001;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
    int poly = 0x8408;             			//reverse order of 0x1021
 8001eba:	f248 4308 	movw	r3, #33800	; 0x8408
 8001ebe:	617b      	str	r3, [r7, #20]

    out_bit = in_bit ^ roll_bit; 		//xor lsb of current crc with input bit
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4053      	eors	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
	*crc_ptr_in >>= 1;               	//right shift by 1
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	105a      	asrs	r2, r3, #1
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0x0000;
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d102      	bne.n	8001ede <crc_calc+0x3e>
 8001ed8:	f248 4308 	movw	r3, #33800	; 0x8408
 8001edc:	e000      	b.n	8001ee0 <crc_calc+0x40>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
	*crc_ptr_in ^= poly;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	405a      	eors	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	601a      	str	r2, [r3, #0]

    //End condition
//	if(*crc_count_ptr_in >= rxBit_count){
	if(*crc_count_ptr_in >= rxBit_count){
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <crc_calc+0xe0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	db37      	blt.n	8001f74 <crc_calc+0xd4>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8001f0c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	6013      	str	r3, [r2, #0]
  	    sprintf(uartData, "Convert CRC to FCS (hex) = %x\n",local_packet->crc);
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001f1a:	3318      	adds	r3, #24
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4918      	ldr	r1, [pc, #96]	; (8001f84 <crc_calc+0xe4>)
 8001f22:	4819      	ldr	r0, [pc, #100]	; (8001f88 <crc_calc+0xe8>)
 8001f24:	f004 fa84 	bl	8006430 <siprintf>
    	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f28:	4817      	ldr	r0, [pc, #92]	; (8001f88 <crc_calc+0xe8>)
 8001f2a:	f7fe f971 	bl	8000210 <strlen>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	230a      	movs	r3, #10
 8001f34:	4914      	ldr	r1, [pc, #80]	; (8001f88 <crc_calc+0xe8>)
 8001f36:	4815      	ldr	r0, [pc, #84]	; (8001f8c <crc_calc+0xec>)
 8001f38:	f003 fb51 	bl	80055de <HAL_UART_Transmit>
    	if(local_packet->check_crc == false){
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	f083 0301 	eor.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d012      	beq.n	8001f74 <crc_calc+0xd4>
    		//REMEBER TO CHECK THIS CRC conversion FOR ACCURACY LATER
    		conv_HEX_to_BIN(*crc_ptr_in,local_packet->FCS,false);
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	b298      	uxth	r0, r3
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	4619      	mov	r1, r3
 8001f62:	f7fe ffcb 	bl	8000efc <conv_HEX_to_BIN>
    		local_packet->crc = 0xFFFF;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001f6c:	3318      	adds	r3, #24
 8001f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f72:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 8001f74:	bf00      	nop
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	200000b0 	.word	0x200000b0
 8001f80:	20000094 	.word	0x20000094
 8001f84:	080080b8 	.word	0x080080b8
 8001f88:	20001f3c 	.word	0x20001f3c
 8001f8c:	20003d60 	.word	0x20003d60

08001f90 <crc_generate>:

void crc_generate(){
 8001f90:	b5b0      	push	{r4, r5, r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001f96:	4b73      	ldr	r3, [pc, #460]	; (8002164 <crc_generate+0x1d4>)
 8001f98:	60bb      	str	r3, [r7, #8]
	uint16_t * crc_ptr = &(local_packet->crc);
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001fa0:	3318      	adds	r3, #24
 8001fa2:	607b      	str	r3, [r7, #4]
	int * crc_count_ptr = &(local_packet->crc_count);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001faa:	331c      	adds	r3, #28
 8001fac:	603b      	str	r3, [r7, #0]
	bool *curr_mem;

	*crc_ptr = 0xFFFF;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb4:	801a      	strh	r2, [r3, #0]
	*crc_count_ptr = 0;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	sprintf(uartData, "Performing CRC generation\n");
 8001fbc:	4a6a      	ldr	r2, [pc, #424]	; (8002168 <crc_generate+0x1d8>)
 8001fbe:	4b6b      	ldr	r3, [pc, #428]	; (800216c <crc_generate+0x1dc>)
 8001fc0:	4615      	mov	r5, r2
 8001fc2:	461c      	mov	r4, r3
 8001fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc6:	6028      	str	r0, [r5, #0]
 8001fc8:	6069      	str	r1, [r5, #4]
 8001fca:	60aa      	str	r2, [r5, #8]
 8001fcc:	60eb      	str	r3, [r5, #12]
 8001fce:	cc03      	ldmia	r4!, {r0, r1}
 8001fd0:	6128      	str	r0, [r5, #16]
 8001fd2:	6169      	str	r1, [r5, #20]
 8001fd4:	8823      	ldrh	r3, [r4, #0]
 8001fd6:	78a2      	ldrb	r2, [r4, #2]
 8001fd8:	832b      	strh	r3, [r5, #24]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	76ab      	strb	r3, [r5, #26]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001fde:	4862      	ldr	r0, [pc, #392]	; (8002168 <crc_generate+0x1d8>)
 8001fe0:	f7fe f916 	bl	8000210 <strlen>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	230a      	movs	r3, #10
 8001fea:	495f      	ldr	r1, [pc, #380]	; (8002168 <crc_generate+0x1d8>)
 8001fec:	4860      	ldr	r0, [pc, #384]	; (8002170 <crc_generate+0x1e0>)
 8001fee:	f003 faf6 	bl	80055de <HAL_UART_Transmit>

	//Calculate CRC for address
	curr_mem = (local_packet->address) + address_len - 8;//start at MS Byte(LSB)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001ff8:	3310      	adds	r3, #16
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	3368      	adds	r3, #104	; 0x68
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	e017      	b.n	8002036 <crc_generate+0xa6>
		for(int j = 0;j<8;j++){
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	e00b      	b.n	8002024 <crc_generate+0x94>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002010:	4413      	add	r3, r2
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff41 	bl	8001ea0 <crc_calc>
		for(int j = 0;j<8;j++){
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b07      	cmp	r3, #7
 8002028:	ddf0      	ble.n	800200c <crc_generate+0x7c>
		}
		curr_mem -= 8;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	3b08      	subs	r3, #8
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	3301      	adds	r3, #1
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	2b0d      	cmp	r3, #13
 800203a:	dde4      	ble.n	8002006 <crc_generate+0x76>
	}

	//Calculate CRC for control
	curr_mem = local_packet->control;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002042:	3314      	adds	r3, #20
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < control_len; i++){
 8002048:	2300      	movs	r3, #0
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	e00f      	b.n	800206e <crc_generate+0xde>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002054:	3314      	adds	r3, #20
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	4413      	add	r3, r2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff1c 	bl	8001ea0 <crc_calc>
	for(int i = 0; i < control_len; i++){
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	3301      	adds	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b07      	cmp	r3, #7
 8002072:	ddec      	ble.n	800204e <crc_generate+0xbe>
	}

//	//Calculate CRC for PID (if packet is of type i-frame)
	curr_mem = local_packet->PID;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800207a:	3318      	adds	r3, #24
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < PID_len; i++){
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e00f      	b.n	80020a6 <crc_generate+0x116>
		//Call crc_calc per bit
		crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800208c:	3318      	adds	r3, #24
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	4413      	add	r3, r2
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff00 	bl	8001ea0 <crc_calc>
	for(int i = 0; i < PID_len; i++){
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3301      	adds	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b07      	cmp	r3, #7
 80020aa:	ddec      	ble.n	8002086 <crc_generate+0xf6>
	}

	//Calculate CRC for Info field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 8;//start at MS Byte(LSB)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80020b2:	331c      	adds	r3, #28
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3b08      	subs	r3, #8
 80020c0:	4413      	add	r3, r2
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8)-1;i++){
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	e017      	b.n	80020fa <crc_generate+0x16a>
		for(int j = 0;j<8;j++){
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	e00b      	b.n	80020e8 <crc_generate+0x158>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	4413      	add	r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fedf 	bl	8001ea0 <crc_calc>
		for(int j = 0;j<8;j++){
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3301      	adds	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b07      	cmp	r3, #7
 80020ec:	ddf0      	ble.n	80020d0 <crc_generate+0x140>
		}
		curr_mem -= 8;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	3b08      	subs	r3, #8
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8)-1;i++){
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	3301      	adds	r3, #1
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	da00      	bge.n	8002108 <crc_generate+0x178>
 8002106:	3307      	adds	r3, #7
 8002108:	10db      	asrs	r3, r3, #3
 800210a:	3b01      	subs	r3, #1
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	429a      	cmp	r2, r3
 8002110:	dbdb      	blt.n	80020ca <crc_generate+0x13a>
	}

	sprintf(uartData, "rx_bitcnt = %d\n", rxBit_count);
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <crc_generate+0x1e4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	4917      	ldr	r1, [pc, #92]	; (8002178 <crc_generate+0x1e8>)
 800211a:	4813      	ldr	r0, [pc, #76]	; (8002168 <crc_generate+0x1d8>)
 800211c:	f004 f988 	bl	8006430 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002120:	4811      	ldr	r0, [pc, #68]	; (8002168 <crc_generate+0x1d8>)
 8002122:	f7fe f875 	bl	8000210 <strlen>
 8002126:	4603      	mov	r3, r0
 8002128:	b29a      	uxth	r2, r3
 800212a:	230a      	movs	r3, #10
 800212c:	490e      	ldr	r1, [pc, #56]	; (8002168 <crc_generate+0x1d8>)
 800212e:	4810      	ldr	r0, [pc, #64]	; (8002170 <crc_generate+0x1e0>)
 8002130:	f003 fa55 	bl	80055de <HAL_UART_Transmit>

	sprintf(uartData, "bitcnt_ptr = %d\n", *crc_count_ptr);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4910      	ldr	r1, [pc, #64]	; (800217c <crc_generate+0x1ec>)
 800213c:	480a      	ldr	r0, [pc, #40]	; (8002168 <crc_generate+0x1d8>)
 800213e:	f004 f977 	bl	8006430 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002142:	4809      	ldr	r0, [pc, #36]	; (8002168 <crc_generate+0x1d8>)
 8002144:	f7fe f864 	bl	8000210 <strlen>
 8002148:	4603      	mov	r3, r0
 800214a:	b29a      	uxth	r2, r3
 800214c:	230a      	movs	r3, #10
 800214e:	4906      	ldr	r1, [pc, #24]	; (8002168 <crc_generate+0x1d8>)
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <crc_generate+0x1e0>)
 8002152:	f003 fa44 	bl	80055de <HAL_UART_Transmit>
	*crc_count_ptr = 0;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	bf00      	nop
 800215e:	3728      	adds	r7, #40	; 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	bdb0      	pop	{r4, r5, r7, pc}
 8002164:	200000b0 	.word	0x200000b0
 8002168:	20001f3c 	.word	0x20001f3c
 800216c:	080080d8 	.word	0x080080d8
 8002170:	20003d60 	.word	0x20003d60
 8002174:	20000094 	.word	0x20000094
 8002178:	080080f4 	.word	0x080080f4
 800217c:	08008104 	.word	0x08008104

08002180 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 800218a:	f000 f999 	bl	80024c0 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <initProgram+0x58>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	7013      	strb	r3, [r2, #0]
	toggleMode();
 8002194:	f000 f826 	bl	80021e4 <toggleMode>
	toggleMode();
 8002198:	f000 f824 	bl	80021e4 <toggleMode>

	if (mode) {
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <initProgram+0x58>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <initProgram+0x5c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2264      	movs	r2, #100	; 0x64
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <initProgram+0x60>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f240 323f 	movw	r2, #831	; 0x33f
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80021b6:	e009      	b.n	80021cc <initProgram+0x4c>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <initProgram+0x5c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <initProgram+0x60>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 80021cc:	f7fe ff52 	bl	8001074 <init_AX25>
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20003d08 	.word	0x20003d08
 80021dc:	20003d20 	.word	0x20003d20
 80021e0:	20002c68 	.word	0x20002c68

080021e4 <toggleMode>:



void toggleMode() {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80021e8:	2006      	movs	r0, #6
 80021ea:	f001 fa3e 	bl	800366a <HAL_NVIC_DisableIRQ>

	//Stop DAC
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80021ee:	2100      	movs	r1, #0
 80021f0:	4824      	ldr	r0, [pc, #144]	; (8002284 <toggleMode+0xa0>)
 80021f2:	f001 fa76 	bl	80036e2 <HAL_DAC_Stop_DMA>

	//Toggle mode
	mode = !mode;
 80021f6:	4b24      	ldr	r3, [pc, #144]	; (8002288 <toggleMode+0xa4>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	bf14      	ite	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	2300      	moveq	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f083 0301 	eor.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <toggleMode+0xa4>)
 8002212:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <toggleMode+0xa4>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	2120      	movs	r1, #32
 800221c:	481b      	ldr	r0, [pc, #108]	; (800228c <toggleMode+0xa8>)
 800221e:	f001 fffb 	bl	8004218 <HAL_GPIO_WritePin>
	midbit = false;
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <toggleMode+0xac>)
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 8002228:	481a      	ldr	r0, [pc, #104]	; (8002294 <toggleMode+0xb0>)
 800222a:	f002 fd8a 	bl	8004d42 <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <toggleMode+0xb0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <toggleMode+0xa4>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <toggleMode+0x6e>
		//Set Timer periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <toggleMode+0xb4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2264      	movs	r2, #100	; 0x64
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <toggleMode+0xb0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f240 323f 	movw	r2, #831	; 0x33f
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002250:	e00f      	b.n	8002272 <toggleMode+0x8e>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <toggleMode+0xb4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f242 7210 	movw	r2, #10000	; 0x2710
 800225a:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <toggleMode+0xb0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 8002266:	480b      	ldr	r0, [pc, #44]	; (8002294 <toggleMode+0xb0>)
 8002268:	f002 fd96 	bl	8004d98 <HAL_TIM_Base_Start_IT>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800226c:	2006      	movs	r0, #6
 800226e:	f001 f9ee 	bl	800364e <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002278:	4804      	ldr	r0, [pc, #16]	; (800228c <toggleMode+0xa8>)
 800227a:	f001 ffcd 	bl	8004218 <HAL_GPIO_WritePin>
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20003d0c 	.word	0x20003d0c
 8002288:	20003d08 	.word	0x20003d08
 800228c:	40020000 	.word	0x40020000
 8002290:	20000098 	.word	0x20000098
 8002294:	20002c68 	.word	0x20002c68
 8002298:	20003d20 	.word	0x20003d20

0800229c <loadPeriodBuffer>:

void loadPeriodBuffer(int timerCnt) {
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	periodBuffer[periodSaveCount] = timerCnt;
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <loadPeriodBuffer+0x40>)
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <loadPeriodBuffer+0x44>)
 80022ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	periodSaveCount++;
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <loadPeriodBuffer+0x40>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <loadPeriodBuffer+0x40>)
 80022bc:	801a      	strh	r2, [r3, #0]
	if (periodSaveCount >= RX_BUFFERSIZE) {
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <loadPeriodBuffer+0x40>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c6:	d302      	bcc.n	80022ce <loadPeriodBuffer+0x32>
		periodSaveCount = 0;
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <loadPeriodBuffer+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	801a      	strh	r2, [r3, #0]
	}
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	2000009c 	.word	0x2000009c
 80022e0:	20002d08 	.word	0x20002d08

080022e4 <Tim3IT>:
void Tim3IT() {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	if (mode) {
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <Tim3IT+0x3c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <Tim3IT+0x1c>
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80022f0:	2100      	movs	r1, #0
 80022f2:	480c      	ldr	r0, [pc, #48]	; (8002324 <Tim3IT+0x40>)
 80022f4:	f001 f9f5 	bl	80036e2 <HAL_DAC_Stop_DMA>
		midbit = false;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <Tim3IT+0x44>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
		if(sampusecount>SAMP_PER_BAUD){
			loadPeriodBuffer(0);
		}
		sampusecount++;
	}
}
 80022fe:	e00c      	b.n	800231a <Tim3IT+0x36>
		if(sampusecount>SAMP_PER_BAUD){
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <Tim3IT+0x48>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d902      	bls.n	800230e <Tim3IT+0x2a>
			loadPeriodBuffer(0);
 8002308:	2000      	movs	r0, #0
 800230a:	f7ff ffc7 	bl	800229c <loadPeriodBuffer>
		sampusecount++;
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <Tim3IT+0x48>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <Tim3IT+0x48>)
 8002318:	701a      	strb	r2, [r3, #0]
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20003d08 	.word	0x20003d08
 8002324:	20003d0c 	.word	0x20003d0c
 8002328:	20000098 	.word	0x20000098
 800232c:	2000009a 	.word	0x2000009a

08002330 <FreqCounterPinEXTI>:
void FreqCounterPinEXTI() {
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	loadPeriodBuffer(htim2.Instance->CNT);
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <FreqCounterPinEXTI+0x24>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ffae 	bl	800229c <loadPeriodBuffer>
	htim2.Instance->CNT = 0;
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <FreqCounterPinEXTI+0x24>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2200      	movs	r2, #0
 8002346:	625a      	str	r2, [r3, #36]	; 0x24
	sampusecount = 0;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <FreqCounterPinEXTI+0x28>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20003d20 	.word	0x20003d20
 8002358:	2000009a 	.word	0x2000009a
 800235c:	00000000 	.word	0x00000000

08002360 <edit_sineval>:
bool bitStream[10];

uint32_t lowFrequency[2 * LOWF_SAMP];
uint32_t highFrequency[2 * HIGHF_SAMP];

void edit_sineval(uint32_t *sinArray, int arraySize, int waves, float shiftPercent) {
 8002360:	b5b0      	push	{r4, r5, r7, lr}
 8002362:	b08c      	sub	sp, #48	; 0x30
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	ed87 0a00 	vstr	s0, [r7]
	double ampl 		= OUT_AMPL / 2;						//Amplitude of wave
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	4c3c      	ldr	r4, [pc, #240]	; (8002468 <edit_sineval+0x108>)
 8002376:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double phaseShift 	= shiftPercent * 2 * PI;	//Desired phase shift
 800237a:	edd7 7a00 	vldr	s15, [r7]
 800237e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002382:	ee17 0a90 	vmov	r0, s15
 8002386:	f7fe f8ff 	bl	8000588 <__aeabi_f2d>
 800238a:	a333      	add	r3, pc, #204	; (adr r3, 8002458 <edit_sineval+0xf8>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fe f952 	bl	8000638 <__aeabi_dmul>
 8002394:	4603      	mov	r3, r0
 8002396:	460c      	mov	r4, r1
 8002398:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double w 			= 2 * PI  * waves / arraySize;
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7fe f8e1 	bl	8000564 <__aeabi_i2d>
 80023a2:	a32f      	add	r3, pc, #188	; (adr r3, 8002460 <edit_sineval+0x100>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe f946 	bl	8000638 <__aeabi_dmul>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	4625      	mov	r5, r4
 80023b2:	461c      	mov	r4, r3
 80023b4:	68b8      	ldr	r0, [r7, #8]
 80023b6:	f7fe f8d5 	bl	8000564 <__aeabi_i2d>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fe fa63 	bl	800088c <__aeabi_ddiv>
 80023c6:	4603      	mov	r3, r0
 80023c8:	460c      	mov	r4, r1
 80023ca:	e9c7 3404 	strd	r3, r4, [r7, #16]

	for (int i = 0; i < arraySize; i++) {
 80023ce:	2300      	movs	r3, #0
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d2:	e036      	b.n	8002442 <edit_sineval+0xe2>
		//formula in DAC Document
		sinArray[i] = (sin((i * w) + phaseShift) + 1) * ampl;
 80023d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023d6:	f7fe f8c5 	bl	8000564 <__aeabi_i2d>
 80023da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023de:	f7fe f92b 	bl	8000638 <__aeabi_dmul>
 80023e2:	4603      	mov	r3, r0
 80023e4:	460c      	mov	r4, r1
 80023e6:	4618      	mov	r0, r3
 80023e8:	4621      	mov	r1, r4
 80023ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ee:	f7fd ff6d 	bl	80002cc <__adddf3>
 80023f2:	4603      	mov	r3, r0
 80023f4:	460c      	mov	r4, r1
 80023f6:	ec44 3b17 	vmov	d7, r3, r4
 80023fa:	eeb0 0a47 	vmov.f32	s0, s14
 80023fe:	eef0 0a67 	vmov.f32	s1, s15
 8002402:	f004 fc11 	bl	8006c28 <sin>
 8002406:	ec51 0b10 	vmov	r0, r1, d0
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <edit_sineval+0x10c>)
 8002410:	f7fd ff5c 	bl	80002cc <__adddf3>
 8002414:	4603      	mov	r3, r0
 8002416:	460c      	mov	r4, r1
 8002418:	4618      	mov	r0, r3
 800241a:	4621      	mov	r1, r4
 800241c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002420:	f7fe f90a 	bl	8000638 <__aeabi_dmul>
 8002424:	4603      	mov	r3, r0
 8002426:	460c      	mov	r4, r1
 8002428:	4618      	mov	r0, r3
 800242a:	4621      	mov	r1, r4
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	18d4      	adds	r4, r2, r3
 8002434:	f7fe fbc2 	bl	8000bbc <__aeabi_d2uiz>
 8002438:	4603      	mov	r3, r0
 800243a:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < arraySize; i++) {
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	3301      	adds	r3, #1
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	429a      	cmp	r2, r3
 8002448:	dbc4      	blt.n	80023d4 <edit_sineval+0x74>
	}
}
 800244a:	bf00      	nop
 800244c:	3730      	adds	r7, #48	; 0x30
 800244e:	46bd      	mov	sp, r7
 8002450:	bdb0      	pop	{r4, r5, r7, pc}
 8002452:	bf00      	nop
 8002454:	f3af 8000 	nop.w
 8002458:	4d12d84a 	.word	0x4d12d84a
 800245c:	400921fb 	.word	0x400921fb
 8002460:	4d12d84a 	.word	0x4d12d84a
 8002464:	401921fb 	.word	0x401921fb
 8002468:	406f8000 	.word	0x406f8000
 800246c:	3ff00000 	.word	0x3ff00000

08002470 <generateBitstream>:
				__NOP();		//Just wait for timer3 IT to go off.
		}
		HAL_TIM_Base_Stop(&htim3);
	}
}
void generateBitstream() {
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <generateBitstream+0x4c>)
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <generateBitstream+0x4c>)
 800247c:	2201      	movs	r2, #1
 800247e:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <generateBitstream+0x4c>)
 8002482:	2201      	movs	r2, #1
 8002484:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <generateBitstream+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <generateBitstream+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <generateBitstream+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <generateBitstream+0x4c>)
 800249a:	2201      	movs	r2, #1
 800249c:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <generateBitstream+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <generateBitstream+0x4c>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <generateBitstream+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	725a      	strb	r2, [r3, #9]

}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20002af4 	.word	0x20002af4

080024c0 <initOUTData>:
void initOUTData() {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
 80024c4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80024e8 <initOUTData+0x28>
 80024c8:	2202      	movs	r2, #2
 80024ca:	21a6      	movs	r1, #166	; 0xa6
 80024cc:	4807      	ldr	r0, [pc, #28]	; (80024ec <initOUTData+0x2c>)
 80024ce:	f7ff ff47 	bl	8002360 <edit_sineval>
	edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
 80024d2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80024f0 <initOUTData+0x30>
 80024d6:	2202      	movs	r2, #2
 80024d8:	215a      	movs	r1, #90	; 0x5a
 80024da:	4806      	ldr	r0, [pc, #24]	; (80024f4 <initOUTData+0x34>)
 80024dc:	f7ff ff40 	bl	8002360 <edit_sineval>
	generateBitstream();
 80024e0:	f7ff ffc6 	bl	8002470 <generateBitstream>
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	3f7eb852 	.word	0x3f7eb852
 80024ec:	20001ca4 	.word	0x20001ca4
 80024f0:	3f7d70a4 	.word	0x3f7d70a4
 80024f4:	20002b00 	.word	0x20002b00

080024f8 <pertobit>:
uint8_t sampusecount = 0;
uint16_t periodSaveCount = 0;
uint16_t trackBit = 0;
uint16_t bitSaveCount = 0;

int pertobit(uint32_t inputPeriod) {
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / inputPeriod;
 8002500:	4a10      	ldr	r2, [pc, #64]	; (8002544 <pertobit+0x4c>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	60fb      	str	r3, [r7, #12]

//	sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	//return freq;
	if ((HIGHFREQ - FREQDEV < freq) && (freq < HIGHFREQ + FREQDEV))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002510:	dd06      	ble.n	8002520 <pertobit+0x28>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f640 2227 	movw	r2, #2599	; 0xa27
 8002518:	4293      	cmp	r3, r2
 800251a:	dc01      	bgt.n	8002520 <pertobit+0x28>
		return 1;
 800251c:	2301      	movs	r3, #1
 800251e:	e00b      	b.n	8002538 <pertobit+0x40>
	if ((LOWFREQ - FREQDEV < freq) && (freq < LOWFREQ + FREQDEV))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002526:	dd05      	ble.n	8002534 <pertobit+0x3c>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800252e:	da01      	bge.n	8002534 <pertobit+0x3c>
		return 0;
 8002530:	2300      	movs	r3, #0
 8002532:	e001      	b.n	8002538 <pertobit+0x40>
	else
		return -1;
 8002534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	00989680 	.word	0x00989680

08002548 <loadBit>:
int loadBit(){
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
	int currbit = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
	int nextbit = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	603b      	str	r3, [r7, #0]

	currbit = pertobit(periodBuffer[trackBit]);
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <loadBit+0xf4>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	4b38      	ldr	r3, [pc, #224]	; (8002640 <loadBit+0xf8>)
 800255e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ffc8 	bl	80024f8 <pertobit>
 8002568:	6078      	str	r0, [r7, #4]

	//Low frequency should have 1 bit per baud
	if(currbit==0){
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d107      	bne.n	8002580 <loadBit+0x38>
		bitBuffer[bitSaveCount] = 0;
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <loadBit+0xfc>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	4b34      	ldr	r3, [pc, #208]	; (8002648 <loadBit+0x100>)
 8002578:	2200      	movs	r2, #0
 800257a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800257e:	e03c      	b.n	80025fa <loadBit+0xb2>
	}

	//High frequency should have 2 high bits per baud
	else if(currbit==1){
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d131      	bne.n	80025ea <loadBit+0xa2>
		//Gather next bit
		//ternary assign: var = (cond)?if_true:if_false;
		nextbit = (trackBit!=RX_BUFFERSIZE-1)?pertobit(periodBuffer[trackBit+1]):pertobit(periodBuffer[0]);
 8002586:	4b2d      	ldr	r3, [pc, #180]	; (800263c <loadBit+0xf4>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800258e:	4293      	cmp	r3, r2
 8002590:	d00a      	beq.n	80025a8 <loadBit+0x60>
 8002592:	4b2a      	ldr	r3, [pc, #168]	; (800263c <loadBit+0xf4>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	4a29      	ldr	r2, [pc, #164]	; (8002640 <loadBit+0xf8>)
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ffaa 	bl	80024f8 <pertobit>
 80025a4:	4603      	mov	r3, r0
 80025a6:	e005      	b.n	80025b4 <loadBit+0x6c>
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <loadBit+0xf8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ffa3 	bl	80024f8 <pertobit>
 80025b2:	4603      	mov	r3, r0
 80025b4:	603b      	str	r3, [r7, #0]

		if(nextbit==1){
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10d      	bne.n	80025d8 <loadBit+0x90>
			//High frequency detected, skip next bit
			trackBit++;
 80025bc:	4b1f      	ldr	r3, [pc, #124]	; (800263c <loadBit+0xf4>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <loadBit+0xf4>)
 80025c6:	801a      	strh	r2, [r3, #0]
			bitBuffer[bitSaveCount] = 1;
 80025c8:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <loadBit+0xfc>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <loadBit+0x100>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80025d6:	e010      	b.n	80025fa <loadBit+0xb2>
		}
		else {
			bitBuffer[bitSaveCount] = -1;
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <loadBit+0xfc>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <loadBit+0x100>)
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295
 80025e4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80025e8:	e007      	b.n	80025fa <loadBit+0xb2>
		}
	}
	//Invalid bit
	else{
		bitBuffer[bitSaveCount] = -1;
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <loadBit+0xfc>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	4619      	mov	r1, r3
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <loadBit+0x100>)
 80025f2:	f04f 32ff 	mov.w	r2, #4294967295
 80025f6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	}

	//Increment trackBit
	trackBit++;
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <loadBit+0xf4>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <loadBit+0xf4>)
 8002604:	801a      	strh	r2, [r3, #0]
	if (trackBit >= RX_BUFFERSIZE)
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <loadBit+0xf4>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260e:	d302      	bcc.n	8002616 <loadBit+0xce>
		trackBit = 0;
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <loadBit+0xf4>)
 8002612:	2200      	movs	r2, #0
 8002614:	801a      	strh	r2, [r3, #0]

	//Increment bitSaveCount
	bitSaveCount++;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <loadBit+0xfc>)
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	3301      	adds	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <loadBit+0xfc>)
 8002620:	801a      	strh	r2, [r3, #0]
	if (bitSaveCount >= RX_BUFFERSIZE)
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <loadBit+0xfc>)
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262a:	d302      	bcc.n	8002632 <loadBit+0xea>
		bitSaveCount = 0;
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <loadBit+0xfc>)
 800262e:	2200      	movs	r2, #0
 8002630:	801a      	strh	r2, [r3, #0]

	return currbit;
 8002632:	687b      	ldr	r3, [r7, #4]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	2000009e 	.word	0x2000009e
 8002640:	20002d08 	.word	0x20002d08
 8002644:	200000a0 	.word	0x200000a0
 8002648:	20003da0 	.word	0x20003da0

0800264c <loadOctet>:
int loadOctet(bool* bufferptr) {
 800264c:	b5b0      	push	{r4, r5, r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	int bit;
	bool myPtr[8];
	bool isFlag = true;
 8002654:	2301      	movs	r3, #1
 8002656:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < 8; i++) {
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	e024      	b.n	80026a8 <loadOctet+0x5c>
		bit = loadBit();
 800265e:	f7ff ff73 	bl	8002548 <loadBit>
 8002662:	6138      	str	r0, [r7, #16]
        if(bit < 0){
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	da02      	bge.n	8002670 <loadOctet+0x24>
        	return -1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	e07d      	b.n	800276c <loadOctet+0x120>
        }
		myPtr[i] = bit;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf14      	ite	ne
 8002676:	2301      	movne	r3, #1
 8002678:	2300      	moveq	r3, #0
 800267a:	b2d9      	uxtb	r1, r3
 800267c:	f107 0208 	add.w	r2, r7, #8
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4413      	add	r3, r2
 8002684:	460a      	mov	r2, r1
 8002686:	701a      	strb	r2, [r3, #0]
        if(myPtr[i] != AX25TBYTE[i]){
 8002688:	f107 0208 	add.w	r2, r7, #8
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	4938      	ldr	r1, [pc, #224]	; (8002774 <loadOctet+0x128>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	440b      	add	r3, r1
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <loadOctet+0x56>
        	isFlag = false;
 800269e:	2300      	movs	r3, #0
 80026a0:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) {
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2b07      	cmp	r3, #7
 80026ac:	ddd7      	ble.n	800265e <loadOctet+0x12>
        }
    }
	//If this is not a flag, copy the values into the buffer pointer
	if(!isFlag){
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d057      	beq.n	800276a <loadOctet+0x11e>
		sprintf(uartData, "Printing octet = ");
 80026ba:	4a2f      	ldr	r2, [pc, #188]	; (8002778 <loadOctet+0x12c>)
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <loadOctet+0x130>)
 80026be:	4615      	mov	r5, r2
 80026c0:	461c      	mov	r4, r3
 80026c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c4:	6028      	str	r0, [r5, #0]
 80026c6:	6069      	str	r1, [r5, #4]
 80026c8:	60aa      	str	r2, [r5, #8]
 80026ca:	60eb      	str	r3, [r5, #12]
 80026cc:	8823      	ldrh	r3, [r4, #0]
 80026ce:	822b      	strh	r3, [r5, #16]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80026d0:	4829      	ldr	r0, [pc, #164]	; (8002778 <loadOctet+0x12c>)
 80026d2:	f7fd fd9d 	bl	8000210 <strlen>
 80026d6:	4603      	mov	r3, r0
 80026d8:	b29a      	uxth	r2, r3
 80026da:	230a      	movs	r3, #10
 80026dc:	4926      	ldr	r1, [pc, #152]	; (8002778 <loadOctet+0x12c>)
 80026de:	4828      	ldr	r0, [pc, #160]	; (8002780 <loadOctet+0x134>)
 80026e0:	f002 ff7d 	bl	80055de <HAL_UART_Transmit>

		for(int i = 0;i<8;i++){
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e02c      	b.n	8002744 <loadOctet+0xf8>
			bufferptr[7-i] = (myPtr[7-i]==1)?true:false;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f1c3 0307 	rsb	r3, r3, #7
 80026f0:	f107 0220 	add.w	r2, r7, #32
 80026f4:	4413      	add	r3, r2
 80026f6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f1c3 0307 	rsb	r3, r3, #7
 8002700:	4619      	mov	r1, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	440b      	add	r3, r1
 8002706:	701a      	strb	r2, [r3, #0]
			rxBit_count++;
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <loadOctet+0x138>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	4a1d      	ldr	r2, [pc, #116]	; (8002784 <loadOctet+0x138>)
 8002710:	6013      	str	r3, [r2, #0]
			sprintf(uartData, " %d ",bufferptr[7-i]);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f1c3 0307 	rsb	r3, r3, #7
 8002718:	461a      	mov	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4919      	ldr	r1, [pc, #100]	; (8002788 <loadOctet+0x13c>)
 8002724:	4814      	ldr	r0, [pc, #80]	; (8002778 <loadOctet+0x12c>)
 8002726:	f003 fe83 	bl	8006430 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800272a:	4813      	ldr	r0, [pc, #76]	; (8002778 <loadOctet+0x12c>)
 800272c:	f7fd fd70 	bl	8000210 <strlen>
 8002730:	4603      	mov	r3, r0
 8002732:	b29a      	uxth	r2, r3
 8002734:	230a      	movs	r3, #10
 8002736:	4910      	ldr	r1, [pc, #64]	; (8002778 <loadOctet+0x12c>)
 8002738:	4811      	ldr	r0, [pc, #68]	; (8002780 <loadOctet+0x134>)
 800273a:	f002 ff50 	bl	80055de <HAL_UART_Transmit>
		for(int i = 0;i<8;i++){
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3301      	adds	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b07      	cmp	r3, #7
 8002748:	ddcf      	ble.n	80026ea <loadOctet+0x9e>
		}
		sprintf(uartData, "\r\n");
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <loadOctet+0x12c>)
 800274c:	4a0f      	ldr	r2, [pc, #60]	; (800278c <loadOctet+0x140>)
 800274e:	8811      	ldrh	r1, [r2, #0]
 8002750:	7892      	ldrb	r2, [r2, #2]
 8002752:	8019      	strh	r1, [r3, #0]
 8002754:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002756:	4808      	ldr	r0, [pc, #32]	; (8002778 <loadOctet+0x12c>)
 8002758:	f7fd fd5a 	bl	8000210 <strlen>
 800275c:	4603      	mov	r3, r0
 800275e:	b29a      	uxth	r2, r3
 8002760:	230a      	movs	r3, #10
 8002762:	4905      	ldr	r1, [pc, #20]	; (8002778 <loadOctet+0x12c>)
 8002764:	4806      	ldr	r0, [pc, #24]	; (8002780 <loadOctet+0x134>)
 8002766:	f002 ff3a 	bl	80055de <HAL_UART_Transmit>
	}
	return isFlag;
 800276a:	7ffb      	ldrb	r3, [r7, #31]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bdb0      	pop	{r4, r5, r7, pc}
 8002774:	20000000 	.word	0x20000000
 8002778:	20001f3c 	.word	0x20001f3c
 800277c:	08008118 	.word	0x08008118
 8002780:	20003d60 	.word	0x20003d60
 8002784:	20000094 	.word	0x20000094
 8002788:	0800812c 	.word	0x0800812c
 800278c:	08008134 	.word	0x08008134

08002790 <streamGet>:
int streamGet() {
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	b090      	sub	sp, #64	; 0x40
 8002794:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002796:	4b72      	ldr	r3, [pc, #456]	; (8002960 <streamGet+0x1d0>)
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28

	int byteArray[8];
	int max_octets = (int)(AX25_PACKET_MAX)/8;
 800279a:	f240 134b 	movw	r3, #331	; 0x14b
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
	int octet_count,good_octet;
	bool gotflag;

	//Just do this unless we need to toggle
	while(!changeMode){
 80027a0:	e0cf      	b.n	8002942 <streamGet+0x1b2>
		gotflag = false;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//Slide bits
		for(int i = 0; i < 7; i++){
 80027a8:	2300      	movs	r3, #0
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
 80027ac:	e011      	b.n	80027d2 <streamGet+0x42>
			byteArray[i] = byteArray[i+1];
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	3301      	adds	r3, #1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80027b8:	4413      	add	r3, r2
 80027ba:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80027c6:	440b      	add	r3, r1
 80027c8:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 7; i++){
 80027cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ce:	3301      	adds	r3, #1
 80027d0:	633b      	str	r3, [r7, #48]	; 0x30
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	2b06      	cmp	r3, #6
 80027d6:	ddea      	ble.n	80027ae <streamGet+0x1e>
		}
		byteArray[7] = loadBit();
 80027d8:	f7ff feb6 	bl	8002548 <loadBit>
 80027dc:	4603      	mov	r3, r0
 80027de:	623b      	str	r3, [r7, #32]
		//sprintf(uartData, "Got bit %d\r\n",byteArray[7]);
		//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		//Detect AX25 flag bytes
		for(int i = 0;i < 8; i++){
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e4:	e019      	b.n	800281a <streamGet+0x8a>
			//If the byte isn't lined up, break loop
			if(byteArray[i]!=AX25TBYTE[i]) {
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80027ee:	4413      	add	r3, r2
 80027f0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027f4:	495b      	ldr	r1, [pc, #364]	; (8002964 <streamGet+0x1d4>)
 80027f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f8:	440a      	add	r2, r1
 80027fa:	7812      	ldrb	r2, [r2, #0]
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <streamGet+0x78>
				gotflag = false;
 8002800:	2300      	movs	r3, #0
 8002802:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002806:	e00b      	b.n	8002820 <streamGet+0x90>
			}
			//If the loop makes it to the lowest bit, the flag should be lined up
			else if(i==7){
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	2b07      	cmp	r3, #7
 800280c:	d102      	bne.n	8002814 <streamGet+0x84>
				gotflag = true;
 800280e:	2301      	movs	r3, #1
 8002810:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0;i < 8; i++){
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	3301      	adds	r3, #1
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	2b07      	cmp	r3, #7
 800281e:	dde2      	ble.n	80027e6 <streamGet+0x56>
			}
		}

		//Got flag
		if(gotflag){
 8002820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 808c 	beq.w	8002942 <streamGet+0x1b2>
			sprintf(uartData, "Start AX.25 Flag Detected\r\n");
 800282a:	4a4f      	ldr	r2, [pc, #316]	; (8002968 <streamGet+0x1d8>)
 800282c:	4b4f      	ldr	r3, [pc, #316]	; (800296c <streamGet+0x1dc>)
 800282e:	4615      	mov	r5, r2
 8002830:	461c      	mov	r4, r3
 8002832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002834:	6028      	str	r0, [r5, #0]
 8002836:	6069      	str	r1, [r5, #4]
 8002838:	60aa      	str	r2, [r5, #8]
 800283a:	60eb      	str	r3, [r5, #12]
 800283c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800283e:	6128      	str	r0, [r5, #16]
 8002840:	6169      	str	r1, [r5, #20]
 8002842:	61aa      	str	r2, [r5, #24]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002844:	4848      	ldr	r0, [pc, #288]	; (8002968 <streamGet+0x1d8>)
 8002846:	f7fd fce3 	bl	8000210 <strlen>
 800284a:	4603      	mov	r3, r0
 800284c:	b29a      	uxth	r2, r3
 800284e:	230a      	movs	r3, #10
 8002850:	4945      	ldr	r1, [pc, #276]	; (8002968 <streamGet+0x1d8>)
 8002852:	4847      	ldr	r0, [pc, #284]	; (8002970 <streamGet+0x1e0>)
 8002854:	f002 fec3 	bl	80055de <HAL_UART_Transmit>
			octet_count  = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c

			//Until AX.25 buffer overflows, continue reading octets
			good_octet = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
			while( (good_octet==0) && (octet_count < max_octets) ){
 8002860:	e00a      	b.n	8002878 <streamGet+0xe8>
				good_octet = loadOctet(&local_packet->AX25_PACKET[octet_count*8]);
 8002862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002868:	4413      	add	r3, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff feee 	bl	800264c <loadOctet>
 8002870:	63b8      	str	r0, [r7, #56]	; 0x38
				//sprintf(uartData, "Loaded octet %d out of %d\r\n",octet_count,max_octets);
				//sprintf(uartData, "good_octet: %d\r\n",good_octet);
				//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

				octet_count+=1;
 8002872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002874:	3301      	adds	r3, #1
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
			while( (good_octet==0) && (octet_count < max_octets) ){
 8002878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287a:	2b00      	cmp	r3, #0
 800287c:	d103      	bne.n	8002886 <streamGet+0xf6>
 800287e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	429a      	cmp	r2, r3
 8002884:	dbed      	blt.n	8002862 <streamGet+0xd2>
			}

			//If ax.25 buffer overflows or an octet was bad, this was a bad packet
			if((octet_count >= max_octets) || (good_octet!=1)){
 8002886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	429a      	cmp	r2, r3
 800288c:	da02      	bge.n	8002894 <streamGet+0x104>
 800288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002890:	2b01      	cmp	r3, #1
 8002892:	d00f      	beq.n	80028b4 <streamGet+0x124>
				sprintf(uartData, "Bad packet! Not enough octets\r\n\n",octet_count);
 8002894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002896:	4937      	ldr	r1, [pc, #220]	; (8002974 <streamGet+0x1e4>)
 8002898:	4833      	ldr	r0, [pc, #204]	; (8002968 <streamGet+0x1d8>)
 800289a:	f003 fdc9 	bl	8006430 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800289e:	4832      	ldr	r0, [pc, #200]	; (8002968 <streamGet+0x1d8>)
 80028a0:	f7fd fcb6 	bl	8000210 <strlen>
 80028a4:	4603      	mov	r3, r0
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	230a      	movs	r3, #10
 80028aa:	492f      	ldr	r1, [pc, #188]	; (8002968 <streamGet+0x1d8>)
 80028ac:	4830      	ldr	r0, [pc, #192]	; (8002970 <streamGet+0x1e0>)
 80028ae:	f002 fe96 	bl	80055de <HAL_UART_Transmit>
 80028b2:	e046      	b.n	8002942 <streamGet+0x1b2>
			}
			//
			else if(octet_count == 1){
 80028b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d12a      	bne.n	8002910 <streamGet+0x180>
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n");
 80028ba:	4a2b      	ldr	r2, [pc, #172]	; (8002968 <streamGet+0x1d8>)
 80028bc:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <streamGet+0x1e8>)
 80028be:	4615      	mov	r5, r2
 80028c0:	461c      	mov	r4, r3
 80028c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c4:	6028      	str	r0, [r5, #0]
 80028c6:	6069      	str	r1, [r5, #4]
 80028c8:	60aa      	str	r2, [r5, #8]
 80028ca:	60eb      	str	r3, [r5, #12]
 80028cc:	cc03      	ldmia	r4!, {r0, r1}
 80028ce:	6128      	str	r0, [r5, #16]
 80028d0:	6169      	str	r1, [r5, #20]
 80028d2:	8823      	ldrh	r3, [r4, #0]
 80028d4:	78a2      	ldrb	r2, [r4, #2]
 80028d6:	832b      	strh	r3, [r5, #24]
 80028d8:	4613      	mov	r3, r2
 80028da:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80028dc:	4822      	ldr	r0, [pc, #136]	; (8002968 <streamGet+0x1d8>)
 80028de:	f7fd fc97 	bl	8000210 <strlen>
 80028e2:	4603      	mov	r3, r0
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	230a      	movs	r3, #10
 80028e8:	491f      	ldr	r1, [pc, #124]	; (8002968 <streamGet+0x1d8>)
 80028ea:	4821      	ldr	r0, [pc, #132]	; (8002970 <streamGet+0x1e0>)
 80028ec:	f002 fe77 	bl	80055de <HAL_UART_Transmit>
				sprintf(uartData, "Bad packet! Not enough octetes.\r\n\n",octet_count);
 80028f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028f2:	4922      	ldr	r1, [pc, #136]	; (800297c <streamGet+0x1ec>)
 80028f4:	481c      	ldr	r0, [pc, #112]	; (8002968 <streamGet+0x1d8>)
 80028f6:	f003 fd9b 	bl	8006430 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80028fa:	481b      	ldr	r0, [pc, #108]	; (8002968 <streamGet+0x1d8>)
 80028fc:	f7fd fc88 	bl	8000210 <strlen>
 8002900:	4603      	mov	r3, r0
 8002902:	b29a      	uxth	r2, r3
 8002904:	230a      	movs	r3, #10
 8002906:	4918      	ldr	r1, [pc, #96]	; (8002968 <streamGet+0x1d8>)
 8002908:	4819      	ldr	r0, [pc, #100]	; (8002970 <streamGet+0x1e0>)
 800290a:	f002 fe68 	bl	80055de <HAL_UART_Transmit>
 800290e:	e018      	b.n	8002942 <streamGet+0x1b2>
			}
			//If ax.25 buffer does not overflow, this was a good packet
			else {
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n\n");
 8002910:	4a15      	ldr	r2, [pc, #84]	; (8002968 <streamGet+0x1d8>)
 8002912:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <streamGet+0x1f0>)
 8002914:	4615      	mov	r5, r2
 8002916:	461c      	mov	r4, r3
 8002918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291a:	6028      	str	r0, [r5, #0]
 800291c:	6069      	str	r1, [r5, #4]
 800291e:	60aa      	str	r2, [r5, #8]
 8002920:	60eb      	str	r3, [r5, #12]
 8002922:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002924:	6128      	str	r0, [r5, #16]
 8002926:	6169      	str	r1, [r5, #20]
 8002928:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800292a:	480f      	ldr	r0, [pc, #60]	; (8002968 <streamGet+0x1d8>)
 800292c:	f7fd fc70 	bl	8000210 <strlen>
 8002930:	4603      	mov	r3, r0
 8002932:	b29a      	uxth	r2, r3
 8002934:	230a      	movs	r3, #10
 8002936:	490c      	ldr	r1, [pc, #48]	; (8002968 <streamGet+0x1d8>)
 8002938:	480d      	ldr	r0, [pc, #52]	; (8002970 <streamGet+0x1e0>)
 800293a:	f002 fe50 	bl	80055de <HAL_UART_Transmit>

				return 1;
 800293e:	2301      	movs	r3, #1
 8002940:	e009      	b.n	8002956 <streamGet+0x1c6>
	while(!changeMode){
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <streamGet+0x1f4>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	f083 0301 	eor.w	r3, r3, #1
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f af28 	bne.w	80027a2 <streamGet+0x12>
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
	//Break if mode needs to change
	if(toggleMode)
		return -1;
 8002952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002956:	4618      	mov	r0, r3
 8002958:	3740      	adds	r7, #64	; 0x40
 800295a:	46bd      	mov	sp, r7
 800295c:	bdb0      	pop	{r4, r5, r7, pc}
 800295e:	bf00      	nop
 8002960:	200000b0 	.word	0x200000b0
 8002964:	20000000 	.word	0x20000000
 8002968:	20001f3c 	.word	0x20001f3c
 800296c:	08008138 	.word	0x08008138
 8002970:	20003d60 	.word	0x20003d60
 8002974:	08008154 	.word	0x08008154
 8002978:	08008178 	.word	0x08008178
 800297c:	08008194 	.word	0x08008194
 8002980:	080081b8 	.word	0x080081b8
 8002984:	20000099 	.word	0x20000099

08002988 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN PV */

/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <HAL_UART_RxCpltCallback+0x20>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 800299a:	f7fe ffbd 	bl	8001918 <UART2_EXCEPTION_CALLBACK>
  }
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40004400 	.word	0x40004400

080029ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029b0:	f000 fca0 	bl	80032f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029b4:	f000 f81e 	bl	80029f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029b8:	f000 f9a0 	bl	8002cfc <MX_GPIO_Init>
  MX_DMA_Init();
 80029bc:	f000 f97e 	bl	8002cbc <MX_DMA_Init>
  MX_DAC_Init();
 80029c0:	f000 f886 	bl	8002ad0 <MX_DAC_Init>
  MX_TIM2_Init();
 80029c4:	f000 f8ae 	bl	8002b24 <MX_TIM2_Init>
  MX_TIM3_Init();
 80029c8:	f000 f8f8 	bl	8002bbc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80029cc:	f000 f944 	bl	8002c58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 80029d0:	4806      	ldr	r0, [pc, #24]	; (80029ec <main+0x40>)
 80029d2:	f002 f992 	bl	8004cfa <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 80029d6:	4806      	ldr	r0, [pc, #24]	; (80029f0 <main+0x44>)
 80029d8:	f002 f9de 	bl	8004d98 <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 80029dc:	f000 fa5c 	bl	8002e98 <uart_gpio_init>

	initProgram(false);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7ff fbcd 	bl	8002180 <initProgram>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tx_rx();
 80029e6:	f7fe fb61 	bl	80010ac <tx_rx>
 80029ea:	e7fc      	b.n	80029e6 <main+0x3a>
 80029ec:	20003d20 	.word	0x20003d20
 80029f0:	20002c68 	.word	0x20002c68

080029f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b094      	sub	sp, #80	; 0x50
 80029f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029fa:	f107 031c 	add.w	r3, r7, #28
 80029fe:	2234      	movs	r2, #52	; 0x34
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 fd0b 	bl	800641e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a08:	f107 0308 	add.w	r3, r7, #8
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a18:	2300      	movs	r3, #0
 8002a1a:	607b      	str	r3, [r7, #4]
 8002a1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <SystemClock_Config+0xd4>)
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	4a29      	ldr	r2, [pc, #164]	; (8002ac8 <SystemClock_Config+0xd4>)
 8002a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a26:	6413      	str	r3, [r2, #64]	; 0x40
 8002a28:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <SystemClock_Config+0xd4>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a34:	2300      	movs	r3, #0
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <SystemClock_Config+0xd8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a40:	4a22      	ldr	r2, [pc, #136]	; (8002acc <SystemClock_Config+0xd8>)
 8002a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <SystemClock_Config+0xd8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a54:	2301      	movs	r3, #1
 8002a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a68:	2304      	movs	r3, #4
 8002a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002a6c:	235a      	movs	r3, #90	; 0x5a
 8002a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a70:	2302      	movs	r3, #2
 8002a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a74:	2302      	movs	r3, #2
 8002a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 feb5 	bl	80047f0 <HAL_RCC_OscConfig>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002a8c:	f000 fa2c 	bl	8002ee8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a90:	230f      	movs	r3, #15
 8002a92:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a94:	2302      	movs	r3, #2
 8002a96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	2102      	movs	r1, #2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f001 fbe4 	bl	800427c <HAL_RCC_ClockConfig>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002aba:	f000 fa15 	bl	8002ee8 <Error_Handler>
  }
}
 8002abe:	bf00      	nop
 8002ac0:	3750      	adds	r7, #80	; 0x50
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40007000 	.word	0x40007000

08002ad0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002ad6:	463b      	mov	r3, r7
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <MX_DAC_Init+0x4c>)
 8002ae0:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <MX_DAC_Init+0x50>)
 8002ae2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002ae4:	480d      	ldr	r0, [pc, #52]	; (8002b1c <MX_DAC_Init+0x4c>)
 8002ae6:	f000 fdda 	bl	800369e <HAL_DAC_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002af0:	f000 f9fa 	bl	8002ee8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002af4:	2324      	movs	r3, #36	; 0x24
 8002af6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002afc:	463b      	mov	r3, r7
 8002afe:	2200      	movs	r2, #0
 8002b00:	4619      	mov	r1, r3
 8002b02:	4806      	ldr	r0, [pc, #24]	; (8002b1c <MX_DAC_Init+0x4c>)
 8002b04:	f000 fe2e 	bl	8003764 <HAL_DAC_ConfigChannel>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002b0e:	f000 f9eb 	bl	8002ee8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20003d0c 	.word	0x20003d0c
 8002b20:	40007400 	.word	0x40007400

08002b24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2a:	f107 0308 	add.w	r3, r7, #8
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b38:	463b      	mov	r3, r7
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b40:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <MX_TIM2_Init+0x94>)
 8002b42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <MX_TIM2_Init+0x94>)
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <MX_TIM2_Init+0x94>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002b54:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <MX_TIM2_Init+0x94>)
 8002b56:	2263      	movs	r2, #99	; 0x63
 8002b58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <MX_TIM2_Init+0x94>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <MX_TIM2_Init+0x94>)
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b66:	4814      	ldr	r0, [pc, #80]	; (8002bb8 <MX_TIM2_Init+0x94>)
 8002b68:	f002 f89c 	bl	8004ca4 <HAL_TIM_Base_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002b72:	f000 f9b9 	bl	8002ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b7c:	f107 0308 	add.w	r3, r7, #8
 8002b80:	4619      	mov	r1, r3
 8002b82:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <MX_TIM2_Init+0x94>)
 8002b84:	f002 fa34 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002b8e:	f000 f9ab 	bl	8002ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b92:	2320      	movs	r3, #32
 8002b94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b9a:	463b      	mov	r3, r7
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4806      	ldr	r0, [pc, #24]	; (8002bb8 <MX_TIM2_Init+0x94>)
 8002ba0:	f002 fc40 	bl	8005424 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002baa:	f000 f99d 	bl	8002ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bae:	bf00      	nop
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20003d20 	.word	0x20003d20

08002bbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bc2:	f107 0308 	add.w	r3, r7, #8
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd0:	463b      	mov	r3, r7
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <MX_TIM3_Init+0x94>)
 8002bda:	4a1e      	ldr	r2, [pc, #120]	; (8002c54 <MX_TIM3_Init+0x98>)
 8002bdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <MX_TIM3_Init+0x94>)
 8002be0:	2259      	movs	r2, #89	; 0x59
 8002be2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <MX_TIM3_Init+0x94>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 8002bea:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <MX_TIM3_Init+0x94>)
 8002bec:	f240 3241 	movw	r2, #833	; 0x341
 8002bf0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <MX_TIM3_Init+0x94>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <MX_TIM3_Init+0x94>)
 8002bfa:	2280      	movs	r2, #128	; 0x80
 8002bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bfe:	4814      	ldr	r0, [pc, #80]	; (8002c50 <MX_TIM3_Init+0x94>)
 8002c00:	f002 f850 	bl	8004ca4 <HAL_TIM_Base_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002c0a:	f000 f96d 	bl	8002ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c14:	f107 0308 	add.w	r3, r7, #8
 8002c18:	4619      	mov	r1, r3
 8002c1a:	480d      	ldr	r0, [pc, #52]	; (8002c50 <MX_TIM3_Init+0x94>)
 8002c1c:	f002 f9e8 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002c26:	f000 f95f 	bl	8002ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c32:	463b      	mov	r3, r7
 8002c34:	4619      	mov	r1, r3
 8002c36:	4806      	ldr	r0, [pc, #24]	; (8002c50 <MX_TIM3_Init+0x94>)
 8002c38:	f002 fbf4 	bl	8005424 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002c42:	f000 f951 	bl	8002ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20002c68 	.word	0x20002c68
 8002c54:	40000400 	.word	0x40000400

08002c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c5c:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <MX_USART2_UART_Init+0x5c>)
 8002c5e:	4a16      	ldr	r2, [pc, #88]	; (8002cb8 <MX_USART2_UART_Init+0x60>)
 8002c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c62:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <MX_USART2_UART_Init+0x5c>)
 8002c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <MX_USART2_UART_Init+0x5c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <MX_USART2_UART_Init+0x5c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c76:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <MX_USART2_UART_Init+0x5c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c7c:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <MX_USART2_UART_Init+0x5c>)
 8002c7e:	220c      	movs	r2, #12
 8002c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_USART2_UART_Init+0x5c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <MX_USART2_UART_Init+0x5c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c8e:	4809      	ldr	r0, [pc, #36]	; (8002cb4 <MX_USART2_UART_Init+0x5c>)
 8002c90:	f002 fc58 	bl	8005544 <HAL_UART_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c9a:	f000 f925 	bl	8002ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	2026      	movs	r0, #38	; 0x26
 8002ca4:	f000 fcb7 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ca8:	2026      	movs	r0, #38	; 0x26
 8002caa:	f000 fcd0 	bl	800364e <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20003d60 	.word	0x20003d60
 8002cb8:	40004400 	.word	0x40004400

08002cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <MX_DMA_Init+0x3c>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <MX_DMA_Init+0x3c>)
 8002ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <MX_DMA_Init+0x3c>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	2010      	movs	r0, #16
 8002ce4:	f000 fc97 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ce8:	2010      	movs	r0, #16
 8002cea:	f000 fcb0 	bl	800364e <HAL_NVIC_EnableIRQ>

}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800

08002cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
 8002d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	4b45      	ldr	r3, [pc, #276]	; (8002e2c <MX_GPIO_Init+0x130>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	4a44      	ldr	r2, [pc, #272]	; (8002e2c <MX_GPIO_Init+0x130>)
 8002d1c:	f043 0304 	orr.w	r3, r3, #4
 8002d20:	6313      	str	r3, [r2, #48]	; 0x30
 8002d22:	4b42      	ldr	r3, [pc, #264]	; (8002e2c <MX_GPIO_Init+0x130>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b3e      	ldr	r3, [pc, #248]	; (8002e2c <MX_GPIO_Init+0x130>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a3d      	ldr	r2, [pc, #244]	; (8002e2c <MX_GPIO_Init+0x130>)
 8002d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <MX_GPIO_Init+0x130>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <MX_GPIO_Init+0x130>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a36      	ldr	r2, [pc, #216]	; (8002e2c <MX_GPIO_Init+0x130>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <MX_GPIO_Init+0x130>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <MX_GPIO_Init+0x130>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <MX_GPIO_Init+0x130>)
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <MX_GPIO_Init+0x130>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002d82:	2200      	movs	r2, #0
 8002d84:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002d88:	4829      	ldr	r0, [pc, #164]	; (8002e30 <MX_GPIO_Init+0x134>)
 8002d8a:	f001 fa45 	bl	8004218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2110      	movs	r1, #16
 8002d92:	4828      	ldr	r0, [pc, #160]	; (8002e34 <MX_GPIO_Init+0x138>)
 8002d94:	f001 fa40 	bl	8004218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <MX_GPIO_Init+0x13c>)
 8002da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	4619      	mov	r1, r3
 8002dac:	4821      	ldr	r0, [pc, #132]	; (8002e34 <MX_GPIO_Init+0x138>)
 8002dae:	f001 f8a1 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002db2:	2301      	movs	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002db6:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <MX_GPIO_Init+0x140>)
 8002db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	481a      	ldr	r0, [pc, #104]	; (8002e30 <MX_GPIO_Init+0x134>)
 8002dc6:	f001 f895 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8002dca:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4619      	mov	r1, r3
 8002de2:	4813      	ldr	r0, [pc, #76]	; (8002e30 <MX_GPIO_Init+0x134>)
 8002de4:	f001 f886 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8002de8:	2310      	movs	r3, #16
 8002dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dec:	2301      	movs	r3, #1
 8002dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df4:	2300      	movs	r3, #0
 8002df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	480d      	ldr	r0, [pc, #52]	; (8002e34 <MX_GPIO_Init+0x138>)
 8002e00:	f001 f878 	bl	8003ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002e04:	2200      	movs	r2, #0
 8002e06:	2100      	movs	r1, #0
 8002e08:	2006      	movs	r0, #6
 8002e0a:	f000 fc04 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002e0e:	2006      	movs	r0, #6
 8002e10:	f000 fc1d 	bl	800364e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e14:	2200      	movs	r2, #0
 8002e16:	2100      	movs	r1, #0
 8002e18:	2028      	movs	r0, #40	; 0x28
 8002e1a:	f000 fbfc 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e1e:	2028      	movs	r0, #40	; 0x28
 8002e20:	f000 fc15 	bl	800364e <HAL_NVIC_EnableIRQ>

}
 8002e24:	bf00      	nop
 8002e26:	3728      	adds	r7, #40	; 0x28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020000 	.word	0x40020000
 8002e34:	40020800 	.word	0x40020800
 8002e38:	10210000 	.word	0x10210000
 8002e3c:	10110000 	.word	0x10110000

08002e40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a05      	ldr	r2, [pc, #20]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d102      	bne.n	8002e56 <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 8002e50:	f7ff fa48 	bl	80022e4 <Tim3IT>
	else
		__NOP();
}
 8002e54:	e000      	b.n	8002e58 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 8002e56:	bf00      	nop
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20002c68 	.word	0x20002c68

08002e64 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 8002e74:	f7ff fa5c 	bl	8002330 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7e:	d103      	bne.n	8002e88 <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <HAL_GPIO_EXTI_Callback+0x30>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 8002e86:	e000      	b.n	8002e8a <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 8002e88:	bf00      	nop
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000099 	.word	0x20000099

08002e98 <uart_gpio_init>:


void uart_gpio_init()
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <uart_gpio_init+0x48>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <uart_gpio_init+0x48>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <uart_gpio_init+0x48>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002eba:	230c      	movs	r3, #12
 8002ebc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eca:	2307      	movs	r3, #7
 8002ecc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4804      	ldr	r0, [pc, #16]	; (8002ee4 <uart_gpio_init+0x4c>)
 8002ed4:	f001 f80e 	bl	8003ef4 <HAL_GPIO_Init>
}
 8002ed8:	bf00      	nop
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40020000 	.word	0x40020000

08002ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_MspInit+0x4c>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <HAL_MspInit+0x4c>)
 8002f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_MspInit+0x4c>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	603b      	str	r3, [r7, #0]
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_MspInit+0x4c>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <HAL_MspInit+0x4c>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_MspInit+0x4c>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f36:	2007      	movs	r0, #7
 8002f38:	f000 fb62 	bl	8003600 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40023800 	.word	0x40023800

08002f48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2f      	ldr	r2, [pc, #188]	; (8003024 <HAL_DAC_MspInit+0xdc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d158      	bne.n	800301c <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	; (8003028 <HAL_DAC_MspInit+0xe0>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a2d      	ldr	r2, [pc, #180]	; (8003028 <HAL_DAC_MspInit+0xe0>)
 8002f74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_DAC_MspInit+0xe0>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b27      	ldr	r3, [pc, #156]	; (8003028 <HAL_DAC_MspInit+0xe0>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a26      	ldr	r2, [pc, #152]	; (8003028 <HAL_DAC_MspInit+0xe0>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b24      	ldr	r3, [pc, #144]	; (8003028 <HAL_DAC_MspInit+0xe0>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fa2:	2310      	movs	r3, #16
 8002fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fae:	f107 0314 	add.w	r3, r7, #20
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	481d      	ldr	r0, [pc, #116]	; (800302c <HAL_DAC_MspInit+0xe4>)
 8002fb6:	f000 ff9d 	bl	8003ef4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002fba:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <HAL_DAC_MspInit+0xec>)
 8002fbe:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8002fc2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002fc6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8002fca:	2240      	movs	r2, #64	; 0x40
 8002fcc:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002fd4:	4b16      	ldr	r3, [pc, #88]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8002fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fda:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8002fde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fe2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fe4:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8002fe6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fea:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8002fec:	4b10      	ldr	r3, [pc, #64]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8002fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ff2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003000:	480b      	ldr	r0, [pc, #44]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8003002:	f000 fbfd 	bl	8003800 <HAL_DMA_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 800300c:	f7ff ff6c 	bl	8002ee8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a07      	ldr	r2, [pc, #28]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	4a06      	ldr	r2, [pc, #24]	; (8003030 <HAL_DAC_MspInit+0xe8>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800301c:	bf00      	nop
 800301e:	3728      	adds	r7, #40	; 0x28
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40007400 	.word	0x40007400
 8003028:	40023800 	.word	0x40023800
 800302c:	40020000 	.word	0x40020000
 8003030:	20002ca8 	.word	0x20002ca8
 8003034:	40026088 	.word	0x40026088

08003038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003048:	d10e      	bne.n	8003068 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <HAL_TIM_Base_MspInit+0x70>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <HAL_TIM_Base_MspInit+0x70>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <HAL_TIM_Base_MspInit+0x70>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003066:	e01a      	b.n	800309e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0f      	ldr	r2, [pc, #60]	; (80030ac <HAL_TIM_Base_MspInit+0x74>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d115      	bne.n	800309e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_TIM_Base_MspInit+0x70>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <HAL_TIM_Base_MspInit+0x70>)
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_TIM_Base_MspInit+0x70>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	2100      	movs	r1, #0
 8003092:	201d      	movs	r0, #29
 8003094:	f000 fabf 	bl	8003616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003098:	201d      	movs	r0, #29
 800309a:	f000 fad8 	bl	800364e <HAL_NVIC_EnableIRQ>
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40000400 	.word	0x40000400

080030b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	; 0x28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <HAL_UART_MspInit+0x94>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d133      	bne.n	800313a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <HAL_UART_MspInit+0x98>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_UART_MspInit+0x98>)
 80030dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e0:	6413      	str	r3, [r2, #64]	; 0x40
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_UART_MspInit+0x98>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_UART_MspInit+0x98>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	4a14      	ldr	r2, [pc, #80]	; (8003148 <HAL_UART_MspInit+0x98>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6313      	str	r3, [r2, #48]	; 0x30
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_UART_MspInit+0x98>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800310a:	230c      	movs	r3, #12
 800310c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003116:	2303      	movs	r3, #3
 8003118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800311a:	2307      	movs	r3, #7
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311e:	f107 0314 	add.w	r3, r7, #20
 8003122:	4619      	mov	r1, r3
 8003124:	4809      	ldr	r0, [pc, #36]	; (800314c <HAL_UART_MspInit+0x9c>)
 8003126:	f000 fee5 	bl	8003ef4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	2026      	movs	r0, #38	; 0x26
 8003130:	f000 fa71 	bl	8003616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003134:	2026      	movs	r0, #38	; 0x26
 8003136:	f000 fa8a 	bl	800364e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800313a:	bf00      	nop
 800313c:	3728      	adds	r7, #40	; 0x28
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40004400 	.word	0x40004400
 8003148:	40023800 	.word	0x40023800
 800314c:	40020000 	.word	0x40020000

08003150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003162:	e7fe      	b.n	8003162 <HardFault_Handler+0x4>

08003164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003168:	e7fe      	b.n	8003168 <MemManage_Handler+0x4>

0800316a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800316e:	e7fe      	b.n	800316e <BusFault_Handler+0x4>

08003170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003174:	e7fe      	b.n	8003174 <UsageFault_Handler+0x4>

08003176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031a4:	f000 f8f8 	bl	8003398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}

080031ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80031b0:	2001      	movs	r0, #1
 80031b2:	f001 f84b 	bl	800424c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <DMA1_Stream5_IRQHandler+0x10>)
 80031c2:	f000 fc5d 	bl	8003a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20002ca8 	.word	0x20002ca8

080031d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031d4:	4802      	ldr	r0, [pc, #8]	; (80031e0 <TIM3_IRQHandler+0x10>)
 80031d6:	f001 fe03 	bl	8004de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20002c68 	.word	0x20002c68

080031e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031e8:	4802      	ldr	r0, [pc, #8]	; (80031f4 <USART2_IRQHandler+0x10>)
 80031ea:	f002 fae7 	bl	80057bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20003d60 	.word	0x20003d60

080031f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80031fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003200:	f001 f824 	bl	800424c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}

08003208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003210:	4a14      	ldr	r2, [pc, #80]	; (8003264 <_sbrk+0x5c>)
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <_sbrk+0x60>)
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <_sbrk+0x64>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <_sbrk+0x64>)
 8003226:	4a12      	ldr	r2, [pc, #72]	; (8003270 <_sbrk+0x68>)
 8003228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <_sbrk+0x64>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	429a      	cmp	r2, r3
 8003236:	d207      	bcs.n	8003248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003238:	f003 f8bc 	bl	80063b4 <__errno>
 800323c:	4602      	mov	r2, r0
 800323e:	230c      	movs	r3, #12
 8003240:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
 8003246:	e009      	b.n	800325c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <_sbrk+0x64>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <_sbrk+0x64>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	4a05      	ldr	r2, [pc, #20]	; (800326c <_sbrk+0x64>)
 8003258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800325a:	68fb      	ldr	r3, [r7, #12]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20020000 	.word	0x20020000
 8003268:	00000400 	.word	0x00000400
 800326c:	200000a4 	.word	0x200000a4
 8003270:	20004da8 	.word	0x20004da8

08003274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <SystemInit+0x28>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <SystemInit+0x28>)
 8003280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <SystemInit+0x28>)
 800328a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800328e:	609a      	str	r2, [r3, #8]
#endif
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032a6:	e003      	b.n	80032b0 <LoopCopyDataInit>

080032a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032ae:	3104      	adds	r1, #4

080032b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032b0:	480b      	ldr	r0, [pc, #44]	; (80032e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032b8:	d3f6      	bcc.n	80032a8 <CopyDataInit>
  ldr  r2, =_sbss
 80032ba:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032bc:	e002      	b.n	80032c4 <LoopFillZerobss>

080032be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032c0:	f842 3b04 	str.w	r3, [r2], #4

080032c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032c8:	d3f9      	bcc.n	80032be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032ca:	f7ff ffd3 	bl	8003274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ce:	f003 f877 	bl	80063c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032d2:	f7ff fb6b 	bl	80029ac <main>
  bx  lr    
 80032d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032dc:	08008410 	.word	0x08008410
  ldr  r0, =_sdata
 80032e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032e4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80032e8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80032ec:	20004da8 	.word	0x20004da8

080032f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f0:	e7fe      	b.n	80032f0 <ADC_IRQHandler>
	...

080032f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032f8:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_Init+0x40>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <HAL_Init+0x40>)
 80032fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_Init+0x40>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <HAL_Init+0x40>)
 800330a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800330e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <HAL_Init+0x40>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a07      	ldr	r2, [pc, #28]	; (8003334 <HAL_Init+0x40>)
 8003316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800331c:	2003      	movs	r0, #3
 800331e:	f000 f96f 	bl	8003600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003322:	2000      	movs	r0, #0
 8003324:	f000 f808 	bl	8003338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003328:	f7ff fde6 	bl	8002ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00

08003338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_InitTick+0x54>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_InitTick+0x58>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4619      	mov	r1, r3
 800334a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800334e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003352:	fbb2 f3f3 	udiv	r3, r2, r3
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f995 	bl	8003686 <HAL_SYSTICK_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e00e      	b.n	8003384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b0f      	cmp	r3, #15
 800336a:	d80a      	bhi.n	8003382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800336c:	2200      	movs	r2, #0
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	f000 f94f 	bl	8003616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <HAL_InitTick+0x5c>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000008 	.word	0x20000008
 8003390:	20000010 	.word	0x20000010
 8003394:	2000000c 	.word	0x2000000c

08003398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_IncTick+0x20>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_IncTick+0x24>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HAL_IncTick+0x24>)
 80033aa:	6013      	str	r3, [r2, #0]
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000010 	.word	0x20000010
 80033bc:	20004da0 	.word	0x20004da0

080033c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return uwTick;
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <HAL_GetTick+0x14>)
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20004da0 	.word	0x20004da0

080033d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7ff ffee 	bl	80033c0 <HAL_GetTick>
 80033e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d005      	beq.n	80033fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_Delay+0x40>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033fe:	bf00      	nop
 8003400:	f7ff ffde 	bl	80033c0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	429a      	cmp	r2, r3
 800340e:	d8f7      	bhi.n	8003400 <HAL_Delay+0x28>
  {
  }
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000010 	.word	0x20000010

0800341c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003438:	4013      	ands	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344e:	4a04      	ldr	r2, [pc, #16]	; (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	60d3      	str	r3, [r2, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <__NVIC_GetPriorityGrouping+0x18>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 0307 	and.w	r3, r3, #7
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db0b      	blt.n	80034aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4907      	ldr	r1, [pc, #28]	; (80034b8 <__NVIC_EnableIRQ+0x38>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	db10      	blt.n	80034f0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	f003 021f 	and.w	r2, r3, #31
 80034d4:	4909      	ldr	r1, [pc, #36]	; (80034fc <__NVIC_DisableIRQ+0x40>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2001      	movs	r0, #1
 80034de:	fa00 f202 	lsl.w	r2, r0, r2
 80034e2:	3320      	adds	r3, #32
 80034e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034ec:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000e100 	.word	0xe000e100

08003500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	2b00      	cmp	r3, #0
 8003512:	db0a      	blt.n	800352a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	490c      	ldr	r1, [pc, #48]	; (800354c <__NVIC_SetPriority+0x4c>)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	440b      	add	r3, r1
 8003524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003528:	e00a      	b.n	8003540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	4908      	ldr	r1, [pc, #32]	; (8003550 <__NVIC_SetPriority+0x50>)
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	3b04      	subs	r3, #4
 8003538:	0112      	lsls	r2, r2, #4
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	440b      	add	r3, r1
 800353e:	761a      	strb	r2, [r3, #24]
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000e100 	.word	0xe000e100
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f1c3 0307 	rsb	r3, r3, #7
 800356e:	2b04      	cmp	r3, #4
 8003570:	bf28      	it	cs
 8003572:	2304      	movcs	r3, #4
 8003574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3304      	adds	r3, #4
 800357a:	2b06      	cmp	r3, #6
 800357c:	d902      	bls.n	8003584 <NVIC_EncodePriority+0x30>
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3b03      	subs	r3, #3
 8003582:	e000      	b.n	8003586 <NVIC_EncodePriority+0x32>
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003588:	f04f 32ff 	mov.w	r2, #4294967295
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	401a      	ands	r2, r3
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800359c:	f04f 31ff 	mov.w	r1, #4294967295
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	43d9      	mvns	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	4313      	orrs	r3, r2
         );
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3724      	adds	r7, #36	; 0x24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035cc:	d301      	bcc.n	80035d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00f      	b.n	80035f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <SysTick_Config+0x40>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035da:	210f      	movs	r1, #15
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295
 80035e0:	f7ff ff8e 	bl	8003500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <SysTick_Config+0x40>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <SysTick_Config+0x40>)
 80035ec:	2207      	movs	r2, #7
 80035ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	e000e010 	.word	0xe000e010

08003600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff ff07 	bl	800341c <__NVIC_SetPriorityGrouping>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	4603      	mov	r3, r0
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003628:	f7ff ff1c 	bl	8003464 <__NVIC_GetPriorityGrouping>
 800362c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	6978      	ldr	r0, [r7, #20]
 8003634:	f7ff ff8e 	bl	8003554 <NVIC_EncodePriority>
 8003638:	4602      	mov	r2, r0
 800363a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff5d 	bl	8003500 <__NVIC_SetPriority>
}
 8003646:	bf00      	nop
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff ff0f 	bl	8003480 <__NVIC_EnableIRQ>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff ff1f 	bl	80034bc <__NVIC_DisableIRQ>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff ff94 	bl	80035bc <SysTick_Config>
 8003694:	4603      	mov	r3, r0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e014      	b.n	80036da <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	791b      	ldrb	r3, [r3, #4]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d105      	bne.n	80036c6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff fc41 	bl	8002f48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43da      	mvns	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	400a      	ands	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	2201      	movs	r2, #1
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43da      	mvns	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	400a      	ands	r2, r1
 8003720:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d107      	bne.n	8003738 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f915 	bl	800395c <HAL_DMA_Abort>
 8003732:	4603      	mov	r3, r0
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e006      	b.n	8003746 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f90d 	bl	800395c <HAL_DMA_Abort>
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2204      	movs	r2, #4
 8003750:	711a      	strb	r2, [r3, #4]
 8003752:	e002      	b.n	800375a <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	795b      	ldrb	r3, [r3, #5]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_DAC_ConfigChannel+0x20>
 8003780:	2302      	movs	r3, #2
 8003782:	e036      	b.n	80037f2 <HAL_DAC_ConfigChannel+0x8e>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2202      	movs	r2, #2
 800378e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003798:	f640 72fe 	movw	r2, #4094	; 0xffe
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4013      	ands	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6819      	ldr	r1, [r3, #0]
 80037d2:	22c0      	movs	r2, #192	; 0xc0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43da      	mvns	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	400a      	ands	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800380c:	f7ff fdd8 	bl	80033c0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e099      	b.n	8003950 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800383c:	e00f      	b.n	800385e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800383e:	f7ff fdbf 	bl	80033c0 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b05      	cmp	r3, #5
 800384a:	d908      	bls.n	800385e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2203      	movs	r2, #3
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e078      	b.n	8003950 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e8      	bne.n	800383e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	4b38      	ldr	r3, [pc, #224]	; (8003958 <HAL_DMA_Init+0x158>)
 8003878:	4013      	ands	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800388a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d107      	bne.n	80038c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	4313      	orrs	r3, r2
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0307 	bic.w	r3, r3, #7
 80038de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d117      	bne.n	8003922 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00e      	beq.n	8003922 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fa7b 	bl	8003e00 <DMA_CheckFifoParam>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2240      	movs	r2, #64	; 0x40
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800391e:	2301      	movs	r3, #1
 8003920:	e016      	b.n	8003950 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fa32 	bl	8003d94 <DMA_CalcBaseAndBitshift>
 8003930:	4603      	mov	r3, r0
 8003932:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003938:	223f      	movs	r2, #63	; 0x3f
 800393a:	409a      	lsls	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	f010803f 	.word	0xf010803f

0800395c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800396a:	f7ff fd29 	bl	80033c0 <HAL_GetTick>
 800396e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d008      	beq.n	800398e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e052      	b.n	8003a34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0216 	bic.w	r2, r2, #22
 800399c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d103      	bne.n	80039be <HAL_DMA_Abort+0x62>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0208 	bic.w	r2, r2, #8
 80039cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039de:	e013      	b.n	8003a08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039e0:	f7ff fcee 	bl	80033c0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b05      	cmp	r3, #5
 80039ec:	d90c      	bls.n	8003a08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2203      	movs	r2, #3
 8003a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e015      	b.n	8003a34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e4      	bne.n	80039e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	223f      	movs	r2, #63	; 0x3f
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d004      	beq.n	8003a5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e00c      	b.n	8003a74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2205      	movs	r2, #5
 8003a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0201 	bic.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a8c:	4b92      	ldr	r3, [pc, #584]	; (8003cd8 <HAL_DMA_IRQHandler+0x258>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a92      	ldr	r2, [pc, #584]	; (8003cdc <HAL_DMA_IRQHandler+0x25c>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0a9b      	lsrs	r3, r3, #10
 8003a98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aaa:	2208      	movs	r2, #8
 8003aac:	409a      	lsls	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01a      	beq.n	8003aec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0204 	bic.w	r2, r2, #4
 8003ad2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	2208      	movs	r2, #8
 8003ada:	409a      	lsls	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	f043 0201 	orr.w	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	2201      	movs	r2, #1
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d012      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	2201      	movs	r2, #1
 8003b10:	409a      	lsls	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	f043 0202 	orr.w	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	2204      	movs	r2, #4
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d012      	beq.n	8003b58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	2204      	movs	r2, #4
 8003b46:	409a      	lsls	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f043 0204 	orr.w	r2, r3, #4
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d043      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d03c      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	2210      	movs	r2, #16
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d018      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d108      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d024      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
 8003bae:	e01f      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d01b      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
 8003bc0:	e016      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0208 	bic.w	r2, r2, #8
 8003bde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 808e 	beq.w	8003d1e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8086 	beq.w	8003d1e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c16:	2220      	movs	r2, #32
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b05      	cmp	r3, #5
 8003c28:	d136      	bne.n	8003c98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0216 	bic.w	r2, r2, #22
 8003c38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695a      	ldr	r2, [r3, #20]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <HAL_DMA_IRQHandler+0x1da>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0208 	bic.w	r2, r2, #8
 8003c68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6e:	223f      	movs	r2, #63	; 0x3f
 8003c70:	409a      	lsls	r2, r3
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d07d      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
        }
        return;
 8003c96:	e078      	b.n	8003d8a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01c      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d108      	bne.n	8003cc6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d030      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
 8003cc4:	e02b      	b.n	8003d1e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d027      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
 8003cd6:	e022      	b.n	8003d1e <HAL_DMA_IRQHandler+0x29e>
 8003cd8:	20000008 	.word	0x20000008
 8003cdc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10f      	bne.n	8003d0e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0210 	bic.w	r2, r2, #16
 8003cfc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d032      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d022      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2205      	movs	r2, #5
 8003d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d307      	bcc.n	8003d66 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f2      	bne.n	8003d4a <HAL_DMA_IRQHandler+0x2ca>
 8003d64:	e000      	b.n	8003d68 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d66:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
 8003d88:	e000      	b.n	8003d8c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d8a:	bf00      	nop
    }
  }
}
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop

08003d94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	3b10      	subs	r3, #16
 8003da4:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <DMA_CalcBaseAndBitshift+0x64>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dae:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <DMA_CalcBaseAndBitshift+0x68>)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d909      	bls.n	8003dd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	1d1a      	adds	r2, r3, #4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	659a      	str	r2, [r3, #88]	; 0x58
 8003dd4:	e007      	b.n	8003de6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	aaaaaaab 	.word	0xaaaaaaab
 8003dfc:	080081ec 	.word	0x080081ec

08003e00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d11f      	bne.n	8003e5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d855      	bhi.n	8003ecc <DMA_CheckFifoParam+0xcc>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <DMA_CheckFifoParam+0x28>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e39 	.word	0x08003e39
 8003e2c:	08003e4b 	.word	0x08003e4b
 8003e30:	08003e39 	.word	0x08003e39
 8003e34:	08003ecd 	.word	0x08003ecd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d045      	beq.n	8003ed0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e48:	e042      	b.n	8003ed0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e52:	d13f      	bne.n	8003ed4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e58:	e03c      	b.n	8003ed4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e62:	d121      	bne.n	8003ea8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d836      	bhi.n	8003ed8 <DMA_CheckFifoParam+0xd8>
 8003e6a:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <DMA_CheckFifoParam+0x70>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e87 	.word	0x08003e87
 8003e78:	08003e81 	.word	0x08003e81
 8003e7c:	08003e99 	.word	0x08003e99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
      break;
 8003e84:	e02f      	b.n	8003ee6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d024      	beq.n	8003edc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e96:	e021      	b.n	8003edc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ea0:	d11e      	bne.n	8003ee0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ea6:	e01b      	b.n	8003ee0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d902      	bls.n	8003eb4 <DMA_CheckFifoParam+0xb4>
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d003      	beq.n	8003eba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003eb2:	e018      	b.n	8003ee6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb8:	e015      	b.n	8003ee6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00e      	beq.n	8003ee4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8003eca:	e00b      	b.n	8003ee4 <DMA_CheckFifoParam+0xe4>
      break;
 8003ecc:	bf00      	nop
 8003ece:	e00a      	b.n	8003ee6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ed0:	bf00      	nop
 8003ed2:	e008      	b.n	8003ee6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ed4:	bf00      	nop
 8003ed6:	e006      	b.n	8003ee6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ed8:	bf00      	nop
 8003eda:	e004      	b.n	8003ee6 <DMA_CheckFifoParam+0xe6>
      break;
 8003edc:	bf00      	nop
 8003ede:	e002      	b.n	8003ee6 <DMA_CheckFifoParam+0xe6>
      break;   
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ee4:	bf00      	nop
    }
  } 
  
  return status; 
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b089      	sub	sp, #36	; 0x24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	e165      	b.n	80041dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f10:	2201      	movs	r2, #1
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	f040 8154 	bne.w	80041d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d00b      	beq.n	8003f4e <HAL_GPIO_Init+0x5a>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d007      	beq.n	8003f4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f42:	2b11      	cmp	r3, #17
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b12      	cmp	r3, #18
 8003f4c:	d130      	bne.n	8003fb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	2203      	movs	r2, #3
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f84:	2201      	movs	r2, #1
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	f003 0201 	and.w	r2, r3, #1
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	2203      	movs	r2, #3
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0xfc>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b12      	cmp	r3, #18
 8003fee:	d123      	bne.n	8004038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	08da      	lsrs	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3208      	adds	r2, #8
 8003ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	220f      	movs	r2, #15
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	08da      	lsrs	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3208      	adds	r2, #8
 8004032:	69b9      	ldr	r1, [r7, #24]
 8004034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	2203      	movs	r2, #3
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0203 	and.w	r2, r3, #3
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80ae 	beq.w	80041d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	4b5c      	ldr	r3, [pc, #368]	; (80041f0 <HAL_GPIO_Init+0x2fc>)
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	4a5b      	ldr	r2, [pc, #364]	; (80041f0 <HAL_GPIO_Init+0x2fc>)
 8004084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004088:	6453      	str	r3, [r2, #68]	; 0x44
 800408a:	4b59      	ldr	r3, [pc, #356]	; (80041f0 <HAL_GPIO_Init+0x2fc>)
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004096:	4a57      	ldr	r2, [pc, #348]	; (80041f4 <HAL_GPIO_Init+0x300>)
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	089b      	lsrs	r3, r3, #2
 800409c:	3302      	adds	r3, #2
 800409e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	220f      	movs	r2, #15
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a4e      	ldr	r2, [pc, #312]	; (80041f8 <HAL_GPIO_Init+0x304>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d025      	beq.n	800410e <HAL_GPIO_Init+0x21a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a4d      	ldr	r2, [pc, #308]	; (80041fc <HAL_GPIO_Init+0x308>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01f      	beq.n	800410a <HAL_GPIO_Init+0x216>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a4c      	ldr	r2, [pc, #304]	; (8004200 <HAL_GPIO_Init+0x30c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d019      	beq.n	8004106 <HAL_GPIO_Init+0x212>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a4b      	ldr	r2, [pc, #300]	; (8004204 <HAL_GPIO_Init+0x310>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <HAL_GPIO_Init+0x20e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a4a      	ldr	r2, [pc, #296]	; (8004208 <HAL_GPIO_Init+0x314>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00d      	beq.n	80040fe <HAL_GPIO_Init+0x20a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a49      	ldr	r2, [pc, #292]	; (800420c <HAL_GPIO_Init+0x318>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d007      	beq.n	80040fa <HAL_GPIO_Init+0x206>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a48      	ldr	r2, [pc, #288]	; (8004210 <HAL_GPIO_Init+0x31c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d101      	bne.n	80040f6 <HAL_GPIO_Init+0x202>
 80040f2:	2306      	movs	r3, #6
 80040f4:	e00c      	b.n	8004110 <HAL_GPIO_Init+0x21c>
 80040f6:	2307      	movs	r3, #7
 80040f8:	e00a      	b.n	8004110 <HAL_GPIO_Init+0x21c>
 80040fa:	2305      	movs	r3, #5
 80040fc:	e008      	b.n	8004110 <HAL_GPIO_Init+0x21c>
 80040fe:	2304      	movs	r3, #4
 8004100:	e006      	b.n	8004110 <HAL_GPIO_Init+0x21c>
 8004102:	2303      	movs	r3, #3
 8004104:	e004      	b.n	8004110 <HAL_GPIO_Init+0x21c>
 8004106:	2302      	movs	r3, #2
 8004108:	e002      	b.n	8004110 <HAL_GPIO_Init+0x21c>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <HAL_GPIO_Init+0x21c>
 800410e:	2300      	movs	r3, #0
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	f002 0203 	and.w	r2, r2, #3
 8004116:	0092      	lsls	r2, r2, #2
 8004118:	4093      	lsls	r3, r2
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004120:	4934      	ldr	r1, [pc, #208]	; (80041f4 <HAL_GPIO_Init+0x300>)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	089b      	lsrs	r3, r3, #2
 8004126:	3302      	adds	r3, #2
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800412e:	4b39      	ldr	r3, [pc, #228]	; (8004214 <HAL_GPIO_Init+0x320>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004152:	4a30      	ldr	r2, [pc, #192]	; (8004214 <HAL_GPIO_Init+0x320>)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004158:	4b2e      	ldr	r3, [pc, #184]	; (8004214 <HAL_GPIO_Init+0x320>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	43db      	mvns	r3, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800417c:	4a25      	ldr	r2, [pc, #148]	; (8004214 <HAL_GPIO_Init+0x320>)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004182:	4b24      	ldr	r3, [pc, #144]	; (8004214 <HAL_GPIO_Init+0x320>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	43db      	mvns	r3, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4013      	ands	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041a6:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <HAL_GPIO_Init+0x320>)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041ac:	4b19      	ldr	r3, [pc, #100]	; (8004214 <HAL_GPIO_Init+0x320>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041d0:	4a10      	ldr	r2, [pc, #64]	; (8004214 <HAL_GPIO_Init+0x320>)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3301      	adds	r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2b0f      	cmp	r3, #15
 80041e0:	f67f ae96 	bls.w	8003f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041e4:	bf00      	nop
 80041e6:	3724      	adds	r7, #36	; 0x24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	40023800 	.word	0x40023800
 80041f4:	40013800 	.word	0x40013800
 80041f8:	40020000 	.word	0x40020000
 80041fc:	40020400 	.word	0x40020400
 8004200:	40020800 	.word	0x40020800
 8004204:	40020c00 	.word	0x40020c00
 8004208:	40021000 	.word	0x40021000
 800420c:	40021400 	.word	0x40021400
 8004210:	40021800 	.word	0x40021800
 8004214:	40013c00 	.word	0x40013c00

08004218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	807b      	strh	r3, [r7, #2]
 8004224:	4613      	mov	r3, r2
 8004226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004228:	787b      	ldrb	r3, [r7, #1]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004234:	e003      	b.n	800423e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004236:	887b      	ldrh	r3, [r7, #2]
 8004238:	041a      	lsls	r2, r3, #16
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	619a      	str	r2, [r3, #24]
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
	...

0800424c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004256:	4b08      	ldr	r3, [pc, #32]	; (8004278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d006      	beq.n	8004270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004262:	4a05      	ldr	r2, [pc, #20]	; (8004278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fdfa 	bl	8002e64 <HAL_GPIO_EXTI_Callback>
  }
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40013c00 	.word	0x40013c00

0800427c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0cc      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004290:	4b68      	ldr	r3, [pc, #416]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d90c      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b65      	ldr	r3, [pc, #404]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b63      	ldr	r3, [pc, #396]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0b8      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d020      	beq.n	8004306 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d0:	4b59      	ldr	r3, [pc, #356]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4a58      	ldr	r2, [pc, #352]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e8:	4b53      	ldr	r3, [pc, #332]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4a52      	ldr	r2, [pc, #328]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f4:	4b50      	ldr	r3, [pc, #320]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	494d      	ldr	r1, [pc, #308]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d044      	beq.n	800439c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	4b47      	ldr	r3, [pc, #284]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d119      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e07f      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d003      	beq.n	800433a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004336:	2b03      	cmp	r3, #3
 8004338:	d107      	bne.n	800434a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433a:	4b3f      	ldr	r3, [pc, #252]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e06f      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434a:	4b3b      	ldr	r3, [pc, #236]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e067      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435a:	4b37      	ldr	r3, [pc, #220]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f023 0203 	bic.w	r2, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4934      	ldr	r1, [pc, #208]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	4313      	orrs	r3, r2
 800436a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800436c:	f7ff f828 	bl	80033c0 <HAL_GetTick>
 8004370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	e00a      	b.n	800438a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004374:	f7ff f824 	bl	80033c0 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e04f      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	4b2b      	ldr	r3, [pc, #172]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 020c 	and.w	r2, r3, #12
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	429a      	cmp	r2, r3
 800439a:	d1eb      	bne.n	8004374 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d20c      	bcs.n	80043c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b22      	ldr	r3, [pc, #136]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e032      	b.n	800442a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4916      	ldr	r1, [pc, #88]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ee:	4b12      	ldr	r3, [pc, #72]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	490e      	ldr	r1, [pc, #56]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004402:	f000 f855 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8004406:	4601      	mov	r1, r0
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_RCC_ClockConfig+0x1c0>)
 8004414:	5cd3      	ldrb	r3, [r2, r3]
 8004416:	fa21 f303 	lsr.w	r3, r1, r3
 800441a:	4a09      	ldr	r2, [pc, #36]	; (8004440 <HAL_RCC_ClockConfig+0x1c4>)
 800441c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <HAL_RCC_ClockConfig+0x1c8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe ff88 	bl	8003338 <HAL_InitTick>

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40023c00 	.word	0x40023c00
 8004438:	40023800 	.word	0x40023800
 800443c:	080081d4 	.word	0x080081d4
 8004440:	20000008 	.word	0x20000008
 8004444:	2000000c 	.word	0x2000000c

08004448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <HAL_RCC_GetHCLKFreq+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000008 	.word	0x20000008

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004464:	f7ff fff0 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8004468:	4601      	mov	r1, r0
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	0a9b      	lsrs	r3, r3, #10
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4a03      	ldr	r2, [pc, #12]	; (8004484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004476:	5cd3      	ldrb	r3, [r2, r3]
 8004478:	fa21 f303 	lsr.w	r3, r1, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	080081e4 	.word	0x080081e4

08004488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800448c:	f7ff ffdc 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8004490:	4601      	mov	r1, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0b5b      	lsrs	r3, r3, #13
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4a03      	ldr	r2, [pc, #12]	; (80044ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800449e:	5cd3      	ldrb	r3, [r2, r3]
 80044a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	080081e4 	.word	0x080081e4

080044b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ca:	4bc6      	ldr	r3, [pc, #792]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x334>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	f200 817e 	bhi.w	80047d4 <HAL_RCC_GetSysClockFreq+0x324>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <HAL_RCC_GetSysClockFreq+0x30>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004515 	.word	0x08004515
 80044e4:	080047d5 	.word	0x080047d5
 80044e8:	080047d5 	.word	0x080047d5
 80044ec:	080047d5 	.word	0x080047d5
 80044f0:	0800451b 	.word	0x0800451b
 80044f4:	080047d5 	.word	0x080047d5
 80044f8:	080047d5 	.word	0x080047d5
 80044fc:	080047d5 	.word	0x080047d5
 8004500:	08004521 	.word	0x08004521
 8004504:	080047d5 	.word	0x080047d5
 8004508:	080047d5 	.word	0x080047d5
 800450c:	080047d5 	.word	0x080047d5
 8004510:	0800467d 	.word	0x0800467d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004514:	4bb4      	ldr	r3, [pc, #720]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x338>)
 8004516:	613b      	str	r3, [r7, #16]
       break;
 8004518:	e15f      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800451a:	4bb4      	ldr	r3, [pc, #720]	; (80047ec <HAL_RCC_GetSysClockFreq+0x33c>)
 800451c:	613b      	str	r3, [r7, #16]
      break;
 800451e:	e15c      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004520:	4bb0      	ldr	r3, [pc, #704]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004528:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800452a:	4bae      	ldr	r3, [pc, #696]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x334>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d04a      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004536:	4bab      	ldr	r3, [pc, #684]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	099b      	lsrs	r3, r3, #6
 800453c:	f04f 0400 	mov.w	r4, #0
 8004540:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	ea03 0501 	and.w	r5, r3, r1
 800454c:	ea04 0602 	and.w	r6, r4, r2
 8004550:	4629      	mov	r1, r5
 8004552:	4632      	mov	r2, r6
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	f04f 0400 	mov.w	r4, #0
 800455c:	0154      	lsls	r4, r2, #5
 800455e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004562:	014b      	lsls	r3, r1, #5
 8004564:	4619      	mov	r1, r3
 8004566:	4622      	mov	r2, r4
 8004568:	1b49      	subs	r1, r1, r5
 800456a:	eb62 0206 	sbc.w	r2, r2, r6
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	f04f 0400 	mov.w	r4, #0
 8004576:	0194      	lsls	r4, r2, #6
 8004578:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800457c:	018b      	lsls	r3, r1, #6
 800457e:	1a5b      	subs	r3, r3, r1
 8004580:	eb64 0402 	sbc.w	r4, r4, r2
 8004584:	f04f 0100 	mov.w	r1, #0
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	00e2      	lsls	r2, r4, #3
 800458e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004592:	00d9      	lsls	r1, r3, #3
 8004594:	460b      	mov	r3, r1
 8004596:	4614      	mov	r4, r2
 8004598:	195b      	adds	r3, r3, r5
 800459a:	eb44 0406 	adc.w	r4, r4, r6
 800459e:	f04f 0100 	mov.w	r1, #0
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	0262      	lsls	r2, r4, #9
 80045a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80045ac:	0259      	lsls	r1, r3, #9
 80045ae:	460b      	mov	r3, r1
 80045b0:	4614      	mov	r4, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	4621      	mov	r1, r4
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f04f 0400 	mov.w	r4, #0
 80045bc:	461a      	mov	r2, r3
 80045be:	4623      	mov	r3, r4
 80045c0:	f7fc fb1c 	bl	8000bfc <__aeabi_uldivmod>
 80045c4:	4603      	mov	r3, r0
 80045c6:	460c      	mov	r4, r1
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	e049      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045cc:	4b85      	ldr	r3, [pc, #532]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x334>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	099b      	lsrs	r3, r3, #6
 80045d2:	f04f 0400 	mov.w	r4, #0
 80045d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	ea03 0501 	and.w	r5, r3, r1
 80045e2:	ea04 0602 	and.w	r6, r4, r2
 80045e6:	4629      	mov	r1, r5
 80045e8:	4632      	mov	r2, r6
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	f04f 0400 	mov.w	r4, #0
 80045f2:	0154      	lsls	r4, r2, #5
 80045f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045f8:	014b      	lsls	r3, r1, #5
 80045fa:	4619      	mov	r1, r3
 80045fc:	4622      	mov	r2, r4
 80045fe:	1b49      	subs	r1, r1, r5
 8004600:	eb62 0206 	sbc.w	r2, r2, r6
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	f04f 0400 	mov.w	r4, #0
 800460c:	0194      	lsls	r4, r2, #6
 800460e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004612:	018b      	lsls	r3, r1, #6
 8004614:	1a5b      	subs	r3, r3, r1
 8004616:	eb64 0402 	sbc.w	r4, r4, r2
 800461a:	f04f 0100 	mov.w	r1, #0
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	00e2      	lsls	r2, r4, #3
 8004624:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004628:	00d9      	lsls	r1, r3, #3
 800462a:	460b      	mov	r3, r1
 800462c:	4614      	mov	r4, r2
 800462e:	195b      	adds	r3, r3, r5
 8004630:	eb44 0406 	adc.w	r4, r4, r6
 8004634:	f04f 0100 	mov.w	r1, #0
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	02a2      	lsls	r2, r4, #10
 800463e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004642:	0299      	lsls	r1, r3, #10
 8004644:	460b      	mov	r3, r1
 8004646:	4614      	mov	r4, r2
 8004648:	4618      	mov	r0, r3
 800464a:	4621      	mov	r1, r4
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f04f 0400 	mov.w	r4, #0
 8004652:	461a      	mov	r2, r3
 8004654:	4623      	mov	r3, r4
 8004656:	f7fc fad1 	bl	8000bfc <__aeabi_uldivmod>
 800465a:	4603      	mov	r3, r0
 800465c:	460c      	mov	r4, r1
 800465e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004660:	4b60      	ldr	r3, [pc, #384]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	0c1b      	lsrs	r3, r3, #16
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	3301      	adds	r3, #1
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	613b      	str	r3, [r7, #16]
      break;
 800467a:	e0ae      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800467c:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x334>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004684:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004686:	4b57      	ldr	r3, [pc, #348]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d04a      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004692:	4b54      	ldr	r3, [pc, #336]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x334>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	f04f 0400 	mov.w	r4, #0
 800469c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	ea03 0501 	and.w	r5, r3, r1
 80046a8:	ea04 0602 	and.w	r6, r4, r2
 80046ac:	4629      	mov	r1, r5
 80046ae:	4632      	mov	r2, r6
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	f04f 0400 	mov.w	r4, #0
 80046b8:	0154      	lsls	r4, r2, #5
 80046ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046be:	014b      	lsls	r3, r1, #5
 80046c0:	4619      	mov	r1, r3
 80046c2:	4622      	mov	r2, r4
 80046c4:	1b49      	subs	r1, r1, r5
 80046c6:	eb62 0206 	sbc.w	r2, r2, r6
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	f04f 0400 	mov.w	r4, #0
 80046d2:	0194      	lsls	r4, r2, #6
 80046d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046d8:	018b      	lsls	r3, r1, #6
 80046da:	1a5b      	subs	r3, r3, r1
 80046dc:	eb64 0402 	sbc.w	r4, r4, r2
 80046e0:	f04f 0100 	mov.w	r1, #0
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	00e2      	lsls	r2, r4, #3
 80046ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046ee:	00d9      	lsls	r1, r3, #3
 80046f0:	460b      	mov	r3, r1
 80046f2:	4614      	mov	r4, r2
 80046f4:	195b      	adds	r3, r3, r5
 80046f6:	eb44 0406 	adc.w	r4, r4, r6
 80046fa:	f04f 0100 	mov.w	r1, #0
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	0262      	lsls	r2, r4, #9
 8004704:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004708:	0259      	lsls	r1, r3, #9
 800470a:	460b      	mov	r3, r1
 800470c:	4614      	mov	r4, r2
 800470e:	4618      	mov	r0, r3
 8004710:	4621      	mov	r1, r4
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f04f 0400 	mov.w	r4, #0
 8004718:	461a      	mov	r2, r3
 800471a:	4623      	mov	r3, r4
 800471c:	f7fc fa6e 	bl	8000bfc <__aeabi_uldivmod>
 8004720:	4603      	mov	r3, r0
 8004722:	460c      	mov	r4, r1
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e049      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004728:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x334>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	099b      	lsrs	r3, r3, #6
 800472e:	f04f 0400 	mov.w	r4, #0
 8004732:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	ea03 0501 	and.w	r5, r3, r1
 800473e:	ea04 0602 	and.w	r6, r4, r2
 8004742:	4629      	mov	r1, r5
 8004744:	4632      	mov	r2, r6
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	f04f 0400 	mov.w	r4, #0
 800474e:	0154      	lsls	r4, r2, #5
 8004750:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004754:	014b      	lsls	r3, r1, #5
 8004756:	4619      	mov	r1, r3
 8004758:	4622      	mov	r2, r4
 800475a:	1b49      	subs	r1, r1, r5
 800475c:	eb62 0206 	sbc.w	r2, r2, r6
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	f04f 0400 	mov.w	r4, #0
 8004768:	0194      	lsls	r4, r2, #6
 800476a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800476e:	018b      	lsls	r3, r1, #6
 8004770:	1a5b      	subs	r3, r3, r1
 8004772:	eb64 0402 	sbc.w	r4, r4, r2
 8004776:	f04f 0100 	mov.w	r1, #0
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	00e2      	lsls	r2, r4, #3
 8004780:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004784:	00d9      	lsls	r1, r3, #3
 8004786:	460b      	mov	r3, r1
 8004788:	4614      	mov	r4, r2
 800478a:	195b      	adds	r3, r3, r5
 800478c:	eb44 0406 	adc.w	r4, r4, r6
 8004790:	f04f 0100 	mov.w	r1, #0
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	02a2      	lsls	r2, r4, #10
 800479a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800479e:	0299      	lsls	r1, r3, #10
 80047a0:	460b      	mov	r3, r1
 80047a2:	4614      	mov	r4, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	4621      	mov	r1, r4
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f04f 0400 	mov.w	r4, #0
 80047ae:	461a      	mov	r2, r3
 80047b0:	4623      	mov	r3, r4
 80047b2:	f7fc fa23 	bl	8000bfc <__aeabi_uldivmod>
 80047b6:	4603      	mov	r3, r0
 80047b8:	460c      	mov	r4, r1
 80047ba:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x334>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	0f1b      	lsrs	r3, r3, #28
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	613b      	str	r3, [r7, #16]
      break;
 80047d2:	e002      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047d4:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x338>)
 80047d6:	613b      	str	r3, [r7, #16]
      break;
 80047d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047da:	693b      	ldr	r3, [r7, #16]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e4:	40023800 	.word	0x40023800
 80047e8:	00f42400 	.word	0x00f42400
 80047ec:	007a1200 	.word	0x007a1200

080047f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8083 	beq.w	8004910 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800480a:	4b95      	ldr	r3, [pc, #596]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b04      	cmp	r3, #4
 8004814:	d019      	beq.n	800484a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004816:	4b92      	ldr	r3, [pc, #584]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800481e:	2b08      	cmp	r3, #8
 8004820:	d106      	bne.n	8004830 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004822:	4b8f      	ldr	r3, [pc, #572]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800482e:	d00c      	beq.n	800484a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004830:	4b8b      	ldr	r3, [pc, #556]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004838:	2b0c      	cmp	r3, #12
 800483a:	d112      	bne.n	8004862 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483c:	4b88      	ldr	r3, [pc, #544]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004848:	d10b      	bne.n	8004862 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484a:	4b85      	ldr	r3, [pc, #532]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d05b      	beq.n	800490e <HAL_RCC_OscConfig+0x11e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d157      	bne.n	800490e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e216      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486a:	d106      	bne.n	800487a <HAL_RCC_OscConfig+0x8a>
 800486c:	4b7c      	ldr	r3, [pc, #496]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a7b      	ldr	r2, [pc, #492]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	e01d      	b.n	80048b6 <HAL_RCC_OscConfig+0xc6>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004882:	d10c      	bne.n	800489e <HAL_RCC_OscConfig+0xae>
 8004884:	4b76      	ldr	r3, [pc, #472]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a75      	ldr	r2, [pc, #468]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800488a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	4b73      	ldr	r3, [pc, #460]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a72      	ldr	r2, [pc, #456]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	e00b      	b.n	80048b6 <HAL_RCC_OscConfig+0xc6>
 800489e:	4b70      	ldr	r3, [pc, #448]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a6f      	ldr	r2, [pc, #444]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	4b6d      	ldr	r3, [pc, #436]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6c      	ldr	r2, [pc, #432]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d013      	beq.n	80048e6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048be:	f7fe fd7f 	bl	80033c0 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c6:	f7fe fd7b 	bl	80033c0 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b64      	cmp	r3, #100	; 0x64
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e1db      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d8:	4b61      	ldr	r3, [pc, #388]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0xd6>
 80048e4:	e014      	b.n	8004910 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e6:	f7fe fd6b 	bl	80033c0 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048ee:	f7fe fd67 	bl	80033c0 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b64      	cmp	r3, #100	; 0x64
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e1c7      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004900:	4b57      	ldr	r3, [pc, #348]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f0      	bne.n	80048ee <HAL_RCC_OscConfig+0xfe>
 800490c:	e000      	b.n	8004910 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d06f      	beq.n	80049fc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800491c:	4b50      	ldr	r3, [pc, #320]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b00      	cmp	r3, #0
 8004926:	d017      	beq.n	8004958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004928:	4b4d      	ldr	r3, [pc, #308]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004930:	2b08      	cmp	r3, #8
 8004932:	d105      	bne.n	8004940 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004934:	4b4a      	ldr	r3, [pc, #296]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00b      	beq.n	8004958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004940:	4b47      	ldr	r3, [pc, #284]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004948:	2b0c      	cmp	r3, #12
 800494a:	d11c      	bne.n	8004986 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494c:	4b44      	ldr	r3, [pc, #272]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d116      	bne.n	8004986 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004958:	4b41      	ldr	r3, [pc, #260]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_RCC_OscConfig+0x180>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d001      	beq.n	8004970 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e18f      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b3b      	ldr	r3, [pc, #236]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4938      	ldr	r1, [pc, #224]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004984:	e03a      	b.n	80049fc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d020      	beq.n	80049d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800498e:	4b35      	ldr	r3, [pc, #212]	; (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fe fd14 	bl	80033c0 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800499c:	f7fe fd10 	bl	80033c0 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e170      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ae:	4b2c      	ldr	r3, [pc, #176]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ba:	4b29      	ldr	r3, [pc, #164]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4925      	ldr	r1, [pc, #148]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	600b      	str	r3, [r1, #0]
 80049ce:	e015      	b.n	80049fc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d0:	4b24      	ldr	r3, [pc, #144]	; (8004a64 <HAL_RCC_OscConfig+0x274>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d6:	f7fe fcf3 	bl	80033c0 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049de:	f7fe fcef 	bl	80033c0 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e14f      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1f0      	bne.n	80049de <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d037      	beq.n	8004a78 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d016      	beq.n	8004a3e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a10:	4b15      	ldr	r3, [pc, #84]	; (8004a68 <HAL_RCC_OscConfig+0x278>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fe fcd3 	bl	80033c0 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fe fccf 	bl	80033c0 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e12f      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a30:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x22e>
 8004a3c:	e01c      	b.n	8004a78 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <HAL_RCC_OscConfig+0x278>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fe fcbc 	bl	80033c0 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a4a:	e00f      	b.n	8004a6c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a4c:	f7fe fcb8 	bl	80033c0 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d908      	bls.n	8004a6c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e118      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
 8004a5e:	bf00      	nop
 8004a60:	40023800 	.word	0x40023800
 8004a64:	42470000 	.word	0x42470000
 8004a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a6c:	4b8a      	ldr	r3, [pc, #552]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e9      	bne.n	8004a4c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8097 	beq.w	8004bb4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a86:	2300      	movs	r3, #0
 8004a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a8a:	4b83      	ldr	r3, [pc, #524]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10f      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	4b7f      	ldr	r3, [pc, #508]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	4a7e      	ldr	r2, [pc, #504]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa6:	4b7c      	ldr	r3, [pc, #496]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab6:	4b79      	ldr	r3, [pc, #484]	; (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d118      	bne.n	8004af4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac2:	4b76      	ldr	r3, [pc, #472]	; (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a75      	ldr	r2, [pc, #468]	; (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ace:	f7fe fc77 	bl	80033c0 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad6:	f7fe fc73 	bl	80033c0 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e0d3      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae8:	4b6c      	ldr	r3, [pc, #432]	; (8004c9c <HAL_RCC_OscConfig+0x4ac>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d106      	bne.n	8004b0a <HAL_RCC_OscConfig+0x31a>
 8004afc:	4b66      	ldr	r3, [pc, #408]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	4a65      	ldr	r2, [pc, #404]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	6713      	str	r3, [r2, #112]	; 0x70
 8004b08:	e01c      	b.n	8004b44 <HAL_RCC_OscConfig+0x354>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b05      	cmp	r3, #5
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCC_OscConfig+0x33c>
 8004b12:	4b61      	ldr	r3, [pc, #388]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	4a60      	ldr	r2, [pc, #384]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004b18:	f043 0304 	orr.w	r3, r3, #4
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1e:	4b5e      	ldr	r3, [pc, #376]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	4a5d      	ldr	r2, [pc, #372]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004b24:	f043 0301 	orr.w	r3, r3, #1
 8004b28:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2a:	e00b      	b.n	8004b44 <HAL_RCC_OscConfig+0x354>
 8004b2c:	4b5a      	ldr	r3, [pc, #360]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b30:	4a59      	ldr	r2, [pc, #356]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004b32:	f023 0301 	bic.w	r3, r3, #1
 8004b36:	6713      	str	r3, [r2, #112]	; 0x70
 8004b38:	4b57      	ldr	r3, [pc, #348]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	4a56      	ldr	r2, [pc, #344]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004b3e:	f023 0304 	bic.w	r3, r3, #4
 8004b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d015      	beq.n	8004b78 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4c:	f7fe fc38 	bl	80033c0 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b54:	f7fe fc34 	bl	80033c0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e092      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6a:	4b4b      	ldr	r3, [pc, #300]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ee      	beq.n	8004b54 <HAL_RCC_OscConfig+0x364>
 8004b76:	e014      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b78:	f7fe fc22 	bl	80033c0 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b80:	f7fe fc1e 	bl	80033c0 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e07c      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b96:	4b40      	ldr	r3, [pc, #256]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1ee      	bne.n	8004b80 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d105      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba8:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	4a3a      	ldr	r2, [pc, #232]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d068      	beq.n	8004c8e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bbc:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d060      	beq.n	8004c8a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d145      	bne.n	8004c5c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd0:	4b33      	ldr	r3, [pc, #204]	; (8004ca0 <HAL_RCC_OscConfig+0x4b0>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fe fbf3 	bl	80033c0 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bde:	f7fe fbef 	bl	80033c0 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e04f      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf0:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f0      	bne.n	8004bde <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	019b      	lsls	r3, r3, #6
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	3b01      	subs	r3, #1
 8004c16:	041b      	lsls	r3, r3, #16
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	061b      	lsls	r3, r3, #24
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	071b      	lsls	r3, r3, #28
 8004c28:	491b      	ldr	r1, [pc, #108]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ca0 <HAL_RCC_OscConfig+0x4b0>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fe fbc4 	bl	80033c0 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fe fbc0 	bl	80033c0 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e020      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4e:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0x44c>
 8004c5a:	e018      	b.n	8004c8e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5c:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <HAL_RCC_OscConfig+0x4b0>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fe fbad 	bl	80033c0 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c6a:	f7fe fba9 	bl	80033c0 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e009      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_RCC_OscConfig+0x4a8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f0      	bne.n	8004c6a <HAL_RCC_OscConfig+0x47a>
 8004c88:	e001      	b.n	8004c8e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	40007000 	.word	0x40007000
 8004ca0:	42470060 	.word	0x42470060

08004ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e01d      	b.n	8004cf2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fe f9b4 	bl	8003038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f000 fa64 	bl	80051b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2202      	movs	r2, #2
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b06      	cmp	r3, #6
 8004d1a:	d007      	beq.n	8004d2c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a1a      	ldr	r2, [r3, #32]
 8004d58:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10f      	bne.n	8004d82 <HAL_TIM_Base_Stop+0x40>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	f240 4344 	movw	r3, #1092	; 0x444
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d107      	bne.n	8004d82 <HAL_TIM_Base_Stop+0x40>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b06      	cmp	r3, #6
 8004dc0:	d007      	beq.n	8004dd2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d122      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d11b      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0202 	mvn.w	r2, #2
 8004e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f9a5 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f997 	bl	800515e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f9a8 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d122      	bne.n	8004e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d11b      	bne.n	8004e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0204 	mvn.w	r2, #4
 8004e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2202      	movs	r2, #2
 8004e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f97b 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
 8004e7c:	e005      	b.n	8004e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f96d 	bl	800515e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f97e 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d122      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d11b      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0208 	mvn.w	r2, #8
 8004eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2204      	movs	r2, #4
 8004eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f951 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
 8004ed0:	e005      	b.n	8004ede <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f943 	bl	800515e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f954 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d122      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d11b      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0210 	mvn.w	r2, #16
 8004f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f927 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f919 	bl	800515e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f92a 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d10e      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d107      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0201 	mvn.w	r2, #1
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fd ff6e 	bl	8002e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	2b80      	cmp	r3, #128	; 0x80
 8004f70:	d10e      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7c:	2b80      	cmp	r3, #128	; 0x80
 8004f7e:	d107      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fad0 	bl	8005530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9a:	2b40      	cmp	r3, #64	; 0x40
 8004f9c:	d10e      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d107      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f8ef 	bl	800519a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d107      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0220 	mvn.w	r2, #32
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fa9a 	bl	800551c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fe8:	bf00      	nop
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_TIM_ConfigClockSource+0x18>
 8005004:	2302      	movs	r3, #2
 8005006:	e0a6      	b.n	8005156 <HAL_TIM_ConfigClockSource+0x166>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005026:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800502e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d067      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0x120>
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	d80b      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x6c>
 8005044:	2b10      	cmp	r3, #16
 8005046:	d073      	beq.n	8005130 <HAL_TIM_ConfigClockSource+0x140>
 8005048:	2b10      	cmp	r3, #16
 800504a:	d802      	bhi.n	8005052 <HAL_TIM_ConfigClockSource+0x62>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d06f      	beq.n	8005130 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005050:	e078      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005052:	2b20      	cmp	r3, #32
 8005054:	d06c      	beq.n	8005130 <HAL_TIM_ConfigClockSource+0x140>
 8005056:	2b30      	cmp	r3, #48	; 0x30
 8005058:	d06a      	beq.n	8005130 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800505a:	e073      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800505c:	2b70      	cmp	r3, #112	; 0x70
 800505e:	d00d      	beq.n	800507c <HAL_TIM_ConfigClockSource+0x8c>
 8005060:	2b70      	cmp	r3, #112	; 0x70
 8005062:	d804      	bhi.n	800506e <HAL_TIM_ConfigClockSource+0x7e>
 8005064:	2b50      	cmp	r3, #80	; 0x50
 8005066:	d033      	beq.n	80050d0 <HAL_TIM_ConfigClockSource+0xe0>
 8005068:	2b60      	cmp	r3, #96	; 0x60
 800506a:	d041      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800506c:	e06a      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005072:	d066      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x152>
 8005074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005078:	d017      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800507a:	e063      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	6899      	ldr	r1, [r3, #8]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f000 f9aa 	bl	80053e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800509e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	609a      	str	r2, [r3, #8]
      break;
 80050a8:	e04c      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6899      	ldr	r1, [r3, #8]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f000 f993 	bl	80053e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050cc:	609a      	str	r2, [r3, #8]
      break;
 80050ce:	e039      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	6859      	ldr	r1, [r3, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	461a      	mov	r2, r3
 80050de:	f000 f907 	bl	80052f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2150      	movs	r1, #80	; 0x50
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 f960 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 80050ee:	e029      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	461a      	mov	r2, r3
 80050fe:	f000 f926 	bl	800534e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2160      	movs	r1, #96	; 0x60
 8005108:	4618      	mov	r0, r3
 800510a:	f000 f950 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 800510e:	e019      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	6859      	ldr	r1, [r3, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	461a      	mov	r2, r3
 800511e:	f000 f8e7 	bl	80052f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2140      	movs	r1, #64	; 0x40
 8005128:	4618      	mov	r0, r3
 800512a:	f000 f940 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 800512e:	e009      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f000 f937 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8005140:	e000      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a40      	ldr	r2, [pc, #256]	; (80052c4 <TIM_Base_SetConfig+0x114>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d013      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ce:	d00f      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a3d      	ldr	r2, [pc, #244]	; (80052c8 <TIM_Base_SetConfig+0x118>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a3c      	ldr	r2, [pc, #240]	; (80052cc <TIM_Base_SetConfig+0x11c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a3b      	ldr	r2, [pc, #236]	; (80052d0 <TIM_Base_SetConfig+0x120>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a3a      	ldr	r2, [pc, #232]	; (80052d4 <TIM_Base_SetConfig+0x124>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d108      	bne.n	8005202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a2f      	ldr	r2, [pc, #188]	; (80052c4 <TIM_Base_SetConfig+0x114>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d02b      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005210:	d027      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a2c      	ldr	r2, [pc, #176]	; (80052c8 <TIM_Base_SetConfig+0x118>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d023      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a2b      	ldr	r2, [pc, #172]	; (80052cc <TIM_Base_SetConfig+0x11c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01f      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2a      	ldr	r2, [pc, #168]	; (80052d0 <TIM_Base_SetConfig+0x120>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01b      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a29      	ldr	r2, [pc, #164]	; (80052d4 <TIM_Base_SetConfig+0x124>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d017      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a28      	ldr	r2, [pc, #160]	; (80052d8 <TIM_Base_SetConfig+0x128>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d013      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a27      	ldr	r2, [pc, #156]	; (80052dc <TIM_Base_SetConfig+0x12c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00f      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a26      	ldr	r2, [pc, #152]	; (80052e0 <TIM_Base_SetConfig+0x130>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00b      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a25      	ldr	r2, [pc, #148]	; (80052e4 <TIM_Base_SetConfig+0x134>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d007      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a24      	ldr	r2, [pc, #144]	; (80052e8 <TIM_Base_SetConfig+0x138>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d003      	beq.n	8005262 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a23      	ldr	r2, [pc, #140]	; (80052ec <TIM_Base_SetConfig+0x13c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d108      	bne.n	8005274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <TIM_Base_SetConfig+0x114>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_Base_SetConfig+0xf8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <TIM_Base_SetConfig+0x124>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d103      	bne.n	80052b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	615a      	str	r2, [r3, #20]
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800
 80052d0:	40000c00 	.word	0x40000c00
 80052d4:	40010400 	.word	0x40010400
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40014400 	.word	0x40014400
 80052e0:	40014800 	.word	0x40014800
 80052e4:	40001800 	.word	0x40001800
 80052e8:	40001c00 	.word	0x40001c00
 80052ec:	40002000 	.word	0x40002000

080052f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800531a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 030a 	bic.w	r3, r3, #10
 800532c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800534e:	b480      	push	{r7}
 8005350:	b087      	sub	sp, #28
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f023 0210 	bic.w	r2, r3, #16
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	031b      	lsls	r3, r3, #12
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800538a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f043 0307 	orr.w	r3, r3, #7
 80053d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	609a      	str	r2, [r3, #8]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	431a      	orrs	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4313      	orrs	r3, r2
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	609a      	str	r2, [r3, #8]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005438:	2302      	movs	r3, #2
 800543a:	e05a      	b.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a21      	ldr	r2, [pc, #132]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005488:	d01d      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1b      	ldr	r2, [pc, #108]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1a      	ldr	r2, [pc, #104]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a18      	ldr	r2, [pc, #96]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a17      	ldr	r2, [pc, #92]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a15      	ldr	r2, [pc, #84]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d10c      	bne.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40010000 	.word	0x40010000
 8005504:	40000400 	.word	0x40000400
 8005508:	40000800 	.word	0x40000800
 800550c:	40000c00 	.word	0x40000c00
 8005510:	40010400 	.word	0x40010400
 8005514:	40014000 	.word	0x40014000
 8005518:	40001800 	.word	0x40001800

0800551c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e03f      	b.n	80055d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fd fda0 	bl	80030b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2224      	movs	r2, #36	; 0x24
 8005574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fb97 	bl	8005cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800559c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b088      	sub	sp, #32
 80055e2:	af02      	add	r7, sp, #8
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	f040 8083 	bne.w	8005706 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_UART_Transmit+0x2e>
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e07b      	b.n	8005708 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_UART_Transmit+0x40>
 800561a:	2302      	movs	r3, #2
 800561c:	e074      	b.n	8005708 <HAL_UART_Transmit+0x12a>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2221      	movs	r2, #33	; 0x21
 8005630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005634:	f7fd fec4 	bl	80033c0 <HAL_GetTick>
 8005638:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	88fa      	ldrh	r2, [r7, #6]
 800563e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800564e:	e042      	b.n	80056d6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005666:	d122      	bne.n	80056ae <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2200      	movs	r2, #0
 8005670:	2180      	movs	r1, #128	; 0x80
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f9b6 	bl	80059e4 <UART_WaitOnFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e042      	b.n	8005708 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005694:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	3302      	adds	r3, #2
 80056a2:	60bb      	str	r3, [r7, #8]
 80056a4:	e017      	b.n	80056d6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	3301      	adds	r3, #1
 80056aa:	60bb      	str	r3, [r7, #8]
 80056ac:	e013      	b.n	80056d6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2200      	movs	r2, #0
 80056b6:	2180      	movs	r1, #128	; 0x80
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f993 	bl	80059e4 <UART_WaitOnFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e01f      	b.n	8005708 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	60ba      	str	r2, [r7, #8]
 80056ce:	781a      	ldrb	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1b7      	bne.n	8005650 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2200      	movs	r2, #0
 80056e8:	2140      	movs	r1, #64	; 0x40
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f97a 	bl	80059e4 <UART_WaitOnFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e006      	b.n	8005708 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	e000      	b.n	8005708 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005706:	2302      	movs	r3, #2
  }
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b20      	cmp	r3, #32
 8005728:	d140      	bne.n	80057ac <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_UART_Receive_IT+0x26>
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e039      	b.n	80057ae <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_UART_Receive_IT+0x38>
 8005744:	2302      	movs	r3, #2
 8005746:	e032      	b.n	80057ae <HAL_UART_Receive_IT+0x9e>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	88fa      	ldrh	r2, [r7, #6]
 800575a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2222      	movs	r2, #34	; 0x22
 800576c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005786:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695a      	ldr	r2, [r3, #20]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0220 	orr.w	r2, r2, #32
 80057a6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e000      	b.n	80057ae <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80057ac:	2302      	movs	r3, #2
  }
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80057dc:	2300      	movs	r3, #0
 80057de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10d      	bne.n	800580e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d008      	beq.n	800580e <HAL_UART_IRQHandler+0x52>
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f9d6 	bl	8005bb8 <UART_Receive_IT>
      return;
 800580c:	e0d1      	b.n	80059b2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 80b0 	beq.w	8005976 <HAL_UART_IRQHandler+0x1ba>
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d105      	bne.n	800582c <HAL_UART_IRQHandler+0x70>
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 80a5 	beq.w	8005976 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_UART_IRQHandler+0x90>
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	f043 0201 	orr.w	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_UART_IRQHandler+0xb0>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005864:	f043 0202 	orr.w	r2, r3, #2
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_UART_IRQHandler+0xd0>
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005884:	f043 0204 	orr.w	r2, r3, #4
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00f      	beq.n	80058b6 <HAL_UART_IRQHandler+0xfa>
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <HAL_UART_IRQHandler+0xee>
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ae:	f043 0208 	orr.w	r2, r3, #8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d078      	beq.n	80059b0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d007      	beq.n	80058d8 <HAL_UART_IRQHandler+0x11c>
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f970 	bl	8005bb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b40      	cmp	r3, #64	; 0x40
 80058e4:	bf0c      	ite	eq
 80058e6:	2301      	moveq	r3, #1
 80058e8:	2300      	movne	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <HAL_UART_IRQHandler+0x144>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d031      	beq.n	8005964 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f8b9 	bl	8005a78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b40      	cmp	r3, #64	; 0x40
 8005912:	d123      	bne.n	800595c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005922:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005928:	2b00      	cmp	r3, #0
 800592a:	d013      	beq.n	8005954 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <HAL_UART_IRQHandler+0x1fc>)
 8005932:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe f87f 	bl	8003a3c <HAL_DMA_Abort_IT>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d016      	beq.n	8005972 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800594e:	4610      	mov	r0, r2
 8005950:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005952:	e00e      	b.n	8005972 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f83b 	bl	80059d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595a:	e00a      	b.n	8005972 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f837 	bl	80059d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005962:	e006      	b.n	8005972 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f833 	bl	80059d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005970:	e01e      	b.n	80059b0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005972:	bf00      	nop
    return;
 8005974:	e01c      	b.n	80059b0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	2b00      	cmp	r3, #0
 800597e:	d008      	beq.n	8005992 <HAL_UART_IRQHandler+0x1d6>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8a6 	bl	8005adc <UART_Transmit_IT>
    return;
 8005990:	e00f      	b.n	80059b2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <HAL_UART_IRQHandler+0x1f6>
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f8ee 	bl	8005b88 <UART_EndTransmit_IT>
    return;
 80059ac:	bf00      	nop
 80059ae:	e000      	b.n	80059b2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80059b0:	bf00      	nop
  }
}
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	08005ab5 	.word	0x08005ab5

080059bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f4:	e02c      	b.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fc:	d028      	beq.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a04:	f7fd fcdc 	bl	80033c0 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d21d      	bcs.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a22:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0201 	bic.w	r2, r2, #1
 8005a32:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e00f      	b.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	bf0c      	ite	eq
 8005a60:	2301      	moveq	r3, #1
 8005a62:	2300      	movne	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d0c3      	beq.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff ff7e 	bl	80059d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad4:	bf00      	nop
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b21      	cmp	r3, #33	; 0x21
 8005aee:	d144      	bne.n	8005b7a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af8:	d11a      	bne.n	8005b30 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b0e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d105      	bne.n	8005b24 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	1c9a      	adds	r2, r3, #2
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	621a      	str	r2, [r3, #32]
 8005b22:	e00e      	b.n	8005b42 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	621a      	str	r2, [r3, #32]
 8005b2e:	e008      	b.n	8005b42 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	1c59      	adds	r1, r3, #1
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6211      	str	r1, [r2, #32]
 8005b3a:	781a      	ldrb	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10f      	bne.n	8005b76 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff ff07 	bl	80059bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b22      	cmp	r3, #34	; 0x22
 8005bca:	d171      	bne.n	8005cb0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd4:	d123      	bne.n	8005c1e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10e      	bne.n	8005c02 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	1c9a      	adds	r2, r3, #2
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8005c00:	e029      	b.n	8005c56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c1c:	e01b      	b.n	8005c56 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6858      	ldr	r0, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c30:	1c59      	adds	r1, r3, #1
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6291      	str	r1, [r2, #40]	; 0x28
 8005c36:	b2c2      	uxtb	r2, r0
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	e00c      	b.n	8005c56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c48:	1c58      	adds	r0, r3, #1
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	6288      	str	r0, [r1, #40]	; 0x28
 8005c4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	4619      	mov	r1, r3
 8005c64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d120      	bne.n	8005cac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0220 	bic.w	r2, r2, #32
 8005c78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0201 	bic.w	r2, r2, #1
 8005c98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fc fe70 	bl	8002988 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	e002      	b.n	8005cb2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e000      	b.n	8005cb2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005cb0:	2302      	movs	r3, #2
  }
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005cfe:	f023 030c 	bic.w	r3, r3, #12
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	68f9      	ldr	r1, [r7, #12]
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d2a:	f040 818b 	bne.w	8006044 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4ac1      	ldr	r2, [pc, #772]	; (8006038 <UART_SetConfig+0x37c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d005      	beq.n	8005d44 <UART_SetConfig+0x88>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4abf      	ldr	r2, [pc, #764]	; (800603c <UART_SetConfig+0x380>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	f040 80bd 	bne.w	8005ebe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d44:	f7fe fba0 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 8005d48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	461d      	mov	r5, r3
 8005d4e:	f04f 0600 	mov.w	r6, #0
 8005d52:	46a8      	mov	r8, r5
 8005d54:	46b1      	mov	r9, r6
 8005d56:	eb18 0308 	adds.w	r3, r8, r8
 8005d5a:	eb49 0409 	adc.w	r4, r9, r9
 8005d5e:	4698      	mov	r8, r3
 8005d60:	46a1      	mov	r9, r4
 8005d62:	eb18 0805 	adds.w	r8, r8, r5
 8005d66:	eb49 0906 	adc.w	r9, r9, r6
 8005d6a:	f04f 0100 	mov.w	r1, #0
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d7e:	4688      	mov	r8, r1
 8005d80:	4691      	mov	r9, r2
 8005d82:	eb18 0005 	adds.w	r0, r8, r5
 8005d86:	eb49 0106 	adc.w	r1, r9, r6
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	461d      	mov	r5, r3
 8005d90:	f04f 0600 	mov.w	r6, #0
 8005d94:	196b      	adds	r3, r5, r5
 8005d96:	eb46 0406 	adc.w	r4, r6, r6
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	f7fa ff2d 	bl	8000bfc <__aeabi_uldivmod>
 8005da2:	4603      	mov	r3, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	461a      	mov	r2, r3
 8005da8:	4ba5      	ldr	r3, [pc, #660]	; (8006040 <UART_SetConfig+0x384>)
 8005daa:	fba3 2302 	umull	r2, r3, r3, r2
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	461d      	mov	r5, r3
 8005db8:	f04f 0600 	mov.w	r6, #0
 8005dbc:	46a9      	mov	r9, r5
 8005dbe:	46b2      	mov	sl, r6
 8005dc0:	eb19 0309 	adds.w	r3, r9, r9
 8005dc4:	eb4a 040a 	adc.w	r4, sl, sl
 8005dc8:	4699      	mov	r9, r3
 8005dca:	46a2      	mov	sl, r4
 8005dcc:	eb19 0905 	adds.w	r9, r9, r5
 8005dd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dd4:	f04f 0100 	mov.w	r1, #0
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005de0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005de4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005de8:	4689      	mov	r9, r1
 8005dea:	4692      	mov	sl, r2
 8005dec:	eb19 0005 	adds.w	r0, r9, r5
 8005df0:	eb4a 0106 	adc.w	r1, sl, r6
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	461d      	mov	r5, r3
 8005dfa:	f04f 0600 	mov.w	r6, #0
 8005dfe:	196b      	adds	r3, r5, r5
 8005e00:	eb46 0406 	adc.w	r4, r6, r6
 8005e04:	461a      	mov	r2, r3
 8005e06:	4623      	mov	r3, r4
 8005e08:	f7fa fef8 	bl	8000bfc <__aeabi_uldivmod>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	460c      	mov	r4, r1
 8005e10:	461a      	mov	r2, r3
 8005e12:	4b8b      	ldr	r3, [pc, #556]	; (8006040 <UART_SetConfig+0x384>)
 8005e14:	fba3 1302 	umull	r1, r3, r3, r2
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	2164      	movs	r1, #100	; 0x64
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	3332      	adds	r3, #50	; 0x32
 8005e26:	4a86      	ldr	r2, [pc, #536]	; (8006040 <UART_SetConfig+0x384>)
 8005e28:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e34:	4498      	add	r8, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	461d      	mov	r5, r3
 8005e3a:	f04f 0600 	mov.w	r6, #0
 8005e3e:	46a9      	mov	r9, r5
 8005e40:	46b2      	mov	sl, r6
 8005e42:	eb19 0309 	adds.w	r3, r9, r9
 8005e46:	eb4a 040a 	adc.w	r4, sl, sl
 8005e4a:	4699      	mov	r9, r3
 8005e4c:	46a2      	mov	sl, r4
 8005e4e:	eb19 0905 	adds.w	r9, r9, r5
 8005e52:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e56:	f04f 0100 	mov.w	r1, #0
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e6a:	4689      	mov	r9, r1
 8005e6c:	4692      	mov	sl, r2
 8005e6e:	eb19 0005 	adds.w	r0, r9, r5
 8005e72:	eb4a 0106 	adc.w	r1, sl, r6
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	461d      	mov	r5, r3
 8005e7c:	f04f 0600 	mov.w	r6, #0
 8005e80:	196b      	adds	r3, r5, r5
 8005e82:	eb46 0406 	adc.w	r4, r6, r6
 8005e86:	461a      	mov	r2, r3
 8005e88:	4623      	mov	r3, r4
 8005e8a:	f7fa feb7 	bl	8000bfc <__aeabi_uldivmod>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	460c      	mov	r4, r1
 8005e92:	461a      	mov	r2, r3
 8005e94:	4b6a      	ldr	r3, [pc, #424]	; (8006040 <UART_SetConfig+0x384>)
 8005e96:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	2164      	movs	r1, #100	; 0x64
 8005e9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	3332      	adds	r3, #50	; 0x32
 8005ea8:	4a65      	ldr	r2, [pc, #404]	; (8006040 <UART_SetConfig+0x384>)
 8005eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	f003 0207 	and.w	r2, r3, #7
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4442      	add	r2, r8
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	e26f      	b.n	800639e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ebe:	f7fe facf 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8005ec2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	461d      	mov	r5, r3
 8005ec8:	f04f 0600 	mov.w	r6, #0
 8005ecc:	46a8      	mov	r8, r5
 8005ece:	46b1      	mov	r9, r6
 8005ed0:	eb18 0308 	adds.w	r3, r8, r8
 8005ed4:	eb49 0409 	adc.w	r4, r9, r9
 8005ed8:	4698      	mov	r8, r3
 8005eda:	46a1      	mov	r9, r4
 8005edc:	eb18 0805 	adds.w	r8, r8, r5
 8005ee0:	eb49 0906 	adc.w	r9, r9, r6
 8005ee4:	f04f 0100 	mov.w	r1, #0
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ef0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ef4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ef8:	4688      	mov	r8, r1
 8005efa:	4691      	mov	r9, r2
 8005efc:	eb18 0005 	adds.w	r0, r8, r5
 8005f00:	eb49 0106 	adc.w	r1, r9, r6
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	461d      	mov	r5, r3
 8005f0a:	f04f 0600 	mov.w	r6, #0
 8005f0e:	196b      	adds	r3, r5, r5
 8005f10:	eb46 0406 	adc.w	r4, r6, r6
 8005f14:	461a      	mov	r2, r3
 8005f16:	4623      	mov	r3, r4
 8005f18:	f7fa fe70 	bl	8000bfc <__aeabi_uldivmod>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	461a      	mov	r2, r3
 8005f22:	4b47      	ldr	r3, [pc, #284]	; (8006040 <UART_SetConfig+0x384>)
 8005f24:	fba3 2302 	umull	r2, r3, r3, r2
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	461d      	mov	r5, r3
 8005f32:	f04f 0600 	mov.w	r6, #0
 8005f36:	46a9      	mov	r9, r5
 8005f38:	46b2      	mov	sl, r6
 8005f3a:	eb19 0309 	adds.w	r3, r9, r9
 8005f3e:	eb4a 040a 	adc.w	r4, sl, sl
 8005f42:	4699      	mov	r9, r3
 8005f44:	46a2      	mov	sl, r4
 8005f46:	eb19 0905 	adds.w	r9, r9, r5
 8005f4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f4e:	f04f 0100 	mov.w	r1, #0
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f62:	4689      	mov	r9, r1
 8005f64:	4692      	mov	sl, r2
 8005f66:	eb19 0005 	adds.w	r0, r9, r5
 8005f6a:	eb4a 0106 	adc.w	r1, sl, r6
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	461d      	mov	r5, r3
 8005f74:	f04f 0600 	mov.w	r6, #0
 8005f78:	196b      	adds	r3, r5, r5
 8005f7a:	eb46 0406 	adc.w	r4, r6, r6
 8005f7e:	461a      	mov	r2, r3
 8005f80:	4623      	mov	r3, r4
 8005f82:	f7fa fe3b 	bl	8000bfc <__aeabi_uldivmod>
 8005f86:	4603      	mov	r3, r0
 8005f88:	460c      	mov	r4, r1
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4b2c      	ldr	r3, [pc, #176]	; (8006040 <UART_SetConfig+0x384>)
 8005f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	2164      	movs	r1, #100	; 0x64
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	3332      	adds	r3, #50	; 0x32
 8005fa0:	4a27      	ldr	r2, [pc, #156]	; (8006040 <UART_SetConfig+0x384>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fae:	4498      	add	r8, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	461d      	mov	r5, r3
 8005fb4:	f04f 0600 	mov.w	r6, #0
 8005fb8:	46a9      	mov	r9, r5
 8005fba:	46b2      	mov	sl, r6
 8005fbc:	eb19 0309 	adds.w	r3, r9, r9
 8005fc0:	eb4a 040a 	adc.w	r4, sl, sl
 8005fc4:	4699      	mov	r9, r3
 8005fc6:	46a2      	mov	sl, r4
 8005fc8:	eb19 0905 	adds.w	r9, r9, r5
 8005fcc:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fd0:	f04f 0100 	mov.w	r1, #0
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fe4:	4689      	mov	r9, r1
 8005fe6:	4692      	mov	sl, r2
 8005fe8:	eb19 0005 	adds.w	r0, r9, r5
 8005fec:	eb4a 0106 	adc.w	r1, sl, r6
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	461d      	mov	r5, r3
 8005ff6:	f04f 0600 	mov.w	r6, #0
 8005ffa:	196b      	adds	r3, r5, r5
 8005ffc:	eb46 0406 	adc.w	r4, r6, r6
 8006000:	461a      	mov	r2, r3
 8006002:	4623      	mov	r3, r4
 8006004:	f7fa fdfa 	bl	8000bfc <__aeabi_uldivmod>
 8006008:	4603      	mov	r3, r0
 800600a:	460c      	mov	r4, r1
 800600c:	461a      	mov	r2, r3
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <UART_SetConfig+0x384>)
 8006010:	fba3 1302 	umull	r1, r3, r3, r2
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	2164      	movs	r1, #100	; 0x64
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	3332      	adds	r3, #50	; 0x32
 8006022:	4a07      	ldr	r2, [pc, #28]	; (8006040 <UART_SetConfig+0x384>)
 8006024:	fba2 2303 	umull	r2, r3, r2, r3
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	f003 0207 	and.w	r2, r3, #7
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4442      	add	r2, r8
 8006034:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006036:	e1b2      	b.n	800639e <UART_SetConfig+0x6e2>
 8006038:	40011000 	.word	0x40011000
 800603c:	40011400 	.word	0x40011400
 8006040:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4ad7      	ldr	r2, [pc, #860]	; (80063a8 <UART_SetConfig+0x6ec>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d005      	beq.n	800605a <UART_SetConfig+0x39e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4ad6      	ldr	r2, [pc, #856]	; (80063ac <UART_SetConfig+0x6f0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	f040 80d1 	bne.w	80061fc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800605a:	f7fe fa15 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 800605e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	469a      	mov	sl, r3
 8006064:	f04f 0b00 	mov.w	fp, #0
 8006068:	46d0      	mov	r8, sl
 800606a:	46d9      	mov	r9, fp
 800606c:	eb18 0308 	adds.w	r3, r8, r8
 8006070:	eb49 0409 	adc.w	r4, r9, r9
 8006074:	4698      	mov	r8, r3
 8006076:	46a1      	mov	r9, r4
 8006078:	eb18 080a 	adds.w	r8, r8, sl
 800607c:	eb49 090b 	adc.w	r9, r9, fp
 8006080:	f04f 0100 	mov.w	r1, #0
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800608c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006090:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006094:	4688      	mov	r8, r1
 8006096:	4691      	mov	r9, r2
 8006098:	eb1a 0508 	adds.w	r5, sl, r8
 800609c:	eb4b 0609 	adc.w	r6, fp, r9
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4619      	mov	r1, r3
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	f04f 0300 	mov.w	r3, #0
 80060ae:	f04f 0400 	mov.w	r4, #0
 80060b2:	0094      	lsls	r4, r2, #2
 80060b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060b8:	008b      	lsls	r3, r1, #2
 80060ba:	461a      	mov	r2, r3
 80060bc:	4623      	mov	r3, r4
 80060be:	4628      	mov	r0, r5
 80060c0:	4631      	mov	r1, r6
 80060c2:	f7fa fd9b 	bl	8000bfc <__aeabi_uldivmod>
 80060c6:	4603      	mov	r3, r0
 80060c8:	460c      	mov	r4, r1
 80060ca:	461a      	mov	r2, r3
 80060cc:	4bb8      	ldr	r3, [pc, #736]	; (80063b0 <UART_SetConfig+0x6f4>)
 80060ce:	fba3 2302 	umull	r2, r3, r3, r2
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	469b      	mov	fp, r3
 80060dc:	f04f 0c00 	mov.w	ip, #0
 80060e0:	46d9      	mov	r9, fp
 80060e2:	46e2      	mov	sl, ip
 80060e4:	eb19 0309 	adds.w	r3, r9, r9
 80060e8:	eb4a 040a 	adc.w	r4, sl, sl
 80060ec:	4699      	mov	r9, r3
 80060ee:	46a2      	mov	sl, r4
 80060f0:	eb19 090b 	adds.w	r9, r9, fp
 80060f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060f8:	f04f 0100 	mov.w	r1, #0
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800610c:	4689      	mov	r9, r1
 800610e:	4692      	mov	sl, r2
 8006110:	eb1b 0509 	adds.w	r5, fp, r9
 8006114:	eb4c 060a 	adc.w	r6, ip, sl
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	4619      	mov	r1, r3
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	f04f 0400 	mov.w	r4, #0
 800612a:	0094      	lsls	r4, r2, #2
 800612c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006130:	008b      	lsls	r3, r1, #2
 8006132:	461a      	mov	r2, r3
 8006134:	4623      	mov	r3, r4
 8006136:	4628      	mov	r0, r5
 8006138:	4631      	mov	r1, r6
 800613a:	f7fa fd5f 	bl	8000bfc <__aeabi_uldivmod>
 800613e:	4603      	mov	r3, r0
 8006140:	460c      	mov	r4, r1
 8006142:	461a      	mov	r2, r3
 8006144:	4b9a      	ldr	r3, [pc, #616]	; (80063b0 <UART_SetConfig+0x6f4>)
 8006146:	fba3 1302 	umull	r1, r3, r3, r2
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2164      	movs	r1, #100	; 0x64
 800614e:	fb01 f303 	mul.w	r3, r1, r3
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	3332      	adds	r3, #50	; 0x32
 8006158:	4a95      	ldr	r2, [pc, #596]	; (80063b0 <UART_SetConfig+0x6f4>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006164:	4498      	add	r8, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	469b      	mov	fp, r3
 800616a:	f04f 0c00 	mov.w	ip, #0
 800616e:	46d9      	mov	r9, fp
 8006170:	46e2      	mov	sl, ip
 8006172:	eb19 0309 	adds.w	r3, r9, r9
 8006176:	eb4a 040a 	adc.w	r4, sl, sl
 800617a:	4699      	mov	r9, r3
 800617c:	46a2      	mov	sl, r4
 800617e:	eb19 090b 	adds.w	r9, r9, fp
 8006182:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006186:	f04f 0100 	mov.w	r1, #0
 800618a:	f04f 0200 	mov.w	r2, #0
 800618e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006192:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006196:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800619a:	4689      	mov	r9, r1
 800619c:	4692      	mov	sl, r2
 800619e:	eb1b 0509 	adds.w	r5, fp, r9
 80061a2:	eb4c 060a 	adc.w	r6, ip, sl
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	4619      	mov	r1, r3
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	f04f 0400 	mov.w	r4, #0
 80061b8:	0094      	lsls	r4, r2, #2
 80061ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061be:	008b      	lsls	r3, r1, #2
 80061c0:	461a      	mov	r2, r3
 80061c2:	4623      	mov	r3, r4
 80061c4:	4628      	mov	r0, r5
 80061c6:	4631      	mov	r1, r6
 80061c8:	f7fa fd18 	bl	8000bfc <__aeabi_uldivmod>
 80061cc:	4603      	mov	r3, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	461a      	mov	r2, r3
 80061d2:	4b77      	ldr	r3, [pc, #476]	; (80063b0 <UART_SetConfig+0x6f4>)
 80061d4:	fba3 1302 	umull	r1, r3, r3, r2
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	2164      	movs	r1, #100	; 0x64
 80061dc:	fb01 f303 	mul.w	r3, r1, r3
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	3332      	adds	r3, #50	; 0x32
 80061e6:	4a72      	ldr	r2, [pc, #456]	; (80063b0 <UART_SetConfig+0x6f4>)
 80061e8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	f003 020f 	and.w	r2, r3, #15
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4442      	add	r2, r8
 80061f8:	609a      	str	r2, [r3, #8]
 80061fa:	e0d0      	b.n	800639e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80061fc:	f7fe f930 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8006200:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	469a      	mov	sl, r3
 8006206:	f04f 0b00 	mov.w	fp, #0
 800620a:	46d0      	mov	r8, sl
 800620c:	46d9      	mov	r9, fp
 800620e:	eb18 0308 	adds.w	r3, r8, r8
 8006212:	eb49 0409 	adc.w	r4, r9, r9
 8006216:	4698      	mov	r8, r3
 8006218:	46a1      	mov	r9, r4
 800621a:	eb18 080a 	adds.w	r8, r8, sl
 800621e:	eb49 090b 	adc.w	r9, r9, fp
 8006222:	f04f 0100 	mov.w	r1, #0
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800622e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006232:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006236:	4688      	mov	r8, r1
 8006238:	4691      	mov	r9, r2
 800623a:	eb1a 0508 	adds.w	r5, sl, r8
 800623e:	eb4b 0609 	adc.w	r6, fp, r9
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4619      	mov	r1, r3
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	f04f 0400 	mov.w	r4, #0
 8006254:	0094      	lsls	r4, r2, #2
 8006256:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800625a:	008b      	lsls	r3, r1, #2
 800625c:	461a      	mov	r2, r3
 800625e:	4623      	mov	r3, r4
 8006260:	4628      	mov	r0, r5
 8006262:	4631      	mov	r1, r6
 8006264:	f7fa fcca 	bl	8000bfc <__aeabi_uldivmod>
 8006268:	4603      	mov	r3, r0
 800626a:	460c      	mov	r4, r1
 800626c:	461a      	mov	r2, r3
 800626e:	4b50      	ldr	r3, [pc, #320]	; (80063b0 <UART_SetConfig+0x6f4>)
 8006270:	fba3 2302 	umull	r2, r3, r3, r2
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	469b      	mov	fp, r3
 800627e:	f04f 0c00 	mov.w	ip, #0
 8006282:	46d9      	mov	r9, fp
 8006284:	46e2      	mov	sl, ip
 8006286:	eb19 0309 	adds.w	r3, r9, r9
 800628a:	eb4a 040a 	adc.w	r4, sl, sl
 800628e:	4699      	mov	r9, r3
 8006290:	46a2      	mov	sl, r4
 8006292:	eb19 090b 	adds.w	r9, r9, fp
 8006296:	eb4a 0a0c 	adc.w	sl, sl, ip
 800629a:	f04f 0100 	mov.w	r1, #0
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062ae:	4689      	mov	r9, r1
 80062b0:	4692      	mov	sl, r2
 80062b2:	eb1b 0509 	adds.w	r5, fp, r9
 80062b6:	eb4c 060a 	adc.w	r6, ip, sl
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	4619      	mov	r1, r3
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	f04f 0400 	mov.w	r4, #0
 80062cc:	0094      	lsls	r4, r2, #2
 80062ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062d2:	008b      	lsls	r3, r1, #2
 80062d4:	461a      	mov	r2, r3
 80062d6:	4623      	mov	r3, r4
 80062d8:	4628      	mov	r0, r5
 80062da:	4631      	mov	r1, r6
 80062dc:	f7fa fc8e 	bl	8000bfc <__aeabi_uldivmod>
 80062e0:	4603      	mov	r3, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	461a      	mov	r2, r3
 80062e6:	4b32      	ldr	r3, [pc, #200]	; (80063b0 <UART_SetConfig+0x6f4>)
 80062e8:	fba3 1302 	umull	r1, r3, r3, r2
 80062ec:	095b      	lsrs	r3, r3, #5
 80062ee:	2164      	movs	r1, #100	; 0x64
 80062f0:	fb01 f303 	mul.w	r3, r1, r3
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	3332      	adds	r3, #50	; 0x32
 80062fa:	4a2d      	ldr	r2, [pc, #180]	; (80063b0 <UART_SetConfig+0x6f4>)
 80062fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006306:	4498      	add	r8, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	469b      	mov	fp, r3
 800630c:	f04f 0c00 	mov.w	ip, #0
 8006310:	46d9      	mov	r9, fp
 8006312:	46e2      	mov	sl, ip
 8006314:	eb19 0309 	adds.w	r3, r9, r9
 8006318:	eb4a 040a 	adc.w	r4, sl, sl
 800631c:	4699      	mov	r9, r3
 800631e:	46a2      	mov	sl, r4
 8006320:	eb19 090b 	adds.w	r9, r9, fp
 8006324:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006328:	f04f 0100 	mov.w	r1, #0
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006334:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006338:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800633c:	4689      	mov	r9, r1
 800633e:	4692      	mov	sl, r2
 8006340:	eb1b 0509 	adds.w	r5, fp, r9
 8006344:	eb4c 060a 	adc.w	r6, ip, sl
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	4619      	mov	r1, r3
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	f04f 0400 	mov.w	r4, #0
 800635a:	0094      	lsls	r4, r2, #2
 800635c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006360:	008b      	lsls	r3, r1, #2
 8006362:	461a      	mov	r2, r3
 8006364:	4623      	mov	r3, r4
 8006366:	4628      	mov	r0, r5
 8006368:	4631      	mov	r1, r6
 800636a:	f7fa fc47 	bl	8000bfc <__aeabi_uldivmod>
 800636e:	4603      	mov	r3, r0
 8006370:	460c      	mov	r4, r1
 8006372:	461a      	mov	r2, r3
 8006374:	4b0e      	ldr	r3, [pc, #56]	; (80063b0 <UART_SetConfig+0x6f4>)
 8006376:	fba3 1302 	umull	r1, r3, r3, r2
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	2164      	movs	r1, #100	; 0x64
 800637e:	fb01 f303 	mul.w	r3, r1, r3
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	3332      	adds	r3, #50	; 0x32
 8006388:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <UART_SetConfig+0x6f4>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	f003 020f 	and.w	r2, r3, #15
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4442      	add	r2, r8
 800639a:	609a      	str	r2, [r3, #8]
}
 800639c:	e7ff      	b.n	800639e <UART_SetConfig+0x6e2>
 800639e:	bf00      	nop
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a8:	40011000 	.word	0x40011000
 80063ac:	40011400 	.word	0x40011400
 80063b0:	51eb851f 	.word	0x51eb851f

080063b4 <__errno>:
 80063b4:	4b01      	ldr	r3, [pc, #4]	; (80063bc <__errno+0x8>)
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000014 	.word	0x20000014

080063c0 <__libc_init_array>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	4e0d      	ldr	r6, [pc, #52]	; (80063f8 <__libc_init_array+0x38>)
 80063c4:	4c0d      	ldr	r4, [pc, #52]	; (80063fc <__libc_init_array+0x3c>)
 80063c6:	1ba4      	subs	r4, r4, r6
 80063c8:	10a4      	asrs	r4, r4, #2
 80063ca:	2500      	movs	r5, #0
 80063cc:	42a5      	cmp	r5, r4
 80063ce:	d109      	bne.n	80063e4 <__libc_init_array+0x24>
 80063d0:	4e0b      	ldr	r6, [pc, #44]	; (8006400 <__libc_init_array+0x40>)
 80063d2:	4c0c      	ldr	r4, [pc, #48]	; (8006404 <__libc_init_array+0x44>)
 80063d4:	f001 fc3a 	bl	8007c4c <_init>
 80063d8:	1ba4      	subs	r4, r4, r6
 80063da:	10a4      	asrs	r4, r4, #2
 80063dc:	2500      	movs	r5, #0
 80063de:	42a5      	cmp	r5, r4
 80063e0:	d105      	bne.n	80063ee <__libc_init_array+0x2e>
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063e8:	4798      	blx	r3
 80063ea:	3501      	adds	r5, #1
 80063ec:	e7ee      	b.n	80063cc <__libc_init_array+0xc>
 80063ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063f2:	4798      	blx	r3
 80063f4:	3501      	adds	r5, #1
 80063f6:	e7f2      	b.n	80063de <__libc_init_array+0x1e>
 80063f8:	08008408 	.word	0x08008408
 80063fc:	08008408 	.word	0x08008408
 8006400:	08008408 	.word	0x08008408
 8006404:	0800840c 	.word	0x0800840c

08006408 <memcpy>:
 8006408:	b510      	push	{r4, lr}
 800640a:	1e43      	subs	r3, r0, #1
 800640c:	440a      	add	r2, r1
 800640e:	4291      	cmp	r1, r2
 8006410:	d100      	bne.n	8006414 <memcpy+0xc>
 8006412:	bd10      	pop	{r4, pc}
 8006414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800641c:	e7f7      	b.n	800640e <memcpy+0x6>

0800641e <memset>:
 800641e:	4402      	add	r2, r0
 8006420:	4603      	mov	r3, r0
 8006422:	4293      	cmp	r3, r2
 8006424:	d100      	bne.n	8006428 <memset+0xa>
 8006426:	4770      	bx	lr
 8006428:	f803 1b01 	strb.w	r1, [r3], #1
 800642c:	e7f9      	b.n	8006422 <memset+0x4>
	...

08006430 <siprintf>:
 8006430:	b40e      	push	{r1, r2, r3}
 8006432:	b500      	push	{lr}
 8006434:	b09c      	sub	sp, #112	; 0x70
 8006436:	ab1d      	add	r3, sp, #116	; 0x74
 8006438:	9002      	str	r0, [sp, #8]
 800643a:	9006      	str	r0, [sp, #24]
 800643c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006440:	4809      	ldr	r0, [pc, #36]	; (8006468 <siprintf+0x38>)
 8006442:	9107      	str	r1, [sp, #28]
 8006444:	9104      	str	r1, [sp, #16]
 8006446:	4909      	ldr	r1, [pc, #36]	; (800646c <siprintf+0x3c>)
 8006448:	f853 2b04 	ldr.w	r2, [r3], #4
 800644c:	9105      	str	r1, [sp, #20]
 800644e:	6800      	ldr	r0, [r0, #0]
 8006450:	9301      	str	r3, [sp, #4]
 8006452:	a902      	add	r1, sp, #8
 8006454:	f000 f866 	bl	8006524 <_svfiprintf_r>
 8006458:	9b02      	ldr	r3, [sp, #8]
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	b01c      	add	sp, #112	; 0x70
 8006460:	f85d eb04 	ldr.w	lr, [sp], #4
 8006464:	b003      	add	sp, #12
 8006466:	4770      	bx	lr
 8006468:	20000014 	.word	0x20000014
 800646c:	ffff0208 	.word	0xffff0208

08006470 <__ssputs_r>:
 8006470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006474:	688e      	ldr	r6, [r1, #8]
 8006476:	429e      	cmp	r6, r3
 8006478:	4682      	mov	sl, r0
 800647a:	460c      	mov	r4, r1
 800647c:	4690      	mov	r8, r2
 800647e:	4699      	mov	r9, r3
 8006480:	d837      	bhi.n	80064f2 <__ssputs_r+0x82>
 8006482:	898a      	ldrh	r2, [r1, #12]
 8006484:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006488:	d031      	beq.n	80064ee <__ssputs_r+0x7e>
 800648a:	6825      	ldr	r5, [r4, #0]
 800648c:	6909      	ldr	r1, [r1, #16]
 800648e:	1a6f      	subs	r7, r5, r1
 8006490:	6965      	ldr	r5, [r4, #20]
 8006492:	2302      	movs	r3, #2
 8006494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006498:	fb95 f5f3 	sdiv	r5, r5, r3
 800649c:	f109 0301 	add.w	r3, r9, #1
 80064a0:	443b      	add	r3, r7
 80064a2:	429d      	cmp	r5, r3
 80064a4:	bf38      	it	cc
 80064a6:	461d      	movcc	r5, r3
 80064a8:	0553      	lsls	r3, r2, #21
 80064aa:	d530      	bpl.n	800650e <__ssputs_r+0x9e>
 80064ac:	4629      	mov	r1, r5
 80064ae:	f000 fb21 	bl	8006af4 <_malloc_r>
 80064b2:	4606      	mov	r6, r0
 80064b4:	b950      	cbnz	r0, 80064cc <__ssputs_r+0x5c>
 80064b6:	230c      	movs	r3, #12
 80064b8:	f8ca 3000 	str.w	r3, [sl]
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c2:	81a3      	strh	r3, [r4, #12]
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064cc:	463a      	mov	r2, r7
 80064ce:	6921      	ldr	r1, [r4, #16]
 80064d0:	f7ff ff9a 	bl	8006408 <memcpy>
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064de:	81a3      	strh	r3, [r4, #12]
 80064e0:	6126      	str	r6, [r4, #16]
 80064e2:	6165      	str	r5, [r4, #20]
 80064e4:	443e      	add	r6, r7
 80064e6:	1bed      	subs	r5, r5, r7
 80064e8:	6026      	str	r6, [r4, #0]
 80064ea:	60a5      	str	r5, [r4, #8]
 80064ec:	464e      	mov	r6, r9
 80064ee:	454e      	cmp	r6, r9
 80064f0:	d900      	bls.n	80064f4 <__ssputs_r+0x84>
 80064f2:	464e      	mov	r6, r9
 80064f4:	4632      	mov	r2, r6
 80064f6:	4641      	mov	r1, r8
 80064f8:	6820      	ldr	r0, [r4, #0]
 80064fa:	f000 fa93 	bl	8006a24 <memmove>
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	1b9b      	subs	r3, r3, r6
 8006502:	60a3      	str	r3, [r4, #8]
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	441e      	add	r6, r3
 8006508:	6026      	str	r6, [r4, #0]
 800650a:	2000      	movs	r0, #0
 800650c:	e7dc      	b.n	80064c8 <__ssputs_r+0x58>
 800650e:	462a      	mov	r2, r5
 8006510:	f000 fb4a 	bl	8006ba8 <_realloc_r>
 8006514:	4606      	mov	r6, r0
 8006516:	2800      	cmp	r0, #0
 8006518:	d1e2      	bne.n	80064e0 <__ssputs_r+0x70>
 800651a:	6921      	ldr	r1, [r4, #16]
 800651c:	4650      	mov	r0, sl
 800651e:	f000 fa9b 	bl	8006a58 <_free_r>
 8006522:	e7c8      	b.n	80064b6 <__ssputs_r+0x46>

08006524 <_svfiprintf_r>:
 8006524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006528:	461d      	mov	r5, r3
 800652a:	898b      	ldrh	r3, [r1, #12]
 800652c:	061f      	lsls	r7, r3, #24
 800652e:	b09d      	sub	sp, #116	; 0x74
 8006530:	4680      	mov	r8, r0
 8006532:	460c      	mov	r4, r1
 8006534:	4616      	mov	r6, r2
 8006536:	d50f      	bpl.n	8006558 <_svfiprintf_r+0x34>
 8006538:	690b      	ldr	r3, [r1, #16]
 800653a:	b96b      	cbnz	r3, 8006558 <_svfiprintf_r+0x34>
 800653c:	2140      	movs	r1, #64	; 0x40
 800653e:	f000 fad9 	bl	8006af4 <_malloc_r>
 8006542:	6020      	str	r0, [r4, #0]
 8006544:	6120      	str	r0, [r4, #16]
 8006546:	b928      	cbnz	r0, 8006554 <_svfiprintf_r+0x30>
 8006548:	230c      	movs	r3, #12
 800654a:	f8c8 3000 	str.w	r3, [r8]
 800654e:	f04f 30ff 	mov.w	r0, #4294967295
 8006552:	e0c8      	b.n	80066e6 <_svfiprintf_r+0x1c2>
 8006554:	2340      	movs	r3, #64	; 0x40
 8006556:	6163      	str	r3, [r4, #20]
 8006558:	2300      	movs	r3, #0
 800655a:	9309      	str	r3, [sp, #36]	; 0x24
 800655c:	2320      	movs	r3, #32
 800655e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006562:	2330      	movs	r3, #48	; 0x30
 8006564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006568:	9503      	str	r5, [sp, #12]
 800656a:	f04f 0b01 	mov.w	fp, #1
 800656e:	4637      	mov	r7, r6
 8006570:	463d      	mov	r5, r7
 8006572:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006576:	b10b      	cbz	r3, 800657c <_svfiprintf_r+0x58>
 8006578:	2b25      	cmp	r3, #37	; 0x25
 800657a:	d13e      	bne.n	80065fa <_svfiprintf_r+0xd6>
 800657c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006580:	d00b      	beq.n	800659a <_svfiprintf_r+0x76>
 8006582:	4653      	mov	r3, sl
 8006584:	4632      	mov	r2, r6
 8006586:	4621      	mov	r1, r4
 8006588:	4640      	mov	r0, r8
 800658a:	f7ff ff71 	bl	8006470 <__ssputs_r>
 800658e:	3001      	adds	r0, #1
 8006590:	f000 80a4 	beq.w	80066dc <_svfiprintf_r+0x1b8>
 8006594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006596:	4453      	add	r3, sl
 8006598:	9309      	str	r3, [sp, #36]	; 0x24
 800659a:	783b      	ldrb	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 809d 	beq.w	80066dc <_svfiprintf_r+0x1b8>
 80065a2:	2300      	movs	r3, #0
 80065a4:	f04f 32ff 	mov.w	r2, #4294967295
 80065a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ac:	9304      	str	r3, [sp, #16]
 80065ae:	9307      	str	r3, [sp, #28]
 80065b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065b4:	931a      	str	r3, [sp, #104]	; 0x68
 80065b6:	462f      	mov	r7, r5
 80065b8:	2205      	movs	r2, #5
 80065ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80065be:	4850      	ldr	r0, [pc, #320]	; (8006700 <_svfiprintf_r+0x1dc>)
 80065c0:	f7f9 fe2e 	bl	8000220 <memchr>
 80065c4:	9b04      	ldr	r3, [sp, #16]
 80065c6:	b9d0      	cbnz	r0, 80065fe <_svfiprintf_r+0xda>
 80065c8:	06d9      	lsls	r1, r3, #27
 80065ca:	bf44      	itt	mi
 80065cc:	2220      	movmi	r2, #32
 80065ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065d2:	071a      	lsls	r2, r3, #28
 80065d4:	bf44      	itt	mi
 80065d6:	222b      	movmi	r2, #43	; 0x2b
 80065d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065dc:	782a      	ldrb	r2, [r5, #0]
 80065de:	2a2a      	cmp	r2, #42	; 0x2a
 80065e0:	d015      	beq.n	800660e <_svfiprintf_r+0xea>
 80065e2:	9a07      	ldr	r2, [sp, #28]
 80065e4:	462f      	mov	r7, r5
 80065e6:	2000      	movs	r0, #0
 80065e8:	250a      	movs	r5, #10
 80065ea:	4639      	mov	r1, r7
 80065ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065f0:	3b30      	subs	r3, #48	; 0x30
 80065f2:	2b09      	cmp	r3, #9
 80065f4:	d94d      	bls.n	8006692 <_svfiprintf_r+0x16e>
 80065f6:	b1b8      	cbz	r0, 8006628 <_svfiprintf_r+0x104>
 80065f8:	e00f      	b.n	800661a <_svfiprintf_r+0xf6>
 80065fa:	462f      	mov	r7, r5
 80065fc:	e7b8      	b.n	8006570 <_svfiprintf_r+0x4c>
 80065fe:	4a40      	ldr	r2, [pc, #256]	; (8006700 <_svfiprintf_r+0x1dc>)
 8006600:	1a80      	subs	r0, r0, r2
 8006602:	fa0b f000 	lsl.w	r0, fp, r0
 8006606:	4318      	orrs	r0, r3
 8006608:	9004      	str	r0, [sp, #16]
 800660a:	463d      	mov	r5, r7
 800660c:	e7d3      	b.n	80065b6 <_svfiprintf_r+0x92>
 800660e:	9a03      	ldr	r2, [sp, #12]
 8006610:	1d11      	adds	r1, r2, #4
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	9103      	str	r1, [sp, #12]
 8006616:	2a00      	cmp	r2, #0
 8006618:	db01      	blt.n	800661e <_svfiprintf_r+0xfa>
 800661a:	9207      	str	r2, [sp, #28]
 800661c:	e004      	b.n	8006628 <_svfiprintf_r+0x104>
 800661e:	4252      	negs	r2, r2
 8006620:	f043 0302 	orr.w	r3, r3, #2
 8006624:	9207      	str	r2, [sp, #28]
 8006626:	9304      	str	r3, [sp, #16]
 8006628:	783b      	ldrb	r3, [r7, #0]
 800662a:	2b2e      	cmp	r3, #46	; 0x2e
 800662c:	d10c      	bne.n	8006648 <_svfiprintf_r+0x124>
 800662e:	787b      	ldrb	r3, [r7, #1]
 8006630:	2b2a      	cmp	r3, #42	; 0x2a
 8006632:	d133      	bne.n	800669c <_svfiprintf_r+0x178>
 8006634:	9b03      	ldr	r3, [sp, #12]
 8006636:	1d1a      	adds	r2, r3, #4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	9203      	str	r2, [sp, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	bfb8      	it	lt
 8006640:	f04f 33ff 	movlt.w	r3, #4294967295
 8006644:	3702      	adds	r7, #2
 8006646:	9305      	str	r3, [sp, #20]
 8006648:	4d2e      	ldr	r5, [pc, #184]	; (8006704 <_svfiprintf_r+0x1e0>)
 800664a:	7839      	ldrb	r1, [r7, #0]
 800664c:	2203      	movs	r2, #3
 800664e:	4628      	mov	r0, r5
 8006650:	f7f9 fde6 	bl	8000220 <memchr>
 8006654:	b138      	cbz	r0, 8006666 <_svfiprintf_r+0x142>
 8006656:	2340      	movs	r3, #64	; 0x40
 8006658:	1b40      	subs	r0, r0, r5
 800665a:	fa03 f000 	lsl.w	r0, r3, r0
 800665e:	9b04      	ldr	r3, [sp, #16]
 8006660:	4303      	orrs	r3, r0
 8006662:	3701      	adds	r7, #1
 8006664:	9304      	str	r3, [sp, #16]
 8006666:	7839      	ldrb	r1, [r7, #0]
 8006668:	4827      	ldr	r0, [pc, #156]	; (8006708 <_svfiprintf_r+0x1e4>)
 800666a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800666e:	2206      	movs	r2, #6
 8006670:	1c7e      	adds	r6, r7, #1
 8006672:	f7f9 fdd5 	bl	8000220 <memchr>
 8006676:	2800      	cmp	r0, #0
 8006678:	d038      	beq.n	80066ec <_svfiprintf_r+0x1c8>
 800667a:	4b24      	ldr	r3, [pc, #144]	; (800670c <_svfiprintf_r+0x1e8>)
 800667c:	bb13      	cbnz	r3, 80066c4 <_svfiprintf_r+0x1a0>
 800667e:	9b03      	ldr	r3, [sp, #12]
 8006680:	3307      	adds	r3, #7
 8006682:	f023 0307 	bic.w	r3, r3, #7
 8006686:	3308      	adds	r3, #8
 8006688:	9303      	str	r3, [sp, #12]
 800668a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668c:	444b      	add	r3, r9
 800668e:	9309      	str	r3, [sp, #36]	; 0x24
 8006690:	e76d      	b.n	800656e <_svfiprintf_r+0x4a>
 8006692:	fb05 3202 	mla	r2, r5, r2, r3
 8006696:	2001      	movs	r0, #1
 8006698:	460f      	mov	r7, r1
 800669a:	e7a6      	b.n	80065ea <_svfiprintf_r+0xc6>
 800669c:	2300      	movs	r3, #0
 800669e:	3701      	adds	r7, #1
 80066a0:	9305      	str	r3, [sp, #20]
 80066a2:	4619      	mov	r1, r3
 80066a4:	250a      	movs	r5, #10
 80066a6:	4638      	mov	r0, r7
 80066a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ac:	3a30      	subs	r2, #48	; 0x30
 80066ae:	2a09      	cmp	r2, #9
 80066b0:	d903      	bls.n	80066ba <_svfiprintf_r+0x196>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0c8      	beq.n	8006648 <_svfiprintf_r+0x124>
 80066b6:	9105      	str	r1, [sp, #20]
 80066b8:	e7c6      	b.n	8006648 <_svfiprintf_r+0x124>
 80066ba:	fb05 2101 	mla	r1, r5, r1, r2
 80066be:	2301      	movs	r3, #1
 80066c0:	4607      	mov	r7, r0
 80066c2:	e7f0      	b.n	80066a6 <_svfiprintf_r+0x182>
 80066c4:	ab03      	add	r3, sp, #12
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	4622      	mov	r2, r4
 80066ca:	4b11      	ldr	r3, [pc, #68]	; (8006710 <_svfiprintf_r+0x1ec>)
 80066cc:	a904      	add	r1, sp, #16
 80066ce:	4640      	mov	r0, r8
 80066d0:	f3af 8000 	nop.w
 80066d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066d8:	4681      	mov	r9, r0
 80066da:	d1d6      	bne.n	800668a <_svfiprintf_r+0x166>
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	065b      	lsls	r3, r3, #25
 80066e0:	f53f af35 	bmi.w	800654e <_svfiprintf_r+0x2a>
 80066e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066e6:	b01d      	add	sp, #116	; 0x74
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ec:	ab03      	add	r3, sp, #12
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	4622      	mov	r2, r4
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <_svfiprintf_r+0x1ec>)
 80066f4:	a904      	add	r1, sp, #16
 80066f6:	4640      	mov	r0, r8
 80066f8:	f000 f882 	bl	8006800 <_printf_i>
 80066fc:	e7ea      	b.n	80066d4 <_svfiprintf_r+0x1b0>
 80066fe:	bf00      	nop
 8006700:	080081f4 	.word	0x080081f4
 8006704:	080081fa 	.word	0x080081fa
 8006708:	080081fe 	.word	0x080081fe
 800670c:	00000000 	.word	0x00000000
 8006710:	08006471 	.word	0x08006471

08006714 <_printf_common>:
 8006714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006718:	4691      	mov	r9, r2
 800671a:	461f      	mov	r7, r3
 800671c:	688a      	ldr	r2, [r1, #8]
 800671e:	690b      	ldr	r3, [r1, #16]
 8006720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006724:	4293      	cmp	r3, r2
 8006726:	bfb8      	it	lt
 8006728:	4613      	movlt	r3, r2
 800672a:	f8c9 3000 	str.w	r3, [r9]
 800672e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006732:	4606      	mov	r6, r0
 8006734:	460c      	mov	r4, r1
 8006736:	b112      	cbz	r2, 800673e <_printf_common+0x2a>
 8006738:	3301      	adds	r3, #1
 800673a:	f8c9 3000 	str.w	r3, [r9]
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	0699      	lsls	r1, r3, #26
 8006742:	bf42      	ittt	mi
 8006744:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006748:	3302      	addmi	r3, #2
 800674a:	f8c9 3000 	strmi.w	r3, [r9]
 800674e:	6825      	ldr	r5, [r4, #0]
 8006750:	f015 0506 	ands.w	r5, r5, #6
 8006754:	d107      	bne.n	8006766 <_printf_common+0x52>
 8006756:	f104 0a19 	add.w	sl, r4, #25
 800675a:	68e3      	ldr	r3, [r4, #12]
 800675c:	f8d9 2000 	ldr.w	r2, [r9]
 8006760:	1a9b      	subs	r3, r3, r2
 8006762:	42ab      	cmp	r3, r5
 8006764:	dc28      	bgt.n	80067b8 <_printf_common+0xa4>
 8006766:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800676a:	6822      	ldr	r2, [r4, #0]
 800676c:	3300      	adds	r3, #0
 800676e:	bf18      	it	ne
 8006770:	2301      	movne	r3, #1
 8006772:	0692      	lsls	r2, r2, #26
 8006774:	d42d      	bmi.n	80067d2 <_printf_common+0xbe>
 8006776:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800677a:	4639      	mov	r1, r7
 800677c:	4630      	mov	r0, r6
 800677e:	47c0      	blx	r8
 8006780:	3001      	adds	r0, #1
 8006782:	d020      	beq.n	80067c6 <_printf_common+0xb2>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	68e5      	ldr	r5, [r4, #12]
 8006788:	f8d9 2000 	ldr.w	r2, [r9]
 800678c:	f003 0306 	and.w	r3, r3, #6
 8006790:	2b04      	cmp	r3, #4
 8006792:	bf08      	it	eq
 8006794:	1aad      	subeq	r5, r5, r2
 8006796:	68a3      	ldr	r3, [r4, #8]
 8006798:	6922      	ldr	r2, [r4, #16]
 800679a:	bf0c      	ite	eq
 800679c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067a0:	2500      	movne	r5, #0
 80067a2:	4293      	cmp	r3, r2
 80067a4:	bfc4      	itt	gt
 80067a6:	1a9b      	subgt	r3, r3, r2
 80067a8:	18ed      	addgt	r5, r5, r3
 80067aa:	f04f 0900 	mov.w	r9, #0
 80067ae:	341a      	adds	r4, #26
 80067b0:	454d      	cmp	r5, r9
 80067b2:	d11a      	bne.n	80067ea <_printf_common+0xd6>
 80067b4:	2000      	movs	r0, #0
 80067b6:	e008      	b.n	80067ca <_printf_common+0xb6>
 80067b8:	2301      	movs	r3, #1
 80067ba:	4652      	mov	r2, sl
 80067bc:	4639      	mov	r1, r7
 80067be:	4630      	mov	r0, r6
 80067c0:	47c0      	blx	r8
 80067c2:	3001      	adds	r0, #1
 80067c4:	d103      	bne.n	80067ce <_printf_common+0xba>
 80067c6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ce:	3501      	adds	r5, #1
 80067d0:	e7c3      	b.n	800675a <_printf_common+0x46>
 80067d2:	18e1      	adds	r1, r4, r3
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	2030      	movs	r0, #48	; 0x30
 80067d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067dc:	4422      	add	r2, r4
 80067de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067e6:	3302      	adds	r3, #2
 80067e8:	e7c5      	b.n	8006776 <_printf_common+0x62>
 80067ea:	2301      	movs	r3, #1
 80067ec:	4622      	mov	r2, r4
 80067ee:	4639      	mov	r1, r7
 80067f0:	4630      	mov	r0, r6
 80067f2:	47c0      	blx	r8
 80067f4:	3001      	adds	r0, #1
 80067f6:	d0e6      	beq.n	80067c6 <_printf_common+0xb2>
 80067f8:	f109 0901 	add.w	r9, r9, #1
 80067fc:	e7d8      	b.n	80067b0 <_printf_common+0x9c>
	...

08006800 <_printf_i>:
 8006800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006804:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006808:	460c      	mov	r4, r1
 800680a:	7e09      	ldrb	r1, [r1, #24]
 800680c:	b085      	sub	sp, #20
 800680e:	296e      	cmp	r1, #110	; 0x6e
 8006810:	4617      	mov	r7, r2
 8006812:	4606      	mov	r6, r0
 8006814:	4698      	mov	r8, r3
 8006816:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006818:	f000 80b3 	beq.w	8006982 <_printf_i+0x182>
 800681c:	d822      	bhi.n	8006864 <_printf_i+0x64>
 800681e:	2963      	cmp	r1, #99	; 0x63
 8006820:	d036      	beq.n	8006890 <_printf_i+0x90>
 8006822:	d80a      	bhi.n	800683a <_printf_i+0x3a>
 8006824:	2900      	cmp	r1, #0
 8006826:	f000 80b9 	beq.w	800699c <_printf_i+0x19c>
 800682a:	2958      	cmp	r1, #88	; 0x58
 800682c:	f000 8083 	beq.w	8006936 <_printf_i+0x136>
 8006830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006834:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006838:	e032      	b.n	80068a0 <_printf_i+0xa0>
 800683a:	2964      	cmp	r1, #100	; 0x64
 800683c:	d001      	beq.n	8006842 <_printf_i+0x42>
 800683e:	2969      	cmp	r1, #105	; 0x69
 8006840:	d1f6      	bne.n	8006830 <_printf_i+0x30>
 8006842:	6820      	ldr	r0, [r4, #0]
 8006844:	6813      	ldr	r3, [r2, #0]
 8006846:	0605      	lsls	r5, r0, #24
 8006848:	f103 0104 	add.w	r1, r3, #4
 800684c:	d52a      	bpl.n	80068a4 <_printf_i+0xa4>
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6011      	str	r1, [r2, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	da03      	bge.n	800685e <_printf_i+0x5e>
 8006856:	222d      	movs	r2, #45	; 0x2d
 8006858:	425b      	negs	r3, r3
 800685a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800685e:	486f      	ldr	r0, [pc, #444]	; (8006a1c <_printf_i+0x21c>)
 8006860:	220a      	movs	r2, #10
 8006862:	e039      	b.n	80068d8 <_printf_i+0xd8>
 8006864:	2973      	cmp	r1, #115	; 0x73
 8006866:	f000 809d 	beq.w	80069a4 <_printf_i+0x1a4>
 800686a:	d808      	bhi.n	800687e <_printf_i+0x7e>
 800686c:	296f      	cmp	r1, #111	; 0x6f
 800686e:	d020      	beq.n	80068b2 <_printf_i+0xb2>
 8006870:	2970      	cmp	r1, #112	; 0x70
 8006872:	d1dd      	bne.n	8006830 <_printf_i+0x30>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	f043 0320 	orr.w	r3, r3, #32
 800687a:	6023      	str	r3, [r4, #0]
 800687c:	e003      	b.n	8006886 <_printf_i+0x86>
 800687e:	2975      	cmp	r1, #117	; 0x75
 8006880:	d017      	beq.n	80068b2 <_printf_i+0xb2>
 8006882:	2978      	cmp	r1, #120	; 0x78
 8006884:	d1d4      	bne.n	8006830 <_printf_i+0x30>
 8006886:	2378      	movs	r3, #120	; 0x78
 8006888:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800688c:	4864      	ldr	r0, [pc, #400]	; (8006a20 <_printf_i+0x220>)
 800688e:	e055      	b.n	800693c <_printf_i+0x13c>
 8006890:	6813      	ldr	r3, [r2, #0]
 8006892:	1d19      	adds	r1, r3, #4
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6011      	str	r1, [r2, #0]
 8006898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800689c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068a0:	2301      	movs	r3, #1
 80068a2:	e08c      	b.n	80069be <_printf_i+0x1be>
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6011      	str	r1, [r2, #0]
 80068a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068ac:	bf18      	it	ne
 80068ae:	b21b      	sxthne	r3, r3
 80068b0:	e7cf      	b.n	8006852 <_printf_i+0x52>
 80068b2:	6813      	ldr	r3, [r2, #0]
 80068b4:	6825      	ldr	r5, [r4, #0]
 80068b6:	1d18      	adds	r0, r3, #4
 80068b8:	6010      	str	r0, [r2, #0]
 80068ba:	0628      	lsls	r0, r5, #24
 80068bc:	d501      	bpl.n	80068c2 <_printf_i+0xc2>
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	e002      	b.n	80068c8 <_printf_i+0xc8>
 80068c2:	0668      	lsls	r0, r5, #25
 80068c4:	d5fb      	bpl.n	80068be <_printf_i+0xbe>
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	4854      	ldr	r0, [pc, #336]	; (8006a1c <_printf_i+0x21c>)
 80068ca:	296f      	cmp	r1, #111	; 0x6f
 80068cc:	bf14      	ite	ne
 80068ce:	220a      	movne	r2, #10
 80068d0:	2208      	moveq	r2, #8
 80068d2:	2100      	movs	r1, #0
 80068d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068d8:	6865      	ldr	r5, [r4, #4]
 80068da:	60a5      	str	r5, [r4, #8]
 80068dc:	2d00      	cmp	r5, #0
 80068de:	f2c0 8095 	blt.w	8006a0c <_printf_i+0x20c>
 80068e2:	6821      	ldr	r1, [r4, #0]
 80068e4:	f021 0104 	bic.w	r1, r1, #4
 80068e8:	6021      	str	r1, [r4, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d13d      	bne.n	800696a <_printf_i+0x16a>
 80068ee:	2d00      	cmp	r5, #0
 80068f0:	f040 808e 	bne.w	8006a10 <_printf_i+0x210>
 80068f4:	4665      	mov	r5, ip
 80068f6:	2a08      	cmp	r2, #8
 80068f8:	d10b      	bne.n	8006912 <_printf_i+0x112>
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	07db      	lsls	r3, r3, #31
 80068fe:	d508      	bpl.n	8006912 <_printf_i+0x112>
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	6862      	ldr	r2, [r4, #4]
 8006904:	429a      	cmp	r2, r3
 8006906:	bfde      	ittt	le
 8006908:	2330      	movle	r3, #48	; 0x30
 800690a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800690e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006912:	ebac 0305 	sub.w	r3, ip, r5
 8006916:	6123      	str	r3, [r4, #16]
 8006918:	f8cd 8000 	str.w	r8, [sp]
 800691c:	463b      	mov	r3, r7
 800691e:	aa03      	add	r2, sp, #12
 8006920:	4621      	mov	r1, r4
 8006922:	4630      	mov	r0, r6
 8006924:	f7ff fef6 	bl	8006714 <_printf_common>
 8006928:	3001      	adds	r0, #1
 800692a:	d14d      	bne.n	80069c8 <_printf_i+0x1c8>
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	b005      	add	sp, #20
 8006932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006936:	4839      	ldr	r0, [pc, #228]	; (8006a1c <_printf_i+0x21c>)
 8006938:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800693c:	6813      	ldr	r3, [r2, #0]
 800693e:	6821      	ldr	r1, [r4, #0]
 8006940:	1d1d      	adds	r5, r3, #4
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6015      	str	r5, [r2, #0]
 8006946:	060a      	lsls	r2, r1, #24
 8006948:	d50b      	bpl.n	8006962 <_printf_i+0x162>
 800694a:	07ca      	lsls	r2, r1, #31
 800694c:	bf44      	itt	mi
 800694e:	f041 0120 	orrmi.w	r1, r1, #32
 8006952:	6021      	strmi	r1, [r4, #0]
 8006954:	b91b      	cbnz	r3, 800695e <_printf_i+0x15e>
 8006956:	6822      	ldr	r2, [r4, #0]
 8006958:	f022 0220 	bic.w	r2, r2, #32
 800695c:	6022      	str	r2, [r4, #0]
 800695e:	2210      	movs	r2, #16
 8006960:	e7b7      	b.n	80068d2 <_printf_i+0xd2>
 8006962:	064d      	lsls	r5, r1, #25
 8006964:	bf48      	it	mi
 8006966:	b29b      	uxthmi	r3, r3
 8006968:	e7ef      	b.n	800694a <_printf_i+0x14a>
 800696a:	4665      	mov	r5, ip
 800696c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006970:	fb02 3311 	mls	r3, r2, r1, r3
 8006974:	5cc3      	ldrb	r3, [r0, r3]
 8006976:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800697a:	460b      	mov	r3, r1
 800697c:	2900      	cmp	r1, #0
 800697e:	d1f5      	bne.n	800696c <_printf_i+0x16c>
 8006980:	e7b9      	b.n	80068f6 <_printf_i+0xf6>
 8006982:	6813      	ldr	r3, [r2, #0]
 8006984:	6825      	ldr	r5, [r4, #0]
 8006986:	6961      	ldr	r1, [r4, #20]
 8006988:	1d18      	adds	r0, r3, #4
 800698a:	6010      	str	r0, [r2, #0]
 800698c:	0628      	lsls	r0, r5, #24
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	d501      	bpl.n	8006996 <_printf_i+0x196>
 8006992:	6019      	str	r1, [r3, #0]
 8006994:	e002      	b.n	800699c <_printf_i+0x19c>
 8006996:	066a      	lsls	r2, r5, #25
 8006998:	d5fb      	bpl.n	8006992 <_printf_i+0x192>
 800699a:	8019      	strh	r1, [r3, #0]
 800699c:	2300      	movs	r3, #0
 800699e:	6123      	str	r3, [r4, #16]
 80069a0:	4665      	mov	r5, ip
 80069a2:	e7b9      	b.n	8006918 <_printf_i+0x118>
 80069a4:	6813      	ldr	r3, [r2, #0]
 80069a6:	1d19      	adds	r1, r3, #4
 80069a8:	6011      	str	r1, [r2, #0]
 80069aa:	681d      	ldr	r5, [r3, #0]
 80069ac:	6862      	ldr	r2, [r4, #4]
 80069ae:	2100      	movs	r1, #0
 80069b0:	4628      	mov	r0, r5
 80069b2:	f7f9 fc35 	bl	8000220 <memchr>
 80069b6:	b108      	cbz	r0, 80069bc <_printf_i+0x1bc>
 80069b8:	1b40      	subs	r0, r0, r5
 80069ba:	6060      	str	r0, [r4, #4]
 80069bc:	6863      	ldr	r3, [r4, #4]
 80069be:	6123      	str	r3, [r4, #16]
 80069c0:	2300      	movs	r3, #0
 80069c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c6:	e7a7      	b.n	8006918 <_printf_i+0x118>
 80069c8:	6923      	ldr	r3, [r4, #16]
 80069ca:	462a      	mov	r2, r5
 80069cc:	4639      	mov	r1, r7
 80069ce:	4630      	mov	r0, r6
 80069d0:	47c0      	blx	r8
 80069d2:	3001      	adds	r0, #1
 80069d4:	d0aa      	beq.n	800692c <_printf_i+0x12c>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	079b      	lsls	r3, r3, #30
 80069da:	d413      	bmi.n	8006a04 <_printf_i+0x204>
 80069dc:	68e0      	ldr	r0, [r4, #12]
 80069de:	9b03      	ldr	r3, [sp, #12]
 80069e0:	4298      	cmp	r0, r3
 80069e2:	bfb8      	it	lt
 80069e4:	4618      	movlt	r0, r3
 80069e6:	e7a3      	b.n	8006930 <_printf_i+0x130>
 80069e8:	2301      	movs	r3, #1
 80069ea:	464a      	mov	r2, r9
 80069ec:	4639      	mov	r1, r7
 80069ee:	4630      	mov	r0, r6
 80069f0:	47c0      	blx	r8
 80069f2:	3001      	adds	r0, #1
 80069f4:	d09a      	beq.n	800692c <_printf_i+0x12c>
 80069f6:	3501      	adds	r5, #1
 80069f8:	68e3      	ldr	r3, [r4, #12]
 80069fa:	9a03      	ldr	r2, [sp, #12]
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	42ab      	cmp	r3, r5
 8006a00:	dcf2      	bgt.n	80069e8 <_printf_i+0x1e8>
 8006a02:	e7eb      	b.n	80069dc <_printf_i+0x1dc>
 8006a04:	2500      	movs	r5, #0
 8006a06:	f104 0919 	add.w	r9, r4, #25
 8006a0a:	e7f5      	b.n	80069f8 <_printf_i+0x1f8>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1ac      	bne.n	800696a <_printf_i+0x16a>
 8006a10:	7803      	ldrb	r3, [r0, #0]
 8006a12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a1a:	e76c      	b.n	80068f6 <_printf_i+0xf6>
 8006a1c:	08008205 	.word	0x08008205
 8006a20:	08008216 	.word	0x08008216

08006a24 <memmove>:
 8006a24:	4288      	cmp	r0, r1
 8006a26:	b510      	push	{r4, lr}
 8006a28:	eb01 0302 	add.w	r3, r1, r2
 8006a2c:	d807      	bhi.n	8006a3e <memmove+0x1a>
 8006a2e:	1e42      	subs	r2, r0, #1
 8006a30:	4299      	cmp	r1, r3
 8006a32:	d00a      	beq.n	8006a4a <memmove+0x26>
 8006a34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a38:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a3c:	e7f8      	b.n	8006a30 <memmove+0xc>
 8006a3e:	4283      	cmp	r3, r0
 8006a40:	d9f5      	bls.n	8006a2e <memmove+0xa>
 8006a42:	1881      	adds	r1, r0, r2
 8006a44:	1ad2      	subs	r2, r2, r3
 8006a46:	42d3      	cmn	r3, r2
 8006a48:	d100      	bne.n	8006a4c <memmove+0x28>
 8006a4a:	bd10      	pop	{r4, pc}
 8006a4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a50:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a54:	e7f7      	b.n	8006a46 <memmove+0x22>
	...

08006a58 <_free_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	d045      	beq.n	8006aec <_free_r+0x94>
 8006a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a64:	1f0c      	subs	r4, r1, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bfb8      	it	lt
 8006a6a:	18e4      	addlt	r4, r4, r3
 8006a6c:	f000 f8d2 	bl	8006c14 <__malloc_lock>
 8006a70:	4a1f      	ldr	r2, [pc, #124]	; (8006af0 <_free_r+0x98>)
 8006a72:	6813      	ldr	r3, [r2, #0]
 8006a74:	4610      	mov	r0, r2
 8006a76:	b933      	cbnz	r3, 8006a86 <_free_r+0x2e>
 8006a78:	6063      	str	r3, [r4, #4]
 8006a7a:	6014      	str	r4, [r2, #0]
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a82:	f000 b8c8 	b.w	8006c16 <__malloc_unlock>
 8006a86:	42a3      	cmp	r3, r4
 8006a88:	d90c      	bls.n	8006aa4 <_free_r+0x4c>
 8006a8a:	6821      	ldr	r1, [r4, #0]
 8006a8c:	1862      	adds	r2, r4, r1
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	bf04      	itt	eq
 8006a92:	681a      	ldreq	r2, [r3, #0]
 8006a94:	685b      	ldreq	r3, [r3, #4]
 8006a96:	6063      	str	r3, [r4, #4]
 8006a98:	bf04      	itt	eq
 8006a9a:	1852      	addeq	r2, r2, r1
 8006a9c:	6022      	streq	r2, [r4, #0]
 8006a9e:	6004      	str	r4, [r0, #0]
 8006aa0:	e7ec      	b.n	8006a7c <_free_r+0x24>
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	b10a      	cbz	r2, 8006aac <_free_r+0x54>
 8006aa8:	42a2      	cmp	r2, r4
 8006aaa:	d9fa      	bls.n	8006aa2 <_free_r+0x4a>
 8006aac:	6819      	ldr	r1, [r3, #0]
 8006aae:	1858      	adds	r0, r3, r1
 8006ab0:	42a0      	cmp	r0, r4
 8006ab2:	d10b      	bne.n	8006acc <_free_r+0x74>
 8006ab4:	6820      	ldr	r0, [r4, #0]
 8006ab6:	4401      	add	r1, r0
 8006ab8:	1858      	adds	r0, r3, r1
 8006aba:	4282      	cmp	r2, r0
 8006abc:	6019      	str	r1, [r3, #0]
 8006abe:	d1dd      	bne.n	8006a7c <_free_r+0x24>
 8006ac0:	6810      	ldr	r0, [r2, #0]
 8006ac2:	6852      	ldr	r2, [r2, #4]
 8006ac4:	605a      	str	r2, [r3, #4]
 8006ac6:	4401      	add	r1, r0
 8006ac8:	6019      	str	r1, [r3, #0]
 8006aca:	e7d7      	b.n	8006a7c <_free_r+0x24>
 8006acc:	d902      	bls.n	8006ad4 <_free_r+0x7c>
 8006ace:	230c      	movs	r3, #12
 8006ad0:	602b      	str	r3, [r5, #0]
 8006ad2:	e7d3      	b.n	8006a7c <_free_r+0x24>
 8006ad4:	6820      	ldr	r0, [r4, #0]
 8006ad6:	1821      	adds	r1, r4, r0
 8006ad8:	428a      	cmp	r2, r1
 8006ada:	bf04      	itt	eq
 8006adc:	6811      	ldreq	r1, [r2, #0]
 8006ade:	6852      	ldreq	r2, [r2, #4]
 8006ae0:	6062      	str	r2, [r4, #4]
 8006ae2:	bf04      	itt	eq
 8006ae4:	1809      	addeq	r1, r1, r0
 8006ae6:	6021      	streq	r1, [r4, #0]
 8006ae8:	605c      	str	r4, [r3, #4]
 8006aea:	e7c7      	b.n	8006a7c <_free_r+0x24>
 8006aec:	bd38      	pop	{r3, r4, r5, pc}
 8006aee:	bf00      	nop
 8006af0:	200000a8 	.word	0x200000a8

08006af4 <_malloc_r>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	1ccd      	adds	r5, r1, #3
 8006af8:	f025 0503 	bic.w	r5, r5, #3
 8006afc:	3508      	adds	r5, #8
 8006afe:	2d0c      	cmp	r5, #12
 8006b00:	bf38      	it	cc
 8006b02:	250c      	movcc	r5, #12
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	4606      	mov	r6, r0
 8006b08:	db01      	blt.n	8006b0e <_malloc_r+0x1a>
 8006b0a:	42a9      	cmp	r1, r5
 8006b0c:	d903      	bls.n	8006b16 <_malloc_r+0x22>
 8006b0e:	230c      	movs	r3, #12
 8006b10:	6033      	str	r3, [r6, #0]
 8006b12:	2000      	movs	r0, #0
 8006b14:	bd70      	pop	{r4, r5, r6, pc}
 8006b16:	f000 f87d 	bl	8006c14 <__malloc_lock>
 8006b1a:	4a21      	ldr	r2, [pc, #132]	; (8006ba0 <_malloc_r+0xac>)
 8006b1c:	6814      	ldr	r4, [r2, #0]
 8006b1e:	4621      	mov	r1, r4
 8006b20:	b991      	cbnz	r1, 8006b48 <_malloc_r+0x54>
 8006b22:	4c20      	ldr	r4, [pc, #128]	; (8006ba4 <_malloc_r+0xb0>)
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	b91b      	cbnz	r3, 8006b30 <_malloc_r+0x3c>
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f000 f863 	bl	8006bf4 <_sbrk_r>
 8006b2e:	6020      	str	r0, [r4, #0]
 8006b30:	4629      	mov	r1, r5
 8006b32:	4630      	mov	r0, r6
 8006b34:	f000 f85e 	bl	8006bf4 <_sbrk_r>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d124      	bne.n	8006b86 <_malloc_r+0x92>
 8006b3c:	230c      	movs	r3, #12
 8006b3e:	6033      	str	r3, [r6, #0]
 8006b40:	4630      	mov	r0, r6
 8006b42:	f000 f868 	bl	8006c16 <__malloc_unlock>
 8006b46:	e7e4      	b.n	8006b12 <_malloc_r+0x1e>
 8006b48:	680b      	ldr	r3, [r1, #0]
 8006b4a:	1b5b      	subs	r3, r3, r5
 8006b4c:	d418      	bmi.n	8006b80 <_malloc_r+0x8c>
 8006b4e:	2b0b      	cmp	r3, #11
 8006b50:	d90f      	bls.n	8006b72 <_malloc_r+0x7e>
 8006b52:	600b      	str	r3, [r1, #0]
 8006b54:	50cd      	str	r5, [r1, r3]
 8006b56:	18cc      	adds	r4, r1, r3
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f000 f85c 	bl	8006c16 <__malloc_unlock>
 8006b5e:	f104 000b 	add.w	r0, r4, #11
 8006b62:	1d23      	adds	r3, r4, #4
 8006b64:	f020 0007 	bic.w	r0, r0, #7
 8006b68:	1ac3      	subs	r3, r0, r3
 8006b6a:	d0d3      	beq.n	8006b14 <_malloc_r+0x20>
 8006b6c:	425a      	negs	r2, r3
 8006b6e:	50e2      	str	r2, [r4, r3]
 8006b70:	e7d0      	b.n	8006b14 <_malloc_r+0x20>
 8006b72:	428c      	cmp	r4, r1
 8006b74:	684b      	ldr	r3, [r1, #4]
 8006b76:	bf16      	itet	ne
 8006b78:	6063      	strne	r3, [r4, #4]
 8006b7a:	6013      	streq	r3, [r2, #0]
 8006b7c:	460c      	movne	r4, r1
 8006b7e:	e7eb      	b.n	8006b58 <_malloc_r+0x64>
 8006b80:	460c      	mov	r4, r1
 8006b82:	6849      	ldr	r1, [r1, #4]
 8006b84:	e7cc      	b.n	8006b20 <_malloc_r+0x2c>
 8006b86:	1cc4      	adds	r4, r0, #3
 8006b88:	f024 0403 	bic.w	r4, r4, #3
 8006b8c:	42a0      	cmp	r0, r4
 8006b8e:	d005      	beq.n	8006b9c <_malloc_r+0xa8>
 8006b90:	1a21      	subs	r1, r4, r0
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 f82e 	bl	8006bf4 <_sbrk_r>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d0cf      	beq.n	8006b3c <_malloc_r+0x48>
 8006b9c:	6025      	str	r5, [r4, #0]
 8006b9e:	e7db      	b.n	8006b58 <_malloc_r+0x64>
 8006ba0:	200000a8 	.word	0x200000a8
 8006ba4:	200000ac 	.word	0x200000ac

08006ba8 <_realloc_r>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	4607      	mov	r7, r0
 8006bac:	4614      	mov	r4, r2
 8006bae:	460e      	mov	r6, r1
 8006bb0:	b921      	cbnz	r1, 8006bbc <_realloc_r+0x14>
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bb8:	f7ff bf9c 	b.w	8006af4 <_malloc_r>
 8006bbc:	b922      	cbnz	r2, 8006bc8 <_realloc_r+0x20>
 8006bbe:	f7ff ff4b 	bl	8006a58 <_free_r>
 8006bc2:	4625      	mov	r5, r4
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc8:	f000 f826 	bl	8006c18 <_malloc_usable_size_r>
 8006bcc:	42a0      	cmp	r0, r4
 8006bce:	d20f      	bcs.n	8006bf0 <_realloc_r+0x48>
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	f7ff ff8e 	bl	8006af4 <_malloc_r>
 8006bd8:	4605      	mov	r5, r0
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d0f2      	beq.n	8006bc4 <_realloc_r+0x1c>
 8006bde:	4631      	mov	r1, r6
 8006be0:	4622      	mov	r2, r4
 8006be2:	f7ff fc11 	bl	8006408 <memcpy>
 8006be6:	4631      	mov	r1, r6
 8006be8:	4638      	mov	r0, r7
 8006bea:	f7ff ff35 	bl	8006a58 <_free_r>
 8006bee:	e7e9      	b.n	8006bc4 <_realloc_r+0x1c>
 8006bf0:	4635      	mov	r5, r6
 8006bf2:	e7e7      	b.n	8006bc4 <_realloc_r+0x1c>

08006bf4 <_sbrk_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	4c06      	ldr	r4, [pc, #24]	; (8006c10 <_sbrk_r+0x1c>)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	f7fc fb02 	bl	8003208 <_sbrk>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_sbrk_r+0x1a>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_sbrk_r+0x1a>
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	20004da4 	.word	0x20004da4

08006c14 <__malloc_lock>:
 8006c14:	4770      	bx	lr

08006c16 <__malloc_unlock>:
 8006c16:	4770      	bx	lr

08006c18 <_malloc_usable_size_r>:
 8006c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c1c:	1f18      	subs	r0, r3, #4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	bfbc      	itt	lt
 8006c22:	580b      	ldrlt	r3, [r1, r0]
 8006c24:	18c0      	addlt	r0, r0, r3
 8006c26:	4770      	bx	lr

08006c28 <sin>:
 8006c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c2a:	ec51 0b10 	vmov	r0, r1, d0
 8006c2e:	4a20      	ldr	r2, [pc, #128]	; (8006cb0 <sin+0x88>)
 8006c30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c34:	4293      	cmp	r3, r2
 8006c36:	dc07      	bgt.n	8006c48 <sin+0x20>
 8006c38:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006ca8 <sin+0x80>
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	f000 fe37 	bl	80078b0 <__kernel_sin>
 8006c42:	ec51 0b10 	vmov	r0, r1, d0
 8006c46:	e007      	b.n	8006c58 <sin+0x30>
 8006c48:	4a1a      	ldr	r2, [pc, #104]	; (8006cb4 <sin+0x8c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	dd09      	ble.n	8006c62 <sin+0x3a>
 8006c4e:	ee10 2a10 	vmov	r2, s0
 8006c52:	460b      	mov	r3, r1
 8006c54:	f7f9 fb38 	bl	80002c8 <__aeabi_dsub>
 8006c58:	ec41 0b10 	vmov	d0, r0, r1
 8006c5c:	b005      	add	sp, #20
 8006c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c62:	4668      	mov	r0, sp
 8006c64:	f000 f828 	bl	8006cb8 <__ieee754_rem_pio2>
 8006c68:	f000 0003 	and.w	r0, r0, #3
 8006c6c:	2801      	cmp	r0, #1
 8006c6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c72:	ed9d 0b00 	vldr	d0, [sp]
 8006c76:	d004      	beq.n	8006c82 <sin+0x5a>
 8006c78:	2802      	cmp	r0, #2
 8006c7a:	d005      	beq.n	8006c88 <sin+0x60>
 8006c7c:	b970      	cbnz	r0, 8006c9c <sin+0x74>
 8006c7e:	2001      	movs	r0, #1
 8006c80:	e7dd      	b.n	8006c3e <sin+0x16>
 8006c82:	f000 fa0d 	bl	80070a0 <__kernel_cos>
 8006c86:	e7dc      	b.n	8006c42 <sin+0x1a>
 8006c88:	2001      	movs	r0, #1
 8006c8a:	f000 fe11 	bl	80078b0 <__kernel_sin>
 8006c8e:	ec53 2b10 	vmov	r2, r3, d0
 8006c92:	ee10 0a10 	vmov	r0, s0
 8006c96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006c9a:	e7dd      	b.n	8006c58 <sin+0x30>
 8006c9c:	f000 fa00 	bl	80070a0 <__kernel_cos>
 8006ca0:	e7f5      	b.n	8006c8e <sin+0x66>
 8006ca2:	bf00      	nop
 8006ca4:	f3af 8000 	nop.w
	...
 8006cb0:	3fe921fb 	.word	0x3fe921fb
 8006cb4:	7fefffff 	.word	0x7fefffff

08006cb8 <__ieee754_rem_pio2>:
 8006cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	ec57 6b10 	vmov	r6, r7, d0
 8006cc0:	4bc3      	ldr	r3, [pc, #780]	; (8006fd0 <__ieee754_rem_pio2+0x318>)
 8006cc2:	b08d      	sub	sp, #52	; 0x34
 8006cc4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006cc8:	4598      	cmp	r8, r3
 8006cca:	4604      	mov	r4, r0
 8006ccc:	9704      	str	r7, [sp, #16]
 8006cce:	dc07      	bgt.n	8006ce0 <__ieee754_rem_pio2+0x28>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	ed84 0b00 	vstr	d0, [r4]
 8006cd8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006cdc:	2500      	movs	r5, #0
 8006cde:	e027      	b.n	8006d30 <__ieee754_rem_pio2+0x78>
 8006ce0:	4bbc      	ldr	r3, [pc, #752]	; (8006fd4 <__ieee754_rem_pio2+0x31c>)
 8006ce2:	4598      	cmp	r8, r3
 8006ce4:	dc75      	bgt.n	8006dd2 <__ieee754_rem_pio2+0x11a>
 8006ce6:	9b04      	ldr	r3, [sp, #16]
 8006ce8:	4dbb      	ldr	r5, [pc, #748]	; (8006fd8 <__ieee754_rem_pio2+0x320>)
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	ee10 0a10 	vmov	r0, s0
 8006cf0:	a3a9      	add	r3, pc, #676	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x2e0>)
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	dd36      	ble.n	8006d68 <__ieee754_rem_pio2+0xb0>
 8006cfa:	f7f9 fae5 	bl	80002c8 <__aeabi_dsub>
 8006cfe:	45a8      	cmp	r8, r5
 8006d00:	4606      	mov	r6, r0
 8006d02:	460f      	mov	r7, r1
 8006d04:	d018      	beq.n	8006d38 <__ieee754_rem_pio2+0x80>
 8006d06:	a3a6      	add	r3, pc, #664	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x2e8>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fadc 	bl	80002c8 <__aeabi_dsub>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	e9c4 2300 	strd	r2, r3, [r4]
 8006d18:	4630      	mov	r0, r6
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	f7f9 fad4 	bl	80002c8 <__aeabi_dsub>
 8006d20:	a39f      	add	r3, pc, #636	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x2e8>)
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	f7f9 facf 	bl	80002c8 <__aeabi_dsub>
 8006d2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d2e:	2501      	movs	r5, #1
 8006d30:	4628      	mov	r0, r5
 8006d32:	b00d      	add	sp, #52	; 0x34
 8006d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d38:	a39b      	add	r3, pc, #620	; (adr r3, 8006fa8 <__ieee754_rem_pio2+0x2f0>)
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f7f9 fac3 	bl	80002c8 <__aeabi_dsub>
 8006d42:	a39b      	add	r3, pc, #620	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x2f8>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	4606      	mov	r6, r0
 8006d4a:	460f      	mov	r7, r1
 8006d4c:	f7f9 fabc 	bl	80002c8 <__aeabi_dsub>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	e9c4 2300 	strd	r2, r3, [r4]
 8006d58:	4630      	mov	r0, r6
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	f7f9 fab4 	bl	80002c8 <__aeabi_dsub>
 8006d60:	a393      	add	r3, pc, #588	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x2f8>)
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	e7de      	b.n	8006d26 <__ieee754_rem_pio2+0x6e>
 8006d68:	f7f9 fab0 	bl	80002cc <__adddf3>
 8006d6c:	45a8      	cmp	r8, r5
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460f      	mov	r7, r1
 8006d72:	d016      	beq.n	8006da2 <__ieee754_rem_pio2+0xea>
 8006d74:	a38a      	add	r3, pc, #552	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x2e8>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	f7f9 faa7 	bl	80002cc <__adddf3>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	e9c4 2300 	strd	r2, r3, [r4]
 8006d86:	4630      	mov	r0, r6
 8006d88:	4639      	mov	r1, r7
 8006d8a:	f7f9 fa9d 	bl	80002c8 <__aeabi_dsub>
 8006d8e:	a384      	add	r3, pc, #528	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x2e8>)
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f7f9 fa9a 	bl	80002cc <__adddf3>
 8006d98:	f04f 35ff 	mov.w	r5, #4294967295
 8006d9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006da0:	e7c6      	b.n	8006d30 <__ieee754_rem_pio2+0x78>
 8006da2:	a381      	add	r3, pc, #516	; (adr r3, 8006fa8 <__ieee754_rem_pio2+0x2f0>)
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f7f9 fa90 	bl	80002cc <__adddf3>
 8006dac:	a380      	add	r3, pc, #512	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x2f8>)
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	4606      	mov	r6, r0
 8006db4:	460f      	mov	r7, r1
 8006db6:	f7f9 fa89 	bl	80002cc <__adddf3>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	e9c4 2300 	strd	r2, r3, [r4]
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	f7f9 fa7f 	bl	80002c8 <__aeabi_dsub>
 8006dca:	a379      	add	r3, pc, #484	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x2f8>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	e7e0      	b.n	8006d94 <__ieee754_rem_pio2+0xdc>
 8006dd2:	4b82      	ldr	r3, [pc, #520]	; (8006fdc <__ieee754_rem_pio2+0x324>)
 8006dd4:	4598      	cmp	r8, r3
 8006dd6:	f300 80d0 	bgt.w	8006f7a <__ieee754_rem_pio2+0x2c2>
 8006dda:	f000 fe23 	bl	8007a24 <fabs>
 8006dde:	ec57 6b10 	vmov	r6, r7, d0
 8006de2:	ee10 0a10 	vmov	r0, s0
 8006de6:	a374      	add	r3, pc, #464	; (adr r3, 8006fb8 <__ieee754_rem_pio2+0x300>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	4639      	mov	r1, r7
 8006dee:	f7f9 fc23 	bl	8000638 <__aeabi_dmul>
 8006df2:	2200      	movs	r2, #0
 8006df4:	4b7a      	ldr	r3, [pc, #488]	; (8006fe0 <__ieee754_rem_pio2+0x328>)
 8006df6:	f7f9 fa69 	bl	80002cc <__adddf3>
 8006dfa:	f7f9 feb7 	bl	8000b6c <__aeabi_d2iz>
 8006dfe:	4605      	mov	r5, r0
 8006e00:	f7f9 fbb0 	bl	8000564 <__aeabi_i2d>
 8006e04:	a364      	add	r3, pc, #400	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x2e0>)
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e0e:	f7f9 fc13 	bl	8000638 <__aeabi_dmul>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4630      	mov	r0, r6
 8006e18:	4639      	mov	r1, r7
 8006e1a:	f7f9 fa55 	bl	80002c8 <__aeabi_dsub>
 8006e1e:	a360      	add	r3, pc, #384	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x2e8>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	4682      	mov	sl, r0
 8006e26:	468b      	mov	fp, r1
 8006e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e2c:	f7f9 fc04 	bl	8000638 <__aeabi_dmul>
 8006e30:	2d1f      	cmp	r5, #31
 8006e32:	4606      	mov	r6, r0
 8006e34:	460f      	mov	r7, r1
 8006e36:	dc0c      	bgt.n	8006e52 <__ieee754_rem_pio2+0x19a>
 8006e38:	1e6a      	subs	r2, r5, #1
 8006e3a:	4b6a      	ldr	r3, [pc, #424]	; (8006fe4 <__ieee754_rem_pio2+0x32c>)
 8006e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e40:	4543      	cmp	r3, r8
 8006e42:	d006      	beq.n	8006e52 <__ieee754_rem_pio2+0x19a>
 8006e44:	4632      	mov	r2, r6
 8006e46:	463b      	mov	r3, r7
 8006e48:	4650      	mov	r0, sl
 8006e4a:	4659      	mov	r1, fp
 8006e4c:	f7f9 fa3c 	bl	80002c8 <__aeabi_dsub>
 8006e50:	e00e      	b.n	8006e70 <__ieee754_rem_pio2+0x1b8>
 8006e52:	4632      	mov	r2, r6
 8006e54:	463b      	mov	r3, r7
 8006e56:	4650      	mov	r0, sl
 8006e58:	4659      	mov	r1, fp
 8006e5a:	f7f9 fa35 	bl	80002c8 <__aeabi_dsub>
 8006e5e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006e62:	9305      	str	r3, [sp, #20]
 8006e64:	9a05      	ldr	r2, [sp, #20]
 8006e66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b10      	cmp	r3, #16
 8006e6e:	dc02      	bgt.n	8006e76 <__ieee754_rem_pio2+0x1be>
 8006e70:	e9c4 0100 	strd	r0, r1, [r4]
 8006e74:	e039      	b.n	8006eea <__ieee754_rem_pio2+0x232>
 8006e76:	a34c      	add	r3, pc, #304	; (adr r3, 8006fa8 <__ieee754_rem_pio2+0x2f0>)
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e80:	f7f9 fbda 	bl	8000638 <__aeabi_dmul>
 8006e84:	4606      	mov	r6, r0
 8006e86:	460f      	mov	r7, r1
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	4659      	mov	r1, fp
 8006e90:	f7f9 fa1a 	bl	80002c8 <__aeabi_dsub>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4680      	mov	r8, r0
 8006e9a:	4689      	mov	r9, r1
 8006e9c:	4650      	mov	r0, sl
 8006e9e:	4659      	mov	r1, fp
 8006ea0:	f7f9 fa12 	bl	80002c8 <__aeabi_dsub>
 8006ea4:	4632      	mov	r2, r6
 8006ea6:	463b      	mov	r3, r7
 8006ea8:	f7f9 fa0e 	bl	80002c8 <__aeabi_dsub>
 8006eac:	a340      	add	r3, pc, #256	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x2f8>)
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eba:	f7f9 fbbd 	bl	8000638 <__aeabi_dmul>
 8006ebe:	4632      	mov	r2, r6
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	f7f9 fa01 	bl	80002c8 <__aeabi_dsub>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4606      	mov	r6, r0
 8006ecc:	460f      	mov	r7, r1
 8006ece:	4640      	mov	r0, r8
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	f7f9 f9f9 	bl	80002c8 <__aeabi_dsub>
 8006ed6:	9a05      	ldr	r2, [sp, #20]
 8006ed8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b31      	cmp	r3, #49	; 0x31
 8006ee0:	dc20      	bgt.n	8006f24 <__ieee754_rem_pio2+0x26c>
 8006ee2:	e9c4 0100 	strd	r0, r1, [r4]
 8006ee6:	46c2      	mov	sl, r8
 8006ee8:	46cb      	mov	fp, r9
 8006eea:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006eee:	4650      	mov	r0, sl
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	f7f9 f9e7 	bl	80002c8 <__aeabi_dsub>
 8006efa:	463b      	mov	r3, r7
 8006efc:	4632      	mov	r2, r6
 8006efe:	f7f9 f9e3 	bl	80002c8 <__aeabi_dsub>
 8006f02:	9b04      	ldr	r3, [sp, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f0a:	f6bf af11 	bge.w	8006d30 <__ieee754_rem_pio2+0x78>
 8006f0e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f12:	6063      	str	r3, [r4, #4]
 8006f14:	f8c4 8000 	str.w	r8, [r4]
 8006f18:	60a0      	str	r0, [r4, #8]
 8006f1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f1e:	60e3      	str	r3, [r4, #12]
 8006f20:	426d      	negs	r5, r5
 8006f22:	e705      	b.n	8006d30 <__ieee754_rem_pio2+0x78>
 8006f24:	a326      	add	r3, pc, #152	; (adr r3, 8006fc0 <__ieee754_rem_pio2+0x308>)
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f2e:	f7f9 fb83 	bl	8000638 <__aeabi_dmul>
 8006f32:	4606      	mov	r6, r0
 8006f34:	460f      	mov	r7, r1
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	f7f9 f9c3 	bl	80002c8 <__aeabi_dsub>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4682      	mov	sl, r0
 8006f48:	468b      	mov	fp, r1
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	f7f9 f9bb 	bl	80002c8 <__aeabi_dsub>
 8006f52:	4632      	mov	r2, r6
 8006f54:	463b      	mov	r3, r7
 8006f56:	f7f9 f9b7 	bl	80002c8 <__aeabi_dsub>
 8006f5a:	a31b      	add	r3, pc, #108	; (adr r3, 8006fc8 <__ieee754_rem_pio2+0x310>)
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	4606      	mov	r6, r0
 8006f62:	460f      	mov	r7, r1
 8006f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f68:	f7f9 fb66 	bl	8000638 <__aeabi_dmul>
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	463b      	mov	r3, r7
 8006f70:	f7f9 f9aa 	bl	80002c8 <__aeabi_dsub>
 8006f74:	4606      	mov	r6, r0
 8006f76:	460f      	mov	r7, r1
 8006f78:	e764      	b.n	8006e44 <__ieee754_rem_pio2+0x18c>
 8006f7a:	4b1b      	ldr	r3, [pc, #108]	; (8006fe8 <__ieee754_rem_pio2+0x330>)
 8006f7c:	4598      	cmp	r8, r3
 8006f7e:	dd35      	ble.n	8006fec <__ieee754_rem_pio2+0x334>
 8006f80:	ee10 2a10 	vmov	r2, s0
 8006f84:	463b      	mov	r3, r7
 8006f86:	4630      	mov	r0, r6
 8006f88:	4639      	mov	r1, r7
 8006f8a:	f7f9 f99d 	bl	80002c8 <__aeabi_dsub>
 8006f8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f92:	e9c4 0100 	strd	r0, r1, [r4]
 8006f96:	e6a1      	b.n	8006cdc <__ieee754_rem_pio2+0x24>
 8006f98:	54400000 	.word	0x54400000
 8006f9c:	3ff921fb 	.word	0x3ff921fb
 8006fa0:	1a626331 	.word	0x1a626331
 8006fa4:	3dd0b461 	.word	0x3dd0b461
 8006fa8:	1a600000 	.word	0x1a600000
 8006fac:	3dd0b461 	.word	0x3dd0b461
 8006fb0:	2e037073 	.word	0x2e037073
 8006fb4:	3ba3198a 	.word	0x3ba3198a
 8006fb8:	6dc9c883 	.word	0x6dc9c883
 8006fbc:	3fe45f30 	.word	0x3fe45f30
 8006fc0:	2e000000 	.word	0x2e000000
 8006fc4:	3ba3198a 	.word	0x3ba3198a
 8006fc8:	252049c1 	.word	0x252049c1
 8006fcc:	397b839a 	.word	0x397b839a
 8006fd0:	3fe921fb 	.word	0x3fe921fb
 8006fd4:	4002d97b 	.word	0x4002d97b
 8006fd8:	3ff921fb 	.word	0x3ff921fb
 8006fdc:	413921fb 	.word	0x413921fb
 8006fe0:	3fe00000 	.word	0x3fe00000
 8006fe4:	08008228 	.word	0x08008228
 8006fe8:	7fefffff 	.word	0x7fefffff
 8006fec:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006ff0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006ff4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	460f      	mov	r7, r1
 8006ffc:	f7f9 fdb6 	bl	8000b6c <__aeabi_d2iz>
 8007000:	f7f9 fab0 	bl	8000564 <__aeabi_i2d>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4630      	mov	r0, r6
 800700a:	4639      	mov	r1, r7
 800700c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007010:	f7f9 f95a 	bl	80002c8 <__aeabi_dsub>
 8007014:	2200      	movs	r2, #0
 8007016:	4b1f      	ldr	r3, [pc, #124]	; (8007094 <__ieee754_rem_pio2+0x3dc>)
 8007018:	f7f9 fb0e 	bl	8000638 <__aeabi_dmul>
 800701c:	460f      	mov	r7, r1
 800701e:	4606      	mov	r6, r0
 8007020:	f7f9 fda4 	bl	8000b6c <__aeabi_d2iz>
 8007024:	f7f9 fa9e 	bl	8000564 <__aeabi_i2d>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4630      	mov	r0, r6
 800702e:	4639      	mov	r1, r7
 8007030:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007034:	f7f9 f948 	bl	80002c8 <__aeabi_dsub>
 8007038:	2200      	movs	r2, #0
 800703a:	4b16      	ldr	r3, [pc, #88]	; (8007094 <__ieee754_rem_pio2+0x3dc>)
 800703c:	f7f9 fafc 	bl	8000638 <__aeabi_dmul>
 8007040:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007044:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007048:	f04f 0803 	mov.w	r8, #3
 800704c:	2600      	movs	r6, #0
 800704e:	2700      	movs	r7, #0
 8007050:	4632      	mov	r2, r6
 8007052:	463b      	mov	r3, r7
 8007054:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007058:	f108 3aff 	add.w	sl, r8, #4294967295
 800705c:	f7f9 fd54 	bl	8000b08 <__aeabi_dcmpeq>
 8007060:	b9b0      	cbnz	r0, 8007090 <__ieee754_rem_pio2+0x3d8>
 8007062:	4b0d      	ldr	r3, [pc, #52]	; (8007098 <__ieee754_rem_pio2+0x3e0>)
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	2302      	movs	r3, #2
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	462a      	mov	r2, r5
 800706c:	4643      	mov	r3, r8
 800706e:	4621      	mov	r1, r4
 8007070:	a806      	add	r0, sp, #24
 8007072:	f000 f8dd 	bl	8007230 <__kernel_rem_pio2>
 8007076:	9b04      	ldr	r3, [sp, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	4605      	mov	r5, r0
 800707c:	f6bf ae58 	bge.w	8006d30 <__ieee754_rem_pio2+0x78>
 8007080:	6863      	ldr	r3, [r4, #4]
 8007082:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007086:	6063      	str	r3, [r4, #4]
 8007088:	68e3      	ldr	r3, [r4, #12]
 800708a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800708e:	e746      	b.n	8006f1e <__ieee754_rem_pio2+0x266>
 8007090:	46d0      	mov	r8, sl
 8007092:	e7dd      	b.n	8007050 <__ieee754_rem_pio2+0x398>
 8007094:	41700000 	.word	0x41700000
 8007098:	080082a8 	.word	0x080082a8
 800709c:	00000000 	.word	0x00000000

080070a0 <__kernel_cos>:
 80070a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	ec59 8b10 	vmov	r8, r9, d0
 80070a8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80070ac:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80070b0:	ed2d 8b02 	vpush	{d8}
 80070b4:	eeb0 8a41 	vmov.f32	s16, s2
 80070b8:	eef0 8a61 	vmov.f32	s17, s3
 80070bc:	da07      	bge.n	80070ce <__kernel_cos+0x2e>
 80070be:	ee10 0a10 	vmov	r0, s0
 80070c2:	4649      	mov	r1, r9
 80070c4:	f7f9 fd52 	bl	8000b6c <__aeabi_d2iz>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	f000 8089 	beq.w	80071e0 <__kernel_cos+0x140>
 80070ce:	4642      	mov	r2, r8
 80070d0:	464b      	mov	r3, r9
 80070d2:	4640      	mov	r0, r8
 80070d4:	4649      	mov	r1, r9
 80070d6:	f7f9 faaf 	bl	8000638 <__aeabi_dmul>
 80070da:	2200      	movs	r2, #0
 80070dc:	4b4e      	ldr	r3, [pc, #312]	; (8007218 <__kernel_cos+0x178>)
 80070de:	4604      	mov	r4, r0
 80070e0:	460d      	mov	r5, r1
 80070e2:	f7f9 faa9 	bl	8000638 <__aeabi_dmul>
 80070e6:	a340      	add	r3, pc, #256	; (adr r3, 80071e8 <__kernel_cos+0x148>)
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	4682      	mov	sl, r0
 80070ee:	468b      	mov	fp, r1
 80070f0:	4620      	mov	r0, r4
 80070f2:	4629      	mov	r1, r5
 80070f4:	f7f9 faa0 	bl	8000638 <__aeabi_dmul>
 80070f8:	a33d      	add	r3, pc, #244	; (adr r3, 80071f0 <__kernel_cos+0x150>)
 80070fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fe:	f7f9 f8e5 	bl	80002cc <__adddf3>
 8007102:	4622      	mov	r2, r4
 8007104:	462b      	mov	r3, r5
 8007106:	f7f9 fa97 	bl	8000638 <__aeabi_dmul>
 800710a:	a33b      	add	r3, pc, #236	; (adr r3, 80071f8 <__kernel_cos+0x158>)
 800710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007110:	f7f9 f8da 	bl	80002c8 <__aeabi_dsub>
 8007114:	4622      	mov	r2, r4
 8007116:	462b      	mov	r3, r5
 8007118:	f7f9 fa8e 	bl	8000638 <__aeabi_dmul>
 800711c:	a338      	add	r3, pc, #224	; (adr r3, 8007200 <__kernel_cos+0x160>)
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	f7f9 f8d3 	bl	80002cc <__adddf3>
 8007126:	4622      	mov	r2, r4
 8007128:	462b      	mov	r3, r5
 800712a:	f7f9 fa85 	bl	8000638 <__aeabi_dmul>
 800712e:	a336      	add	r3, pc, #216	; (adr r3, 8007208 <__kernel_cos+0x168>)
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	f7f9 f8c8 	bl	80002c8 <__aeabi_dsub>
 8007138:	4622      	mov	r2, r4
 800713a:	462b      	mov	r3, r5
 800713c:	f7f9 fa7c 	bl	8000638 <__aeabi_dmul>
 8007140:	a333      	add	r3, pc, #204	; (adr r3, 8007210 <__kernel_cos+0x170>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f7f9 f8c1 	bl	80002cc <__adddf3>
 800714a:	4622      	mov	r2, r4
 800714c:	462b      	mov	r3, r5
 800714e:	f7f9 fa73 	bl	8000638 <__aeabi_dmul>
 8007152:	4622      	mov	r2, r4
 8007154:	462b      	mov	r3, r5
 8007156:	f7f9 fa6f 	bl	8000638 <__aeabi_dmul>
 800715a:	ec53 2b18 	vmov	r2, r3, d8
 800715e:	4604      	mov	r4, r0
 8007160:	460d      	mov	r5, r1
 8007162:	4640      	mov	r0, r8
 8007164:	4649      	mov	r1, r9
 8007166:	f7f9 fa67 	bl	8000638 <__aeabi_dmul>
 800716a:	460b      	mov	r3, r1
 800716c:	4602      	mov	r2, r0
 800716e:	4629      	mov	r1, r5
 8007170:	4620      	mov	r0, r4
 8007172:	f7f9 f8a9 	bl	80002c8 <__aeabi_dsub>
 8007176:	4b29      	ldr	r3, [pc, #164]	; (800721c <__kernel_cos+0x17c>)
 8007178:	429e      	cmp	r6, r3
 800717a:	4680      	mov	r8, r0
 800717c:	4689      	mov	r9, r1
 800717e:	dc11      	bgt.n	80071a4 <__kernel_cos+0x104>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4650      	mov	r0, sl
 8007186:	4659      	mov	r1, fp
 8007188:	f7f9 f89e 	bl	80002c8 <__aeabi_dsub>
 800718c:	460b      	mov	r3, r1
 800718e:	4924      	ldr	r1, [pc, #144]	; (8007220 <__kernel_cos+0x180>)
 8007190:	4602      	mov	r2, r0
 8007192:	2000      	movs	r0, #0
 8007194:	f7f9 f898 	bl	80002c8 <__aeabi_dsub>
 8007198:	ecbd 8b02 	vpop	{d8}
 800719c:	ec41 0b10 	vmov	d0, r0, r1
 80071a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a4:	4b1f      	ldr	r3, [pc, #124]	; (8007224 <__kernel_cos+0x184>)
 80071a6:	491e      	ldr	r1, [pc, #120]	; (8007220 <__kernel_cos+0x180>)
 80071a8:	429e      	cmp	r6, r3
 80071aa:	bfcc      	ite	gt
 80071ac:	4d1e      	ldrgt	r5, [pc, #120]	; (8007228 <__kernel_cos+0x188>)
 80071ae:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80071b2:	2400      	movs	r4, #0
 80071b4:	4622      	mov	r2, r4
 80071b6:	462b      	mov	r3, r5
 80071b8:	2000      	movs	r0, #0
 80071ba:	f7f9 f885 	bl	80002c8 <__aeabi_dsub>
 80071be:	4622      	mov	r2, r4
 80071c0:	4606      	mov	r6, r0
 80071c2:	460f      	mov	r7, r1
 80071c4:	462b      	mov	r3, r5
 80071c6:	4650      	mov	r0, sl
 80071c8:	4659      	mov	r1, fp
 80071ca:	f7f9 f87d 	bl	80002c8 <__aeabi_dsub>
 80071ce:	4642      	mov	r2, r8
 80071d0:	464b      	mov	r3, r9
 80071d2:	f7f9 f879 	bl	80002c8 <__aeabi_dsub>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4630      	mov	r0, r6
 80071dc:	4639      	mov	r1, r7
 80071de:	e7d9      	b.n	8007194 <__kernel_cos+0xf4>
 80071e0:	2000      	movs	r0, #0
 80071e2:	490f      	ldr	r1, [pc, #60]	; (8007220 <__kernel_cos+0x180>)
 80071e4:	e7d8      	b.n	8007198 <__kernel_cos+0xf8>
 80071e6:	bf00      	nop
 80071e8:	be8838d4 	.word	0xbe8838d4
 80071ec:	bda8fae9 	.word	0xbda8fae9
 80071f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80071f4:	3e21ee9e 	.word	0x3e21ee9e
 80071f8:	809c52ad 	.word	0x809c52ad
 80071fc:	3e927e4f 	.word	0x3e927e4f
 8007200:	19cb1590 	.word	0x19cb1590
 8007204:	3efa01a0 	.word	0x3efa01a0
 8007208:	16c15177 	.word	0x16c15177
 800720c:	3f56c16c 	.word	0x3f56c16c
 8007210:	5555554c 	.word	0x5555554c
 8007214:	3fa55555 	.word	0x3fa55555
 8007218:	3fe00000 	.word	0x3fe00000
 800721c:	3fd33332 	.word	0x3fd33332
 8007220:	3ff00000 	.word	0x3ff00000
 8007224:	3fe90000 	.word	0x3fe90000
 8007228:	3fd20000 	.word	0x3fd20000
 800722c:	00000000 	.word	0x00000000

08007230 <__kernel_rem_pio2>:
 8007230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007234:	ed2d 8b02 	vpush	{d8}
 8007238:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800723c:	1ed4      	subs	r4, r2, #3
 800723e:	9308      	str	r3, [sp, #32]
 8007240:	9101      	str	r1, [sp, #4]
 8007242:	4bc5      	ldr	r3, [pc, #788]	; (8007558 <__kernel_rem_pio2+0x328>)
 8007244:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007246:	9009      	str	r0, [sp, #36]	; 0x24
 8007248:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800724c:	9304      	str	r3, [sp, #16]
 800724e:	9b08      	ldr	r3, [sp, #32]
 8007250:	3b01      	subs	r3, #1
 8007252:	9307      	str	r3, [sp, #28]
 8007254:	2318      	movs	r3, #24
 8007256:	fb94 f4f3 	sdiv	r4, r4, r3
 800725a:	f06f 0317 	mvn.w	r3, #23
 800725e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8007262:	fb04 3303 	mla	r3, r4, r3, r3
 8007266:	eb03 0a02 	add.w	sl, r3, r2
 800726a:	9b04      	ldr	r3, [sp, #16]
 800726c:	9a07      	ldr	r2, [sp, #28]
 800726e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007548 <__kernel_rem_pio2+0x318>
 8007272:	eb03 0802 	add.w	r8, r3, r2
 8007276:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007278:	1aa7      	subs	r7, r4, r2
 800727a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800727e:	ae22      	add	r6, sp, #136	; 0x88
 8007280:	2500      	movs	r5, #0
 8007282:	4545      	cmp	r5, r8
 8007284:	dd13      	ble.n	80072ae <__kernel_rem_pio2+0x7e>
 8007286:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007548 <__kernel_rem_pio2+0x318>
 800728a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800728e:	2600      	movs	r6, #0
 8007290:	9b04      	ldr	r3, [sp, #16]
 8007292:	429e      	cmp	r6, r3
 8007294:	dc32      	bgt.n	80072fc <__kernel_rem_pio2+0xcc>
 8007296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007298:	9302      	str	r3, [sp, #8]
 800729a:	9b08      	ldr	r3, [sp, #32]
 800729c:	199d      	adds	r5, r3, r6
 800729e:	ab22      	add	r3, sp, #136	; 0x88
 80072a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80072a4:	9306      	str	r3, [sp, #24]
 80072a6:	ec59 8b18 	vmov	r8, r9, d8
 80072aa:	2700      	movs	r7, #0
 80072ac:	e01f      	b.n	80072ee <__kernel_rem_pio2+0xbe>
 80072ae:	42ef      	cmn	r7, r5
 80072b0:	d407      	bmi.n	80072c2 <__kernel_rem_pio2+0x92>
 80072b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80072b6:	f7f9 f955 	bl	8000564 <__aeabi_i2d>
 80072ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80072be:	3501      	adds	r5, #1
 80072c0:	e7df      	b.n	8007282 <__kernel_rem_pio2+0x52>
 80072c2:	ec51 0b18 	vmov	r0, r1, d8
 80072c6:	e7f8      	b.n	80072ba <__kernel_rem_pio2+0x8a>
 80072c8:	9906      	ldr	r1, [sp, #24]
 80072ca:	9d02      	ldr	r5, [sp, #8]
 80072cc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80072d0:	9106      	str	r1, [sp, #24]
 80072d2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80072d6:	9502      	str	r5, [sp, #8]
 80072d8:	f7f9 f9ae 	bl	8000638 <__aeabi_dmul>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4640      	mov	r0, r8
 80072e2:	4649      	mov	r1, r9
 80072e4:	f7f8 fff2 	bl	80002cc <__adddf3>
 80072e8:	3701      	adds	r7, #1
 80072ea:	4680      	mov	r8, r0
 80072ec:	4689      	mov	r9, r1
 80072ee:	9b07      	ldr	r3, [sp, #28]
 80072f0:	429f      	cmp	r7, r3
 80072f2:	dde9      	ble.n	80072c8 <__kernel_rem_pio2+0x98>
 80072f4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80072f8:	3601      	adds	r6, #1
 80072fa:	e7c9      	b.n	8007290 <__kernel_rem_pio2+0x60>
 80072fc:	9b04      	ldr	r3, [sp, #16]
 80072fe:	aa0e      	add	r2, sp, #56	; 0x38
 8007300:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007304:	930c      	str	r3, [sp, #48]	; 0x30
 8007306:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007308:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800730c:	9c04      	ldr	r4, [sp, #16]
 800730e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007310:	ab9a      	add	r3, sp, #616	; 0x268
 8007312:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8007316:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800731a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800731e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007322:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8007326:	ab9a      	add	r3, sp, #616	; 0x268
 8007328:	445b      	add	r3, fp
 800732a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800732e:	2500      	movs	r5, #0
 8007330:	1b63      	subs	r3, r4, r5
 8007332:	2b00      	cmp	r3, #0
 8007334:	dc78      	bgt.n	8007428 <__kernel_rem_pio2+0x1f8>
 8007336:	4650      	mov	r0, sl
 8007338:	ec49 8b10 	vmov	d0, r8, r9
 800733c:	f000 fc00 	bl	8007b40 <scalbn>
 8007340:	ec57 6b10 	vmov	r6, r7, d0
 8007344:	2200      	movs	r2, #0
 8007346:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800734a:	ee10 0a10 	vmov	r0, s0
 800734e:	4639      	mov	r1, r7
 8007350:	f7f9 f972 	bl	8000638 <__aeabi_dmul>
 8007354:	ec41 0b10 	vmov	d0, r0, r1
 8007358:	f000 fb6e 	bl	8007a38 <floor>
 800735c:	2200      	movs	r2, #0
 800735e:	ec51 0b10 	vmov	r0, r1, d0
 8007362:	4b7e      	ldr	r3, [pc, #504]	; (800755c <__kernel_rem_pio2+0x32c>)
 8007364:	f7f9 f968 	bl	8000638 <__aeabi_dmul>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4630      	mov	r0, r6
 800736e:	4639      	mov	r1, r7
 8007370:	f7f8 ffaa 	bl	80002c8 <__aeabi_dsub>
 8007374:	460f      	mov	r7, r1
 8007376:	4606      	mov	r6, r0
 8007378:	f7f9 fbf8 	bl	8000b6c <__aeabi_d2iz>
 800737c:	9006      	str	r0, [sp, #24]
 800737e:	f7f9 f8f1 	bl	8000564 <__aeabi_i2d>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	4630      	mov	r0, r6
 8007388:	4639      	mov	r1, r7
 800738a:	f7f8 ff9d 	bl	80002c8 <__aeabi_dsub>
 800738e:	f1ba 0f00 	cmp.w	sl, #0
 8007392:	4606      	mov	r6, r0
 8007394:	460f      	mov	r7, r1
 8007396:	dd6c      	ble.n	8007472 <__kernel_rem_pio2+0x242>
 8007398:	1e62      	subs	r2, r4, #1
 800739a:	ab0e      	add	r3, sp, #56	; 0x38
 800739c:	f1ca 0118 	rsb	r1, sl, #24
 80073a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80073a4:	9d06      	ldr	r5, [sp, #24]
 80073a6:	fa40 f301 	asr.w	r3, r0, r1
 80073aa:	441d      	add	r5, r3
 80073ac:	408b      	lsls	r3, r1
 80073ae:	1ac0      	subs	r0, r0, r3
 80073b0:	ab0e      	add	r3, sp, #56	; 0x38
 80073b2:	9506      	str	r5, [sp, #24]
 80073b4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80073b8:	f1ca 0317 	rsb	r3, sl, #23
 80073bc:	fa40 f303 	asr.w	r3, r0, r3
 80073c0:	9302      	str	r3, [sp, #8]
 80073c2:	9b02      	ldr	r3, [sp, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	dd62      	ble.n	800748e <__kernel_rem_pio2+0x25e>
 80073c8:	9b06      	ldr	r3, [sp, #24]
 80073ca:	2200      	movs	r2, #0
 80073cc:	3301      	adds	r3, #1
 80073ce:	9306      	str	r3, [sp, #24]
 80073d0:	4615      	mov	r5, r2
 80073d2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80073d6:	4294      	cmp	r4, r2
 80073d8:	f300 8095 	bgt.w	8007506 <__kernel_rem_pio2+0x2d6>
 80073dc:	f1ba 0f00 	cmp.w	sl, #0
 80073e0:	dd07      	ble.n	80073f2 <__kernel_rem_pio2+0x1c2>
 80073e2:	f1ba 0f01 	cmp.w	sl, #1
 80073e6:	f000 80a2 	beq.w	800752e <__kernel_rem_pio2+0x2fe>
 80073ea:	f1ba 0f02 	cmp.w	sl, #2
 80073ee:	f000 80c1 	beq.w	8007574 <__kernel_rem_pio2+0x344>
 80073f2:	9b02      	ldr	r3, [sp, #8]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d14a      	bne.n	800748e <__kernel_rem_pio2+0x25e>
 80073f8:	4632      	mov	r2, r6
 80073fa:	463b      	mov	r3, r7
 80073fc:	2000      	movs	r0, #0
 80073fe:	4958      	ldr	r1, [pc, #352]	; (8007560 <__kernel_rem_pio2+0x330>)
 8007400:	f7f8 ff62 	bl	80002c8 <__aeabi_dsub>
 8007404:	4606      	mov	r6, r0
 8007406:	460f      	mov	r7, r1
 8007408:	2d00      	cmp	r5, #0
 800740a:	d040      	beq.n	800748e <__kernel_rem_pio2+0x25e>
 800740c:	4650      	mov	r0, sl
 800740e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007550 <__kernel_rem_pio2+0x320>
 8007412:	f000 fb95 	bl	8007b40 <scalbn>
 8007416:	4630      	mov	r0, r6
 8007418:	4639      	mov	r1, r7
 800741a:	ec53 2b10 	vmov	r2, r3, d0
 800741e:	f7f8 ff53 	bl	80002c8 <__aeabi_dsub>
 8007422:	4606      	mov	r6, r0
 8007424:	460f      	mov	r7, r1
 8007426:	e032      	b.n	800748e <__kernel_rem_pio2+0x25e>
 8007428:	2200      	movs	r2, #0
 800742a:	4b4e      	ldr	r3, [pc, #312]	; (8007564 <__kernel_rem_pio2+0x334>)
 800742c:	4640      	mov	r0, r8
 800742e:	4649      	mov	r1, r9
 8007430:	f7f9 f902 	bl	8000638 <__aeabi_dmul>
 8007434:	f7f9 fb9a 	bl	8000b6c <__aeabi_d2iz>
 8007438:	f7f9 f894 	bl	8000564 <__aeabi_i2d>
 800743c:	2200      	movs	r2, #0
 800743e:	4b4a      	ldr	r3, [pc, #296]	; (8007568 <__kernel_rem_pio2+0x338>)
 8007440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007444:	f7f9 f8f8 	bl	8000638 <__aeabi_dmul>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	4640      	mov	r0, r8
 800744e:	4649      	mov	r1, r9
 8007450:	f7f8 ff3a 	bl	80002c8 <__aeabi_dsub>
 8007454:	f7f9 fb8a 	bl	8000b6c <__aeabi_d2iz>
 8007458:	ab0e      	add	r3, sp, #56	; 0x38
 800745a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800745e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007466:	f7f8 ff31 	bl	80002cc <__adddf3>
 800746a:	3501      	adds	r5, #1
 800746c:	4680      	mov	r8, r0
 800746e:	4689      	mov	r9, r1
 8007470:	e75e      	b.n	8007330 <__kernel_rem_pio2+0x100>
 8007472:	d105      	bne.n	8007480 <__kernel_rem_pio2+0x250>
 8007474:	1e63      	subs	r3, r4, #1
 8007476:	aa0e      	add	r2, sp, #56	; 0x38
 8007478:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800747c:	15c3      	asrs	r3, r0, #23
 800747e:	e79f      	b.n	80073c0 <__kernel_rem_pio2+0x190>
 8007480:	2200      	movs	r2, #0
 8007482:	4b3a      	ldr	r3, [pc, #232]	; (800756c <__kernel_rem_pio2+0x33c>)
 8007484:	f7f9 fb5e 	bl	8000b44 <__aeabi_dcmpge>
 8007488:	2800      	cmp	r0, #0
 800748a:	d139      	bne.n	8007500 <__kernel_rem_pio2+0x2d0>
 800748c:	9002      	str	r0, [sp, #8]
 800748e:	2200      	movs	r2, #0
 8007490:	2300      	movs	r3, #0
 8007492:	4630      	mov	r0, r6
 8007494:	4639      	mov	r1, r7
 8007496:	f7f9 fb37 	bl	8000b08 <__aeabi_dcmpeq>
 800749a:	2800      	cmp	r0, #0
 800749c:	f000 80c7 	beq.w	800762e <__kernel_rem_pio2+0x3fe>
 80074a0:	1e65      	subs	r5, r4, #1
 80074a2:	462b      	mov	r3, r5
 80074a4:	2200      	movs	r2, #0
 80074a6:	9904      	ldr	r1, [sp, #16]
 80074a8:	428b      	cmp	r3, r1
 80074aa:	da6a      	bge.n	8007582 <__kernel_rem_pio2+0x352>
 80074ac:	2a00      	cmp	r2, #0
 80074ae:	f000 8088 	beq.w	80075c2 <__kernel_rem_pio2+0x392>
 80074b2:	ab0e      	add	r3, sp, #56	; 0x38
 80074b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80074b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80b4 	beq.w	800762a <__kernel_rem_pio2+0x3fa>
 80074c2:	4650      	mov	r0, sl
 80074c4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007550 <__kernel_rem_pio2+0x320>
 80074c8:	f000 fb3a 	bl	8007b40 <scalbn>
 80074cc:	00ec      	lsls	r4, r5, #3
 80074ce:	ab72      	add	r3, sp, #456	; 0x1c8
 80074d0:	191e      	adds	r6, r3, r4
 80074d2:	ec59 8b10 	vmov	r8, r9, d0
 80074d6:	f106 0a08 	add.w	sl, r6, #8
 80074da:	462f      	mov	r7, r5
 80074dc:	2f00      	cmp	r7, #0
 80074de:	f280 80df 	bge.w	80076a0 <__kernel_rem_pio2+0x470>
 80074e2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007548 <__kernel_rem_pio2+0x318>
 80074e6:	f04f 0a00 	mov.w	sl, #0
 80074ea:	eba5 030a 	sub.w	r3, r5, sl
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f2c0 810a 	blt.w	8007708 <__kernel_rem_pio2+0x4d8>
 80074f4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007570 <__kernel_rem_pio2+0x340>
 80074f8:	ec59 8b18 	vmov	r8, r9, d8
 80074fc:	2700      	movs	r7, #0
 80074fe:	e0f5      	b.n	80076ec <__kernel_rem_pio2+0x4bc>
 8007500:	2302      	movs	r3, #2
 8007502:	9302      	str	r3, [sp, #8]
 8007504:	e760      	b.n	80073c8 <__kernel_rem_pio2+0x198>
 8007506:	ab0e      	add	r3, sp, #56	; 0x38
 8007508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750c:	b94d      	cbnz	r5, 8007522 <__kernel_rem_pio2+0x2f2>
 800750e:	b12b      	cbz	r3, 800751c <__kernel_rem_pio2+0x2ec>
 8007510:	a80e      	add	r0, sp, #56	; 0x38
 8007512:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007516:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800751a:	2301      	movs	r3, #1
 800751c:	3201      	adds	r2, #1
 800751e:	461d      	mov	r5, r3
 8007520:	e759      	b.n	80073d6 <__kernel_rem_pio2+0x1a6>
 8007522:	a80e      	add	r0, sp, #56	; 0x38
 8007524:	1acb      	subs	r3, r1, r3
 8007526:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800752a:	462b      	mov	r3, r5
 800752c:	e7f6      	b.n	800751c <__kernel_rem_pio2+0x2ec>
 800752e:	1e62      	subs	r2, r4, #1
 8007530:	ab0e      	add	r3, sp, #56	; 0x38
 8007532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007536:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800753a:	a90e      	add	r1, sp, #56	; 0x38
 800753c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007540:	e757      	b.n	80073f2 <__kernel_rem_pio2+0x1c2>
 8007542:	bf00      	nop
 8007544:	f3af 8000 	nop.w
	...
 8007554:	3ff00000 	.word	0x3ff00000
 8007558:	080083f0 	.word	0x080083f0
 800755c:	40200000 	.word	0x40200000
 8007560:	3ff00000 	.word	0x3ff00000
 8007564:	3e700000 	.word	0x3e700000
 8007568:	41700000 	.word	0x41700000
 800756c:	3fe00000 	.word	0x3fe00000
 8007570:	080083b0 	.word	0x080083b0
 8007574:	1e62      	subs	r2, r4, #1
 8007576:	ab0e      	add	r3, sp, #56	; 0x38
 8007578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007580:	e7db      	b.n	800753a <__kernel_rem_pio2+0x30a>
 8007582:	a90e      	add	r1, sp, #56	; 0x38
 8007584:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007588:	3b01      	subs	r3, #1
 800758a:	430a      	orrs	r2, r1
 800758c:	e78b      	b.n	80074a6 <__kernel_rem_pio2+0x276>
 800758e:	3301      	adds	r3, #1
 8007590:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007594:	2900      	cmp	r1, #0
 8007596:	d0fa      	beq.n	800758e <__kernel_rem_pio2+0x35e>
 8007598:	9a08      	ldr	r2, [sp, #32]
 800759a:	4422      	add	r2, r4
 800759c:	00d2      	lsls	r2, r2, #3
 800759e:	a922      	add	r1, sp, #136	; 0x88
 80075a0:	18e3      	adds	r3, r4, r3
 80075a2:	9206      	str	r2, [sp, #24]
 80075a4:	440a      	add	r2, r1
 80075a6:	9302      	str	r3, [sp, #8]
 80075a8:	f10b 0108 	add.w	r1, fp, #8
 80075ac:	f102 0308 	add.w	r3, r2, #8
 80075b0:	1c66      	adds	r6, r4, #1
 80075b2:	910a      	str	r1, [sp, #40]	; 0x28
 80075b4:	2500      	movs	r5, #0
 80075b6:	930d      	str	r3, [sp, #52]	; 0x34
 80075b8:	9b02      	ldr	r3, [sp, #8]
 80075ba:	42b3      	cmp	r3, r6
 80075bc:	da04      	bge.n	80075c8 <__kernel_rem_pio2+0x398>
 80075be:	461c      	mov	r4, r3
 80075c0:	e6a6      	b.n	8007310 <__kernel_rem_pio2+0xe0>
 80075c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075c4:	2301      	movs	r3, #1
 80075c6:	e7e3      	b.n	8007590 <__kernel_rem_pio2+0x360>
 80075c8:	9b06      	ldr	r3, [sp, #24]
 80075ca:	18ef      	adds	r7, r5, r3
 80075cc:	ab22      	add	r3, sp, #136	; 0x88
 80075ce:	441f      	add	r7, r3
 80075d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80075d6:	f7f8 ffc5 	bl	8000564 <__aeabi_i2d>
 80075da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075dc:	461c      	mov	r4, r3
 80075de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075e0:	e9c7 0100 	strd	r0, r1, [r7]
 80075e4:	eb03 0b05 	add.w	fp, r3, r5
 80075e8:	2700      	movs	r7, #0
 80075ea:	f04f 0800 	mov.w	r8, #0
 80075ee:	f04f 0900 	mov.w	r9, #0
 80075f2:	9b07      	ldr	r3, [sp, #28]
 80075f4:	429f      	cmp	r7, r3
 80075f6:	dd08      	ble.n	800760a <__kernel_rem_pio2+0x3da>
 80075f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075fa:	aa72      	add	r2, sp, #456	; 0x1c8
 80075fc:	18eb      	adds	r3, r5, r3
 80075fe:	4413      	add	r3, r2
 8007600:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8007604:	3601      	adds	r6, #1
 8007606:	3508      	adds	r5, #8
 8007608:	e7d6      	b.n	80075b8 <__kernel_rem_pio2+0x388>
 800760a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800760e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007612:	f7f9 f811 	bl	8000638 <__aeabi_dmul>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4640      	mov	r0, r8
 800761c:	4649      	mov	r1, r9
 800761e:	f7f8 fe55 	bl	80002cc <__adddf3>
 8007622:	3701      	adds	r7, #1
 8007624:	4680      	mov	r8, r0
 8007626:	4689      	mov	r9, r1
 8007628:	e7e3      	b.n	80075f2 <__kernel_rem_pio2+0x3c2>
 800762a:	3d01      	subs	r5, #1
 800762c:	e741      	b.n	80074b2 <__kernel_rem_pio2+0x282>
 800762e:	f1ca 0000 	rsb	r0, sl, #0
 8007632:	ec47 6b10 	vmov	d0, r6, r7
 8007636:	f000 fa83 	bl	8007b40 <scalbn>
 800763a:	ec57 6b10 	vmov	r6, r7, d0
 800763e:	2200      	movs	r2, #0
 8007640:	4b99      	ldr	r3, [pc, #612]	; (80078a8 <__kernel_rem_pio2+0x678>)
 8007642:	ee10 0a10 	vmov	r0, s0
 8007646:	4639      	mov	r1, r7
 8007648:	f7f9 fa7c 	bl	8000b44 <__aeabi_dcmpge>
 800764c:	b1f8      	cbz	r0, 800768e <__kernel_rem_pio2+0x45e>
 800764e:	2200      	movs	r2, #0
 8007650:	4b96      	ldr	r3, [pc, #600]	; (80078ac <__kernel_rem_pio2+0x67c>)
 8007652:	4630      	mov	r0, r6
 8007654:	4639      	mov	r1, r7
 8007656:	f7f8 ffef 	bl	8000638 <__aeabi_dmul>
 800765a:	f7f9 fa87 	bl	8000b6c <__aeabi_d2iz>
 800765e:	4680      	mov	r8, r0
 8007660:	f7f8 ff80 	bl	8000564 <__aeabi_i2d>
 8007664:	2200      	movs	r2, #0
 8007666:	4b90      	ldr	r3, [pc, #576]	; (80078a8 <__kernel_rem_pio2+0x678>)
 8007668:	f7f8 ffe6 	bl	8000638 <__aeabi_dmul>
 800766c:	460b      	mov	r3, r1
 800766e:	4602      	mov	r2, r0
 8007670:	4639      	mov	r1, r7
 8007672:	4630      	mov	r0, r6
 8007674:	f7f8 fe28 	bl	80002c8 <__aeabi_dsub>
 8007678:	f7f9 fa78 	bl	8000b6c <__aeabi_d2iz>
 800767c:	1c65      	adds	r5, r4, #1
 800767e:	ab0e      	add	r3, sp, #56	; 0x38
 8007680:	f10a 0a18 	add.w	sl, sl, #24
 8007684:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007688:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800768c:	e719      	b.n	80074c2 <__kernel_rem_pio2+0x292>
 800768e:	4630      	mov	r0, r6
 8007690:	4639      	mov	r1, r7
 8007692:	f7f9 fa6b 	bl	8000b6c <__aeabi_d2iz>
 8007696:	ab0e      	add	r3, sp, #56	; 0x38
 8007698:	4625      	mov	r5, r4
 800769a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800769e:	e710      	b.n	80074c2 <__kernel_rem_pio2+0x292>
 80076a0:	ab0e      	add	r3, sp, #56	; 0x38
 80076a2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80076a6:	f7f8 ff5d 	bl	8000564 <__aeabi_i2d>
 80076aa:	4642      	mov	r2, r8
 80076ac:	464b      	mov	r3, r9
 80076ae:	f7f8 ffc3 	bl	8000638 <__aeabi_dmul>
 80076b2:	2200      	movs	r2, #0
 80076b4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80076b8:	4b7c      	ldr	r3, [pc, #496]	; (80078ac <__kernel_rem_pio2+0x67c>)
 80076ba:	4640      	mov	r0, r8
 80076bc:	4649      	mov	r1, r9
 80076be:	f7f8 ffbb 	bl	8000638 <__aeabi_dmul>
 80076c2:	3f01      	subs	r7, #1
 80076c4:	4680      	mov	r8, r0
 80076c6:	4689      	mov	r9, r1
 80076c8:	e708      	b.n	80074dc <__kernel_rem_pio2+0x2ac>
 80076ca:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80076ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80076d6:	f7f8 ffaf 	bl	8000638 <__aeabi_dmul>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4640      	mov	r0, r8
 80076e0:	4649      	mov	r1, r9
 80076e2:	f7f8 fdf3 	bl	80002cc <__adddf3>
 80076e6:	3701      	adds	r7, #1
 80076e8:	4680      	mov	r8, r0
 80076ea:	4689      	mov	r9, r1
 80076ec:	9b04      	ldr	r3, [sp, #16]
 80076ee:	429f      	cmp	r7, r3
 80076f0:	dc01      	bgt.n	80076f6 <__kernel_rem_pio2+0x4c6>
 80076f2:	45ba      	cmp	sl, r7
 80076f4:	dae9      	bge.n	80076ca <__kernel_rem_pio2+0x49a>
 80076f6:	ab4a      	add	r3, sp, #296	; 0x128
 80076f8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076fc:	e9c3 8900 	strd	r8, r9, [r3]
 8007700:	f10a 0a01 	add.w	sl, sl, #1
 8007704:	3e08      	subs	r6, #8
 8007706:	e6f0      	b.n	80074ea <__kernel_rem_pio2+0x2ba>
 8007708:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800770a:	2b03      	cmp	r3, #3
 800770c:	d85b      	bhi.n	80077c6 <__kernel_rem_pio2+0x596>
 800770e:	e8df f003 	tbb	[pc, r3]
 8007712:	264a      	.short	0x264a
 8007714:	0226      	.short	0x0226
 8007716:	ab9a      	add	r3, sp, #616	; 0x268
 8007718:	441c      	add	r4, r3
 800771a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800771e:	46a2      	mov	sl, r4
 8007720:	46ab      	mov	fp, r5
 8007722:	f1bb 0f00 	cmp.w	fp, #0
 8007726:	dc6c      	bgt.n	8007802 <__kernel_rem_pio2+0x5d2>
 8007728:	46a2      	mov	sl, r4
 800772a:	46ab      	mov	fp, r5
 800772c:	f1bb 0f01 	cmp.w	fp, #1
 8007730:	f300 8086 	bgt.w	8007840 <__kernel_rem_pio2+0x610>
 8007734:	2000      	movs	r0, #0
 8007736:	2100      	movs	r1, #0
 8007738:	2d01      	cmp	r5, #1
 800773a:	f300 80a0 	bgt.w	800787e <__kernel_rem_pio2+0x64e>
 800773e:	9b02      	ldr	r3, [sp, #8]
 8007740:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007744:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007748:	2b00      	cmp	r3, #0
 800774a:	f040 809e 	bne.w	800788a <__kernel_rem_pio2+0x65a>
 800774e:	9b01      	ldr	r3, [sp, #4]
 8007750:	e9c3 7800 	strd	r7, r8, [r3]
 8007754:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007758:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800775c:	e033      	b.n	80077c6 <__kernel_rem_pio2+0x596>
 800775e:	3408      	adds	r4, #8
 8007760:	ab4a      	add	r3, sp, #296	; 0x128
 8007762:	441c      	add	r4, r3
 8007764:	462e      	mov	r6, r5
 8007766:	2000      	movs	r0, #0
 8007768:	2100      	movs	r1, #0
 800776a:	2e00      	cmp	r6, #0
 800776c:	da3a      	bge.n	80077e4 <__kernel_rem_pio2+0x5b4>
 800776e:	9b02      	ldr	r3, [sp, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d03d      	beq.n	80077f0 <__kernel_rem_pio2+0x5c0>
 8007774:	4602      	mov	r2, r0
 8007776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800777a:	9c01      	ldr	r4, [sp, #4]
 800777c:	e9c4 2300 	strd	r2, r3, [r4]
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007788:	f7f8 fd9e 	bl	80002c8 <__aeabi_dsub>
 800778c:	ae4c      	add	r6, sp, #304	; 0x130
 800778e:	2401      	movs	r4, #1
 8007790:	42a5      	cmp	r5, r4
 8007792:	da30      	bge.n	80077f6 <__kernel_rem_pio2+0x5c6>
 8007794:	9b02      	ldr	r3, [sp, #8]
 8007796:	b113      	cbz	r3, 800779e <__kernel_rem_pio2+0x56e>
 8007798:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800779c:	4619      	mov	r1, r3
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80077a4:	e00f      	b.n	80077c6 <__kernel_rem_pio2+0x596>
 80077a6:	ab9a      	add	r3, sp, #616	; 0x268
 80077a8:	441c      	add	r4, r3
 80077aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80077ae:	2000      	movs	r0, #0
 80077b0:	2100      	movs	r1, #0
 80077b2:	2d00      	cmp	r5, #0
 80077b4:	da10      	bge.n	80077d8 <__kernel_rem_pio2+0x5a8>
 80077b6:	9b02      	ldr	r3, [sp, #8]
 80077b8:	b113      	cbz	r3, 80077c0 <__kernel_rem_pio2+0x590>
 80077ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077be:	4619      	mov	r1, r3
 80077c0:	9b01      	ldr	r3, [sp, #4]
 80077c2:	e9c3 0100 	strd	r0, r1, [r3]
 80077c6:	9b06      	ldr	r3, [sp, #24]
 80077c8:	f003 0007 	and.w	r0, r3, #7
 80077cc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80077d0:	ecbd 8b02 	vpop	{d8}
 80077d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80077dc:	f7f8 fd76 	bl	80002cc <__adddf3>
 80077e0:	3d01      	subs	r5, #1
 80077e2:	e7e6      	b.n	80077b2 <__kernel_rem_pio2+0x582>
 80077e4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80077e8:	f7f8 fd70 	bl	80002cc <__adddf3>
 80077ec:	3e01      	subs	r6, #1
 80077ee:	e7bc      	b.n	800776a <__kernel_rem_pio2+0x53a>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	e7c1      	b.n	800777a <__kernel_rem_pio2+0x54a>
 80077f6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80077fa:	f7f8 fd67 	bl	80002cc <__adddf3>
 80077fe:	3401      	adds	r4, #1
 8007800:	e7c6      	b.n	8007790 <__kernel_rem_pio2+0x560>
 8007802:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8007806:	ed3a 7b02 	vldmdb	sl!, {d7}
 800780a:	4640      	mov	r0, r8
 800780c:	ec53 2b17 	vmov	r2, r3, d7
 8007810:	4649      	mov	r1, r9
 8007812:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007816:	f7f8 fd59 	bl	80002cc <__adddf3>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	4606      	mov	r6, r0
 8007820:	460f      	mov	r7, r1
 8007822:	4640      	mov	r0, r8
 8007824:	4649      	mov	r1, r9
 8007826:	f7f8 fd4f 	bl	80002c8 <__aeabi_dsub>
 800782a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800782e:	f7f8 fd4d 	bl	80002cc <__adddf3>
 8007832:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007836:	e9ca 0100 	strd	r0, r1, [sl]
 800783a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800783e:	e770      	b.n	8007722 <__kernel_rem_pio2+0x4f2>
 8007840:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8007844:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007848:	4630      	mov	r0, r6
 800784a:	ec53 2b17 	vmov	r2, r3, d7
 800784e:	4639      	mov	r1, r7
 8007850:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007854:	f7f8 fd3a 	bl	80002cc <__adddf3>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4680      	mov	r8, r0
 800785e:	4689      	mov	r9, r1
 8007860:	4630      	mov	r0, r6
 8007862:	4639      	mov	r1, r7
 8007864:	f7f8 fd30 	bl	80002c8 <__aeabi_dsub>
 8007868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800786c:	f7f8 fd2e 	bl	80002cc <__adddf3>
 8007870:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007874:	e9ca 0100 	strd	r0, r1, [sl]
 8007878:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800787c:	e756      	b.n	800772c <__kernel_rem_pio2+0x4fc>
 800787e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007882:	f7f8 fd23 	bl	80002cc <__adddf3>
 8007886:	3d01      	subs	r5, #1
 8007888:	e756      	b.n	8007738 <__kernel_rem_pio2+0x508>
 800788a:	9b01      	ldr	r3, [sp, #4]
 800788c:	9a01      	ldr	r2, [sp, #4]
 800788e:	601f      	str	r7, [r3, #0]
 8007890:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007894:	605c      	str	r4, [r3, #4]
 8007896:	609d      	str	r5, [r3, #8]
 8007898:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800789c:	60d3      	str	r3, [r2, #12]
 800789e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078a2:	6110      	str	r0, [r2, #16]
 80078a4:	6153      	str	r3, [r2, #20]
 80078a6:	e78e      	b.n	80077c6 <__kernel_rem_pio2+0x596>
 80078a8:	41700000 	.word	0x41700000
 80078ac:	3e700000 	.word	0x3e700000

080078b0 <__kernel_sin>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	ec55 4b10 	vmov	r4, r5, d0
 80078b8:	b085      	sub	sp, #20
 80078ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80078be:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80078c2:	ed8d 1b00 	vstr	d1, [sp]
 80078c6:	9002      	str	r0, [sp, #8]
 80078c8:	da06      	bge.n	80078d8 <__kernel_sin+0x28>
 80078ca:	ee10 0a10 	vmov	r0, s0
 80078ce:	4629      	mov	r1, r5
 80078d0:	f7f9 f94c 	bl	8000b6c <__aeabi_d2iz>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d051      	beq.n	800797c <__kernel_sin+0xcc>
 80078d8:	4622      	mov	r2, r4
 80078da:	462b      	mov	r3, r5
 80078dc:	4620      	mov	r0, r4
 80078de:	4629      	mov	r1, r5
 80078e0:	f7f8 feaa 	bl	8000638 <__aeabi_dmul>
 80078e4:	4682      	mov	sl, r0
 80078e6:	468b      	mov	fp, r1
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4620      	mov	r0, r4
 80078ee:	4629      	mov	r1, r5
 80078f0:	f7f8 fea2 	bl	8000638 <__aeabi_dmul>
 80078f4:	a341      	add	r3, pc, #260	; (adr r3, 80079fc <__kernel_sin+0x14c>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	4680      	mov	r8, r0
 80078fc:	4689      	mov	r9, r1
 80078fe:	4650      	mov	r0, sl
 8007900:	4659      	mov	r1, fp
 8007902:	f7f8 fe99 	bl	8000638 <__aeabi_dmul>
 8007906:	a33f      	add	r3, pc, #252	; (adr r3, 8007a04 <__kernel_sin+0x154>)
 8007908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790c:	f7f8 fcdc 	bl	80002c8 <__aeabi_dsub>
 8007910:	4652      	mov	r2, sl
 8007912:	465b      	mov	r3, fp
 8007914:	f7f8 fe90 	bl	8000638 <__aeabi_dmul>
 8007918:	a33c      	add	r3, pc, #240	; (adr r3, 8007a0c <__kernel_sin+0x15c>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f7f8 fcd5 	bl	80002cc <__adddf3>
 8007922:	4652      	mov	r2, sl
 8007924:	465b      	mov	r3, fp
 8007926:	f7f8 fe87 	bl	8000638 <__aeabi_dmul>
 800792a:	a33a      	add	r3, pc, #232	; (adr r3, 8007a14 <__kernel_sin+0x164>)
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	f7f8 fcca 	bl	80002c8 <__aeabi_dsub>
 8007934:	4652      	mov	r2, sl
 8007936:	465b      	mov	r3, fp
 8007938:	f7f8 fe7e 	bl	8000638 <__aeabi_dmul>
 800793c:	a337      	add	r3, pc, #220	; (adr r3, 8007a1c <__kernel_sin+0x16c>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	f7f8 fcc3 	bl	80002cc <__adddf3>
 8007946:	9b02      	ldr	r3, [sp, #8]
 8007948:	4606      	mov	r6, r0
 800794a:	460f      	mov	r7, r1
 800794c:	b9db      	cbnz	r3, 8007986 <__kernel_sin+0xd6>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4650      	mov	r0, sl
 8007954:	4659      	mov	r1, fp
 8007956:	f7f8 fe6f 	bl	8000638 <__aeabi_dmul>
 800795a:	a325      	add	r3, pc, #148	; (adr r3, 80079f0 <__kernel_sin+0x140>)
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f7f8 fcb2 	bl	80002c8 <__aeabi_dsub>
 8007964:	4642      	mov	r2, r8
 8007966:	464b      	mov	r3, r9
 8007968:	f7f8 fe66 	bl	8000638 <__aeabi_dmul>
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	4620      	mov	r0, r4
 8007972:	4629      	mov	r1, r5
 8007974:	f7f8 fcaa 	bl	80002cc <__adddf3>
 8007978:	4604      	mov	r4, r0
 800797a:	460d      	mov	r5, r1
 800797c:	ec45 4b10 	vmov	d0, r4, r5
 8007980:	b005      	add	sp, #20
 8007982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007986:	2200      	movs	r2, #0
 8007988:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <__kernel_sin+0x148>)
 800798a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800798e:	f7f8 fe53 	bl	8000638 <__aeabi_dmul>
 8007992:	4632      	mov	r2, r6
 8007994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007998:	463b      	mov	r3, r7
 800799a:	4640      	mov	r0, r8
 800799c:	4649      	mov	r1, r9
 800799e:	f7f8 fe4b 	bl	8000638 <__aeabi_dmul>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079aa:	f7f8 fc8d 	bl	80002c8 <__aeabi_dsub>
 80079ae:	4652      	mov	r2, sl
 80079b0:	465b      	mov	r3, fp
 80079b2:	f7f8 fe41 	bl	8000638 <__aeabi_dmul>
 80079b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079ba:	f7f8 fc85 	bl	80002c8 <__aeabi_dsub>
 80079be:	a30c      	add	r3, pc, #48	; (adr r3, 80079f0 <__kernel_sin+0x140>)
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	4606      	mov	r6, r0
 80079c6:	460f      	mov	r7, r1
 80079c8:	4640      	mov	r0, r8
 80079ca:	4649      	mov	r1, r9
 80079cc:	f7f8 fe34 	bl	8000638 <__aeabi_dmul>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4630      	mov	r0, r6
 80079d6:	4639      	mov	r1, r7
 80079d8:	f7f8 fc78 	bl	80002cc <__adddf3>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4620      	mov	r0, r4
 80079e2:	4629      	mov	r1, r5
 80079e4:	f7f8 fc70 	bl	80002c8 <__aeabi_dsub>
 80079e8:	e7c6      	b.n	8007978 <__kernel_sin+0xc8>
 80079ea:	bf00      	nop
 80079ec:	f3af 8000 	nop.w
 80079f0:	55555549 	.word	0x55555549
 80079f4:	3fc55555 	.word	0x3fc55555
 80079f8:	3fe00000 	.word	0x3fe00000
 80079fc:	5acfd57c 	.word	0x5acfd57c
 8007a00:	3de5d93a 	.word	0x3de5d93a
 8007a04:	8a2b9ceb 	.word	0x8a2b9ceb
 8007a08:	3e5ae5e6 	.word	0x3e5ae5e6
 8007a0c:	57b1fe7d 	.word	0x57b1fe7d
 8007a10:	3ec71de3 	.word	0x3ec71de3
 8007a14:	19c161d5 	.word	0x19c161d5
 8007a18:	3f2a01a0 	.word	0x3f2a01a0
 8007a1c:	1110f8a6 	.word	0x1110f8a6
 8007a20:	3f811111 	.word	0x3f811111

08007a24 <fabs>:
 8007a24:	ec51 0b10 	vmov	r0, r1, d0
 8007a28:	ee10 2a10 	vmov	r2, s0
 8007a2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a30:	ec43 2b10 	vmov	d0, r2, r3
 8007a34:	4770      	bx	lr
	...

08007a38 <floor>:
 8007a38:	ec51 0b10 	vmov	r0, r1, d0
 8007a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007a44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007a48:	2e13      	cmp	r6, #19
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	ee10 5a10 	vmov	r5, s0
 8007a50:	4680      	mov	r8, r0
 8007a52:	dc34      	bgt.n	8007abe <floor+0x86>
 8007a54:	2e00      	cmp	r6, #0
 8007a56:	da16      	bge.n	8007a86 <floor+0x4e>
 8007a58:	a335      	add	r3, pc, #212	; (adr r3, 8007b30 <floor+0xf8>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	f7f8 fc35 	bl	80002cc <__adddf3>
 8007a62:	2200      	movs	r2, #0
 8007a64:	2300      	movs	r3, #0
 8007a66:	f7f9 f877 	bl	8000b58 <__aeabi_dcmpgt>
 8007a6a:	b148      	cbz	r0, 8007a80 <floor+0x48>
 8007a6c:	2c00      	cmp	r4, #0
 8007a6e:	da59      	bge.n	8007b24 <floor+0xec>
 8007a70:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007a74:	4a30      	ldr	r2, [pc, #192]	; (8007b38 <floor+0x100>)
 8007a76:	432b      	orrs	r3, r5
 8007a78:	2500      	movs	r5, #0
 8007a7a:	42ab      	cmp	r3, r5
 8007a7c:	bf18      	it	ne
 8007a7e:	4614      	movne	r4, r2
 8007a80:	4621      	mov	r1, r4
 8007a82:	4628      	mov	r0, r5
 8007a84:	e025      	b.n	8007ad2 <floor+0x9a>
 8007a86:	4f2d      	ldr	r7, [pc, #180]	; (8007b3c <floor+0x104>)
 8007a88:	4137      	asrs	r7, r6
 8007a8a:	ea01 0307 	and.w	r3, r1, r7
 8007a8e:	4303      	orrs	r3, r0
 8007a90:	d01f      	beq.n	8007ad2 <floor+0x9a>
 8007a92:	a327      	add	r3, pc, #156	; (adr r3, 8007b30 <floor+0xf8>)
 8007a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a98:	f7f8 fc18 	bl	80002cc <__adddf3>
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f7f9 f85a 	bl	8000b58 <__aeabi_dcmpgt>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d0eb      	beq.n	8007a80 <floor+0x48>
 8007aa8:	2c00      	cmp	r4, #0
 8007aaa:	bfbe      	ittt	lt
 8007aac:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007ab0:	fa43 f606 	asrlt.w	r6, r3, r6
 8007ab4:	19a4      	addlt	r4, r4, r6
 8007ab6:	ea24 0407 	bic.w	r4, r4, r7
 8007aba:	2500      	movs	r5, #0
 8007abc:	e7e0      	b.n	8007a80 <floor+0x48>
 8007abe:	2e33      	cmp	r6, #51	; 0x33
 8007ac0:	dd0b      	ble.n	8007ada <floor+0xa2>
 8007ac2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007ac6:	d104      	bne.n	8007ad2 <floor+0x9a>
 8007ac8:	ee10 2a10 	vmov	r2, s0
 8007acc:	460b      	mov	r3, r1
 8007ace:	f7f8 fbfd 	bl	80002cc <__adddf3>
 8007ad2:	ec41 0b10 	vmov	d0, r0, r1
 8007ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ada:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007ade:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae2:	fa23 f707 	lsr.w	r7, r3, r7
 8007ae6:	4207      	tst	r7, r0
 8007ae8:	d0f3      	beq.n	8007ad2 <floor+0x9a>
 8007aea:	a311      	add	r3, pc, #68	; (adr r3, 8007b30 <floor+0xf8>)
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	f7f8 fbec 	bl	80002cc <__adddf3>
 8007af4:	2200      	movs	r2, #0
 8007af6:	2300      	movs	r3, #0
 8007af8:	f7f9 f82e 	bl	8000b58 <__aeabi_dcmpgt>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d0bf      	beq.n	8007a80 <floor+0x48>
 8007b00:	2c00      	cmp	r4, #0
 8007b02:	da02      	bge.n	8007b0a <floor+0xd2>
 8007b04:	2e14      	cmp	r6, #20
 8007b06:	d103      	bne.n	8007b10 <floor+0xd8>
 8007b08:	3401      	adds	r4, #1
 8007b0a:	ea25 0507 	bic.w	r5, r5, r7
 8007b0e:	e7b7      	b.n	8007a80 <floor+0x48>
 8007b10:	2301      	movs	r3, #1
 8007b12:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007b16:	fa03 f606 	lsl.w	r6, r3, r6
 8007b1a:	4435      	add	r5, r6
 8007b1c:	4545      	cmp	r5, r8
 8007b1e:	bf38      	it	cc
 8007b20:	18e4      	addcc	r4, r4, r3
 8007b22:	e7f2      	b.n	8007b0a <floor+0xd2>
 8007b24:	2500      	movs	r5, #0
 8007b26:	462c      	mov	r4, r5
 8007b28:	e7aa      	b.n	8007a80 <floor+0x48>
 8007b2a:	bf00      	nop
 8007b2c:	f3af 8000 	nop.w
 8007b30:	8800759c 	.word	0x8800759c
 8007b34:	7e37e43c 	.word	0x7e37e43c
 8007b38:	bff00000 	.word	0xbff00000
 8007b3c:	000fffff 	.word	0x000fffff

08007b40 <scalbn>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	ec55 4b10 	vmov	r4, r5, d0
 8007b46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	b9aa      	cbnz	r2, 8007b7c <scalbn+0x3c>
 8007b50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007b54:	4323      	orrs	r3, r4
 8007b56:	d03b      	beq.n	8007bd0 <scalbn+0x90>
 8007b58:	4b31      	ldr	r3, [pc, #196]	; (8007c20 <scalbn+0xe0>)
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	ee10 0a10 	vmov	r0, s0
 8007b62:	f7f8 fd69 	bl	8000638 <__aeabi_dmul>
 8007b66:	4b2f      	ldr	r3, [pc, #188]	; (8007c24 <scalbn+0xe4>)
 8007b68:	429e      	cmp	r6, r3
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	460d      	mov	r5, r1
 8007b6e:	da12      	bge.n	8007b96 <scalbn+0x56>
 8007b70:	a327      	add	r3, pc, #156	; (adr r3, 8007c10 <scalbn+0xd0>)
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	f7f8 fd5f 	bl	8000638 <__aeabi_dmul>
 8007b7a:	e009      	b.n	8007b90 <scalbn+0x50>
 8007b7c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007b80:	428a      	cmp	r2, r1
 8007b82:	d10c      	bne.n	8007b9e <scalbn+0x5e>
 8007b84:	ee10 2a10 	vmov	r2, s0
 8007b88:	4620      	mov	r0, r4
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	f7f8 fb9e 	bl	80002cc <__adddf3>
 8007b90:	4604      	mov	r4, r0
 8007b92:	460d      	mov	r5, r1
 8007b94:	e01c      	b.n	8007bd0 <scalbn+0x90>
 8007b96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	3a36      	subs	r2, #54	; 0x36
 8007b9e:	4432      	add	r2, r6
 8007ba0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007ba4:	428a      	cmp	r2, r1
 8007ba6:	dd0b      	ble.n	8007bc0 <scalbn+0x80>
 8007ba8:	ec45 4b11 	vmov	d1, r4, r5
 8007bac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007c18 <scalbn+0xd8>
 8007bb0:	f000 f83c 	bl	8007c2c <copysign>
 8007bb4:	a318      	add	r3, pc, #96	; (adr r3, 8007c18 <scalbn+0xd8>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	ec51 0b10 	vmov	r0, r1, d0
 8007bbe:	e7da      	b.n	8007b76 <scalbn+0x36>
 8007bc0:	2a00      	cmp	r2, #0
 8007bc2:	dd08      	ble.n	8007bd6 <scalbn+0x96>
 8007bc4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007bc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007bd0:	ec45 4b10 	vmov	d0, r4, r5
 8007bd4:	bd70      	pop	{r4, r5, r6, pc}
 8007bd6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007bda:	da0d      	bge.n	8007bf8 <scalbn+0xb8>
 8007bdc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007be0:	429e      	cmp	r6, r3
 8007be2:	ec45 4b11 	vmov	d1, r4, r5
 8007be6:	dce1      	bgt.n	8007bac <scalbn+0x6c>
 8007be8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007c10 <scalbn+0xd0>
 8007bec:	f000 f81e 	bl	8007c2c <copysign>
 8007bf0:	a307      	add	r3, pc, #28	; (adr r3, 8007c10 <scalbn+0xd0>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	e7e0      	b.n	8007bba <scalbn+0x7a>
 8007bf8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007bfc:	3236      	adds	r2, #54	; 0x36
 8007bfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c06:	4620      	mov	r0, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <scalbn+0xe8>)
 8007c0e:	e7b2      	b.n	8007b76 <scalbn+0x36>
 8007c10:	c2f8f359 	.word	0xc2f8f359
 8007c14:	01a56e1f 	.word	0x01a56e1f
 8007c18:	8800759c 	.word	0x8800759c
 8007c1c:	7e37e43c 	.word	0x7e37e43c
 8007c20:	43500000 	.word	0x43500000
 8007c24:	ffff3cb0 	.word	0xffff3cb0
 8007c28:	3c900000 	.word	0x3c900000

08007c2c <copysign>:
 8007c2c:	ec51 0b10 	vmov	r0, r1, d0
 8007c30:	ee11 0a90 	vmov	r0, s3
 8007c34:	ee10 2a10 	vmov	r2, s0
 8007c38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007c3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007c40:	ea41 0300 	orr.w	r3, r1, r0
 8007c44:	ec43 2b10 	vmov	d0, r2, r3
 8007c48:	4770      	bx	lr
	...

08007c4c <_init>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	bf00      	nop
 8007c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c52:	bc08      	pop	{r3}
 8007c54:	469e      	mov	lr, r3
 8007c56:	4770      	bx	lr

08007c58 <_fini>:
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	bf00      	nop
 8007c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5e:	bc08      	pop	{r3}
 8007c60:	469e      	mov	lr, r3
 8007c62:	4770      	bx	lr
