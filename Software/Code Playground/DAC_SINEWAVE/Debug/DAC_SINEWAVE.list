
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005660  08005660  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005668  08005668  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d94  20000074  080056e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e08  080056e4  00022e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e29  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027ef  00000000  00000000  00032ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee0  00000000  00000000  000356c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  000365a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000232b2  00000000  00000000  00037358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c65d  00000000  00000000  0005a60a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d27dc  00000000  00000000  00066c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004130  00000000  00000000  001394c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004fcc 	.word	0x08004fcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08004fcc 	.word	0x08004fcc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 80005c4:	2201      	movs	r2, #1
 80005c6:	4909      	ldr	r1, [pc, #36]	; (80005ec <init_AX25+0x2c>)
 80005c8:	4809      	ldr	r0, [pc, #36]	; (80005f0 <init_AX25+0x30>)
 80005ca:	f003 fa75 	bl	8003ab8 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <init_AX25+0x34>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <init_AX25+0x34>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <init_AX25+0x34>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <init_AX25+0x34>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20001438 	.word	0x20001438
 80005f0:	20002b80 	.word	0x20002b80
 80005f4:	2000142c 	.word	0x2000142c

080005f8 <UART2_EXCEPTION_CALLBACK>:
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}

//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 80005fc:	2201      	movs	r2, #1
 80005fe:	491d      	ldr	r1, [pc, #116]	; (8000674 <UART2_EXCEPTION_CALLBACK+0x7c>)
 8000600:	481d      	ldr	r0, [pc, #116]	; (8000678 <UART2_EXCEPTION_CALLBACK+0x80>)
 8000602:	f003 fa59 	bl	8003ab8 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 800060e:	7b1b      	ldrb	r3, [r3, #12]
 8000610:	2bc0      	cmp	r3, #192	; 0xc0
 8000612:	d104      	bne.n	800061e <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	3301      	adds	r3, #1
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 800061c:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <UART2_EXCEPTION_CALLBACK+0x88>)
 8000626:	4413      	add	r3, r2
 8000628:	4a14      	ldr	r2, [pc, #80]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 800062a:	7b12      	ldrb	r2, [r2, #12]
 800062c:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	4a11      	ldr	r2, [pc, #68]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000636:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	2b01      	cmp	r3, #1
 800063e:	dd16      	ble.n	800066e <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <UART2_EXCEPTION_CALLBACK+0x8c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f083 0301 	eor.w	r3, r3, #1
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <UART2_EXCEPTION_CALLBACK+0x90>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 800065c:	2201      	movs	r2, #1
 800065e:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000666:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <UART2_EXCEPTION_CALLBACK+0x84>)
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]

	  }
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20001438 	.word	0x20001438
 8000678:	20002b80 	.word	0x20002b80
 800067c:	2000142c 	.word	0x2000142c
 8000680:	2000143a 	.word	0x2000143a
 8000684:	20002b28 	.word	0x20002b28
 8000688:	20000095 	.word	0x20000095

0800068c <slide_bits>:
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		receiving_AX25();
	}
}

void slide_bits(bool* array,int bits_left){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	memmove(array,array+1,bits_left*bool_size);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3301      	adds	r3, #1
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f004 f891 	bl	80047c6 <memmove>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <remove_bit_stuffing>:

void remove_bit_stuffing(){
 80006ac:	b5b0      	push	{r4, r5, r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <remove_bit_stuffing+0xa8>)
 80006b4:	607b      	str	r3, [r7, #4]
//	sprintf(uartData, "Removing bit stuffed zeros\n");
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	int ones_count = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
	bool curr;
	for(int i = 0;i < rxBit_count;i++){
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	e040      	b.n	8000742 <remove_bit_stuffing+0x96>
		curr = local_packet->AX25_PACKET[i]; //iterate through all data received before seperating into subfields
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	4413      	add	r3, r2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	70fb      	strb	r3, [r7, #3]
		if(curr){ //current bit is a 1
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d003      	beq.n	80006d8 <remove_bit_stuffing+0x2c>
			ones_count++;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3301      	adds	r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e031      	b.n	800073c <remove_bit_stuffing+0x90>
		}
		else{
			if(ones_count >= 5){
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b04      	cmp	r3, #4
 80006dc:	dd2c      	ble.n	8000738 <remove_bit_stuffing+0x8c>
				slide_bits(&local_packet->AX25_PACKET[i],rxBit_count-i);
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	18d0      	adds	r0, r2, r3
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <remove_bit_stuffing+0xac>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	4619      	mov	r1, r3
 80006ee:	f7ff ffcd 	bl	800068c <slide_bits>
				i--;
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
				rxBit_count--;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <remove_bit_stuffing+0xac>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	4a16      	ldr	r2, [pc, #88]	; (8000758 <remove_bit_stuffing+0xac>)
 8000700:	6013      	str	r3, [r2, #0]
				sprintf(uartData, "REMOVED BIT STUFFED ZERO!\n");
 8000702:	4a16      	ldr	r2, [pc, #88]	; (800075c <remove_bit_stuffing+0xb0>)
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <remove_bit_stuffing+0xb4>)
 8000706:	4615      	mov	r5, r2
 8000708:	461c      	mov	r4, r3
 800070a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070c:	6028      	str	r0, [r5, #0]
 800070e:	6069      	str	r1, [r5, #4]
 8000710:	60aa      	str	r2, [r5, #8]
 8000712:	60eb      	str	r3, [r5, #12]
 8000714:	cc03      	ldmia	r4!, {r0, r1}
 8000716:	6128      	str	r0, [r5, #16]
 8000718:	6169      	str	r1, [r5, #20]
 800071a:	8823      	ldrh	r3, [r4, #0]
 800071c:	78a2      	ldrb	r2, [r4, #2]
 800071e:	832b      	strh	r3, [r5, #24]
 8000720:	4613      	mov	r3, r2
 8000722:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <remove_bit_stuffing+0xb0>)
 8000726:	f7ff fd73 	bl	8000210 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	230a      	movs	r3, #10
 8000730:	490a      	ldr	r1, [pc, #40]	; (800075c <remove_bit_stuffing+0xb0>)
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <remove_bit_stuffing+0xb8>)
 8000734:	f003 f927 	bl	8003986 <HAL_UART_Transmit>
			}
			ones_count = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
	for(int i = 0;i < rxBit_count;i++){
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	3301      	adds	r3, #1
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <remove_bit_stuffing+0xac>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	429a      	cmp	r2, r3
 800074a:	dbb9      	blt.n	80006c0 <remove_bit_stuffing+0x14>
		}
	}
	//transmit kiss
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bdb0      	pop	{r4, r5, r7, pc}
 8000754:	200000c0 	.word	0x200000c0
 8000758:	20000090 	.word	0x20000090
 800075c:	20001cc4 	.word	0x20001cc4
 8000760:	080051b0 	.word	0x080051b0
 8000764:	20002b80 	.word	0x20002b80

08000768 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 8000772:	f000 f999 	bl	8000aa8 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <initProgram+0x58>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	7013      	strb	r3, [r2, #0]
	toggleMode();
 800077c:	f000 f826 	bl	80007cc <toggleMode>
	toggleMode();
 8000780:	f000 f824 	bl	80007cc <toggleMode>

	if (mode) {
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <initProgram+0x58>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d009      	beq.n	80007a0 <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <initProgram+0x5c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2264      	movs	r2, #100	; 0x64
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <initProgram+0x60>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f44f 724f 	mov.w	r2, #828	; 0x33c
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
 800079e:	e008      	b.n	80007b2 <initProgram+0x4a>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <initProgram+0x5c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <initProgram+0x60>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2268      	movs	r2, #104	; 0x68
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 80007b2:	f7ff ff05 	bl	80005c0 <init_AX25>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20002b28 	.word	0x20002b28
 80007c4:	20002b40 	.word	0x20002b40
 80007c8:	20002888 	.word	0x20002888

080007cc <toggleMode>:



void toggleMode() {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80007d0:	2006      	movs	r0, #6
 80007d2:	f001 f91e 	bl	8001a12 <HAL_NVIC_DisableIRQ>

	//Toggle mode
	mode = !mode;
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <toggleMode+0xa8>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	bf14      	ite	ne
 80007de:	2301      	movne	r3, #1
 80007e0:	2300      	moveq	r3, #0
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	f083 0301 	eor.w	r3, r3, #1
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <toggleMode+0xa8>)
 80007f2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <toggleMode+0xa8>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	2120      	movs	r1, #32
 80007fc:	481e      	ldr	r0, [pc, #120]	; (8000878 <toggleMode+0xac>)
 80007fe:	f001 fedf 	bl	80025c0 <HAL_GPIO_WritePin>
	midbit = false;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <toggleMode+0xb0>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 8000808:	481d      	ldr	r0, [pc, #116]	; (8000880 <toggleMode+0xb4>)
 800080a:	f002 fc6e 	bl	80030ea <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <toggleMode+0xb4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop(&htim4);
 8000816:	481b      	ldr	r0, [pc, #108]	; (8000884 <toggleMode+0xb8>)
 8000818:	f002 fc67 	bl	80030ea <HAL_TIM_Base_Stop>
	htim4.Instance->CNT = 0;
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <toggleMode+0xb8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <toggleMode+0xa8>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d005      	beq.n	8000838 <toggleMode+0x6c>
		//Set Timer periods
		//htim2.Instance->ARR = TIM2_AUTORELOAD_TX; This is no longer used
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <toggleMode+0xb4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
 8000836:	e015      	b.n	8000864 <toggleMode+0x98>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <toggleMode+0xbc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <toggleMode+0xb4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2268      	movs	r2, #104	; 0x68
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start(&htim4);
 800084a:	480e      	ldr	r0, [pc, #56]	; (8000884 <toggleMode+0xb8>)
 800084c:	f002 fc29 	bl	80030a2 <HAL_TIM_Base_Start>

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <toggleMode+0xb4>)
 8000852:	f002 fc75 	bl	8003140 <HAL_TIM_Base_Start_IT>

		//Stop DAC
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000856:	2100      	movs	r1, #0
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <toggleMode+0xc0>)
 800085a:	f001 f916 	bl	8001a8a <HAL_DAC_Stop_DMA>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800085e:	2006      	movs	r0, #6
 8000860:	f001 f8c9 	bl	80019f6 <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086a:	4803      	ldr	r0, [pc, #12]	; (8000878 <toggleMode+0xac>)
 800086c:	f001 fea8 	bl	80025c0 <HAL_GPIO_WritePin>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20002b28 	.word	0x20002b28
 8000878:	40020000 	.word	0x40020000
 800087c:	20000094 	.word	0x20000094
 8000880:	20002888 	.word	0x20002888
 8000884:	20002dc0 	.word	0x20002dc0
 8000888:	20002b40 	.word	0x20002b40
 800088c:	20002b2c 	.word	0x20002b2c

08000890 <loadPeriodBuffer>:
bool bufffull = false;
void loadPeriodBuffer(int timerCnt) {
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	if(canWrite){
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <loadPeriodBuffer+0x64>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d01d      	beq.n	80008dc <loadPeriodBuffer+0x4c>
		periodBuffer[periodSaveCount] = timerCnt;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <loadPeriodBuffer+0x68>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a14      	ldr	r2, [pc, #80]	; (80008fc <loadPeriodBuffer+0x6c>)
 80008aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		periodSaveCount++;
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <loadPeriodBuffer+0x68>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <loadPeriodBuffer+0x68>)
 80008b8:	801a      	strh	r2, [r3, #0]
		if (periodSaveCount >= RX_BUFFERSIZE) {
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <loadPeriodBuffer+0x68>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	2b7f      	cmp	r3, #127	; 0x7f
 80008c0:	d902      	bls.n	80008c8 <loadPeriodBuffer+0x38>
			periodSaveCount = 0;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <loadPeriodBuffer+0x68>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	801a      	strh	r2, [r3, #0]
		}

		//Buffer is full
		if(periodSaveCount == periodReadCount){
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <loadPeriodBuffer+0x68>)
 80008ca:	881a      	ldrh	r2, [r3, #0]
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <loadPeriodBuffer+0x70>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d106      	bne.n	80008e2 <loadPeriodBuffer+0x52>
			canWrite = false;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <loadPeriodBuffer+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e002      	b.n	80008e2 <loadPeriodBuffer+0x52>
		}
	} else {
		bufffull = true;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <loadPeriodBuffer+0x74>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <loadPeriodBuffer+0x78>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	20000000 	.word	0x20000000
 80008f8:	200000aa 	.word	0x200000aa
 80008fc:	20002928 	.word	0x20002928
 8000900:	200000ac 	.word	0x200000ac
 8000904:	20000096 	.word	0x20000096
 8000908:	200000a8 	.word	0x200000a8

0800090c <Tim3IT>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void Tim3IT() {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	if (mode) {
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <Tim3IT+0x54>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d003      	beq.n	8000920 <Tim3IT+0x14>
		midbit = false;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <Tim3IT+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]

		else {
			signal_detect_decay--;
		}
	}
}
 800091e:	e01c      	b.n	800095a <Tim3IT+0x4e>
		if(signal_detect_decay <= 0){
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <Tim3IT+0x5c>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d112      	bne.n	800094e <Tim3IT+0x42>
			if(signal_valid){
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <Tim3IT+0x60>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d00a      	beq.n	8000946 <Tim3IT+0x3a>
				loadPeriodBuffer(-1);
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f7ff ffac 	bl	8000890 <loadPeriodBuffer>
				HAL_TIM_Base_Stop(&htim4);
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <Tim3IT+0x64>)
 800093a:	f002 fbd6 	bl	80030ea <HAL_TIM_Base_Stop>
				htim4.Instance->CNT = 0;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <Tim3IT+0x64>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
			signal_valid = false;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <Tim3IT+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
}
 800094c:	e005      	b.n	800095a <Tim3IT+0x4e>
			signal_detect_decay--;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <Tim3IT+0x5c>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	3b01      	subs	r3, #1
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <Tim3IT+0x5c>)
 8000958:	801a      	strh	r2, [r3, #0]
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20002b28 	.word	0x20002b28
 8000964:	20000094 	.word	0x20000094
 8000968:	200000ae 	.word	0x200000ae
 800096c:	200000b0 	.word	0x200000b0
 8000970:	20002dc0 	.word	0x20002dc0

08000974 <FreqCounterPinEXTI>:
int edges = 0;
int gotVal = 0;
int last_carrier_tone = 0;
int carrier_tone = 0;

void FreqCounterPinEXTI() {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
	//Measure time since last measurement
	gotVal = htim2.Instance->CNT;
 800097a:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <FreqCounterPinEXTI+0xc0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000980:	461a      	mov	r2, r3
 8000982:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <FreqCounterPinEXTI+0xc4>)
 8000984:	601a      	str	r2, [r3, #0]
	int freq = PCONVERT / (gotVal);
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <FreqCounterPinEXTI+0xc4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a2c      	ldr	r2, [pc, #176]	; (8000a3c <FreqCounterPinEXTI+0xc8>)
 800098c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000990:	607b      	str	r3, [r7, #4]
	loadPeriodBuffer(gotVal);
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <FreqCounterPinEXTI+0xc4>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff7a 	bl	8000890 <loadPeriodBuffer>

	last_carrier_tone = carrier_tone;
 800099c:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <FreqCounterPinEXTI+0xcc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a28      	ldr	r2, [pc, #160]	; (8000a44 <FreqCounterPinEXTI+0xd0>)
 80009a2:	6013      	str	r3, [r2, #0]

	//2200Hz detected
	if ( ((HIGHFREQ - FREQDEV) < freq) && (freq < (HIGHFREQ + FREQDEV)) ){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f240 726c 	movw	r2, #1900	; 0x76c
 80009aa:	4293      	cmp	r3, r2
 80009ac:	dd09      	ble.n	80009c2 <FreqCounterPinEXTI+0x4e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80009b4:	4293      	cmp	r3, r2
 80009b6:	dc04      	bgt.n	80009c2 <FreqCounterPinEXTI+0x4e>
		carrier_tone = HIGHFREQ;
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <FreqCounterPinEXTI+0xcc>)
 80009ba:	f640 0298 	movw	r2, #2200	; 0x898
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	e011      	b.n	80009e6 <FreqCounterPinEXTI+0x72>
	}
	//1200Hz detected
	else if ( ((LOWFREQ - FREQDEV) < freq) && (freq < (LOWFREQ + FREQDEV)) ){
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80009c8:	dd09      	ble.n	80009de <FreqCounterPinEXTI+0x6a>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f240 52db 	movw	r2, #1499	; 0x5db
 80009d0:	4293      	cmp	r3, r2
 80009d2:	dc04      	bgt.n	80009de <FreqCounterPinEXTI+0x6a>
		carrier_tone = LOWFREQ;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <FreqCounterPinEXTI+0xcc>)
 80009d6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	e003      	b.n	80009e6 <FreqCounterPinEXTI+0x72>
	}
	//Invalid freq
	else{
		carrier_tone = -1;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <FreqCounterPinEXTI+0xcc>)
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
 80009e4:	601a      	str	r2, [r3, #0]
//		sprintf(uartData, "bad frequency detected, frequency was %d\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}

	if(carrier_tone!=last_carrier_tone || carrier_tone == -1){
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <FreqCounterPinEXTI+0xcc>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <FreqCounterPinEXTI+0xd0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d104      	bne.n	80009fc <FreqCounterPinEXTI+0x88>
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <FreqCounterPinEXTI+0xcc>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fa:	d107      	bne.n	8000a0c <FreqCounterPinEXTI+0x98>
		edges = 0;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <FreqCounterPinEXTI+0xd4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
		htim4.Instance->CNT = 0;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <FreqCounterPinEXTI+0xd8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
 8000a0a:	e004      	b.n	8000a16 <FreqCounterPinEXTI+0xa2>
	} else {
		edges++;
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <FreqCounterPinEXTI+0xd4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <FreqCounterPinEXTI+0xd4>)
 8000a14:	6013      	str	r3, [r2, #0]
	}

	signal_valid = true;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <FreqCounterPinEXTI+0xdc>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
	signal_detect_decay = DECAY_TIME;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <FreqCounterPinEXTI+0xe0>)
 8000a1e:	2208      	movs	r2, #8
 8000a20:	801a      	strh	r2, [r3, #0]
	htim2.Instance->CNT = 0;
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <FreqCounterPinEXTI+0xc0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20002b40 	.word	0x20002b40
 8000a38:	2000009c 	.word	0x2000009c
 8000a3c:	00989680 	.word	0x00989680
 8000a40:	200000a4 	.word	0x200000a4
 8000a44:	200000a0 	.word	0x200000a0
 8000a48:	20000098 	.word	0x20000098
 8000a4c:	20002dc0 	.word	0x20002dc0
 8000a50:	200000b0 	.word	0x200000b0
 8000a54:	200000ae 	.word	0x200000ae

08000a58 <generateBitstream>:
	}

	HAL_TIM_Base_Stop(&htim3);
	return wave_start;
}
void generateBitstream() {
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <generateBitstream+0x4c>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <generateBitstream+0x4c>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <generateBitstream+0x4c>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <generateBitstream+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <generateBitstream+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <generateBitstream+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <generateBitstream+0x4c>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <generateBitstream+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <generateBitstream+0x4c>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <generateBitstream+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	725a      	strb	r2, [r3, #9]

}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	2000287c 	.word	0x2000287c

08000aa8 <initOUTData>:
void initOUTData() {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	//edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
	//edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
	generateBitstream();
 8000aac:	f7ff ffd4 	bl	8000a58 <generateBitstream>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <test_remove_bitstuffing>:
}
//****************************************************************************************************************

//Direct testing on subsystems
//****************************************************************************************************************
void test_remove_bitstuffing(bool *test_array,int size){
 8000ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000abe:	4b67      	ldr	r3, [pc, #412]	; (8000c5c <test_remove_bitstuffing+0x1a8>)
 8000ac0:	60fb      	str	r3, [r7, #12]
	bool *curr_mem = local_packet->AX25_PACKET;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
	memcpy(curr_mem,test_array,size);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	68b8      	ldr	r0, [r7, #8]
 8000ace:	f003 fe6f 	bl	80047b0 <memcpy>
	rxBit_count = size;
 8000ad2:	4a63      	ldr	r2, [pc, #396]	; (8000c60 <test_remove_bitstuffing+0x1ac>)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	6013      	str	r3, [r2, #0]

	sprintf(uartData, "\n Testing removal of bits, rxBit_count = %d\n",rxBit_count);
 8000ad8:	4b61      	ldr	r3, [pc, #388]	; (8000c60 <test_remove_bitstuffing+0x1ac>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4961      	ldr	r1, [pc, #388]	; (8000c64 <test_remove_bitstuffing+0x1b0>)
 8000ae0:	4861      	ldr	r0, [pc, #388]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000ae2:	f003 fe91 	bl	8004808 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ae6:	4860      	ldr	r0, [pc, #384]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000ae8:	f7ff fb92 	bl	8000210 <strlen>
 8000aec:	4603      	mov	r3, r0
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	230a      	movs	r3, #10
 8000af2:	495d      	ldr	r1, [pc, #372]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000af4:	485d      	ldr	r0, [pc, #372]	; (8000c6c <test_remove_bitstuffing+0x1b8>)
 8000af6:	f002 ff46 	bl	8003986 <HAL_UART_Transmit>

	sprintf(uartData, "\n AX.25 before bit stuff removal = \n");
 8000afa:	4b5b      	ldr	r3, [pc, #364]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000afc:	4a5c      	ldr	r2, [pc, #368]	; (8000c70 <test_remove_bitstuffing+0x1bc>)
 8000afe:	4614      	mov	r4, r2
 8000b00:	469c      	mov	ip, r3
 8000b02:	f104 0e20 	add.w	lr, r4, #32
 8000b06:	4665      	mov	r5, ip
 8000b08:	4626      	mov	r6, r4
 8000b0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b0c:	6028      	str	r0, [r5, #0]
 8000b0e:	6069      	str	r1, [r5, #4]
 8000b10:	60aa      	str	r2, [r5, #8]
 8000b12:	60eb      	str	r3, [r5, #12]
 8000b14:	3410      	adds	r4, #16
 8000b16:	f10c 0c10 	add.w	ip, ip, #16
 8000b1a:	4574      	cmp	r4, lr
 8000b1c:	d1f3      	bne.n	8000b06 <test_remove_bitstuffing+0x52>
 8000b1e:	4663      	mov	r3, ip
 8000b20:	4622      	mov	r2, r4
 8000b22:	6810      	ldr	r0, [r2, #0]
 8000b24:	6018      	str	r0, [r3, #0]
 8000b26:	7912      	ldrb	r2, [r2, #4]
 8000b28:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b2a:	484f      	ldr	r0, [pc, #316]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000b2c:	f7ff fb70 	bl	8000210 <strlen>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	230a      	movs	r3, #10
 8000b36:	494c      	ldr	r1, [pc, #304]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000b38:	484c      	ldr	r0, [pc, #304]	; (8000c6c <test_remove_bitstuffing+0x1b8>)
 8000b3a:	f002 ff24 	bl	8003986 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count; i++){
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	e015      	b.n	8000b70 <test_remove_bitstuffing+0xbc>
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4949      	ldr	r1, [pc, #292]	; (8000c74 <test_remove_bitstuffing+0x1c0>)
 8000b50:	4845      	ldr	r0, [pc, #276]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000b52:	f003 fe59 	bl	8004808 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b56:	4844      	ldr	r0, [pc, #272]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000b58:	f7ff fb5a 	bl	8000210 <strlen>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	230a      	movs	r3, #10
 8000b62:	4941      	ldr	r1, [pc, #260]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000b64:	4841      	ldr	r0, [pc, #260]	; (8000c6c <test_remove_bitstuffing+0x1b8>)
 8000b66:	f002 ff0e 	bl	8003986 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count; i++){
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <test_remove_bitstuffing+0x1ac>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	dbe4      	blt.n	8000b44 <test_remove_bitstuffing+0x90>
	}
	sprintf(uartData, "\n");
 8000b7a:	4a3b      	ldr	r2, [pc, #236]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000b7c:	4b3e      	ldr	r3, [pc, #248]	; (8000c78 <test_remove_bitstuffing+0x1c4>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b82:	4839      	ldr	r0, [pc, #228]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000b84:	f7ff fb44 	bl	8000210 <strlen>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	4936      	ldr	r1, [pc, #216]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000b90:	4836      	ldr	r0, [pc, #216]	; (8000c6c <test_remove_bitstuffing+0x1b8>)
 8000b92:	f002 fef8 	bl	8003986 <HAL_UART_Transmit>

	remove_bit_stuffing();
 8000b96:	f7ff fd89 	bl	80006ac <remove_bit_stuffing>

	sprintf(uartData, "\n AX.25 after bit stuff removal = \n");
 8000b9a:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000b9c:	4a37      	ldr	r2, [pc, #220]	; (8000c7c <test_remove_bitstuffing+0x1c8>)
 8000b9e:	4614      	mov	r4, r2
 8000ba0:	469c      	mov	ip, r3
 8000ba2:	f104 0e20 	add.w	lr, r4, #32
 8000ba6:	4665      	mov	r5, ip
 8000ba8:	4626      	mov	r6, r4
 8000baa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bac:	6028      	str	r0, [r5, #0]
 8000bae:	6069      	str	r1, [r5, #4]
 8000bb0:	60aa      	str	r2, [r5, #8]
 8000bb2:	60eb      	str	r3, [r5, #12]
 8000bb4:	3410      	adds	r4, #16
 8000bb6:	f10c 0c10 	add.w	ip, ip, #16
 8000bba:	4574      	cmp	r4, lr
 8000bbc:	d1f3      	bne.n	8000ba6 <test_remove_bitstuffing+0xf2>
 8000bbe:	4663      	mov	r3, ip
 8000bc0:	4622      	mov	r2, r4
 8000bc2:	6810      	ldr	r0, [r2, #0]
 8000bc4:	6018      	str	r0, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000bc6:	4828      	ldr	r0, [pc, #160]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000bc8:	f7ff fb22 	bl	8000210 <strlen>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	230a      	movs	r3, #10
 8000bd2:	4925      	ldr	r1, [pc, #148]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000bd4:	4825      	ldr	r0, [pc, #148]	; (8000c6c <test_remove_bitstuffing+0x1b8>)
 8000bd6:	f002 fed6 	bl	8003986 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count; i++){
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	e015      	b.n	8000c0c <test_remove_bitstuffing+0x158>
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	4413      	add	r3, r2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4922      	ldr	r1, [pc, #136]	; (8000c74 <test_remove_bitstuffing+0x1c0>)
 8000bec:	481e      	ldr	r0, [pc, #120]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000bee:	f003 fe0b 	bl	8004808 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000bf2:	481d      	ldr	r0, [pc, #116]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000bf4:	f7ff fb0c 	bl	8000210 <strlen>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	491a      	ldr	r1, [pc, #104]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000c00:	481a      	ldr	r0, [pc, #104]	; (8000c6c <test_remove_bitstuffing+0x1b8>)
 8000c02:	f002 fec0 	bl	8003986 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count; i++){
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <test_remove_bitstuffing+0x1ac>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dbe4      	blt.n	8000be0 <test_remove_bitstuffing+0x12c>
	}
	sprintf(uartData, "\n");
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <test_remove_bitstuffing+0x1c4>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c1e:	4812      	ldr	r0, [pc, #72]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000c20:	f7ff faf6 	bl	8000210 <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	230a      	movs	r3, #10
 8000c2a:	490f      	ldr	r1, [pc, #60]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000c2c:	480f      	ldr	r0, [pc, #60]	; (8000c6c <test_remove_bitstuffing+0x1b8>)
 8000c2e:	f002 feaa 	bl	8003986 <HAL_UART_Transmit>

	sprintf(uartData, "\n End of removal of bits, rxBit_count = %d\n",rxBit_count);
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <test_remove_bitstuffing+0x1ac>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	4911      	ldr	r1, [pc, #68]	; (8000c80 <test_remove_bitstuffing+0x1cc>)
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000c3c:	f003 fde4 	bl	8004808 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000c42:	f7ff fae5 	bl	8000210 <strlen>
 8000c46:	4603      	mov	r3, r0
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	230a      	movs	r3, #10
 8000c4c:	4906      	ldr	r1, [pc, #24]	; (8000c68 <test_remove_bitstuffing+0x1b4>)
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <test_remove_bitstuffing+0x1b8>)
 8000c50:	f002 fe99 	bl	8003986 <HAL_UART_Transmit>
}
 8000c54:	bf00      	nop
 8000c56:	371c      	adds	r7, #28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5c:	200000c0 	.word	0x200000c0
 8000c60:	20000090 	.word	0x20000090
 8000c64:	0800554c 	.word	0x0800554c
 8000c68:	20001cc4 	.word	0x20001cc4
 8000c6c:	20002b80 	.word	0x20002b80
 8000c70:	0800557c 	.word	0x0800557c
 8000c74:	08005420 	.word	0x08005420
 8000c78:	08005428 	.word	0x08005428
 8000c7c:	080055a4 	.word	0x080055a4
 8000c80:	080055c8 	.word	0x080055c8

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b5b0      	push	{r4, r5, r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8a:	f000 fd29 	bl	80016e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8e:	f000 f831 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c92:	f000 fa01 	bl	8001098 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c96:	f000 f9df 	bl	8001058 <MX_DMA_Init>
  MX_DAC_Init();
 8000c9a:	f000 f899 	bl	8000dd0 <MX_DAC_Init>
  MX_TIM2_Init();
 8000c9e:	f000 f8c1 	bl	8000e24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ca2:	f000 f90b 	bl	8000ebc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ca6:	f000 f9a5 	bl	8000ff4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000caa:	f000 f955 	bl	8000f58 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000cae:	480e      	ldr	r0, [pc, #56]	; (8000ce8 <main+0x64>)
 8000cb0:	f002 f9f7 	bl	80030a2 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <main+0x68>)
 8000cb6:	f002 fa43 	bl	8003140 <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 8000cba:	f000 facd 	bl	8001258 <uart_gpio_init>

	initProgram(false);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff fd52 	bl	8000768 <initProgram>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//testing bit stuffing
		bool test_array[] = {1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0};
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <main+0x6c>)
 8000cc6:	1d3c      	adds	r4, r7, #4
 8000cc8:	461d      	mov	r5, r3
 8000cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cd2:	e884 0003 	stmia.w	r4, {r0, r1}
		int len = sizeof(test_array)/sizeof(bool);
 8000cd6:	2318      	movs	r3, #24
 8000cd8:	61fb      	str	r3, [r7, #28]
		test_remove_bitstuffing(test_array,len);
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	69f9      	ldr	r1, [r7, #28]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fee8 	bl	8000ab4 <test_remove_bitstuffing>
	while (1) {
 8000ce4:	e7ee      	b.n	8000cc4 <main+0x40>
 8000ce6:	bf00      	nop
 8000ce8:	20002b40 	.word	0x20002b40
 8000cec:	20002888 	.word	0x20002888
 8000cf0:	080055f4 	.word	0x080055f4

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b094      	sub	sp, #80	; 0x50
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2234      	movs	r2, #52	; 0x34
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 fd78 	bl	80047f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <SystemClock_Config+0xd4>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <SystemClock_Config+0xd4>)
 8000d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d26:	6413      	str	r3, [r2, #64]	; 0x40
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <SystemClock_Config+0xd4>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d34:	2300      	movs	r3, #0
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <SystemClock_Config+0xd8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d40:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <SystemClock_Config+0xd8>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <SystemClock_Config+0xd8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000d6c:	235a      	movs	r3, #90	; 0x5a
 8000d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4618      	mov	r0, r3
 8000d82:	f001 ff09 	bl	8002b98 <HAL_RCC_OscConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d8c:	f000 fa8c 	bl	80012a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d90:	230f      	movs	r3, #15
 8000d92:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d94:	2302      	movs	r3, #2
 8000d96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	2102      	movs	r1, #2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fc38 	bl	8002624 <HAL_RCC_ClockConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000dba:	f000 fa75 	bl	80012a8 <Error_Handler>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3750      	adds	r7, #80	; 0x50
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40007000 	.word	0x40007000

08000dd0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_DAC_Init+0x4c>)
 8000de0:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <MX_DAC_Init+0x50>)
 8000de2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <MX_DAC_Init+0x4c>)
 8000de6:	f000 fe2e 	bl	8001a46 <HAL_DAC_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000df0:	f000 fa5a 	bl	80012a8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000df4:	2324      	movs	r3, #36	; 0x24
 8000df6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_DAC_Init+0x4c>)
 8000e04:	f000 fe82 	bl	8001b0c <HAL_DAC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e0e:	f000 fa4b 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20002b2c 	.word	0x20002b2c
 8000e20:	40007400 	.word	0x40007400

08000e24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e56:	2263      	movs	r2, #99	; 0x63
 8000e58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e66:	4814      	ldr	r0, [pc, #80]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e68:	f002 f8f0 	bl	800304c <HAL_TIM_Base_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000e72:	f000 fa19 	bl	80012a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	4619      	mov	r1, r3
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e84:	f002 fa88 	bl	8003398 <HAL_TIM_ConfigClockSource>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000e8e:	f000 fa0b 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e92:	2320      	movs	r3, #32
 8000e94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000ea0:	f002 fc94 	bl	80037cc <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000eaa:	f000 f9fd 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20002b40 	.word	0x20002b40

08000ebc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_TIM3_Init+0x94>)
 8000eda:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <MX_TIM3_Init+0x98>)
 8000edc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_TIM3_Init+0x94>)
 8000ee0:	2259      	movs	r2, #89	; 0x59
 8000ee2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_TIM3_Init+0x94>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_TIM3_Init+0x94>)
 8000eec:	f240 3241 	movw	r2, #833	; 0x341
 8000ef0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_TIM3_Init+0x94>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_TIM3_Init+0x94>)
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000efe:	4814      	ldr	r0, [pc, #80]	; (8000f50 <MX_TIM3_Init+0x94>)
 8000f00:	f002 f8a4 	bl	800304c <HAL_TIM_Base_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f0a:	f000 f9cd 	bl	80012a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_TIM3_Init+0x94>)
 8000f1c:	f002 fa3c 	bl	8003398 <HAL_TIM_ConfigClockSource>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f000 f9bf 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_TIM3_Init+0x94>)
 8000f38:	f002 fc48 	bl	80037cc <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f42:	f000 f9b1 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20002888 	.word	0x20002888
 8000f54:	40000400 	.word	0x40000400

08000f58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_TIM4_Init+0x94>)
 8000f76:	4a1e      	ldr	r2, [pc, #120]	; (8000ff0 <MX_TIM4_Init+0x98>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_TIM4_Init+0x94>)
 8000f7c:	2259      	movs	r2, #89	; 0x59
 8000f7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_TIM4_Init+0x94>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_TIM4_Init+0x94>)
 8000f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_TIM4_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_TIM4_Init+0x94>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f9a:	4814      	ldr	r0, [pc, #80]	; (8000fec <MX_TIM4_Init+0x94>)
 8000f9c:	f002 f856 	bl	800304c <HAL_TIM_Base_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000fa6:	f000 f97f 	bl	80012a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_TIM4_Init+0x94>)
 8000fb8:	f002 f9ee 	bl	8003398 <HAL_TIM_ConfigClockSource>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000fc2:	f000 f971 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_TIM4_Init+0x94>)
 8000fd4:	f002 fbfa 	bl	80037cc <HAL_TIMEx_MasterConfigSynchronization>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000fde:	f000 f963 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20002dc0 	.word	0x20002dc0
 8000ff0:	40000800 	.word	0x40000800

08000ff4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_USART2_UART_Init+0x5c>)
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <MX_USART2_UART_Init+0x60>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_USART2_UART_Init+0x5c>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_USART2_UART_Init+0x5c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_USART2_UART_Init+0x5c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_USART2_UART_Init+0x5c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <MX_USART2_UART_Init+0x5c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_USART2_UART_Init+0x5c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_USART2_UART_Init+0x5c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <MX_USART2_UART_Init+0x5c>)
 800102c:	f002 fc5e 	bl	80038ec <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001036:	f000 f937 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2026      	movs	r0, #38	; 0x26
 8001040:	f000 fcbd 	bl	80019be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001044:	2026      	movs	r0, #38	; 0x26
 8001046:	f000 fcd6 	bl	80019f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20002b80 	.word	0x20002b80
 8001054:	40004400 	.word	0x40004400

08001058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_DMA_Init+0x3c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <MX_DMA_Init+0x3c>)
 8001068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_DMA_Init+0x3c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2010      	movs	r0, #16
 8001080:	f000 fc9d 	bl	80019be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001084:	2010      	movs	r0, #16
 8001086:	f000 fcb6 	bl	80019f6 <HAL_NVIC_EnableIRQ>

}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800

08001098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <MX_GPIO_Init+0x130>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a44      	ldr	r2, [pc, #272]	; (80011c8 <MX_GPIO_Init+0x130>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <MX_GPIO_Init+0x130>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <MX_GPIO_Init+0x130>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a3d      	ldr	r2, [pc, #244]	; (80011c8 <MX_GPIO_Init+0x130>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <MX_GPIO_Init+0x130>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <MX_GPIO_Init+0x130>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a36      	ldr	r2, [pc, #216]	; (80011c8 <MX_GPIO_Init+0x130>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <MX_GPIO_Init+0x130>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <MX_GPIO_Init+0x130>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <MX_GPIO_Init+0x130>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <MX_GPIO_Init+0x130>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001124:	4829      	ldr	r0, [pc, #164]	; (80011cc <MX_GPIO_Init+0x134>)
 8001126:	f001 fa4b 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2110      	movs	r1, #16
 800112e:	4828      	ldr	r0, [pc, #160]	; (80011d0 <MX_GPIO_Init+0x138>)
 8001130:	f001 fa46 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <MX_GPIO_Init+0x13c>)
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4821      	ldr	r0, [pc, #132]	; (80011d0 <MX_GPIO_Init+0x138>)
 800114a:	f001 f8a7 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800114e:	2301      	movs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <MX_GPIO_Init+0x140>)
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	481a      	ldr	r0, [pc, #104]	; (80011cc <MX_GPIO_Init+0x134>)
 8001162:	f001 f89b 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001166:	f44f 7348 	mov.w	r3, #800	; 0x320
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4813      	ldr	r0, [pc, #76]	; (80011cc <MX_GPIO_Init+0x134>)
 8001180:	f001 f88c 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8001184:	2310      	movs	r3, #16
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_GPIO_Init+0x138>)
 800119c:	f001 f87e 	bl	800229c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2006      	movs	r0, #6
 80011a6:	f000 fc0a 	bl	80019be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011aa:	2006      	movs	r0, #6
 80011ac:	f000 fc23 	bl	80019f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2028      	movs	r0, #40	; 0x28
 80011b6:	f000 fc02 	bl	80019be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ba:	2028      	movs	r0, #40	; 0x28
 80011bc:	f000 fc1b 	bl	80019f6 <HAL_NVIC_EnableIRQ>

}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	; 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020800 	.word	0x40020800
 80011d4:	10210000 	.word	0x10210000
 80011d8:	10110000 	.word	0x10110000

080011dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d102      	bne.n	80011f2 <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 80011ec:	f7ff fb8e 	bl	800090c <Tim3IT>
	else
		__NOP();
}
 80011f0:	e000      	b.n	80011f4 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 80011f2:	bf00      	nop
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20002888 	.word	0x20002888

08001200 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 8001210:	f7ff fbb0 	bl	8000974 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800121a:	d103      	bne.n	8001224 <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <HAL_GPIO_EXTI_Callback+0x30>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 8001222:	e000      	b.n	8001226 <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 8001224:	bf00      	nop
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000095 	.word	0x20000095

08001234 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_UART_RxCpltCallback+0x20>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 8001246:	f7ff f9d7 	bl	80005f8 <UART2_EXCEPTION_CALLBACK>
  }
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40004400 	.word	0x40004400

08001258 <uart_gpio_init>:

void uart_gpio_init()
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <uart_gpio_init+0x48>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <uart_gpio_init+0x48>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <uart_gpio_init+0x48>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800127a:	230c      	movs	r3, #12
 800127c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001282:	2301      	movs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800128a:	2307      	movs	r3, #7
 800128c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <uart_gpio_init+0x4c>)
 8001294:	f001 f802 	bl	800229c <HAL_GPIO_Init>
}
 8001298:	bf00      	nop
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_MspInit+0x4c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x4c>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012f6:	2007      	movs	r0, #7
 80012f8:	f000 fb56 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2f      	ldr	r2, [pc, #188]	; (80013e4 <HAL_DAC_MspInit+0xdc>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d158      	bne.n	80013dc <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <HAL_DAC_MspInit+0xe0>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a2d      	ldr	r2, [pc, #180]	; (80013e8 <HAL_DAC_MspInit+0xe0>)
 8001334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_DAC_MspInit+0xe0>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_DAC_MspInit+0xe0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <HAL_DAC_MspInit+0xe0>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_DAC_MspInit+0xe0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001362:	2310      	movs	r3, #16
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001366:	2303      	movs	r3, #3
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	481d      	ldr	r0, [pc, #116]	; (80013ec <HAL_DAC_MspInit+0xe4>)
 8001376:	f000 ff91 	bl	800229c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <HAL_DAC_MspInit+0xec>)
 800137e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 8001382:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001386:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 8001396:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800139a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 800139e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 80013a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013aa:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 80013ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 80013c2:	f000 fbf1 	bl	8001ba8 <HAL_DMA_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80013cc:	f7ff ff6c 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_DAC_MspInit+0xe8>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40007400 	.word	0x40007400
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	200028c8 	.word	0x200028c8
 80013f4:	40026088 	.word	0x40026088

080013f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001408:	d10e      	bne.n	8001428 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <HAL_TIM_Base_MspInit+0x98>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a1f      	ldr	r2, [pc, #124]	; (8001490 <HAL_TIM_Base_MspInit+0x98>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_TIM_Base_MspInit+0x98>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001426:	e02e      	b.n	8001486 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a19      	ldr	r2, [pc, #100]	; (8001494 <HAL_TIM_Base_MspInit+0x9c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d116      	bne.n	8001460 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <HAL_TIM_Base_MspInit+0x98>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <HAL_TIM_Base_MspInit+0x98>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <HAL_TIM_Base_MspInit+0x98>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	201d      	movs	r0, #29
 8001454:	f000 fab3 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001458:	201d      	movs	r0, #29
 800145a:	f000 facc 	bl	80019f6 <HAL_NVIC_EnableIRQ>
}
 800145e:	e012      	b.n	8001486 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <HAL_TIM_Base_MspInit+0xa0>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d10d      	bne.n	8001486 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_TIM_Base_MspInit+0x98>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_TIM_Base_MspInit+0x98>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_TIM_Base_MspInit+0x98>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40000400 	.word	0x40000400
 8001498:	40000800 	.word	0x40000800

0800149c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <HAL_UART_MspInit+0x94>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d133      	bne.n	8001526 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <HAL_UART_MspInit+0x98>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <HAL_UART_MspInit+0x98>)
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_UART_MspInit+0x98>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_UART_MspInit+0x98>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a14      	ldr	r2, [pc, #80]	; (8001534 <HAL_UART_MspInit+0x98>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_UART_MspInit+0x98>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014f6:	230c      	movs	r3, #12
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001506:	2307      	movs	r3, #7
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <HAL_UART_MspInit+0x9c>)
 8001512:	f000 fec3 	bl	800229c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2026      	movs	r0, #38	; 0x26
 800151c:	f000 fa4f 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001520:	2026      	movs	r0, #38	; 0x26
 8001522:	f000 fa68 	bl	80019f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40004400 	.word	0x40004400
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 f8f8 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800159c:	2001      	movs	r0, #1
 800159e:	f001 f829 	bl	80025f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <DMA1_Stream5_IRQHandler+0x10>)
 80015ae:	f000 fc3b 	bl	8001e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200028c8 	.word	0x200028c8

080015bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <TIM3_IRQHandler+0x10>)
 80015c2:	f001 fde1 	bl	8003188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20002888 	.word	0x20002888

080015d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <USART2_IRQHandler+0x10>)
 80015d6:	f002 fac5 	bl	8003b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20002b80 	.word	0x20002b80

080015e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015ec:	f001 f802 	bl	80025f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f003 f89a 	bl	800475c <__errno>
 8001628:	4602      	mov	r2, r0
 800162a:	230c      	movs	r3, #12
 800162c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20020000 	.word	0x20020000
 8001654:	00000400 	.word	0x00000400
 8001658:	200000b4 	.word	0x200000b4
 800165c:	20002e08 	.word	0x20002e08

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <SystemInit+0x28>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a07      	ldr	r2, [pc, #28]	; (8001688 <SystemInit+0x28>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <SystemInit+0x28>)
 8001676:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800167a:	609a      	str	r2, [r3, #8]
#endif
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001690:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001692:	e003      	b.n	800169c <LoopCopyDataInit>

08001694 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001696:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001698:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800169a:	3104      	adds	r1, #4

0800169c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800169c:	480b      	ldr	r0, [pc, #44]	; (80016cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016a4:	d3f6      	bcc.n	8001694 <CopyDataInit>
  ldr  r2, =_sbss
 80016a6:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016a8:	e002      	b.n	80016b0 <LoopFillZerobss>

080016aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016ac:	f842 3b04 	str.w	r3, [r2], #4

080016b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016b4:	d3f9      	bcc.n	80016aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016b6:	f7ff ffd3 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ba:	f003 f855 	bl	8004768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016be:	f7ff fae1 	bl	8000c84 <main>
  bx  lr    
 80016c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016c8:	08005670 	.word	0x08005670
  ldr  r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016d0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80016d4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80016d8:	20002e08 	.word	0x20002e08

080016dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_Init+0x40>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_Init+0x40>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x40>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f94d 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fdd0 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f973 	bl	8001a2e <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f000 f92d 	bl	80019be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000004 	.word	0x20000004
 800177c:	2000000c 	.word	0x2000000c
 8001780:	20000008 	.word	0x20000008

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	20002e00 	.word	0x20002e00

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20002e00 	.word	0x20002e00

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	; (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db10      	blt.n	8001898 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	4909      	ldr	r1, [pc, #36]	; (80018a4 <__NVIC_DisableIRQ+0x40>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	3320      	adds	r3, #32
 800188c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001894:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	; (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	; (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
         );
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff8e 	bl	80018a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff07 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff1c 	bl	800180c <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff8e 	bl	80018fc <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5d 	bl	80018a8 <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff0f 	bl	8001828 <__NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff1f 	bl	8001864 <__NVIC_DisableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ff94 	bl	8001964 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e014      	b.n	8001a82 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	791b      	ldrb	r3, [r3, #4]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fc4d 	bl	8001308 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6819      	ldr	r1, [r3, #0]
 8001a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43da      	mvns	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	400a      	ands	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6819      	ldr	r1, [r3, #0]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43da      	mvns	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d107      	bne.n	8001ae0 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 f915 	bl	8001d04 <HAL_DMA_Abort>
 8001ada:	4603      	mov	r3, r0
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e006      	b.n	8001aee <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 f90d 	bl	8001d04 <HAL_DMA_Abort>
 8001aea:	4603      	mov	r3, r0
 8001aec:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2204      	movs	r2, #4
 8001af8:	711a      	strb	r2, [r3, #4]
 8001afa:	e002      	b.n	8001b02 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	795b      	ldrb	r3, [r3, #5]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_DAC_ConfigChannel+0x20>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e036      	b.n	8001b9a <HAL_DAC_ConfigChannel+0x8e>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2202      	movs	r2, #2
 8001b36:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001b40:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	22c0      	movs	r2, #192	; 0xc0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	400a      	ands	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff fdfa 	bl	80017ac <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e099      	b.n	8001cf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be4:	e00f      	b.n	8001c06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be6:	f7ff fde1 	bl	80017ac <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d908      	bls.n	8001c06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e078      	b.n	8001cf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e8      	bne.n	8001be6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_DMA_Init+0x158>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d107      	bne.n	8001c70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f023 0307 	bic.w	r3, r3, #7
 8001c86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d117      	bne.n	8001cca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00e      	beq.n	8001cca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fa7b 	bl	80021a8 <DMA_CheckFifoParam>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e016      	b.n	8001cf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa32 	bl	800213c <DMA_CalcBaseAndBitshift>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	223f      	movs	r2, #63	; 0x3f
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	f010803f 	.word	0xf010803f

08001d04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d12:	f7ff fd4b 	bl	80017ac <HAL_GetTick>
 8001d16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d008      	beq.n	8001d36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e052      	b.n	8001ddc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0216 	bic.w	r2, r2, #22
 8001d44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <HAL_DMA_Abort+0x62>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d007      	beq.n	8001d76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0208 	bic.w	r2, r2, #8
 8001d74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d86:	e013      	b.n	8001db0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d88:	f7ff fd10 	bl	80017ac <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	d90c      	bls.n	8001db0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2203      	movs	r2, #3
 8001da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e015      	b.n	8001ddc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1e4      	bne.n	8001d88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	223f      	movs	r2, #63	; 0x3f
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d004      	beq.n	8001e02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00c      	b.n	8001e1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2205      	movs	r2, #5
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e34:	4b92      	ldr	r3, [pc, #584]	; (8002080 <HAL_DMA_IRQHandler+0x258>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a92      	ldr	r2, [pc, #584]	; (8002084 <HAL_DMA_IRQHandler+0x25c>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0a9b      	lsrs	r3, r3, #10
 8001e40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	2208      	movs	r2, #8
 8001e54:	409a      	lsls	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d01a      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0204 	bic.w	r2, r2, #4
 8001e7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	2208      	movs	r2, #8
 8001e82:	409a      	lsls	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	f043 0201 	orr.w	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	2201      	movs	r2, #1
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d012      	beq.n	8001eca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec2:	f043 0202 	orr.w	r2, r3, #2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	2204      	movs	r2, #4
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d012      	beq.n	8001f00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00b      	beq.n	8001f00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	2204      	movs	r2, #4
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef8:	f043 0204 	orr.w	r2, r3, #4
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	2210      	movs	r2, #16
 8001f06:	409a      	lsls	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d043      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d03c      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	2210      	movs	r2, #16
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d018      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d108      	bne.n	8001f58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d024      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
 8001f56:	e01f      	b.n	8001f98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01b      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
 8001f68:	e016      	b.n	8001f98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d107      	bne.n	8001f88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0208 	bic.w	r2, r2, #8
 8001f86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 808e 	beq.w	80020c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8086 	beq.w	80020c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d136      	bne.n	8002040 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0216 	bic.w	r2, r2, #22
 8001fe0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d103      	bne.n	8002002 <HAL_DMA_IRQHandler+0x1da>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0208 	bic.w	r2, r2, #8
 8002010:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	223f      	movs	r2, #63	; 0x3f
 8002018:	409a      	lsls	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002032:	2b00      	cmp	r3, #0
 8002034:	d07d      	beq.n	8002132 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	4798      	blx	r3
        }
        return;
 800203e:	e078      	b.n	8002132 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01c      	beq.n	8002088 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d108      	bne.n	800206e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	2b00      	cmp	r3, #0
 8002062:	d030      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
 800206c:	e02b      	b.n	80020c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d027      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
 800207e:	e022      	b.n	80020c6 <HAL_DMA_IRQHandler+0x29e>
 8002080:	20000004 	.word	0x20000004
 8002084:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10f      	bne.n	80020b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0210 	bic.w	r2, r2, #16
 80020a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d032      	beq.n	8002134 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d022      	beq.n	8002120 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2205      	movs	r2, #5
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3301      	adds	r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d307      	bcc.n	800210e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f2      	bne.n	80020f2 <HAL_DMA_IRQHandler+0x2ca>
 800210c:	e000      	b.n	8002110 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800210e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
 8002130:	e000      	b.n	8002134 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002132:	bf00      	nop
    }
  }
}
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop

0800213c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	3b10      	subs	r3, #16
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <DMA_CalcBaseAndBitshift+0x64>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002156:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d909      	bls.n	800217e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	1d1a      	adds	r2, r3, #4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	659a      	str	r2, [r3, #88]	; 0x58
 800217c:	e007      	b.n	800218e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	aaaaaaab 	.word	0xaaaaaaab
 80021a4:	08005624 	.word	0x08005624

080021a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d11f      	bne.n	8002202 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d855      	bhi.n	8002274 <DMA_CheckFifoParam+0xcc>
 80021c8:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <DMA_CheckFifoParam+0x28>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021f3 	.word	0x080021f3
 80021d8:	080021e1 	.word	0x080021e1
 80021dc:	08002275 	.word	0x08002275
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d045      	beq.n	8002278 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f0:	e042      	b.n	8002278 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021fa:	d13f      	bne.n	800227c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002200:	e03c      	b.n	800227c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800220a:	d121      	bne.n	8002250 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d836      	bhi.n	8002280 <DMA_CheckFifoParam+0xd8>
 8002212:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <DMA_CheckFifoParam+0x70>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	08002229 	.word	0x08002229
 800221c:	0800222f 	.word	0x0800222f
 8002220:	08002229 	.word	0x08002229
 8002224:	08002241 	.word	0x08002241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      break;
 800222c:	e02f      	b.n	800228e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d024      	beq.n	8002284 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223e:	e021      	b.n	8002284 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002248:	d11e      	bne.n	8002288 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800224e:	e01b      	b.n	8002288 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d902      	bls.n	800225c <DMA_CheckFifoParam+0xb4>
 8002256:	2b03      	cmp	r3, #3
 8002258:	d003      	beq.n	8002262 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800225a:	e018      	b.n	800228e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
      break;
 8002260:	e015      	b.n	800228e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00e      	beq.n	800228c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
      break;
 8002272:	e00b      	b.n	800228c <DMA_CheckFifoParam+0xe4>
      break;
 8002274:	bf00      	nop
 8002276:	e00a      	b.n	800228e <DMA_CheckFifoParam+0xe6>
      break;
 8002278:	bf00      	nop
 800227a:	e008      	b.n	800228e <DMA_CheckFifoParam+0xe6>
      break;
 800227c:	bf00      	nop
 800227e:	e006      	b.n	800228e <DMA_CheckFifoParam+0xe6>
      break;
 8002280:	bf00      	nop
 8002282:	e004      	b.n	800228e <DMA_CheckFifoParam+0xe6>
      break;
 8002284:	bf00      	nop
 8002286:	e002      	b.n	800228e <DMA_CheckFifoParam+0xe6>
      break;   
 8002288:	bf00      	nop
 800228a:	e000      	b.n	800228e <DMA_CheckFifoParam+0xe6>
      break;
 800228c:	bf00      	nop
    }
  } 
  
  return status; 
 800228e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e165      	b.n	8002584 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 8154 	bne.w	800257e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d00b      	beq.n	80022f6 <HAL_GPIO_Init+0x5a>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d007      	beq.n	80022f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ea:	2b11      	cmp	r3, #17
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b12      	cmp	r3, #18
 80022f4:	d130      	bne.n	8002358 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 0201 	and.w	r2, r3, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0xfc>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b12      	cmp	r3, #18
 8002396:	d123      	bne.n	80023e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80ae 	beq.w	800257e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <HAL_GPIO_Init+0x2fc>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a5b      	ldr	r2, [pc, #364]	; (8002598 <HAL_GPIO_Init+0x2fc>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_GPIO_Init+0x2fc>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a57      	ldr	r2, [pc, #348]	; (800259c <HAL_GPIO_Init+0x300>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4e      	ldr	r2, [pc, #312]	; (80025a0 <HAL_GPIO_Init+0x304>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d025      	beq.n	80024b6 <HAL_GPIO_Init+0x21a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <HAL_GPIO_Init+0x308>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01f      	beq.n	80024b2 <HAL_GPIO_Init+0x216>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4c      	ldr	r2, [pc, #304]	; (80025a8 <HAL_GPIO_Init+0x30c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x212>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4b      	ldr	r2, [pc, #300]	; (80025ac <HAL_GPIO_Init+0x310>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x20e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4a      	ldr	r2, [pc, #296]	; (80025b0 <HAL_GPIO_Init+0x314>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x20a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a49      	ldr	r2, [pc, #292]	; (80025b4 <HAL_GPIO_Init+0x318>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x206>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <HAL_GPIO_Init+0x31c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x202>
 800249a:	2306      	movs	r3, #6
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 800249e:	2307      	movs	r3, #7
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x21c>
 80024b6:	2300      	movs	r3, #0
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c8:	4934      	ldr	r1, [pc, #208]	; (800259c <HAL_GPIO_Init+0x300>)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <HAL_GPIO_Init+0x320>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024fa:	4a30      	ldr	r2, [pc, #192]	; (80025bc <HAL_GPIO_Init+0x320>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002500:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <HAL_GPIO_Init+0x320>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002524:	4a25      	ldr	r2, [pc, #148]	; (80025bc <HAL_GPIO_Init+0x320>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800252a:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_GPIO_Init+0x320>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254e:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <HAL_GPIO_Init+0x320>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_GPIO_Init+0x320>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002578:	4a10      	ldr	r2, [pc, #64]	; (80025bc <HAL_GPIO_Init+0x320>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	f67f ae96 	bls.w	80022b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800258c:	bf00      	nop
 800258e:	3724      	adds	r7, #36	; 0x24
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	40023800 	.word	0x40023800
 800259c:	40013800 	.word	0x40013800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40021400 	.word	0x40021400
 80025b8:	40021800 	.word	0x40021800
 80025bc:	40013c00 	.word	0x40013c00

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025dc:	e003      	b.n	80025e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	041a      	lsls	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	619a      	str	r2, [r3, #24]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fdf4 	bl	8001200 <HAL_GPIO_EXTI_Callback>
  }
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40013c00 	.word	0x40013c00

08002624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0cc      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002638:	4b68      	ldr	r3, [pc, #416]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d90c      	bls.n	8002660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b65      	ldr	r3, [pc, #404]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0b8      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002678:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002682:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800269a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	494d      	ldr	r1, [pc, #308]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d044      	beq.n	8002744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d119      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e07f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d003      	beq.n	80026e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e2:	4b3f      	ldr	r3, [pc, #252]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e06f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f2:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e067      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002702:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f023 0203 	bic.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4934      	ldr	r1, [pc, #208]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	4313      	orrs	r3, r2
 8002712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002714:	f7ff f84a 	bl	80017ac <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	e00a      	b.n	8002732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7ff f846 	bl	80017ac <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e04f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 020c 	and.w	r2, r3, #12
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	429a      	cmp	r2, r3
 8002742:	d1eb      	bne.n	800271c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002744:	4b25      	ldr	r3, [pc, #148]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d20c      	bcs.n	800276c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b22      	ldr	r3, [pc, #136]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e032      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4916      	ldr	r1, [pc, #88]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	490e      	ldr	r1, [pc, #56]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027aa:	f000 f855 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 80027ae:	4601      	mov	r1, r0
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	5cd3      	ldrb	r3, [r2, r3]
 80027be:	fa21 f303 	lsr.w	r3, r1, r3
 80027c2:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe ffaa 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023c00 	.word	0x40023c00
 80027e0:	40023800 	.word	0x40023800
 80027e4:	0800560c 	.word	0x0800560c
 80027e8:	20000004 	.word	0x20000004
 80027ec:	20000008 	.word	0x20000008

080027f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_RCC_GetHCLKFreq+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000004 	.word	0x20000004

08002808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800280c:	f7ff fff0 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 8002810:	4601      	mov	r1, r0
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0a9b      	lsrs	r3, r3, #10
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4a03      	ldr	r2, [pc, #12]	; (800282c <HAL_RCC_GetPCLK1Freq+0x24>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	0800561c 	.word	0x0800561c

08002830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002834:	f7ff ffdc 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 8002838:	4601      	mov	r1, r0
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0b5b      	lsrs	r3, r3, #13
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4a03      	ldr	r2, [pc, #12]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	0800561c 	.word	0x0800561c

08002858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002872:	4bc6      	ldr	r3, [pc, #792]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b0c      	cmp	r3, #12
 800287c:	f200 817e 	bhi.w	8002b7c <HAL_RCC_GetSysClockFreq+0x324>
 8002880:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <HAL_RCC_GetSysClockFreq+0x30>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	080028bd 	.word	0x080028bd
 800288c:	08002b7d 	.word	0x08002b7d
 8002890:	08002b7d 	.word	0x08002b7d
 8002894:	08002b7d 	.word	0x08002b7d
 8002898:	080028c3 	.word	0x080028c3
 800289c:	08002b7d 	.word	0x08002b7d
 80028a0:	08002b7d 	.word	0x08002b7d
 80028a4:	08002b7d 	.word	0x08002b7d
 80028a8:	080028c9 	.word	0x080028c9
 80028ac:	08002b7d 	.word	0x08002b7d
 80028b0:	08002b7d 	.word	0x08002b7d
 80028b4:	08002b7d 	.word	0x08002b7d
 80028b8:	08002a25 	.word	0x08002a25
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4bb4      	ldr	r3, [pc, #720]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x338>)
 80028be:	613b      	str	r3, [r7, #16]
       break;
 80028c0:	e15f      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028c2:	4bb4      	ldr	r3, [pc, #720]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x33c>)
 80028c4:	613b      	str	r3, [r7, #16]
      break;
 80028c6:	e15c      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c8:	4bb0      	ldr	r3, [pc, #704]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x334>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028d0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d2:	4bae      	ldr	r3, [pc, #696]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x334>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d04a      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028de:	4bab      	ldr	r3, [pc, #684]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x334>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	099b      	lsrs	r3, r3, #6
 80028e4:	f04f 0400 	mov.w	r4, #0
 80028e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	ea03 0501 	and.w	r5, r3, r1
 80028f4:	ea04 0602 	and.w	r6, r4, r2
 80028f8:	4629      	mov	r1, r5
 80028fa:	4632      	mov	r2, r6
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	f04f 0400 	mov.w	r4, #0
 8002904:	0154      	lsls	r4, r2, #5
 8002906:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800290a:	014b      	lsls	r3, r1, #5
 800290c:	4619      	mov	r1, r3
 800290e:	4622      	mov	r2, r4
 8002910:	1b49      	subs	r1, r1, r5
 8002912:	eb62 0206 	sbc.w	r2, r2, r6
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	f04f 0400 	mov.w	r4, #0
 800291e:	0194      	lsls	r4, r2, #6
 8002920:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002924:	018b      	lsls	r3, r1, #6
 8002926:	1a5b      	subs	r3, r3, r1
 8002928:	eb64 0402 	sbc.w	r4, r4, r2
 800292c:	f04f 0100 	mov.w	r1, #0
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	00e2      	lsls	r2, r4, #3
 8002936:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800293a:	00d9      	lsls	r1, r3, #3
 800293c:	460b      	mov	r3, r1
 800293e:	4614      	mov	r4, r2
 8002940:	195b      	adds	r3, r3, r5
 8002942:	eb44 0406 	adc.w	r4, r4, r6
 8002946:	f04f 0100 	mov.w	r1, #0
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	0262      	lsls	r2, r4, #9
 8002950:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002954:	0259      	lsls	r1, r3, #9
 8002956:	460b      	mov	r3, r1
 8002958:	4614      	mov	r4, r2
 800295a:	4618      	mov	r0, r3
 800295c:	4621      	mov	r1, r4
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f04f 0400 	mov.w	r4, #0
 8002964:	461a      	mov	r2, r3
 8002966:	4623      	mov	r3, r4
 8002968:	f7fd fcaa 	bl	80002c0 <__aeabi_uldivmod>
 800296c:	4603      	mov	r3, r0
 800296e:	460c      	mov	r4, r1
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e049      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002974:	4b85      	ldr	r3, [pc, #532]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	099b      	lsrs	r3, r3, #6
 800297a:	f04f 0400 	mov.w	r4, #0
 800297e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	ea03 0501 	and.w	r5, r3, r1
 800298a:	ea04 0602 	and.w	r6, r4, r2
 800298e:	4629      	mov	r1, r5
 8002990:	4632      	mov	r2, r6
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	f04f 0400 	mov.w	r4, #0
 800299a:	0154      	lsls	r4, r2, #5
 800299c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029a0:	014b      	lsls	r3, r1, #5
 80029a2:	4619      	mov	r1, r3
 80029a4:	4622      	mov	r2, r4
 80029a6:	1b49      	subs	r1, r1, r5
 80029a8:	eb62 0206 	sbc.w	r2, r2, r6
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	f04f 0400 	mov.w	r4, #0
 80029b4:	0194      	lsls	r4, r2, #6
 80029b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029ba:	018b      	lsls	r3, r1, #6
 80029bc:	1a5b      	subs	r3, r3, r1
 80029be:	eb64 0402 	sbc.w	r4, r4, r2
 80029c2:	f04f 0100 	mov.w	r1, #0
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	00e2      	lsls	r2, r4, #3
 80029cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029d0:	00d9      	lsls	r1, r3, #3
 80029d2:	460b      	mov	r3, r1
 80029d4:	4614      	mov	r4, r2
 80029d6:	195b      	adds	r3, r3, r5
 80029d8:	eb44 0406 	adc.w	r4, r4, r6
 80029dc:	f04f 0100 	mov.w	r1, #0
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	02a2      	lsls	r2, r4, #10
 80029e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029ea:	0299      	lsls	r1, r3, #10
 80029ec:	460b      	mov	r3, r1
 80029ee:	4614      	mov	r4, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	4621      	mov	r1, r4
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f04f 0400 	mov.w	r4, #0
 80029fa:	461a      	mov	r2, r3
 80029fc:	4623      	mov	r3, r4
 80029fe:	f7fd fc5f 	bl	80002c0 <__aeabi_uldivmod>
 8002a02:	4603      	mov	r3, r0
 8002a04:	460c      	mov	r4, r1
 8002a06:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a08:	4b60      	ldr	r3, [pc, #384]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	0c1b      	lsrs	r3, r3, #16
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	3301      	adds	r3, #1
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	613b      	str	r3, [r7, #16]
      break;
 8002a22:	e0ae      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a2c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2e:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d04a      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3a:	4b54      	ldr	r3, [pc, #336]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	f04f 0400 	mov.w	r4, #0
 8002a44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	ea03 0501 	and.w	r5, r3, r1
 8002a50:	ea04 0602 	and.w	r6, r4, r2
 8002a54:	4629      	mov	r1, r5
 8002a56:	4632      	mov	r2, r6
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f04f 0400 	mov.w	r4, #0
 8002a60:	0154      	lsls	r4, r2, #5
 8002a62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a66:	014b      	lsls	r3, r1, #5
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	1b49      	subs	r1, r1, r5
 8002a6e:	eb62 0206 	sbc.w	r2, r2, r6
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	f04f 0400 	mov.w	r4, #0
 8002a7a:	0194      	lsls	r4, r2, #6
 8002a7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a80:	018b      	lsls	r3, r1, #6
 8002a82:	1a5b      	subs	r3, r3, r1
 8002a84:	eb64 0402 	sbc.w	r4, r4, r2
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	00e2      	lsls	r2, r4, #3
 8002a92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a96:	00d9      	lsls	r1, r3, #3
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	195b      	adds	r3, r3, r5
 8002a9e:	eb44 0406 	adc.w	r4, r4, r6
 8002aa2:	f04f 0100 	mov.w	r1, #0
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	0262      	lsls	r2, r4, #9
 8002aac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ab0:	0259      	lsls	r1, r3, #9
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4614      	mov	r4, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	4621      	mov	r1, r4
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f04f 0400 	mov.w	r4, #0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	f7fd fbfc 	bl	80002c0 <__aeabi_uldivmod>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	e049      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	099b      	lsrs	r3, r3, #6
 8002ad6:	f04f 0400 	mov.w	r4, #0
 8002ada:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	ea03 0501 	and.w	r5, r3, r1
 8002ae6:	ea04 0602 	and.w	r6, r4, r2
 8002aea:	4629      	mov	r1, r5
 8002aec:	4632      	mov	r2, r6
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	f04f 0400 	mov.w	r4, #0
 8002af6:	0154      	lsls	r4, r2, #5
 8002af8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002afc:	014b      	lsls	r3, r1, #5
 8002afe:	4619      	mov	r1, r3
 8002b00:	4622      	mov	r2, r4
 8002b02:	1b49      	subs	r1, r1, r5
 8002b04:	eb62 0206 	sbc.w	r2, r2, r6
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	f04f 0400 	mov.w	r4, #0
 8002b10:	0194      	lsls	r4, r2, #6
 8002b12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b16:	018b      	lsls	r3, r1, #6
 8002b18:	1a5b      	subs	r3, r3, r1
 8002b1a:	eb64 0402 	sbc.w	r4, r4, r2
 8002b1e:	f04f 0100 	mov.w	r1, #0
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	00e2      	lsls	r2, r4, #3
 8002b28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b2c:	00d9      	lsls	r1, r3, #3
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4614      	mov	r4, r2
 8002b32:	195b      	adds	r3, r3, r5
 8002b34:	eb44 0406 	adc.w	r4, r4, r6
 8002b38:	f04f 0100 	mov.w	r1, #0
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	02a2      	lsls	r2, r4, #10
 8002b42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b46:	0299      	lsls	r1, r3, #10
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4614      	mov	r4, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	4621      	mov	r1, r4
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f04f 0400 	mov.w	r4, #0
 8002b56:	461a      	mov	r2, r3
 8002b58:	4623      	mov	r3, r4
 8002b5a:	f7fd fbb1 	bl	80002c0 <__aeabi_uldivmod>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	460c      	mov	r4, r1
 8002b62:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x334>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0f1b      	lsrs	r3, r3, #28
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	613b      	str	r3, [r7, #16]
      break;
 8002b7a:	e002      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x338>)
 8002b7e:	613b      	str	r3, [r7, #16]
      break;
 8002b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b82:	693b      	ldr	r3, [r7, #16]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	00f42400 	.word	0x00f42400
 8002b94:	007a1200 	.word	0x007a1200

08002b98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8083 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bb2:	4b95      	ldr	r3, [pc, #596]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d019      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bbe:	4b92      	ldr	r3, [pc, #584]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bca:	4b8f      	ldr	r3, [pc, #572]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd8:	4b8b      	ldr	r3, [pc, #556]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d112      	bne.n	8002c0a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be4:	4b88      	ldr	r3, [pc, #544]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf2:	4b85      	ldr	r3, [pc, #532]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d05b      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x11e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d157      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e216      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x8a>
 8002c14:	4b7c      	ldr	r3, [pc, #496]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a7b      	ldr	r2, [pc, #492]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e01d      	b.n	8002c5e <HAL_RCC_OscConfig+0xc6>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0xae>
 8002c2c:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a75      	ldr	r2, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b73      	ldr	r3, [pc, #460]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a72      	ldr	r2, [pc, #456]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e00b      	b.n	8002c5e <HAL_RCC_OscConfig+0xc6>
 8002c46:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6f      	ldr	r2, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6c      	ldr	r2, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d013      	beq.n	8002c8e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7fe fda1 	bl	80017ac <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6e:	f7fe fd9d 	bl	80017ac <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b64      	cmp	r3, #100	; 0x64
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e1db      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c80:	4b61      	ldr	r3, [pc, #388]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0xd6>
 8002c8c:	e014      	b.n	8002cb8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fd8d 	bl	80017ac <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c96:	f7fe fd89 	bl	80017ac <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b64      	cmp	r3, #100	; 0x64
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e1c7      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca8:	4b57      	ldr	r3, [pc, #348]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f0      	bne.n	8002c96 <HAL_RCC_OscConfig+0xfe>
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d06f      	beq.n	8002da4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cc4:	4b50      	ldr	r3, [pc, #320]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d017      	beq.n	8002d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cd0:	4b4d      	ldr	r3, [pc, #308]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cdc:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00b      	beq.n	8002d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce8:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d11c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf4:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d116      	bne.n	8002d2e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d00:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_OscConfig+0x180>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e18f      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4938      	ldr	r1, [pc, #224]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2c:	e03a      	b.n	8002da4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d020      	beq.n	8002d78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d36:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <HAL_RCC_OscConfig+0x274>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fd36 	bl	80017ac <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d44:	f7fe fd32 	bl	80017ac <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e170      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4925      	ldr	r1, [pc, #148]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
 8002d76:	e015      	b.n	8002da4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d78:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_OscConfig+0x274>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fd15 	bl	80017ac <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d86:	f7fe fd11 	bl	80017ac <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e14f      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d037      	beq.n	8002e20 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d016      	beq.n	8002de6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <HAL_RCC_OscConfig+0x278>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7fe fcf5 	bl	80017ac <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7fe fcf1 	bl	80017ac <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e12f      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x270>)
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x22e>
 8002de4:	e01c      	b.n	8002e20 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCC_OscConfig+0x278>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fe fcde 	bl	80017ac <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df2:	e00f      	b.n	8002e14 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df4:	f7fe fcda 	bl	80017ac <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d908      	bls.n	8002e14 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e118      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	42470000 	.word	0x42470000
 8002e10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b8a      	ldr	r3, [pc, #552]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e9      	bne.n	8002df4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8097 	beq.w	8002f5c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b83      	ldr	r3, [pc, #524]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b7f      	ldr	r3, [pc, #508]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a7e      	ldr	r2, [pc, #504]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b7c      	ldr	r3, [pc, #496]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b79      	ldr	r3, [pc, #484]	; (8003044 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a75      	ldr	r2, [pc, #468]	; (8003044 <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7fe fc99 	bl	80017ac <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7fe fc95 	bl	80017ac <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0d3      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	4b6c      	ldr	r3, [pc, #432]	; (8003044 <HAL_RCC_OscConfig+0x4ac>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x31a>
 8002ea4:	4b66      	ldr	r3, [pc, #408]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a65      	ldr	r2, [pc, #404]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb0:	e01c      	b.n	8002eec <HAL_RCC_OscConfig+0x354>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x33c>
 8002eba:	4b61      	ldr	r3, [pc, #388]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a60      	ldr	r2, [pc, #384]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec6:	4b5e      	ldr	r3, [pc, #376]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a5d      	ldr	r2, [pc, #372]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0x354>
 8002ed4:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a59      	ldr	r2, [pc, #356]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	4b57      	ldr	r3, [pc, #348]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a56      	ldr	r2, [pc, #344]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002ee6:	f023 0304 	bic.w	r3, r3, #4
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d015      	beq.n	8002f20 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe fc5a 	bl	80017ac <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fe fc56 	bl	80017ac <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e092      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	4b4b      	ldr	r3, [pc, #300]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ee      	beq.n	8002efc <HAL_RCC_OscConfig+0x364>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f20:	f7fe fc44 	bl	80017ac <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7fe fc40 	bl	80017ac <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e07c      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	4b40      	ldr	r3, [pc, #256]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1ee      	bne.n	8002f28 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	4a3a      	ldr	r2, [pc, #232]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d068      	beq.n	8003036 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d060      	beq.n	8003032 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d145      	bne.n	8003004 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b33      	ldr	r3, [pc, #204]	; (8003048 <HAL_RCC_OscConfig+0x4b0>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fc15 	bl	80017ac <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fe fc11 	bl	80017ac <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e04f      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f98:	4b29      	ldr	r3, [pc, #164]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	019b      	lsls	r3, r3, #6
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	071b      	lsls	r3, r3, #28
 8002fd0:	491b      	ldr	r1, [pc, #108]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <HAL_RCC_OscConfig+0x4b0>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fbe6 	bl	80017ac <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe fbe2 	bl	80017ac <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e020      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x44c>
 8003002:	e018      	b.n	8003036 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003004:	4b10      	ldr	r3, [pc, #64]	; (8003048 <HAL_RCC_OscConfig+0x4b0>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300a:	f7fe fbcf 	bl	80017ac <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003012:	f7fe fbcb 	bl	80017ac <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e009      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_RCC_OscConfig+0x4a8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x47a>
 8003030:	e001      	b.n	8003036 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	40007000 	.word	0x40007000
 8003048:	42470060 	.word	0x42470060

0800304c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e01d      	b.n	800309a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fe f9c0 	bl	80013f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f000 fa64 	bl	8003558 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b06      	cmp	r3, #6
 80030c2:	d007      	beq.n	80030d4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	f241 1311 	movw	r3, #4369	; 0x1111
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10f      	bne.n	800312a <HAL_TIM_Base_Stop+0x40>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6a1a      	ldr	r2, [r3, #32]
 8003110:	f240 4344 	movw	r3, #1092	; 0x444
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d107      	bne.n	800312a <HAL_TIM_Base_Stop+0x40>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0201 	bic.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b06      	cmp	r3, #6
 8003168:	d007      	beq.n	800317a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b02      	cmp	r3, #2
 800319c:	d122      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d11b      	bne.n	80031e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0202 	mvn.w	r2, #2
 80031b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f9a5 	bl	800351a <HAL_TIM_IC_CaptureCallback>
 80031d0:	e005      	b.n	80031de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f997 	bl	8003506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f9a8 	bl	800352e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d122      	bne.n	8003238 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d11b      	bne.n	8003238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0204 	mvn.w	r2, #4
 8003208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2202      	movs	r2, #2
 800320e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f97b 	bl	800351a <HAL_TIM_IC_CaptureCallback>
 8003224:	e005      	b.n	8003232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f96d 	bl	8003506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f97e 	bl	800352e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b08      	cmp	r3, #8
 8003244:	d122      	bne.n	800328c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b08      	cmp	r3, #8
 8003252:	d11b      	bne.n	800328c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0208 	mvn.w	r2, #8
 800325c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2204      	movs	r2, #4
 8003262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f951 	bl	800351a <HAL_TIM_IC_CaptureCallback>
 8003278:	e005      	b.n	8003286 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f943 	bl	8003506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f954 	bl	800352e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b10      	cmp	r3, #16
 8003298:	d122      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d11b      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0210 	mvn.w	r2, #16
 80032b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2208      	movs	r2, #8
 80032b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f927 	bl	800351a <HAL_TIM_IC_CaptureCallback>
 80032cc:	e005      	b.n	80032da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f919 	bl	8003506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f92a 	bl	800352e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d10e      	bne.n	800330c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d107      	bne.n	800330c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0201 	mvn.w	r2, #1
 8003304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd ff68 	bl	80011dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003316:	2b80      	cmp	r3, #128	; 0x80
 8003318:	d10e      	bne.n	8003338 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003324:	2b80      	cmp	r3, #128	; 0x80
 8003326:	d107      	bne.n	8003338 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fad0 	bl	80038d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b40      	cmp	r3, #64	; 0x40
 8003344:	d10e      	bne.n	8003364 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	d107      	bne.n	8003364 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800335c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f8ef 	bl	8003542 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b20      	cmp	r3, #32
 8003370:	d10e      	bne.n	8003390 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b20      	cmp	r3, #32
 800337e:	d107      	bne.n	8003390 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0220 	mvn.w	r2, #32
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa9a 	bl	80038c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_TIM_ConfigClockSource+0x18>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e0a6      	b.n	80034fe <HAL_TIM_ConfigClockSource+0x166>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b40      	cmp	r3, #64	; 0x40
 80033e6:	d067      	beq.n	80034b8 <HAL_TIM_ConfigClockSource+0x120>
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d80b      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x6c>
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d073      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x140>
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d802      	bhi.n	80033fa <HAL_TIM_ConfigClockSource+0x62>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d06f      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033f8:	e078      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d06c      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x140>
 80033fe:	2b30      	cmp	r3, #48	; 0x30
 8003400:	d06a      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003402:	e073      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003404:	2b70      	cmp	r3, #112	; 0x70
 8003406:	d00d      	beq.n	8003424 <HAL_TIM_ConfigClockSource+0x8c>
 8003408:	2b70      	cmp	r3, #112	; 0x70
 800340a:	d804      	bhi.n	8003416 <HAL_TIM_ConfigClockSource+0x7e>
 800340c:	2b50      	cmp	r3, #80	; 0x50
 800340e:	d033      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0xe0>
 8003410:	2b60      	cmp	r3, #96	; 0x60
 8003412:	d041      	beq.n	8003498 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003414:	e06a      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341a:	d066      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x152>
 800341c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003420:	d017      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003422:	e063      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	6899      	ldr	r1, [r3, #8]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f000 f9aa 	bl	800378c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003446:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	609a      	str	r2, [r3, #8]
      break;
 8003450:	e04c      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f000 f993 	bl	800378c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003474:	609a      	str	r2, [r3, #8]
      break;
 8003476:	e039      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	461a      	mov	r2, r3
 8003486:	f000 f907 	bl	8003698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2150      	movs	r1, #80	; 0x50
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f960 	bl	8003756 <TIM_ITRx_SetConfig>
      break;
 8003496:	e029      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f000 f926 	bl	80036f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2160      	movs	r1, #96	; 0x60
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f950 	bl	8003756 <TIM_ITRx_SetConfig>
      break;
 80034b6:	e019      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	461a      	mov	r2, r3
 80034c6:	f000 f8e7 	bl	8003698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2140      	movs	r1, #64	; 0x40
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 f940 	bl	8003756 <TIM_ITRx_SetConfig>
      break;
 80034d6:	e009      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f000 f937 	bl	8003756 <TIM_ITRx_SetConfig>
      break;
 80034e8:	e000      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x154>
      break;
 80034ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a40      	ldr	r2, [pc, #256]	; (800366c <TIM_Base_SetConfig+0x114>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <TIM_Base_SetConfig+0x40>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003576:	d00f      	beq.n	8003598 <TIM_Base_SetConfig+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a3d      	ldr	r2, [pc, #244]	; (8003670 <TIM_Base_SetConfig+0x118>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00b      	beq.n	8003598 <TIM_Base_SetConfig+0x40>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a3c      	ldr	r2, [pc, #240]	; (8003674 <TIM_Base_SetConfig+0x11c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d007      	beq.n	8003598 <TIM_Base_SetConfig+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a3b      	ldr	r2, [pc, #236]	; (8003678 <TIM_Base_SetConfig+0x120>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <TIM_Base_SetConfig+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a3a      	ldr	r2, [pc, #232]	; (800367c <TIM_Base_SetConfig+0x124>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d108      	bne.n	80035aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2f      	ldr	r2, [pc, #188]	; (800366c <TIM_Base_SetConfig+0x114>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d02b      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b8:	d027      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a2c      	ldr	r2, [pc, #176]	; (8003670 <TIM_Base_SetConfig+0x118>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d023      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a2b      	ldr	r2, [pc, #172]	; (8003674 <TIM_Base_SetConfig+0x11c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01f      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a2a      	ldr	r2, [pc, #168]	; (8003678 <TIM_Base_SetConfig+0x120>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01b      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a29      	ldr	r2, [pc, #164]	; (800367c <TIM_Base_SetConfig+0x124>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d017      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a28      	ldr	r2, [pc, #160]	; (8003680 <TIM_Base_SetConfig+0x128>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a27      	ldr	r2, [pc, #156]	; (8003684 <TIM_Base_SetConfig+0x12c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00f      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a26      	ldr	r2, [pc, #152]	; (8003688 <TIM_Base_SetConfig+0x130>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00b      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a25      	ldr	r2, [pc, #148]	; (800368c <TIM_Base_SetConfig+0x134>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a24      	ldr	r2, [pc, #144]	; (8003690 <TIM_Base_SetConfig+0x138>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d003      	beq.n	800360a <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a23      	ldr	r2, [pc, #140]	; (8003694 <TIM_Base_SetConfig+0x13c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a0a      	ldr	r2, [pc, #40]	; (800366c <TIM_Base_SetConfig+0x114>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_Base_SetConfig+0xf8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a0c      	ldr	r2, [pc, #48]	; (800367c <TIM_Base_SetConfig+0x124>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d103      	bne.n	8003658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	615a      	str	r2, [r3, #20]
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40010000 	.word	0x40010000
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800
 8003678:	40000c00 	.word	0x40000c00
 800367c:	40010400 	.word	0x40010400
 8003680:	40014000 	.word	0x40014000
 8003684:	40014400 	.word	0x40014400
 8003688:	40014800 	.word	0x40014800
 800368c:	40001800 	.word	0x40001800
 8003690:	40001c00 	.word	0x40001c00
 8003694:	40002000 	.word	0x40002000

08003698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f023 0201 	bic.w	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f023 030a 	bic.w	r3, r3, #10
 80036d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b087      	sub	sp, #28
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	f023 0210 	bic.w	r2, r3, #16
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	031b      	lsls	r3, r3, #12
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003732:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	621a      	str	r2, [r3, #32]
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	f043 0307 	orr.w	r3, r3, #7
 8003778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	609a      	str	r2, [r3, #8]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	021a      	lsls	r2, r3, #8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	609a      	str	r2, [r3, #8]
}
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e05a      	b.n	800389a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a21      	ldr	r2, [pc, #132]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d022      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003830:	d01d      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d018      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00e      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d009      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a17      	ldr	r2, [pc, #92]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d10c      	bne.n	8003888 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	4313      	orrs	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40010000 	.word	0x40010000
 80038ac:	40000400 	.word	0x40000400
 80038b0:	40000800 	.word	0x40000800
 80038b4:	40000c00 	.word	0x40000c00
 80038b8:	40010400 	.word	0x40010400
 80038bc:	40014000 	.word	0x40014000
 80038c0:	40001800 	.word	0x40001800

080038c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e03f      	b.n	800397e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd fdc2 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	; 0x24
 800391c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800392e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fb97 	bl	8004064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b088      	sub	sp, #32
 800398a:	af02      	add	r7, sp, #8
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	4613      	mov	r3, r2
 8003994:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	f040 8083 	bne.w	8003aae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_UART_Transmit+0x2e>
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e07b      	b.n	8003ab0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_Transmit+0x40>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e074      	b.n	8003ab0 <HAL_UART_Transmit+0x12a>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2221      	movs	r2, #33	; 0x21
 80039d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80039dc:	f7fd fee6 	bl	80017ac <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	88fa      	ldrh	r2, [r7, #6]
 80039e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	88fa      	ldrh	r2, [r7, #6]
 80039ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80039f6:	e042      	b.n	8003a7e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0e:	d122      	bne.n	8003a56 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2200      	movs	r2, #0
 8003a18:	2180      	movs	r1, #128	; 0x80
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f9b6 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e042      	b.n	8003ab0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a3c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3302      	adds	r3, #2
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	e017      	b.n	8003a7e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	3301      	adds	r3, #1
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	e013      	b.n	8003a7e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2180      	movs	r1, #128	; 0x80
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f993 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e01f      	b.n	8003ab0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	60ba      	str	r2, [r7, #8]
 8003a76:	781a      	ldrb	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1b7      	bne.n	80039f8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2140      	movs	r1, #64	; 0x40
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f97a 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e006      	b.n	8003ab0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
  }
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d140      	bne.n	8003b54 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_UART_Receive_IT+0x26>
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e039      	b.n	8003b56 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Receive_IT+0x38>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e032      	b.n	8003b56 <HAL_UART_Receive_IT+0x9e>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	88fa      	ldrh	r2, [r7, #6]
 8003b02:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2222      	movs	r2, #34	; 0x22
 8003b14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0220 	orr.w	r2, r2, #32
 8003b4e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e000      	b.n	8003b56 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
  }
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x52>
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f9d6 	bl	8003f60 <UART_Receive_IT>
      return;
 8003bb4:	e0d1      	b.n	8003d5a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80b0 	beq.w	8003d1e <HAL_UART_IRQHandler+0x1ba>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d105      	bne.n	8003bd4 <HAL_UART_IRQHandler+0x70>
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80a5 	beq.w	8003d1e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x90>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	f043 0201 	orr.w	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_UART_IRQHandler+0xb0>
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	f043 0202 	orr.w	r2, r3, #2
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_UART_IRQHandler+0xd0>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	f043 0204 	orr.w	r2, r3, #4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00f      	beq.n	8003c5e <HAL_UART_IRQHandler+0xfa>
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <HAL_UART_IRQHandler+0xee>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	f043 0208 	orr.w	r2, r3, #8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d078      	beq.n	8003d58 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <HAL_UART_IRQHandler+0x11c>
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f970 	bl	8003f60 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	bf0c      	ite	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	2300      	movne	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <HAL_UART_IRQHandler+0x144>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d031      	beq.n	8003d0c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f8b9 	bl	8003e20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d123      	bne.n	8003d04 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d013      	beq.n	8003cfc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <HAL_UART_IRQHandler+0x1fc>)
 8003cda:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe f87f 	bl	8001de4 <HAL_DMA_Abort_IT>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d016      	beq.n	8003d1a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfa:	e00e      	b.n	8003d1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f83b 	bl	8003d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d02:	e00a      	b.n	8003d1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f837 	bl	8003d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0a:	e006      	b.n	8003d1a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f833 	bl	8003d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003d18:	e01e      	b.n	8003d58 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1a:	bf00      	nop
    return;
 8003d1c:	e01c      	b.n	8003d58 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_UART_IRQHandler+0x1d6>
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f8a6 	bl	8003e84 <UART_Transmit_IT>
    return;
 8003d38:	e00f      	b.n	8003d5a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_UART_IRQHandler+0x1f6>
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8ee 	bl	8003f30 <UART_EndTransmit_IT>
    return;
 8003d54:	bf00      	nop
 8003d56:	e000      	b.n	8003d5a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003d58:	bf00      	nop
  }
}
 8003d5a:	3720      	adds	r7, #32
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	08003e5d 	.word	0x08003e5d

08003d64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9c:	e02c      	b.n	8003df8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d028      	beq.n	8003df8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d007      	beq.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8003dac:	f7fd fcfe 	bl	80017ac <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d21d      	bcs.n	8003df8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e00f      	b.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4013      	ands	r3, r2
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d0c3      	beq.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e36:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff ff7e 	bl	8003d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b21      	cmp	r3, #33	; 0x21
 8003e96:	d144      	bne.n	8003f22 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea0:	d11a      	bne.n	8003ed8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eb6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	1c9a      	adds	r2, r3, #2
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	621a      	str	r2, [r3, #32]
 8003eca:	e00e      	b.n	8003eea <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	621a      	str	r2, [r3, #32]
 8003ed6:	e008      	b.n	8003eea <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	1c59      	adds	r1, r3, #1
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6211      	str	r1, [r2, #32]
 8003ee2:	781a      	ldrb	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10f      	bne.n	8003f1e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
  }
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f46:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff ff07 	bl	8003d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b22      	cmp	r3, #34	; 0x22
 8003f72:	d171      	bne.n	8004058 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7c:	d123      	bne.n	8003fc6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10e      	bne.n	8003faa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	1c9a      	adds	r2, r3, #2
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fa8:	e029      	b.n	8003ffe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fc4:	e01b      	b.n	8003ffe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6858      	ldr	r0, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	1c59      	adds	r1, r3, #1
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6291      	str	r1, [r2, #40]	; 0x28
 8003fde:	b2c2      	uxtb	r2, r0
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	e00c      	b.n	8003ffe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	1c58      	adds	r0, r3, #1
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	6288      	str	r0, [r1, #40]	; 0x28
 8003ff6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29b      	uxth	r3, r3
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	4619      	mov	r1, r3
 800400c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800400e:	2b00      	cmp	r3, #0
 8004010:	d120      	bne.n	8004054 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0220 	bic.w	r2, r2, #32
 8004020:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004030:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd f8f2 	bl	8001234 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e002      	b.n	800405a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040a6:	f023 030c 	bic.w	r3, r3, #12
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	68f9      	ldr	r1, [r7, #12]
 80040b0:	430b      	orrs	r3, r1
 80040b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d2:	f040 818b 	bne.w	80043ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4ac1      	ldr	r2, [pc, #772]	; (80043e0 <UART_SetConfig+0x37c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d005      	beq.n	80040ec <UART_SetConfig+0x88>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4abf      	ldr	r2, [pc, #764]	; (80043e4 <UART_SetConfig+0x380>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	f040 80bd 	bne.w	8004266 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040ec:	f7fe fba0 	bl	8002830 <HAL_RCC_GetPCLK2Freq>
 80040f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	461d      	mov	r5, r3
 80040f6:	f04f 0600 	mov.w	r6, #0
 80040fa:	46a8      	mov	r8, r5
 80040fc:	46b1      	mov	r9, r6
 80040fe:	eb18 0308 	adds.w	r3, r8, r8
 8004102:	eb49 0409 	adc.w	r4, r9, r9
 8004106:	4698      	mov	r8, r3
 8004108:	46a1      	mov	r9, r4
 800410a:	eb18 0805 	adds.w	r8, r8, r5
 800410e:	eb49 0906 	adc.w	r9, r9, r6
 8004112:	f04f 0100 	mov.w	r1, #0
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800411e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004122:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004126:	4688      	mov	r8, r1
 8004128:	4691      	mov	r9, r2
 800412a:	eb18 0005 	adds.w	r0, r8, r5
 800412e:	eb49 0106 	adc.w	r1, r9, r6
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	461d      	mov	r5, r3
 8004138:	f04f 0600 	mov.w	r6, #0
 800413c:	196b      	adds	r3, r5, r5
 800413e:	eb46 0406 	adc.w	r4, r6, r6
 8004142:	461a      	mov	r2, r3
 8004144:	4623      	mov	r3, r4
 8004146:	f7fc f8bb 	bl	80002c0 <__aeabi_uldivmod>
 800414a:	4603      	mov	r3, r0
 800414c:	460c      	mov	r4, r1
 800414e:	461a      	mov	r2, r3
 8004150:	4ba5      	ldr	r3, [pc, #660]	; (80043e8 <UART_SetConfig+0x384>)
 8004152:	fba3 2302 	umull	r2, r3, r3, r2
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	461d      	mov	r5, r3
 8004160:	f04f 0600 	mov.w	r6, #0
 8004164:	46a9      	mov	r9, r5
 8004166:	46b2      	mov	sl, r6
 8004168:	eb19 0309 	adds.w	r3, r9, r9
 800416c:	eb4a 040a 	adc.w	r4, sl, sl
 8004170:	4699      	mov	r9, r3
 8004172:	46a2      	mov	sl, r4
 8004174:	eb19 0905 	adds.w	r9, r9, r5
 8004178:	eb4a 0a06 	adc.w	sl, sl, r6
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004188:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800418c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004190:	4689      	mov	r9, r1
 8004192:	4692      	mov	sl, r2
 8004194:	eb19 0005 	adds.w	r0, r9, r5
 8004198:	eb4a 0106 	adc.w	r1, sl, r6
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	461d      	mov	r5, r3
 80041a2:	f04f 0600 	mov.w	r6, #0
 80041a6:	196b      	adds	r3, r5, r5
 80041a8:	eb46 0406 	adc.w	r4, r6, r6
 80041ac:	461a      	mov	r2, r3
 80041ae:	4623      	mov	r3, r4
 80041b0:	f7fc f886 	bl	80002c0 <__aeabi_uldivmod>
 80041b4:	4603      	mov	r3, r0
 80041b6:	460c      	mov	r4, r1
 80041b8:	461a      	mov	r2, r3
 80041ba:	4b8b      	ldr	r3, [pc, #556]	; (80043e8 <UART_SetConfig+0x384>)
 80041bc:	fba3 1302 	umull	r1, r3, r3, r2
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	2164      	movs	r1, #100	; 0x64
 80041c4:	fb01 f303 	mul.w	r3, r1, r3
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	3332      	adds	r3, #50	; 0x32
 80041ce:	4a86      	ldr	r2, [pc, #536]	; (80043e8 <UART_SetConfig+0x384>)
 80041d0:	fba2 2303 	umull	r2, r3, r2, r3
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041dc:	4498      	add	r8, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	461d      	mov	r5, r3
 80041e2:	f04f 0600 	mov.w	r6, #0
 80041e6:	46a9      	mov	r9, r5
 80041e8:	46b2      	mov	sl, r6
 80041ea:	eb19 0309 	adds.w	r3, r9, r9
 80041ee:	eb4a 040a 	adc.w	r4, sl, sl
 80041f2:	4699      	mov	r9, r3
 80041f4:	46a2      	mov	sl, r4
 80041f6:	eb19 0905 	adds.w	r9, r9, r5
 80041fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80041fe:	f04f 0100 	mov.w	r1, #0
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800420a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800420e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004212:	4689      	mov	r9, r1
 8004214:	4692      	mov	sl, r2
 8004216:	eb19 0005 	adds.w	r0, r9, r5
 800421a:	eb4a 0106 	adc.w	r1, sl, r6
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	461d      	mov	r5, r3
 8004224:	f04f 0600 	mov.w	r6, #0
 8004228:	196b      	adds	r3, r5, r5
 800422a:	eb46 0406 	adc.w	r4, r6, r6
 800422e:	461a      	mov	r2, r3
 8004230:	4623      	mov	r3, r4
 8004232:	f7fc f845 	bl	80002c0 <__aeabi_uldivmod>
 8004236:	4603      	mov	r3, r0
 8004238:	460c      	mov	r4, r1
 800423a:	461a      	mov	r2, r3
 800423c:	4b6a      	ldr	r3, [pc, #424]	; (80043e8 <UART_SetConfig+0x384>)
 800423e:	fba3 1302 	umull	r1, r3, r3, r2
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2164      	movs	r1, #100	; 0x64
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	3332      	adds	r3, #50	; 0x32
 8004250:	4a65      	ldr	r2, [pc, #404]	; (80043e8 <UART_SetConfig+0x384>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	f003 0207 	and.w	r2, r3, #7
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4442      	add	r2, r8
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	e26f      	b.n	8004746 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004266:	f7fe facf 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 800426a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	461d      	mov	r5, r3
 8004270:	f04f 0600 	mov.w	r6, #0
 8004274:	46a8      	mov	r8, r5
 8004276:	46b1      	mov	r9, r6
 8004278:	eb18 0308 	adds.w	r3, r8, r8
 800427c:	eb49 0409 	adc.w	r4, r9, r9
 8004280:	4698      	mov	r8, r3
 8004282:	46a1      	mov	r9, r4
 8004284:	eb18 0805 	adds.w	r8, r8, r5
 8004288:	eb49 0906 	adc.w	r9, r9, r6
 800428c:	f04f 0100 	mov.w	r1, #0
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004298:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800429c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042a0:	4688      	mov	r8, r1
 80042a2:	4691      	mov	r9, r2
 80042a4:	eb18 0005 	adds.w	r0, r8, r5
 80042a8:	eb49 0106 	adc.w	r1, r9, r6
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	461d      	mov	r5, r3
 80042b2:	f04f 0600 	mov.w	r6, #0
 80042b6:	196b      	adds	r3, r5, r5
 80042b8:	eb46 0406 	adc.w	r4, r6, r6
 80042bc:	461a      	mov	r2, r3
 80042be:	4623      	mov	r3, r4
 80042c0:	f7fb fffe 	bl	80002c0 <__aeabi_uldivmod>
 80042c4:	4603      	mov	r3, r0
 80042c6:	460c      	mov	r4, r1
 80042c8:	461a      	mov	r2, r3
 80042ca:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <UART_SetConfig+0x384>)
 80042cc:	fba3 2302 	umull	r2, r3, r3, r2
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	461d      	mov	r5, r3
 80042da:	f04f 0600 	mov.w	r6, #0
 80042de:	46a9      	mov	r9, r5
 80042e0:	46b2      	mov	sl, r6
 80042e2:	eb19 0309 	adds.w	r3, r9, r9
 80042e6:	eb4a 040a 	adc.w	r4, sl, sl
 80042ea:	4699      	mov	r9, r3
 80042ec:	46a2      	mov	sl, r4
 80042ee:	eb19 0905 	adds.w	r9, r9, r5
 80042f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004302:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004306:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800430a:	4689      	mov	r9, r1
 800430c:	4692      	mov	sl, r2
 800430e:	eb19 0005 	adds.w	r0, r9, r5
 8004312:	eb4a 0106 	adc.w	r1, sl, r6
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	461d      	mov	r5, r3
 800431c:	f04f 0600 	mov.w	r6, #0
 8004320:	196b      	adds	r3, r5, r5
 8004322:	eb46 0406 	adc.w	r4, r6, r6
 8004326:	461a      	mov	r2, r3
 8004328:	4623      	mov	r3, r4
 800432a:	f7fb ffc9 	bl	80002c0 <__aeabi_uldivmod>
 800432e:	4603      	mov	r3, r0
 8004330:	460c      	mov	r4, r1
 8004332:	461a      	mov	r2, r3
 8004334:	4b2c      	ldr	r3, [pc, #176]	; (80043e8 <UART_SetConfig+0x384>)
 8004336:	fba3 1302 	umull	r1, r3, r3, r2
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2164      	movs	r1, #100	; 0x64
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	3332      	adds	r3, #50	; 0x32
 8004348:	4a27      	ldr	r2, [pc, #156]	; (80043e8 <UART_SetConfig+0x384>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004356:	4498      	add	r8, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	461d      	mov	r5, r3
 800435c:	f04f 0600 	mov.w	r6, #0
 8004360:	46a9      	mov	r9, r5
 8004362:	46b2      	mov	sl, r6
 8004364:	eb19 0309 	adds.w	r3, r9, r9
 8004368:	eb4a 040a 	adc.w	r4, sl, sl
 800436c:	4699      	mov	r9, r3
 800436e:	46a2      	mov	sl, r4
 8004370:	eb19 0905 	adds.w	r9, r9, r5
 8004374:	eb4a 0a06 	adc.w	sl, sl, r6
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004384:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004388:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800438c:	4689      	mov	r9, r1
 800438e:	4692      	mov	sl, r2
 8004390:	eb19 0005 	adds.w	r0, r9, r5
 8004394:	eb4a 0106 	adc.w	r1, sl, r6
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	461d      	mov	r5, r3
 800439e:	f04f 0600 	mov.w	r6, #0
 80043a2:	196b      	adds	r3, r5, r5
 80043a4:	eb46 0406 	adc.w	r4, r6, r6
 80043a8:	461a      	mov	r2, r3
 80043aa:	4623      	mov	r3, r4
 80043ac:	f7fb ff88 	bl	80002c0 <__aeabi_uldivmod>
 80043b0:	4603      	mov	r3, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <UART_SetConfig+0x384>)
 80043b8:	fba3 1302 	umull	r1, r3, r3, r2
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	2164      	movs	r1, #100	; 0x64
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	3332      	adds	r3, #50	; 0x32
 80043ca:	4a07      	ldr	r2, [pc, #28]	; (80043e8 <UART_SetConfig+0x384>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	f003 0207 	and.w	r2, r3, #7
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4442      	add	r2, r8
 80043dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80043de:	e1b2      	b.n	8004746 <UART_SetConfig+0x6e2>
 80043e0:	40011000 	.word	0x40011000
 80043e4:	40011400 	.word	0x40011400
 80043e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4ad7      	ldr	r2, [pc, #860]	; (8004750 <UART_SetConfig+0x6ec>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d005      	beq.n	8004402 <UART_SetConfig+0x39e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4ad6      	ldr	r2, [pc, #856]	; (8004754 <UART_SetConfig+0x6f0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	f040 80d1 	bne.w	80045a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004402:	f7fe fa15 	bl	8002830 <HAL_RCC_GetPCLK2Freq>
 8004406:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	469a      	mov	sl, r3
 800440c:	f04f 0b00 	mov.w	fp, #0
 8004410:	46d0      	mov	r8, sl
 8004412:	46d9      	mov	r9, fp
 8004414:	eb18 0308 	adds.w	r3, r8, r8
 8004418:	eb49 0409 	adc.w	r4, r9, r9
 800441c:	4698      	mov	r8, r3
 800441e:	46a1      	mov	r9, r4
 8004420:	eb18 080a 	adds.w	r8, r8, sl
 8004424:	eb49 090b 	adc.w	r9, r9, fp
 8004428:	f04f 0100 	mov.w	r1, #0
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004434:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004438:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800443c:	4688      	mov	r8, r1
 800443e:	4691      	mov	r9, r2
 8004440:	eb1a 0508 	adds.w	r5, sl, r8
 8004444:	eb4b 0609 	adc.w	r6, fp, r9
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4619      	mov	r1, r3
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	f04f 0400 	mov.w	r4, #0
 800445a:	0094      	lsls	r4, r2, #2
 800445c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004460:	008b      	lsls	r3, r1, #2
 8004462:	461a      	mov	r2, r3
 8004464:	4623      	mov	r3, r4
 8004466:	4628      	mov	r0, r5
 8004468:	4631      	mov	r1, r6
 800446a:	f7fb ff29 	bl	80002c0 <__aeabi_uldivmod>
 800446e:	4603      	mov	r3, r0
 8004470:	460c      	mov	r4, r1
 8004472:	461a      	mov	r2, r3
 8004474:	4bb8      	ldr	r3, [pc, #736]	; (8004758 <UART_SetConfig+0x6f4>)
 8004476:	fba3 2302 	umull	r2, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	469b      	mov	fp, r3
 8004484:	f04f 0c00 	mov.w	ip, #0
 8004488:	46d9      	mov	r9, fp
 800448a:	46e2      	mov	sl, ip
 800448c:	eb19 0309 	adds.w	r3, r9, r9
 8004490:	eb4a 040a 	adc.w	r4, sl, sl
 8004494:	4699      	mov	r9, r3
 8004496:	46a2      	mov	sl, r4
 8004498:	eb19 090b 	adds.w	r9, r9, fp
 800449c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044a0:	f04f 0100 	mov.w	r1, #0
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044b4:	4689      	mov	r9, r1
 80044b6:	4692      	mov	sl, r2
 80044b8:	eb1b 0509 	adds.w	r5, fp, r9
 80044bc:	eb4c 060a 	adc.w	r6, ip, sl
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	4619      	mov	r1, r3
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	f04f 0400 	mov.w	r4, #0
 80044d2:	0094      	lsls	r4, r2, #2
 80044d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044d8:	008b      	lsls	r3, r1, #2
 80044da:	461a      	mov	r2, r3
 80044dc:	4623      	mov	r3, r4
 80044de:	4628      	mov	r0, r5
 80044e0:	4631      	mov	r1, r6
 80044e2:	f7fb feed 	bl	80002c0 <__aeabi_uldivmod>
 80044e6:	4603      	mov	r3, r0
 80044e8:	460c      	mov	r4, r1
 80044ea:	461a      	mov	r2, r3
 80044ec:	4b9a      	ldr	r3, [pc, #616]	; (8004758 <UART_SetConfig+0x6f4>)
 80044ee:	fba3 1302 	umull	r1, r3, r3, r2
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2164      	movs	r1, #100	; 0x64
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	3332      	adds	r3, #50	; 0x32
 8004500:	4a95      	ldr	r2, [pc, #596]	; (8004758 <UART_SetConfig+0x6f4>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450c:	4498      	add	r8, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	469b      	mov	fp, r3
 8004512:	f04f 0c00 	mov.w	ip, #0
 8004516:	46d9      	mov	r9, fp
 8004518:	46e2      	mov	sl, ip
 800451a:	eb19 0309 	adds.w	r3, r9, r9
 800451e:	eb4a 040a 	adc.w	r4, sl, sl
 8004522:	4699      	mov	r9, r3
 8004524:	46a2      	mov	sl, r4
 8004526:	eb19 090b 	adds.w	r9, r9, fp
 800452a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800452e:	f04f 0100 	mov.w	r1, #0
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800453a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800453e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004542:	4689      	mov	r9, r1
 8004544:	4692      	mov	sl, r2
 8004546:	eb1b 0509 	adds.w	r5, fp, r9
 800454a:	eb4c 060a 	adc.w	r6, ip, sl
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4619      	mov	r1, r3
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	f04f 0400 	mov.w	r4, #0
 8004560:	0094      	lsls	r4, r2, #2
 8004562:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004566:	008b      	lsls	r3, r1, #2
 8004568:	461a      	mov	r2, r3
 800456a:	4623      	mov	r3, r4
 800456c:	4628      	mov	r0, r5
 800456e:	4631      	mov	r1, r6
 8004570:	f7fb fea6 	bl	80002c0 <__aeabi_uldivmod>
 8004574:	4603      	mov	r3, r0
 8004576:	460c      	mov	r4, r1
 8004578:	461a      	mov	r2, r3
 800457a:	4b77      	ldr	r3, [pc, #476]	; (8004758 <UART_SetConfig+0x6f4>)
 800457c:	fba3 1302 	umull	r1, r3, r3, r2
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	2164      	movs	r1, #100	; 0x64
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	3332      	adds	r3, #50	; 0x32
 800458e:	4a72      	ldr	r2, [pc, #456]	; (8004758 <UART_SetConfig+0x6f4>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	f003 020f 	and.w	r2, r3, #15
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4442      	add	r2, r8
 80045a0:	609a      	str	r2, [r3, #8]
 80045a2:	e0d0      	b.n	8004746 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80045a4:	f7fe f930 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 80045a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	469a      	mov	sl, r3
 80045ae:	f04f 0b00 	mov.w	fp, #0
 80045b2:	46d0      	mov	r8, sl
 80045b4:	46d9      	mov	r9, fp
 80045b6:	eb18 0308 	adds.w	r3, r8, r8
 80045ba:	eb49 0409 	adc.w	r4, r9, r9
 80045be:	4698      	mov	r8, r3
 80045c0:	46a1      	mov	r9, r4
 80045c2:	eb18 080a 	adds.w	r8, r8, sl
 80045c6:	eb49 090b 	adc.w	r9, r9, fp
 80045ca:	f04f 0100 	mov.w	r1, #0
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045de:	4688      	mov	r8, r1
 80045e0:	4691      	mov	r9, r2
 80045e2:	eb1a 0508 	adds.w	r5, sl, r8
 80045e6:	eb4b 0609 	adc.w	r6, fp, r9
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4619      	mov	r1, r3
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	f04f 0400 	mov.w	r4, #0
 80045fc:	0094      	lsls	r4, r2, #2
 80045fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004602:	008b      	lsls	r3, r1, #2
 8004604:	461a      	mov	r2, r3
 8004606:	4623      	mov	r3, r4
 8004608:	4628      	mov	r0, r5
 800460a:	4631      	mov	r1, r6
 800460c:	f7fb fe58 	bl	80002c0 <__aeabi_uldivmod>
 8004610:	4603      	mov	r3, r0
 8004612:	460c      	mov	r4, r1
 8004614:	461a      	mov	r2, r3
 8004616:	4b50      	ldr	r3, [pc, #320]	; (8004758 <UART_SetConfig+0x6f4>)
 8004618:	fba3 2302 	umull	r2, r3, r3, r2
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	469b      	mov	fp, r3
 8004626:	f04f 0c00 	mov.w	ip, #0
 800462a:	46d9      	mov	r9, fp
 800462c:	46e2      	mov	sl, ip
 800462e:	eb19 0309 	adds.w	r3, r9, r9
 8004632:	eb4a 040a 	adc.w	r4, sl, sl
 8004636:	4699      	mov	r9, r3
 8004638:	46a2      	mov	sl, r4
 800463a:	eb19 090b 	adds.w	r9, r9, fp
 800463e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004642:	f04f 0100 	mov.w	r1, #0
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800464e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004652:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004656:	4689      	mov	r9, r1
 8004658:	4692      	mov	sl, r2
 800465a:	eb1b 0509 	adds.w	r5, fp, r9
 800465e:	eb4c 060a 	adc.w	r6, ip, sl
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4619      	mov	r1, r3
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	f04f 0400 	mov.w	r4, #0
 8004674:	0094      	lsls	r4, r2, #2
 8004676:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800467a:	008b      	lsls	r3, r1, #2
 800467c:	461a      	mov	r2, r3
 800467e:	4623      	mov	r3, r4
 8004680:	4628      	mov	r0, r5
 8004682:	4631      	mov	r1, r6
 8004684:	f7fb fe1c 	bl	80002c0 <__aeabi_uldivmod>
 8004688:	4603      	mov	r3, r0
 800468a:	460c      	mov	r4, r1
 800468c:	461a      	mov	r2, r3
 800468e:	4b32      	ldr	r3, [pc, #200]	; (8004758 <UART_SetConfig+0x6f4>)
 8004690:	fba3 1302 	umull	r1, r3, r3, r2
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	2164      	movs	r1, #100	; 0x64
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	3332      	adds	r3, #50	; 0x32
 80046a2:	4a2d      	ldr	r2, [pc, #180]	; (8004758 <UART_SetConfig+0x6f4>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ae:	4498      	add	r8, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	469b      	mov	fp, r3
 80046b4:	f04f 0c00 	mov.w	ip, #0
 80046b8:	46d9      	mov	r9, fp
 80046ba:	46e2      	mov	sl, ip
 80046bc:	eb19 0309 	adds.w	r3, r9, r9
 80046c0:	eb4a 040a 	adc.w	r4, sl, sl
 80046c4:	4699      	mov	r9, r3
 80046c6:	46a2      	mov	sl, r4
 80046c8:	eb19 090b 	adds.w	r9, r9, fp
 80046cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046d0:	f04f 0100 	mov.w	r1, #0
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046e4:	4689      	mov	r9, r1
 80046e6:	4692      	mov	sl, r2
 80046e8:	eb1b 0509 	adds.w	r5, fp, r9
 80046ec:	eb4c 060a 	adc.w	r6, ip, sl
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4619      	mov	r1, r3
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	f04f 0400 	mov.w	r4, #0
 8004702:	0094      	lsls	r4, r2, #2
 8004704:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004708:	008b      	lsls	r3, r1, #2
 800470a:	461a      	mov	r2, r3
 800470c:	4623      	mov	r3, r4
 800470e:	4628      	mov	r0, r5
 8004710:	4631      	mov	r1, r6
 8004712:	f7fb fdd5 	bl	80002c0 <__aeabi_uldivmod>
 8004716:	4603      	mov	r3, r0
 8004718:	460c      	mov	r4, r1
 800471a:	461a      	mov	r2, r3
 800471c:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <UART_SetConfig+0x6f4>)
 800471e:	fba3 1302 	umull	r1, r3, r3, r2
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	2164      	movs	r1, #100	; 0x64
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	3332      	adds	r3, #50	; 0x32
 8004730:	4a09      	ldr	r2, [pc, #36]	; (8004758 <UART_SetConfig+0x6f4>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	f003 020f 	and.w	r2, r3, #15
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4442      	add	r2, r8
 8004742:	609a      	str	r2, [r3, #8]
}
 8004744:	e7ff      	b.n	8004746 <UART_SetConfig+0x6e2>
 8004746:	bf00      	nop
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004750:	40011000 	.word	0x40011000
 8004754:	40011400 	.word	0x40011400
 8004758:	51eb851f 	.word	0x51eb851f

0800475c <__errno>:
 800475c:	4b01      	ldr	r3, [pc, #4]	; (8004764 <__errno+0x8>)
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000010 	.word	0x20000010

08004768 <__libc_init_array>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	4e0d      	ldr	r6, [pc, #52]	; (80047a0 <__libc_init_array+0x38>)
 800476c:	4c0d      	ldr	r4, [pc, #52]	; (80047a4 <__libc_init_array+0x3c>)
 800476e:	1ba4      	subs	r4, r4, r6
 8004770:	10a4      	asrs	r4, r4, #2
 8004772:	2500      	movs	r5, #0
 8004774:	42a5      	cmp	r5, r4
 8004776:	d109      	bne.n	800478c <__libc_init_array+0x24>
 8004778:	4e0b      	ldr	r6, [pc, #44]	; (80047a8 <__libc_init_array+0x40>)
 800477a:	4c0c      	ldr	r4, [pc, #48]	; (80047ac <__libc_init_array+0x44>)
 800477c:	f000 fc26 	bl	8004fcc <_init>
 8004780:	1ba4      	subs	r4, r4, r6
 8004782:	10a4      	asrs	r4, r4, #2
 8004784:	2500      	movs	r5, #0
 8004786:	42a5      	cmp	r5, r4
 8004788:	d105      	bne.n	8004796 <__libc_init_array+0x2e>
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004790:	4798      	blx	r3
 8004792:	3501      	adds	r5, #1
 8004794:	e7ee      	b.n	8004774 <__libc_init_array+0xc>
 8004796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800479a:	4798      	blx	r3
 800479c:	3501      	adds	r5, #1
 800479e:	e7f2      	b.n	8004786 <__libc_init_array+0x1e>
 80047a0:	08005668 	.word	0x08005668
 80047a4:	08005668 	.word	0x08005668
 80047a8:	08005668 	.word	0x08005668
 80047ac:	0800566c 	.word	0x0800566c

080047b0 <memcpy>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	1e43      	subs	r3, r0, #1
 80047b4:	440a      	add	r2, r1
 80047b6:	4291      	cmp	r1, r2
 80047b8:	d100      	bne.n	80047bc <memcpy+0xc>
 80047ba:	bd10      	pop	{r4, pc}
 80047bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047c4:	e7f7      	b.n	80047b6 <memcpy+0x6>

080047c6 <memmove>:
 80047c6:	4288      	cmp	r0, r1
 80047c8:	b510      	push	{r4, lr}
 80047ca:	eb01 0302 	add.w	r3, r1, r2
 80047ce:	d807      	bhi.n	80047e0 <memmove+0x1a>
 80047d0:	1e42      	subs	r2, r0, #1
 80047d2:	4299      	cmp	r1, r3
 80047d4:	d00a      	beq.n	80047ec <memmove+0x26>
 80047d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80047de:	e7f8      	b.n	80047d2 <memmove+0xc>
 80047e0:	4283      	cmp	r3, r0
 80047e2:	d9f5      	bls.n	80047d0 <memmove+0xa>
 80047e4:	1881      	adds	r1, r0, r2
 80047e6:	1ad2      	subs	r2, r2, r3
 80047e8:	42d3      	cmn	r3, r2
 80047ea:	d100      	bne.n	80047ee <memmove+0x28>
 80047ec:	bd10      	pop	{r4, pc}
 80047ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80047f6:	e7f7      	b.n	80047e8 <memmove+0x22>

080047f8 <memset>:
 80047f8:	4402      	add	r2, r0
 80047fa:	4603      	mov	r3, r0
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d100      	bne.n	8004802 <memset+0xa>
 8004800:	4770      	bx	lr
 8004802:	f803 1b01 	strb.w	r1, [r3], #1
 8004806:	e7f9      	b.n	80047fc <memset+0x4>

08004808 <siprintf>:
 8004808:	b40e      	push	{r1, r2, r3}
 800480a:	b500      	push	{lr}
 800480c:	b09c      	sub	sp, #112	; 0x70
 800480e:	ab1d      	add	r3, sp, #116	; 0x74
 8004810:	9002      	str	r0, [sp, #8]
 8004812:	9006      	str	r0, [sp, #24]
 8004814:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004818:	4809      	ldr	r0, [pc, #36]	; (8004840 <siprintf+0x38>)
 800481a:	9107      	str	r1, [sp, #28]
 800481c:	9104      	str	r1, [sp, #16]
 800481e:	4909      	ldr	r1, [pc, #36]	; (8004844 <siprintf+0x3c>)
 8004820:	f853 2b04 	ldr.w	r2, [r3], #4
 8004824:	9105      	str	r1, [sp, #20]
 8004826:	6800      	ldr	r0, [r0, #0]
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	a902      	add	r1, sp, #8
 800482c:	f000 f866 	bl	80048fc <_svfiprintf_r>
 8004830:	9b02      	ldr	r3, [sp, #8]
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	b01c      	add	sp, #112	; 0x70
 8004838:	f85d eb04 	ldr.w	lr, [sp], #4
 800483c:	b003      	add	sp, #12
 800483e:	4770      	bx	lr
 8004840:	20000010 	.word	0x20000010
 8004844:	ffff0208 	.word	0xffff0208

08004848 <__ssputs_r>:
 8004848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800484c:	688e      	ldr	r6, [r1, #8]
 800484e:	429e      	cmp	r6, r3
 8004850:	4682      	mov	sl, r0
 8004852:	460c      	mov	r4, r1
 8004854:	4690      	mov	r8, r2
 8004856:	4699      	mov	r9, r3
 8004858:	d837      	bhi.n	80048ca <__ssputs_r+0x82>
 800485a:	898a      	ldrh	r2, [r1, #12]
 800485c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004860:	d031      	beq.n	80048c6 <__ssputs_r+0x7e>
 8004862:	6825      	ldr	r5, [r4, #0]
 8004864:	6909      	ldr	r1, [r1, #16]
 8004866:	1a6f      	subs	r7, r5, r1
 8004868:	6965      	ldr	r5, [r4, #20]
 800486a:	2302      	movs	r3, #2
 800486c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004870:	fb95 f5f3 	sdiv	r5, r5, r3
 8004874:	f109 0301 	add.w	r3, r9, #1
 8004878:	443b      	add	r3, r7
 800487a:	429d      	cmp	r5, r3
 800487c:	bf38      	it	cc
 800487e:	461d      	movcc	r5, r3
 8004880:	0553      	lsls	r3, r2, #21
 8004882:	d530      	bpl.n	80048e6 <__ssputs_r+0x9e>
 8004884:	4629      	mov	r1, r5
 8004886:	f000 fb07 	bl	8004e98 <_malloc_r>
 800488a:	4606      	mov	r6, r0
 800488c:	b950      	cbnz	r0, 80048a4 <__ssputs_r+0x5c>
 800488e:	230c      	movs	r3, #12
 8004890:	f8ca 3000 	str.w	r3, [sl]
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a4:	463a      	mov	r2, r7
 80048a6:	6921      	ldr	r1, [r4, #16]
 80048a8:	f7ff ff82 	bl	80047b0 <memcpy>
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	6126      	str	r6, [r4, #16]
 80048ba:	6165      	str	r5, [r4, #20]
 80048bc:	443e      	add	r6, r7
 80048be:	1bed      	subs	r5, r5, r7
 80048c0:	6026      	str	r6, [r4, #0]
 80048c2:	60a5      	str	r5, [r4, #8]
 80048c4:	464e      	mov	r6, r9
 80048c6:	454e      	cmp	r6, r9
 80048c8:	d900      	bls.n	80048cc <__ssputs_r+0x84>
 80048ca:	464e      	mov	r6, r9
 80048cc:	4632      	mov	r2, r6
 80048ce:	4641      	mov	r1, r8
 80048d0:	6820      	ldr	r0, [r4, #0]
 80048d2:	f7ff ff78 	bl	80047c6 <memmove>
 80048d6:	68a3      	ldr	r3, [r4, #8]
 80048d8:	1b9b      	subs	r3, r3, r6
 80048da:	60a3      	str	r3, [r4, #8]
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	441e      	add	r6, r3
 80048e0:	6026      	str	r6, [r4, #0]
 80048e2:	2000      	movs	r0, #0
 80048e4:	e7dc      	b.n	80048a0 <__ssputs_r+0x58>
 80048e6:	462a      	mov	r2, r5
 80048e8:	f000 fb30 	bl	8004f4c <_realloc_r>
 80048ec:	4606      	mov	r6, r0
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d1e2      	bne.n	80048b8 <__ssputs_r+0x70>
 80048f2:	6921      	ldr	r1, [r4, #16]
 80048f4:	4650      	mov	r0, sl
 80048f6:	f000 fa81 	bl	8004dfc <_free_r>
 80048fa:	e7c8      	b.n	800488e <__ssputs_r+0x46>

080048fc <_svfiprintf_r>:
 80048fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004900:	461d      	mov	r5, r3
 8004902:	898b      	ldrh	r3, [r1, #12]
 8004904:	061f      	lsls	r7, r3, #24
 8004906:	b09d      	sub	sp, #116	; 0x74
 8004908:	4680      	mov	r8, r0
 800490a:	460c      	mov	r4, r1
 800490c:	4616      	mov	r6, r2
 800490e:	d50f      	bpl.n	8004930 <_svfiprintf_r+0x34>
 8004910:	690b      	ldr	r3, [r1, #16]
 8004912:	b96b      	cbnz	r3, 8004930 <_svfiprintf_r+0x34>
 8004914:	2140      	movs	r1, #64	; 0x40
 8004916:	f000 fabf 	bl	8004e98 <_malloc_r>
 800491a:	6020      	str	r0, [r4, #0]
 800491c:	6120      	str	r0, [r4, #16]
 800491e:	b928      	cbnz	r0, 800492c <_svfiprintf_r+0x30>
 8004920:	230c      	movs	r3, #12
 8004922:	f8c8 3000 	str.w	r3, [r8]
 8004926:	f04f 30ff 	mov.w	r0, #4294967295
 800492a:	e0c8      	b.n	8004abe <_svfiprintf_r+0x1c2>
 800492c:	2340      	movs	r3, #64	; 0x40
 800492e:	6163      	str	r3, [r4, #20]
 8004930:	2300      	movs	r3, #0
 8004932:	9309      	str	r3, [sp, #36]	; 0x24
 8004934:	2320      	movs	r3, #32
 8004936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800493a:	2330      	movs	r3, #48	; 0x30
 800493c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004940:	9503      	str	r5, [sp, #12]
 8004942:	f04f 0b01 	mov.w	fp, #1
 8004946:	4637      	mov	r7, r6
 8004948:	463d      	mov	r5, r7
 800494a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800494e:	b10b      	cbz	r3, 8004954 <_svfiprintf_r+0x58>
 8004950:	2b25      	cmp	r3, #37	; 0x25
 8004952:	d13e      	bne.n	80049d2 <_svfiprintf_r+0xd6>
 8004954:	ebb7 0a06 	subs.w	sl, r7, r6
 8004958:	d00b      	beq.n	8004972 <_svfiprintf_r+0x76>
 800495a:	4653      	mov	r3, sl
 800495c:	4632      	mov	r2, r6
 800495e:	4621      	mov	r1, r4
 8004960:	4640      	mov	r0, r8
 8004962:	f7ff ff71 	bl	8004848 <__ssputs_r>
 8004966:	3001      	adds	r0, #1
 8004968:	f000 80a4 	beq.w	8004ab4 <_svfiprintf_r+0x1b8>
 800496c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800496e:	4453      	add	r3, sl
 8004970:	9309      	str	r3, [sp, #36]	; 0x24
 8004972:	783b      	ldrb	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 809d 	beq.w	8004ab4 <_svfiprintf_r+0x1b8>
 800497a:	2300      	movs	r3, #0
 800497c:	f04f 32ff 	mov.w	r2, #4294967295
 8004980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004984:	9304      	str	r3, [sp, #16]
 8004986:	9307      	str	r3, [sp, #28]
 8004988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800498c:	931a      	str	r3, [sp, #104]	; 0x68
 800498e:	462f      	mov	r7, r5
 8004990:	2205      	movs	r2, #5
 8004992:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004996:	4850      	ldr	r0, [pc, #320]	; (8004ad8 <_svfiprintf_r+0x1dc>)
 8004998:	f7fb fc42 	bl	8000220 <memchr>
 800499c:	9b04      	ldr	r3, [sp, #16]
 800499e:	b9d0      	cbnz	r0, 80049d6 <_svfiprintf_r+0xda>
 80049a0:	06d9      	lsls	r1, r3, #27
 80049a2:	bf44      	itt	mi
 80049a4:	2220      	movmi	r2, #32
 80049a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049aa:	071a      	lsls	r2, r3, #28
 80049ac:	bf44      	itt	mi
 80049ae:	222b      	movmi	r2, #43	; 0x2b
 80049b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049b4:	782a      	ldrb	r2, [r5, #0]
 80049b6:	2a2a      	cmp	r2, #42	; 0x2a
 80049b8:	d015      	beq.n	80049e6 <_svfiprintf_r+0xea>
 80049ba:	9a07      	ldr	r2, [sp, #28]
 80049bc:	462f      	mov	r7, r5
 80049be:	2000      	movs	r0, #0
 80049c0:	250a      	movs	r5, #10
 80049c2:	4639      	mov	r1, r7
 80049c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049c8:	3b30      	subs	r3, #48	; 0x30
 80049ca:	2b09      	cmp	r3, #9
 80049cc:	d94d      	bls.n	8004a6a <_svfiprintf_r+0x16e>
 80049ce:	b1b8      	cbz	r0, 8004a00 <_svfiprintf_r+0x104>
 80049d0:	e00f      	b.n	80049f2 <_svfiprintf_r+0xf6>
 80049d2:	462f      	mov	r7, r5
 80049d4:	e7b8      	b.n	8004948 <_svfiprintf_r+0x4c>
 80049d6:	4a40      	ldr	r2, [pc, #256]	; (8004ad8 <_svfiprintf_r+0x1dc>)
 80049d8:	1a80      	subs	r0, r0, r2
 80049da:	fa0b f000 	lsl.w	r0, fp, r0
 80049de:	4318      	orrs	r0, r3
 80049e0:	9004      	str	r0, [sp, #16]
 80049e2:	463d      	mov	r5, r7
 80049e4:	e7d3      	b.n	800498e <_svfiprintf_r+0x92>
 80049e6:	9a03      	ldr	r2, [sp, #12]
 80049e8:	1d11      	adds	r1, r2, #4
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	9103      	str	r1, [sp, #12]
 80049ee:	2a00      	cmp	r2, #0
 80049f0:	db01      	blt.n	80049f6 <_svfiprintf_r+0xfa>
 80049f2:	9207      	str	r2, [sp, #28]
 80049f4:	e004      	b.n	8004a00 <_svfiprintf_r+0x104>
 80049f6:	4252      	negs	r2, r2
 80049f8:	f043 0302 	orr.w	r3, r3, #2
 80049fc:	9207      	str	r2, [sp, #28]
 80049fe:	9304      	str	r3, [sp, #16]
 8004a00:	783b      	ldrb	r3, [r7, #0]
 8004a02:	2b2e      	cmp	r3, #46	; 0x2e
 8004a04:	d10c      	bne.n	8004a20 <_svfiprintf_r+0x124>
 8004a06:	787b      	ldrb	r3, [r7, #1]
 8004a08:	2b2a      	cmp	r3, #42	; 0x2a
 8004a0a:	d133      	bne.n	8004a74 <_svfiprintf_r+0x178>
 8004a0c:	9b03      	ldr	r3, [sp, #12]
 8004a0e:	1d1a      	adds	r2, r3, #4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	9203      	str	r2, [sp, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bfb8      	it	lt
 8004a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a1c:	3702      	adds	r7, #2
 8004a1e:	9305      	str	r3, [sp, #20]
 8004a20:	4d2e      	ldr	r5, [pc, #184]	; (8004adc <_svfiprintf_r+0x1e0>)
 8004a22:	7839      	ldrb	r1, [r7, #0]
 8004a24:	2203      	movs	r2, #3
 8004a26:	4628      	mov	r0, r5
 8004a28:	f7fb fbfa 	bl	8000220 <memchr>
 8004a2c:	b138      	cbz	r0, 8004a3e <_svfiprintf_r+0x142>
 8004a2e:	2340      	movs	r3, #64	; 0x40
 8004a30:	1b40      	subs	r0, r0, r5
 8004a32:	fa03 f000 	lsl.w	r0, r3, r0
 8004a36:	9b04      	ldr	r3, [sp, #16]
 8004a38:	4303      	orrs	r3, r0
 8004a3a:	3701      	adds	r7, #1
 8004a3c:	9304      	str	r3, [sp, #16]
 8004a3e:	7839      	ldrb	r1, [r7, #0]
 8004a40:	4827      	ldr	r0, [pc, #156]	; (8004ae0 <_svfiprintf_r+0x1e4>)
 8004a42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a46:	2206      	movs	r2, #6
 8004a48:	1c7e      	adds	r6, r7, #1
 8004a4a:	f7fb fbe9 	bl	8000220 <memchr>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d038      	beq.n	8004ac4 <_svfiprintf_r+0x1c8>
 8004a52:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <_svfiprintf_r+0x1e8>)
 8004a54:	bb13      	cbnz	r3, 8004a9c <_svfiprintf_r+0x1a0>
 8004a56:	9b03      	ldr	r3, [sp, #12]
 8004a58:	3307      	adds	r3, #7
 8004a5a:	f023 0307 	bic.w	r3, r3, #7
 8004a5e:	3308      	adds	r3, #8
 8004a60:	9303      	str	r3, [sp, #12]
 8004a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a64:	444b      	add	r3, r9
 8004a66:	9309      	str	r3, [sp, #36]	; 0x24
 8004a68:	e76d      	b.n	8004946 <_svfiprintf_r+0x4a>
 8004a6a:	fb05 3202 	mla	r2, r5, r2, r3
 8004a6e:	2001      	movs	r0, #1
 8004a70:	460f      	mov	r7, r1
 8004a72:	e7a6      	b.n	80049c2 <_svfiprintf_r+0xc6>
 8004a74:	2300      	movs	r3, #0
 8004a76:	3701      	adds	r7, #1
 8004a78:	9305      	str	r3, [sp, #20]
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	250a      	movs	r5, #10
 8004a7e:	4638      	mov	r0, r7
 8004a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a84:	3a30      	subs	r2, #48	; 0x30
 8004a86:	2a09      	cmp	r2, #9
 8004a88:	d903      	bls.n	8004a92 <_svfiprintf_r+0x196>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0c8      	beq.n	8004a20 <_svfiprintf_r+0x124>
 8004a8e:	9105      	str	r1, [sp, #20]
 8004a90:	e7c6      	b.n	8004a20 <_svfiprintf_r+0x124>
 8004a92:	fb05 2101 	mla	r1, r5, r1, r2
 8004a96:	2301      	movs	r3, #1
 8004a98:	4607      	mov	r7, r0
 8004a9a:	e7f0      	b.n	8004a7e <_svfiprintf_r+0x182>
 8004a9c:	ab03      	add	r3, sp, #12
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <_svfiprintf_r+0x1ec>)
 8004aa4:	a904      	add	r1, sp, #16
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	f3af 8000 	nop.w
 8004aac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ab0:	4681      	mov	r9, r0
 8004ab2:	d1d6      	bne.n	8004a62 <_svfiprintf_r+0x166>
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	065b      	lsls	r3, r3, #25
 8004ab8:	f53f af35 	bmi.w	8004926 <_svfiprintf_r+0x2a>
 8004abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004abe:	b01d      	add	sp, #116	; 0x74
 8004ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac4:	ab03      	add	r3, sp, #12
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	4622      	mov	r2, r4
 8004aca:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <_svfiprintf_r+0x1ec>)
 8004acc:	a904      	add	r1, sp, #16
 8004ace:	4640      	mov	r0, r8
 8004ad0:	f000 f882 	bl	8004bd8 <_printf_i>
 8004ad4:	e7ea      	b.n	8004aac <_svfiprintf_r+0x1b0>
 8004ad6:	bf00      	nop
 8004ad8:	0800562c 	.word	0x0800562c
 8004adc:	08005632 	.word	0x08005632
 8004ae0:	08005636 	.word	0x08005636
 8004ae4:	00000000 	.word	0x00000000
 8004ae8:	08004849 	.word	0x08004849

08004aec <_printf_common>:
 8004aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af0:	4691      	mov	r9, r2
 8004af2:	461f      	mov	r7, r3
 8004af4:	688a      	ldr	r2, [r1, #8]
 8004af6:	690b      	ldr	r3, [r1, #16]
 8004af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004afc:	4293      	cmp	r3, r2
 8004afe:	bfb8      	it	lt
 8004b00:	4613      	movlt	r3, r2
 8004b02:	f8c9 3000 	str.w	r3, [r9]
 8004b06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	b112      	cbz	r2, 8004b16 <_printf_common+0x2a>
 8004b10:	3301      	adds	r3, #1
 8004b12:	f8c9 3000 	str.w	r3, [r9]
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	0699      	lsls	r1, r3, #26
 8004b1a:	bf42      	ittt	mi
 8004b1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b20:	3302      	addmi	r3, #2
 8004b22:	f8c9 3000 	strmi.w	r3, [r9]
 8004b26:	6825      	ldr	r5, [r4, #0]
 8004b28:	f015 0506 	ands.w	r5, r5, #6
 8004b2c:	d107      	bne.n	8004b3e <_printf_common+0x52>
 8004b2e:	f104 0a19 	add.w	sl, r4, #25
 8004b32:	68e3      	ldr	r3, [r4, #12]
 8004b34:	f8d9 2000 	ldr.w	r2, [r9]
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	42ab      	cmp	r3, r5
 8004b3c:	dc28      	bgt.n	8004b90 <_printf_common+0xa4>
 8004b3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	3300      	adds	r3, #0
 8004b46:	bf18      	it	ne
 8004b48:	2301      	movne	r3, #1
 8004b4a:	0692      	lsls	r2, r2, #26
 8004b4c:	d42d      	bmi.n	8004baa <_printf_common+0xbe>
 8004b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b52:	4639      	mov	r1, r7
 8004b54:	4630      	mov	r0, r6
 8004b56:	47c0      	blx	r8
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d020      	beq.n	8004b9e <_printf_common+0xb2>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	68e5      	ldr	r5, [r4, #12]
 8004b60:	f8d9 2000 	ldr.w	r2, [r9]
 8004b64:	f003 0306 	and.w	r3, r3, #6
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	bf08      	it	eq
 8004b6c:	1aad      	subeq	r5, r5, r2
 8004b6e:	68a3      	ldr	r3, [r4, #8]
 8004b70:	6922      	ldr	r2, [r4, #16]
 8004b72:	bf0c      	ite	eq
 8004b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b78:	2500      	movne	r5, #0
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	bfc4      	itt	gt
 8004b7e:	1a9b      	subgt	r3, r3, r2
 8004b80:	18ed      	addgt	r5, r5, r3
 8004b82:	f04f 0900 	mov.w	r9, #0
 8004b86:	341a      	adds	r4, #26
 8004b88:	454d      	cmp	r5, r9
 8004b8a:	d11a      	bne.n	8004bc2 <_printf_common+0xd6>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	e008      	b.n	8004ba2 <_printf_common+0xb6>
 8004b90:	2301      	movs	r3, #1
 8004b92:	4652      	mov	r2, sl
 8004b94:	4639      	mov	r1, r7
 8004b96:	4630      	mov	r0, r6
 8004b98:	47c0      	blx	r8
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d103      	bne.n	8004ba6 <_printf_common+0xba>
 8004b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	e7c3      	b.n	8004b32 <_printf_common+0x46>
 8004baa:	18e1      	adds	r1, r4, r3
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	2030      	movs	r0, #48	; 0x30
 8004bb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bb4:	4422      	add	r2, r4
 8004bb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	e7c5      	b.n	8004b4e <_printf_common+0x62>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	4639      	mov	r1, r7
 8004bc8:	4630      	mov	r0, r6
 8004bca:	47c0      	blx	r8
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d0e6      	beq.n	8004b9e <_printf_common+0xb2>
 8004bd0:	f109 0901 	add.w	r9, r9, #1
 8004bd4:	e7d8      	b.n	8004b88 <_printf_common+0x9c>
	...

08004bd8 <_printf_i>:
 8004bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004be0:	460c      	mov	r4, r1
 8004be2:	7e09      	ldrb	r1, [r1, #24]
 8004be4:	b085      	sub	sp, #20
 8004be6:	296e      	cmp	r1, #110	; 0x6e
 8004be8:	4617      	mov	r7, r2
 8004bea:	4606      	mov	r6, r0
 8004bec:	4698      	mov	r8, r3
 8004bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bf0:	f000 80b3 	beq.w	8004d5a <_printf_i+0x182>
 8004bf4:	d822      	bhi.n	8004c3c <_printf_i+0x64>
 8004bf6:	2963      	cmp	r1, #99	; 0x63
 8004bf8:	d036      	beq.n	8004c68 <_printf_i+0x90>
 8004bfa:	d80a      	bhi.n	8004c12 <_printf_i+0x3a>
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	f000 80b9 	beq.w	8004d74 <_printf_i+0x19c>
 8004c02:	2958      	cmp	r1, #88	; 0x58
 8004c04:	f000 8083 	beq.w	8004d0e <_printf_i+0x136>
 8004c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c10:	e032      	b.n	8004c78 <_printf_i+0xa0>
 8004c12:	2964      	cmp	r1, #100	; 0x64
 8004c14:	d001      	beq.n	8004c1a <_printf_i+0x42>
 8004c16:	2969      	cmp	r1, #105	; 0x69
 8004c18:	d1f6      	bne.n	8004c08 <_printf_i+0x30>
 8004c1a:	6820      	ldr	r0, [r4, #0]
 8004c1c:	6813      	ldr	r3, [r2, #0]
 8004c1e:	0605      	lsls	r5, r0, #24
 8004c20:	f103 0104 	add.w	r1, r3, #4
 8004c24:	d52a      	bpl.n	8004c7c <_printf_i+0xa4>
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6011      	str	r1, [r2, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	da03      	bge.n	8004c36 <_printf_i+0x5e>
 8004c2e:	222d      	movs	r2, #45	; 0x2d
 8004c30:	425b      	negs	r3, r3
 8004c32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c36:	486f      	ldr	r0, [pc, #444]	; (8004df4 <_printf_i+0x21c>)
 8004c38:	220a      	movs	r2, #10
 8004c3a:	e039      	b.n	8004cb0 <_printf_i+0xd8>
 8004c3c:	2973      	cmp	r1, #115	; 0x73
 8004c3e:	f000 809d 	beq.w	8004d7c <_printf_i+0x1a4>
 8004c42:	d808      	bhi.n	8004c56 <_printf_i+0x7e>
 8004c44:	296f      	cmp	r1, #111	; 0x6f
 8004c46:	d020      	beq.n	8004c8a <_printf_i+0xb2>
 8004c48:	2970      	cmp	r1, #112	; 0x70
 8004c4a:	d1dd      	bne.n	8004c08 <_printf_i+0x30>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	f043 0320 	orr.w	r3, r3, #32
 8004c52:	6023      	str	r3, [r4, #0]
 8004c54:	e003      	b.n	8004c5e <_printf_i+0x86>
 8004c56:	2975      	cmp	r1, #117	; 0x75
 8004c58:	d017      	beq.n	8004c8a <_printf_i+0xb2>
 8004c5a:	2978      	cmp	r1, #120	; 0x78
 8004c5c:	d1d4      	bne.n	8004c08 <_printf_i+0x30>
 8004c5e:	2378      	movs	r3, #120	; 0x78
 8004c60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c64:	4864      	ldr	r0, [pc, #400]	; (8004df8 <_printf_i+0x220>)
 8004c66:	e055      	b.n	8004d14 <_printf_i+0x13c>
 8004c68:	6813      	ldr	r3, [r2, #0]
 8004c6a:	1d19      	adds	r1, r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6011      	str	r1, [r2, #0]
 8004c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e08c      	b.n	8004d96 <_printf_i+0x1be>
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6011      	str	r1, [r2, #0]
 8004c80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c84:	bf18      	it	ne
 8004c86:	b21b      	sxthne	r3, r3
 8004c88:	e7cf      	b.n	8004c2a <_printf_i+0x52>
 8004c8a:	6813      	ldr	r3, [r2, #0]
 8004c8c:	6825      	ldr	r5, [r4, #0]
 8004c8e:	1d18      	adds	r0, r3, #4
 8004c90:	6010      	str	r0, [r2, #0]
 8004c92:	0628      	lsls	r0, r5, #24
 8004c94:	d501      	bpl.n	8004c9a <_printf_i+0xc2>
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	e002      	b.n	8004ca0 <_printf_i+0xc8>
 8004c9a:	0668      	lsls	r0, r5, #25
 8004c9c:	d5fb      	bpl.n	8004c96 <_printf_i+0xbe>
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	4854      	ldr	r0, [pc, #336]	; (8004df4 <_printf_i+0x21c>)
 8004ca2:	296f      	cmp	r1, #111	; 0x6f
 8004ca4:	bf14      	ite	ne
 8004ca6:	220a      	movne	r2, #10
 8004ca8:	2208      	moveq	r2, #8
 8004caa:	2100      	movs	r1, #0
 8004cac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cb0:	6865      	ldr	r5, [r4, #4]
 8004cb2:	60a5      	str	r5, [r4, #8]
 8004cb4:	2d00      	cmp	r5, #0
 8004cb6:	f2c0 8095 	blt.w	8004de4 <_printf_i+0x20c>
 8004cba:	6821      	ldr	r1, [r4, #0]
 8004cbc:	f021 0104 	bic.w	r1, r1, #4
 8004cc0:	6021      	str	r1, [r4, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d13d      	bne.n	8004d42 <_printf_i+0x16a>
 8004cc6:	2d00      	cmp	r5, #0
 8004cc8:	f040 808e 	bne.w	8004de8 <_printf_i+0x210>
 8004ccc:	4665      	mov	r5, ip
 8004cce:	2a08      	cmp	r2, #8
 8004cd0:	d10b      	bne.n	8004cea <_printf_i+0x112>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	07db      	lsls	r3, r3, #31
 8004cd6:	d508      	bpl.n	8004cea <_printf_i+0x112>
 8004cd8:	6923      	ldr	r3, [r4, #16]
 8004cda:	6862      	ldr	r2, [r4, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	bfde      	ittt	le
 8004ce0:	2330      	movle	r3, #48	; 0x30
 8004ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ce6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cea:	ebac 0305 	sub.w	r3, ip, r5
 8004cee:	6123      	str	r3, [r4, #16]
 8004cf0:	f8cd 8000 	str.w	r8, [sp]
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	aa03      	add	r2, sp, #12
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7ff fef6 	bl	8004aec <_printf_common>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d14d      	bne.n	8004da0 <_printf_i+0x1c8>
 8004d04:	f04f 30ff 	mov.w	r0, #4294967295
 8004d08:	b005      	add	sp, #20
 8004d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d0e:	4839      	ldr	r0, [pc, #228]	; (8004df4 <_printf_i+0x21c>)
 8004d10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d14:	6813      	ldr	r3, [r2, #0]
 8004d16:	6821      	ldr	r1, [r4, #0]
 8004d18:	1d1d      	adds	r5, r3, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6015      	str	r5, [r2, #0]
 8004d1e:	060a      	lsls	r2, r1, #24
 8004d20:	d50b      	bpl.n	8004d3a <_printf_i+0x162>
 8004d22:	07ca      	lsls	r2, r1, #31
 8004d24:	bf44      	itt	mi
 8004d26:	f041 0120 	orrmi.w	r1, r1, #32
 8004d2a:	6021      	strmi	r1, [r4, #0]
 8004d2c:	b91b      	cbnz	r3, 8004d36 <_printf_i+0x15e>
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	f022 0220 	bic.w	r2, r2, #32
 8004d34:	6022      	str	r2, [r4, #0]
 8004d36:	2210      	movs	r2, #16
 8004d38:	e7b7      	b.n	8004caa <_printf_i+0xd2>
 8004d3a:	064d      	lsls	r5, r1, #25
 8004d3c:	bf48      	it	mi
 8004d3e:	b29b      	uxthmi	r3, r3
 8004d40:	e7ef      	b.n	8004d22 <_printf_i+0x14a>
 8004d42:	4665      	mov	r5, ip
 8004d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d48:	fb02 3311 	mls	r3, r2, r1, r3
 8004d4c:	5cc3      	ldrb	r3, [r0, r3]
 8004d4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d52:	460b      	mov	r3, r1
 8004d54:	2900      	cmp	r1, #0
 8004d56:	d1f5      	bne.n	8004d44 <_printf_i+0x16c>
 8004d58:	e7b9      	b.n	8004cce <_printf_i+0xf6>
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	6825      	ldr	r5, [r4, #0]
 8004d5e:	6961      	ldr	r1, [r4, #20]
 8004d60:	1d18      	adds	r0, r3, #4
 8004d62:	6010      	str	r0, [r2, #0]
 8004d64:	0628      	lsls	r0, r5, #24
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	d501      	bpl.n	8004d6e <_printf_i+0x196>
 8004d6a:	6019      	str	r1, [r3, #0]
 8004d6c:	e002      	b.n	8004d74 <_printf_i+0x19c>
 8004d6e:	066a      	lsls	r2, r5, #25
 8004d70:	d5fb      	bpl.n	8004d6a <_printf_i+0x192>
 8004d72:	8019      	strh	r1, [r3, #0]
 8004d74:	2300      	movs	r3, #0
 8004d76:	6123      	str	r3, [r4, #16]
 8004d78:	4665      	mov	r5, ip
 8004d7a:	e7b9      	b.n	8004cf0 <_printf_i+0x118>
 8004d7c:	6813      	ldr	r3, [r2, #0]
 8004d7e:	1d19      	adds	r1, r3, #4
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	681d      	ldr	r5, [r3, #0]
 8004d84:	6862      	ldr	r2, [r4, #4]
 8004d86:	2100      	movs	r1, #0
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f7fb fa49 	bl	8000220 <memchr>
 8004d8e:	b108      	cbz	r0, 8004d94 <_printf_i+0x1bc>
 8004d90:	1b40      	subs	r0, r0, r5
 8004d92:	6060      	str	r0, [r4, #4]
 8004d94:	6863      	ldr	r3, [r4, #4]
 8004d96:	6123      	str	r3, [r4, #16]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9e:	e7a7      	b.n	8004cf0 <_printf_i+0x118>
 8004da0:	6923      	ldr	r3, [r4, #16]
 8004da2:	462a      	mov	r2, r5
 8004da4:	4639      	mov	r1, r7
 8004da6:	4630      	mov	r0, r6
 8004da8:	47c0      	blx	r8
 8004daa:	3001      	adds	r0, #1
 8004dac:	d0aa      	beq.n	8004d04 <_printf_i+0x12c>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	079b      	lsls	r3, r3, #30
 8004db2:	d413      	bmi.n	8004ddc <_printf_i+0x204>
 8004db4:	68e0      	ldr	r0, [r4, #12]
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	4298      	cmp	r0, r3
 8004dba:	bfb8      	it	lt
 8004dbc:	4618      	movlt	r0, r3
 8004dbe:	e7a3      	b.n	8004d08 <_printf_i+0x130>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	464a      	mov	r2, r9
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	47c0      	blx	r8
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d09a      	beq.n	8004d04 <_printf_i+0x12c>
 8004dce:	3501      	adds	r5, #1
 8004dd0:	68e3      	ldr	r3, [r4, #12]
 8004dd2:	9a03      	ldr	r2, [sp, #12]
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	42ab      	cmp	r3, r5
 8004dd8:	dcf2      	bgt.n	8004dc0 <_printf_i+0x1e8>
 8004dda:	e7eb      	b.n	8004db4 <_printf_i+0x1dc>
 8004ddc:	2500      	movs	r5, #0
 8004dde:	f104 0919 	add.w	r9, r4, #25
 8004de2:	e7f5      	b.n	8004dd0 <_printf_i+0x1f8>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1ac      	bne.n	8004d42 <_printf_i+0x16a>
 8004de8:	7803      	ldrb	r3, [r0, #0]
 8004dea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df2:	e76c      	b.n	8004cce <_printf_i+0xf6>
 8004df4:	0800563d 	.word	0x0800563d
 8004df8:	0800564e 	.word	0x0800564e

08004dfc <_free_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4605      	mov	r5, r0
 8004e00:	2900      	cmp	r1, #0
 8004e02:	d045      	beq.n	8004e90 <_free_r+0x94>
 8004e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e08:	1f0c      	subs	r4, r1, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bfb8      	it	lt
 8004e0e:	18e4      	addlt	r4, r4, r3
 8004e10:	f000 f8d2 	bl	8004fb8 <__malloc_lock>
 8004e14:	4a1f      	ldr	r2, [pc, #124]	; (8004e94 <_free_r+0x98>)
 8004e16:	6813      	ldr	r3, [r2, #0]
 8004e18:	4610      	mov	r0, r2
 8004e1a:	b933      	cbnz	r3, 8004e2a <_free_r+0x2e>
 8004e1c:	6063      	str	r3, [r4, #4]
 8004e1e:	6014      	str	r4, [r2, #0]
 8004e20:	4628      	mov	r0, r5
 8004e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e26:	f000 b8c8 	b.w	8004fba <__malloc_unlock>
 8004e2a:	42a3      	cmp	r3, r4
 8004e2c:	d90c      	bls.n	8004e48 <_free_r+0x4c>
 8004e2e:	6821      	ldr	r1, [r4, #0]
 8004e30:	1862      	adds	r2, r4, r1
 8004e32:	4293      	cmp	r3, r2
 8004e34:	bf04      	itt	eq
 8004e36:	681a      	ldreq	r2, [r3, #0]
 8004e38:	685b      	ldreq	r3, [r3, #4]
 8004e3a:	6063      	str	r3, [r4, #4]
 8004e3c:	bf04      	itt	eq
 8004e3e:	1852      	addeq	r2, r2, r1
 8004e40:	6022      	streq	r2, [r4, #0]
 8004e42:	6004      	str	r4, [r0, #0]
 8004e44:	e7ec      	b.n	8004e20 <_free_r+0x24>
 8004e46:	4613      	mov	r3, r2
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	b10a      	cbz	r2, 8004e50 <_free_r+0x54>
 8004e4c:	42a2      	cmp	r2, r4
 8004e4e:	d9fa      	bls.n	8004e46 <_free_r+0x4a>
 8004e50:	6819      	ldr	r1, [r3, #0]
 8004e52:	1858      	adds	r0, r3, r1
 8004e54:	42a0      	cmp	r0, r4
 8004e56:	d10b      	bne.n	8004e70 <_free_r+0x74>
 8004e58:	6820      	ldr	r0, [r4, #0]
 8004e5a:	4401      	add	r1, r0
 8004e5c:	1858      	adds	r0, r3, r1
 8004e5e:	4282      	cmp	r2, r0
 8004e60:	6019      	str	r1, [r3, #0]
 8004e62:	d1dd      	bne.n	8004e20 <_free_r+0x24>
 8004e64:	6810      	ldr	r0, [r2, #0]
 8004e66:	6852      	ldr	r2, [r2, #4]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	4401      	add	r1, r0
 8004e6c:	6019      	str	r1, [r3, #0]
 8004e6e:	e7d7      	b.n	8004e20 <_free_r+0x24>
 8004e70:	d902      	bls.n	8004e78 <_free_r+0x7c>
 8004e72:	230c      	movs	r3, #12
 8004e74:	602b      	str	r3, [r5, #0]
 8004e76:	e7d3      	b.n	8004e20 <_free_r+0x24>
 8004e78:	6820      	ldr	r0, [r4, #0]
 8004e7a:	1821      	adds	r1, r4, r0
 8004e7c:	428a      	cmp	r2, r1
 8004e7e:	bf04      	itt	eq
 8004e80:	6811      	ldreq	r1, [r2, #0]
 8004e82:	6852      	ldreq	r2, [r2, #4]
 8004e84:	6062      	str	r2, [r4, #4]
 8004e86:	bf04      	itt	eq
 8004e88:	1809      	addeq	r1, r1, r0
 8004e8a:	6021      	streq	r1, [r4, #0]
 8004e8c:	605c      	str	r4, [r3, #4]
 8004e8e:	e7c7      	b.n	8004e20 <_free_r+0x24>
 8004e90:	bd38      	pop	{r3, r4, r5, pc}
 8004e92:	bf00      	nop
 8004e94:	200000b8 	.word	0x200000b8

08004e98 <_malloc_r>:
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	1ccd      	adds	r5, r1, #3
 8004e9c:	f025 0503 	bic.w	r5, r5, #3
 8004ea0:	3508      	adds	r5, #8
 8004ea2:	2d0c      	cmp	r5, #12
 8004ea4:	bf38      	it	cc
 8004ea6:	250c      	movcc	r5, #12
 8004ea8:	2d00      	cmp	r5, #0
 8004eaa:	4606      	mov	r6, r0
 8004eac:	db01      	blt.n	8004eb2 <_malloc_r+0x1a>
 8004eae:	42a9      	cmp	r1, r5
 8004eb0:	d903      	bls.n	8004eba <_malloc_r+0x22>
 8004eb2:	230c      	movs	r3, #12
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}
 8004eba:	f000 f87d 	bl	8004fb8 <__malloc_lock>
 8004ebe:	4a21      	ldr	r2, [pc, #132]	; (8004f44 <_malloc_r+0xac>)
 8004ec0:	6814      	ldr	r4, [r2, #0]
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	b991      	cbnz	r1, 8004eec <_malloc_r+0x54>
 8004ec6:	4c20      	ldr	r4, [pc, #128]	; (8004f48 <_malloc_r+0xb0>)
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	b91b      	cbnz	r3, 8004ed4 <_malloc_r+0x3c>
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f000 f863 	bl	8004f98 <_sbrk_r>
 8004ed2:	6020      	str	r0, [r4, #0]
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 f85e 	bl	8004f98 <_sbrk_r>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d124      	bne.n	8004f2a <_malloc_r+0x92>
 8004ee0:	230c      	movs	r3, #12
 8004ee2:	6033      	str	r3, [r6, #0]
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f000 f868 	bl	8004fba <__malloc_unlock>
 8004eea:	e7e4      	b.n	8004eb6 <_malloc_r+0x1e>
 8004eec:	680b      	ldr	r3, [r1, #0]
 8004eee:	1b5b      	subs	r3, r3, r5
 8004ef0:	d418      	bmi.n	8004f24 <_malloc_r+0x8c>
 8004ef2:	2b0b      	cmp	r3, #11
 8004ef4:	d90f      	bls.n	8004f16 <_malloc_r+0x7e>
 8004ef6:	600b      	str	r3, [r1, #0]
 8004ef8:	50cd      	str	r5, [r1, r3]
 8004efa:	18cc      	adds	r4, r1, r3
 8004efc:	4630      	mov	r0, r6
 8004efe:	f000 f85c 	bl	8004fba <__malloc_unlock>
 8004f02:	f104 000b 	add.w	r0, r4, #11
 8004f06:	1d23      	adds	r3, r4, #4
 8004f08:	f020 0007 	bic.w	r0, r0, #7
 8004f0c:	1ac3      	subs	r3, r0, r3
 8004f0e:	d0d3      	beq.n	8004eb8 <_malloc_r+0x20>
 8004f10:	425a      	negs	r2, r3
 8004f12:	50e2      	str	r2, [r4, r3]
 8004f14:	e7d0      	b.n	8004eb8 <_malloc_r+0x20>
 8004f16:	428c      	cmp	r4, r1
 8004f18:	684b      	ldr	r3, [r1, #4]
 8004f1a:	bf16      	itet	ne
 8004f1c:	6063      	strne	r3, [r4, #4]
 8004f1e:	6013      	streq	r3, [r2, #0]
 8004f20:	460c      	movne	r4, r1
 8004f22:	e7eb      	b.n	8004efc <_malloc_r+0x64>
 8004f24:	460c      	mov	r4, r1
 8004f26:	6849      	ldr	r1, [r1, #4]
 8004f28:	e7cc      	b.n	8004ec4 <_malloc_r+0x2c>
 8004f2a:	1cc4      	adds	r4, r0, #3
 8004f2c:	f024 0403 	bic.w	r4, r4, #3
 8004f30:	42a0      	cmp	r0, r4
 8004f32:	d005      	beq.n	8004f40 <_malloc_r+0xa8>
 8004f34:	1a21      	subs	r1, r4, r0
 8004f36:	4630      	mov	r0, r6
 8004f38:	f000 f82e 	bl	8004f98 <_sbrk_r>
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d0cf      	beq.n	8004ee0 <_malloc_r+0x48>
 8004f40:	6025      	str	r5, [r4, #0]
 8004f42:	e7db      	b.n	8004efc <_malloc_r+0x64>
 8004f44:	200000b8 	.word	0x200000b8
 8004f48:	200000bc 	.word	0x200000bc

08004f4c <_realloc_r>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	4607      	mov	r7, r0
 8004f50:	4614      	mov	r4, r2
 8004f52:	460e      	mov	r6, r1
 8004f54:	b921      	cbnz	r1, 8004f60 <_realloc_r+0x14>
 8004f56:	4611      	mov	r1, r2
 8004f58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f5c:	f7ff bf9c 	b.w	8004e98 <_malloc_r>
 8004f60:	b922      	cbnz	r2, 8004f6c <_realloc_r+0x20>
 8004f62:	f7ff ff4b 	bl	8004dfc <_free_r>
 8004f66:	4625      	mov	r5, r4
 8004f68:	4628      	mov	r0, r5
 8004f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f6c:	f000 f826 	bl	8004fbc <_malloc_usable_size_r>
 8004f70:	42a0      	cmp	r0, r4
 8004f72:	d20f      	bcs.n	8004f94 <_realloc_r+0x48>
 8004f74:	4621      	mov	r1, r4
 8004f76:	4638      	mov	r0, r7
 8004f78:	f7ff ff8e 	bl	8004e98 <_malloc_r>
 8004f7c:	4605      	mov	r5, r0
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d0f2      	beq.n	8004f68 <_realloc_r+0x1c>
 8004f82:	4631      	mov	r1, r6
 8004f84:	4622      	mov	r2, r4
 8004f86:	f7ff fc13 	bl	80047b0 <memcpy>
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	4638      	mov	r0, r7
 8004f8e:	f7ff ff35 	bl	8004dfc <_free_r>
 8004f92:	e7e9      	b.n	8004f68 <_realloc_r+0x1c>
 8004f94:	4635      	mov	r5, r6
 8004f96:	e7e7      	b.n	8004f68 <_realloc_r+0x1c>

08004f98 <_sbrk_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4c06      	ldr	r4, [pc, #24]	; (8004fb4 <_sbrk_r+0x1c>)
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	f7fc fb26 	bl	80015f4 <_sbrk>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_sbrk_r+0x1a>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_sbrk_r+0x1a>
 8004fb0:	602b      	str	r3, [r5, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	20002e04 	.word	0x20002e04

08004fb8 <__malloc_lock>:
 8004fb8:	4770      	bx	lr

08004fba <__malloc_unlock>:
 8004fba:	4770      	bx	lr

08004fbc <_malloc_usable_size_r>:
 8004fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc0:	1f18      	subs	r0, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bfbc      	itt	lt
 8004fc6:	580b      	ldrlt	r3, [r1, r0]
 8004fc8:	18c0      	addlt	r0, r0, r3
 8004fca:	4770      	bx	lr

08004fcc <_init>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	bf00      	nop
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr

08004fd8 <_fini>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr
