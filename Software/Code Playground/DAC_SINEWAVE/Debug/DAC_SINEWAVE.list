
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  080088a0  080088a0  000188a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f08  08008f08  000209e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f10  08008f10  000209e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f10  08008f10  00018f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f14  08008f14  00018f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e8  20000000  08008f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d88  200009e8  08009900  000209e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003770  08009900  00023770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dc5  00000000  00000000  00020a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000271a  00000000  00000000  000327dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00034ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00035e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002307c  00000000  00000000  00036c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c37a  00000000  00000000  00059ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d28c5  00000000  00000000  00066046  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013890b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000468c  00000000  00000000  00138988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e8 	.word	0x200009e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008884 	.word	0x08008884

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009ec 	.word	0x200009ec
 800020c:	08008884 	.word	0x08008884

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b972 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	4688      	mov	r8, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14b      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4615      	mov	r5, r2
 8000c1a:	d967      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0720 	rsb	r7, r2, #32
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c2e:	4095      	lsls	r5, r2
 8000c30:	ea47 0803 	orr.w	r8, r7, r3
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c40:	fa1f fc85 	uxth.w	ip, r5
 8000c44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5a:	f080 811b 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8118 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c64:	3f02      	subs	r7, #2
 8000c66:	442b      	add	r3, r5
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8107 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	f240 8104 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c90:	3802      	subs	r0, #2
 8000c92:	442c      	add	r4, r5
 8000c94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c98:	eba4 040c 	sub.w	r4, r4, ip
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	b11e      	cbz	r6, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca8:	4639      	mov	r1, r7
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0xbe>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80eb 	beq.w	8000e8e <__udivmoddi4+0x286>
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e9c6 0100 	strd	r0, r1, [r6]
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	fab3 f783 	clz	r7, r3
 8000cca:	2f00      	cmp	r7, #0
 8000ccc:	d147      	bne.n	8000d5e <__udivmoddi4+0x156>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xd0>
 8000cd2:	4282      	cmp	r2, r0
 8000cd4:	f200 80fa 	bhi.w	8000ecc <__udivmoddi4+0x2c4>
 8000cd8:	1a84      	subs	r4, r0, r2
 8000cda:	eb61 0303 	sbc.w	r3, r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d0e0      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000ce6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cea:	e7dd      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000cec:	b902      	cbnz	r2, 8000cf0 <__udivmoddi4+0xe8>
 8000cee:	deff      	udf	#255	; 0xff
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f040 808f 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cfa:	1b49      	subs	r1, r1, r5
 8000cfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d00:	fa1f f885 	uxth.w	r8, r5
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d14:	fb08 f10c 	mul.w	r1, r8, ip
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4299      	cmp	r1, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x14c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x14a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80b6 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e79f      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d62:	40bb      	lsls	r3, r7
 8000d64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d7c:	4325      	orrs	r5, r4
 8000d7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d82:	0c2c      	lsrs	r4, r5, #16
 8000d84:	fb08 3319 	mls	r3, r8, r9, r3
 8000d88:	fa1f fa8e 	uxth.w	sl, lr
 8000d8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d90:	fb09 f40a 	mul.w	r4, r9, sl
 8000d94:	429c      	cmp	r4, r3
 8000d96:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1e 0303 	adds.w	r3, lr, r3
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	f080 8087 	bcs.w	8000eba <__udivmoddi4+0x2b2>
 8000dac:	429c      	cmp	r4, r3
 8000dae:	f240 8084 	bls.w	8000eba <__udivmoddi4+0x2b2>
 8000db2:	f1a9 0902 	sub.w	r9, r9, #2
 8000db6:	4473      	add	r3, lr
 8000db8:	1b1b      	subs	r3, r3, r4
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dcc:	45a2      	cmp	sl, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	d26b      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dda:	45a2      	cmp	sl, r4
 8000ddc:	d969      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4474      	add	r4, lr
 8000de2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	eba4 040a 	sub.w	r4, r4, sl
 8000dee:	454c      	cmp	r4, r9
 8000df0:	46c2      	mov	sl, r8
 8000df2:	464b      	mov	r3, r9
 8000df4:	d354      	bcc.n	8000ea0 <__udivmoddi4+0x298>
 8000df6:	d051      	beq.n	8000e9c <__udivmoddi4+0x294>
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d069      	beq.n	8000ed0 <__udivmoddi4+0x2c8>
 8000dfc:	ebb1 050a 	subs.w	r5, r1, sl
 8000e00:	eb64 0403 	sbc.w	r4, r4, r3
 8000e04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e08:	40fd      	lsrs	r5, r7
 8000e0a:	40fc      	lsrs	r4, r7
 8000e0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e10:	e9c6 5400 	strd	r5, r4, [r6]
 8000e14:	2700      	movs	r7, #0
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e20:	4095      	lsls	r5, r2
 8000e22:	fa01 f002 	lsl.w	r0, r1, r2
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e2e:	4338      	orrs	r0, r7
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e36:	fa1f f885 	uxth.w	r8, r5
 8000e3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb07 f308 	mul.w	r3, r7, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x256>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e54:	d22f      	bcs.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d92d      	bls.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e5a:	3f02      	subs	r7, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	b281      	uxth	r1, r0
 8000e62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6e:	fb00 f308 	mul.w	r3, r0, r8
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x27e>
 8000e76:	1869      	adds	r1, r5, r1
 8000e78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e7c:	d217      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d915      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4429      	add	r1, r5
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e8c:	e73b      	b.n	8000d06 <__udivmoddi4+0xfe>
 8000e8e:	4637      	mov	r7, r6
 8000e90:	4630      	mov	r0, r6
 8000e92:	e709      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e94:	4607      	mov	r7, r0
 8000e96:	e6e7      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fb      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e9c:	4541      	cmp	r1, r8
 8000e9e:	d2ab      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	4613      	mov	r3, r2
 8000eac:	e7a4      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	e7e9      	b.n	8000e86 <__udivmoddi4+0x27e>
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e795      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb6:	4667      	mov	r7, ip
 8000eb8:	e7d1      	b.n	8000e5e <__udivmoddi4+0x256>
 8000eba:	4681      	mov	r9, r0
 8000ebc:	e77c      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	442c      	add	r4, r5
 8000ec2:	e747      	b.n	8000d54 <__udivmoddi4+0x14c>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	442b      	add	r3, r5
 8000eca:	e72f      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ecc:	4638      	mov	r0, r7
 8000ece:	e708      	b.n	8000ce2 <__udivmoddi4+0xda>
 8000ed0:	4637      	mov	r7, r6
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0xa0>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	80fb      	strh	r3, [r7, #6]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	717b      	strb	r3, [r7, #5]
    //sprintf(uartData, "Selector              = %d",select_8_16);
    //HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    //sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

    if(select_8_16){
 8000ee8:	797b      	ldrb	r3, [r7, #5]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d01f      	beq.n	8000f2e <conv_HEX_to_BIN+0x56>
		for(int i = 0; i < 8; i++){
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e018      	b.n	8000f26 <conv_HEX_to_BIN+0x4e>
			temp = hex_byte_in >> i;
 8000ef4:	88fa      	ldrh	r2, [r7, #6]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa42 f303 	asr.w	r3, r2, r3
 8000efc:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	bfb8      	it	lt
 8000f08:	425b      	neglt	r3, r3
 8000f0a:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	4413      	add	r3, r2
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2201      	movne	r2, #1
 8000f1a:	2200      	moveq	r2, #0
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3301      	adds	r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	2b07      	cmp	r3, #7
 8000f2a:	dde3      	ble.n	8000ef4 <conv_HEX_to_BIN+0x1c>
		//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000f2c:	e020      	b.n	8000f70 <conv_HEX_to_BIN+0x98>
		for(int i = 0; i < 16; i++){
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	e01a      	b.n	8000f6a <conv_HEX_to_BIN+0x92>
			temp = hex_byte_in >> i;
 8000f34:	88fa      	ldrh	r2, [r7, #6]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	fa42 f303 	asr.w	r3, r2, r3
 8000f3c:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	bfb8      	it	lt
 8000f48:	425b      	neglt	r3, r3
 8000f4a:	60fb      	str	r3, [r7, #12]
			*(bin_byte_out+ 16 - 1 - i) = temp;
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	f1c3 030f 	rsb	r3, r3, #15
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2201      	movne	r2, #1
 8000f5e:	2200      	moveq	r2, #0
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	3301      	adds	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	dde1      	ble.n	8000f34 <conv_HEX_to_BIN+0x5c>
}
 8000f70:	bf00      	nop
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	0000      	movs	r0, r0
	...

08000f80 <conv_BIN_to_HEX>:
uint8_t conv_BIN_to_HEX(bool *bin_byte_in){
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	uint8_t acc = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 8; i++){
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	e02c      	b.n	8000fec <conv_BIN_to_HEX+0x6c>
		acc += ( *(bin_byte_in+i) )? pow(2,i) : 0;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00d      	beq.n	8000fba <conv_BIN_to_HEX+0x3a>
 8000f9e:	68b8      	ldr	r0, [r7, #8]
 8000fa0:	f7ff fae0 	bl	8000564 <__aeabi_i2d>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	460c      	mov	r4, r1
 8000fa8:	ec44 3b11 	vmov	d1, r3, r4
 8000fac:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001000 <conv_BIN_to_HEX+0x80>
 8000fb0:	f006 fc10 	bl	80077d4 <pow>
 8000fb4:	ec55 4b10 	vmov	r4, r5, d0
 8000fb8:	e003      	b.n	8000fc2 <conv_BIN_to_HEX+0x42>
 8000fba:	f04f 0400 	mov.w	r4, #0
 8000fbe:	f04f 0500 	mov.w	r5, #0
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff facd 	bl	8000564 <__aeabi_i2d>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4620      	mov	r0, r4
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	f7ff f97b 	bl	80002cc <__adddf3>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460c      	mov	r4, r1
 8000fda:	4618      	mov	r0, r3
 8000fdc:	4621      	mov	r1, r4
 8000fde:	f7ff fddb 	bl	8000b98 <__aeabi_d2uiz>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 8; i++){
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b07      	cmp	r3, #7
 8000ff0:	ddcf      	ble.n	8000f92 <conv_BIN_to_HEX+0x12>
	}
	return acc;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffc:	f3af 8000 	nop.w
 8001000:	00000000 	.word	0x00000000
 8001004:	40000000 	.word	0x40000000

08001008 <init_AX25>:

//General Program
//****************************************************************************************************************
void init_AX25(){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 800100c:	2201      	movs	r2, #1
 800100e:	4909      	ldr	r1, [pc, #36]	; (8001034 <init_AX25+0x2c>)
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <init_AX25+0x30>)
 8001012:	f005 f953 	bl	80062bc <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <init_AX25+0x34>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <init_AX25+0x34>)
 800101e:	2200      	movs	r2, #0
 8001020:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <init_AX25+0x34>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <init_AX25+0x34>)
 800102a:	2200      	movs	r2, #0
 800102c:	605a      	str	r2, [r3, #4]
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20001da0 	.word	0x20001da0
 8001038:	200034e8 	.word	0x200034e8
 800103c:	20001d94 	.word	0x20001d94

08001040 <tx_rx>:

void tx_rx() {
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
	if (changeMode) {
 8001046:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <tx_rx+0x168>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d004      	beq.n	8001058 <tx_rx+0x18>
		changeMode = 0;
 800104e:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <tx_rx+0x168>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
		toggleMode();
 8001054:	f001 fb84 	bl	8002760 <toggleMode>
	}

	//Transmission Mode
	if (mode) {
 8001058:	4b54      	ldr	r3, [pc, #336]	; (80011ac <tx_rx+0x16c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d07b      	beq.n	8001158 <tx_rx+0x118>
		bool packet_received = false;
 8001060:	2300      	movs	r3, #0
 8001062:	717b      	strb	r3, [r7, #5]
		bool packet_converted = false;
 8001064:	2300      	movs	r3, #0
 8001066:	71fb      	strb	r3, [r7, #7]

		//Run receiving KISS
		packet_received = receiving_KISS();
 8001068:	f001 f84c 	bl	8002104 <receiving_KISS>
 800106c:	4603      	mov	r3, r0
 800106e:	717b      	strb	r3, [r7, #5]

		if(packet_received){
 8001070:	797b      	ldrb	r3, [r7, #5]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <tx_rx+0x3e>
			//Convert KISS packet to AX.25 packet
			packet_converted = KISS_TO_AX25();
 8001076:	f001 f917 	bl	80022a8 <KISS_TO_AX25>
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
			//Upon exit, have a perfectly good AX.25 packet
		}

		//Output AFSK waveform for radio
		if(packet_converted) {
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <tx_rx+0x48>
			output_AX25();
 8001084:	f000 f8a0 	bl	80011c8 <output_AX25>
//			print_AX25();
		}
		clear_AX25();
 8001088:	f000 fffa 	bl	8002080 <clear_AX25>

		//Packet was not received properly
		if(!packet_received){
 800108c:	797b      	ldrb	r3, [r7, #5]
 800108e:	f083 0301 	eor.w	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d019      	beq.n	80010cc <tx_rx+0x8c>
			sprintf(uartData, "Error receiving KISS packet\n");
 8001098:	4a45      	ldr	r2, [pc, #276]	; (80011b0 <tx_rx+0x170>)
 800109a:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <tx_rx+0x174>)
 800109c:	4615      	mov	r5, r2
 800109e:	461c      	mov	r4, r3
 80010a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a2:	6028      	str	r0, [r5, #0]
 80010a4:	6069      	str	r1, [r5, #4]
 80010a6:	60aa      	str	r2, [r5, #8]
 80010a8:	60eb      	str	r3, [r5, #12]
 80010aa:	cc07      	ldmia	r4!, {r0, r1, r2}
 80010ac:	6128      	str	r0, [r5, #16]
 80010ae:	6169      	str	r1, [r5, #20]
 80010b0:	61aa      	str	r2, [r5, #24]
 80010b2:	7823      	ldrb	r3, [r4, #0]
 80010b4:	772b      	strb	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010b6:	483e      	ldr	r0, [pc, #248]	; (80011b0 <tx_rx+0x170>)
 80010b8:	f7ff f8aa 	bl	8000210 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29a      	uxth	r2, r3
 80010c0:	230a      	movs	r3, #10
 80010c2:	493b      	ldr	r1, [pc, #236]	; (80011b0 <tx_rx+0x170>)
 80010c4:	483c      	ldr	r0, [pc, #240]	; (80011b8 <tx_rx+0x178>)
 80010c6:	f005 f860 	bl	800618a <HAL_UART_Transmit>
		if(!change){
			sprintf(uartData, "Changing mode due to request\n");
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
}
 80010ca:	e068      	b.n	800119e <tx_rx+0x15e>
		else if(!packet_converted){
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f083 0301 	eor.w	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d019      	beq.n	800110c <tx_rx+0xcc>
			sprintf(uartData, "Error converting KISS packet\n");
 80010d8:	4a35      	ldr	r2, [pc, #212]	; (80011b0 <tx_rx+0x170>)
 80010da:	4b38      	ldr	r3, [pc, #224]	; (80011bc <tx_rx+0x17c>)
 80010dc:	4615      	mov	r5, r2
 80010de:	461c      	mov	r4, r3
 80010e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e2:	6028      	str	r0, [r5, #0]
 80010e4:	6069      	str	r1, [r5, #4]
 80010e6:	60aa      	str	r2, [r5, #8]
 80010e8:	60eb      	str	r3, [r5, #12]
 80010ea:	cc07      	ldmia	r4!, {r0, r1, r2}
 80010ec:	6128      	str	r0, [r5, #16]
 80010ee:	6169      	str	r1, [r5, #20]
 80010f0:	61aa      	str	r2, [r5, #24]
 80010f2:	8823      	ldrh	r3, [r4, #0]
 80010f4:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010f6:	482e      	ldr	r0, [pc, #184]	; (80011b0 <tx_rx+0x170>)
 80010f8:	f7ff f88a 	bl	8000210 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	230a      	movs	r3, #10
 8001102:	492b      	ldr	r1, [pc, #172]	; (80011b0 <tx_rx+0x170>)
 8001104:	482c      	ldr	r0, [pc, #176]	; (80011b8 <tx_rx+0x178>)
 8001106:	f005 f840 	bl	800618a <HAL_UART_Transmit>
}
 800110a:	e048      	b.n	800119e <tx_rx+0x15e>
			sprintf(uartData, "KISS packet received, converted, and transmitted to radio\n");
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <tx_rx+0x170>)
 800110e:	4a2c      	ldr	r2, [pc, #176]	; (80011c0 <tx_rx+0x180>)
 8001110:	4614      	mov	r4, r2
 8001112:	469c      	mov	ip, r3
 8001114:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001118:	4665      	mov	r5, ip
 800111a:	4626      	mov	r6, r4
 800111c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800111e:	6028      	str	r0, [r5, #0]
 8001120:	6069      	str	r1, [r5, #4]
 8001122:	60aa      	str	r2, [r5, #8]
 8001124:	60eb      	str	r3, [r5, #12]
 8001126:	3410      	adds	r4, #16
 8001128:	f10c 0c10 	add.w	ip, ip, #16
 800112c:	4574      	cmp	r4, lr
 800112e:	d1f3      	bne.n	8001118 <tx_rx+0xd8>
 8001130:	4662      	mov	r2, ip
 8001132:	4623      	mov	r3, r4
 8001134:	cb03      	ldmia	r3!, {r0, r1}
 8001136:	6010      	str	r0, [r2, #0]
 8001138:	6051      	str	r1, [r2, #4]
 800113a:	8819      	ldrh	r1, [r3, #0]
 800113c:	789b      	ldrb	r3, [r3, #2]
 800113e:	8111      	strh	r1, [r2, #8]
 8001140:	7293      	strb	r3, [r2, #10]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001142:	481b      	ldr	r0, [pc, #108]	; (80011b0 <tx_rx+0x170>)
 8001144:	f7ff f864 	bl	8000210 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	230a      	movs	r3, #10
 800114e:	4918      	ldr	r1, [pc, #96]	; (80011b0 <tx_rx+0x170>)
 8001150:	4819      	ldr	r0, [pc, #100]	; (80011b8 <tx_rx+0x178>)
 8001152:	f005 f81a 	bl	800618a <HAL_UART_Transmit>
}
 8001156:	e022      	b.n	800119e <tx_rx+0x15e>
		bool change = receiving_AX25();
 8001158:	f000 fd50 	bl	8001bfc <receiving_AX25>
 800115c:	4603      	mov	r3, r0
 800115e:	71bb      	strb	r3, [r7, #6]
		if(!change){
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	f083 0301 	eor.w	r3, r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d018      	beq.n	800119e <tx_rx+0x15e>
			sprintf(uartData, "Changing mode due to request\n");
 800116c:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <tx_rx+0x170>)
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <tx_rx+0x184>)
 8001170:	4615      	mov	r5, r2
 8001172:	461c      	mov	r4, r3
 8001174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001176:	6028      	str	r0, [r5, #0]
 8001178:	6069      	str	r1, [r5, #4]
 800117a:	60aa      	str	r2, [r5, #8]
 800117c:	60eb      	str	r3, [r5, #12]
 800117e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001180:	6128      	str	r0, [r5, #16]
 8001182:	6169      	str	r1, [r5, #20]
 8001184:	61aa      	str	r2, [r5, #24]
 8001186:	8823      	ldrh	r3, [r4, #0]
 8001188:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <tx_rx+0x170>)
 800118c:	f7ff f840 	bl	8000210 <strlen>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	230a      	movs	r3, #10
 8001196:	4906      	ldr	r1, [pc, #24]	; (80011b0 <tx_rx+0x170>)
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <tx_rx+0x178>)
 800119a:	f004 fff6 	bl	800618a <HAL_UART_Transmit>
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000a09 	.word	0x20000a09
 80011ac:	20003490 	.word	0x20003490
 80011b0:	2000262c 	.word	0x2000262c
 80011b4:	080088a0 	.word	0x080088a0
 80011b8:	200034e8 	.word	0x200034e8
 80011bc:	080088c0 	.word	0x080088c0
 80011c0:	080088e0 	.word	0x080088e0
 80011c4:	0800891c 	.word	0x0800891c

080011c8 <output_AX25>:
		}
	}
	return true;
}

void output_AX25(){
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80011ce:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <output_AX25+0xdc>)
 80011d0:	60fb      	str	r3, [r7, #12]

	sprintf(uartData, "Beginning AFSK transmission\n");
 80011d2:	4a35      	ldr	r2, [pc, #212]	; (80012a8 <output_AX25+0xe0>)
 80011d4:	4b35      	ldr	r3, [pc, #212]	; (80012ac <output_AX25+0xe4>)
 80011d6:	4615      	mov	r5, r2
 80011d8:	461c      	mov	r4, r3
 80011da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011dc:	6028      	str	r0, [r5, #0]
 80011de:	6069      	str	r1, [r5, #4]
 80011e0:	60aa      	str	r2, [r5, #8]
 80011e2:	60eb      	str	r3, [r5, #12]
 80011e4:	cc07      	ldmia	r4!, {r0, r1, r2}
 80011e6:	6128      	str	r0, [r5, #16]
 80011e8:	6169      	str	r1, [r5, #20]
 80011ea:	61aa      	str	r2, [r5, #24]
 80011ec:	7823      	ldrb	r3, [r4, #0]
 80011ee:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011f0:	482d      	ldr	r0, [pc, #180]	; (80012a8 <output_AX25+0xe0>)
 80011f2:	f7ff f80d 	bl	8000210 <strlen>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	230a      	movs	r3, #10
 80011fc:	492a      	ldr	r1, [pc, #168]	; (80012a8 <output_AX25+0xe0>)
 80011fe:	482c      	ldr	r0, [pc, #176]	; (80012b0 <output_AX25+0xe8>)
 8001200:	f004 ffc3 	bl	800618a <HAL_UART_Transmit>

	int wave_start = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
	freqSelect = true;
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <output_AX25+0xec>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
	bool dumbbits[3] = { 0, 1, 1 };
 800120e:	4a2a      	ldr	r2, [pc, #168]	; (80012b8 <output_AX25+0xf0>)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	4611      	mov	r1, r2
 8001216:	8019      	strh	r1, [r3, #0]
 8001218:	3302      	adds	r3, #2
 800121a:	0c12      	lsrs	r2, r2, #16
 800121c:	701a      	strb	r2, [r3, #0]
	//Init dac playing some frequency, shouldn't be read by radio
	wave_start = bitToAudio(dumbbits, 3,1,wave_start); //start flag
 800121e:	1d38      	adds	r0, r7, #4
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2201      	movs	r2, #1
 8001224:	2103      	movs	r1, #3
 8001226:	f001 fbe1 	bl	80029ec <bitToAudio>
 800122a:	60b8      	str	r0, [r7, #8]

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_SET); //START PTT
 800122c:	2201      	movs	r2, #1
 800122e:	2110      	movs	r1, #16
 8001230:	4822      	ldr	r0, [pc, #136]	; (80012bc <output_AX25+0xf4>)
 8001232:	f003 fdc7 	bl	8004dc4 <HAL_GPIO_WritePin>
	wave_start = bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start); //start flag
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	2201      	movs	r2, #1
 800123a:	2108      	movs	r1, #8
 800123c:	4820      	ldr	r0, [pc, #128]	; (80012c0 <output_AX25+0xf8>)
 800123e:	f001 fbd5 	bl	80029ec <bitToAudio>
 8001242:	60b8      	str	r0, [r7, #8]

	//wave_start = bitToAudio(local_packet->address, address_len,1,wave_start); //lsb first
	//wave_start = bitToAudio(local_packet->control,control_len,1,wave_start);	//lsb first
	wave_start = bitToAudio(local_packet->PID,PID_len,1,wave_start);			//lsb first
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800124a:	3318      	adds	r3, #24
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	2201      	movs	r2, #1
 8001252:	2108      	movs	r1, #8
 8001254:	f001 fbca 	bl	80029ec <bitToAudio>
 8001258:	60b8      	str	r0, [r7, #8]
	//wave_start = bitToAudio(local_packet->Info,local_packet->Info_Len,1,wave_start);		//lsb first
	//bitToAudio(local_packet->FCS,FCS_len + local_packet->stuffed_FCS,0,wave_start);			//msb first

	//bitToAudio(AX25TBYTE, FLAG_SIZE,1,wave_start);//stop flag

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800125a:	2100      	movs	r1, #0
 800125c:	4819      	ldr	r0, [pc, #100]	; (80012c4 <output_AX25+0xfc>)
 800125e:	f002 fee9 	bl	8004034 <HAL_DAC_Stop_DMA>

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET); //stop transmitting
 8001262:	2200      	movs	r2, #0
 8001264:	2110      	movs	r1, #16
 8001266:	4815      	ldr	r0, [pc, #84]	; (80012bc <output_AX25+0xf4>)
 8001268:	f003 fdac 	bl	8004dc4 <HAL_GPIO_WritePin>

	sprintf(uartData, "Ending AFSK transmission\n");
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <output_AX25+0xe0>)
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <output_AX25+0x100>)
 8001270:	4615      	mov	r5, r2
 8001272:	461c      	mov	r4, r3
 8001274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001276:	6028      	str	r0, [r5, #0]
 8001278:	6069      	str	r1, [r5, #4]
 800127a:	60aa      	str	r2, [r5, #8]
 800127c:	60eb      	str	r3, [r5, #12]
 800127e:	cc03      	ldmia	r4!, {r0, r1}
 8001280:	6128      	str	r0, [r5, #16]
 8001282:	6169      	str	r1, [r5, #20]
 8001284:	8823      	ldrh	r3, [r4, #0]
 8001286:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <output_AX25+0xe0>)
 800128a:	f7fe ffc1 	bl	8000210 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	230a      	movs	r3, #10
 8001294:	4904      	ldr	r1, [pc, #16]	; (80012a8 <output_AX25+0xe0>)
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <output_AX25+0xe8>)
 8001298:	f004 ff77 	bl	800618a <HAL_UART_Transmit>
		}
		sprintf(uartData, "\n\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		output_AX25();
	}
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bdb0      	pop	{r4, r5, r7, pc}
 80012a4:	20000a38 	.word	0x20000a38
 80012a8:	2000262c 	.word	0x2000262c
 80012ac:	0800893c 	.word	0x0800893c
 80012b0:	200034e8 	.word	0x200034e8
 80012b4:	20000a1c 	.word	0x20000a1c
 80012b8:	08008978 	.word	0x08008978
 80012bc:	40020800 	.word	0x40020800
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20003494 	.word	0x20003494
 80012c8:	0800895c 	.word	0x0800895c

080012cc <print_AX25>:
void print_AX25(){
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ce:	b08d      	sub	sp, #52	; 0x34
 80012d0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80012d2:	4bad      	ldr	r3, [pc, #692]	; (8001588 <print_AX25+0x2bc>)
 80012d4:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80012dc:	330c      	adds	r3, #12
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 80012e2:	4baa      	ldr	r3, [pc, #680]	; (800158c <print_AX25+0x2c0>)
 80012e4:	4aaa      	ldr	r2, [pc, #680]	; (8001590 <print_AX25+0x2c4>)
 80012e6:	4614      	mov	r4, r2
 80012e8:	469c      	mov	ip, r3
 80012ea:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80012ee:	4665      	mov	r5, ip
 80012f0:	4626      	mov	r6, r4
 80012f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012f4:	6028      	str	r0, [r5, #0]
 80012f6:	6069      	str	r1, [r5, #4]
 80012f8:	60aa      	str	r2, [r5, #8]
 80012fa:	60eb      	str	r3, [r5, #12]
 80012fc:	3410      	adds	r4, #16
 80012fe:	f10c 0c10 	add.w	ip, ip, #16
 8001302:	4574      	cmp	r4, lr
 8001304:	d1f3      	bne.n	80012ee <print_AX25+0x22>
 8001306:	4663      	mov	r3, ip
 8001308:	4622      	mov	r2, r4
 800130a:	6810      	ldr	r0, [r2, #0]
 800130c:	6018      	str	r0, [r3, #0]
 800130e:	8891      	ldrh	r1, [r2, #4]
 8001310:	7992      	ldrb	r2, [r2, #6]
 8001312:	8099      	strh	r1, [r3, #4]
 8001314:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001316:	489d      	ldr	r0, [pc, #628]	; (800158c <print_AX25+0x2c0>)
 8001318:	f7fe ff7a 	bl	8000210 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	230a      	movs	r3, #10
 8001322:	499a      	ldr	r1, [pc, #616]	; (800158c <print_AX25+0x2c0>)
 8001324:	489b      	ldr	r0, [pc, #620]	; (8001594 <print_AX25+0x2c8>)
 8001326:	f004 ff30 	bl	800618a <HAL_UART_Transmit>

	sprintf(uartData, "AX.25 Flag      =");
 800132a:	4a98      	ldr	r2, [pc, #608]	; (800158c <print_AX25+0x2c0>)
 800132c:	4b9a      	ldr	r3, [pc, #616]	; (8001598 <print_AX25+0x2cc>)
 800132e:	4615      	mov	r5, r2
 8001330:	461c      	mov	r4, r3
 8001332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001334:	6028      	str	r0, [r5, #0]
 8001336:	6069      	str	r1, [r5, #4]
 8001338:	60aa      	str	r2, [r5, #8]
 800133a:	60eb      	str	r3, [r5, #12]
 800133c:	8823      	ldrh	r3, [r4, #0]
 800133e:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001340:	4892      	ldr	r0, [pc, #584]	; (800158c <print_AX25+0x2c0>)
 8001342:	f7fe ff65 	bl	8000210 <strlen>
 8001346:	4603      	mov	r3, r0
 8001348:	b29a      	uxth	r2, r3
 800134a:	230a      	movs	r3, #10
 800134c:	498f      	ldr	r1, [pc, #572]	; (800158c <print_AX25+0x2c0>)
 800134e:	4891      	ldr	r0, [pc, #580]	; (8001594 <print_AX25+0x2c8>)
 8001350:	f004 ff1b 	bl	800618a <HAL_UART_Transmit>
	curr_mem = AX25TBYTE;
 8001354:	4b91      	ldr	r3, [pc, #580]	; (800159c <print_AX25+0x2d0>)
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<8;i++){
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
 800135c:	e017      	b.n	800138e <print_AX25+0xc2>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800135e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001360:	f1c3 0307 	rsb	r3, r3, #7
 8001364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	498c      	ldr	r1, [pc, #560]	; (80015a0 <print_AX25+0x2d4>)
 800136e:	4887      	ldr	r0, [pc, #540]	; (800158c <print_AX25+0x2c0>)
 8001370:	f005 fe34 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001374:	4885      	ldr	r0, [pc, #532]	; (800158c <print_AX25+0x2c0>)
 8001376:	f7fe ff4b 	bl	8000210 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	230a      	movs	r3, #10
 8001380:	4982      	ldr	r1, [pc, #520]	; (800158c <print_AX25+0x2c0>)
 8001382:	4884      	ldr	r0, [pc, #528]	; (8001594 <print_AX25+0x2c8>)
 8001384:	f004 ff01 	bl	800618a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138a:	3301      	adds	r3, #1
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
 800138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001390:	2b07      	cmp	r3, #7
 8001392:	dde4      	ble.n	800135e <print_AX25+0x92>
	}
	sprintf(uartData, "\n");
 8001394:	4a7d      	ldr	r2, [pc, #500]	; (800158c <print_AX25+0x2c0>)
 8001396:	4b83      	ldr	r3, [pc, #524]	; (80015a4 <print_AX25+0x2d8>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800139c:	487b      	ldr	r0, [pc, #492]	; (800158c <print_AX25+0x2c0>)
 800139e:	f7fe ff37 	bl	8000210 <strlen>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	230a      	movs	r3, #10
 80013a8:	4978      	ldr	r1, [pc, #480]	; (800158c <print_AX25+0x2c0>)
 80013aa:	487a      	ldr	r0, [pc, #488]	; (8001594 <print_AX25+0x2c8>)
 80013ac:	f004 feed 	bl	800618a <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->address) + address_len - 1;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80013b6:	3310      	adds	r3, #16
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	336f      	adds	r3, #111	; 0x6f
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
 80013c2:	e041      	b.n	8001448 <print_AX25+0x17c>
		sprintf(uartData, "Address Field %d =",i+1);
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	3301      	adds	r3, #1
 80013c8:	461a      	mov	r2, r3
 80013ca:	4977      	ldr	r1, [pc, #476]	; (80015a8 <print_AX25+0x2dc>)
 80013cc:	486f      	ldr	r0, [pc, #444]	; (800158c <print_AX25+0x2c0>)
 80013ce:	f005 fe05 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013d2:	486e      	ldr	r0, [pc, #440]	; (800158c <print_AX25+0x2c0>)
 80013d4:	f7fe ff1c 	bl	8000210 <strlen>
 80013d8:	4603      	mov	r3, r0
 80013da:	b29a      	uxth	r2, r3
 80013dc:	230a      	movs	r3, #10
 80013de:	496b      	ldr	r1, [pc, #428]	; (800158c <print_AX25+0x2c0>)
 80013e0:	486c      	ldr	r0, [pc, #432]	; (8001594 <print_AX25+0x2c8>)
 80013e2:	f004 fed2 	bl	800618a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
 80013ea:	e016      	b.n	800141a <print_AX25+0x14e>
			sprintf(uartData, " %d ",*(curr_mem-j));
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	425b      	negs	r3, r3
 80013f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4969      	ldr	r1, [pc, #420]	; (80015a0 <print_AX25+0x2d4>)
 80013fa:	4864      	ldr	r0, [pc, #400]	; (800158c <print_AX25+0x2c0>)
 80013fc:	f005 fdee 	bl	8006fdc <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001400:	4862      	ldr	r0, [pc, #392]	; (800158c <print_AX25+0x2c0>)
 8001402:	f7fe ff05 	bl	8000210 <strlen>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	230a      	movs	r3, #10
 800140c:	495f      	ldr	r1, [pc, #380]	; (800158c <print_AX25+0x2c0>)
 800140e:	4861      	ldr	r0, [pc, #388]	; (8001594 <print_AX25+0x2c8>)
 8001410:	f004 febb 	bl	800618a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	3301      	adds	r3, #1
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2b07      	cmp	r3, #7
 800141e:	dde5      	ble.n	80013ec <print_AX25+0x120>
		}
		curr_mem -= 8;
 8001420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001422:	3b08      	subs	r3, #8
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8001426:	4a59      	ldr	r2, [pc, #356]	; (800158c <print_AX25+0x2c0>)
 8001428:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <print_AX25+0x2d8>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800142e:	4857      	ldr	r0, [pc, #348]	; (800158c <print_AX25+0x2c0>)
 8001430:	f7fe feee 	bl	8000210 <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	b29a      	uxth	r2, r3
 8001438:	230a      	movs	r3, #10
 800143a:	4954      	ldr	r1, [pc, #336]	; (800158c <print_AX25+0x2c0>)
 800143c:	4855      	ldr	r0, [pc, #340]	; (8001594 <print_AX25+0x2c8>)
 800143e:	f004 fea4 	bl	800618a <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	3301      	adds	r3, #1
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	2b0d      	cmp	r3, #13
 800144c:	ddba      	ble.n	80013c4 <print_AX25+0xf8>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001454:	3314      	adds	r3, #20
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 800145a:	4a4c      	ldr	r2, [pc, #304]	; (800158c <print_AX25+0x2c0>)
 800145c:	4b53      	ldr	r3, [pc, #332]	; (80015ac <print_AX25+0x2e0>)
 800145e:	4615      	mov	r5, r2
 8001460:	461c      	mov	r4, r3
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	6028      	str	r0, [r5, #0]
 8001466:	6069      	str	r1, [r5, #4]
 8001468:	60aa      	str	r2, [r5, #8]
 800146a:	60eb      	str	r3, [r5, #12]
 800146c:	8823      	ldrh	r3, [r4, #0]
 800146e:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001470:	4846      	ldr	r0, [pc, #280]	; (800158c <print_AX25+0x2c0>)
 8001472:	f7fe fecd 	bl	8000210 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	230a      	movs	r3, #10
 800147c:	4943      	ldr	r1, [pc, #268]	; (800158c <print_AX25+0x2c0>)
 800147e:	4845      	ldr	r0, [pc, #276]	; (8001594 <print_AX25+0x2c8>)
 8001480:	f004 fe83 	bl	800618a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	e017      	b.n	80014ba <print_AX25+0x1ee>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f1c3 0307 	rsb	r3, r3, #7
 8001490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001492:	4413      	add	r3, r2
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	4941      	ldr	r1, [pc, #260]	; (80015a0 <print_AX25+0x2d4>)
 800149a:	483c      	ldr	r0, [pc, #240]	; (800158c <print_AX25+0x2c0>)
 800149c:	f005 fd9e 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014a0:	483a      	ldr	r0, [pc, #232]	; (800158c <print_AX25+0x2c0>)
 80014a2:	f7fe feb5 	bl	8000210 <strlen>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	230a      	movs	r3, #10
 80014ac:	4937      	ldr	r1, [pc, #220]	; (800158c <print_AX25+0x2c0>)
 80014ae:	4839      	ldr	r0, [pc, #228]	; (8001594 <print_AX25+0x2c8>)
 80014b0:	f004 fe6b 	bl	800618a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	3301      	adds	r3, #1
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	2b07      	cmp	r3, #7
 80014be:	dde4      	ble.n	800148a <print_AX25+0x1be>
	}
	sprintf(uartData, "\n");
 80014c0:	4a32      	ldr	r2, [pc, #200]	; (800158c <print_AX25+0x2c0>)
 80014c2:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <print_AX25+0x2d8>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014c8:	4830      	ldr	r0, [pc, #192]	; (800158c <print_AX25+0x2c0>)
 80014ca:	f7fe fea1 	bl	8000210 <strlen>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	230a      	movs	r3, #10
 80014d4:	492d      	ldr	r1, [pc, #180]	; (800158c <print_AX25+0x2c0>)
 80014d6:	482f      	ldr	r0, [pc, #188]	; (8001594 <print_AX25+0x2c8>)
 80014d8:	f004 fe57 	bl	800618a <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80014e2:	3318      	adds	r3, #24
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 80014e8:	4a28      	ldr	r2, [pc, #160]	; (800158c <print_AX25+0x2c0>)
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <print_AX25+0x2e4>)
 80014ec:	4615      	mov	r5, r2
 80014ee:	461c      	mov	r4, r3
 80014f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f2:	6028      	str	r0, [r5, #0]
 80014f4:	6069      	str	r1, [r5, #4]
 80014f6:	60aa      	str	r2, [r5, #8]
 80014f8:	60eb      	str	r3, [r5, #12]
 80014fa:	8823      	ldrh	r3, [r4, #0]
 80014fc:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014fe:	4823      	ldr	r0, [pc, #140]	; (800158c <print_AX25+0x2c0>)
 8001500:	f7fe fe86 	bl	8000210 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	b29a      	uxth	r2, r3
 8001508:	230a      	movs	r3, #10
 800150a:	4920      	ldr	r1, [pc, #128]	; (800158c <print_AX25+0x2c0>)
 800150c:	4821      	ldr	r0, [pc, #132]	; (8001594 <print_AX25+0x2c8>)
 800150e:	f004 fe3c 	bl	800618a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	e017      	b.n	8001548 <print_AX25+0x27c>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001520:	4413      	add	r3, r2
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	491e      	ldr	r1, [pc, #120]	; (80015a0 <print_AX25+0x2d4>)
 8001528:	4818      	ldr	r0, [pc, #96]	; (800158c <print_AX25+0x2c0>)
 800152a:	f005 fd57 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800152e:	4817      	ldr	r0, [pc, #92]	; (800158c <print_AX25+0x2c0>)
 8001530:	f7fe fe6e 	bl	8000210 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	b29a      	uxth	r2, r3
 8001538:	230a      	movs	r3, #10
 800153a:	4914      	ldr	r1, [pc, #80]	; (800158c <print_AX25+0x2c0>)
 800153c:	4815      	ldr	r0, [pc, #84]	; (8001594 <print_AX25+0x2c8>)
 800153e:	f004 fe24 	bl	800618a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	3301      	adds	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b07      	cmp	r3, #7
 800154c:	dde4      	ble.n	8001518 <print_AX25+0x24c>
	}
	sprintf(uartData, "\n");
 800154e:	4a0f      	ldr	r2, [pc, #60]	; (800158c <print_AX25+0x2c0>)
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <print_AX25+0x2d8>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <print_AX25+0x2c0>)
 8001558:	f7fe fe5a 	bl	8000210 <strlen>
 800155c:	4603      	mov	r3, r0
 800155e:	b29a      	uxth	r2, r3
 8001560:	230a      	movs	r3, #10
 8001562:	490a      	ldr	r1, [pc, #40]	; (800158c <print_AX25+0x2c0>)
 8001564:	480b      	ldr	r0, [pc, #44]	; (8001594 <print_AX25+0x2c8>)
 8001566:	f004 fe10 	bl	800618a <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001570:	331c      	adds	r3, #28
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3b01      	subs	r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	e057      	b.n	8001638 <print_AX25+0x36c>
 8001588:	20000a38 	.word	0x20000a38
 800158c:	2000262c 	.word	0x2000262c
 8001590:	0800897c 	.word	0x0800897c
 8001594:	200034e8 	.word	0x200034e8
 8001598:	080089b4 	.word	0x080089b4
 800159c:	20000008 	.word	0x20000008
 80015a0:	080089c8 	.word	0x080089c8
 80015a4:	080089d0 	.word	0x080089d0
 80015a8:	080089d4 	.word	0x080089d4
 80015ac:	080089e8 	.word	0x080089e8
 80015b0:	080089fc 	.word	0x080089fc
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3301      	adds	r3, #1
 80015b8:	461a      	mov	r2, r3
 80015ba:	4956      	ldr	r1, [pc, #344]	; (8001714 <print_AX25+0x448>)
 80015bc:	4856      	ldr	r0, [pc, #344]	; (8001718 <print_AX25+0x44c>)
 80015be:	f005 fd0d 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015c2:	4855      	ldr	r0, [pc, #340]	; (8001718 <print_AX25+0x44c>)
 80015c4:	f7fe fe24 	bl	8000210 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	230a      	movs	r3, #10
 80015ce:	4952      	ldr	r1, [pc, #328]	; (8001718 <print_AX25+0x44c>)
 80015d0:	4852      	ldr	r0, [pc, #328]	; (800171c <print_AX25+0x450>)
 80015d2:	f004 fdda 	bl	800618a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	e016      	b.n	800160a <print_AX25+0x33e>
			sprintf(uartData, " %d ",*(curr_mem-j));
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	425b      	negs	r3, r3
 80015e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e2:	4413      	add	r3, r2
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	494d      	ldr	r1, [pc, #308]	; (8001720 <print_AX25+0x454>)
 80015ea:	484b      	ldr	r0, [pc, #300]	; (8001718 <print_AX25+0x44c>)
 80015ec:	f005 fcf6 	bl	8006fdc <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015f0:	4849      	ldr	r0, [pc, #292]	; (8001718 <print_AX25+0x44c>)
 80015f2:	f7fe fe0d 	bl	8000210 <strlen>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	230a      	movs	r3, #10
 80015fc:	4946      	ldr	r1, [pc, #280]	; (8001718 <print_AX25+0x44c>)
 80015fe:	4847      	ldr	r0, [pc, #284]	; (800171c <print_AX25+0x450>)
 8001600:	f004 fdc3 	bl	800618a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	3301      	adds	r3, #1
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	2b07      	cmp	r3, #7
 800160e:	dde5      	ble.n	80015dc <print_AX25+0x310>
		}
		curr_mem -= 8;
 8001610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001612:	3b08      	subs	r3, #8
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8001616:	4a40      	ldr	r2, [pc, #256]	; (8001718 <print_AX25+0x44c>)
 8001618:	4b42      	ldr	r3, [pc, #264]	; (8001724 <print_AX25+0x458>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800161e:	483e      	ldr	r0, [pc, #248]	; (8001718 <print_AX25+0x44c>)
 8001620:	f7fe fdf6 	bl	8000210 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	b29a      	uxth	r2, r3
 8001628:	230a      	movs	r3, #10
 800162a:	493b      	ldr	r1, [pc, #236]	; (8001718 <print_AX25+0x44c>)
 800162c:	483b      	ldr	r0, [pc, #236]	; (800171c <print_AX25+0x450>)
 800162e:	f004 fdac 	bl	800618a <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	da00      	bge.n	8001646 <print_AX25+0x37a>
 8001644:	3307      	adds	r3, #7
 8001646:	10db      	asrs	r3, r3, #3
 8001648:	3b01      	subs	r3, #1
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	429a      	cmp	r2, r3
 800164e:	dbb1      	blt.n	80015b4 <print_AX25+0x2e8>
	}

	curr_mem = (local_packet->FCS) + 8;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001656:	3304      	adds	r3, #4
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3308      	adds	r3, #8
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(FCS_len/8);i++){
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e042      	b.n	80016ea <print_AX25+0x41e>
		sprintf(uartData, "FCS Field %d     =",i+1)	;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3301      	adds	r3, #1
 8001668:	461a      	mov	r2, r3
 800166a:	492f      	ldr	r1, [pc, #188]	; (8001728 <print_AX25+0x45c>)
 800166c:	482a      	ldr	r0, [pc, #168]	; (8001718 <print_AX25+0x44c>)
 800166e:	f005 fcb5 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001672:	4829      	ldr	r0, [pc, #164]	; (8001718 <print_AX25+0x44c>)
 8001674:	f7fe fdcc 	bl	8000210 <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	230a      	movs	r3, #10
 800167e:	4926      	ldr	r1, [pc, #152]	; (8001718 <print_AX25+0x44c>)
 8001680:	4826      	ldr	r0, [pc, #152]	; (800171c <print_AX25+0x450>)
 8001682:	f004 fd82 	bl	800618a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	e017      	b.n	80016bc <print_AX25+0x3f0>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4921      	ldr	r1, [pc, #132]	; (8001720 <print_AX25+0x454>)
 800169c:	481e      	ldr	r0, [pc, #120]	; (8001718 <print_AX25+0x44c>)
 800169e:	f005 fc9d 	bl	8006fdc <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80016a2:	481d      	ldr	r0, [pc, #116]	; (8001718 <print_AX25+0x44c>)
 80016a4:	f7fe fdb4 	bl	8000210 <strlen>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	230a      	movs	r3, #10
 80016ae:	491a      	ldr	r1, [pc, #104]	; (8001718 <print_AX25+0x44c>)
 80016b0:	481a      	ldr	r0, [pc, #104]	; (800171c <print_AX25+0x450>)
 80016b2:	f004 fd6a 	bl	800618a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3301      	adds	r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b07      	cmp	r3, #7
 80016c0:	dde4      	ble.n	800168c <print_AX25+0x3c0>
		}
		curr_mem -= 8;
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	3b08      	subs	r3, #8
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80016c8:	4a13      	ldr	r2, [pc, #76]	; (8001718 <print_AX25+0x44c>)
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <print_AX25+0x458>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80016d0:	4811      	ldr	r0, [pc, #68]	; (8001718 <print_AX25+0x44c>)
 80016d2:	f7fe fd9d 	bl	8000210 <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29a      	uxth	r2, r3
 80016da:	230a      	movs	r3, #10
 80016dc:	490e      	ldr	r1, [pc, #56]	; (8001718 <print_AX25+0x44c>)
 80016de:	480f      	ldr	r0, [pc, #60]	; (800171c <print_AX25+0x450>)
 80016e0:	f004 fd53 	bl	800618a <HAL_UART_Transmit>
	for(int i = 0;i<(FCS_len/8);i++){
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	ddb9      	ble.n	8001664 <print_AX25+0x398>
	}
	sprintf(uartData, "\n");
 80016f0:	4a09      	ldr	r2, [pc, #36]	; (8001718 <print_AX25+0x44c>)
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <print_AX25+0x458>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <print_AX25+0x44c>)
 80016fa:	f7fe fd89 	bl	8000210 <strlen>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	230a      	movs	r3, #10
 8001704:	4904      	ldr	r1, [pc, #16]	; (8001718 <print_AX25+0x44c>)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <print_AX25+0x450>)
 8001708:	f004 fd3f 	bl	800618a <HAL_UART_Transmit>
}
 800170c:	bf00      	nop
 800170e:	3734      	adds	r7, #52	; 0x34
 8001710:	46bd      	mov	sp, r7
 8001712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001714:	08008a10 	.word	0x08008a10
 8001718:	2000262c 	.word	0x2000262c
 800171c:	200034e8 	.word	0x200034e8
 8001720:	080089c8 	.word	0x080089c8
 8001724:	080089d0 	.word	0x080089d0
 8001728:	08008a24 	.word	0x08008a24

0800172c <print_KISS>:
void output_KISS() {
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}
void print_KISS(){
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172e:	b08d      	sub	sp, #52	; 0x34
 8001730:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001732:	4baf      	ldr	r3, [pc, #700]	; (80019f0 <print_KISS+0x2c4>)
 8001734:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800173c:	330c      	adds	r3, #12
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 8001742:	4bac      	ldr	r3, [pc, #688]	; (80019f4 <print_KISS+0x2c8>)
 8001744:	4aac      	ldr	r2, [pc, #688]	; (80019f8 <print_KISS+0x2cc>)
 8001746:	4614      	mov	r4, r2
 8001748:	469c      	mov	ip, r3
 800174a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800174e:	4665      	mov	r5, ip
 8001750:	4626      	mov	r6, r4
 8001752:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001754:	6028      	str	r0, [r5, #0]
 8001756:	6069      	str	r1, [r5, #4]
 8001758:	60aa      	str	r2, [r5, #8]
 800175a:	60eb      	str	r3, [r5, #12]
 800175c:	3410      	adds	r4, #16
 800175e:	f10c 0c10 	add.w	ip, ip, #16
 8001762:	4574      	cmp	r4, lr
 8001764:	d1f3      	bne.n	800174e <print_KISS+0x22>
 8001766:	4663      	mov	r3, ip
 8001768:	4622      	mov	r2, r4
 800176a:	6810      	ldr	r0, [r2, #0]
 800176c:	6018      	str	r0, [r3, #0]
 800176e:	8891      	ldrh	r1, [r2, #4]
 8001770:	7992      	ldrb	r2, [r2, #6]
 8001772:	8099      	strh	r1, [r3, #4]
 8001774:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001776:	489f      	ldr	r0, [pc, #636]	; (80019f4 <print_KISS+0x2c8>)
 8001778:	f7fe fd4a 	bl	8000210 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29a      	uxth	r2, r3
 8001780:	230a      	movs	r3, #10
 8001782:	499c      	ldr	r1, [pc, #624]	; (80019f4 <print_KISS+0x2c8>)
 8001784:	489d      	ldr	r0, [pc, #628]	; (80019fc <print_KISS+0x2d0>)
 8001786:	f004 fd00 	bl	800618a <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address + address_len + 16 - 1);//start at the flag start
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001790:	3310      	adds	r3, #16
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	337f      	adds	r3, #127	; 0x7f
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 8001798:	4a96      	ldr	r2, [pc, #600]	; (80019f4 <print_KISS+0x2c8>)
 800179a:	4b99      	ldr	r3, [pc, #612]	; (8001a00 <print_KISS+0x2d4>)
 800179c:	4615      	mov	r5, r2
 800179e:	461c      	mov	r4, r3
 80017a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a2:	6028      	str	r0, [r5, #0]
 80017a4:	6069      	str	r1, [r5, #4]
 80017a6:	60aa      	str	r2, [r5, #8]
 80017a8:	60eb      	str	r3, [r5, #12]
 80017aa:	8823      	ldrh	r3, [r4, #0]
 80017ac:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80017ae:	4891      	ldr	r0, [pc, #580]	; (80019f4 <print_KISS+0x2c8>)
 80017b0:	f7fe fd2e 	bl	8000210 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	230a      	movs	r3, #10
 80017ba:	498e      	ldr	r1, [pc, #568]	; (80019f4 <print_KISS+0x2c8>)
 80017bc:	488f      	ldr	r0, [pc, #572]	; (80019fc <print_KISS+0x2d0>)
 80017be:	f004 fce4 	bl	800618a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017c6:	e016      	b.n	80017f6 <print_KISS+0xca>
		sprintf(uartData, " %d ",*(curr_mem-i));
 80017c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ca:	425b      	negs	r3, r3
 80017cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	498b      	ldr	r1, [pc, #556]	; (8001a04 <print_KISS+0x2d8>)
 80017d6:	4887      	ldr	r0, [pc, #540]	; (80019f4 <print_KISS+0x2c8>)
 80017d8:	f005 fc00 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80017dc:	4885      	ldr	r0, [pc, #532]	; (80019f4 <print_KISS+0x2c8>)
 80017de:	f7fe fd17 	bl	8000210 <strlen>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	230a      	movs	r3, #10
 80017e8:	4982      	ldr	r1, [pc, #520]	; (80019f4 <print_KISS+0x2c8>)
 80017ea:	4884      	ldr	r0, [pc, #528]	; (80019fc <print_KISS+0x2d0>)
 80017ec:	f004 fccd 	bl	800618a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80017f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f2:	3301      	adds	r3, #1
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	2b07      	cmp	r3, #7
 80017fa:	dde5      	ble.n	80017c8 <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 80017fc:	4a7d      	ldr	r2, [pc, #500]	; (80019f4 <print_KISS+0x2c8>)
 80017fe:	4b82      	ldr	r3, [pc, #520]	; (8001a08 <print_KISS+0x2dc>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001804:	487b      	ldr	r0, [pc, #492]	; (80019f4 <print_KISS+0x2c8>)
 8001806:	f7fe fd03 	bl	8000210 <strlen>
 800180a:	4603      	mov	r3, r0
 800180c:	b29a      	uxth	r2, r3
 800180e:	230a      	movs	r3, #10
 8001810:	4978      	ldr	r1, [pc, #480]	; (80019f4 <print_KISS+0x2c8>)
 8001812:	487a      	ldr	r0, [pc, #488]	; (80019fc <print_KISS+0x2d0>)
 8001814:	f004 fcb9 	bl	800618a <HAL_UART_Transmit>

	curr_mem = (local_packet->address) + address_len - 1;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800181e:	3310      	adds	r3, #16
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	336f      	adds	r3, #111	; 0x6f
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
 800182a:	e041      	b.n	80018b0 <print_KISS+0x184>
		sprintf(uartData, "Address Field %d =",i+1);
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3301      	adds	r3, #1
 8001830:	461a      	mov	r2, r3
 8001832:	4976      	ldr	r1, [pc, #472]	; (8001a0c <print_KISS+0x2e0>)
 8001834:	486f      	ldr	r0, [pc, #444]	; (80019f4 <print_KISS+0x2c8>)
 8001836:	f005 fbd1 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800183a:	486e      	ldr	r0, [pc, #440]	; (80019f4 <print_KISS+0x2c8>)
 800183c:	f7fe fce8 	bl	8000210 <strlen>
 8001840:	4603      	mov	r3, r0
 8001842:	b29a      	uxth	r2, r3
 8001844:	230a      	movs	r3, #10
 8001846:	496b      	ldr	r1, [pc, #428]	; (80019f4 <print_KISS+0x2c8>)
 8001848:	486c      	ldr	r0, [pc, #432]	; (80019fc <print_KISS+0x2d0>)
 800184a:	f004 fc9e 	bl	800618a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
 8001852:	e016      	b.n	8001882 <print_KISS+0x156>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	425b      	negs	r3, r3
 8001858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800185a:	4413      	add	r3, r2
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	4968      	ldr	r1, [pc, #416]	; (8001a04 <print_KISS+0x2d8>)
 8001862:	4864      	ldr	r0, [pc, #400]	; (80019f4 <print_KISS+0x2c8>)
 8001864:	f005 fbba 	bl	8006fdc <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001868:	4862      	ldr	r0, [pc, #392]	; (80019f4 <print_KISS+0x2c8>)
 800186a:	f7fe fcd1 	bl	8000210 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	230a      	movs	r3, #10
 8001874:	495f      	ldr	r1, [pc, #380]	; (80019f4 <print_KISS+0x2c8>)
 8001876:	4861      	ldr	r0, [pc, #388]	; (80019fc <print_KISS+0x2d0>)
 8001878:	f004 fc87 	bl	800618a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	3301      	adds	r3, #1
 8001880:	623b      	str	r3, [r7, #32]
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	2b07      	cmp	r3, #7
 8001886:	dde5      	ble.n	8001854 <print_KISS+0x128>
		}
		curr_mem -= 8;
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	3b08      	subs	r3, #8
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 800188e:	4a59      	ldr	r2, [pc, #356]	; (80019f4 <print_KISS+0x2c8>)
 8001890:	4b5d      	ldr	r3, [pc, #372]	; (8001a08 <print_KISS+0x2dc>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001896:	4857      	ldr	r0, [pc, #348]	; (80019f4 <print_KISS+0x2c8>)
 8001898:	f7fe fcba 	bl	8000210 <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	b29a      	uxth	r2, r3
 80018a0:	230a      	movs	r3, #10
 80018a2:	4954      	ldr	r1, [pc, #336]	; (80019f4 <print_KISS+0x2c8>)
 80018a4:	4855      	ldr	r0, [pc, #340]	; (80019fc <print_KISS+0x2d0>)
 80018a6:	f004 fc70 	bl	800618a <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	3301      	adds	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	2b0d      	cmp	r3, #13
 80018b4:	ddba      	ble.n	800182c <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80018bc:	3314      	adds	r3, #20
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 80018c2:	4a4c      	ldr	r2, [pc, #304]	; (80019f4 <print_KISS+0x2c8>)
 80018c4:	4b52      	ldr	r3, [pc, #328]	; (8001a10 <print_KISS+0x2e4>)
 80018c6:	4615      	mov	r5, r2
 80018c8:	461c      	mov	r4, r3
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	6028      	str	r0, [r5, #0]
 80018ce:	6069      	str	r1, [r5, #4]
 80018d0:	60aa      	str	r2, [r5, #8]
 80018d2:	60eb      	str	r3, [r5, #12]
 80018d4:	8823      	ldrh	r3, [r4, #0]
 80018d6:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018d8:	4846      	ldr	r0, [pc, #280]	; (80019f4 <print_KISS+0x2c8>)
 80018da:	f7fe fc99 	bl	8000210 <strlen>
 80018de:	4603      	mov	r3, r0
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	230a      	movs	r3, #10
 80018e4:	4943      	ldr	r1, [pc, #268]	; (80019f4 <print_KISS+0x2c8>)
 80018e6:	4845      	ldr	r0, [pc, #276]	; (80019fc <print_KISS+0x2d0>)
 80018e8:	f004 fc4f 	bl	800618a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	e017      	b.n	8001922 <print_KISS+0x1f6>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f1c3 0307 	rsb	r3, r3, #7
 80018f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fa:	4413      	add	r3, r2
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	4940      	ldr	r1, [pc, #256]	; (8001a04 <print_KISS+0x2d8>)
 8001902:	483c      	ldr	r0, [pc, #240]	; (80019f4 <print_KISS+0x2c8>)
 8001904:	f005 fb6a 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001908:	483a      	ldr	r0, [pc, #232]	; (80019f4 <print_KISS+0x2c8>)
 800190a:	f7fe fc81 	bl	8000210 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	230a      	movs	r3, #10
 8001914:	4937      	ldr	r1, [pc, #220]	; (80019f4 <print_KISS+0x2c8>)
 8001916:	4839      	ldr	r0, [pc, #228]	; (80019fc <print_KISS+0x2d0>)
 8001918:	f004 fc37 	bl	800618a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	3301      	adds	r3, #1
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	2b07      	cmp	r3, #7
 8001926:	dde4      	ble.n	80018f2 <print_KISS+0x1c6>
	}
	sprintf(uartData, "\n");
 8001928:	4a32      	ldr	r2, [pc, #200]	; (80019f4 <print_KISS+0x2c8>)
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <print_KISS+0x2dc>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001930:	4830      	ldr	r0, [pc, #192]	; (80019f4 <print_KISS+0x2c8>)
 8001932:	f7fe fc6d 	bl	8000210 <strlen>
 8001936:	4603      	mov	r3, r0
 8001938:	b29a      	uxth	r2, r3
 800193a:	230a      	movs	r3, #10
 800193c:	492d      	ldr	r1, [pc, #180]	; (80019f4 <print_KISS+0x2c8>)
 800193e:	482f      	ldr	r0, [pc, #188]	; (80019fc <print_KISS+0x2d0>)
 8001940:	f004 fc23 	bl	800618a <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800194a:	3318      	adds	r3, #24
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8001950:	4a28      	ldr	r2, [pc, #160]	; (80019f4 <print_KISS+0x2c8>)
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <print_KISS+0x2e8>)
 8001954:	4615      	mov	r5, r2
 8001956:	461c      	mov	r4, r3
 8001958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195a:	6028      	str	r0, [r5, #0]
 800195c:	6069      	str	r1, [r5, #4]
 800195e:	60aa      	str	r2, [r5, #8]
 8001960:	60eb      	str	r3, [r5, #12]
 8001962:	8823      	ldrh	r3, [r4, #0]
 8001964:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001966:	4823      	ldr	r0, [pc, #140]	; (80019f4 <print_KISS+0x2c8>)
 8001968:	f7fe fc52 	bl	8000210 <strlen>
 800196c:	4603      	mov	r3, r0
 800196e:	b29a      	uxth	r2, r3
 8001970:	230a      	movs	r3, #10
 8001972:	4920      	ldr	r1, [pc, #128]	; (80019f4 <print_KISS+0x2c8>)
 8001974:	4821      	ldr	r0, [pc, #132]	; (80019fc <print_KISS+0x2d0>)
 8001976:	f004 fc08 	bl	800618a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	e017      	b.n	80019b0 <print_KISS+0x284>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001988:	4413      	add	r3, r2
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	491d      	ldr	r1, [pc, #116]	; (8001a04 <print_KISS+0x2d8>)
 8001990:	4818      	ldr	r0, [pc, #96]	; (80019f4 <print_KISS+0x2c8>)
 8001992:	f005 fb23 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001996:	4817      	ldr	r0, [pc, #92]	; (80019f4 <print_KISS+0x2c8>)
 8001998:	f7fe fc3a 	bl	8000210 <strlen>
 800199c:	4603      	mov	r3, r0
 800199e:	b29a      	uxth	r2, r3
 80019a0:	230a      	movs	r3, #10
 80019a2:	4914      	ldr	r1, [pc, #80]	; (80019f4 <print_KISS+0x2c8>)
 80019a4:	4815      	ldr	r0, [pc, #84]	; (80019fc <print_KISS+0x2d0>)
 80019a6:	f004 fbf0 	bl	800618a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b07      	cmp	r3, #7
 80019b4:	dde4      	ble.n	8001980 <print_KISS+0x254>
	}
	sprintf(uartData, "\n");
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <print_KISS+0x2c8>)
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <print_KISS+0x2dc>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <print_KISS+0x2c8>)
 80019c0:	f7fe fc26 	bl	8000210 <strlen>
 80019c4:	4603      	mov	r3, r0
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	230a      	movs	r3, #10
 80019ca:	490a      	ldr	r1, [pc, #40]	; (80019f4 <print_KISS+0x2c8>)
 80019cc:	480b      	ldr	r0, [pc, #44]	; (80019fc <print_KISS+0x2d0>)
 80019ce:	f004 fbdc 	bl	800618a <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80019d8:	331c      	adds	r3, #28
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e055      	b.n	8001a9c <print_KISS+0x370>
 80019f0:	20000a38 	.word	0x20000a38
 80019f4:	2000262c 	.word	0x2000262c
 80019f8:	08008a38 	.word	0x08008a38
 80019fc:	200034e8 	.word	0x200034e8
 8001a00:	08008a70 	.word	0x08008a70
 8001a04:	080089c8 	.word	0x080089c8
 8001a08:	080089d0 	.word	0x080089d0
 8001a0c:	080089d4 	.word	0x080089d4
 8001a10:	080089e8 	.word	0x080089e8
 8001a14:	080089fc 	.word	0x080089fc
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	494b      	ldr	r1, [pc, #300]	; (8001b4c <print_KISS+0x420>)
 8001a20:	484b      	ldr	r0, [pc, #300]	; (8001b50 <print_KISS+0x424>)
 8001a22:	f005 fadb 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001a26:	484a      	ldr	r0, [pc, #296]	; (8001b50 <print_KISS+0x424>)
 8001a28:	f7fe fbf2 	bl	8000210 <strlen>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	230a      	movs	r3, #10
 8001a32:	4947      	ldr	r1, [pc, #284]	; (8001b50 <print_KISS+0x424>)
 8001a34:	4847      	ldr	r0, [pc, #284]	; (8001b54 <print_KISS+0x428>)
 8001a36:	f004 fba8 	bl	800618a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	e016      	b.n	8001a6e <print_KISS+0x342>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	425b      	negs	r3, r3
 8001a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4942      	ldr	r1, [pc, #264]	; (8001b58 <print_KISS+0x42c>)
 8001a4e:	4840      	ldr	r0, [pc, #256]	; (8001b50 <print_KISS+0x424>)
 8001a50:	f005 fac4 	bl	8006fdc <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001a54:	483e      	ldr	r0, [pc, #248]	; (8001b50 <print_KISS+0x424>)
 8001a56:	f7fe fbdb 	bl	8000210 <strlen>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	230a      	movs	r3, #10
 8001a60:	493b      	ldr	r1, [pc, #236]	; (8001b50 <print_KISS+0x424>)
 8001a62:	483c      	ldr	r0, [pc, #240]	; (8001b54 <print_KISS+0x428>)
 8001a64:	f004 fb91 	bl	800618a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b07      	cmp	r3, #7
 8001a72:	dde5      	ble.n	8001a40 <print_KISS+0x314>
		}
		curr_mem -= 8;
 8001a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a76:	3b08      	subs	r3, #8
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8001a7a:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <print_KISS+0x424>)
 8001a7c:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <print_KISS+0x430>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001a82:	4833      	ldr	r0, [pc, #204]	; (8001b50 <print_KISS+0x424>)
 8001a84:	f7fe fbc4 	bl	8000210 <strlen>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	4930      	ldr	r1, [pc, #192]	; (8001b50 <print_KISS+0x424>)
 8001a90:	4830      	ldr	r0, [pc, #192]	; (8001b54 <print_KISS+0x428>)
 8001a92:	f004 fb7a 	bl	800618a <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da00      	bge.n	8001aaa <print_KISS+0x37e>
 8001aa8:	3307      	adds	r3, #7
 8001aaa:	10db      	asrs	r3, r3, #3
 8001aac:	3b01      	subs	r3, #1
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbb1      	blt.n	8001a18 <print_KISS+0x2ec>
	}

	//Print Stop Flag
	curr_mem = local_packet->KISS_PACKET;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 8001abc:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <print_KISS+0x424>)
 8001abe:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <print_KISS+0x434>)
 8001ac0:	4615      	mov	r5, r2
 8001ac2:	461c      	mov	r4, r3
 8001ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac6:	6028      	str	r0, [r5, #0]
 8001ac8:	6069      	str	r1, [r5, #4]
 8001aca:	60aa      	str	r2, [r5, #8]
 8001acc:	60eb      	str	r3, [r5, #12]
 8001ace:	8823      	ldrh	r3, [r4, #0]
 8001ad0:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ad2:	481f      	ldr	r0, [pc, #124]	; (8001b50 <print_KISS+0x424>)
 8001ad4:	f7fe fb9c 	bl	8000210 <strlen>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	230a      	movs	r3, #10
 8001ade:	491c      	ldr	r1, [pc, #112]	; (8001b50 <print_KISS+0x424>)
 8001ae0:	481c      	ldr	r0, [pc, #112]	; (8001b54 <print_KISS+0x428>)
 8001ae2:	f004 fb52 	bl	800618a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e017      	b.n	8001b1c <print_KISS+0x3f0>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af4:	4413      	add	r3, r2
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4917      	ldr	r1, [pc, #92]	; (8001b58 <print_KISS+0x42c>)
 8001afc:	4814      	ldr	r0, [pc, #80]	; (8001b50 <print_KISS+0x424>)
 8001afe:	f005 fa6d 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b02:	4813      	ldr	r0, [pc, #76]	; (8001b50 <print_KISS+0x424>)
 8001b04:	f7fe fb84 	bl	8000210 <strlen>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	230a      	movs	r3, #10
 8001b0e:	4910      	ldr	r1, [pc, #64]	; (8001b50 <print_KISS+0x424>)
 8001b10:	4810      	ldr	r0, [pc, #64]	; (8001b54 <print_KISS+0x428>)
 8001b12:	f004 fb3a 	bl	800618a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b07      	cmp	r3, #7
 8001b20:	dde4      	ble.n	8001aec <print_KISS+0x3c0>
	}
	sprintf(uartData, "\n\n");
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <print_KISS+0x424>)
 8001b24:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <print_KISS+0x438>)
 8001b26:	8811      	ldrh	r1, [r2, #0]
 8001b28:	7892      	ldrb	r2, [r2, #2]
 8001b2a:	8019      	strh	r1, [r3, #0]
 8001b2c:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b2e:	4808      	ldr	r0, [pc, #32]	; (8001b50 <print_KISS+0x424>)
 8001b30:	f7fe fb6e 	bl	8000210 <strlen>
 8001b34:	4603      	mov	r3, r0
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	230a      	movs	r3, #10
 8001b3a:	4905      	ldr	r1, [pc, #20]	; (8001b50 <print_KISS+0x424>)
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <print_KISS+0x428>)
 8001b3e:	f004 fb24 	bl	800618a <HAL_UART_Transmit>
}
 8001b42:	bf00      	nop
 8001b44:	3734      	adds	r7, #52	; 0x34
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	08008a10 	.word	0x08008a10
 8001b50:	2000262c 	.word	0x2000262c
 8001b54:	200034e8 	.word	0x200034e8
 8001b58:	080089c8 	.word	0x080089c8
 8001b5c:	080089d0 	.word	0x080089d0
 8001b60:	08008a84 	.word	0x08008a84
 8001b64:	08008a98 	.word	0x08008a98

08001b68 <UART2_EXCEPTION_CALLBACK>:

//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	491d      	ldr	r1, [pc, #116]	; (8001be4 <UART2_EXCEPTION_CALLBACK+0x7c>)
 8001b70:	481d      	ldr	r0, [pc, #116]	; (8001be8 <UART2_EXCEPTION_CALLBACK+0x80>)
 8001b72:	f004 fba3 	bl	80062bc <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001b7e:	7b1b      	ldrb	r3, [r3, #12]
 8001b80:	2bc0      	cmp	r3, #192	; 0xc0
 8001b82:	d104      	bne.n	8001b8e <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a18      	ldr	r2, [pc, #96]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001b8c:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <UART2_EXCEPTION_CALLBACK+0x88>)
 8001b96:	4413      	add	r3, r2
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001b9a:	7b12      	ldrb	r2, [r2, #12]
 8001b9c:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a11      	ldr	r2, [pc, #68]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001ba6:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	dd16      	ble.n	8001bde <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <UART2_EXCEPTION_CALLBACK+0x8c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	f083 0301 	eor.w	r3, r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <UART2_EXCEPTION_CALLBACK+0x90>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a05      	ldr	r2, [pc, #20]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001bd6:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <UART2_EXCEPTION_CALLBACK+0x84>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]

	  }
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20001da0 	.word	0x20001da0
 8001be8:	200034e8 	.word	0x200034e8
 8001bec:	20001d94 	.word	0x20001d94
 8001bf0:	20001da2 	.word	0x20001da2
 8001bf4:	20003490 	.word	0x20003490
 8001bf8:	20000a09 	.word	0x20000a09

08001bfc <receiving_AX25>:
//****************************************************************************************************************
//END OF UART Handling data flow

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 8001c02:	4a51      	ldr	r2, [pc, #324]	; (8001d48 <receiving_AX25+0x14c>)
 8001c04:	4b51      	ldr	r3, [pc, #324]	; (8001d4c <receiving_AX25+0x150>)
 8001c06:	4615      	mov	r5, r2
 8001c08:	461c      	mov	r4, r3
 8001c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c0c:	6028      	str	r0, [r5, #0]
 8001c0e:	6069      	str	r1, [r5, #4]
 8001c10:	60aa      	str	r2, [r5, #8]
 8001c12:	60eb      	str	r3, [r5, #12]
 8001c14:	cc03      	ldmia	r4!, {r0, r1}
 8001c16:	6128      	str	r0, [r5, #16]
 8001c18:	6169      	str	r1, [r5, #20]
 8001c1a:	7823      	ldrb	r3, [r4, #0]
 8001c1c:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c1e:	484a      	ldr	r0, [pc, #296]	; (8001d48 <receiving_AX25+0x14c>)
 8001c20:	f7fe faf6 	bl	8000210 <strlen>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	230a      	movs	r3, #10
 8001c2a:	4947      	ldr	r1, [pc, #284]	; (8001d48 <receiving_AX25+0x14c>)
 8001c2c:	4848      	ldr	r0, [pc, #288]	; (8001d50 <receiving_AX25+0x154>)
 8001c2e:	f004 faac 	bl	800618a <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001c32:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <receiving_AX25+0x158>)
 8001c34:	60fb      	str	r3, [r7, #12]

	int packet_status;
	packet_status = streamGet();
 8001c36:	f001 f931 	bl	8002e9c <streamGet>
 8001c3a:	60b8      	str	r0, [r7, #8]

	//Valid packet received
	if(packet_status == 1){
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d13b      	bne.n	8001cba <receiving_AX25+0xbe>
		//Remove the bit stuffed zeros from received packet and reset packet type
		//remove_bit_stuffing();
		local_packet->i_frame_packet = false;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c48:	3308      	adds	r3, #8
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]

		//Validate packet
		bool AX25_IsValid = AX25_Packet_Validate();
 8001c4e:	f000 f889 	bl	8001d64 <AX25_Packet_Validate>
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		if(AX25_IsValid){
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <receiving_AX25+0x78>
			//Put data into KISS format and buffer
			AX25_TO_KISS();
 8001c5c:	f000 f9aa 	bl	8001fb4 <AX25_TO_KISS>

			//Transmit KISS Packet that has been generated
			//output_KISS();

			//Clear AX.25 buffer
			memset(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f640 225f 	movw	r2, #2655	; 0xa5f
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 f9ae 	bl	8006fca <memset>

			//Loop back and begin receiving another message
			receiving_AX25();
 8001c6e:	f7ff ffc5 	bl	8001bfc <receiving_AX25>
 8001c72:	e065      	b.n	8001d40 <receiving_AX25+0x144>
		}
		else{
			sprintf(uartData, "Packet was not valid, restarting\n");
 8001c74:	4b34      	ldr	r3, [pc, #208]	; (8001d48 <receiving_AX25+0x14c>)
 8001c76:	4a38      	ldr	r2, [pc, #224]	; (8001d58 <receiving_AX25+0x15c>)
 8001c78:	4614      	mov	r4, r2
 8001c7a:	469c      	mov	ip, r3
 8001c7c:	f104 0e20 	add.w	lr, r4, #32
 8001c80:	4665      	mov	r5, ip
 8001c82:	4626      	mov	r6, r4
 8001c84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c86:	6028      	str	r0, [r5, #0]
 8001c88:	6069      	str	r1, [r5, #4]
 8001c8a:	60aa      	str	r2, [r5, #8]
 8001c8c:	60eb      	str	r3, [r5, #12]
 8001c8e:	3410      	adds	r4, #16
 8001c90:	f10c 0c10 	add.w	ip, ip, #16
 8001c94:	4574      	cmp	r4, lr
 8001c96:	d1f3      	bne.n	8001c80 <receiving_AX25+0x84>
 8001c98:	4662      	mov	r2, ip
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ca0:	4829      	ldr	r0, [pc, #164]	; (8001d48 <receiving_AX25+0x14c>)
 8001ca2:	f7fe fab5 	bl	8000210 <strlen>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	230a      	movs	r3, #10
 8001cac:	4926      	ldr	r1, [pc, #152]	; (8001d48 <receiving_AX25+0x14c>)
 8001cae:	4828      	ldr	r0, [pc, #160]	; (8001d50 <receiving_AX25+0x154>)
 8001cb0:	f004 fa6b 	bl	800618a <HAL_UART_Transmit>
			receiving_AX25();
 8001cb4:	f7ff ffa2 	bl	8001bfc <receiving_AX25>
 8001cb8:	e042      	b.n	8001d40 <receiving_AX25+0x144>
		}
	}
	//Return code for toggleMode
	else if(packet_status == -1){
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d118      	bne.n	8001cf4 <receiving_AX25+0xf8>
		sprintf(uartData, "Need to change mode\n");
 8001cc2:	4a21      	ldr	r2, [pc, #132]	; (8001d48 <receiving_AX25+0x14c>)
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <receiving_AX25+0x160>)
 8001cc6:	4615      	mov	r5, r2
 8001cc8:	461c      	mov	r4, r3
 8001cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ccc:	6028      	str	r0, [r5, #0]
 8001cce:	6069      	str	r1, [r5, #4]
 8001cd0:	60aa      	str	r2, [r5, #8]
 8001cd2:	60eb      	str	r3, [r5, #12]
 8001cd4:	6820      	ldr	r0, [r4, #0]
 8001cd6:	6128      	str	r0, [r5, #16]
 8001cd8:	7923      	ldrb	r3, [r4, #4]
 8001cda:	752b      	strb	r3, [r5, #20]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001cdc:	481a      	ldr	r0, [pc, #104]	; (8001d48 <receiving_AX25+0x14c>)
 8001cde:	f7fe fa97 	bl	8000210 <strlen>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	4917      	ldr	r1, [pc, #92]	; (8001d48 <receiving_AX25+0x14c>)
 8001cea:	4819      	ldr	r0, [pc, #100]	; (8001d50 <receiving_AX25+0x154>)
 8001cec:	f004 fa4d 	bl	800618a <HAL_UART_Transmit>

		return false;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e025      	b.n	8001d40 <receiving_AX25+0x144>
	}
	//Weird case of unknown return code toggles mode
	else{
		sprintf(uartData, "Packet status was unknown, restarting\n");
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <receiving_AX25+0x14c>)
 8001cf6:	4a1a      	ldr	r2, [pc, #104]	; (8001d60 <receiving_AX25+0x164>)
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	469c      	mov	ip, r3
 8001cfc:	f104 0e20 	add.w	lr, r4, #32
 8001d00:	4665      	mov	r5, ip
 8001d02:	4626      	mov	r6, r4
 8001d04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d06:	6028      	str	r0, [r5, #0]
 8001d08:	6069      	str	r1, [r5, #4]
 8001d0a:	60aa      	str	r2, [r5, #8]
 8001d0c:	60eb      	str	r3, [r5, #12]
 8001d0e:	3410      	adds	r4, #16
 8001d10:	f10c 0c10 	add.w	ip, ip, #16
 8001d14:	4574      	cmp	r4, lr
 8001d16:	d1f3      	bne.n	8001d00 <receiving_AX25+0x104>
 8001d18:	4663      	mov	r3, ip
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	6810      	ldr	r0, [r2, #0]
 8001d1e:	6018      	str	r0, [r3, #0]
 8001d20:	8891      	ldrh	r1, [r2, #4]
 8001d22:	7992      	ldrb	r2, [r2, #6]
 8001d24:	8099      	strh	r1, [r3, #4]
 8001d26:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001d28:	4807      	ldr	r0, [pc, #28]	; (8001d48 <receiving_AX25+0x14c>)
 8001d2a:	f7fe fa71 	bl	8000210 <strlen>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	230a      	movs	r3, #10
 8001d34:	4904      	ldr	r1, [pc, #16]	; (8001d48 <receiving_AX25+0x14c>)
 8001d36:	4806      	ldr	r0, [pc, #24]	; (8001d50 <receiving_AX25+0x154>)
 8001d38:	f004 fa27 	bl	800618a <HAL_UART_Transmit>
		receiving_AX25();
 8001d3c:	f7ff ff5e 	bl	8001bfc <receiving_AX25>
	}
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d48:	2000262c 	.word	0x2000262c
 8001d4c:	08008a9c 	.word	0x08008a9c
 8001d50:	200034e8 	.word	0x200034e8
 8001d54:	20000a38 	.word	0x20000a38
 8001d58:	08008ab8 	.word	0x08008ab8
 8001d5c:	08008adc 	.word	0x08008adc
 8001d60:	08008af4 	.word	0x08008af4

08001d64 <AX25_Packet_Validate>:
		}
	}
	//transmit kiss
}

bool AX25_Packet_Validate(){
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <AX25_Packet_Validate+0x5c>)
 8001d6c:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <AX25_Packet_Validate+0x60>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b77      	cmp	r3, #119	; 0x77
 8001d78:	dc0a      	bgt.n	8001d90 <AX25_Packet_Validate+0x2c>
		sprintf(uartData,"Trash Packet");
 8001d7a:	4a13      	ldr	r2, [pc, #76]	; (8001dc8 <AX25_Packet_Validate+0x64>)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <AX25_Packet_Validate+0x68>)
 8001d7e:	4614      	mov	r4, r2
 8001d80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001d82:	6020      	str	r0, [r4, #0]
 8001d84:	6061      	str	r1, [r4, #4]
 8001d86:	60a2      	str	r2, [r4, #8]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	7323      	strb	r3, [r4, #12]
		return false;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e013      	b.n	8001db8 <AX25_Packet_Validate+0x54>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <AX25_Packet_Validate+0x60>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00a      	beq.n	8001db2 <AX25_Packet_Validate+0x4e>
		sprintf(uartData,"Trash Packet");
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <AX25_Packet_Validate+0x64>)
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <AX25_Packet_Validate+0x68>)
 8001da0:	4614      	mov	r4, r2
 8001da2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001da4:	6020      	str	r0, [r4, #0]
 8001da6:	6061      	str	r1, [r4, #4]
 8001da8:	60a2      	str	r2, [r4, #8]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	7323      	strb	r3, [r4, #12]
		return false;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e002      	b.n	8001db8 <AX25_Packet_Validate+0x54>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 8001db2:	f000 f80d 	bl	8001dd0 <set_packet_pointer_AX25>
		//return crc_check();
		return true;
 8001db6:	2301      	movs	r3, #1
	}

//	return true; //valid packet
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd90      	pop	{r4, r7, pc}
 8001dc0:	20000a38 	.word	0x20000a38
 8001dc4:	20000a04 	.word	0x20000a04
 8001dc8:	2000262c 	.word	0x2000262c
 8001dcc:	08008b1c 	.word	0x08008b1c

08001dd0 <set_packet_pointer_AX25>:


void set_packet_pointer_AX25(){
 8001dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001dd6:	4b6e      	ldr	r3, [pc, #440]	; (8001f90 <set_packet_pointer_AX25+0x1c0>)
 8001dd8:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 8001dda:	2310      	movs	r3, #16
 8001ddc:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 8001dde:	4b6d      	ldr	r3, [pc, #436]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001de0:	4a6d      	ldr	r2, [pc, #436]	; (8001f98 <set_packet_pointer_AX25+0x1c8>)
 8001de2:	4614      	mov	r4, r2
 8001de4:	469c      	mov	ip, r3
 8001de6:	f104 0e20 	add.w	lr, r4, #32
 8001dea:	4665      	mov	r5, ip
 8001dec:	4626      	mov	r6, r4
 8001dee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001df0:	6028      	str	r0, [r5, #0]
 8001df2:	6069      	str	r1, [r5, #4]
 8001df4:	60aa      	str	r2, [r5, #8]
 8001df6:	60eb      	str	r3, [r5, #12]
 8001df8:	3410      	adds	r4, #16
 8001dfa:	f10c 0c10 	add.w	ip, ip, #16
 8001dfe:	4574      	cmp	r4, lr
 8001e00:	d1f3      	bne.n	8001dea <set_packet_pointer_AX25+0x1a>
 8001e02:	4663      	mov	r3, ip
 8001e04:	4622      	mov	r2, r4
 8001e06:	7812      	ldrb	r2, [r2, #0]
 8001e08:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e0a:	4862      	ldr	r0, [pc, #392]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001e0c:	f7fe fa00 	bl	8000210 <strlen>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	230a      	movs	r3, #10
 8001e16:	495f      	ldr	r1, [pc, #380]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001e18:	4860      	ldr	r0, [pc, #384]	; (8001f9c <set_packet_pointer_AX25+0x1cc>)
 8001e1a:	f004 f9b6 	bl	800618a <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 8001e22:	4a5c      	ldr	r2, [pc, #368]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001e24:	4b5e      	ldr	r3, [pc, #376]	; (8001fa0 <set_packet_pointer_AX25+0x1d0>)
 8001e26:	4615      	mov	r5, r2
 8001e28:	461c      	mov	r4, r3
 8001e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2c:	6028      	str	r0, [r5, #0]
 8001e2e:	6069      	str	r1, [r5, #4]
 8001e30:	60aa      	str	r2, [r5, #8]
 8001e32:	60eb      	str	r3, [r5, #12]
 8001e34:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001e36:	6128      	str	r0, [r5, #16]
 8001e38:	6169      	str	r1, [r5, #20]
 8001e3a:	61aa      	str	r2, [r5, #24]
 8001e3c:	7823      	ldrb	r3, [r4, #0]
 8001e3e:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e40:	4854      	ldr	r0, [pc, #336]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001e42:	f7fe f9e5 	bl	8000210 <strlen>
 8001e46:	4603      	mov	r3, r0
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	230a      	movs	r3, #10
 8001e4c:	4951      	ldr	r1, [pc, #324]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001e4e:	4853      	ldr	r0, [pc, #332]	; (8001f9c <set_packet_pointer_AX25+0x1cc>)
 8001e50:	f004 f99b 	bl	800618a <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001e5a:	3310      	adds	r3, #16
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3370      	adds	r3, #112	; 0x70
 8001e64:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3370      	adds	r3, #112	; 0x70
 8001e6a:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 8001e6c:	4a49      	ldr	r2, [pc, #292]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001e6e:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <set_packet_pointer_AX25+0x1d4>)
 8001e70:	4615      	mov	r5, r2
 8001e72:	461c      	mov	r4, r3
 8001e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e76:	6028      	str	r0, [r5, #0]
 8001e78:	6069      	str	r1, [r5, #4]
 8001e7a:	60aa      	str	r2, [r5, #8]
 8001e7c:	60eb      	str	r3, [r5, #12]
 8001e7e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001e80:	6128      	str	r0, [r5, #16]
 8001e82:	6169      	str	r1, [r5, #20]
 8001e84:	61aa      	str	r2, [r5, #24]
 8001e86:	7823      	ldrb	r3, [r4, #0]
 8001e88:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e8a:	4842      	ldr	r0, [pc, #264]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001e8c:	f7fe f9c0 	bl	8000210 <strlen>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	230a      	movs	r3, #10
 8001e96:	493f      	ldr	r1, [pc, #252]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001e98:	4840      	ldr	r0, [pc, #256]	; (8001f9c <set_packet_pointer_AX25+0x1cc>)
 8001e9a:	f004 f976 	bl	800618a <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001ea4:	3314      	adds	r3, #20
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3308      	adds	r3, #8
 8001eae:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 8001eb6:	4a37      	ldr	r2, [pc, #220]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001eb8:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <set_packet_pointer_AX25+0x1d8>)
 8001eba:	4615      	mov	r5, r2
 8001ebc:	461c      	mov	r4, r3
 8001ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec0:	6028      	str	r0, [r5, #0]
 8001ec2:	6069      	str	r1, [r5, #4]
 8001ec4:	60aa      	str	r2, [r5, #8]
 8001ec6:	60eb      	str	r3, [r5, #12]
 8001ec8:	cc03      	ldmia	r4!, {r0, r1}
 8001eca:	6128      	str	r0, [r5, #16]
 8001ecc:	6169      	str	r1, [r5, #20]
 8001ece:	7823      	ldrb	r3, [r4, #0]
 8001ed0:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ed2:	4830      	ldr	r0, [pc, #192]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001ed4:	f7fe f99c 	bl	8000210 <strlen>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	230a      	movs	r3, #10
 8001ede:	492d      	ldr	r1, [pc, #180]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001ee0:	482e      	ldr	r0, [pc, #184]	; (8001f9c <set_packet_pointer_AX25+0x1cc>)
 8001ee2:	f004 f952 	bl	800618a <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001eec:	3318      	adds	r3, #24
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3308      	adds	r3, #8
 8001ef6:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	3308      	adds	r3, #8
 8001efc:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 8001efe:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <set_packet_pointer_AX25+0x1dc>)
 8001f02:	4615      	mov	r5, r2
 8001f04:	461c      	mov	r4, r3
 8001f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f08:	6028      	str	r0, [r5, #0]
 8001f0a:	6069      	str	r1, [r5, #4]
 8001f0c:	60aa      	str	r2, [r5, #8]
 8001f0e:	60eb      	str	r3, [r5, #12]
 8001f10:	cc03      	ldmia	r4!, {r0, r1}
 8001f12:	6128      	str	r0, [r5, #16]
 8001f14:	6169      	str	r1, [r5, #20]
 8001f16:	8823      	ldrh	r3, [r4, #0]
 8001f18:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f1a:	481e      	ldr	r0, [pc, #120]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001f1c:	f7fe f978 	bl	8000210 <strlen>
 8001f20:	4603      	mov	r3, r0
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	230a      	movs	r3, #10
 8001f26:	491b      	ldr	r1, [pc, #108]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001f28:	481c      	ldr	r0, [pc, #112]	; (8001f9c <set_packet_pointer_AX25+0x1cc>)
 8001f2a:	f004 f92e 	bl	800618a <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f34:	331c      	adds	r3, #28
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <set_packet_pointer_AX25+0x1e0>)
 8001f4e:	4615      	mov	r5, r2
 8001f50:	461c      	mov	r4, r3
 8001f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f54:	6028      	str	r0, [r5, #0]
 8001f56:	6069      	str	r1, [r5, #4]
 8001f58:	60aa      	str	r2, [r5, #8]
 8001f5a:	60eb      	str	r3, [r5, #12]
 8001f5c:	cc03      	ldmia	r4!, {r0, r1}
 8001f5e:	6128      	str	r0, [r5, #16]
 8001f60:	6169      	str	r1, [r5, #20]
 8001f62:	7823      	ldrb	r3, [r4, #0]
 8001f64:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f66:	480b      	ldr	r0, [pc, #44]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001f68:	f7fe f952 	bl	8000210 <strlen>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	230a      	movs	r3, #10
 8001f72:	4908      	ldr	r1, [pc, #32]	; (8001f94 <set_packet_pointer_AX25+0x1c4>)
 8001f74:	4809      	ldr	r0, [pc, #36]	; (8001f9c <set_packet_pointer_AX25+0x1cc>)
 8001f76:	f004 f908 	bl	800618a <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001f80:	3304      	adds	r3, #4
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000a38 	.word	0x20000a38
 8001f94:	2000262c 	.word	0x2000262c
 8001f98:	08008b2c 	.word	0x08008b2c
 8001f9c:	200034e8 	.word	0x200034e8
 8001fa0:	08008b50 	.word	0x08008b50
 8001fa4:	08008b70 	.word	0x08008b70
 8001fa8:	08008b90 	.word	0x08008b90
 8001fac:	08008bac 	.word	0x08008bac
 8001fb0:	08008bc8 	.word	0x08008bc8

08001fb4 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001fba:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <AX25_TO_KISS+0xc4>)
 8001fbc:	607b      	str	r3, [r7, #4]

	set_packet_pointer_AX25();
 8001fbe:	f7ff ff07 	bl	8001dd0 <set_packet_pointer_AX25>
	print_AX25();
 8001fc2:	f7ff f983 	bl	80012cc <print_AX25>

	bool* cpy_from_ptr = (local_packet->AX25_PACKET+8);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3308      	adds	r3, #8
 8001fca:	603b      	str	r3, [r7, #0]

	set_packet_pointer_KISS();
 8001fcc:	f000 f90e 	bl	80021ec <set_packet_pointer_KISS>

	memcpy(local_packet->AX25_PACKET,KISS_FLAG,FLAG_SIZE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	492a      	ldr	r1, [pc, #168]	; (800207c <AX25_TO_KISS+0xc8>)
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	cb03      	ldmia	r3!, {r0, r1}
 8001fda:	6010      	str	r0, [r2, #0]
 8001fdc:	6051      	str	r1, [r2, #4]

	memcpy(local_packet->address,cpy_from_ptr,address_len);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001fe4:	3310      	adds	r3, #16
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2270      	movs	r2, #112	; 0x70
 8001fea:	6839      	ldr	r1, [r7, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 ffe1 	bl	8006fb4 <memcpy>
	cpy_from_ptr += address_len;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	3370      	adds	r3, #112	; 0x70
 8001ff6:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001ffe:	3314      	adds	r3, #20
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2208      	movs	r2, #8
 8002004:	6839      	ldr	r1, [r7, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f004 ffd4 	bl	8006fb4 <memcpy>
	cpy_from_ptr += control_len;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	3308      	adds	r3, #8
 8002010:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002018:	3318      	adds	r3, #24
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2208      	movs	r2, #8
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f004 ffc7 	bl	8006fb4 <memcpy>
	cpy_from_ptr += PID_len;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	3308      	adds	r3, #8
 800202a:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002032:	331c      	adds	r3, #28
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	f004 ffb7 	bl	8006fb4 <memcpy>

	memcpy(local_packet->Info+local_packet->Info_Len,KISS_FLAG,FLAG_SIZE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800204c:	331c      	adds	r3, #28
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4413      	add	r3, r2
 800205a:	4908      	ldr	r1, [pc, #32]	; (800207c <AX25_TO_KISS+0xc8>)
 800205c:	461a      	mov	r2, r3
 800205e:	460b      	mov	r3, r1
 8002060:	cb03      	ldmia	r3!, {r0, r1}
 8002062:	6010      	str	r0, [r2, #0]
 8002064:	6051      	str	r1, [r2, #4]

	KISS_TO_HEX();
 8002066:	f000 f9af 	bl	80023c8 <KISS_TO_HEX>

	//BIT STUFFING NEEDED
//	bitstuffing(local_packet);

	//Print the ax25 packet
	print_KISS();
 800206a:	f7ff fb5f 	bl	800172c <print_KISS>
	return true; //valid packet
 800206e:	bf00      	nop
}
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000a38 	.word	0x20000a38
 800207c:	20000000 	.word	0x20000000

08002080 <clear_AX25>:
void clear_AX25(){
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <clear_AX25+0x6c>)
 8002088:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 800208a:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <clear_AX25+0x70>)
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <clear_AX25+0x74>)
 800208e:	4615      	mov	r5, r2
 8002090:	461c      	mov	r4, r3
 8002092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002094:	6028      	str	r0, [r5, #0]
 8002096:	6069      	str	r1, [r5, #4]
 8002098:	60aa      	str	r2, [r5, #8]
 800209a:	60eb      	str	r3, [r5, #12]
 800209c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800209e:	6128      	str	r0, [r5, #16]
 80020a0:	6169      	str	r1, [r5, #20]
 80020a2:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80020a4:	4812      	ldr	r0, [pc, #72]	; (80020f0 <clear_AX25+0x70>)
 80020a6:	f7fe f8b3 	bl	8000210 <strlen>
 80020aa:	4603      	mov	r3, r0
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	230a      	movs	r3, #10
 80020b0:	490f      	ldr	r1, [pc, #60]	; (80020f0 <clear_AX25+0x70>)
 80020b2:	4811      	ldr	r0, [pc, #68]	; (80020f8 <clear_AX25+0x78>)
 80020b4:	f004 f869 	bl	800618a <HAL_UART_Transmit>

	memcpy(local_packet->Info+local_packet->Info_Len,KISS_FLAG,FLAG_SIZE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80020be:	331c      	adds	r3, #28
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	f502 5298 	add.w	r2, r2, #4864	; 0x1300
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	490b      	ldr	r1, [pc, #44]	; (80020fc <clear_AX25+0x7c>)
 80020ce:	461a      	mov	r2, r3
 80020d0:	460b      	mov	r3, r1
 80020d2:	cb03      	ldmia	r3!, {r0, r1}
 80020d4:	6010      	str	r0, [r2, #0]
 80020d6:	6051      	str	r1, [r2, #4]

	//KISS_TO_HEX();
	rxBit_count = 0;
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <clear_AX25+0x80>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
	print_KISS();
 80020de:	f7ff fb25 	bl	800172c <print_KISS>
	return true; //valid packet
 80020e2:	bf00      	nop
}
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bdb0      	pop	{r4, r5, r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000a38 	.word	0x20000a38
 80020f0:	2000262c 	.word	0x2000262c
 80020f4:	08008be4 	.word	0x08008be4
 80020f8:	200034e8 	.word	0x200034e8
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000a04 	.word	0x20000a04

08002104 <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 800210a:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <receiving_KISS+0xd4>)
 800210c:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 800210e:	4b33      	ldr	r3, [pc, #204]	; (80021dc <receiving_KISS+0xd8>)
 8002110:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	7b5b      	ldrb	r3, [r3, #13]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d059      	beq.n	80021ce <receiving_KISS+0xca>
		sprintf(uartData, "\nGot a packet via UART of size %d, printing now...\n",local_UART_packet->received_byte_cnt);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	461a      	mov	r2, r3
 8002120:	492f      	ldr	r1, [pc, #188]	; (80021e0 <receiving_KISS+0xdc>)
 8002122:	4830      	ldr	r0, [pc, #192]	; (80021e4 <receiving_KISS+0xe0>)
 8002124:	f004 ff5a 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002128:	482e      	ldr	r0, [pc, #184]	; (80021e4 <receiving_KISS+0xe0>)
 800212a:	f7fe f871 	bl	8000210 <strlen>
 800212e:	4603      	mov	r3, r0
 8002130:	b29a      	uxth	r2, r3
 8002132:	230a      	movs	r3, #10
 8002134:	492b      	ldr	r1, [pc, #172]	; (80021e4 <receiving_KISS+0xe0>)
 8002136:	482c      	ldr	r0, [pc, #176]	; (80021e8 <receiving_KISS+0xe4>)
 8002138:	f004 f827 	bl	800618a <HAL_UART_Transmit>
		int byte_cnt = local_UART_packet->received_byte_cnt;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i < byte_cnt;i++){
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e01f      	b.n	8002188 <receiving_KISS+0x84>
			//Hex value from UART
			 //start from LS Byte = Highest index
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[byte_cnt-1-i];
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1e5a      	subs	r2, r3, #1
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	7b9b      	ldrb	r3, [r3, #14]
 8002156:	71bb      	strb	r3, [r7, #6]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	3307      	adds	r3, #7
 8002166:	603b      	str	r3, [r7, #0]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 8002168:	79bb      	ldrb	r3, [r7, #6]
 800216a:	b29b      	uxth	r3, r3
 800216c:	2201      	movs	r2, #1
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe feb1 	bl	8000ed8 <conv_HEX_to_BIN>

//			local_UART_packet->got_packet = false;
			local_packet->got_packet = true;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800217c:	3309      	adds	r3, #9
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i < byte_cnt;i++){
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	429a      	cmp	r2, r3
 800218e:	dbdb      	blt.n	8002148 <receiving_KISS+0x44>
		}
		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800219a:	330c      	adds	r3, #12
 800219c:	601a      	str	r2, [r3, #0]
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset)*8;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80021a4:	330c      	adds	r3, #12
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3b12      	subs	r3, #18
 80021aa:	00da      	lsls	r2, r3, #3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80021b2:	601a      	str	r2, [r3, #0]

		//Convert KISS packet to AX.25 packet
		bool success = KISS_TO_AX25();
 80021b4:	f000 f878 	bl	80022a8 <KISS_TO_AX25>
 80021b8:	4603      	mov	r3, r0
 80021ba:	71fb      	strb	r3, [r7, #7]
		//Upon exit, have a perfectly good AX.25 packet

		//Output AFSK waveform for radio
		if(success) {
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <receiving_KISS+0xc2>
//			output_AX25();
			print_AX25();
 80021c2:	f7ff f883 	bl	80012cc <print_AX25>
		}
		clear_AX25();
 80021c6:	f7ff ff5b 	bl	8002080 <clear_AX25>
		return success;
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	e000      	b.n	80021d0 <receiving_KISS+0xcc>
	}
	return false;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20001d94 	.word	0x20001d94
 80021dc:	20000a38 	.word	0x20000a38
 80021e0:	08008c00 	.word	0x08008c00
 80021e4:	2000262c 	.word	0x2000262c
 80021e8:	200034e8 	.word	0x200034e8

080021ec <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 80021ec:	b5b0      	push	{r4, r5, r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80021f2:	4b29      	ldr	r3, [pc, #164]	; (8002298 <set_packet_pointer_KISS+0xac>)
 80021f4:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS\n");
 80021f6:	4a29      	ldr	r2, [pc, #164]	; (800229c <set_packet_pointer_KISS+0xb0>)
 80021f8:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <set_packet_pointer_KISS+0xb4>)
 80021fa:	4614      	mov	r4, r2
 80021fc:	461d      	mov	r5, r3
 80021fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002200:	6020      	str	r0, [r4, #0]
 8002202:	6061      	str	r1, [r4, #4]
 8002204:	60a2      	str	r2, [r4, #8]
 8002206:	60e3      	str	r3, [r4, #12]
 8002208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220a:	6120      	str	r0, [r4, #16]
 800220c:	6161      	str	r1, [r4, #20]
 800220e:	61a2      	str	r2, [r4, #24]
 8002210:	61e3      	str	r3, [r4, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002212:	4822      	ldr	r0, [pc, #136]	; (800229c <set_packet_pointer_KISS+0xb0>)
 8002214:	f7fd fffc 	bl	8000210 <strlen>
 8002218:	4603      	mov	r3, r0
 800221a:	b29a      	uxth	r2, r3
 800221c:	230a      	movs	r3, #10
 800221e:	491f      	ldr	r1, [pc, #124]	; (800229c <set_packet_pointer_KISS+0xb0>)
 8002220:	4820      	ldr	r0, [pc, #128]	; (80022a4 <set_packet_pointer_KISS+0xb8>)
 8002222:	f003 ffb2 	bl	800618a <HAL_UART_Transmit>

	bool *curr_mem = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002232:	330c      	adds	r3, #12
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3b02      	subs	r3, #2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	603b      	str	r3, [r7, #0]

	curr_mem -= address_len;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	3b70      	subs	r3, #112	; 0x70
 8002242:	603b      	str	r3, [r7, #0]
	local_packet->address = curr_mem;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800224a:	3310      	adds	r3, #16
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	601a      	str	r2, [r3, #0]

	curr_mem -= control_len;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	3b08      	subs	r3, #8
 8002254:	603b      	str	r3, [r7, #0]
	local_packet->control = curr_mem;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800225c:	3314      	adds	r3, #20
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	601a      	str	r2, [r3, #0]

	curr_mem -= PID_len;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	3b08      	subs	r3, #8
 8002266:	603b      	str	r3, [r7, #0]
	local_packet->PID = curr_mem;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800226e:	3318      	adds	r3, #24
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	601a      	str	r2, [r3, #0]

	curr_mem -= local_packet->Info_Len;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	425b      	negs	r3, r3
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	4413      	add	r3, r2
 8002282:	603b      	str	r3, [r7, #0]
	local_packet->Info = curr_mem;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800228a:	331c      	adds	r3, #28
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	601a      	str	r2, [r3, #0]
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bdb0      	pop	{r4, r5, r7, pc}
 8002298:	20000a38 	.word	0x20000a38
 800229c:	2000262c 	.word	0x2000262c
 80022a0:	08008c34 	.word	0x08008c34
 80022a4:	200034e8 	.word	0x200034e8

080022a8 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 80022a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80022ae:	4b41      	ldr	r3, [pc, #260]	; (80023b4 <KISS_TO_AX25+0x10c>)
 80022b0:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Before KISS -> AX.25 conversion\n");
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <KISS_TO_AX25+0x110>)
 80022b4:	4a41      	ldr	r2, [pc, #260]	; (80023bc <KISS_TO_AX25+0x114>)
 80022b6:	4614      	mov	r4, r2
 80022b8:	469c      	mov	ip, r3
 80022ba:	f104 0e20 	add.w	lr, r4, #32
 80022be:	4665      	mov	r5, ip
 80022c0:	4626      	mov	r6, r4
 80022c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80022c4:	6028      	str	r0, [r5, #0]
 80022c6:	6069      	str	r1, [r5, #4]
 80022c8:	60aa      	str	r2, [r5, #8]
 80022ca:	60eb      	str	r3, [r5, #12]
 80022cc:	3410      	adds	r4, #16
 80022ce:	f10c 0c10 	add.w	ip, ip, #16
 80022d2:	4574      	cmp	r4, lr
 80022d4:	d1f3      	bne.n	80022be <KISS_TO_AX25+0x16>
 80022d6:	4663      	mov	r3, ip
 80022d8:	4622      	mov	r2, r4
 80022da:	7812      	ldrb	r2, [r2, #0]
 80022dc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80022de:	4836      	ldr	r0, [pc, #216]	; (80023b8 <KISS_TO_AX25+0x110>)
 80022e0:	f7fd ff96 	bl	8000210 <strlen>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	230a      	movs	r3, #10
 80022ea:	4933      	ldr	r1, [pc, #204]	; (80023b8 <KISS_TO_AX25+0x110>)
 80022ec:	4834      	ldr	r0, [pc, #208]	; (80023c0 <KISS_TO_AX25+0x118>)
 80022ee:	f003 ff4c 	bl	800618a <HAL_UART_Transmit>

	set_packet_pointer_KISS();
 80022f2:	f7ff ff7b 	bl	80021ec <set_packet_pointer_KISS>
	print_KISS();
 80022f6:	f7ff fa19 	bl	800172c <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002306:	330c      	adds	r3, #12
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3b02      	subs	r3, #2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	603b      	str	r3, [r7, #0]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 8002312:	f7ff fd5d 	bl	8001dd0 <set_packet_pointer_AX25>

	cpy_from_ptr -= address_len;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	3b70      	subs	r3, #112	; 0x70
 800231a:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->address,cpy_from_ptr,address_len);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002322:	3310      	adds	r3, #16
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2270      	movs	r2, #112	; 0x70
 8002328:	6839      	ldr	r1, [r7, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f004 fe42 	bl	8006fb4 <memcpy>

	cpy_from_ptr -= control_len;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	3b08      	subs	r3, #8
 8002334:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800233c:	3314      	adds	r3, #20
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2208      	movs	r2, #8
 8002342:	6839      	ldr	r1, [r7, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f004 fe35 	bl	8006fb4 <memcpy>

	cpy_from_ptr -= PID_len;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	3b08      	subs	r3, #8
 800234e:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002356:	3318      	adds	r3, #24
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2208      	movs	r2, #8
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f004 fe28 	bl	8006fb4 <memcpy>

	cpy_from_ptr -= local_packet->Info_Len;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	425b      	negs	r3, r3
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	4413      	add	r3, r2
 8002372:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800237a:	331c      	adds	r3, #28
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	6839      	ldr	r1, [r7, #0]
 800238a:	f004 fe13 	bl	8006fb4 <memcpy>

	//USE CRC HERE TO GENERATE FCS FIELD
	rxBit_count = address_len + control_len + PID_len + local_packet->Info_Len - 8;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3378      	adds	r3, #120	; 0x78
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <KISS_TO_AX25+0x11c>)
 800239a:	6013      	str	r3, [r2, #0]
	crc_generate();
 800239c:	f000 f8b6 	bl	800250c <crc_generate>

	//BIT STUFFING NEEDED
//	bitstuffing(local_packet);
	rxBit_count = 0;
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <KISS_TO_AX25+0x11c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
	print_AX25();
 80023a6:	f7fe ff91 	bl	80012cc <print_AX25>
	return true; //valid packet
 80023aa:	2301      	movs	r3, #1
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b4:	20000a38 	.word	0x20000a38
 80023b8:	2000262c 	.word	0x2000262c
 80023bc:	08008c54 	.word	0x08008c54
 80023c0:	200034e8 	.word	0x200034e8
 80023c4:	20000a04 	.word	0x20000a04

080023c8 <KISS_TO_HEX>:
			}
		}
	}
}

void KISS_TO_HEX(){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <KISS_TO_HEX+0x4c>)
 80023d0:	60bb      	str	r3, [r7, #8]
	struct UART_INPUT* local_UART_packet = &UART_packet;
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <KISS_TO_HEX+0x50>)
 80023d4:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < KISS_SIZE; i+=8){
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e013      	b.n	8002404 <KISS_TO_HEX+0x3c>
        bool *curr_mem = (local_packet->KISS_PACKET+i);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4413      	add	r3, r2
 80023e6:	603b      	str	r3, [r7, #0]
        local_UART_packet->HEX_KISS_PACKET[i] = conv_BIN_to_HEX(curr_mem);
 80023e8:	6838      	ldr	r0, [r7, #0]
 80023ea:	f7fe fdc9 	bl	8000f80 <conv_BIN_to_HEX>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4619      	mov	r1, r3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	330e      	adds	r3, #14
 80023fa:	460a      	mov	r2, r1
 80023fc:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < KISS_SIZE; i+=8){
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3308      	adds	r3, #8
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 800240a:	dbe7      	blt.n	80023dc <KISS_TO_HEX+0x14>
    }
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000a38 	.word	0x20000a38
 8002418:	20001d94 	.word	0x20001d94

0800241c <crc_calc>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in){
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002428:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <crc_calc+0xdc>)
 800242a:	61fb      	str	r3, [r7, #28]
	int out_bit;
	int roll_bit = *crc_ptr_in & 0x0001;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	61bb      	str	r3, [r7, #24]
    int poly = 0x8408;             			//reverse order of 0x1021
 8002436:	f248 4308 	movw	r3, #33800	; 0x8408
 800243a:	617b      	str	r3, [r7, #20]

    out_bit = in_bit ^ roll_bit; 		//xor lsb of current crc with input bit
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4053      	eors	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
	*crc_ptr_in >>= 1;               	//right shift by 1
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	105a      	asrs	r2, r3, #1
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0x0000;
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d102      	bne.n	800245a <crc_calc+0x3e>
 8002454:	f248 4308 	movw	r3, #33800	; 0x8408
 8002458:	e000      	b.n	800245c <crc_calc+0x40>
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
	*crc_ptr_in ^= poly;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	405a      	eors	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	601a      	str	r2, [r3, #0]

    //End condition
//	if(*crc_count_ptr_in >= rxBit_count){
	if(*crc_count_ptr_in >= rxBit_count){
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <crc_calc+0xe0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	db37      	blt.n	80024f0 <crc_calc+0xd4>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8002488:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	6013      	str	r3, [r2, #0]
  	    sprintf(uartData, "Convert CRC to FCS (hex) = %x\n",local_packet->crc);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002496:	3318      	adds	r3, #24
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	4918      	ldr	r1, [pc, #96]	; (8002500 <crc_calc+0xe4>)
 800249e:	4819      	ldr	r0, [pc, #100]	; (8002504 <crc_calc+0xe8>)
 80024a0:	f004 fd9c 	bl	8006fdc <siprintf>
    	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80024a4:	4817      	ldr	r0, [pc, #92]	; (8002504 <crc_calc+0xe8>)
 80024a6:	f7fd feb3 	bl	8000210 <strlen>
 80024aa:	4603      	mov	r3, r0
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	230a      	movs	r3, #10
 80024b0:	4914      	ldr	r1, [pc, #80]	; (8002504 <crc_calc+0xe8>)
 80024b2:	4815      	ldr	r0, [pc, #84]	; (8002508 <crc_calc+0xec>)
 80024b4:	f003 fe69 	bl	800618a <HAL_UART_Transmit>
    	if(local_packet->check_crc == false){
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f083 0301 	eor.w	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d012      	beq.n	80024f0 <crc_calc+0xd4>
    		//REMEBER TO CHECK THIS CRC conversion FOR ACCURACY LATER
    		conv_HEX_to_BIN(*crc_ptr_in,local_packet->FCS,false);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b298      	uxth	r0, r3
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80024d6:	3304      	adds	r3, #4
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	4619      	mov	r1, r3
 80024de:	f7fe fcfb 	bl	8000ed8 <conv_HEX_to_BIN>
    		local_packet->crc = 0xFFFF;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80024e8:	3318      	adds	r3, #24
 80024ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ee:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 80024f0:	bf00      	nop
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000a38 	.word	0x20000a38
 80024fc:	20000a04 	.word	0x20000a04
 8002500:	08008c78 	.word	0x08008c78
 8002504:	2000262c 	.word	0x2000262c
 8002508:	200034e8 	.word	0x200034e8

0800250c <crc_generate>:

void crc_generate(){
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002512:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <crc_generate+0x1d4>)
 8002514:	60bb      	str	r3, [r7, #8]
	uint16_t * crc_ptr = &(local_packet->crc);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800251c:	3318      	adds	r3, #24
 800251e:	607b      	str	r3, [r7, #4]
	int * crc_count_ptr = &(local_packet->crc_count);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002526:	331c      	adds	r3, #28
 8002528:	603b      	str	r3, [r7, #0]
	bool *curr_mem;

	*crc_ptr = 0xFFFF;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002530:	801a      	strh	r2, [r3, #0]
	*crc_count_ptr = 0;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	sprintf(uartData, "Performing CRC generation\n");
 8002538:	4a6a      	ldr	r2, [pc, #424]	; (80026e4 <crc_generate+0x1d8>)
 800253a:	4b6b      	ldr	r3, [pc, #428]	; (80026e8 <crc_generate+0x1dc>)
 800253c:	4615      	mov	r5, r2
 800253e:	461c      	mov	r4, r3
 8002540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002542:	6028      	str	r0, [r5, #0]
 8002544:	6069      	str	r1, [r5, #4]
 8002546:	60aa      	str	r2, [r5, #8]
 8002548:	60eb      	str	r3, [r5, #12]
 800254a:	cc03      	ldmia	r4!, {r0, r1}
 800254c:	6128      	str	r0, [r5, #16]
 800254e:	6169      	str	r1, [r5, #20]
 8002550:	8823      	ldrh	r3, [r4, #0]
 8002552:	78a2      	ldrb	r2, [r4, #2]
 8002554:	832b      	strh	r3, [r5, #24]
 8002556:	4613      	mov	r3, r2
 8002558:	76ab      	strb	r3, [r5, #26]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800255a:	4862      	ldr	r0, [pc, #392]	; (80026e4 <crc_generate+0x1d8>)
 800255c:	f7fd fe58 	bl	8000210 <strlen>
 8002560:	4603      	mov	r3, r0
 8002562:	b29a      	uxth	r2, r3
 8002564:	230a      	movs	r3, #10
 8002566:	495f      	ldr	r1, [pc, #380]	; (80026e4 <crc_generate+0x1d8>)
 8002568:	4860      	ldr	r0, [pc, #384]	; (80026ec <crc_generate+0x1e0>)
 800256a:	f003 fe0e 	bl	800618a <HAL_UART_Transmit>

	//Calculate CRC for address
	curr_mem = (local_packet->address) + address_len - 8;//start at MS Byte(LSB)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002574:	3310      	adds	r3, #16
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3368      	adds	r3, #104	; 0x68
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 800257c:	2300      	movs	r3, #0
 800257e:	623b      	str	r3, [r7, #32]
 8002580:	e017      	b.n	80025b2 <crc_generate+0xa6>
		for(int j = 0;j<8;j++){
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e00b      	b.n	80025a0 <crc_generate+0x94>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258c:	4413      	add	r3, r2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff41 	bl	800241c <crc_calc>
		for(int j = 0;j<8;j++){
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b07      	cmp	r3, #7
 80025a4:	ddf0      	ble.n	8002588 <crc_generate+0x7c>
		}
		curr_mem -= 8;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	3b08      	subs	r3, #8
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	3301      	adds	r3, #1
 80025b0:	623b      	str	r3, [r7, #32]
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	2b0d      	cmp	r3, #13
 80025b6:	dde4      	ble.n	8002582 <crc_generate+0x76>
	}

	//Calculate CRC for control
	curr_mem = local_packet->control;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80025be:	3314      	adds	r3, #20
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < control_len; i++){
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	e00f      	b.n	80025ea <crc_generate+0xde>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr);
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80025d0:	3314      	adds	r3, #20
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff1c 	bl	800241c <crc_calc>
	for(int i = 0; i < control_len; i++){
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	3301      	adds	r3, #1
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b07      	cmp	r3, #7
 80025ee:	ddec      	ble.n	80025ca <crc_generate+0xbe>
	}

//	//Calculate CRC for PID (if packet is of type i-frame)
	curr_mem = local_packet->PID;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80025f6:	3318      	adds	r3, #24
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < PID_len; i++){
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e00f      	b.n	8002622 <crc_generate+0x116>
		//Call crc_calc per bit
		crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002608:	3318      	adds	r3, #24
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	4413      	add	r3, r2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff00 	bl	800241c <crc_calc>
	for(int i = 0; i < PID_len; i++){
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3301      	adds	r3, #1
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2b07      	cmp	r3, #7
 8002626:	ddec      	ble.n	8002602 <crc_generate+0xf6>
	}

	//Calculate CRC for Info field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 8;//start at MS Byte(LSB)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800262e:	331c      	adds	r3, #28
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3b08      	subs	r3, #8
 800263c:	4413      	add	r3, r2
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8)-1;i++){
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	e017      	b.n	8002676 <crc_generate+0x16a>
		for(int j = 0;j<8;j++){
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e00b      	b.n	8002664 <crc_generate+0x158>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002650:	4413      	add	r3, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fedf 	bl	800241c <crc_calc>
		for(int j = 0;j<8;j++){
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3301      	adds	r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b07      	cmp	r3, #7
 8002668:	ddf0      	ble.n	800264c <crc_generate+0x140>
		}
		curr_mem -= 8;
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	3b08      	subs	r3, #8
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8)-1;i++){
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	3301      	adds	r3, #1
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	da00      	bge.n	8002684 <crc_generate+0x178>
 8002682:	3307      	adds	r3, #7
 8002684:	10db      	asrs	r3, r3, #3
 8002686:	3b01      	subs	r3, #1
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	429a      	cmp	r2, r3
 800268c:	dbdb      	blt.n	8002646 <crc_generate+0x13a>
	}

	sprintf(uartData, "rx_bitcnt = %d\n", rxBit_count);
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <crc_generate+0x1e4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	4917      	ldr	r1, [pc, #92]	; (80026f4 <crc_generate+0x1e8>)
 8002696:	4813      	ldr	r0, [pc, #76]	; (80026e4 <crc_generate+0x1d8>)
 8002698:	f004 fca0 	bl	8006fdc <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800269c:	4811      	ldr	r0, [pc, #68]	; (80026e4 <crc_generate+0x1d8>)
 800269e:	f7fd fdb7 	bl	8000210 <strlen>
 80026a2:	4603      	mov	r3, r0
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	230a      	movs	r3, #10
 80026a8:	490e      	ldr	r1, [pc, #56]	; (80026e4 <crc_generate+0x1d8>)
 80026aa:	4810      	ldr	r0, [pc, #64]	; (80026ec <crc_generate+0x1e0>)
 80026ac:	f003 fd6d 	bl	800618a <HAL_UART_Transmit>

	sprintf(uartData, "bitcnt_ptr = %d\n", *crc_count_ptr);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4910      	ldr	r1, [pc, #64]	; (80026f8 <crc_generate+0x1ec>)
 80026b8:	480a      	ldr	r0, [pc, #40]	; (80026e4 <crc_generate+0x1d8>)
 80026ba:	f004 fc8f 	bl	8006fdc <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80026be:	4809      	ldr	r0, [pc, #36]	; (80026e4 <crc_generate+0x1d8>)
 80026c0:	f7fd fda6 	bl	8000210 <strlen>
 80026c4:	4603      	mov	r3, r0
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	230a      	movs	r3, #10
 80026ca:	4906      	ldr	r1, [pc, #24]	; (80026e4 <crc_generate+0x1d8>)
 80026cc:	4807      	ldr	r0, [pc, #28]	; (80026ec <crc_generate+0x1e0>)
 80026ce:	f003 fd5c 	bl	800618a <HAL_UART_Transmit>
	*crc_count_ptr = 0;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
}
 80026d8:	bf00      	nop
 80026da:	3728      	adds	r7, #40	; 0x28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bdb0      	pop	{r4, r5, r7, pc}
 80026e0:	20000a38 	.word	0x20000a38
 80026e4:	2000262c 	.word	0x2000262c
 80026e8:	08008c98 	.word	0x08008c98
 80026ec:	200034e8 	.word	0x200034e8
 80026f0:	20000a04 	.word	0x20000a04
 80026f4:	08008cb4 	.word	0x08008cb4
 80026f8:	08008cc4 	.word	0x08008cc4

080026fc <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 8002706:	f000 fa37 	bl	8002b78 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <initProgram+0x58>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	7013      	strb	r3, [r2, #0]
	toggleMode();
 8002710:	f000 f826 	bl	8002760 <toggleMode>
	toggleMode();
 8002714:	f000 f824 	bl	8002760 <toggleMode>

	if (mode) {
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <initProgram+0x58>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d009      	beq.n	8002734 <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <initProgram+0x5c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2264      	movs	r2, #100	; 0x64
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <initProgram+0x60>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
 8002732:	e008      	b.n	8002746 <initProgram+0x4a>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <initProgram+0x5c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f242 7210 	movw	r2, #10000	; 0x2710
 800273c:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 800273e:	4b07      	ldr	r3, [pc, #28]	; (800275c <initProgram+0x60>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2268      	movs	r2, #104	; 0x68
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 8002746:	f7fe fc5f 	bl	8001008 <init_AX25>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20003490 	.word	0x20003490
 8002758:	200034a8 	.word	0x200034a8
 800275c:	200031f0 	.word	0x200031f0

08002760 <toggleMode>:



void toggleMode() {
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002764:	2006      	movs	r0, #6
 8002766:	f001 fb7a 	bl	8003e5e <HAL_NVIC_DisableIRQ>

	//Toggle mode
	mode = !mode;
 800276a:	4b27      	ldr	r3, [pc, #156]	; (8002808 <toggleMode+0xa8>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf14      	ite	ne
 8002772:	2301      	movne	r3, #1
 8002774:	2300      	moveq	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f083 0301 	eor.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b20      	ldr	r3, [pc, #128]	; (8002808 <toggleMode+0xa8>)
 8002786:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <toggleMode+0xa8>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	2120      	movs	r1, #32
 8002790:	481e      	ldr	r0, [pc, #120]	; (800280c <toggleMode+0xac>)
 8002792:	f002 fb17 	bl	8004dc4 <HAL_GPIO_WritePin>
	midbit = false;
 8002796:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <toggleMode+0xb0>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 800279c:	481d      	ldr	r0, [pc, #116]	; (8002814 <toggleMode+0xb4>)
 800279e:	f003 f8a6 	bl	80058ee <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 80027a2:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <toggleMode+0xb4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2200      	movs	r2, #0
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop(&htim4);
 80027aa:	481b      	ldr	r0, [pc, #108]	; (8002818 <toggleMode+0xb8>)
 80027ac:	f003 f89f 	bl	80058ee <HAL_TIM_Base_Stop>
	htim4.Instance->CNT = 0;
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <toggleMode+0xb8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <toggleMode+0xa8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <toggleMode+0x6c>
		//Set Timer periods
		//htim2.Instance->ARR = TIM2_AUTORELOAD_TX; This is no longer used
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <toggleMode+0xb4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f44f 724f 	mov.w	r2, #828	; 0x33c
 80027c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80027ca:	e015      	b.n	80027f8 <toggleMode+0x98>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <toggleMode+0xbc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <toggleMode+0xb4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2268      	movs	r2, #104	; 0x68
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start(&htim4);
 80027de:	480e      	ldr	r0, [pc, #56]	; (8002818 <toggleMode+0xb8>)
 80027e0:	f003 f861 	bl	80058a6 <HAL_TIM_Base_Start>

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 80027e4:	480b      	ldr	r0, [pc, #44]	; (8002814 <toggleMode+0xb4>)
 80027e6:	f003 f8ad 	bl	8005944 <HAL_TIM_Base_Start_IT>

		//Stop DAC
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80027ea:	2100      	movs	r1, #0
 80027ec:	480c      	ldr	r0, [pc, #48]	; (8002820 <toggleMode+0xc0>)
 80027ee:	f001 fc21 	bl	8004034 <HAL_DAC_Stop_DMA>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80027f2:	2006      	movs	r0, #6
 80027f4:	f001 fb25 	bl	8003e42 <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027fe:	4803      	ldr	r0, [pc, #12]	; (800280c <toggleMode+0xac>)
 8002800:	f002 fae0 	bl	8004dc4 <HAL_GPIO_WritePin>
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20003490 	.word	0x20003490
 800280c:	40020000 	.word	0x40020000
 8002810:	20000a08 	.word	0x20000a08
 8002814:	200031f0 	.word	0x200031f0
 8002818:	20003728 	.word	0x20003728
 800281c:	200034a8 	.word	0x200034a8
 8002820:	20003494 	.word	0x20003494

08002824 <loadPeriodBuffer>:
bool bufffull = false;
void loadPeriodBuffer(int timerCnt) {
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	if(canWrite){
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <loadPeriodBuffer+0x64>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01d      	beq.n	8002870 <loadPeriodBuffer+0x4c>
		periodBuffer[periodSaveCount] = timerCnt;
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <loadPeriodBuffer+0x68>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a14      	ldr	r2, [pc, #80]	; (8002890 <loadPeriodBuffer+0x6c>)
 800283e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		periodSaveCount++;
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <loadPeriodBuffer+0x68>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <loadPeriodBuffer+0x68>)
 800284c:	801a      	strh	r2, [r3, #0]
		if (periodSaveCount >= RX_BUFFERSIZE) {
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <loadPeriodBuffer+0x68>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	2b7f      	cmp	r3, #127	; 0x7f
 8002854:	d902      	bls.n	800285c <loadPeriodBuffer+0x38>
			periodSaveCount = 0;
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <loadPeriodBuffer+0x68>)
 8002858:	2200      	movs	r2, #0
 800285a:	801a      	strh	r2, [r3, #0]
		}

		//Buffer is full
		if(periodSaveCount == periodReadCount){
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <loadPeriodBuffer+0x68>)
 800285e:	881a      	ldrh	r2, [r3, #0]
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <loadPeriodBuffer+0x70>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d106      	bne.n	8002876 <loadPeriodBuffer+0x52>
			canWrite = false;
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <loadPeriodBuffer+0x64>)
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e002      	b.n	8002876 <loadPeriodBuffer+0x52>
		}
	} else {
		bufffull = true;
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <loadPeriodBuffer+0x74>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <loadPeriodBuffer+0x78>)
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	20000970 	.word	0x20000970
 800288c:	20000a1e 	.word	0x20000a1e
 8002890:	20003290 	.word	0x20003290
 8002894:	20000a20 	.word	0x20000a20
 8002898:	20000a0a 	.word	0x20000a0a
 800289c:	20000a1d 	.word	0x20000a1d

080028a0 <Tim3IT>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void Tim3IT() {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	if (mode) {
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <Tim3IT+0x54>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <Tim3IT+0x14>
		midbit = false;
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <Tim3IT+0x58>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]

		else {
			signal_detect_decay--;
		}
	}
}
 80028b2:	e01c      	b.n	80028ee <Tim3IT+0x4e>
		if(signal_detect_decay <= 0){
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <Tim3IT+0x5c>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d112      	bne.n	80028e2 <Tim3IT+0x42>
			if(signal_valid){
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <Tim3IT+0x60>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <Tim3IT+0x3a>
				loadPeriodBuffer(-1);
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	f7ff ffac 	bl	8002824 <loadPeriodBuffer>
				HAL_TIM_Base_Stop(&htim4);
 80028cc:	480d      	ldr	r0, [pc, #52]	; (8002904 <Tim3IT+0x64>)
 80028ce:	f003 f80e 	bl	80058ee <HAL_TIM_Base_Stop>
				htim4.Instance->CNT = 0;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <Tim3IT+0x64>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
			signal_valid = false;
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <Tim3IT+0x60>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
}
 80028e0:	e005      	b.n	80028ee <Tim3IT+0x4e>
			signal_detect_decay--;
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <Tim3IT+0x5c>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	4b04      	ldr	r3, [pc, #16]	; (80028fc <Tim3IT+0x5c>)
 80028ec:	801a      	strh	r2, [r3, #0]
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20003490 	.word	0x20003490
 80028f8:	20000a08 	.word	0x20000a08
 80028fc:	20000a22 	.word	0x20000a22
 8002900:	20000a24 	.word	0x20000a24
 8002904:	20003728 	.word	0x20003728

08002908 <FreqCounterPinEXTI>:
int edges = 0;
int gotVal = 0;
int last_carrier_tone = 0;
int carrier_tone = 0;

void FreqCounterPinEXTI() {
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
	//Measure time since last measurement
	gotVal = htim2.Instance->CNT;
 800290e:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <FreqCounterPinEXTI+0xc0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	461a      	mov	r2, r3
 8002916:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <FreqCounterPinEXTI+0xc4>)
 8002918:	601a      	str	r2, [r3, #0]
	int freq = PCONVERT / (gotVal);
 800291a:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <FreqCounterPinEXTI+0xc4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <FreqCounterPinEXTI+0xc8>)
 8002920:	fb92 f3f3 	sdiv	r3, r2, r3
 8002924:	607b      	str	r3, [r7, #4]
	loadPeriodBuffer(gotVal);
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <FreqCounterPinEXTI+0xc4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff7a 	bl	8002824 <loadPeriodBuffer>

	last_carrier_tone = carrier_tone;
 8002930:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <FreqCounterPinEXTI+0xcc>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a28      	ldr	r2, [pc, #160]	; (80029d8 <FreqCounterPinEXTI+0xd0>)
 8002936:	6013      	str	r3, [r2, #0]

	//2200Hz detected
	if ( ((HIGHFREQ - FREQDEV) < freq) && (freq < (HIGHFREQ + FREQDEV)) ){
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f240 726c 	movw	r2, #1900	; 0x76c
 800293e:	4293      	cmp	r3, r2
 8002940:	dd09      	ble.n	8002956 <FreqCounterPinEXTI+0x4e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002948:	4293      	cmp	r3, r2
 800294a:	dc04      	bgt.n	8002956 <FreqCounterPinEXTI+0x4e>
		carrier_tone = HIGHFREQ;
 800294c:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <FreqCounterPinEXTI+0xcc>)
 800294e:	f640 0298 	movw	r2, #2200	; 0x898
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e011      	b.n	800297a <FreqCounterPinEXTI+0x72>
	}
	//1200Hz detected
	else if ( ((LOWFREQ - FREQDEV) < freq) && (freq < (LOWFREQ + FREQDEV)) ){
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800295c:	dd09      	ble.n	8002972 <FreqCounterPinEXTI+0x6a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f240 52db 	movw	r2, #1499	; 0x5db
 8002964:	4293      	cmp	r3, r2
 8002966:	dc04      	bgt.n	8002972 <FreqCounterPinEXTI+0x6a>
		carrier_tone = LOWFREQ;
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <FreqCounterPinEXTI+0xcc>)
 800296a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e003      	b.n	800297a <FreqCounterPinEXTI+0x72>
	}
	//Invalid freq
	else{
		carrier_tone = -1;
 8002972:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <FreqCounterPinEXTI+0xcc>)
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	601a      	str	r2, [r3, #0]
//		sprintf(uartData, "bad frequency detected, frequency was %d\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}

	if(carrier_tone!=last_carrier_tone || carrier_tone == -1){
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <FreqCounterPinEXTI+0xcc>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <FreqCounterPinEXTI+0xd0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d104      	bne.n	8002990 <FreqCounterPinEXTI+0x88>
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <FreqCounterPinEXTI+0xcc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298e:	d107      	bne.n	80029a0 <FreqCounterPinEXTI+0x98>
		edges = 0;
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <FreqCounterPinEXTI+0xd4>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
		htim4.Instance->CNT = 0;
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <FreqCounterPinEXTI+0xd8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2200      	movs	r2, #0
 800299c:	625a      	str	r2, [r3, #36]	; 0x24
 800299e:	e004      	b.n	80029aa <FreqCounterPinEXTI+0xa2>
	} else {
		edges++;
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <FreqCounterPinEXTI+0xd4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <FreqCounterPinEXTI+0xd4>)
 80029a8:	6013      	str	r3, [r2, #0]
	}

	signal_valid = true;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <FreqCounterPinEXTI+0xdc>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
	signal_detect_decay = DECAY_TIME;
 80029b0:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <FreqCounterPinEXTI+0xe0>)
 80029b2:	2208      	movs	r2, #8
 80029b4:	801a      	strh	r2, [r3, #0]
	htim2.Instance->CNT = 0;
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <FreqCounterPinEXTI+0xc0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200034a8 	.word	0x200034a8
 80029cc:	20000a10 	.word	0x20000a10
 80029d0:	00989680 	.word	0x00989680
 80029d4:	20000a18 	.word	0x20000a18
 80029d8:	20000a14 	.word	0x20000a14
 80029dc:	20000a0c 	.word	0x20000a0c
 80029e0:	20003728 	.word	0x20003728
 80029e4:	20000a24 	.word	0x20000a24
 80029e8:	20000a22 	.word	0x20000a22

080029ec <bitToAudio>:
		sprintf(uartData, "sinArray[%d] = %d\n",i,sinArray[i]);
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}
}

int bitToAudio(bool *bitStream, int arraySize, bool direction,int wave_start) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	71fb      	strb	r3, [r7, #7]
	bool changeFreq;
	int waveoffset = wave_start;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < arraySize; i++) {
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	e073      	b.n	8002aee <bitToAudio+0x102>
		//Check if freq needs to be changed for NRZI
		if(direction){
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <bitToAudio+0x2c>
			changeFreq = bitStream[i];
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4413      	add	r3, r2
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	77fb      	strb	r3, [r7, #31]
 8002a16:	e007      	b.n	8002a28 <bitToAudio+0x3c>
		} else {
			changeFreq = bitStream[arraySize - i - 1];
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	77fb      	strb	r3, [r7, #31]
		}

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, changeFreq);
 8002a28:	7ffb      	ldrb	r3, [r7, #31]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a30:	4835      	ldr	r0, [pc, #212]	; (8002b08 <bitToAudio+0x11c>)
 8002a32:	f002 f9c7 	bl	8004dc4 <HAL_GPIO_WritePin>
		//freqSelect = changeFreq;
		freqSelect = (changeFreq) ? freqSelect : !freqSelect;
 8002a36:	7ffb      	ldrb	r3, [r7, #31]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <bitToAudio+0x60>
 8002a3c:	4b33      	ldr	r3, [pc, #204]	; (8002b0c <bitToAudio+0x120>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	e00c      	b.n	8002a66 <bitToAudio+0x7a>
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <bitToAudio+0x120>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f083 0301 	eor.w	r3, r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	4a29      	ldr	r2, [pc, #164]	; (8002b0c <bitToAudio+0x120>)
 8002a68:	7013      	strb	r3, [r2, #0]

		if (freqSelect) {
 8002a6a:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <bitToAudio+0x120>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <bitToAudio+0x96>
			htim2.Instance->ARR = 14;
 8002a72:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <bitToAudio+0x124>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	220e      	movs	r2, #14
 8002a78:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * HIGHF) / (1.0 * LOWF);
 8002a7a:	f240 2326 	movw	r3, #550	; 0x226
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	e006      	b.n	8002a90 <bitToAudio+0xa4>
		}
		else {
			htim2.Instance->ARR = 27;
 8002a82:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <bitToAudio+0x124>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	221b      	movs	r2, #27
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c
			waveoffset = (1.0 * FREQ_SAMP) * (1.0 * LOWF) / (1.0 * LOWF);
 8002a8a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002a8e:	61bb      	str	r3, [r7, #24]
		}

		//htim2.Instance->CNT = 0;
		//HAL_TIM_Base_Stop(&htim2);
		HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (wave+wave_start), FREQ_SAMP, DAC_ALIGN_12B_R);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <bitToAudio+0x128>)
 8002a96:	441a      	add	r2, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	481d      	ldr	r0, [pc, #116]	; (8002b18 <bitToAudio+0x12c>)
 8002aa4:	f001 fa18 	bl	8003ed8 <HAL_DAC_Start_DMA>
		htim3.Instance->CNT = 0;
 8002aa8:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <bitToAudio+0x130>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2200      	movs	r2, #0
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim3);
 8002ab0:	481a      	ldr	r0, [pc, #104]	; (8002b1c <bitToAudio+0x130>)
 8002ab2:	f002 ff47 	bl	8005944 <HAL_TIM_Base_Start_IT>

		//Calculate ending point for wave
		wave_start = (wave_start+waveoffset+1)%FREQ_SAMP;
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4413      	add	r3, r2
 8002abc:	3301      	adds	r3, #1
 8002abe:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <bitToAudio+0x134>)
 8002ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ac4:	1151      	asrs	r1, r2, #5
 8002ac6:	17da      	asrs	r2, r3, #31
 8002ac8:	1a8a      	subs	r2, r1, r2
 8002aca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002ace:	fb01 f202 	mul.w	r2, r1, r2
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	603b      	str	r3, [r7, #0]

		midbit = true;
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <bitToAudio+0x138>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
		while (midbit){
 8002adc:	e000      	b.n	8002ae0 <bitToAudio+0xf4>
			//In the future this leaves the CPU free for scheduling or something
			__NOP();
 8002ade:	bf00      	nop
		while (midbit){
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <bitToAudio+0x138>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1fa      	bne.n	8002ade <bitToAudio+0xf2>
	for (int i = 0; i < arraySize; i++) {
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3301      	adds	r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	db87      	blt.n	8002a06 <bitToAudio+0x1a>
		}

	}

	HAL_TIM_Base_Stop(&htim3);
 8002af6:	4809      	ldr	r0, [pc, #36]	; (8002b1c <bitToAudio+0x130>)
 8002af8:	f002 fef9 	bl	80058ee <HAL_TIM_Base_Stop>
	return wave_start;
 8002afc:	683b      	ldr	r3, [r7, #0]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	20000a1c 	.word	0x20000a1c
 8002b10:	200034a8 	.word	0x200034a8
 8002b14:	20000010 	.word	0x20000010
 8002b18:	20003494 	.word	0x20003494
 8002b1c:	200031f0 	.word	0x200031f0
 8002b20:	1b4e81b5 	.word	0x1b4e81b5
 8002b24:	20000a08 	.word	0x20000a08

08002b28 <generateBitstream>:
void generateBitstream() {
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <generateBitstream+0x4c>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <generateBitstream+0x4c>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 8002b38:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <generateBitstream+0x4c>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <generateBitstream+0x4c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <generateBitstream+0x4c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <generateBitstream+0x4c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <generateBitstream+0x4c>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <generateBitstream+0x4c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <generateBitstream+0x4c>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 8002b62:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <generateBitstream+0x4c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	725a      	strb	r2, [r3, #9]

}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	200031e4 	.word	0x200031e4

08002b78 <initOUTData>:
void initOUTData() {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
	//edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
	//edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
	generateBitstream();
 8002b7c:	f7ff ffd4 	bl	8002b28 <generateBitstream>
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <pertobit>:
uint16_t	signal_detect_decay = 0;			//Pseudo timer to detect if value is valid
bool		signal_valid = false;					//Determines if frequency being read is a valid bit
uint16_t trackBit = 0;
uint16_t bitSaveCount = 0;

int pertobit(uint32_t inputPeriod) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / inputPeriod;
 8002b8c:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <pertobit+0x88>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	60fb      	str	r3, [r7, #12]

//	sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	//return freq;
	if ((HIGHFREQ - FREQDEV < freq) && (freq < HIGHFREQ + FREQDEV)){
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f240 726c 	movw	r2, #1900	; 0x76c
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	dd15      	ble.n	8002bcc <pertobit+0x48>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	dc10      	bgt.n	8002bcc <pertobit+0x48>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4918      	ldr	r1, [pc, #96]	; (8002c10 <pertobit+0x8c>)
 8002bae:	4819      	ldr	r0, [pc, #100]	; (8002c14 <pertobit+0x90>)
 8002bb0:	f004 fa14 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002bb4:	4817      	ldr	r0, [pc, #92]	; (8002c14 <pertobit+0x90>)
 8002bb6:	f7fd fb2b 	bl	8000210 <strlen>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	230a      	movs	r3, #10
 8002bc0:	4914      	ldr	r1, [pc, #80]	; (8002c14 <pertobit+0x90>)
 8002bc2:	4815      	ldr	r0, [pc, #84]	; (8002c18 <pertobit+0x94>)
 8002bc4:	f003 fae1 	bl	800618a <HAL_UART_Transmit>
		return 1;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e01b      	b.n	8002c04 <pertobit+0x80>
	}
	else if ((LOWFREQ - FREQDEV < freq) && (freq < LOWFREQ + FREQDEV)){
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002bd2:	dd15      	ble.n	8002c00 <pertobit+0x7c>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f240 52db 	movw	r2, #1499	; 0x5db
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	dc10      	bgt.n	8002c00 <pertobit+0x7c>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	490b      	ldr	r1, [pc, #44]	; (8002c10 <pertobit+0x8c>)
 8002be2:	480c      	ldr	r0, [pc, #48]	; (8002c14 <pertobit+0x90>)
 8002be4:	f004 f9fa 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002be8:	480a      	ldr	r0, [pc, #40]	; (8002c14 <pertobit+0x90>)
 8002bea:	f7fd fb11 	bl	8000210 <strlen>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	230a      	movs	r3, #10
 8002bf4:	4907      	ldr	r1, [pc, #28]	; (8002c14 <pertobit+0x90>)
 8002bf6:	4808      	ldr	r0, [pc, #32]	; (8002c18 <pertobit+0x94>)
 8002bf8:	f003 fac7 	bl	800618a <HAL_UART_Transmit>
		return 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e001      	b.n	8002c04 <pertobit+0x80>
	}
	else
//		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		return -1;
 8002c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	00989680 	.word	0x00989680
 8002c10:	08008d30 	.word	0x08008d30
 8002c14:	2000262c 	.word	0x2000262c
 8002c18:	200034e8 	.word	0x200034e8

08002c1c <loadBit>:
int loadBit(){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
	int startbit;
	int currbit = -1;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	617b      	str	r3, [r7, #20]
	int loopCount = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]
	int checkCount;
	bool goodbit = false;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	72fb      	strb	r3, [r7, #11]

	startbit = pertobit(periodBuffer[trackBit]);
 8002c30:	4b31      	ldr	r3, [pc, #196]	; (8002cf8 <loadBit+0xdc>)
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <loadBit+0xe0>)
 8002c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ffa1 	bl	8002b84 <pertobit>
 8002c42:	6078      	str	r0, [r7, #4]
//	sprintf(uartData, "startbit = %d\n",startbit);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	//Increment trackBit
	trackBit++;
 8002c44:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <loadBit+0xdc>)
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <loadBit+0xdc>)
 8002c4e:	801a      	strh	r2, [r3, #0]
	if (trackBit >= RX_BUFFERSIZE)
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <loadBit+0xdc>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	2b7f      	cmp	r3, #127	; 0x7f
 8002c56:	d902      	bls.n	8002c5e <loadBit+0x42>
		trackBit = 0;
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <loadBit+0xdc>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	801a      	strh	r2, [r3, #0]

	if(startbit==1){
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d102      	bne.n	8002c6a <loadBit+0x4e>
		checkCount = 3;
 8002c64:	2303      	movs	r3, #3
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e02f      	b.n	8002cca <loadBit+0xae>
	}
	else if(startbit==0){
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <loadBit+0x5a>
		checkCount = 1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	e029      	b.n	8002cca <loadBit+0xae>
	}
	else {
		checkCount = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
	}

	//Valiate startbit value
	while(loopCount<checkCount){
 8002c7a:	e026      	b.n	8002cca <loadBit+0xae>
		currbit = pertobit(periodBuffer[trackBit]);
 8002c7c:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <loadBit+0xdc>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <loadBit+0xe0>)
 8002c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff7b 	bl	8002b84 <pertobit>
 8002c8e:	6178      	str	r0, [r7, #20]

		//Good bit
		if(startbit==currbit){
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d10c      	bne.n	8002cb2 <loadBit+0x96>
			goodbit = true;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	72fb      	strb	r3, [r7, #11]
			goodbit = false;
			break;
		}

		//Increment trackBit
		trackBit++;
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <loadBit+0xdc>)
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <loadBit+0xdc>)
 8002ca6:	801a      	strh	r2, [r3, #0]
		if (trackBit >= RX_BUFFERSIZE)
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <loadBit+0xdc>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	2b7f      	cmp	r3, #127	; 0x7f
 8002cae:	d909      	bls.n	8002cc4 <loadBit+0xa8>
 8002cb0:	e005      	b.n	8002cbe <loadBit+0xa2>
			currbit = -1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	617b      	str	r3, [r7, #20]
			goodbit = false;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	72fb      	strb	r3, [r7, #11]
			break;
 8002cbc:	e009      	b.n	8002cd2 <loadBit+0xb6>
			trackBit = 0;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <loadBit+0xdc>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	801a      	strh	r2, [r3, #0]
		loopCount++;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	613b      	str	r3, [r7, #16]
	while(loopCount<checkCount){
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	dbd4      	blt.n	8002c7c <loadBit+0x60>
	}

	//Increment bitSaveCount
	bitSaveCount++;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <loadBit+0xe4>)
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <loadBit+0xe4>)
 8002cdc:	801a      	strh	r2, [r3, #0]
	if (bitSaveCount >= RX_BUFFERSIZE)
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <loadBit+0xe4>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ce4:	d902      	bls.n	8002cec <loadBit+0xd0>
		bitSaveCount = 0;
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <loadBit+0xe4>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	801a      	strh	r2, [r3, #0]

	return currbit;
 8002cec:	697b      	ldr	r3, [r7, #20]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000a26 	.word	0x20000a26
 8002cfc:	20003290 	.word	0x20003290
 8002d00:	20000a28 	.word	0x20000a28

08002d04 <loadOctet>:
int loadOctet(bool* bufferptr) {
 8002d04:	b5b0      	push	{r4, r5, r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	int bit;
	bool myPtr[8];
	bool isFlag = true;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < 8; i++) {
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	e043      	b.n	8002d9e <loadOctet+0x9a>
		bit = loadBit();
 8002d16:	f7ff ff81 	bl	8002c1c <loadBit>
 8002d1a:	6138      	str	r0, [r7, #16]

		sprintf(uartData, "bit[%d] = %d \n",i,bit);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4955      	ldr	r1, [pc, #340]	; (8002e78 <loadOctet+0x174>)
 8002d22:	4856      	ldr	r0, [pc, #344]	; (8002e7c <loadOctet+0x178>)
 8002d24:	f004 f95a 	bl	8006fdc <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002d28:	4854      	ldr	r0, [pc, #336]	; (8002e7c <loadOctet+0x178>)
 8002d2a:	f7fd fa71 	bl	8000210 <strlen>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	230a      	movs	r3, #10
 8002d34:	4951      	ldr	r1, [pc, #324]	; (8002e7c <loadOctet+0x178>)
 8002d36:	4852      	ldr	r0, [pc, #328]	; (8002e80 <loadOctet+0x17c>)
 8002d38:	f003 fa27 	bl	800618a <HAL_UART_Transmit>

        if(bit < 0){
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	da11      	bge.n	8002d66 <loadOctet+0x62>
    		sprintf(uartData, "bit %d was bad\n",i);
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	494f      	ldr	r1, [pc, #316]	; (8002e84 <loadOctet+0x180>)
 8002d46:	484d      	ldr	r0, [pc, #308]	; (8002e7c <loadOctet+0x178>)
 8002d48:	f004 f948 	bl	8006fdc <siprintf>
    		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002d4c:	484b      	ldr	r0, [pc, #300]	; (8002e7c <loadOctet+0x178>)
 8002d4e:	f7fd fa5f 	bl	8000210 <strlen>
 8002d52:	4603      	mov	r3, r0
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	230a      	movs	r3, #10
 8002d58:	4948      	ldr	r1, [pc, #288]	; (8002e7c <loadOctet+0x178>)
 8002d5a:	4849      	ldr	r0, [pc, #292]	; (8002e80 <loadOctet+0x17c>)
 8002d5c:	f003 fa15 	bl	800618a <HAL_UART_Transmit>
        	return -1;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	e083      	b.n	8002e6e <loadOctet+0x16a>
        }
		myPtr[i] = bit;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2d9      	uxtb	r1, r3
 8002d72:	f107 0208 	add.w	r2, r7, #8
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4413      	add	r3, r2
 8002d7a:	460a      	mov	r2, r1
 8002d7c:	701a      	strb	r2, [r3, #0]
        if(myPtr[i] != AX25TBYTE[i]){
 8002d7e:	f107 0208 	add.w	r2, r7, #8
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	4413      	add	r3, r2
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	493f      	ldr	r1, [pc, #252]	; (8002e88 <loadOctet+0x184>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	440b      	add	r3, r1
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <loadOctet+0x94>
        	isFlag = false;
 8002d94:	2300      	movs	r3, #0
 8002d96:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) {
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b07      	cmp	r3, #7
 8002da2:	ddb8      	ble.n	8002d16 <loadOctet+0x12>
        }
    }
	//If this is not a flag, copy the values into the buffer pointer
	if(!isFlag){
 8002da4:	7ffb      	ldrb	r3, [r7, #31]
 8002da6:	f083 0301 	eor.w	r3, r3, #1
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d05d      	beq.n	8002e6c <loadOctet+0x168>
		sprintf(uartData, "Printing octet [MSB:LSB]= ");
 8002db0:	4a32      	ldr	r2, [pc, #200]	; (8002e7c <loadOctet+0x178>)
 8002db2:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <loadOctet+0x188>)
 8002db4:	4615      	mov	r5, r2
 8002db6:	461c      	mov	r4, r3
 8002db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dba:	6028      	str	r0, [r5, #0]
 8002dbc:	6069      	str	r1, [r5, #4]
 8002dbe:	60aa      	str	r2, [r5, #8]
 8002dc0:	60eb      	str	r3, [r5, #12]
 8002dc2:	cc03      	ldmia	r4!, {r0, r1}
 8002dc4:	6128      	str	r0, [r5, #16]
 8002dc6:	6169      	str	r1, [r5, #20]
 8002dc8:	8823      	ldrh	r3, [r4, #0]
 8002dca:	78a2      	ldrb	r2, [r4, #2]
 8002dcc:	832b      	strh	r3, [r5, #24]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	76ab      	strb	r3, [r5, #26]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002dd2:	482a      	ldr	r0, [pc, #168]	; (8002e7c <loadOctet+0x178>)
 8002dd4:	f7fd fa1c 	bl	8000210 <strlen>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	230a      	movs	r3, #10
 8002dde:	4927      	ldr	r1, [pc, #156]	; (8002e7c <loadOctet+0x178>)
 8002de0:	4827      	ldr	r0, [pc, #156]	; (8002e80 <loadOctet+0x17c>)
 8002de2:	f003 f9d2 	bl	800618a <HAL_UART_Transmit>

		for(int i = 0;i<8;i++){
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e02c      	b.n	8002e46 <loadOctet+0x142>
			bufferptr[7-i] = (myPtr[7-i]==1)?true:false;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f1c3 0307 	rsb	r3, r3, #7
 8002df2:	f107 0220 	add.w	r2, r7, #32
 8002df6:	4413      	add	r3, r2
 8002df8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f1c3 0307 	rsb	r3, r3, #7
 8002e02:	4619      	mov	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	440b      	add	r3, r1
 8002e08:	701a      	strb	r2, [r3, #0]
			rxBit_count++;
 8002e0a:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <loadOctet+0x18c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <loadOctet+0x18c>)
 8002e12:	6013      	str	r3, [r2, #0]
			sprintf(uartData, " %d ",bufferptr[7-i]);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f1c3 0307 	rsb	r3, r3, #7
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	491b      	ldr	r1, [pc, #108]	; (8002e94 <loadOctet+0x190>)
 8002e26:	4815      	ldr	r0, [pc, #84]	; (8002e7c <loadOctet+0x178>)
 8002e28:	f004 f8d8 	bl	8006fdc <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002e2c:	4813      	ldr	r0, [pc, #76]	; (8002e7c <loadOctet+0x178>)
 8002e2e:	f7fd f9ef 	bl	8000210 <strlen>
 8002e32:	4603      	mov	r3, r0
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	230a      	movs	r3, #10
 8002e38:	4910      	ldr	r1, [pc, #64]	; (8002e7c <loadOctet+0x178>)
 8002e3a:	4811      	ldr	r0, [pc, #68]	; (8002e80 <loadOctet+0x17c>)
 8002e3c:	f003 f9a5 	bl	800618a <HAL_UART_Transmit>
		for(int i = 0;i<8;i++){
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	3301      	adds	r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b07      	cmp	r3, #7
 8002e4a:	ddcf      	ble.n	8002dec <loadOctet+0xe8>
		}
		sprintf(uartData, "\r\n");
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <loadOctet+0x178>)
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <loadOctet+0x194>)
 8002e50:	8811      	ldrh	r1, [r2, #0]
 8002e52:	7892      	ldrb	r2, [r2, #2]
 8002e54:	8019      	strh	r1, [r3, #0]
 8002e56:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002e58:	4808      	ldr	r0, [pc, #32]	; (8002e7c <loadOctet+0x178>)
 8002e5a:	f7fd f9d9 	bl	8000210 <strlen>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	230a      	movs	r3, #10
 8002e64:	4905      	ldr	r1, [pc, #20]	; (8002e7c <loadOctet+0x178>)
 8002e66:	4806      	ldr	r0, [pc, #24]	; (8002e80 <loadOctet+0x17c>)
 8002e68:	f003 f98f 	bl	800618a <HAL_UART_Transmit>
	}
	return isFlag;
 8002e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bdb0      	pop	{r4, r5, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	08008d4c 	.word	0x08008d4c
 8002e7c:	2000262c 	.word	0x2000262c
 8002e80:	200034e8 	.word	0x200034e8
 8002e84:	08008d5c 	.word	0x08008d5c
 8002e88:	20000008 	.word	0x20000008
 8002e8c:	08008d6c 	.word	0x08008d6c
 8002e90:	20000a04 	.word	0x20000a04
 8002e94:	08008d88 	.word	0x08008d88
 8002e98:	08008d90 	.word	0x08008d90

08002e9c <streamGet>:
int streamGet() {
 8002e9c:	b5b0      	push	{r4, r5, r7, lr}
 8002e9e:	b090      	sub	sp, #64	; 0x40
 8002ea0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002ea2:	4b88      	ldr	r3, [pc, #544]	; (80030c4 <streamGet+0x228>)
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28

	int byteArray[8];
	int max_octets = (int)(AX25_PACKET_MAX)/8;
 8002ea6:	f240 134b 	movw	r3, #331	; 0x14b
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
	int octet_count,good_octet;
	bool gotflag;

	//Just do this unless we need to toggle
	while(!changeMode){
 8002eac:	e0fb      	b.n	80030a6 <streamGet+0x20a>
		gotflag = false;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//Slide bits
		for(int i = 0; i < 7; i++){
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8002eb8:	e011      	b.n	8002ede <streamGet+0x42>
			byteArray[i] = byteArray[i+1];
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 7; i++){
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	3301      	adds	r3, #1
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	2b06      	cmp	r3, #6
 8002ee2:	ddea      	ble.n	8002eba <streamGet+0x1e>
		}
		byteArray[7] = loadBit();
 8002ee4:	f7ff fe9a 	bl	8002c1c <loadBit>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	623b      	str	r3, [r7, #32]
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
//		}
//		sprintf(uartData, "Current octet:");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		//Detect AX25 flag bytes
		for(int i = 0;i < 8; i++){
 8002eec:	2300      	movs	r3, #0
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef0:	e019      	b.n	8002f26 <streamGet+0x8a>
//			sprintf(uartData, " %d ",byteArray[i]);
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			//If the byte isn't lined up, break loop
			if(byteArray[i]!=AX25TBYTE[i]) {
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002efa:	4413      	add	r3, r2
 8002efc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002f00:	4971      	ldr	r1, [pc, #452]	; (80030c8 <streamGet+0x22c>)
 8002f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f04:	440a      	add	r2, r1
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <streamGet+0x78>
				gotflag = false;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002f12:	e00b      	b.n	8002f2c <streamGet+0x90>
			}
			//If the loop makes it to the lowest bit, the flag should be lined up
			else if(i==7){
 8002f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f16:	2b07      	cmp	r3, #7
 8002f18:	d102      	bne.n	8002f20 <streamGet+0x84>
				gotflag = true;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0;i < 8; i++){
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	3301      	adds	r3, #1
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	2b07      	cmp	r3, #7
 8002f2a:	dde2      	ble.n	8002ef2 <streamGet+0x56>
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);


		//Got flag
		if(gotflag){
 8002f2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80b8 	beq.w	80030a6 <streamGet+0x20a>
			sprintf(uartData, "Start AX.25 Flag Detected\r\n");
 8002f36:	4a65      	ldr	r2, [pc, #404]	; (80030cc <streamGet+0x230>)
 8002f38:	4b65      	ldr	r3, [pc, #404]	; (80030d0 <streamGet+0x234>)
 8002f3a:	4615      	mov	r5, r2
 8002f3c:	461c      	mov	r4, r3
 8002f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f40:	6028      	str	r0, [r5, #0]
 8002f42:	6069      	str	r1, [r5, #4]
 8002f44:	60aa      	str	r2, [r5, #8]
 8002f46:	60eb      	str	r3, [r5, #12]
 8002f48:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002f4a:	6128      	str	r0, [r5, #16]
 8002f4c:	6169      	str	r1, [r5, #20]
 8002f4e:	61aa      	str	r2, [r5, #24]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002f50:	485e      	ldr	r0, [pc, #376]	; (80030cc <streamGet+0x230>)
 8002f52:	f7fd f95d 	bl	8000210 <strlen>
 8002f56:	4603      	mov	r3, r0
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	230a      	movs	r3, #10
 8002f5c:	495b      	ldr	r1, [pc, #364]	; (80030cc <streamGet+0x230>)
 8002f5e:	485d      	ldr	r0, [pc, #372]	; (80030d4 <streamGet+0x238>)
 8002f60:	f003 f913 	bl	800618a <HAL_UART_Transmit>
			octet_count  = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	63fb      	str	r3, [r7, #60]	; 0x3c

			//Until AX.25 buffer overflows, continue reading octets
			good_octet = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	63bb      	str	r3, [r7, #56]	; 0x38
			while( (good_octet==0) && (octet_count < max_octets) ){
 8002f6c:	e01a      	b.n	8002fa4 <streamGet+0x108>
				good_octet = loadOctet(&local_packet->AX25_PACKET[octet_count*8]);
 8002f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f74:	4413      	add	r3, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fec4 	bl	8002d04 <loadOctet>
 8002f7c:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(uartData, "Loaded octet %d out of %d\r\n",octet_count,max_octets);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f82:	4955      	ldr	r1, [pc, #340]	; (80030d8 <streamGet+0x23c>)
 8002f84:	4851      	ldr	r0, [pc, #324]	; (80030cc <streamGet+0x230>)
 8002f86:	f004 f829 	bl	8006fdc <siprintf>
				//sprintf(uartData, "good_octet: %d\r\n",good_octet);
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002f8a:	4850      	ldr	r0, [pc, #320]	; (80030cc <streamGet+0x230>)
 8002f8c:	f7fd f940 	bl	8000210 <strlen>
 8002f90:	4603      	mov	r3, r0
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	230a      	movs	r3, #10
 8002f96:	494d      	ldr	r1, [pc, #308]	; (80030cc <streamGet+0x230>)
 8002f98:	484e      	ldr	r0, [pc, #312]	; (80030d4 <streamGet+0x238>)
 8002f9a:	f003 f8f6 	bl	800618a <HAL_UART_Transmit>

				octet_count+=1;
 8002f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
			while( (good_octet==0) && (octet_count < max_octets) ){
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <streamGet+0x116>
 8002faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	dbdd      	blt.n	8002f6e <streamGet+0xd2>
			}
			//If an octet was bad, this was a bad packet
			if(good_octet!=1){
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d012      	beq.n	8002fde <streamGet+0x142>
				sprintf(uartData, "Bad packet! Detected bad signal.\n\n",octet_count);
 8002fb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fba:	4948      	ldr	r1, [pc, #288]	; (80030dc <streamGet+0x240>)
 8002fbc:	4843      	ldr	r0, [pc, #268]	; (80030cc <streamGet+0x230>)
 8002fbe:	f004 f80d 	bl	8006fdc <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002fc2:	4842      	ldr	r0, [pc, #264]	; (80030cc <streamGet+0x230>)
 8002fc4:	f7fd f924 	bl	8000210 <strlen>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	230a      	movs	r3, #10
 8002fce:	493f      	ldr	r1, [pc, #252]	; (80030cc <streamGet+0x230>)
 8002fd0:	4840      	ldr	r0, [pc, #256]	; (80030d4 <streamGet+0x238>)
 8002fd2:	f003 f8da 	bl	800618a <HAL_UART_Transmit>
				//for(int i = 0;i<)
				gotflag = false;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002fdc:	e063      	b.n	80030a6 <streamGet+0x20a>
			}
			//If ax.25 buffer overflows
			else if(octet_count >= max_octets){
 8002fde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	db12      	blt.n	800300c <streamGet+0x170>
				sprintf(uartData, "Bad packet! Not enough octets\r\n\n",octet_count);
 8002fe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fe8:	493d      	ldr	r1, [pc, #244]	; (80030e0 <streamGet+0x244>)
 8002fea:	4838      	ldr	r0, [pc, #224]	; (80030cc <streamGet+0x230>)
 8002fec:	f003 fff6 	bl	8006fdc <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002ff0:	4836      	ldr	r0, [pc, #216]	; (80030cc <streamGet+0x230>)
 8002ff2:	f7fd f90d 	bl	8000210 <strlen>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	230a      	movs	r3, #10
 8002ffc:	4933      	ldr	r1, [pc, #204]	; (80030cc <streamGet+0x230>)
 8002ffe:	4835      	ldr	r0, [pc, #212]	; (80030d4 <streamGet+0x238>)
 8003000:	f003 f8c3 	bl	800618a <HAL_UART_Transmit>
				gotflag = false;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800300a:	e04c      	b.n	80030a6 <streamGet+0x20a>
			}
			//
			else if(octet_count == 1){
 800300c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300e:	2b01      	cmp	r3, #1
 8003010:	d12d      	bne.n	800306e <streamGet+0x1d2>
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n");
 8003012:	4a2e      	ldr	r2, [pc, #184]	; (80030cc <streamGet+0x230>)
 8003014:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <streamGet+0x248>)
 8003016:	4615      	mov	r5, r2
 8003018:	461c      	mov	r4, r3
 800301a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301c:	6028      	str	r0, [r5, #0]
 800301e:	6069      	str	r1, [r5, #4]
 8003020:	60aa      	str	r2, [r5, #8]
 8003022:	60eb      	str	r3, [r5, #12]
 8003024:	cc03      	ldmia	r4!, {r0, r1}
 8003026:	6128      	str	r0, [r5, #16]
 8003028:	6169      	str	r1, [r5, #20]
 800302a:	8823      	ldrh	r3, [r4, #0]
 800302c:	78a2      	ldrb	r2, [r4, #2]
 800302e:	832b      	strh	r3, [r5, #24]
 8003030:	4613      	mov	r3, r2
 8003032:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003034:	4825      	ldr	r0, [pc, #148]	; (80030cc <streamGet+0x230>)
 8003036:	f7fd f8eb 	bl	8000210 <strlen>
 800303a:	4603      	mov	r3, r0
 800303c:	b29a      	uxth	r2, r3
 800303e:	230a      	movs	r3, #10
 8003040:	4922      	ldr	r1, [pc, #136]	; (80030cc <streamGet+0x230>)
 8003042:	4824      	ldr	r0, [pc, #144]	; (80030d4 <streamGet+0x238>)
 8003044:	f003 f8a1 	bl	800618a <HAL_UART_Transmit>
				sprintf(uartData, "Bad packet! Not enough octetes.\r\n\n",octet_count);
 8003048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800304a:	4927      	ldr	r1, [pc, #156]	; (80030e8 <streamGet+0x24c>)
 800304c:	481f      	ldr	r0, [pc, #124]	; (80030cc <streamGet+0x230>)
 800304e:	f003 ffc5 	bl	8006fdc <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003052:	481e      	ldr	r0, [pc, #120]	; (80030cc <streamGet+0x230>)
 8003054:	f7fd f8dc 	bl	8000210 <strlen>
 8003058:	4603      	mov	r3, r0
 800305a:	b29a      	uxth	r2, r3
 800305c:	230a      	movs	r3, #10
 800305e:	491b      	ldr	r1, [pc, #108]	; (80030cc <streamGet+0x230>)
 8003060:	481c      	ldr	r0, [pc, #112]	; (80030d4 <streamGet+0x238>)
 8003062:	f003 f892 	bl	800618a <HAL_UART_Transmit>
				gotflag = false;
 8003066:	2300      	movs	r3, #0
 8003068:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800306c:	e01b      	b.n	80030a6 <streamGet+0x20a>
			}
			//If ax.25 buffer does not overflow, this was a good packet
			else {
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n\n");
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <streamGet+0x230>)
 8003070:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <streamGet+0x250>)
 8003072:	4615      	mov	r5, r2
 8003074:	461c      	mov	r4, r3
 8003076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003078:	6028      	str	r0, [r5, #0]
 800307a:	6069      	str	r1, [r5, #4]
 800307c:	60aa      	str	r2, [r5, #8]
 800307e:	60eb      	str	r3, [r5, #12]
 8003080:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003082:	6128      	str	r0, [r5, #16]
 8003084:	6169      	str	r1, [r5, #20]
 8003086:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8003088:	4810      	ldr	r0, [pc, #64]	; (80030cc <streamGet+0x230>)
 800308a:	f7fd f8c1 	bl	8000210 <strlen>
 800308e:	4603      	mov	r3, r0
 8003090:	b29a      	uxth	r2, r3
 8003092:	230a      	movs	r3, #10
 8003094:	490d      	ldr	r1, [pc, #52]	; (80030cc <streamGet+0x230>)
 8003096:	480f      	ldr	r0, [pc, #60]	; (80030d4 <streamGet+0x238>)
 8003098:	f003 f877 	bl	800618a <HAL_UART_Transmit>
				gotflag = false;
 800309c:	2300      	movs	r3, #0
 800309e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return 1;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e009      	b.n	80030ba <streamGet+0x21e>
	while(!changeMode){
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <streamGet+0x254>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	f083 0301 	eor.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f47f aefc 	bne.w	8002eae <streamGet+0x12>
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
	//Break if mode needs to change
	if(toggleMode)
		return -1;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3740      	adds	r7, #64	; 0x40
 80030be:	46bd      	mov	sp, r7
 80030c0:	bdb0      	pop	{r4, r5, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000a38 	.word	0x20000a38
 80030c8:	20000008 	.word	0x20000008
 80030cc:	2000262c 	.word	0x2000262c
 80030d0:	08008d94 	.word	0x08008d94
 80030d4:	200034e8 	.word	0x200034e8
 80030d8:	08008db0 	.word	0x08008db0
 80030dc:	08008dcc 	.word	0x08008dcc
 80030e0:	08008df0 	.word	0x08008df0
 80030e4:	08008e14 	.word	0x08008e14
 80030e8:	08008e30 	.word	0x08008e30
 80030ec:	08008e54 	.word	0x08008e54
 80030f0:	20000a09 	.word	0x20000a09

080030f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030f8:	f000 fd18 	bl	8003b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030fc:	f000 f820 	bl	8003140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003100:	f000 f9f0 	bl	80034e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003104:	f000 f9ce 	bl	80034a4 <MX_DMA_Init>
  MX_DAC_Init();
 8003108:	f000 f888 	bl	800321c <MX_DAC_Init>
  MX_TIM2_Init();
 800310c:	f000 f8b0 	bl	8003270 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003110:	f000 f8fa 	bl	8003308 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8003114:	f000 f994 	bl	8003440 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8003118:	f000 f944 	bl	80033a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 800311c:	4806      	ldr	r0, [pc, #24]	; (8003138 <main+0x44>)
 800311e:	f002 fbc2 	bl	80058a6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8003122:	4806      	ldr	r0, [pc, #24]	; (800313c <main+0x48>)
 8003124:	f002 fc0e 	bl	8005944 <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 8003128:	f000 fabc 	bl	80036a4 <uart_gpio_init>

	initProgram(false);
 800312c:	2000      	movs	r0, #0
 800312e:	f7ff fae5 	bl	80026fc <initProgram>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tx_rx();
 8003132:	f7fd ff85 	bl	8001040 <tx_rx>
 8003136:	e7fc      	b.n	8003132 <main+0x3e>
 8003138:	200034a8 	.word	0x200034a8
 800313c:	200031f0 	.word	0x200031f0

08003140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b094      	sub	sp, #80	; 0x50
 8003144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003146:	f107 031c 	add.w	r3, r7, #28
 800314a:	2234      	movs	r2, #52	; 0x34
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f003 ff3b 	bl	8006fca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003154:	f107 0308 	add.w	r3, r7, #8
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003164:	2300      	movs	r3, #0
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	4b2a      	ldr	r3, [pc, #168]	; (8003214 <SystemClock_Config+0xd4>)
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	4a29      	ldr	r2, [pc, #164]	; (8003214 <SystemClock_Config+0xd4>)
 800316e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003172:	6413      	str	r3, [r2, #64]	; 0x40
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <SystemClock_Config+0xd4>)
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003180:	2300      	movs	r3, #0
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4b24      	ldr	r3, [pc, #144]	; (8003218 <SystemClock_Config+0xd8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <SystemClock_Config+0xd8>)
 800318e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b20      	ldr	r3, [pc, #128]	; (8003218 <SystemClock_Config+0xd8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031aa:	2302      	movs	r3, #2
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80031b4:	2304      	movs	r3, #4
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80031b8:	235a      	movs	r3, #90	; 0x5a
 80031ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031bc:	2302      	movs	r3, #2
 80031be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80031c0:	2302      	movs	r3, #2
 80031c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80031c4:	2302      	movs	r3, #2
 80031c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031c8:	f107 031c 	add.w	r3, r7, #28
 80031cc:	4618      	mov	r0, r3
 80031ce:	f002 f8e5 	bl	800539c <HAL_RCC_OscConfig>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80031d8:	f000 fa8c 	bl	80036f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031dc:	230f      	movs	r3, #15
 80031de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031e0:	2302      	movs	r3, #2
 80031e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031f4:	f107 0308 	add.w	r3, r7, #8
 80031f8:	2102      	movs	r1, #2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f001 fe14 	bl	8004e28 <HAL_RCC_ClockConfig>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003206:	f000 fa75 	bl	80036f4 <Error_Handler>
  }
}
 800320a:	bf00      	nop
 800320c:	3750      	adds	r7, #80	; 0x50
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	40007000 	.word	0x40007000

0800321c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003222:	463b      	mov	r3, r7
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800322a:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <MX_DAC_Init+0x4c>)
 800322c:	4a0f      	ldr	r2, [pc, #60]	; (800326c <MX_DAC_Init+0x50>)
 800322e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003230:	480d      	ldr	r0, [pc, #52]	; (8003268 <MX_DAC_Init+0x4c>)
 8003232:	f000 fe2e 	bl	8003e92 <HAL_DAC_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800323c:	f000 fa5a 	bl	80036f4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8003240:	2324      	movs	r3, #36	; 0x24
 8003242:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003244:	2300      	movs	r3, #0
 8003246:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003248:	463b      	mov	r3, r7
 800324a:	2200      	movs	r2, #0
 800324c:	4619      	mov	r1, r3
 800324e:	4806      	ldr	r0, [pc, #24]	; (8003268 <MX_DAC_Init+0x4c>)
 8003250:	f000 ff4f 	bl	80040f2 <HAL_DAC_ConfigChannel>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800325a:	f000 fa4b 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20003494 	.word	0x20003494
 800326c:	40007400 	.word	0x40007400

08003270 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003276:	f107 0308 	add.w	r3, r7, #8
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003284:	463b      	mov	r3, r7
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <MX_TIM2_Init+0x94>)
 800328e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003292:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <MX_TIM2_Init+0x94>)
 8003296:	2208      	movs	r2, #8
 8003298:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329a:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <MX_TIM2_Init+0x94>)
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80032a0:	4b18      	ldr	r3, [pc, #96]	; (8003304 <MX_TIM2_Init+0x94>)
 80032a2:	2263      	movs	r2, #99	; 0x63
 80032a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a6:	4b17      	ldr	r3, [pc, #92]	; (8003304 <MX_TIM2_Init+0x94>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032ac:	4b15      	ldr	r3, [pc, #84]	; (8003304 <MX_TIM2_Init+0x94>)
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032b2:	4814      	ldr	r0, [pc, #80]	; (8003304 <MX_TIM2_Init+0x94>)
 80032b4:	f002 facc 	bl	8005850 <HAL_TIM_Base_Init>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80032be:	f000 fa19 	bl	80036f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032c8:	f107 0308 	add.w	r3, r7, #8
 80032cc:	4619      	mov	r1, r3
 80032ce:	480d      	ldr	r0, [pc, #52]	; (8003304 <MX_TIM2_Init+0x94>)
 80032d0:	f002 fc64 	bl	8005b9c <HAL_TIM_ConfigClockSource>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80032da:	f000 fa0b 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80032de:	2320      	movs	r3, #32
 80032e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032e6:	463b      	mov	r3, r7
 80032e8:	4619      	mov	r1, r3
 80032ea:	4806      	ldr	r0, [pc, #24]	; (8003304 <MX_TIM2_Init+0x94>)
 80032ec:	f002 fe70 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80032f6:	f000 f9fd 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200034a8 	.word	0x200034a8

08003308 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800330e:	f107 0308 	add.w	r3, r7, #8
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	609a      	str	r2, [r3, #8]
 800331a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800331c:	463b      	mov	r3, r7
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <MX_TIM3_Init+0x94>)
 8003326:	4a1e      	ldr	r2, [pc, #120]	; (80033a0 <MX_TIM3_Init+0x98>)
 8003328:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800332a:	4b1c      	ldr	r3, [pc, #112]	; (800339c <MX_TIM3_Init+0x94>)
 800332c:	2259      	movs	r2, #89	; 0x59
 800332e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003330:	4b1a      	ldr	r3, [pc, #104]	; (800339c <MX_TIM3_Init+0x94>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <MX_TIM3_Init+0x94>)
 8003338:	f240 3241 	movw	r2, #833	; 0x341
 800333c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800333e:	4b17      	ldr	r3, [pc, #92]	; (800339c <MX_TIM3_Init+0x94>)
 8003340:	2200      	movs	r2, #0
 8003342:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003344:	4b15      	ldr	r3, [pc, #84]	; (800339c <MX_TIM3_Init+0x94>)
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800334a:	4814      	ldr	r0, [pc, #80]	; (800339c <MX_TIM3_Init+0x94>)
 800334c:	f002 fa80 	bl	8005850 <HAL_TIM_Base_Init>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003356:	f000 f9cd 	bl	80036f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800335a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800335e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003360:	f107 0308 	add.w	r3, r7, #8
 8003364:	4619      	mov	r1, r3
 8003366:	480d      	ldr	r0, [pc, #52]	; (800339c <MX_TIM3_Init+0x94>)
 8003368:	f002 fc18 	bl	8005b9c <HAL_TIM_ConfigClockSource>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003372:	f000 f9bf 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800337a:	2300      	movs	r3, #0
 800337c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800337e:	463b      	mov	r3, r7
 8003380:	4619      	mov	r1, r3
 8003382:	4806      	ldr	r0, [pc, #24]	; (800339c <MX_TIM3_Init+0x94>)
 8003384:	f002 fe24 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800338e:	f000 f9b1 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200031f0 	.word	0x200031f0
 80033a0:	40000400 	.word	0x40000400

080033a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033aa:	f107 0308 	add.w	r3, r7, #8
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b8:	463b      	mov	r3, r7
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <MX_TIM4_Init+0x94>)
 80033c2:	4a1e      	ldr	r2, [pc, #120]	; (800343c <MX_TIM4_Init+0x98>)
 80033c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 80033c6:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <MX_TIM4_Init+0x94>)
 80033c8:	2259      	movs	r2, #89	; 0x59
 80033ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033cc:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <MX_TIM4_Init+0x94>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80033d2:	4b19      	ldr	r3, [pc, #100]	; (8003438 <MX_TIM4_Init+0x94>)
 80033d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033da:	4b17      	ldr	r3, [pc, #92]	; (8003438 <MX_TIM4_Init+0x94>)
 80033dc:	2200      	movs	r2, #0
 80033de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e0:	4b15      	ldr	r3, [pc, #84]	; (8003438 <MX_TIM4_Init+0x94>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80033e6:	4814      	ldr	r0, [pc, #80]	; (8003438 <MX_TIM4_Init+0x94>)
 80033e8:	f002 fa32 	bl	8005850 <HAL_TIM_Base_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80033f2:	f000 f97f 	bl	80036f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80033fc:	f107 0308 	add.w	r3, r7, #8
 8003400:	4619      	mov	r1, r3
 8003402:	480d      	ldr	r0, [pc, #52]	; (8003438 <MX_TIM4_Init+0x94>)
 8003404:	f002 fbca 	bl	8005b9c <HAL_TIM_ConfigClockSource>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800340e:	f000 f971 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003412:	2300      	movs	r3, #0
 8003414:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800341a:	463b      	mov	r3, r7
 800341c:	4619      	mov	r1, r3
 800341e:	4806      	ldr	r0, [pc, #24]	; (8003438 <MX_TIM4_Init+0x94>)
 8003420:	f002 fdd6 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800342a:	f000 f963 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800342e:	bf00      	nop
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20003728 	.word	0x20003728
 800343c:	40000800 	.word	0x40000800

08003440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <MX_USART2_UART_Init+0x5c>)
 8003446:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <MX_USART2_UART_Init+0x60>)
 8003448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <MX_USART2_UART_Init+0x5c>)
 800344c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <MX_USART2_UART_Init+0x5c>)
 8003454:	2200      	movs	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003458:	4b10      	ldr	r3, [pc, #64]	; (800349c <MX_USART2_UART_Init+0x5c>)
 800345a:	2200      	movs	r2, #0
 800345c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800345e:	4b0f      	ldr	r3, [pc, #60]	; (800349c <MX_USART2_UART_Init+0x5c>)
 8003460:	2200      	movs	r2, #0
 8003462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003464:	4b0d      	ldr	r3, [pc, #52]	; (800349c <MX_USART2_UART_Init+0x5c>)
 8003466:	220c      	movs	r2, #12
 8003468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800346a:	4b0c      	ldr	r3, [pc, #48]	; (800349c <MX_USART2_UART_Init+0x5c>)
 800346c:	2200      	movs	r2, #0
 800346e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003470:	4b0a      	ldr	r3, [pc, #40]	; (800349c <MX_USART2_UART_Init+0x5c>)
 8003472:	2200      	movs	r2, #0
 8003474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003476:	4809      	ldr	r0, [pc, #36]	; (800349c <MX_USART2_UART_Init+0x5c>)
 8003478:	f002 fe3a 	bl	80060f0 <HAL_UART_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003482:	f000 f937 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	2100      	movs	r1, #0
 800348a:	2026      	movs	r0, #38	; 0x26
 800348c:	f000 fcbd 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003490:	2026      	movs	r0, #38	; 0x26
 8003492:	f000 fcd6 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	200034e8 	.word	0x200034e8
 80034a0:	40004400 	.word	0x40004400

080034a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <MX_DMA_Init+0x3c>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a0b      	ldr	r2, [pc, #44]	; (80034e0 <MX_DMA_Init+0x3c>)
 80034b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <MX_DMA_Init+0x3c>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2100      	movs	r1, #0
 80034ca:	2010      	movs	r0, #16
 80034cc:	f000 fc9d 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80034d0:	2010      	movs	r0, #16
 80034d2:	f000 fcb6 	bl	8003e42 <HAL_NVIC_EnableIRQ>

}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800

080034e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ea:	f107 0314 	add.w	r3, r7, #20
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	609a      	str	r2, [r3, #8]
 80034f6:	60da      	str	r2, [r3, #12]
 80034f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	4b45      	ldr	r3, [pc, #276]	; (8003614 <MX_GPIO_Init+0x130>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a44      	ldr	r2, [pc, #272]	; (8003614 <MX_GPIO_Init+0x130>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b42      	ldr	r3, [pc, #264]	; (8003614 <MX_GPIO_Init+0x130>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b3e      	ldr	r3, [pc, #248]	; (8003614 <MX_GPIO_Init+0x130>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a3d      	ldr	r2, [pc, #244]	; (8003614 <MX_GPIO_Init+0x130>)
 8003520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <MX_GPIO_Init+0x130>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	4b37      	ldr	r3, [pc, #220]	; (8003614 <MX_GPIO_Init+0x130>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4a36      	ldr	r2, [pc, #216]	; (8003614 <MX_GPIO_Init+0x130>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b34      	ldr	r3, [pc, #208]	; (8003614 <MX_GPIO_Init+0x130>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	4b30      	ldr	r3, [pc, #192]	; (8003614 <MX_GPIO_Init+0x130>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	4a2f      	ldr	r2, [pc, #188]	; (8003614 <MX_GPIO_Init+0x130>)
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	6313      	str	r3, [r2, #48]	; 0x30
 800355e:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <MX_GPIO_Init+0x130>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800356a:	2200      	movs	r2, #0
 800356c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003570:	4829      	ldr	r0, [pc, #164]	; (8003618 <MX_GPIO_Init+0x134>)
 8003572:	f001 fc27 	bl	8004dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8003576:	2200      	movs	r2, #0
 8003578:	2110      	movs	r1, #16
 800357a:	4828      	ldr	r0, [pc, #160]	; (800361c <MX_GPIO_Init+0x138>)
 800357c:	f001 fc22 	bl	8004dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003586:	4b26      	ldr	r3, [pc, #152]	; (8003620 <MX_GPIO_Init+0x13c>)
 8003588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800358e:	f107 0314 	add.w	r3, r7, #20
 8003592:	4619      	mov	r1, r3
 8003594:	4821      	ldr	r0, [pc, #132]	; (800361c <MX_GPIO_Init+0x138>)
 8003596:	f001 fa83 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800359a:	2301      	movs	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800359e:	4b21      	ldr	r3, [pc, #132]	; (8003624 <MX_GPIO_Init+0x140>)
 80035a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a6:	f107 0314 	add.w	r3, r7, #20
 80035aa:	4619      	mov	r1, r3
 80035ac:	481a      	ldr	r0, [pc, #104]	; (8003618 <MX_GPIO_Init+0x134>)
 80035ae:	f001 fa77 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80035b2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80035b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b8:	2301      	movs	r3, #1
 80035ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c0:	2300      	movs	r3, #0
 80035c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	4619      	mov	r1, r3
 80035ca:	4813      	ldr	r0, [pc, #76]	; (8003618 <MX_GPIO_Init+0x134>)
 80035cc:	f001 fa68 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 80035d0:	2310      	movs	r3, #16
 80035d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d4:	2301      	movs	r3, #1
 80035d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035dc:	2300      	movs	r3, #0
 80035de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	4619      	mov	r1, r3
 80035e6:	480d      	ldr	r0, [pc, #52]	; (800361c <MX_GPIO_Init+0x138>)
 80035e8:	f001 fa5a 	bl	8004aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80035ec:	2200      	movs	r2, #0
 80035ee:	2100      	movs	r1, #0
 80035f0:	2006      	movs	r0, #6
 80035f2:	f000 fc0a 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80035f6:	2006      	movs	r0, #6
 80035f8:	f000 fc23 	bl	8003e42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80035fc:	2200      	movs	r2, #0
 80035fe:	2100      	movs	r1, #0
 8003600:	2028      	movs	r0, #40	; 0x28
 8003602:	f000 fc02 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003606:	2028      	movs	r0, #40	; 0x28
 8003608:	f000 fc1b 	bl	8003e42 <HAL_NVIC_EnableIRQ>

}
 800360c:	bf00      	nop
 800360e:	3728      	adds	r7, #40	; 0x28
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	40020000 	.word	0x40020000
 800361c:	40020800 	.word	0x40020800
 8003620:	10210000 	.word	0x10210000
 8003624:	10110000 	.word	0x10110000

08003628 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a05      	ldr	r2, [pc, #20]	; (8003648 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d102      	bne.n	800363e <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 8003638:	f7ff f932 	bl	80028a0 <Tim3IT>
	else
		__NOP();
}
 800363c:	e000      	b.n	8003640 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 800363e:	bf00      	nop
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	200031f0 	.word	0x200031f0

0800364c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 800365c:	f7ff f954 	bl	8002908 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003666:	d103      	bne.n	8003670 <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_GPIO_EXTI_Callback+0x30>)
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 800366e:	e000      	b.n	8003672 <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 8003670:	bf00      	nop
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000a09 	.word	0x20000a09

08003680 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <HAL_UART_RxCpltCallback+0x20>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 8003692:	f7fe fa69 	bl	8001b68 <UART2_EXCEPTION_CALLBACK>
  }
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40004400 	.word	0x40004400

080036a4 <uart_gpio_init>:

void uart_gpio_init()
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <uart_gpio_init+0x48>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <uart_gpio_init+0x48>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <uart_gpio_init+0x48>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80036c6:	230c      	movs	r3, #12
 80036c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ce:	2301      	movs	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036d6:	2307      	movs	r3, #7
 80036d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4804      	ldr	r0, [pc, #16]	; (80036f0 <uart_gpio_init+0x4c>)
 80036e0:	f001 f9de 	bl	8004aa0 <HAL_GPIO_Init>
}
 80036e4:	bf00      	nop
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020000 	.word	0x40020000

080036f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
	...

08003704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_MspInit+0x4c>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	4a0f      	ldr	r2, [pc, #60]	; (8003750 <HAL_MspInit+0x4c>)
 8003714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_MspInit+0x4c>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_MspInit+0x4c>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a08      	ldr	r2, [pc, #32]	; (8003750 <HAL_MspInit+0x4c>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_MspInit+0x4c>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003742:	2007      	movs	r0, #7
 8003744:	f000 fb56 	bl	8003df4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40023800 	.word	0x40023800

08003754 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 0314 	add.w	r3, r7, #20
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a2f      	ldr	r2, [pc, #188]	; (8003830 <HAL_DAC_MspInit+0xdc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d158      	bne.n	8003828 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	4b2e      	ldr	r3, [pc, #184]	; (8003834 <HAL_DAC_MspInit+0xe0>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	4a2d      	ldr	r2, [pc, #180]	; (8003834 <HAL_DAC_MspInit+0xe0>)
 8003780:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b2b      	ldr	r3, [pc, #172]	; (8003834 <HAL_DAC_MspInit+0xe0>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b27      	ldr	r3, [pc, #156]	; (8003834 <HAL_DAC_MspInit+0xe0>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a26      	ldr	r2, [pc, #152]	; (8003834 <HAL_DAC_MspInit+0xe0>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <HAL_DAC_MspInit+0xe0>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80037ae:	2310      	movs	r3, #16
 80037b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037b2:	2303      	movs	r3, #3
 80037b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ba:	f107 0314 	add.w	r3, r7, #20
 80037be:	4619      	mov	r1, r3
 80037c0:	481d      	ldr	r0, [pc, #116]	; (8003838 <HAL_DAC_MspInit+0xe4>)
 80037c2:	f001 f96d 	bl	8004aa0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_DAC_MspInit+0xe8>)
 80037c8:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <HAL_DAC_MspInit+0xec>)
 80037ca:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_DAC_MspInit+0xe8>)
 80037ce:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80037d2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_DAC_MspInit+0xe8>)
 80037d6:	2240      	movs	r2, #64	; 0x40
 80037d8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <HAL_DAC_MspInit+0xe8>)
 80037dc:	2200      	movs	r2, #0
 80037de:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80037e0:	4b16      	ldr	r3, [pc, #88]	; (800383c <HAL_DAC_MspInit+0xe8>)
 80037e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037e6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <HAL_DAC_MspInit+0xe8>)
 80037ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ee:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_DAC_MspInit+0xe8>)
 80037f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037f6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80037f8:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_DAC_MspInit+0xe8>)
 80037fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037fe:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003800:	4b0e      	ldr	r3, [pc, #56]	; (800383c <HAL_DAC_MspInit+0xe8>)
 8003802:	2200      	movs	r2, #0
 8003804:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <HAL_DAC_MspInit+0xe8>)
 8003808:	2200      	movs	r2, #0
 800380a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800380c:	480b      	ldr	r0, [pc, #44]	; (800383c <HAL_DAC_MspInit+0xe8>)
 800380e:	f000 fd47 	bl	80042a0 <HAL_DMA_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8003818:	f7ff ff6c 	bl	80036f4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a07      	ldr	r2, [pc, #28]	; (800383c <HAL_DAC_MspInit+0xe8>)
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	4a06      	ldr	r2, [pc, #24]	; (800383c <HAL_DAC_MspInit+0xe8>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003828:	bf00      	nop
 800382a:	3728      	adds	r7, #40	; 0x28
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40007400 	.word	0x40007400
 8003834:	40023800 	.word	0x40023800
 8003838:	40020000 	.word	0x40020000
 800383c:	20003230 	.word	0x20003230
 8003840:	40026088 	.word	0x40026088

08003844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003854:	d10e      	bne.n	8003874 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_TIM_Base_MspInit+0x98>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <HAL_TIM_Base_MspInit+0x98>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6413      	str	r3, [r2, #64]	; 0x40
 8003866:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <HAL_TIM_Base_MspInit+0x98>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003872:	e02e      	b.n	80038d2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a19      	ldr	r2, [pc, #100]	; (80038e0 <HAL_TIM_Base_MspInit+0x9c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d116      	bne.n	80038ac <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	4b16      	ldr	r3, [pc, #88]	; (80038dc <HAL_TIM_Base_MspInit+0x98>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	4a15      	ldr	r2, [pc, #84]	; (80038dc <HAL_TIM_Base_MspInit+0x98>)
 8003888:	f043 0302 	orr.w	r3, r3, #2
 800388c:	6413      	str	r3, [r2, #64]	; 0x40
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <HAL_TIM_Base_MspInit+0x98>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	2100      	movs	r1, #0
 800389e:	201d      	movs	r0, #29
 80038a0:	f000 fab3 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038a4:	201d      	movs	r0, #29
 80038a6:	f000 facc 	bl	8003e42 <HAL_NVIC_EnableIRQ>
}
 80038aa:	e012      	b.n	80038d2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <HAL_TIM_Base_MspInit+0xa0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d10d      	bne.n	80038d2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <HAL_TIM_Base_MspInit+0x98>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	4a07      	ldr	r2, [pc, #28]	; (80038dc <HAL_TIM_Base_MspInit+0x98>)
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	6413      	str	r3, [r2, #64]	; 0x40
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_TIM_Base_MspInit+0x98>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
}
 80038d2:	bf00      	nop
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40000800 	.word	0x40000800

080038e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1d      	ldr	r2, [pc, #116]	; (800397c <HAL_UART_MspInit+0x94>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d133      	bne.n	8003972 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <HAL_UART_MspInit+0x98>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	4a1b      	ldr	r2, [pc, #108]	; (8003980 <HAL_UART_MspInit+0x98>)
 8003914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003918:	6413      	str	r3, [r2, #64]	; 0x40
 800391a:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_UART_MspInit+0x98>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <HAL_UART_MspInit+0x98>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a14      	ldr	r2, [pc, #80]	; (8003980 <HAL_UART_MspInit+0x98>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_UART_MspInit+0x98>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003942:	230c      	movs	r3, #12
 8003944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394e:	2303      	movs	r3, #3
 8003950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003952:	2307      	movs	r3, #7
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003956:	f107 0314 	add.w	r3, r7, #20
 800395a:	4619      	mov	r1, r3
 800395c:	4809      	ldr	r0, [pc, #36]	; (8003984 <HAL_UART_MspInit+0x9c>)
 800395e:	f001 f89f 	bl	8004aa0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003962:	2200      	movs	r2, #0
 8003964:	2100      	movs	r1, #0
 8003966:	2026      	movs	r0, #38	; 0x26
 8003968:	f000 fa4f 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800396c:	2026      	movs	r0, #38	; 0x26
 800396e:	f000 fa68 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003972:	bf00      	nop
 8003974:	3728      	adds	r7, #40	; 0x28
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40004400 	.word	0x40004400
 8003980:	40023800 	.word	0x40023800
 8003984:	40020000 	.word	0x40020000

08003988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800399a:	e7fe      	b.n	800399a <HardFault_Handler+0x4>

0800399c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039a0:	e7fe      	b.n	80039a0 <MemManage_Handler+0x4>

080039a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039a6:	e7fe      	b.n	80039a6 <BusFault_Handler+0x4>

080039a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039ac:	e7fe      	b.n	80039ac <UsageFault_Handler+0x4>

080039ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ca:	b480      	push	{r7}
 80039cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039dc:	f000 f8f8 	bl	8003bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80039e8:	2001      	movs	r0, #1
 80039ea:	f001 fa05 	bl	8004df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <DMA1_Stream5_IRQHandler+0x10>)
 80039fa:	f000 fde9 	bl	80045d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20003230 	.word	0x20003230

08003a08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <TIM3_IRQHandler+0x10>)
 8003a0e:	f001 ffbd 	bl	800598c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200031f0 	.word	0x200031f0

08003a1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a20:	4802      	ldr	r0, [pc, #8]	; (8003a2c <USART2_IRQHandler+0x10>)
 8003a22:	f002 fca1 	bl	8006368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	200034e8 	.word	0x200034e8

08003a30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003a34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a38:	f001 f9de 	bl	8004df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a3c:	bf00      	nop
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <_sbrk+0x5c>)
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <_sbrk+0x60>)
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <_sbrk+0x64>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <_sbrk+0x64>)
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <_sbrk+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <_sbrk+0x64>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d207      	bcs.n	8003a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a70:	f003 fa76 	bl	8006f60 <__errno>
 8003a74:	4602      	mov	r2, r0
 8003a76:	230c      	movs	r3, #12
 8003a78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	e009      	b.n	8003a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <_sbrk+0x64>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <_sbrk+0x64>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4a05      	ldr	r2, [pc, #20]	; (8003aa4 <_sbrk+0x64>)
 8003a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20020000 	.word	0x20020000
 8003aa0:	00000400 	.word	0x00000400
 8003aa4:	20000a2c 	.word	0x20000a2c
 8003aa8:	20003770 	.word	0x20003770

08003aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ab0:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <SystemInit+0x28>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <SystemInit+0x28>)
 8003ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <SystemInit+0x28>)
 8003ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ac6:	609a      	str	r2, [r3, #8]
#endif
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003adc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ade:	e003      	b.n	8003ae8 <LoopCopyDataInit>

08003ae0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ae2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ae4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ae6:	3104      	adds	r1, #4

08003ae8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ae8:	480b      	ldr	r0, [pc, #44]	; (8003b18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003aec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003aee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003af0:	d3f6      	bcc.n	8003ae0 <CopyDataInit>
  ldr  r2, =_sbss
 8003af2:	4a0b      	ldr	r2, [pc, #44]	; (8003b20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003af4:	e002      	b.n	8003afc <LoopFillZerobss>

08003af6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003af6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003af8:	f842 3b04 	str.w	r3, [r2], #4

08003afc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003afe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b00:	d3f9      	bcc.n	8003af6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b02:	f7ff ffd3 	bl	8003aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b06:	f003 fa31 	bl	8006f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b0a:	f7ff faf3 	bl	80030f4 <main>
  bx  lr    
 8003b0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003b14:	08008f18 	.word	0x08008f18
  ldr  r0, =_sdata
 8003b18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b1c:	200009e8 	.word	0x200009e8
  ldr  r2, =_sbss
 8003b20:	200009e8 	.word	0x200009e8
  ldr  r3, = _ebss
 8003b24:	20003770 	.word	0x20003770

08003b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b28:	e7fe      	b.n	8003b28 <ADC_IRQHandler>
	...

08003b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b30:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <HAL_Init+0x40>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <HAL_Init+0x40>)
 8003b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_Init+0x40>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <HAL_Init+0x40>)
 8003b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <HAL_Init+0x40>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <HAL_Init+0x40>)
 8003b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b54:	2003      	movs	r0, #3
 8003b56:	f000 f94d 	bl	8003df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f000 f808 	bl	8003b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b60:	f7ff fdd0 	bl	8003704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023c00 	.word	0x40023c00

08003b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b78:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_InitTick+0x54>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_InitTick+0x58>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	4619      	mov	r1, r3
 8003b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f973 	bl	8003e7a <HAL_SYSTICK_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e00e      	b.n	8003bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b0f      	cmp	r3, #15
 8003ba2:	d80a      	bhi.n	8003bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bac:	f000 f92d 	bl	8003e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bb0:	4a06      	ldr	r2, [pc, #24]	; (8003bcc <HAL_InitTick+0x5c>)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e000      	b.n	8003bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000974 	.word	0x20000974
 8003bc8:	2000097c 	.word	0x2000097c
 8003bcc:	20000978 	.word	0x20000978

08003bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_IncTick+0x20>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_IncTick+0x24>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4413      	add	r3, r2
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <HAL_IncTick+0x24>)
 8003be2:	6013      	str	r3, [r2, #0]
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	2000097c 	.word	0x2000097c
 8003bf4:	20003768 	.word	0x20003768

08003bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <HAL_GetTick+0x14>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20003768 	.word	0x20003768

08003c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <__NVIC_SetPriorityGrouping+0x44>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c42:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <__NVIC_SetPriorityGrouping+0x44>)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	60d3      	str	r3, [r2, #12]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c5c:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <__NVIC_GetPriorityGrouping+0x18>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	0a1b      	lsrs	r3, r3, #8
 8003c62:	f003 0307 	and.w	r3, r3, #7
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	db0b      	blt.n	8003c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	f003 021f 	and.w	r2, r3, #31
 8003c8c:	4907      	ldr	r1, [pc, #28]	; (8003cac <__NVIC_EnableIRQ+0x38>)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	2001      	movs	r0, #1
 8003c96:	fa00 f202 	lsl.w	r2, r0, r2
 8003c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	e000e100 	.word	0xe000e100

08003cb0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	db10      	blt.n	8003ce4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	f003 021f 	and.w	r2, r3, #31
 8003cc8:	4909      	ldr	r1, [pc, #36]	; (8003cf0 <__NVIC_DisableIRQ+0x40>)
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd6:	3320      	adds	r3, #32
 8003cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003cdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ce0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000e100 	.word	0xe000e100

08003cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	6039      	str	r1, [r7, #0]
 8003cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	db0a      	blt.n	8003d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	490c      	ldr	r1, [pc, #48]	; (8003d40 <__NVIC_SetPriority+0x4c>)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	0112      	lsls	r2, r2, #4
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	440b      	add	r3, r1
 8003d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d1c:	e00a      	b.n	8003d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4908      	ldr	r1, [pc, #32]	; (8003d44 <__NVIC_SetPriority+0x50>)
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	3b04      	subs	r3, #4
 8003d2c:	0112      	lsls	r2, r2, #4
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	440b      	add	r3, r1
 8003d32:	761a      	strb	r2, [r3, #24]
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000e100 	.word	0xe000e100
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f1c3 0307 	rsb	r3, r3, #7
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	bf28      	it	cs
 8003d66:	2304      	movcs	r3, #4
 8003d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d902      	bls.n	8003d78 <NVIC_EncodePriority+0x30>
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3b03      	subs	r3, #3
 8003d76:	e000      	b.n	8003d7a <NVIC_EncodePriority+0x32>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43da      	mvns	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d90:	f04f 31ff 	mov.w	r1, #4294967295
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	43d9      	mvns	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da0:	4313      	orrs	r3, r2
         );
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3724      	adds	r7, #36	; 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc0:	d301      	bcc.n	8003dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e00f      	b.n	8003de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <SysTick_Config+0x40>)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dce:	210f      	movs	r1, #15
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	f7ff ff8e 	bl	8003cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <SysTick_Config+0x40>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dde:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <SysTick_Config+0x40>)
 8003de0:	2207      	movs	r2, #7
 8003de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	e000e010 	.word	0xe000e010

08003df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff07 	bl	8003c10 <__NVIC_SetPriorityGrouping>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e1c:	f7ff ff1c 	bl	8003c58 <__NVIC_GetPriorityGrouping>
 8003e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	6978      	ldr	r0, [r7, #20]
 8003e28:	f7ff ff8e 	bl	8003d48 <NVIC_EncodePriority>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff5d 	bl	8003cf4 <__NVIC_SetPriority>
}
 8003e3a:	bf00      	nop
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff0f 	bl	8003c74 <__NVIC_EnableIRQ>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff1f 	bl	8003cb0 <__NVIC_DisableIRQ>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff ff94 	bl	8003db0 <SysTick_Config>
 8003e88:	4603      	mov	r3, r0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e014      	b.n	8003ece <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	791b      	ldrb	r3, [r3, #4]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff fc4d 	bl	8003754 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	795b      	ldrb	r3, [r3, #5]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_DAC_Start_DMA+0x1e>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e08e      	b.n	8004014 <HAL_DAC_Start_DMA+0x13c>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2202      	movs	r2, #2
 8003f00:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d12a      	bne.n	8003f5e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a43      	ldr	r2, [pc, #268]	; (800401c <HAL_DAC_Start_DMA+0x144>)
 8003f0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a42      	ldr	r2, [pc, #264]	; (8004020 <HAL_DAC_Start_DMA+0x148>)
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4a41      	ldr	r2, [pc, #260]	; (8004024 <HAL_DAC_Start_DMA+0x14c>)
 8003f1e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f2e:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d009      	beq.n	8003f4a <HAL_DAC_Start_DMA+0x72>
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d00c      	beq.n	8003f54 <HAL_DAC_Start_DMA+0x7c>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d000      	beq.n	8003f40 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003f3e:	e039      	b.n	8003fb4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3308      	adds	r3, #8
 8003f46:	617b      	str	r3, [r7, #20]
        break;
 8003f48:	e034      	b.n	8003fb4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	617b      	str	r3, [r7, #20]
        break;
 8003f52:	e02f      	b.n	8003fb4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3310      	adds	r3, #16
 8003f5a:	617b      	str	r3, [r7, #20]
        break;
 8003f5c:	e02a      	b.n	8003fb4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4a31      	ldr	r2, [pc, #196]	; (8004028 <HAL_DAC_Start_DMA+0x150>)
 8003f64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	4a30      	ldr	r2, [pc, #192]	; (800402c <HAL_DAC_Start_DMA+0x154>)
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	4a2f      	ldr	r2, [pc, #188]	; (8004030 <HAL_DAC_Start_DMA+0x158>)
 8003f74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f84:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d009      	beq.n	8003fa0 <HAL_DAC_Start_DMA+0xc8>
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d00c      	beq.n	8003faa <HAL_DAC_Start_DMA+0xd2>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d000      	beq.n	8003f96 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003f94:	e00e      	b.n	8003fb4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3314      	adds	r3, #20
 8003f9c:	617b      	str	r3, [r7, #20]
        break;
 8003f9e:	e009      	b.n	8003fb4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3318      	adds	r3, #24
 8003fa6:	617b      	str	r3, [r7, #20]
        break;
 8003fa8:	e004      	b.n	8003fb4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	331c      	adds	r3, #28
 8003fb0:	617b      	str	r3, [r7, #20]
        break;
 8003fb2:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6898      	ldr	r0, [r3, #8]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	f000 fa12 	bl	80043fc <HAL_DMA_Start_IT>
 8003fd8:	e00e      	b.n	8003ff8 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003fe8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68d8      	ldr	r0, [r3, #12]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	f000 fa02 	bl	80043fc <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6819      	ldr	r1, [r3, #0]
 8003ffe:	2201      	movs	r2, #1
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	409a      	lsls	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	0800418d 	.word	0x0800418d
 8004020:	080041af 	.word	0x080041af
 8004024:	080041cb 	.word	0x080041cb
 8004028:	08004235 	.word	0x08004235
 800402c:	08004257 	.word	0x08004257
 8004030:	08004273 	.word	0x08004273

08004034 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6819      	ldr	r1, [r3, #0]
 8004048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43da      	mvns	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	400a      	ands	r2, r1
 800405a:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6819      	ldr	r1, [r3, #0]
 8004062:	2201      	movs	r2, #1
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43da      	mvns	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	400a      	ands	r2, r1
 8004072:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d107      	bne.n	800408a <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fa14 	bl	80044ac <HAL_DMA_Abort>
 8004084:	4603      	mov	r3, r0
 8004086:	73fb      	strb	r3, [r7, #15]
 8004088:	e006      	b.n	8004098 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fa0c 	bl	80044ac <HAL_DMA_Abort>
 8004094:	4603      	mov	r3, r0
 8004096:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2204      	movs	r2, #4
 80040a2:	711a      	strb	r2, [r3, #4]
 80040a4:	e002      	b.n	80040ac <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b087      	sub	sp, #28
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	795b      	ldrb	r3, [r3, #5]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_DAC_ConfigChannel+0x20>
 800410e:	2302      	movs	r3, #2
 8004110:	e036      	b.n	8004180 <HAL_DAC_ConfigChannel+0x8e>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2202      	movs	r2, #2
 800411c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004126:	f640 72fe 	movw	r2, #4094	; 0xffe
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4013      	ands	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	22c0      	movs	r2, #192	; 0xc0
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43da      	mvns	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	400a      	ands	r2, r1
 8004170:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7ff ff8b 	bl	80040b6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	711a      	strb	r2, [r3, #4]
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff ff84 	bl	80040ca <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f043 0204 	orr.w	r2, r3, #4
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff ff7a 	bl	80040de <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	711a      	strb	r2, [r3, #4]
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7ff ffd8 	bl	80041f8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	711a      	strb	r2, [r3, #4]
}
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f7ff ffd1 	bl	800420c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f043 0204 	orr.w	r2, r3, #4
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7ff ffc7 	bl	8004220 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	711a      	strb	r2, [r3, #4]
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042ac:	f7ff fca4 	bl	8003bf8 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e099      	b.n	80043f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042dc:	e00f      	b.n	80042fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042de:	f7ff fc8b 	bl	8003bf8 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	d908      	bls.n	80042fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2203      	movs	r2, #3
 80042f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e078      	b.n	80043f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e8      	bne.n	80042de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4b38      	ldr	r3, [pc, #224]	; (80043f8 <HAL_DMA_Init+0x158>)
 8004318:	4013      	ands	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800432a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	2b04      	cmp	r3, #4
 8004356:	d107      	bne.n	8004368 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	4313      	orrs	r3, r2
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b04      	cmp	r3, #4
 8004390:	d117      	bne.n	80043c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00e      	beq.n	80043c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fb01 	bl	80049ac <DMA_CheckFifoParam>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2240      	movs	r2, #64	; 0x40
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80043be:	2301      	movs	r3, #1
 80043c0:	e016      	b.n	80043f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fab8 	bl	8004940 <DMA_CalcBaseAndBitshift>
 80043d0:	4603      	mov	r3, r0
 80043d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	223f      	movs	r2, #63	; 0x3f
 80043da:	409a      	lsls	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	f010803f 	.word	0xf010803f

080043fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_DMA_Start_IT+0x26>
 800441e:	2302      	movs	r3, #2
 8004420:	e040      	b.n	80044a4 <HAL_DMA_Start_IT+0xa8>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b01      	cmp	r3, #1
 8004434:	d12f      	bne.n	8004496 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fa4a 	bl	80048e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004454:	223f      	movs	r2, #63	; 0x3f
 8004456:	409a      	lsls	r2, r3
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0216 	orr.w	r2, r2, #22
 800446a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0208 	orr.w	r2, r2, #8
 8004482:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e005      	b.n	80044a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800449e:	2302      	movs	r3, #2
 80044a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044ba:	f7ff fb9d 	bl	8003bf8 <HAL_GetTick>
 80044be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d008      	beq.n	80044de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2280      	movs	r2, #128	; 0x80
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e052      	b.n	8004584 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0216 	bic.w	r2, r2, #22
 80044ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <HAL_DMA_Abort+0x62>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0208 	bic.w	r2, r2, #8
 800451c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800452e:	e013      	b.n	8004558 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004530:	f7ff fb62 	bl	8003bf8 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b05      	cmp	r3, #5
 800453c:	d90c      	bls.n	8004558 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2203      	movs	r2, #3
 8004550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e015      	b.n	8004584 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e4      	bne.n	8004530 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456a:	223f      	movs	r2, #63	; 0x3f
 800456c:	409a      	lsls	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d004      	beq.n	80045aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2280      	movs	r2, #128	; 0x80
 80045a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e00c      	b.n	80045c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2205      	movs	r2, #5
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045dc:	4b92      	ldr	r3, [pc, #584]	; (8004828 <HAL_DMA_IRQHandler+0x258>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a92      	ldr	r2, [pc, #584]	; (800482c <HAL_DMA_IRQHandler+0x25c>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	0a9b      	lsrs	r3, r3, #10
 80045e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fa:	2208      	movs	r2, #8
 80045fc:	409a      	lsls	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01a      	beq.n	800463c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d013      	beq.n	800463c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0204 	bic.w	r2, r2, #4
 8004622:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	2208      	movs	r2, #8
 800462a:	409a      	lsls	r2, r3
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	f043 0201 	orr.w	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004640:	2201      	movs	r2, #1
 8004642:	409a      	lsls	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d012      	beq.n	8004672 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	2201      	movs	r2, #1
 8004660:	409a      	lsls	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	f043 0202 	orr.w	r2, r3, #2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	2204      	movs	r2, #4
 8004678:	409a      	lsls	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d012      	beq.n	80046a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00b      	beq.n	80046a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004694:	2204      	movs	r2, #4
 8004696:	409a      	lsls	r2, r3
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a0:	f043 0204 	orr.w	r2, r3, #4
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ac:	2210      	movs	r2, #16
 80046ae:	409a      	lsls	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d043      	beq.n	8004740 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d03c      	beq.n	8004740 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ca:	2210      	movs	r2, #16
 80046cc:	409a      	lsls	r2, r3
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d018      	beq.n	8004712 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d108      	bne.n	8004700 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d024      	beq.n	8004740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	4798      	blx	r3
 80046fe:	e01f      	b.n	8004740 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01b      	beq.n	8004740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
 8004710:	e016      	b.n	8004740 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d107      	bne.n	8004730 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0208 	bic.w	r2, r2, #8
 800472e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004744:	2220      	movs	r2, #32
 8004746:	409a      	lsls	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 808e 	beq.w	800486e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8086 	beq.w	800486e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004766:	2220      	movs	r2, #32
 8004768:	409a      	lsls	r2, r3
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b05      	cmp	r3, #5
 8004778:	d136      	bne.n	80047e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0216 	bic.w	r2, r2, #22
 8004788:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695a      	ldr	r2, [r3, #20]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004798:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d103      	bne.n	80047aa <HAL_DMA_IRQHandler+0x1da>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0208 	bic.w	r2, r2, #8
 80047b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	223f      	movs	r2, #63	; 0x3f
 80047c0:	409a      	lsls	r2, r3
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d07d      	beq.n	80048da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
        }
        return;
 80047e6:	e078      	b.n	80048da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01c      	beq.n	8004830 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d108      	bne.n	8004816 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004808:	2b00      	cmp	r3, #0
 800480a:	d030      	beq.n	800486e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	4798      	blx	r3
 8004814:	e02b      	b.n	800486e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d027      	beq.n	800486e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	4798      	blx	r3
 8004826:	e022      	b.n	800486e <HAL_DMA_IRQHandler+0x29e>
 8004828:	20000974 	.word	0x20000974
 800482c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10f      	bne.n	800485e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0210 	bic.w	r2, r2, #16
 800484c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	2b00      	cmp	r3, #0
 8004874:	d032      	beq.n	80048dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d022      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2205      	movs	r2, #5
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3301      	adds	r3, #1
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d307      	bcc.n	80048b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f2      	bne.n	800489a <HAL_DMA_IRQHandler+0x2ca>
 80048b4:	e000      	b.n	80048b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80048b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
 80048d8:	e000      	b.n	80048dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80048da:	bf00      	nop
    }
  }
}
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop

080048e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004900:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d108      	bne.n	8004924 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004922:	e007      	b.n	8004934 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	3b10      	subs	r3, #16
 8004950:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <DMA_CalcBaseAndBitshift+0x64>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800495a:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <DMA_CalcBaseAndBitshift+0x68>)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b03      	cmp	r3, #3
 800496c:	d909      	bls.n	8004982 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004976:	f023 0303 	bic.w	r3, r3, #3
 800497a:	1d1a      	adds	r2, r3, #4
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	659a      	str	r2, [r3, #88]	; 0x58
 8004980:	e007      	b.n	8004992 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	aaaaaaab 	.word	0xaaaaaaab
 80049a8:	08008e88 	.word	0x08008e88

080049ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d11f      	bne.n	8004a06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d855      	bhi.n	8004a78 <DMA_CheckFifoParam+0xcc>
 80049cc:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <DMA_CheckFifoParam+0x28>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	080049e5 	.word	0x080049e5
 80049d8:	080049f7 	.word	0x080049f7
 80049dc:	080049e5 	.word	0x080049e5
 80049e0:	08004a79 	.word	0x08004a79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d045      	beq.n	8004a7c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f4:	e042      	b.n	8004a7c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049fe:	d13f      	bne.n	8004a80 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a04:	e03c      	b.n	8004a80 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0e:	d121      	bne.n	8004a54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d836      	bhi.n	8004a84 <DMA_CheckFifoParam+0xd8>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <DMA_CheckFifoParam+0x70>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a2d 	.word	0x08004a2d
 8004a20:	08004a33 	.word	0x08004a33
 8004a24:	08004a2d 	.word	0x08004a2d
 8004a28:	08004a45 	.word	0x08004a45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a30:	e02f      	b.n	8004a92 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d024      	beq.n	8004a88 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a42:	e021      	b.n	8004a88 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a4c:	d11e      	bne.n	8004a8c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a52:	e01b      	b.n	8004a8c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d902      	bls.n	8004a60 <DMA_CheckFifoParam+0xb4>
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d003      	beq.n	8004a66 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a5e:	e018      	b.n	8004a92 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      break;
 8004a64:	e015      	b.n	8004a92 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00e      	beq.n	8004a90 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
      break;
 8004a76:	e00b      	b.n	8004a90 <DMA_CheckFifoParam+0xe4>
      break;
 8004a78:	bf00      	nop
 8004a7a:	e00a      	b.n	8004a92 <DMA_CheckFifoParam+0xe6>
      break;
 8004a7c:	bf00      	nop
 8004a7e:	e008      	b.n	8004a92 <DMA_CheckFifoParam+0xe6>
      break;
 8004a80:	bf00      	nop
 8004a82:	e006      	b.n	8004a92 <DMA_CheckFifoParam+0xe6>
      break;
 8004a84:	bf00      	nop
 8004a86:	e004      	b.n	8004a92 <DMA_CheckFifoParam+0xe6>
      break;
 8004a88:	bf00      	nop
 8004a8a:	e002      	b.n	8004a92 <DMA_CheckFifoParam+0xe6>
      break;   
 8004a8c:	bf00      	nop
 8004a8e:	e000      	b.n	8004a92 <DMA_CheckFifoParam+0xe6>
      break;
 8004a90:	bf00      	nop
    }
  } 
  
  return status; 
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b089      	sub	sp, #36	; 0x24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	e165      	b.n	8004d88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004abc:	2201      	movs	r2, #1
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4013      	ands	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	f040 8154 	bne.w	8004d82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d00b      	beq.n	8004afa <HAL_GPIO_Init+0x5a>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d007      	beq.n	8004afa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004aee:	2b11      	cmp	r3, #17
 8004af0:	d003      	beq.n	8004afa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b12      	cmp	r3, #18
 8004af8:	d130      	bne.n	8004b5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	2203      	movs	r2, #3
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b30:	2201      	movs	r2, #1
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 0201 	and.w	r2, r3, #1
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	2203      	movs	r2, #3
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d003      	beq.n	8004b9c <HAL_GPIO_Init+0xfc>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b12      	cmp	r3, #18
 8004b9a:	d123      	bne.n	8004be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	08da      	lsrs	r2, r3, #3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3208      	adds	r2, #8
 8004ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	220f      	movs	r2, #15
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	08da      	lsrs	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3208      	adds	r2, #8
 8004bde:	69b9      	ldr	r1, [r7, #24]
 8004be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	2203      	movs	r2, #3
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0203 	and.w	r2, r3, #3
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 80ae 	beq.w	8004d82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	4b5c      	ldr	r3, [pc, #368]	; (8004d9c <HAL_GPIO_Init+0x2fc>)
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	4a5b      	ldr	r2, [pc, #364]	; (8004d9c <HAL_GPIO_Init+0x2fc>)
 8004c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c34:	6453      	str	r3, [r2, #68]	; 0x44
 8004c36:	4b59      	ldr	r3, [pc, #356]	; (8004d9c <HAL_GPIO_Init+0x2fc>)
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c42:	4a57      	ldr	r2, [pc, #348]	; (8004da0 <HAL_GPIO_Init+0x300>)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	089b      	lsrs	r3, r3, #2
 8004c48:	3302      	adds	r3, #2
 8004c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	220f      	movs	r2, #15
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a4e      	ldr	r2, [pc, #312]	; (8004da4 <HAL_GPIO_Init+0x304>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d025      	beq.n	8004cba <HAL_GPIO_Init+0x21a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a4d      	ldr	r2, [pc, #308]	; (8004da8 <HAL_GPIO_Init+0x308>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01f      	beq.n	8004cb6 <HAL_GPIO_Init+0x216>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a4c      	ldr	r2, [pc, #304]	; (8004dac <HAL_GPIO_Init+0x30c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d019      	beq.n	8004cb2 <HAL_GPIO_Init+0x212>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a4b      	ldr	r2, [pc, #300]	; (8004db0 <HAL_GPIO_Init+0x310>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <HAL_GPIO_Init+0x20e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a4a      	ldr	r2, [pc, #296]	; (8004db4 <HAL_GPIO_Init+0x314>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00d      	beq.n	8004caa <HAL_GPIO_Init+0x20a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a49      	ldr	r2, [pc, #292]	; (8004db8 <HAL_GPIO_Init+0x318>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d007      	beq.n	8004ca6 <HAL_GPIO_Init+0x206>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a48      	ldr	r2, [pc, #288]	; (8004dbc <HAL_GPIO_Init+0x31c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d101      	bne.n	8004ca2 <HAL_GPIO_Init+0x202>
 8004c9e:	2306      	movs	r3, #6
 8004ca0:	e00c      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004ca2:	2307      	movs	r3, #7
 8004ca4:	e00a      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004ca6:	2305      	movs	r3, #5
 8004ca8:	e008      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004caa:	2304      	movs	r3, #4
 8004cac:	e006      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e004      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e002      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	f002 0203 	and.w	r2, r2, #3
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	4093      	lsls	r3, r2
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ccc:	4934      	ldr	r1, [pc, #208]	; (8004da0 <HAL_GPIO_Init+0x300>)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cda:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <HAL_GPIO_Init+0x320>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cfe:	4a30      	ldr	r2, [pc, #192]	; (8004dc0 <HAL_GPIO_Init+0x320>)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d04:	4b2e      	ldr	r3, [pc, #184]	; (8004dc0 <HAL_GPIO_Init+0x320>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d28:	4a25      	ldr	r2, [pc, #148]	; (8004dc0 <HAL_GPIO_Init+0x320>)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d2e:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <HAL_GPIO_Init+0x320>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d52:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <HAL_GPIO_Init+0x320>)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d58:	4b19      	ldr	r3, [pc, #100]	; (8004dc0 <HAL_GPIO_Init+0x320>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d7c:	4a10      	ldr	r2, [pc, #64]	; (8004dc0 <HAL_GPIO_Init+0x320>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b0f      	cmp	r3, #15
 8004d8c:	f67f ae96 	bls.w	8004abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d90:	bf00      	nop
 8004d92:	3724      	adds	r7, #36	; 0x24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40013800 	.word	0x40013800
 8004da4:	40020000 	.word	0x40020000
 8004da8:	40020400 	.word	0x40020400
 8004dac:	40020800 	.word	0x40020800
 8004db0:	40020c00 	.word	0x40020c00
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40021400 	.word	0x40021400
 8004dbc:	40021800 	.word	0x40021800
 8004dc0:	40013c00 	.word	0x40013c00

08004dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	807b      	strh	r3, [r7, #2]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dd4:	787b      	ldrb	r3, [r7, #1]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dda:	887a      	ldrh	r2, [r7, #2]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004de0:	e003      	b.n	8004dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004de2:	887b      	ldrh	r3, [r7, #2]
 8004de4:	041a      	lsls	r2, r3, #16
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	619a      	str	r2, [r3, #24]
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e02:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e04:	695a      	ldr	r2, [r3, #20]
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d006      	beq.n	8004e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e0e:	4a05      	ldr	r2, [pc, #20]	; (8004e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e10:	88fb      	ldrh	r3, [r7, #6]
 8004e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e14:	88fb      	ldrh	r3, [r7, #6]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe fc18 	bl	800364c <HAL_GPIO_EXTI_Callback>
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40013c00 	.word	0x40013c00

08004e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0cc      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e3c:	4b68      	ldr	r3, [pc, #416]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d90c      	bls.n	8004e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4a:	4b65      	ldr	r3, [pc, #404]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e52:	4b63      	ldr	r3, [pc, #396]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0b8      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d020      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e7c:	4b59      	ldr	r3, [pc, #356]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4a58      	ldr	r2, [pc, #352]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e94:	4b53      	ldr	r3, [pc, #332]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	4a52      	ldr	r2, [pc, #328]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea0:	4b50      	ldr	r3, [pc, #320]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	494d      	ldr	r1, [pc, #308]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d044      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec6:	4b47      	ldr	r3, [pc, #284]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d119      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e07f      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d003      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d107      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee6:	4b3f      	ldr	r3, [pc, #252]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e06f      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef6:	4b3b      	ldr	r3, [pc, #236]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e067      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f06:	4b37      	ldr	r3, [pc, #220]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f023 0203 	bic.w	r2, r3, #3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4934      	ldr	r1, [pc, #208]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f18:	f7fe fe6e 	bl	8003bf8 <HAL_GetTick>
 8004f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f20:	f7fe fe6a 	bl	8003bf8 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e04f      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f36:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 020c 	and.w	r2, r3, #12
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d1eb      	bne.n	8004f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f48:	4b25      	ldr	r3, [pc, #148]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d20c      	bcs.n	8004f70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b22      	ldr	r3, [pc, #136]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5e:	4b20      	ldr	r3, [pc, #128]	; (8004fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d001      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e032      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f7c:	4b19      	ldr	r3, [pc, #100]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4916      	ldr	r1, [pc, #88]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f9a:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	490e      	ldr	r1, [pc, #56]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fae:	f000 f855 	bl	800505c <HAL_RCC_GetSysClockFreq>
 8004fb2:	4601      	mov	r1, r0
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	4a0a      	ldr	r2, [pc, #40]	; (8004fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8004fc0:	5cd3      	ldrb	r3, [r2, r3]
 8004fc2:	fa21 f303 	lsr.w	r3, r1, r3
 8004fc6:	4a09      	ldr	r2, [pc, #36]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fca:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe fdce 	bl	8003b70 <HAL_InitTick>

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40023c00 	.word	0x40023c00
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	08008e70 	.word	0x08008e70
 8004fec:	20000974 	.word	0x20000974
 8004ff0:	20000978 	.word	0x20000978

08004ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ff8:	4b03      	ldr	r3, [pc, #12]	; (8005008 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000974 	.word	0x20000974

0800500c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005010:	f7ff fff0 	bl	8004ff4 <HAL_RCC_GetHCLKFreq>
 8005014:	4601      	mov	r1, r0
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	0a9b      	lsrs	r3, r3, #10
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	4a03      	ldr	r2, [pc, #12]	; (8005030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005022:	5cd3      	ldrb	r3, [r2, r3]
 8005024:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40023800 	.word	0x40023800
 8005030:	08008e80 	.word	0x08008e80

08005034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005038:	f7ff ffdc 	bl	8004ff4 <HAL_RCC_GetHCLKFreq>
 800503c:	4601      	mov	r1, r0
 800503e:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	0b5b      	lsrs	r3, r3, #13
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	4a03      	ldr	r2, [pc, #12]	; (8005058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800504a:	5cd3      	ldrb	r3, [r2, r3]
 800504c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40023800 	.word	0x40023800
 8005058:	08008e80 	.word	0x08008e80

0800505c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800505c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005076:	4bc6      	ldr	r3, [pc, #792]	; (8005390 <HAL_RCC_GetSysClockFreq+0x334>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 030c 	and.w	r3, r3, #12
 800507e:	2b0c      	cmp	r3, #12
 8005080:	f200 817e 	bhi.w	8005380 <HAL_RCC_GetSysClockFreq+0x324>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <HAL_RCC_GetSysClockFreq+0x30>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	080050c1 	.word	0x080050c1
 8005090:	08005381 	.word	0x08005381
 8005094:	08005381 	.word	0x08005381
 8005098:	08005381 	.word	0x08005381
 800509c:	080050c7 	.word	0x080050c7
 80050a0:	08005381 	.word	0x08005381
 80050a4:	08005381 	.word	0x08005381
 80050a8:	08005381 	.word	0x08005381
 80050ac:	080050cd 	.word	0x080050cd
 80050b0:	08005381 	.word	0x08005381
 80050b4:	08005381 	.word	0x08005381
 80050b8:	08005381 	.word	0x08005381
 80050bc:	08005229 	.word	0x08005229
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050c0:	4bb4      	ldr	r3, [pc, #720]	; (8005394 <HAL_RCC_GetSysClockFreq+0x338>)
 80050c2:	613b      	str	r3, [r7, #16]
       break;
 80050c4:	e15f      	b.n	8005386 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050c6:	4bb4      	ldr	r3, [pc, #720]	; (8005398 <HAL_RCC_GetSysClockFreq+0x33c>)
 80050c8:	613b      	str	r3, [r7, #16]
      break;
 80050ca:	e15c      	b.n	8005386 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050cc:	4bb0      	ldr	r3, [pc, #704]	; (8005390 <HAL_RCC_GetSysClockFreq+0x334>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050d6:	4bae      	ldr	r3, [pc, #696]	; (8005390 <HAL_RCC_GetSysClockFreq+0x334>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d04a      	beq.n	8005178 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e2:	4bab      	ldr	r3, [pc, #684]	; (8005390 <HAL_RCC_GetSysClockFreq+0x334>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	099b      	lsrs	r3, r3, #6
 80050e8:	f04f 0400 	mov.w	r4, #0
 80050ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	ea03 0501 	and.w	r5, r3, r1
 80050f8:	ea04 0602 	and.w	r6, r4, r2
 80050fc:	4629      	mov	r1, r5
 80050fe:	4632      	mov	r2, r6
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	f04f 0400 	mov.w	r4, #0
 8005108:	0154      	lsls	r4, r2, #5
 800510a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800510e:	014b      	lsls	r3, r1, #5
 8005110:	4619      	mov	r1, r3
 8005112:	4622      	mov	r2, r4
 8005114:	1b49      	subs	r1, r1, r5
 8005116:	eb62 0206 	sbc.w	r2, r2, r6
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	f04f 0400 	mov.w	r4, #0
 8005122:	0194      	lsls	r4, r2, #6
 8005124:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005128:	018b      	lsls	r3, r1, #6
 800512a:	1a5b      	subs	r3, r3, r1
 800512c:	eb64 0402 	sbc.w	r4, r4, r2
 8005130:	f04f 0100 	mov.w	r1, #0
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	00e2      	lsls	r2, r4, #3
 800513a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800513e:	00d9      	lsls	r1, r3, #3
 8005140:	460b      	mov	r3, r1
 8005142:	4614      	mov	r4, r2
 8005144:	195b      	adds	r3, r3, r5
 8005146:	eb44 0406 	adc.w	r4, r4, r6
 800514a:	f04f 0100 	mov.w	r1, #0
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	0262      	lsls	r2, r4, #9
 8005154:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005158:	0259      	lsls	r1, r3, #9
 800515a:	460b      	mov	r3, r1
 800515c:	4614      	mov	r4, r2
 800515e:	4618      	mov	r0, r3
 8005160:	4621      	mov	r1, r4
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f04f 0400 	mov.w	r4, #0
 8005168:	461a      	mov	r2, r3
 800516a:	4623      	mov	r3, r4
 800516c:	f7fb fd34 	bl	8000bd8 <__aeabi_uldivmod>
 8005170:	4603      	mov	r3, r0
 8005172:	460c      	mov	r4, r1
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	e049      	b.n	800520c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005178:	4b85      	ldr	r3, [pc, #532]	; (8005390 <HAL_RCC_GetSysClockFreq+0x334>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	099b      	lsrs	r3, r3, #6
 800517e:	f04f 0400 	mov.w	r4, #0
 8005182:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	ea03 0501 	and.w	r5, r3, r1
 800518e:	ea04 0602 	and.w	r6, r4, r2
 8005192:	4629      	mov	r1, r5
 8005194:	4632      	mov	r2, r6
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	f04f 0400 	mov.w	r4, #0
 800519e:	0154      	lsls	r4, r2, #5
 80051a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051a4:	014b      	lsls	r3, r1, #5
 80051a6:	4619      	mov	r1, r3
 80051a8:	4622      	mov	r2, r4
 80051aa:	1b49      	subs	r1, r1, r5
 80051ac:	eb62 0206 	sbc.w	r2, r2, r6
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	f04f 0400 	mov.w	r4, #0
 80051b8:	0194      	lsls	r4, r2, #6
 80051ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051be:	018b      	lsls	r3, r1, #6
 80051c0:	1a5b      	subs	r3, r3, r1
 80051c2:	eb64 0402 	sbc.w	r4, r4, r2
 80051c6:	f04f 0100 	mov.w	r1, #0
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	00e2      	lsls	r2, r4, #3
 80051d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051d4:	00d9      	lsls	r1, r3, #3
 80051d6:	460b      	mov	r3, r1
 80051d8:	4614      	mov	r4, r2
 80051da:	195b      	adds	r3, r3, r5
 80051dc:	eb44 0406 	adc.w	r4, r4, r6
 80051e0:	f04f 0100 	mov.w	r1, #0
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	02a2      	lsls	r2, r4, #10
 80051ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051ee:	0299      	lsls	r1, r3, #10
 80051f0:	460b      	mov	r3, r1
 80051f2:	4614      	mov	r4, r2
 80051f4:	4618      	mov	r0, r3
 80051f6:	4621      	mov	r1, r4
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f04f 0400 	mov.w	r4, #0
 80051fe:	461a      	mov	r2, r3
 8005200:	4623      	mov	r3, r4
 8005202:	f7fb fce9 	bl	8000bd8 <__aeabi_uldivmod>
 8005206:	4603      	mov	r3, r0
 8005208:	460c      	mov	r4, r1
 800520a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800520c:	4b60      	ldr	r3, [pc, #384]	; (8005390 <HAL_RCC_GetSysClockFreq+0x334>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	0c1b      	lsrs	r3, r3, #16
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	3301      	adds	r3, #1
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	613b      	str	r3, [r7, #16]
      break;
 8005226:	e0ae      	b.n	8005386 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005228:	4b59      	ldr	r3, [pc, #356]	; (8005390 <HAL_RCC_GetSysClockFreq+0x334>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005230:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005232:	4b57      	ldr	r3, [pc, #348]	; (8005390 <HAL_RCC_GetSysClockFreq+0x334>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d04a      	beq.n	80052d4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800523e:	4b54      	ldr	r3, [pc, #336]	; (8005390 <HAL_RCC_GetSysClockFreq+0x334>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	099b      	lsrs	r3, r3, #6
 8005244:	f04f 0400 	mov.w	r4, #0
 8005248:	f240 11ff 	movw	r1, #511	; 0x1ff
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	ea03 0501 	and.w	r5, r3, r1
 8005254:	ea04 0602 	and.w	r6, r4, r2
 8005258:	4629      	mov	r1, r5
 800525a:	4632      	mov	r2, r6
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	f04f 0400 	mov.w	r4, #0
 8005264:	0154      	lsls	r4, r2, #5
 8005266:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800526a:	014b      	lsls	r3, r1, #5
 800526c:	4619      	mov	r1, r3
 800526e:	4622      	mov	r2, r4
 8005270:	1b49      	subs	r1, r1, r5
 8005272:	eb62 0206 	sbc.w	r2, r2, r6
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	f04f 0400 	mov.w	r4, #0
 800527e:	0194      	lsls	r4, r2, #6
 8005280:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005284:	018b      	lsls	r3, r1, #6
 8005286:	1a5b      	subs	r3, r3, r1
 8005288:	eb64 0402 	sbc.w	r4, r4, r2
 800528c:	f04f 0100 	mov.w	r1, #0
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	00e2      	lsls	r2, r4, #3
 8005296:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800529a:	00d9      	lsls	r1, r3, #3
 800529c:	460b      	mov	r3, r1
 800529e:	4614      	mov	r4, r2
 80052a0:	195b      	adds	r3, r3, r5
 80052a2:	eb44 0406 	adc.w	r4, r4, r6
 80052a6:	f04f 0100 	mov.w	r1, #0
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	0262      	lsls	r2, r4, #9
 80052b0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80052b4:	0259      	lsls	r1, r3, #9
 80052b6:	460b      	mov	r3, r1
 80052b8:	4614      	mov	r4, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	4621      	mov	r1, r4
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f04f 0400 	mov.w	r4, #0
 80052c4:	461a      	mov	r2, r3
 80052c6:	4623      	mov	r3, r4
 80052c8:	f7fb fc86 	bl	8000bd8 <__aeabi_uldivmod>
 80052cc:	4603      	mov	r3, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	e049      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d4:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <HAL_RCC_GetSysClockFreq+0x334>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	099b      	lsrs	r3, r3, #6
 80052da:	f04f 0400 	mov.w	r4, #0
 80052de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	ea03 0501 	and.w	r5, r3, r1
 80052ea:	ea04 0602 	and.w	r6, r4, r2
 80052ee:	4629      	mov	r1, r5
 80052f0:	4632      	mov	r2, r6
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	f04f 0400 	mov.w	r4, #0
 80052fa:	0154      	lsls	r4, r2, #5
 80052fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005300:	014b      	lsls	r3, r1, #5
 8005302:	4619      	mov	r1, r3
 8005304:	4622      	mov	r2, r4
 8005306:	1b49      	subs	r1, r1, r5
 8005308:	eb62 0206 	sbc.w	r2, r2, r6
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	f04f 0400 	mov.w	r4, #0
 8005314:	0194      	lsls	r4, r2, #6
 8005316:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800531a:	018b      	lsls	r3, r1, #6
 800531c:	1a5b      	subs	r3, r3, r1
 800531e:	eb64 0402 	sbc.w	r4, r4, r2
 8005322:	f04f 0100 	mov.w	r1, #0
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	00e2      	lsls	r2, r4, #3
 800532c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005330:	00d9      	lsls	r1, r3, #3
 8005332:	460b      	mov	r3, r1
 8005334:	4614      	mov	r4, r2
 8005336:	195b      	adds	r3, r3, r5
 8005338:	eb44 0406 	adc.w	r4, r4, r6
 800533c:	f04f 0100 	mov.w	r1, #0
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	02a2      	lsls	r2, r4, #10
 8005346:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800534a:	0299      	lsls	r1, r3, #10
 800534c:	460b      	mov	r3, r1
 800534e:	4614      	mov	r4, r2
 8005350:	4618      	mov	r0, r3
 8005352:	4621      	mov	r1, r4
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f04f 0400 	mov.w	r4, #0
 800535a:	461a      	mov	r2, r3
 800535c:	4623      	mov	r3, r4
 800535e:	f7fb fc3b 	bl	8000bd8 <__aeabi_uldivmod>
 8005362:	4603      	mov	r3, r0
 8005364:	460c      	mov	r4, r1
 8005366:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005368:	4b09      	ldr	r3, [pc, #36]	; (8005390 <HAL_RCC_GetSysClockFreq+0x334>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	0f1b      	lsrs	r3, r3, #28
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	fbb2 f3f3 	udiv	r3, r2, r3
 800537c:	613b      	str	r3, [r7, #16]
      break;
 800537e:	e002      	b.n	8005386 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <HAL_RCC_GetSysClockFreq+0x338>)
 8005382:	613b      	str	r3, [r7, #16]
      break;
 8005384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005386:	693b      	ldr	r3, [r7, #16]
}
 8005388:	4618      	mov	r0, r3
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005390:	40023800 	.word	0x40023800
 8005394:	00f42400 	.word	0x00f42400
 8005398:	007a1200 	.word	0x007a1200

0800539c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8083 	beq.w	80054bc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053b6:	4b95      	ldr	r3, [pc, #596]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d019      	beq.n	80053f6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053c2:	4b92      	ldr	r3, [pc, #584]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d106      	bne.n	80053dc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053ce:	4b8f      	ldr	r3, [pc, #572]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053da:	d00c      	beq.n	80053f6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053dc:	4b8b      	ldr	r3, [pc, #556]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053e4:	2b0c      	cmp	r3, #12
 80053e6:	d112      	bne.n	800540e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e8:	4b88      	ldr	r3, [pc, #544]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f4:	d10b      	bne.n	800540e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f6:	4b85      	ldr	r3, [pc, #532]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d05b      	beq.n	80054ba <HAL_RCC_OscConfig+0x11e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d157      	bne.n	80054ba <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e216      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005416:	d106      	bne.n	8005426 <HAL_RCC_OscConfig+0x8a>
 8005418:	4b7c      	ldr	r3, [pc, #496]	; (800560c <HAL_RCC_OscConfig+0x270>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a7b      	ldr	r2, [pc, #492]	; (800560c <HAL_RCC_OscConfig+0x270>)
 800541e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	e01d      	b.n	8005462 <HAL_RCC_OscConfig+0xc6>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800542e:	d10c      	bne.n	800544a <HAL_RCC_OscConfig+0xae>
 8005430:	4b76      	ldr	r3, [pc, #472]	; (800560c <HAL_RCC_OscConfig+0x270>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a75      	ldr	r2, [pc, #468]	; (800560c <HAL_RCC_OscConfig+0x270>)
 8005436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	4b73      	ldr	r3, [pc, #460]	; (800560c <HAL_RCC_OscConfig+0x270>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a72      	ldr	r2, [pc, #456]	; (800560c <HAL_RCC_OscConfig+0x270>)
 8005442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e00b      	b.n	8005462 <HAL_RCC_OscConfig+0xc6>
 800544a:	4b70      	ldr	r3, [pc, #448]	; (800560c <HAL_RCC_OscConfig+0x270>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a6f      	ldr	r2, [pc, #444]	; (800560c <HAL_RCC_OscConfig+0x270>)
 8005450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b6d      	ldr	r3, [pc, #436]	; (800560c <HAL_RCC_OscConfig+0x270>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a6c      	ldr	r2, [pc, #432]	; (800560c <HAL_RCC_OscConfig+0x270>)
 800545c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005460:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d013      	beq.n	8005492 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546a:	f7fe fbc5 	bl	8003bf8 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005472:	f7fe fbc1 	bl	8003bf8 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b64      	cmp	r3, #100	; 0x64
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e1db      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005484:	4b61      	ldr	r3, [pc, #388]	; (800560c <HAL_RCC_OscConfig+0x270>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0f0      	beq.n	8005472 <HAL_RCC_OscConfig+0xd6>
 8005490:	e014      	b.n	80054bc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005492:	f7fe fbb1 	bl	8003bf8 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800549a:	f7fe fbad 	bl	8003bf8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b64      	cmp	r3, #100	; 0x64
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e1c7      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ac:	4b57      	ldr	r3, [pc, #348]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f0      	bne.n	800549a <HAL_RCC_OscConfig+0xfe>
 80054b8:	e000      	b.n	80054bc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d06f      	beq.n	80055a8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054c8:	4b50      	ldr	r3, [pc, #320]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 030c 	and.w	r3, r3, #12
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d017      	beq.n	8005504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054d4:	4b4d      	ldr	r3, [pc, #308]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d105      	bne.n	80054ec <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054e0:	4b4a      	ldr	r3, [pc, #296]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00b      	beq.n	8005504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ec:	4b47      	ldr	r3, [pc, #284]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	d11c      	bne.n	8005532 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054f8:	4b44      	ldr	r3, [pc, #272]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d116      	bne.n	8005532 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005504:	4b41      	ldr	r3, [pc, #260]	; (800560c <HAL_RCC_OscConfig+0x270>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_OscConfig+0x180>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d001      	beq.n	800551c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e18f      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551c:	4b3b      	ldr	r3, [pc, #236]	; (800560c <HAL_RCC_OscConfig+0x270>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4938      	ldr	r1, [pc, #224]	; (800560c <HAL_RCC_OscConfig+0x270>)
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005530:	e03a      	b.n	80055a8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d020      	beq.n	800557c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800553a:	4b35      	ldr	r3, [pc, #212]	; (8005610 <HAL_RCC_OscConfig+0x274>)
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fe fb5a 	bl	8003bf8 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005548:	f7fe fb56 	bl	8003bf8 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e170      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555a:	4b2c      	ldr	r3, [pc, #176]	; (800560c <HAL_RCC_OscConfig+0x270>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <HAL_RCC_OscConfig+0x270>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	4925      	ldr	r1, [pc, #148]	; (800560c <HAL_RCC_OscConfig+0x270>)
 8005576:	4313      	orrs	r3, r2
 8005578:	600b      	str	r3, [r1, #0]
 800557a:	e015      	b.n	80055a8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800557c:	4b24      	ldr	r3, [pc, #144]	; (8005610 <HAL_RCC_OscConfig+0x274>)
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005582:	f7fe fb39 	bl	8003bf8 <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800558a:	f7fe fb35 	bl	8003bf8 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e14f      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559c:	4b1b      	ldr	r3, [pc, #108]	; (800560c <HAL_RCC_OscConfig+0x270>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f0      	bne.n	800558a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d037      	beq.n	8005624 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d016      	beq.n	80055ea <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055bc:	4b15      	ldr	r3, [pc, #84]	; (8005614 <HAL_RCC_OscConfig+0x278>)
 80055be:	2201      	movs	r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c2:	f7fe fb19 	bl	8003bf8 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ca:	f7fe fb15 	bl	8003bf8 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e12f      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <HAL_RCC_OscConfig+0x270>)
 80055de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <HAL_RCC_OscConfig+0x22e>
 80055e8:	e01c      	b.n	8005624 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ea:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <HAL_RCC_OscConfig+0x278>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fe fb02 	bl	8003bf8 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f6:	e00f      	b.n	8005618 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055f8:	f7fe fafe 	bl	8003bf8 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d908      	bls.n	8005618 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e118      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
 800560a:	bf00      	nop
 800560c:	40023800 	.word	0x40023800
 8005610:	42470000 	.word	0x42470000
 8005614:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005618:	4b8a      	ldr	r3, [pc, #552]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 800561a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e9      	bne.n	80055f8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8097 	beq.w	8005760 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005632:	2300      	movs	r3, #0
 8005634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005636:	4b83      	ldr	r3, [pc, #524]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10f      	bne.n	8005662 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	4b7f      	ldr	r3, [pc, #508]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	4a7e      	ldr	r2, [pc, #504]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 800564c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005650:	6413      	str	r3, [r2, #64]	; 0x40
 8005652:	4b7c      	ldr	r3, [pc, #496]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005662:	4b79      	ldr	r3, [pc, #484]	; (8005848 <HAL_RCC_OscConfig+0x4ac>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d118      	bne.n	80056a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800566e:	4b76      	ldr	r3, [pc, #472]	; (8005848 <HAL_RCC_OscConfig+0x4ac>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a75      	ldr	r2, [pc, #468]	; (8005848 <HAL_RCC_OscConfig+0x4ac>)
 8005674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800567a:	f7fe fabd 	bl	8003bf8 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005682:	f7fe fab9 	bl	8003bf8 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e0d3      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005694:	4b6c      	ldr	r3, [pc, #432]	; (8005848 <HAL_RCC_OscConfig+0x4ac>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d106      	bne.n	80056b6 <HAL_RCC_OscConfig+0x31a>
 80056a8:	4b66      	ldr	r3, [pc, #408]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	4a65      	ldr	r2, [pc, #404]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	6713      	str	r3, [r2, #112]	; 0x70
 80056b4:	e01c      	b.n	80056f0 <HAL_RCC_OscConfig+0x354>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b05      	cmp	r3, #5
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCC_OscConfig+0x33c>
 80056be:	4b61      	ldr	r3, [pc, #388]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	4a60      	ldr	r2, [pc, #384]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80056c4:	f043 0304 	orr.w	r3, r3, #4
 80056c8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ca:	4b5e      	ldr	r3, [pc, #376]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	4a5d      	ldr	r2, [pc, #372]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	6713      	str	r3, [r2, #112]	; 0x70
 80056d6:	e00b      	b.n	80056f0 <HAL_RCC_OscConfig+0x354>
 80056d8:	4b5a      	ldr	r3, [pc, #360]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	4a59      	ldr	r2, [pc, #356]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	6713      	str	r3, [r2, #112]	; 0x70
 80056e4:	4b57      	ldr	r3, [pc, #348]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	4a56      	ldr	r2, [pc, #344]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80056ea:	f023 0304 	bic.w	r3, r3, #4
 80056ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d015      	beq.n	8005724 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f8:	f7fe fa7e 	bl	8003bf8 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fe:	e00a      	b.n	8005716 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005700:	f7fe fa7a 	bl	8003bf8 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	f241 3288 	movw	r2, #5000	; 0x1388
 800570e:	4293      	cmp	r3, r2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e092      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005716:	4b4b      	ldr	r3, [pc, #300]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0ee      	beq.n	8005700 <HAL_RCC_OscConfig+0x364>
 8005722:	e014      	b.n	800574e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005724:	f7fe fa68 	bl	8003bf8 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800572a:	e00a      	b.n	8005742 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800572c:	f7fe fa64 	bl	8003bf8 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	f241 3288 	movw	r2, #5000	; 0x1388
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e07c      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005742:	4b40      	ldr	r3, [pc, #256]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1ee      	bne.n	800572c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d105      	bne.n	8005760 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005754:	4b3b      	ldr	r3, [pc, #236]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	4a3a      	ldr	r2, [pc, #232]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 800575a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d068      	beq.n	800583a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005768:	4b36      	ldr	r3, [pc, #216]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 030c 	and.w	r3, r3, #12
 8005770:	2b08      	cmp	r3, #8
 8005772:	d060      	beq.n	8005836 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2b02      	cmp	r3, #2
 800577a:	d145      	bne.n	8005808 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800577c:	4b33      	ldr	r3, [pc, #204]	; (800584c <HAL_RCC_OscConfig+0x4b0>)
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005782:	f7fe fa39 	bl	8003bf8 <HAL_GetTick>
 8005786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005788:	e008      	b.n	800579c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800578a:	f7fe fa35 	bl	8003bf8 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e04f      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579c:	4b29      	ldr	r3, [pc, #164]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1f0      	bne.n	800578a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	019b      	lsls	r3, r3, #6
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	3b01      	subs	r3, #1
 80057c2:	041b      	lsls	r3, r3, #16
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	061b      	lsls	r3, r3, #24
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	071b      	lsls	r3, r3, #28
 80057d4:	491b      	ldr	r1, [pc, #108]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057da:	4b1c      	ldr	r3, [pc, #112]	; (800584c <HAL_RCC_OscConfig+0x4b0>)
 80057dc:	2201      	movs	r2, #1
 80057de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e0:	f7fe fa0a 	bl	8003bf8 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e8:	f7fe fa06 	bl	8003bf8 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e020      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057fa:	4b12      	ldr	r3, [pc, #72]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0x44c>
 8005806:	e018      	b.n	800583a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005808:	4b10      	ldr	r3, [pc, #64]	; (800584c <HAL_RCC_OscConfig+0x4b0>)
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580e:	f7fe f9f3 	bl	8003bf8 <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005814:	e008      	b.n	8005828 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005816:	f7fe f9ef 	bl	8003bf8 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e009      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005828:	4b06      	ldr	r3, [pc, #24]	; (8005844 <HAL_RCC_OscConfig+0x4a8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1f0      	bne.n	8005816 <HAL_RCC_OscConfig+0x47a>
 8005834:	e001      	b.n	800583a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40023800 	.word	0x40023800
 8005848:	40007000 	.word	0x40007000
 800584c:	42470060 	.word	0x42470060

08005850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e01d      	b.n	800589e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fd ffe4 	bl	8003844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 fa64 	bl	8005d5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b06      	cmp	r3, #6
 80058c6:	d007      	beq.n	80058d8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2202      	movs	r2, #2
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a1a      	ldr	r2, [r3, #32]
 8005904:	f241 1311 	movw	r3, #4369	; 0x1111
 8005908:	4013      	ands	r3, r2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10f      	bne.n	800592e <HAL_TIM_Base_Stop+0x40>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6a1a      	ldr	r2, [r3, #32]
 8005914:	f240 4344 	movw	r3, #1092	; 0x444
 8005918:	4013      	ands	r3, r2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d107      	bne.n	800592e <HAL_TIM_Base_Stop+0x40>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0201 	bic.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b06      	cmp	r3, #6
 800596c:	d007      	beq.n	800597e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0201 	orr.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d122      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d11b      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0202 	mvn.w	r2, #2
 80059b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f9a5 	bl	8005d1e <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f997 	bl	8005d0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f9a8 	bl	8005d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d122      	bne.n	8005a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d11b      	bne.n	8005a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0204 	mvn.w	r2, #4
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2202      	movs	r2, #2
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f97b 	bl	8005d1e <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f96d 	bl	8005d0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f97e 	bl	8005d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d122      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d11b      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0208 	mvn.w	r2, #8
 8005a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2204      	movs	r2, #4
 8005a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f951 	bl	8005d1e <HAL_TIM_IC_CaptureCallback>
 8005a7c:	e005      	b.n	8005a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f943 	bl	8005d0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f954 	bl	8005d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d122      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d11b      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0210 	mvn.w	r2, #16
 8005ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2208      	movs	r2, #8
 8005aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f927 	bl	8005d1e <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f919 	bl	8005d0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f92a 	bl	8005d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d10e      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d107      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0201 	mvn.w	r2, #1
 8005b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fd fd8c 	bl	8003628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1a:	2b80      	cmp	r3, #128	; 0x80
 8005b1c:	d10e      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b28:	2b80      	cmp	r3, #128	; 0x80
 8005b2a:	d107      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fad0 	bl	80060dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d10e      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b40      	cmp	r3, #64	; 0x40
 8005b56:	d107      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f8ef 	bl	8005d46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d10e      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d107      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0220 	mvn.w	r2, #32
 8005b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fa9a 	bl	80060c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_TIM_ConfigClockSource+0x18>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e0a6      	b.n	8005d02 <HAL_TIM_ConfigClockSource+0x166>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b40      	cmp	r3, #64	; 0x40
 8005bea:	d067      	beq.n	8005cbc <HAL_TIM_ConfigClockSource+0x120>
 8005bec:	2b40      	cmp	r3, #64	; 0x40
 8005bee:	d80b      	bhi.n	8005c08 <HAL_TIM_ConfigClockSource+0x6c>
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	d073      	beq.n	8005cdc <HAL_TIM_ConfigClockSource+0x140>
 8005bf4:	2b10      	cmp	r3, #16
 8005bf6:	d802      	bhi.n	8005bfe <HAL_TIM_ConfigClockSource+0x62>
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d06f      	beq.n	8005cdc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005bfc:	e078      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d06c      	beq.n	8005cdc <HAL_TIM_ConfigClockSource+0x140>
 8005c02:	2b30      	cmp	r3, #48	; 0x30
 8005c04:	d06a      	beq.n	8005cdc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005c06:	e073      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c08:	2b70      	cmp	r3, #112	; 0x70
 8005c0a:	d00d      	beq.n	8005c28 <HAL_TIM_ConfigClockSource+0x8c>
 8005c0c:	2b70      	cmp	r3, #112	; 0x70
 8005c0e:	d804      	bhi.n	8005c1a <HAL_TIM_ConfigClockSource+0x7e>
 8005c10:	2b50      	cmp	r3, #80	; 0x50
 8005c12:	d033      	beq.n	8005c7c <HAL_TIM_ConfigClockSource+0xe0>
 8005c14:	2b60      	cmp	r3, #96	; 0x60
 8005c16:	d041      	beq.n	8005c9c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005c18:	e06a      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1e:	d066      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x152>
 8005c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c24:	d017      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005c26:	e063      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	6899      	ldr	r1, [r3, #8]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f000 f9aa 	bl	8005f90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]
      break;
 8005c54:	e04c      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6899      	ldr	r1, [r3, #8]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f000 f993 	bl	8005f90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c78:	609a      	str	r2, [r3, #8]
      break;
 8005c7a:	e039      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	6859      	ldr	r1, [r3, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f000 f907 	bl	8005e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2150      	movs	r1, #80	; 0x50
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 f960 	bl	8005f5a <TIM_ITRx_SetConfig>
      break;
 8005c9a:	e029      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	6859      	ldr	r1, [r3, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	f000 f926 	bl	8005efa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2160      	movs	r1, #96	; 0x60
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 f950 	bl	8005f5a <TIM_ITRx_SetConfig>
      break;
 8005cba:	e019      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	6859      	ldr	r1, [r3, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f000 f8e7 	bl	8005e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2140      	movs	r1, #64	; 0x40
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 f940 	bl	8005f5a <TIM_ITRx_SetConfig>
      break;
 8005cda:	e009      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f000 f937 	bl	8005f5a <TIM_ITRx_SetConfig>
      break;
 8005cec:	e000      	b.n	8005cf0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005cee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a40      	ldr	r2, [pc, #256]	; (8005e70 <TIM_Base_SetConfig+0x114>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d013      	beq.n	8005d9c <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7a:	d00f      	beq.n	8005d9c <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3d      	ldr	r2, [pc, #244]	; (8005e74 <TIM_Base_SetConfig+0x118>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00b      	beq.n	8005d9c <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3c      	ldr	r2, [pc, #240]	; (8005e78 <TIM_Base_SetConfig+0x11c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d007      	beq.n	8005d9c <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a3b      	ldr	r2, [pc, #236]	; (8005e7c <TIM_Base_SetConfig+0x120>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_Base_SetConfig+0x40>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a3a      	ldr	r2, [pc, #232]	; (8005e80 <TIM_Base_SetConfig+0x124>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d108      	bne.n	8005dae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a2f      	ldr	r2, [pc, #188]	; (8005e70 <TIM_Base_SetConfig+0x114>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d02b      	beq.n	8005e0e <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dbc:	d027      	beq.n	8005e0e <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2c      	ldr	r2, [pc, #176]	; (8005e74 <TIM_Base_SetConfig+0x118>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d023      	beq.n	8005e0e <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2b      	ldr	r2, [pc, #172]	; (8005e78 <TIM_Base_SetConfig+0x11c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d01f      	beq.n	8005e0e <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <TIM_Base_SetConfig+0x120>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d01b      	beq.n	8005e0e <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a29      	ldr	r2, [pc, #164]	; (8005e80 <TIM_Base_SetConfig+0x124>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d017      	beq.n	8005e0e <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a28      	ldr	r2, [pc, #160]	; (8005e84 <TIM_Base_SetConfig+0x128>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a27      	ldr	r2, [pc, #156]	; (8005e88 <TIM_Base_SetConfig+0x12c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00f      	beq.n	8005e0e <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a26      	ldr	r2, [pc, #152]	; (8005e8c <TIM_Base_SetConfig+0x130>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00b      	beq.n	8005e0e <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a25      	ldr	r2, [pc, #148]	; (8005e90 <TIM_Base_SetConfig+0x134>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d007      	beq.n	8005e0e <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a24      	ldr	r2, [pc, #144]	; (8005e94 <TIM_Base_SetConfig+0x138>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d003      	beq.n	8005e0e <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a23      	ldr	r2, [pc, #140]	; (8005e98 <TIM_Base_SetConfig+0x13c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d108      	bne.n	8005e20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <TIM_Base_SetConfig+0x114>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d003      	beq.n	8005e54 <TIM_Base_SetConfig+0xf8>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a0c      	ldr	r2, [pc, #48]	; (8005e80 <TIM_Base_SetConfig+0x124>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d103      	bne.n	8005e5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	615a      	str	r2, [r3, #20]
}
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40010000 	.word	0x40010000
 8005e74:	40000400 	.word	0x40000400
 8005e78:	40000800 	.word	0x40000800
 8005e7c:	40000c00 	.word	0x40000c00
 8005e80:	40010400 	.word	0x40010400
 8005e84:	40014000 	.word	0x40014000
 8005e88:	40014400 	.word	0x40014400
 8005e8c:	40014800 	.word	0x40014800
 8005e90:	40001800 	.word	0x40001800
 8005e94:	40001c00 	.word	0x40001c00
 8005e98:	40002000 	.word	0x40002000

08005e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f023 0201 	bic.w	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f023 030a 	bic.w	r3, r3, #10
 8005ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	621a      	str	r2, [r3, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b087      	sub	sp, #28
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f023 0210 	bic.w	r2, r3, #16
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	031b      	lsls	r3, r3, #12
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b085      	sub	sp, #20
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f043 0307 	orr.w	r3, r3, #7
 8005f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	609a      	str	r2, [r3, #8]
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	021a      	lsls	r2, r3, #8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	609a      	str	r2, [r3, #8]
}
 8005fc4:	bf00      	nop
 8005fc6:	371c      	adds	r7, #28
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e05a      	b.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a21      	ldr	r2, [pc, #132]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d022      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006034:	d01d      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1d      	ldr	r2, [pc, #116]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d018      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d013      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1a      	ldr	r2, [pc, #104]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00e      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a18      	ldr	r2, [pc, #96]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d009      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a17      	ldr	r2, [pc, #92]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d004      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10c      	bne.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4313      	orrs	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40010000 	.word	0x40010000
 80060b0:	40000400 	.word	0x40000400
 80060b4:	40000800 	.word	0x40000800
 80060b8:	40000c00 	.word	0x40000c00
 80060bc:	40010400 	.word	0x40010400
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40001800 	.word	0x40001800

080060c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e03f      	b.n	8006182 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fd fbe6 	bl	80038e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2224      	movs	r2, #36	; 0x24
 8006120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fb97 	bl	8006868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b088      	sub	sp, #32
 800618e:	af02      	add	r7, sp, #8
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	4613      	mov	r3, r2
 8006198:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	f040 8083 	bne.w	80062b2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_UART_Transmit+0x2e>
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e07b      	b.n	80062b4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d101      	bne.n	80061ca <HAL_UART_Transmit+0x40>
 80061c6:	2302      	movs	r3, #2
 80061c8:	e074      	b.n	80062b4 <HAL_UART_Transmit+0x12a>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2221      	movs	r2, #33	; 0x21
 80061dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80061e0:	f7fd fd0a 	bl	8003bf8 <HAL_GetTick>
 80061e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	88fa      	ldrh	r2, [r7, #6]
 80061ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	88fa      	ldrh	r2, [r7, #6]
 80061f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80061fa:	e042      	b.n	8006282 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	d122      	bne.n	800625a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2200      	movs	r2, #0
 800621c:	2180      	movs	r1, #128	; 0x80
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f9b6 	bl	8006590 <UART_WaitOnFlagUntilTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e042      	b.n	80062b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006240:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d103      	bne.n	8006252 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	3302      	adds	r3, #2
 800624e:	60bb      	str	r3, [r7, #8]
 8006250:	e017      	b.n	8006282 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	3301      	adds	r3, #1
 8006256:	60bb      	str	r3, [r7, #8]
 8006258:	e013      	b.n	8006282 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2200      	movs	r2, #0
 8006262:	2180      	movs	r1, #128	; 0x80
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f993 	bl	8006590 <UART_WaitOnFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e01f      	b.n	80062b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	60ba      	str	r2, [r7, #8]
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1b7      	bne.n	80061fc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2200      	movs	r2, #0
 8006294:	2140      	movs	r1, #64	; 0x40
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 f97a 	bl	8006590 <UART_WaitOnFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e006      	b.n	80062b4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e000      	b.n	80062b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80062b2:	2302      	movs	r3, #2
  }
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	4613      	mov	r3, r2
 80062c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d140      	bne.n	8006358 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <HAL_UART_Receive_IT+0x26>
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e039      	b.n	800635a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_UART_Receive_IT+0x38>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e032      	b.n	800635a <HAL_UART_Receive_IT+0x9e>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	88fa      	ldrh	r2, [r7, #6]
 8006306:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	88fa      	ldrh	r2, [r7, #6]
 800630c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2222      	movs	r2, #34	; 0x22
 8006318:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006332:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695a      	ldr	r2, [r3, #20]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0220 	orr.w	r2, r2, #32
 8006352:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e000      	b.n	800635a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006358:	2302      	movs	r3, #2
  }
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006388:	2300      	movs	r3, #0
 800638a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10d      	bne.n	80063ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_UART_IRQHandler+0x52>
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f9d6 	bl	8006764 <UART_Receive_IT>
      return;
 80063b8:	e0d1      	b.n	800655e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 80b0 	beq.w	8006522 <HAL_UART_IRQHandler+0x1ba>
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d105      	bne.n	80063d8 <HAL_UART_IRQHandler+0x70>
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 80a5 	beq.w	8006522 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <HAL_UART_IRQHandler+0x90>
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f0:	f043 0201 	orr.w	r2, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <HAL_UART_IRQHandler+0xb0>
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006410:	f043 0202 	orr.w	r2, r3, #2
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_UART_IRQHandler+0xd0>
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d005      	beq.n	8006438 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006430:	f043 0204 	orr.w	r2, r3, #4
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00f      	beq.n	8006462 <HAL_UART_IRQHandler+0xfa>
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <HAL_UART_IRQHandler+0xee>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645a:	f043 0208 	orr.w	r2, r3, #8
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d078      	beq.n	800655c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <HAL_UART_IRQHandler+0x11c>
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f970 	bl	8006764 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648e:	2b40      	cmp	r3, #64	; 0x40
 8006490:	bf0c      	ite	eq
 8006492:	2301      	moveq	r3, #1
 8006494:	2300      	movne	r3, #0
 8006496:	b2db      	uxtb	r3, r3
 8006498:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d102      	bne.n	80064ac <HAL_UART_IRQHandler+0x144>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d031      	beq.n	8006510 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f8b9 	bl	8006624 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064bc:	2b40      	cmp	r3, #64	; 0x40
 80064be:	d123      	bne.n	8006508 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695a      	ldr	r2, [r3, #20]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d013      	beq.n	8006500 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064dc:	4a21      	ldr	r2, [pc, #132]	; (8006564 <HAL_UART_IRQHandler+0x1fc>)
 80064de:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fe f851 	bl	800458c <HAL_DMA_Abort_IT>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d016      	beq.n	800651e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064fa:	4610      	mov	r0, r2
 80064fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fe:	e00e      	b.n	800651e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f83b 	bl	800657c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006506:	e00a      	b.n	800651e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f837 	bl	800657c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650e:	e006      	b.n	800651e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f833 	bl	800657c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800651c:	e01e      	b.n	800655c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800651e:	bf00      	nop
    return;
 8006520:	e01c      	b.n	800655c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006528:	2b00      	cmp	r3, #0
 800652a:	d008      	beq.n	800653e <HAL_UART_IRQHandler+0x1d6>
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f8a6 	bl	8006688 <UART_Transmit_IT>
    return;
 800653c:	e00f      	b.n	800655e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <HAL_UART_IRQHandler+0x1f6>
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f8ee 	bl	8006734 <UART_EndTransmit_IT>
    return;
 8006558:	bf00      	nop
 800655a:	e000      	b.n	800655e <HAL_UART_IRQHandler+0x1f6>
    return;
 800655c:	bf00      	nop
  }
}
 800655e:	3720      	adds	r7, #32
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	08006661 	.word	0x08006661

08006568 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	4613      	mov	r3, r2
 800659e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a0:	e02c      	b.n	80065fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d028      	beq.n	80065fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80065b0:	f7fd fb22 	bl	8003bf8 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d21d      	bcs.n	80065fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695a      	ldr	r2, [r3, #20]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0201 	bic.w	r2, r2, #1
 80065de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e00f      	b.n	800661c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4013      	ands	r3, r2
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	bf0c      	ite	eq
 800660c:	2301      	moveq	r3, #1
 800660e:	2300      	movne	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	429a      	cmp	r2, r3
 8006618:	d0c3      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800663a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	695a      	ldr	r2, [r3, #20]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7ff ff7e 	bl	800657c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006680:	bf00      	nop
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b21      	cmp	r3, #33	; 0x21
 800669a:	d144      	bne.n	8006726 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a4:	d11a      	bne.n	80066dc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066ba:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d105      	bne.n	80066d0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	1c9a      	adds	r2, r3, #2
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	621a      	str	r2, [r3, #32]
 80066ce:	e00e      	b.n	80066ee <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	621a      	str	r2, [r3, #32]
 80066da:	e008      	b.n	80066ee <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	1c59      	adds	r1, r3, #1
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6211      	str	r1, [r2, #32]
 80066e6:	781a      	ldrb	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	4619      	mov	r1, r3
 80066fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10f      	bne.n	8006722 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006710:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006720:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	e000      	b.n	8006728 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006726:	2302      	movs	r3, #2
  }
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800674a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff ff07 	bl	8006568 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b22      	cmp	r3, #34	; 0x22
 8006776:	d171      	bne.n	800685c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006780:	d123      	bne.n	80067ca <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006786:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10e      	bne.n	80067ae <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	1c9a      	adds	r2, r3, #2
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	629a      	str	r2, [r3, #40]	; 0x28
 80067ac:	e029      	b.n	8006802 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	629a      	str	r2, [r3, #40]	; 0x28
 80067c8:	e01b      	b.n	8006802 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6858      	ldr	r0, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	1c59      	adds	r1, r3, #1
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6291      	str	r1, [r2, #40]	; 0x28
 80067e2:	b2c2      	uxtb	r2, r0
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	e00c      	b.n	8006802 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	1c58      	adds	r0, r3, #1
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	6288      	str	r0, [r1, #40]	; 0x28
 80067fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29b      	uxth	r3, r3
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	4619      	mov	r1, r3
 8006810:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006812:	2b00      	cmp	r3, #0
 8006814:	d120      	bne.n	8006858 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0220 	bic.w	r2, r2, #32
 8006824:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006834:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695a      	ldr	r2, [r3, #20]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0201 	bic.w	r2, r2, #1
 8006844:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fc ff16 	bl	8003680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	e002      	b.n	800685e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	e000      	b.n	800685e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800685c:	2302      	movs	r3, #2
  }
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80068aa:	f023 030c 	bic.w	r3, r3, #12
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6812      	ldr	r2, [r2, #0]
 80068b2:	68f9      	ldr	r1, [r7, #12]
 80068b4:	430b      	orrs	r3, r1
 80068b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699a      	ldr	r2, [r3, #24]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d6:	f040 818b 	bne.w	8006bf0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4ac1      	ldr	r2, [pc, #772]	; (8006be4 <UART_SetConfig+0x37c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d005      	beq.n	80068f0 <UART_SetConfig+0x88>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4abf      	ldr	r2, [pc, #764]	; (8006be8 <UART_SetConfig+0x380>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	f040 80bd 	bne.w	8006a6a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068f0:	f7fe fba0 	bl	8005034 <HAL_RCC_GetPCLK2Freq>
 80068f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	461d      	mov	r5, r3
 80068fa:	f04f 0600 	mov.w	r6, #0
 80068fe:	46a8      	mov	r8, r5
 8006900:	46b1      	mov	r9, r6
 8006902:	eb18 0308 	adds.w	r3, r8, r8
 8006906:	eb49 0409 	adc.w	r4, r9, r9
 800690a:	4698      	mov	r8, r3
 800690c:	46a1      	mov	r9, r4
 800690e:	eb18 0805 	adds.w	r8, r8, r5
 8006912:	eb49 0906 	adc.w	r9, r9, r6
 8006916:	f04f 0100 	mov.w	r1, #0
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006922:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006926:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800692a:	4688      	mov	r8, r1
 800692c:	4691      	mov	r9, r2
 800692e:	eb18 0005 	adds.w	r0, r8, r5
 8006932:	eb49 0106 	adc.w	r1, r9, r6
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	461d      	mov	r5, r3
 800693c:	f04f 0600 	mov.w	r6, #0
 8006940:	196b      	adds	r3, r5, r5
 8006942:	eb46 0406 	adc.w	r4, r6, r6
 8006946:	461a      	mov	r2, r3
 8006948:	4623      	mov	r3, r4
 800694a:	f7fa f945 	bl	8000bd8 <__aeabi_uldivmod>
 800694e:	4603      	mov	r3, r0
 8006950:	460c      	mov	r4, r1
 8006952:	461a      	mov	r2, r3
 8006954:	4ba5      	ldr	r3, [pc, #660]	; (8006bec <UART_SetConfig+0x384>)
 8006956:	fba3 2302 	umull	r2, r3, r3, r2
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	461d      	mov	r5, r3
 8006964:	f04f 0600 	mov.w	r6, #0
 8006968:	46a9      	mov	r9, r5
 800696a:	46b2      	mov	sl, r6
 800696c:	eb19 0309 	adds.w	r3, r9, r9
 8006970:	eb4a 040a 	adc.w	r4, sl, sl
 8006974:	4699      	mov	r9, r3
 8006976:	46a2      	mov	sl, r4
 8006978:	eb19 0905 	adds.w	r9, r9, r5
 800697c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006980:	f04f 0100 	mov.w	r1, #0
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800698c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006990:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006994:	4689      	mov	r9, r1
 8006996:	4692      	mov	sl, r2
 8006998:	eb19 0005 	adds.w	r0, r9, r5
 800699c:	eb4a 0106 	adc.w	r1, sl, r6
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	461d      	mov	r5, r3
 80069a6:	f04f 0600 	mov.w	r6, #0
 80069aa:	196b      	adds	r3, r5, r5
 80069ac:	eb46 0406 	adc.w	r4, r6, r6
 80069b0:	461a      	mov	r2, r3
 80069b2:	4623      	mov	r3, r4
 80069b4:	f7fa f910 	bl	8000bd8 <__aeabi_uldivmod>
 80069b8:	4603      	mov	r3, r0
 80069ba:	460c      	mov	r4, r1
 80069bc:	461a      	mov	r2, r3
 80069be:	4b8b      	ldr	r3, [pc, #556]	; (8006bec <UART_SetConfig+0x384>)
 80069c0:	fba3 1302 	umull	r1, r3, r3, r2
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	2164      	movs	r1, #100	; 0x64
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	3332      	adds	r3, #50	; 0x32
 80069d2:	4a86      	ldr	r2, [pc, #536]	; (8006bec <UART_SetConfig+0x384>)
 80069d4:	fba2 2303 	umull	r2, r3, r2, r3
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069e0:	4498      	add	r8, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	461d      	mov	r5, r3
 80069e6:	f04f 0600 	mov.w	r6, #0
 80069ea:	46a9      	mov	r9, r5
 80069ec:	46b2      	mov	sl, r6
 80069ee:	eb19 0309 	adds.w	r3, r9, r9
 80069f2:	eb4a 040a 	adc.w	r4, sl, sl
 80069f6:	4699      	mov	r9, r3
 80069f8:	46a2      	mov	sl, r4
 80069fa:	eb19 0905 	adds.w	r9, r9, r5
 80069fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a02:	f04f 0100 	mov.w	r1, #0
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a16:	4689      	mov	r9, r1
 8006a18:	4692      	mov	sl, r2
 8006a1a:	eb19 0005 	adds.w	r0, r9, r5
 8006a1e:	eb4a 0106 	adc.w	r1, sl, r6
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	461d      	mov	r5, r3
 8006a28:	f04f 0600 	mov.w	r6, #0
 8006a2c:	196b      	adds	r3, r5, r5
 8006a2e:	eb46 0406 	adc.w	r4, r6, r6
 8006a32:	461a      	mov	r2, r3
 8006a34:	4623      	mov	r3, r4
 8006a36:	f7fa f8cf 	bl	8000bd8 <__aeabi_uldivmod>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	461a      	mov	r2, r3
 8006a40:	4b6a      	ldr	r3, [pc, #424]	; (8006bec <UART_SetConfig+0x384>)
 8006a42:	fba3 1302 	umull	r1, r3, r3, r2
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	2164      	movs	r1, #100	; 0x64
 8006a4a:	fb01 f303 	mul.w	r3, r1, r3
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	3332      	adds	r3, #50	; 0x32
 8006a54:	4a65      	ldr	r2, [pc, #404]	; (8006bec <UART_SetConfig+0x384>)
 8006a56:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	f003 0207 	and.w	r2, r3, #7
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4442      	add	r2, r8
 8006a66:	609a      	str	r2, [r3, #8]
 8006a68:	e26f      	b.n	8006f4a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a6a:	f7fe facf 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 8006a6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	461d      	mov	r5, r3
 8006a74:	f04f 0600 	mov.w	r6, #0
 8006a78:	46a8      	mov	r8, r5
 8006a7a:	46b1      	mov	r9, r6
 8006a7c:	eb18 0308 	adds.w	r3, r8, r8
 8006a80:	eb49 0409 	adc.w	r4, r9, r9
 8006a84:	4698      	mov	r8, r3
 8006a86:	46a1      	mov	r9, r4
 8006a88:	eb18 0805 	adds.w	r8, r8, r5
 8006a8c:	eb49 0906 	adc.w	r9, r9, r6
 8006a90:	f04f 0100 	mov.w	r1, #0
 8006a94:	f04f 0200 	mov.w	r2, #0
 8006a98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006aa0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006aa4:	4688      	mov	r8, r1
 8006aa6:	4691      	mov	r9, r2
 8006aa8:	eb18 0005 	adds.w	r0, r8, r5
 8006aac:	eb49 0106 	adc.w	r1, r9, r6
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	461d      	mov	r5, r3
 8006ab6:	f04f 0600 	mov.w	r6, #0
 8006aba:	196b      	adds	r3, r5, r5
 8006abc:	eb46 0406 	adc.w	r4, r6, r6
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4623      	mov	r3, r4
 8006ac4:	f7fa f888 	bl	8000bd8 <__aeabi_uldivmod>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	461a      	mov	r2, r3
 8006ace:	4b47      	ldr	r3, [pc, #284]	; (8006bec <UART_SetConfig+0x384>)
 8006ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	461d      	mov	r5, r3
 8006ade:	f04f 0600 	mov.w	r6, #0
 8006ae2:	46a9      	mov	r9, r5
 8006ae4:	46b2      	mov	sl, r6
 8006ae6:	eb19 0309 	adds.w	r3, r9, r9
 8006aea:	eb4a 040a 	adc.w	r4, sl, sl
 8006aee:	4699      	mov	r9, r3
 8006af0:	46a2      	mov	sl, r4
 8006af2:	eb19 0905 	adds.w	r9, r9, r5
 8006af6:	eb4a 0a06 	adc.w	sl, sl, r6
 8006afa:	f04f 0100 	mov.w	r1, #0
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b0e:	4689      	mov	r9, r1
 8006b10:	4692      	mov	sl, r2
 8006b12:	eb19 0005 	adds.w	r0, r9, r5
 8006b16:	eb4a 0106 	adc.w	r1, sl, r6
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	461d      	mov	r5, r3
 8006b20:	f04f 0600 	mov.w	r6, #0
 8006b24:	196b      	adds	r3, r5, r5
 8006b26:	eb46 0406 	adc.w	r4, r6, r6
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	f7fa f853 	bl	8000bd8 <__aeabi_uldivmod>
 8006b32:	4603      	mov	r3, r0
 8006b34:	460c      	mov	r4, r1
 8006b36:	461a      	mov	r2, r3
 8006b38:	4b2c      	ldr	r3, [pc, #176]	; (8006bec <UART_SetConfig+0x384>)
 8006b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	2164      	movs	r1, #100	; 0x64
 8006b42:	fb01 f303 	mul.w	r3, r1, r3
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	3332      	adds	r3, #50	; 0x32
 8006b4c:	4a27      	ldr	r2, [pc, #156]	; (8006bec <UART_SetConfig+0x384>)
 8006b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b5a:	4498      	add	r8, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	461d      	mov	r5, r3
 8006b60:	f04f 0600 	mov.w	r6, #0
 8006b64:	46a9      	mov	r9, r5
 8006b66:	46b2      	mov	sl, r6
 8006b68:	eb19 0309 	adds.w	r3, r9, r9
 8006b6c:	eb4a 040a 	adc.w	r4, sl, sl
 8006b70:	4699      	mov	r9, r3
 8006b72:	46a2      	mov	sl, r4
 8006b74:	eb19 0905 	adds.w	r9, r9, r5
 8006b78:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b7c:	f04f 0100 	mov.w	r1, #0
 8006b80:	f04f 0200 	mov.w	r2, #0
 8006b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b90:	4689      	mov	r9, r1
 8006b92:	4692      	mov	sl, r2
 8006b94:	eb19 0005 	adds.w	r0, r9, r5
 8006b98:	eb4a 0106 	adc.w	r1, sl, r6
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	461d      	mov	r5, r3
 8006ba2:	f04f 0600 	mov.w	r6, #0
 8006ba6:	196b      	adds	r3, r5, r5
 8006ba8:	eb46 0406 	adc.w	r4, r6, r6
 8006bac:	461a      	mov	r2, r3
 8006bae:	4623      	mov	r3, r4
 8006bb0:	f7fa f812 	bl	8000bd8 <__aeabi_uldivmod>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4b0c      	ldr	r3, [pc, #48]	; (8006bec <UART_SetConfig+0x384>)
 8006bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006bc0:	095b      	lsrs	r3, r3, #5
 8006bc2:	2164      	movs	r1, #100	; 0x64
 8006bc4:	fb01 f303 	mul.w	r3, r1, r3
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	3332      	adds	r3, #50	; 0x32
 8006bce:	4a07      	ldr	r2, [pc, #28]	; (8006bec <UART_SetConfig+0x384>)
 8006bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	f003 0207 	and.w	r2, r3, #7
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4442      	add	r2, r8
 8006be0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006be2:	e1b2      	b.n	8006f4a <UART_SetConfig+0x6e2>
 8006be4:	40011000 	.word	0x40011000
 8006be8:	40011400 	.word	0x40011400
 8006bec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4ad7      	ldr	r2, [pc, #860]	; (8006f54 <UART_SetConfig+0x6ec>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d005      	beq.n	8006c06 <UART_SetConfig+0x39e>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4ad6      	ldr	r2, [pc, #856]	; (8006f58 <UART_SetConfig+0x6f0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	f040 80d1 	bne.w	8006da8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c06:	f7fe fa15 	bl	8005034 <HAL_RCC_GetPCLK2Freq>
 8006c0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	469a      	mov	sl, r3
 8006c10:	f04f 0b00 	mov.w	fp, #0
 8006c14:	46d0      	mov	r8, sl
 8006c16:	46d9      	mov	r9, fp
 8006c18:	eb18 0308 	adds.w	r3, r8, r8
 8006c1c:	eb49 0409 	adc.w	r4, r9, r9
 8006c20:	4698      	mov	r8, r3
 8006c22:	46a1      	mov	r9, r4
 8006c24:	eb18 080a 	adds.w	r8, r8, sl
 8006c28:	eb49 090b 	adc.w	r9, r9, fp
 8006c2c:	f04f 0100 	mov.w	r1, #0
 8006c30:	f04f 0200 	mov.w	r2, #0
 8006c34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c40:	4688      	mov	r8, r1
 8006c42:	4691      	mov	r9, r2
 8006c44:	eb1a 0508 	adds.w	r5, sl, r8
 8006c48:	eb4b 0609 	adc.w	r6, fp, r9
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	4619      	mov	r1, r3
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	f04f 0300 	mov.w	r3, #0
 8006c5a:	f04f 0400 	mov.w	r4, #0
 8006c5e:	0094      	lsls	r4, r2, #2
 8006c60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c64:	008b      	lsls	r3, r1, #2
 8006c66:	461a      	mov	r2, r3
 8006c68:	4623      	mov	r3, r4
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	f7f9 ffb3 	bl	8000bd8 <__aeabi_uldivmod>
 8006c72:	4603      	mov	r3, r0
 8006c74:	460c      	mov	r4, r1
 8006c76:	461a      	mov	r2, r3
 8006c78:	4bb8      	ldr	r3, [pc, #736]	; (8006f5c <UART_SetConfig+0x6f4>)
 8006c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c7e:	095b      	lsrs	r3, r3, #5
 8006c80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	469b      	mov	fp, r3
 8006c88:	f04f 0c00 	mov.w	ip, #0
 8006c8c:	46d9      	mov	r9, fp
 8006c8e:	46e2      	mov	sl, ip
 8006c90:	eb19 0309 	adds.w	r3, r9, r9
 8006c94:	eb4a 040a 	adc.w	r4, sl, sl
 8006c98:	4699      	mov	r9, r3
 8006c9a:	46a2      	mov	sl, r4
 8006c9c:	eb19 090b 	adds.w	r9, r9, fp
 8006ca0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ca4:	f04f 0100 	mov.w	r1, #0
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cb8:	4689      	mov	r9, r1
 8006cba:	4692      	mov	sl, r2
 8006cbc:	eb1b 0509 	adds.w	r5, fp, r9
 8006cc0:	eb4c 060a 	adc.w	r6, ip, sl
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	f04f 0400 	mov.w	r4, #0
 8006cd6:	0094      	lsls	r4, r2, #2
 8006cd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cdc:	008b      	lsls	r3, r1, #2
 8006cde:	461a      	mov	r2, r3
 8006ce0:	4623      	mov	r3, r4
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	f7f9 ff77 	bl	8000bd8 <__aeabi_uldivmod>
 8006cea:	4603      	mov	r3, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	461a      	mov	r2, r3
 8006cf0:	4b9a      	ldr	r3, [pc, #616]	; (8006f5c <UART_SetConfig+0x6f4>)
 8006cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	2164      	movs	r1, #100	; 0x64
 8006cfa:	fb01 f303 	mul.w	r3, r1, r3
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	3332      	adds	r3, #50	; 0x32
 8006d04:	4a95      	ldr	r2, [pc, #596]	; (8006f5c <UART_SetConfig+0x6f4>)
 8006d06:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d10:	4498      	add	r8, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	469b      	mov	fp, r3
 8006d16:	f04f 0c00 	mov.w	ip, #0
 8006d1a:	46d9      	mov	r9, fp
 8006d1c:	46e2      	mov	sl, ip
 8006d1e:	eb19 0309 	adds.w	r3, r9, r9
 8006d22:	eb4a 040a 	adc.w	r4, sl, sl
 8006d26:	4699      	mov	r9, r3
 8006d28:	46a2      	mov	sl, r4
 8006d2a:	eb19 090b 	adds.w	r9, r9, fp
 8006d2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d32:	f04f 0100 	mov.w	r1, #0
 8006d36:	f04f 0200 	mov.w	r2, #0
 8006d3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d46:	4689      	mov	r9, r1
 8006d48:	4692      	mov	sl, r2
 8006d4a:	eb1b 0509 	adds.w	r5, fp, r9
 8006d4e:	eb4c 060a 	adc.w	r6, ip, sl
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	4619      	mov	r1, r3
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	f04f 0400 	mov.w	r4, #0
 8006d64:	0094      	lsls	r4, r2, #2
 8006d66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d6a:	008b      	lsls	r3, r1, #2
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	4623      	mov	r3, r4
 8006d70:	4628      	mov	r0, r5
 8006d72:	4631      	mov	r1, r6
 8006d74:	f7f9 ff30 	bl	8000bd8 <__aeabi_uldivmod>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4b77      	ldr	r3, [pc, #476]	; (8006f5c <UART_SetConfig+0x6f4>)
 8006d80:	fba3 1302 	umull	r1, r3, r3, r2
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	2164      	movs	r1, #100	; 0x64
 8006d88:	fb01 f303 	mul.w	r3, r1, r3
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	3332      	adds	r3, #50	; 0x32
 8006d92:	4a72      	ldr	r2, [pc, #456]	; (8006f5c <UART_SetConfig+0x6f4>)
 8006d94:	fba2 2303 	umull	r2, r3, r2, r3
 8006d98:	095b      	lsrs	r3, r3, #5
 8006d9a:	f003 020f 	and.w	r2, r3, #15
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4442      	add	r2, r8
 8006da4:	609a      	str	r2, [r3, #8]
 8006da6:	e0d0      	b.n	8006f4a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006da8:	f7fe f930 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 8006dac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	469a      	mov	sl, r3
 8006db2:	f04f 0b00 	mov.w	fp, #0
 8006db6:	46d0      	mov	r8, sl
 8006db8:	46d9      	mov	r9, fp
 8006dba:	eb18 0308 	adds.w	r3, r8, r8
 8006dbe:	eb49 0409 	adc.w	r4, r9, r9
 8006dc2:	4698      	mov	r8, r3
 8006dc4:	46a1      	mov	r9, r4
 8006dc6:	eb18 080a 	adds.w	r8, r8, sl
 8006dca:	eb49 090b 	adc.w	r9, r9, fp
 8006dce:	f04f 0100 	mov.w	r1, #0
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006dda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006dde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006de2:	4688      	mov	r8, r1
 8006de4:	4691      	mov	r9, r2
 8006de6:	eb1a 0508 	adds.w	r5, sl, r8
 8006dea:	eb4b 0609 	adc.w	r6, fp, r9
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	4619      	mov	r1, r3
 8006df4:	f04f 0200 	mov.w	r2, #0
 8006df8:	f04f 0300 	mov.w	r3, #0
 8006dfc:	f04f 0400 	mov.w	r4, #0
 8006e00:	0094      	lsls	r4, r2, #2
 8006e02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e06:	008b      	lsls	r3, r1, #2
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4623      	mov	r3, r4
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	4631      	mov	r1, r6
 8006e10:	f7f9 fee2 	bl	8000bd8 <__aeabi_uldivmod>
 8006e14:	4603      	mov	r3, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4b50      	ldr	r3, [pc, #320]	; (8006f5c <UART_SetConfig+0x6f4>)
 8006e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8006e20:	095b      	lsrs	r3, r3, #5
 8006e22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	469b      	mov	fp, r3
 8006e2a:	f04f 0c00 	mov.w	ip, #0
 8006e2e:	46d9      	mov	r9, fp
 8006e30:	46e2      	mov	sl, ip
 8006e32:	eb19 0309 	adds.w	r3, r9, r9
 8006e36:	eb4a 040a 	adc.w	r4, sl, sl
 8006e3a:	4699      	mov	r9, r3
 8006e3c:	46a2      	mov	sl, r4
 8006e3e:	eb19 090b 	adds.w	r9, r9, fp
 8006e42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e46:	f04f 0100 	mov.w	r1, #0
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e5a:	4689      	mov	r9, r1
 8006e5c:	4692      	mov	sl, r2
 8006e5e:	eb1b 0509 	adds.w	r5, fp, r9
 8006e62:	eb4c 060a 	adc.w	r6, ip, sl
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f04f 0200 	mov.w	r2, #0
 8006e70:	f04f 0300 	mov.w	r3, #0
 8006e74:	f04f 0400 	mov.w	r4, #0
 8006e78:	0094      	lsls	r4, r2, #2
 8006e7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e7e:	008b      	lsls	r3, r1, #2
 8006e80:	461a      	mov	r2, r3
 8006e82:	4623      	mov	r3, r4
 8006e84:	4628      	mov	r0, r5
 8006e86:	4631      	mov	r1, r6
 8006e88:	f7f9 fea6 	bl	8000bd8 <__aeabi_uldivmod>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	461a      	mov	r2, r3
 8006e92:	4b32      	ldr	r3, [pc, #200]	; (8006f5c <UART_SetConfig+0x6f4>)
 8006e94:	fba3 1302 	umull	r1, r3, r3, r2
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	2164      	movs	r1, #100	; 0x64
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	3332      	adds	r3, #50	; 0x32
 8006ea6:	4a2d      	ldr	r2, [pc, #180]	; (8006f5c <UART_SetConfig+0x6f4>)
 8006ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006eb2:	4498      	add	r8, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	469b      	mov	fp, r3
 8006eb8:	f04f 0c00 	mov.w	ip, #0
 8006ebc:	46d9      	mov	r9, fp
 8006ebe:	46e2      	mov	sl, ip
 8006ec0:	eb19 0309 	adds.w	r3, r9, r9
 8006ec4:	eb4a 040a 	adc.w	r4, sl, sl
 8006ec8:	4699      	mov	r9, r3
 8006eca:	46a2      	mov	sl, r4
 8006ecc:	eb19 090b 	adds.w	r9, r9, fp
 8006ed0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ed4:	f04f 0100 	mov.w	r1, #0
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ee0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ee4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ee8:	4689      	mov	r9, r1
 8006eea:	4692      	mov	sl, r2
 8006eec:	eb1b 0509 	adds.w	r5, fp, r9
 8006ef0:	eb4c 060a 	adc.w	r6, ip, sl
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	f04f 0200 	mov.w	r2, #0
 8006efe:	f04f 0300 	mov.w	r3, #0
 8006f02:	f04f 0400 	mov.w	r4, #0
 8006f06:	0094      	lsls	r4, r2, #2
 8006f08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f0c:	008b      	lsls	r3, r1, #2
 8006f0e:	461a      	mov	r2, r3
 8006f10:	4623      	mov	r3, r4
 8006f12:	4628      	mov	r0, r5
 8006f14:	4631      	mov	r1, r6
 8006f16:	f7f9 fe5f 	bl	8000bd8 <__aeabi_uldivmod>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4b0e      	ldr	r3, [pc, #56]	; (8006f5c <UART_SetConfig+0x6f4>)
 8006f22:	fba3 1302 	umull	r1, r3, r3, r2
 8006f26:	095b      	lsrs	r3, r3, #5
 8006f28:	2164      	movs	r1, #100	; 0x64
 8006f2a:	fb01 f303 	mul.w	r3, r1, r3
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	3332      	adds	r3, #50	; 0x32
 8006f34:	4a09      	ldr	r2, [pc, #36]	; (8006f5c <UART_SetConfig+0x6f4>)
 8006f36:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	f003 020f 	and.w	r2, r3, #15
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4442      	add	r2, r8
 8006f46:	609a      	str	r2, [r3, #8]
}
 8006f48:	e7ff      	b.n	8006f4a <UART_SetConfig+0x6e2>
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f54:	40011000 	.word	0x40011000
 8006f58:	40011400 	.word	0x40011400
 8006f5c:	51eb851f 	.word	0x51eb851f

08006f60 <__errno>:
 8006f60:	4b01      	ldr	r3, [pc, #4]	; (8006f68 <__errno+0x8>)
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20000980 	.word	0x20000980

08006f6c <__libc_init_array>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	4e0d      	ldr	r6, [pc, #52]	; (8006fa4 <__libc_init_array+0x38>)
 8006f70:	4c0d      	ldr	r4, [pc, #52]	; (8006fa8 <__libc_init_array+0x3c>)
 8006f72:	1ba4      	subs	r4, r4, r6
 8006f74:	10a4      	asrs	r4, r4, #2
 8006f76:	2500      	movs	r5, #0
 8006f78:	42a5      	cmp	r5, r4
 8006f7a:	d109      	bne.n	8006f90 <__libc_init_array+0x24>
 8006f7c:	4e0b      	ldr	r6, [pc, #44]	; (8006fac <__libc_init_array+0x40>)
 8006f7e:	4c0c      	ldr	r4, [pc, #48]	; (8006fb0 <__libc_init_array+0x44>)
 8006f80:	f001 fc80 	bl	8008884 <_init>
 8006f84:	1ba4      	subs	r4, r4, r6
 8006f86:	10a4      	asrs	r4, r4, #2
 8006f88:	2500      	movs	r5, #0
 8006f8a:	42a5      	cmp	r5, r4
 8006f8c:	d105      	bne.n	8006f9a <__libc_init_array+0x2e>
 8006f8e:	bd70      	pop	{r4, r5, r6, pc}
 8006f90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f94:	4798      	blx	r3
 8006f96:	3501      	adds	r5, #1
 8006f98:	e7ee      	b.n	8006f78 <__libc_init_array+0xc>
 8006f9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f9e:	4798      	blx	r3
 8006fa0:	3501      	adds	r5, #1
 8006fa2:	e7f2      	b.n	8006f8a <__libc_init_array+0x1e>
 8006fa4:	08008f10 	.word	0x08008f10
 8006fa8:	08008f10 	.word	0x08008f10
 8006fac:	08008f10 	.word	0x08008f10
 8006fb0:	08008f14 	.word	0x08008f14

08006fb4 <memcpy>:
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	1e43      	subs	r3, r0, #1
 8006fb8:	440a      	add	r2, r1
 8006fba:	4291      	cmp	r1, r2
 8006fbc:	d100      	bne.n	8006fc0 <memcpy+0xc>
 8006fbe:	bd10      	pop	{r4, pc}
 8006fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fc8:	e7f7      	b.n	8006fba <memcpy+0x6>

08006fca <memset>:
 8006fca:	4402      	add	r2, r0
 8006fcc:	4603      	mov	r3, r0
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d100      	bne.n	8006fd4 <memset+0xa>
 8006fd2:	4770      	bx	lr
 8006fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd8:	e7f9      	b.n	8006fce <memset+0x4>
	...

08006fdc <siprintf>:
 8006fdc:	b40e      	push	{r1, r2, r3}
 8006fde:	b500      	push	{lr}
 8006fe0:	b09c      	sub	sp, #112	; 0x70
 8006fe2:	ab1d      	add	r3, sp, #116	; 0x74
 8006fe4:	9002      	str	r0, [sp, #8]
 8006fe6:	9006      	str	r0, [sp, #24]
 8006fe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fec:	4809      	ldr	r0, [pc, #36]	; (8007014 <siprintf+0x38>)
 8006fee:	9107      	str	r1, [sp, #28]
 8006ff0:	9104      	str	r1, [sp, #16]
 8006ff2:	4909      	ldr	r1, [pc, #36]	; (8007018 <siprintf+0x3c>)
 8006ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff8:	9105      	str	r1, [sp, #20]
 8006ffa:	6800      	ldr	r0, [r0, #0]
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	a902      	add	r1, sp, #8
 8007000:	f000 f866 	bl	80070d0 <_svfiprintf_r>
 8007004:	9b02      	ldr	r3, [sp, #8]
 8007006:	2200      	movs	r2, #0
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	b01c      	add	sp, #112	; 0x70
 800700c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007010:	b003      	add	sp, #12
 8007012:	4770      	bx	lr
 8007014:	20000980 	.word	0x20000980
 8007018:	ffff0208 	.word	0xffff0208

0800701c <__ssputs_r>:
 800701c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007020:	688e      	ldr	r6, [r1, #8]
 8007022:	429e      	cmp	r6, r3
 8007024:	4682      	mov	sl, r0
 8007026:	460c      	mov	r4, r1
 8007028:	4690      	mov	r8, r2
 800702a:	4699      	mov	r9, r3
 800702c:	d837      	bhi.n	800709e <__ssputs_r+0x82>
 800702e:	898a      	ldrh	r2, [r1, #12]
 8007030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007034:	d031      	beq.n	800709a <__ssputs_r+0x7e>
 8007036:	6825      	ldr	r5, [r4, #0]
 8007038:	6909      	ldr	r1, [r1, #16]
 800703a:	1a6f      	subs	r7, r5, r1
 800703c:	6965      	ldr	r5, [r4, #20]
 800703e:	2302      	movs	r3, #2
 8007040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007044:	fb95 f5f3 	sdiv	r5, r5, r3
 8007048:	f109 0301 	add.w	r3, r9, #1
 800704c:	443b      	add	r3, r7
 800704e:	429d      	cmp	r5, r3
 8007050:	bf38      	it	cc
 8007052:	461d      	movcc	r5, r3
 8007054:	0553      	lsls	r3, r2, #21
 8007056:	d530      	bpl.n	80070ba <__ssputs_r+0x9e>
 8007058:	4629      	mov	r1, r5
 800705a:	f000 fb21 	bl	80076a0 <_malloc_r>
 800705e:	4606      	mov	r6, r0
 8007060:	b950      	cbnz	r0, 8007078 <__ssputs_r+0x5c>
 8007062:	230c      	movs	r3, #12
 8007064:	f8ca 3000 	str.w	r3, [sl]
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800706e:	81a3      	strh	r3, [r4, #12]
 8007070:	f04f 30ff 	mov.w	r0, #4294967295
 8007074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007078:	463a      	mov	r2, r7
 800707a:	6921      	ldr	r1, [r4, #16]
 800707c:	f7ff ff9a 	bl	8006fb4 <memcpy>
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800708a:	81a3      	strh	r3, [r4, #12]
 800708c:	6126      	str	r6, [r4, #16]
 800708e:	6165      	str	r5, [r4, #20]
 8007090:	443e      	add	r6, r7
 8007092:	1bed      	subs	r5, r5, r7
 8007094:	6026      	str	r6, [r4, #0]
 8007096:	60a5      	str	r5, [r4, #8]
 8007098:	464e      	mov	r6, r9
 800709a:	454e      	cmp	r6, r9
 800709c:	d900      	bls.n	80070a0 <__ssputs_r+0x84>
 800709e:	464e      	mov	r6, r9
 80070a0:	4632      	mov	r2, r6
 80070a2:	4641      	mov	r1, r8
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	f000 fa93 	bl	80075d0 <memmove>
 80070aa:	68a3      	ldr	r3, [r4, #8]
 80070ac:	1b9b      	subs	r3, r3, r6
 80070ae:	60a3      	str	r3, [r4, #8]
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	441e      	add	r6, r3
 80070b4:	6026      	str	r6, [r4, #0]
 80070b6:	2000      	movs	r0, #0
 80070b8:	e7dc      	b.n	8007074 <__ssputs_r+0x58>
 80070ba:	462a      	mov	r2, r5
 80070bc:	f000 fb4a 	bl	8007754 <_realloc_r>
 80070c0:	4606      	mov	r6, r0
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d1e2      	bne.n	800708c <__ssputs_r+0x70>
 80070c6:	6921      	ldr	r1, [r4, #16]
 80070c8:	4650      	mov	r0, sl
 80070ca:	f000 fa9b 	bl	8007604 <_free_r>
 80070ce:	e7c8      	b.n	8007062 <__ssputs_r+0x46>

080070d0 <_svfiprintf_r>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	461d      	mov	r5, r3
 80070d6:	898b      	ldrh	r3, [r1, #12]
 80070d8:	061f      	lsls	r7, r3, #24
 80070da:	b09d      	sub	sp, #116	; 0x74
 80070dc:	4680      	mov	r8, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	4616      	mov	r6, r2
 80070e2:	d50f      	bpl.n	8007104 <_svfiprintf_r+0x34>
 80070e4:	690b      	ldr	r3, [r1, #16]
 80070e6:	b96b      	cbnz	r3, 8007104 <_svfiprintf_r+0x34>
 80070e8:	2140      	movs	r1, #64	; 0x40
 80070ea:	f000 fad9 	bl	80076a0 <_malloc_r>
 80070ee:	6020      	str	r0, [r4, #0]
 80070f0:	6120      	str	r0, [r4, #16]
 80070f2:	b928      	cbnz	r0, 8007100 <_svfiprintf_r+0x30>
 80070f4:	230c      	movs	r3, #12
 80070f6:	f8c8 3000 	str.w	r3, [r8]
 80070fa:	f04f 30ff 	mov.w	r0, #4294967295
 80070fe:	e0c8      	b.n	8007292 <_svfiprintf_r+0x1c2>
 8007100:	2340      	movs	r3, #64	; 0x40
 8007102:	6163      	str	r3, [r4, #20]
 8007104:	2300      	movs	r3, #0
 8007106:	9309      	str	r3, [sp, #36]	; 0x24
 8007108:	2320      	movs	r3, #32
 800710a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800710e:	2330      	movs	r3, #48	; 0x30
 8007110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007114:	9503      	str	r5, [sp, #12]
 8007116:	f04f 0b01 	mov.w	fp, #1
 800711a:	4637      	mov	r7, r6
 800711c:	463d      	mov	r5, r7
 800711e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007122:	b10b      	cbz	r3, 8007128 <_svfiprintf_r+0x58>
 8007124:	2b25      	cmp	r3, #37	; 0x25
 8007126:	d13e      	bne.n	80071a6 <_svfiprintf_r+0xd6>
 8007128:	ebb7 0a06 	subs.w	sl, r7, r6
 800712c:	d00b      	beq.n	8007146 <_svfiprintf_r+0x76>
 800712e:	4653      	mov	r3, sl
 8007130:	4632      	mov	r2, r6
 8007132:	4621      	mov	r1, r4
 8007134:	4640      	mov	r0, r8
 8007136:	f7ff ff71 	bl	800701c <__ssputs_r>
 800713a:	3001      	adds	r0, #1
 800713c:	f000 80a4 	beq.w	8007288 <_svfiprintf_r+0x1b8>
 8007140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007142:	4453      	add	r3, sl
 8007144:	9309      	str	r3, [sp, #36]	; 0x24
 8007146:	783b      	ldrb	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 809d 	beq.w	8007288 <_svfiprintf_r+0x1b8>
 800714e:	2300      	movs	r3, #0
 8007150:	f04f 32ff 	mov.w	r2, #4294967295
 8007154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007158:	9304      	str	r3, [sp, #16]
 800715a:	9307      	str	r3, [sp, #28]
 800715c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007160:	931a      	str	r3, [sp, #104]	; 0x68
 8007162:	462f      	mov	r7, r5
 8007164:	2205      	movs	r2, #5
 8007166:	f817 1b01 	ldrb.w	r1, [r7], #1
 800716a:	4850      	ldr	r0, [pc, #320]	; (80072ac <_svfiprintf_r+0x1dc>)
 800716c:	f7f9 f858 	bl	8000220 <memchr>
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	b9d0      	cbnz	r0, 80071aa <_svfiprintf_r+0xda>
 8007174:	06d9      	lsls	r1, r3, #27
 8007176:	bf44      	itt	mi
 8007178:	2220      	movmi	r2, #32
 800717a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800717e:	071a      	lsls	r2, r3, #28
 8007180:	bf44      	itt	mi
 8007182:	222b      	movmi	r2, #43	; 0x2b
 8007184:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007188:	782a      	ldrb	r2, [r5, #0]
 800718a:	2a2a      	cmp	r2, #42	; 0x2a
 800718c:	d015      	beq.n	80071ba <_svfiprintf_r+0xea>
 800718e:	9a07      	ldr	r2, [sp, #28]
 8007190:	462f      	mov	r7, r5
 8007192:	2000      	movs	r0, #0
 8007194:	250a      	movs	r5, #10
 8007196:	4639      	mov	r1, r7
 8007198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800719c:	3b30      	subs	r3, #48	; 0x30
 800719e:	2b09      	cmp	r3, #9
 80071a0:	d94d      	bls.n	800723e <_svfiprintf_r+0x16e>
 80071a2:	b1b8      	cbz	r0, 80071d4 <_svfiprintf_r+0x104>
 80071a4:	e00f      	b.n	80071c6 <_svfiprintf_r+0xf6>
 80071a6:	462f      	mov	r7, r5
 80071a8:	e7b8      	b.n	800711c <_svfiprintf_r+0x4c>
 80071aa:	4a40      	ldr	r2, [pc, #256]	; (80072ac <_svfiprintf_r+0x1dc>)
 80071ac:	1a80      	subs	r0, r0, r2
 80071ae:	fa0b f000 	lsl.w	r0, fp, r0
 80071b2:	4318      	orrs	r0, r3
 80071b4:	9004      	str	r0, [sp, #16]
 80071b6:	463d      	mov	r5, r7
 80071b8:	e7d3      	b.n	8007162 <_svfiprintf_r+0x92>
 80071ba:	9a03      	ldr	r2, [sp, #12]
 80071bc:	1d11      	adds	r1, r2, #4
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	9103      	str	r1, [sp, #12]
 80071c2:	2a00      	cmp	r2, #0
 80071c4:	db01      	blt.n	80071ca <_svfiprintf_r+0xfa>
 80071c6:	9207      	str	r2, [sp, #28]
 80071c8:	e004      	b.n	80071d4 <_svfiprintf_r+0x104>
 80071ca:	4252      	negs	r2, r2
 80071cc:	f043 0302 	orr.w	r3, r3, #2
 80071d0:	9207      	str	r2, [sp, #28]
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	783b      	ldrb	r3, [r7, #0]
 80071d6:	2b2e      	cmp	r3, #46	; 0x2e
 80071d8:	d10c      	bne.n	80071f4 <_svfiprintf_r+0x124>
 80071da:	787b      	ldrb	r3, [r7, #1]
 80071dc:	2b2a      	cmp	r3, #42	; 0x2a
 80071de:	d133      	bne.n	8007248 <_svfiprintf_r+0x178>
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	1d1a      	adds	r2, r3, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	9203      	str	r2, [sp, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bfb8      	it	lt
 80071ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80071f0:	3702      	adds	r7, #2
 80071f2:	9305      	str	r3, [sp, #20]
 80071f4:	4d2e      	ldr	r5, [pc, #184]	; (80072b0 <_svfiprintf_r+0x1e0>)
 80071f6:	7839      	ldrb	r1, [r7, #0]
 80071f8:	2203      	movs	r2, #3
 80071fa:	4628      	mov	r0, r5
 80071fc:	f7f9 f810 	bl	8000220 <memchr>
 8007200:	b138      	cbz	r0, 8007212 <_svfiprintf_r+0x142>
 8007202:	2340      	movs	r3, #64	; 0x40
 8007204:	1b40      	subs	r0, r0, r5
 8007206:	fa03 f000 	lsl.w	r0, r3, r0
 800720a:	9b04      	ldr	r3, [sp, #16]
 800720c:	4303      	orrs	r3, r0
 800720e:	3701      	adds	r7, #1
 8007210:	9304      	str	r3, [sp, #16]
 8007212:	7839      	ldrb	r1, [r7, #0]
 8007214:	4827      	ldr	r0, [pc, #156]	; (80072b4 <_svfiprintf_r+0x1e4>)
 8007216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800721a:	2206      	movs	r2, #6
 800721c:	1c7e      	adds	r6, r7, #1
 800721e:	f7f8 ffff 	bl	8000220 <memchr>
 8007222:	2800      	cmp	r0, #0
 8007224:	d038      	beq.n	8007298 <_svfiprintf_r+0x1c8>
 8007226:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <_svfiprintf_r+0x1e8>)
 8007228:	bb13      	cbnz	r3, 8007270 <_svfiprintf_r+0x1a0>
 800722a:	9b03      	ldr	r3, [sp, #12]
 800722c:	3307      	adds	r3, #7
 800722e:	f023 0307 	bic.w	r3, r3, #7
 8007232:	3308      	adds	r3, #8
 8007234:	9303      	str	r3, [sp, #12]
 8007236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007238:	444b      	add	r3, r9
 800723a:	9309      	str	r3, [sp, #36]	; 0x24
 800723c:	e76d      	b.n	800711a <_svfiprintf_r+0x4a>
 800723e:	fb05 3202 	mla	r2, r5, r2, r3
 8007242:	2001      	movs	r0, #1
 8007244:	460f      	mov	r7, r1
 8007246:	e7a6      	b.n	8007196 <_svfiprintf_r+0xc6>
 8007248:	2300      	movs	r3, #0
 800724a:	3701      	adds	r7, #1
 800724c:	9305      	str	r3, [sp, #20]
 800724e:	4619      	mov	r1, r3
 8007250:	250a      	movs	r5, #10
 8007252:	4638      	mov	r0, r7
 8007254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007258:	3a30      	subs	r2, #48	; 0x30
 800725a:	2a09      	cmp	r2, #9
 800725c:	d903      	bls.n	8007266 <_svfiprintf_r+0x196>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0c8      	beq.n	80071f4 <_svfiprintf_r+0x124>
 8007262:	9105      	str	r1, [sp, #20]
 8007264:	e7c6      	b.n	80071f4 <_svfiprintf_r+0x124>
 8007266:	fb05 2101 	mla	r1, r5, r1, r2
 800726a:	2301      	movs	r3, #1
 800726c:	4607      	mov	r7, r0
 800726e:	e7f0      	b.n	8007252 <_svfiprintf_r+0x182>
 8007270:	ab03      	add	r3, sp, #12
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	4622      	mov	r2, r4
 8007276:	4b11      	ldr	r3, [pc, #68]	; (80072bc <_svfiprintf_r+0x1ec>)
 8007278:	a904      	add	r1, sp, #16
 800727a:	4640      	mov	r0, r8
 800727c:	f3af 8000 	nop.w
 8007280:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007284:	4681      	mov	r9, r0
 8007286:	d1d6      	bne.n	8007236 <_svfiprintf_r+0x166>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	065b      	lsls	r3, r3, #25
 800728c:	f53f af35 	bmi.w	80070fa <_svfiprintf_r+0x2a>
 8007290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007292:	b01d      	add	sp, #116	; 0x74
 8007294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007298:	ab03      	add	r3, sp, #12
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4622      	mov	r2, r4
 800729e:	4b07      	ldr	r3, [pc, #28]	; (80072bc <_svfiprintf_r+0x1ec>)
 80072a0:	a904      	add	r1, sp, #16
 80072a2:	4640      	mov	r0, r8
 80072a4:	f000 f882 	bl	80073ac <_printf_i>
 80072a8:	e7ea      	b.n	8007280 <_svfiprintf_r+0x1b0>
 80072aa:	bf00      	nop
 80072ac:	08008e90 	.word	0x08008e90
 80072b0:	08008e96 	.word	0x08008e96
 80072b4:	08008e9a 	.word	0x08008e9a
 80072b8:	00000000 	.word	0x00000000
 80072bc:	0800701d 	.word	0x0800701d

080072c0 <_printf_common>:
 80072c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c4:	4691      	mov	r9, r2
 80072c6:	461f      	mov	r7, r3
 80072c8:	688a      	ldr	r2, [r1, #8]
 80072ca:	690b      	ldr	r3, [r1, #16]
 80072cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072d0:	4293      	cmp	r3, r2
 80072d2:	bfb8      	it	lt
 80072d4:	4613      	movlt	r3, r2
 80072d6:	f8c9 3000 	str.w	r3, [r9]
 80072da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072de:	4606      	mov	r6, r0
 80072e0:	460c      	mov	r4, r1
 80072e2:	b112      	cbz	r2, 80072ea <_printf_common+0x2a>
 80072e4:	3301      	adds	r3, #1
 80072e6:	f8c9 3000 	str.w	r3, [r9]
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	0699      	lsls	r1, r3, #26
 80072ee:	bf42      	ittt	mi
 80072f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80072f4:	3302      	addmi	r3, #2
 80072f6:	f8c9 3000 	strmi.w	r3, [r9]
 80072fa:	6825      	ldr	r5, [r4, #0]
 80072fc:	f015 0506 	ands.w	r5, r5, #6
 8007300:	d107      	bne.n	8007312 <_printf_common+0x52>
 8007302:	f104 0a19 	add.w	sl, r4, #25
 8007306:	68e3      	ldr	r3, [r4, #12]
 8007308:	f8d9 2000 	ldr.w	r2, [r9]
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	42ab      	cmp	r3, r5
 8007310:	dc28      	bgt.n	8007364 <_printf_common+0xa4>
 8007312:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007316:	6822      	ldr	r2, [r4, #0]
 8007318:	3300      	adds	r3, #0
 800731a:	bf18      	it	ne
 800731c:	2301      	movne	r3, #1
 800731e:	0692      	lsls	r2, r2, #26
 8007320:	d42d      	bmi.n	800737e <_printf_common+0xbe>
 8007322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007326:	4639      	mov	r1, r7
 8007328:	4630      	mov	r0, r6
 800732a:	47c0      	blx	r8
 800732c:	3001      	adds	r0, #1
 800732e:	d020      	beq.n	8007372 <_printf_common+0xb2>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	68e5      	ldr	r5, [r4, #12]
 8007334:	f8d9 2000 	ldr.w	r2, [r9]
 8007338:	f003 0306 	and.w	r3, r3, #6
 800733c:	2b04      	cmp	r3, #4
 800733e:	bf08      	it	eq
 8007340:	1aad      	subeq	r5, r5, r2
 8007342:	68a3      	ldr	r3, [r4, #8]
 8007344:	6922      	ldr	r2, [r4, #16]
 8007346:	bf0c      	ite	eq
 8007348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800734c:	2500      	movne	r5, #0
 800734e:	4293      	cmp	r3, r2
 8007350:	bfc4      	itt	gt
 8007352:	1a9b      	subgt	r3, r3, r2
 8007354:	18ed      	addgt	r5, r5, r3
 8007356:	f04f 0900 	mov.w	r9, #0
 800735a:	341a      	adds	r4, #26
 800735c:	454d      	cmp	r5, r9
 800735e:	d11a      	bne.n	8007396 <_printf_common+0xd6>
 8007360:	2000      	movs	r0, #0
 8007362:	e008      	b.n	8007376 <_printf_common+0xb6>
 8007364:	2301      	movs	r3, #1
 8007366:	4652      	mov	r2, sl
 8007368:	4639      	mov	r1, r7
 800736a:	4630      	mov	r0, r6
 800736c:	47c0      	blx	r8
 800736e:	3001      	adds	r0, #1
 8007370:	d103      	bne.n	800737a <_printf_common+0xba>
 8007372:	f04f 30ff 	mov.w	r0, #4294967295
 8007376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737a:	3501      	adds	r5, #1
 800737c:	e7c3      	b.n	8007306 <_printf_common+0x46>
 800737e:	18e1      	adds	r1, r4, r3
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	2030      	movs	r0, #48	; 0x30
 8007384:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007388:	4422      	add	r2, r4
 800738a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800738e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007392:	3302      	adds	r3, #2
 8007394:	e7c5      	b.n	8007322 <_printf_common+0x62>
 8007396:	2301      	movs	r3, #1
 8007398:	4622      	mov	r2, r4
 800739a:	4639      	mov	r1, r7
 800739c:	4630      	mov	r0, r6
 800739e:	47c0      	blx	r8
 80073a0:	3001      	adds	r0, #1
 80073a2:	d0e6      	beq.n	8007372 <_printf_common+0xb2>
 80073a4:	f109 0901 	add.w	r9, r9, #1
 80073a8:	e7d8      	b.n	800735c <_printf_common+0x9c>
	...

080073ac <_printf_i>:
 80073ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80073b4:	460c      	mov	r4, r1
 80073b6:	7e09      	ldrb	r1, [r1, #24]
 80073b8:	b085      	sub	sp, #20
 80073ba:	296e      	cmp	r1, #110	; 0x6e
 80073bc:	4617      	mov	r7, r2
 80073be:	4606      	mov	r6, r0
 80073c0:	4698      	mov	r8, r3
 80073c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073c4:	f000 80b3 	beq.w	800752e <_printf_i+0x182>
 80073c8:	d822      	bhi.n	8007410 <_printf_i+0x64>
 80073ca:	2963      	cmp	r1, #99	; 0x63
 80073cc:	d036      	beq.n	800743c <_printf_i+0x90>
 80073ce:	d80a      	bhi.n	80073e6 <_printf_i+0x3a>
 80073d0:	2900      	cmp	r1, #0
 80073d2:	f000 80b9 	beq.w	8007548 <_printf_i+0x19c>
 80073d6:	2958      	cmp	r1, #88	; 0x58
 80073d8:	f000 8083 	beq.w	80074e2 <_printf_i+0x136>
 80073dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80073e4:	e032      	b.n	800744c <_printf_i+0xa0>
 80073e6:	2964      	cmp	r1, #100	; 0x64
 80073e8:	d001      	beq.n	80073ee <_printf_i+0x42>
 80073ea:	2969      	cmp	r1, #105	; 0x69
 80073ec:	d1f6      	bne.n	80073dc <_printf_i+0x30>
 80073ee:	6820      	ldr	r0, [r4, #0]
 80073f0:	6813      	ldr	r3, [r2, #0]
 80073f2:	0605      	lsls	r5, r0, #24
 80073f4:	f103 0104 	add.w	r1, r3, #4
 80073f8:	d52a      	bpl.n	8007450 <_printf_i+0xa4>
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6011      	str	r1, [r2, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	da03      	bge.n	800740a <_printf_i+0x5e>
 8007402:	222d      	movs	r2, #45	; 0x2d
 8007404:	425b      	negs	r3, r3
 8007406:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800740a:	486f      	ldr	r0, [pc, #444]	; (80075c8 <_printf_i+0x21c>)
 800740c:	220a      	movs	r2, #10
 800740e:	e039      	b.n	8007484 <_printf_i+0xd8>
 8007410:	2973      	cmp	r1, #115	; 0x73
 8007412:	f000 809d 	beq.w	8007550 <_printf_i+0x1a4>
 8007416:	d808      	bhi.n	800742a <_printf_i+0x7e>
 8007418:	296f      	cmp	r1, #111	; 0x6f
 800741a:	d020      	beq.n	800745e <_printf_i+0xb2>
 800741c:	2970      	cmp	r1, #112	; 0x70
 800741e:	d1dd      	bne.n	80073dc <_printf_i+0x30>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	f043 0320 	orr.w	r3, r3, #32
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	e003      	b.n	8007432 <_printf_i+0x86>
 800742a:	2975      	cmp	r1, #117	; 0x75
 800742c:	d017      	beq.n	800745e <_printf_i+0xb2>
 800742e:	2978      	cmp	r1, #120	; 0x78
 8007430:	d1d4      	bne.n	80073dc <_printf_i+0x30>
 8007432:	2378      	movs	r3, #120	; 0x78
 8007434:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007438:	4864      	ldr	r0, [pc, #400]	; (80075cc <_printf_i+0x220>)
 800743a:	e055      	b.n	80074e8 <_printf_i+0x13c>
 800743c:	6813      	ldr	r3, [r2, #0]
 800743e:	1d19      	adds	r1, r3, #4
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6011      	str	r1, [r2, #0]
 8007444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800744c:	2301      	movs	r3, #1
 800744e:	e08c      	b.n	800756a <_printf_i+0x1be>
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6011      	str	r1, [r2, #0]
 8007454:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007458:	bf18      	it	ne
 800745a:	b21b      	sxthne	r3, r3
 800745c:	e7cf      	b.n	80073fe <_printf_i+0x52>
 800745e:	6813      	ldr	r3, [r2, #0]
 8007460:	6825      	ldr	r5, [r4, #0]
 8007462:	1d18      	adds	r0, r3, #4
 8007464:	6010      	str	r0, [r2, #0]
 8007466:	0628      	lsls	r0, r5, #24
 8007468:	d501      	bpl.n	800746e <_printf_i+0xc2>
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	e002      	b.n	8007474 <_printf_i+0xc8>
 800746e:	0668      	lsls	r0, r5, #25
 8007470:	d5fb      	bpl.n	800746a <_printf_i+0xbe>
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	4854      	ldr	r0, [pc, #336]	; (80075c8 <_printf_i+0x21c>)
 8007476:	296f      	cmp	r1, #111	; 0x6f
 8007478:	bf14      	ite	ne
 800747a:	220a      	movne	r2, #10
 800747c:	2208      	moveq	r2, #8
 800747e:	2100      	movs	r1, #0
 8007480:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007484:	6865      	ldr	r5, [r4, #4]
 8007486:	60a5      	str	r5, [r4, #8]
 8007488:	2d00      	cmp	r5, #0
 800748a:	f2c0 8095 	blt.w	80075b8 <_printf_i+0x20c>
 800748e:	6821      	ldr	r1, [r4, #0]
 8007490:	f021 0104 	bic.w	r1, r1, #4
 8007494:	6021      	str	r1, [r4, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d13d      	bne.n	8007516 <_printf_i+0x16a>
 800749a:	2d00      	cmp	r5, #0
 800749c:	f040 808e 	bne.w	80075bc <_printf_i+0x210>
 80074a0:	4665      	mov	r5, ip
 80074a2:	2a08      	cmp	r2, #8
 80074a4:	d10b      	bne.n	80074be <_printf_i+0x112>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	07db      	lsls	r3, r3, #31
 80074aa:	d508      	bpl.n	80074be <_printf_i+0x112>
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	6862      	ldr	r2, [r4, #4]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	bfde      	ittt	le
 80074b4:	2330      	movle	r3, #48	; 0x30
 80074b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074be:	ebac 0305 	sub.w	r3, ip, r5
 80074c2:	6123      	str	r3, [r4, #16]
 80074c4:	f8cd 8000 	str.w	r8, [sp]
 80074c8:	463b      	mov	r3, r7
 80074ca:	aa03      	add	r2, sp, #12
 80074cc:	4621      	mov	r1, r4
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff fef6 	bl	80072c0 <_printf_common>
 80074d4:	3001      	adds	r0, #1
 80074d6:	d14d      	bne.n	8007574 <_printf_i+0x1c8>
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	b005      	add	sp, #20
 80074de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074e2:	4839      	ldr	r0, [pc, #228]	; (80075c8 <_printf_i+0x21c>)
 80074e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80074e8:	6813      	ldr	r3, [r2, #0]
 80074ea:	6821      	ldr	r1, [r4, #0]
 80074ec:	1d1d      	adds	r5, r3, #4
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6015      	str	r5, [r2, #0]
 80074f2:	060a      	lsls	r2, r1, #24
 80074f4:	d50b      	bpl.n	800750e <_printf_i+0x162>
 80074f6:	07ca      	lsls	r2, r1, #31
 80074f8:	bf44      	itt	mi
 80074fa:	f041 0120 	orrmi.w	r1, r1, #32
 80074fe:	6021      	strmi	r1, [r4, #0]
 8007500:	b91b      	cbnz	r3, 800750a <_printf_i+0x15e>
 8007502:	6822      	ldr	r2, [r4, #0]
 8007504:	f022 0220 	bic.w	r2, r2, #32
 8007508:	6022      	str	r2, [r4, #0]
 800750a:	2210      	movs	r2, #16
 800750c:	e7b7      	b.n	800747e <_printf_i+0xd2>
 800750e:	064d      	lsls	r5, r1, #25
 8007510:	bf48      	it	mi
 8007512:	b29b      	uxthmi	r3, r3
 8007514:	e7ef      	b.n	80074f6 <_printf_i+0x14a>
 8007516:	4665      	mov	r5, ip
 8007518:	fbb3 f1f2 	udiv	r1, r3, r2
 800751c:	fb02 3311 	mls	r3, r2, r1, r3
 8007520:	5cc3      	ldrb	r3, [r0, r3]
 8007522:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007526:	460b      	mov	r3, r1
 8007528:	2900      	cmp	r1, #0
 800752a:	d1f5      	bne.n	8007518 <_printf_i+0x16c>
 800752c:	e7b9      	b.n	80074a2 <_printf_i+0xf6>
 800752e:	6813      	ldr	r3, [r2, #0]
 8007530:	6825      	ldr	r5, [r4, #0]
 8007532:	6961      	ldr	r1, [r4, #20]
 8007534:	1d18      	adds	r0, r3, #4
 8007536:	6010      	str	r0, [r2, #0]
 8007538:	0628      	lsls	r0, r5, #24
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	d501      	bpl.n	8007542 <_printf_i+0x196>
 800753e:	6019      	str	r1, [r3, #0]
 8007540:	e002      	b.n	8007548 <_printf_i+0x19c>
 8007542:	066a      	lsls	r2, r5, #25
 8007544:	d5fb      	bpl.n	800753e <_printf_i+0x192>
 8007546:	8019      	strh	r1, [r3, #0]
 8007548:	2300      	movs	r3, #0
 800754a:	6123      	str	r3, [r4, #16]
 800754c:	4665      	mov	r5, ip
 800754e:	e7b9      	b.n	80074c4 <_printf_i+0x118>
 8007550:	6813      	ldr	r3, [r2, #0]
 8007552:	1d19      	adds	r1, r3, #4
 8007554:	6011      	str	r1, [r2, #0]
 8007556:	681d      	ldr	r5, [r3, #0]
 8007558:	6862      	ldr	r2, [r4, #4]
 800755a:	2100      	movs	r1, #0
 800755c:	4628      	mov	r0, r5
 800755e:	f7f8 fe5f 	bl	8000220 <memchr>
 8007562:	b108      	cbz	r0, 8007568 <_printf_i+0x1bc>
 8007564:	1b40      	subs	r0, r0, r5
 8007566:	6060      	str	r0, [r4, #4]
 8007568:	6863      	ldr	r3, [r4, #4]
 800756a:	6123      	str	r3, [r4, #16]
 800756c:	2300      	movs	r3, #0
 800756e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007572:	e7a7      	b.n	80074c4 <_printf_i+0x118>
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	462a      	mov	r2, r5
 8007578:	4639      	mov	r1, r7
 800757a:	4630      	mov	r0, r6
 800757c:	47c0      	blx	r8
 800757e:	3001      	adds	r0, #1
 8007580:	d0aa      	beq.n	80074d8 <_printf_i+0x12c>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	079b      	lsls	r3, r3, #30
 8007586:	d413      	bmi.n	80075b0 <_printf_i+0x204>
 8007588:	68e0      	ldr	r0, [r4, #12]
 800758a:	9b03      	ldr	r3, [sp, #12]
 800758c:	4298      	cmp	r0, r3
 800758e:	bfb8      	it	lt
 8007590:	4618      	movlt	r0, r3
 8007592:	e7a3      	b.n	80074dc <_printf_i+0x130>
 8007594:	2301      	movs	r3, #1
 8007596:	464a      	mov	r2, r9
 8007598:	4639      	mov	r1, r7
 800759a:	4630      	mov	r0, r6
 800759c:	47c0      	blx	r8
 800759e:	3001      	adds	r0, #1
 80075a0:	d09a      	beq.n	80074d8 <_printf_i+0x12c>
 80075a2:	3501      	adds	r5, #1
 80075a4:	68e3      	ldr	r3, [r4, #12]
 80075a6:	9a03      	ldr	r2, [sp, #12]
 80075a8:	1a9b      	subs	r3, r3, r2
 80075aa:	42ab      	cmp	r3, r5
 80075ac:	dcf2      	bgt.n	8007594 <_printf_i+0x1e8>
 80075ae:	e7eb      	b.n	8007588 <_printf_i+0x1dc>
 80075b0:	2500      	movs	r5, #0
 80075b2:	f104 0919 	add.w	r9, r4, #25
 80075b6:	e7f5      	b.n	80075a4 <_printf_i+0x1f8>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1ac      	bne.n	8007516 <_printf_i+0x16a>
 80075bc:	7803      	ldrb	r3, [r0, #0]
 80075be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c6:	e76c      	b.n	80074a2 <_printf_i+0xf6>
 80075c8:	08008ea1 	.word	0x08008ea1
 80075cc:	08008eb2 	.word	0x08008eb2

080075d0 <memmove>:
 80075d0:	4288      	cmp	r0, r1
 80075d2:	b510      	push	{r4, lr}
 80075d4:	eb01 0302 	add.w	r3, r1, r2
 80075d8:	d807      	bhi.n	80075ea <memmove+0x1a>
 80075da:	1e42      	subs	r2, r0, #1
 80075dc:	4299      	cmp	r1, r3
 80075de:	d00a      	beq.n	80075f6 <memmove+0x26>
 80075e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80075e8:	e7f8      	b.n	80075dc <memmove+0xc>
 80075ea:	4283      	cmp	r3, r0
 80075ec:	d9f5      	bls.n	80075da <memmove+0xa>
 80075ee:	1881      	adds	r1, r0, r2
 80075f0:	1ad2      	subs	r2, r2, r3
 80075f2:	42d3      	cmn	r3, r2
 80075f4:	d100      	bne.n	80075f8 <memmove+0x28>
 80075f6:	bd10      	pop	{r4, pc}
 80075f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007600:	e7f7      	b.n	80075f2 <memmove+0x22>
	...

08007604 <_free_r>:
 8007604:	b538      	push	{r3, r4, r5, lr}
 8007606:	4605      	mov	r5, r0
 8007608:	2900      	cmp	r1, #0
 800760a:	d045      	beq.n	8007698 <_free_r+0x94>
 800760c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007610:	1f0c      	subs	r4, r1, #4
 8007612:	2b00      	cmp	r3, #0
 8007614:	bfb8      	it	lt
 8007616:	18e4      	addlt	r4, r4, r3
 8007618:	f000 f8d2 	bl	80077c0 <__malloc_lock>
 800761c:	4a1f      	ldr	r2, [pc, #124]	; (800769c <_free_r+0x98>)
 800761e:	6813      	ldr	r3, [r2, #0]
 8007620:	4610      	mov	r0, r2
 8007622:	b933      	cbnz	r3, 8007632 <_free_r+0x2e>
 8007624:	6063      	str	r3, [r4, #4]
 8007626:	6014      	str	r4, [r2, #0]
 8007628:	4628      	mov	r0, r5
 800762a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800762e:	f000 b8c8 	b.w	80077c2 <__malloc_unlock>
 8007632:	42a3      	cmp	r3, r4
 8007634:	d90c      	bls.n	8007650 <_free_r+0x4c>
 8007636:	6821      	ldr	r1, [r4, #0]
 8007638:	1862      	adds	r2, r4, r1
 800763a:	4293      	cmp	r3, r2
 800763c:	bf04      	itt	eq
 800763e:	681a      	ldreq	r2, [r3, #0]
 8007640:	685b      	ldreq	r3, [r3, #4]
 8007642:	6063      	str	r3, [r4, #4]
 8007644:	bf04      	itt	eq
 8007646:	1852      	addeq	r2, r2, r1
 8007648:	6022      	streq	r2, [r4, #0]
 800764a:	6004      	str	r4, [r0, #0]
 800764c:	e7ec      	b.n	8007628 <_free_r+0x24>
 800764e:	4613      	mov	r3, r2
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	b10a      	cbz	r2, 8007658 <_free_r+0x54>
 8007654:	42a2      	cmp	r2, r4
 8007656:	d9fa      	bls.n	800764e <_free_r+0x4a>
 8007658:	6819      	ldr	r1, [r3, #0]
 800765a:	1858      	adds	r0, r3, r1
 800765c:	42a0      	cmp	r0, r4
 800765e:	d10b      	bne.n	8007678 <_free_r+0x74>
 8007660:	6820      	ldr	r0, [r4, #0]
 8007662:	4401      	add	r1, r0
 8007664:	1858      	adds	r0, r3, r1
 8007666:	4282      	cmp	r2, r0
 8007668:	6019      	str	r1, [r3, #0]
 800766a:	d1dd      	bne.n	8007628 <_free_r+0x24>
 800766c:	6810      	ldr	r0, [r2, #0]
 800766e:	6852      	ldr	r2, [r2, #4]
 8007670:	605a      	str	r2, [r3, #4]
 8007672:	4401      	add	r1, r0
 8007674:	6019      	str	r1, [r3, #0]
 8007676:	e7d7      	b.n	8007628 <_free_r+0x24>
 8007678:	d902      	bls.n	8007680 <_free_r+0x7c>
 800767a:	230c      	movs	r3, #12
 800767c:	602b      	str	r3, [r5, #0]
 800767e:	e7d3      	b.n	8007628 <_free_r+0x24>
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	1821      	adds	r1, r4, r0
 8007684:	428a      	cmp	r2, r1
 8007686:	bf04      	itt	eq
 8007688:	6811      	ldreq	r1, [r2, #0]
 800768a:	6852      	ldreq	r2, [r2, #4]
 800768c:	6062      	str	r2, [r4, #4]
 800768e:	bf04      	itt	eq
 8007690:	1809      	addeq	r1, r1, r0
 8007692:	6021      	streq	r1, [r4, #0]
 8007694:	605c      	str	r4, [r3, #4]
 8007696:	e7c7      	b.n	8007628 <_free_r+0x24>
 8007698:	bd38      	pop	{r3, r4, r5, pc}
 800769a:	bf00      	nop
 800769c:	20000a30 	.word	0x20000a30

080076a0 <_malloc_r>:
 80076a0:	b570      	push	{r4, r5, r6, lr}
 80076a2:	1ccd      	adds	r5, r1, #3
 80076a4:	f025 0503 	bic.w	r5, r5, #3
 80076a8:	3508      	adds	r5, #8
 80076aa:	2d0c      	cmp	r5, #12
 80076ac:	bf38      	it	cc
 80076ae:	250c      	movcc	r5, #12
 80076b0:	2d00      	cmp	r5, #0
 80076b2:	4606      	mov	r6, r0
 80076b4:	db01      	blt.n	80076ba <_malloc_r+0x1a>
 80076b6:	42a9      	cmp	r1, r5
 80076b8:	d903      	bls.n	80076c2 <_malloc_r+0x22>
 80076ba:	230c      	movs	r3, #12
 80076bc:	6033      	str	r3, [r6, #0]
 80076be:	2000      	movs	r0, #0
 80076c0:	bd70      	pop	{r4, r5, r6, pc}
 80076c2:	f000 f87d 	bl	80077c0 <__malloc_lock>
 80076c6:	4a21      	ldr	r2, [pc, #132]	; (800774c <_malloc_r+0xac>)
 80076c8:	6814      	ldr	r4, [r2, #0]
 80076ca:	4621      	mov	r1, r4
 80076cc:	b991      	cbnz	r1, 80076f4 <_malloc_r+0x54>
 80076ce:	4c20      	ldr	r4, [pc, #128]	; (8007750 <_malloc_r+0xb0>)
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	b91b      	cbnz	r3, 80076dc <_malloc_r+0x3c>
 80076d4:	4630      	mov	r0, r6
 80076d6:	f000 f863 	bl	80077a0 <_sbrk_r>
 80076da:	6020      	str	r0, [r4, #0]
 80076dc:	4629      	mov	r1, r5
 80076de:	4630      	mov	r0, r6
 80076e0:	f000 f85e 	bl	80077a0 <_sbrk_r>
 80076e4:	1c43      	adds	r3, r0, #1
 80076e6:	d124      	bne.n	8007732 <_malloc_r+0x92>
 80076e8:	230c      	movs	r3, #12
 80076ea:	6033      	str	r3, [r6, #0]
 80076ec:	4630      	mov	r0, r6
 80076ee:	f000 f868 	bl	80077c2 <__malloc_unlock>
 80076f2:	e7e4      	b.n	80076be <_malloc_r+0x1e>
 80076f4:	680b      	ldr	r3, [r1, #0]
 80076f6:	1b5b      	subs	r3, r3, r5
 80076f8:	d418      	bmi.n	800772c <_malloc_r+0x8c>
 80076fa:	2b0b      	cmp	r3, #11
 80076fc:	d90f      	bls.n	800771e <_malloc_r+0x7e>
 80076fe:	600b      	str	r3, [r1, #0]
 8007700:	50cd      	str	r5, [r1, r3]
 8007702:	18cc      	adds	r4, r1, r3
 8007704:	4630      	mov	r0, r6
 8007706:	f000 f85c 	bl	80077c2 <__malloc_unlock>
 800770a:	f104 000b 	add.w	r0, r4, #11
 800770e:	1d23      	adds	r3, r4, #4
 8007710:	f020 0007 	bic.w	r0, r0, #7
 8007714:	1ac3      	subs	r3, r0, r3
 8007716:	d0d3      	beq.n	80076c0 <_malloc_r+0x20>
 8007718:	425a      	negs	r2, r3
 800771a:	50e2      	str	r2, [r4, r3]
 800771c:	e7d0      	b.n	80076c0 <_malloc_r+0x20>
 800771e:	428c      	cmp	r4, r1
 8007720:	684b      	ldr	r3, [r1, #4]
 8007722:	bf16      	itet	ne
 8007724:	6063      	strne	r3, [r4, #4]
 8007726:	6013      	streq	r3, [r2, #0]
 8007728:	460c      	movne	r4, r1
 800772a:	e7eb      	b.n	8007704 <_malloc_r+0x64>
 800772c:	460c      	mov	r4, r1
 800772e:	6849      	ldr	r1, [r1, #4]
 8007730:	e7cc      	b.n	80076cc <_malloc_r+0x2c>
 8007732:	1cc4      	adds	r4, r0, #3
 8007734:	f024 0403 	bic.w	r4, r4, #3
 8007738:	42a0      	cmp	r0, r4
 800773a:	d005      	beq.n	8007748 <_malloc_r+0xa8>
 800773c:	1a21      	subs	r1, r4, r0
 800773e:	4630      	mov	r0, r6
 8007740:	f000 f82e 	bl	80077a0 <_sbrk_r>
 8007744:	3001      	adds	r0, #1
 8007746:	d0cf      	beq.n	80076e8 <_malloc_r+0x48>
 8007748:	6025      	str	r5, [r4, #0]
 800774a:	e7db      	b.n	8007704 <_malloc_r+0x64>
 800774c:	20000a30 	.word	0x20000a30
 8007750:	20000a34 	.word	0x20000a34

08007754 <_realloc_r>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	4607      	mov	r7, r0
 8007758:	4614      	mov	r4, r2
 800775a:	460e      	mov	r6, r1
 800775c:	b921      	cbnz	r1, 8007768 <_realloc_r+0x14>
 800775e:	4611      	mov	r1, r2
 8007760:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007764:	f7ff bf9c 	b.w	80076a0 <_malloc_r>
 8007768:	b922      	cbnz	r2, 8007774 <_realloc_r+0x20>
 800776a:	f7ff ff4b 	bl	8007604 <_free_r>
 800776e:	4625      	mov	r5, r4
 8007770:	4628      	mov	r0, r5
 8007772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007774:	f000 f826 	bl	80077c4 <_malloc_usable_size_r>
 8007778:	42a0      	cmp	r0, r4
 800777a:	d20f      	bcs.n	800779c <_realloc_r+0x48>
 800777c:	4621      	mov	r1, r4
 800777e:	4638      	mov	r0, r7
 8007780:	f7ff ff8e 	bl	80076a0 <_malloc_r>
 8007784:	4605      	mov	r5, r0
 8007786:	2800      	cmp	r0, #0
 8007788:	d0f2      	beq.n	8007770 <_realloc_r+0x1c>
 800778a:	4631      	mov	r1, r6
 800778c:	4622      	mov	r2, r4
 800778e:	f7ff fc11 	bl	8006fb4 <memcpy>
 8007792:	4631      	mov	r1, r6
 8007794:	4638      	mov	r0, r7
 8007796:	f7ff ff35 	bl	8007604 <_free_r>
 800779a:	e7e9      	b.n	8007770 <_realloc_r+0x1c>
 800779c:	4635      	mov	r5, r6
 800779e:	e7e7      	b.n	8007770 <_realloc_r+0x1c>

080077a0 <_sbrk_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4c06      	ldr	r4, [pc, #24]	; (80077bc <_sbrk_r+0x1c>)
 80077a4:	2300      	movs	r3, #0
 80077a6:	4605      	mov	r5, r0
 80077a8:	4608      	mov	r0, r1
 80077aa:	6023      	str	r3, [r4, #0]
 80077ac:	f7fc f948 	bl	8003a40 <_sbrk>
 80077b0:	1c43      	adds	r3, r0, #1
 80077b2:	d102      	bne.n	80077ba <_sbrk_r+0x1a>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	b103      	cbz	r3, 80077ba <_sbrk_r+0x1a>
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	bd38      	pop	{r3, r4, r5, pc}
 80077bc:	2000376c 	.word	0x2000376c

080077c0 <__malloc_lock>:
 80077c0:	4770      	bx	lr

080077c2 <__malloc_unlock>:
 80077c2:	4770      	bx	lr

080077c4 <_malloc_usable_size_r>:
 80077c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077c8:	1f18      	subs	r0, r3, #4
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	bfbc      	itt	lt
 80077ce:	580b      	ldrlt	r3, [r1, r0]
 80077d0:	18c0      	addlt	r0, r0, r3
 80077d2:	4770      	bx	lr

080077d4 <pow>:
 80077d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d8:	ed2d 8b04 	vpush	{d8-d9}
 80077dc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007ab0 <pow+0x2dc>
 80077e0:	b08d      	sub	sp, #52	; 0x34
 80077e2:	ec57 6b10 	vmov	r6, r7, d0
 80077e6:	ec55 4b11 	vmov	r4, r5, d1
 80077ea:	f000 f965 	bl	8007ab8 <__ieee754_pow>
 80077ee:	f999 3000 	ldrsb.w	r3, [r9]
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	3301      	adds	r3, #1
 80077f6:	eeb0 8a40 	vmov.f32	s16, s0
 80077fa:	eef0 8a60 	vmov.f32	s17, s1
 80077fe:	46c8      	mov	r8, r9
 8007800:	d05f      	beq.n	80078c2 <pow+0xee>
 8007802:	4622      	mov	r2, r4
 8007804:	462b      	mov	r3, r5
 8007806:	4620      	mov	r0, r4
 8007808:	4629      	mov	r1, r5
 800780a:	f7f9 f9af 	bl	8000b6c <__aeabi_dcmpun>
 800780e:	4683      	mov	fp, r0
 8007810:	2800      	cmp	r0, #0
 8007812:	d156      	bne.n	80078c2 <pow+0xee>
 8007814:	4632      	mov	r2, r6
 8007816:	463b      	mov	r3, r7
 8007818:	4630      	mov	r0, r6
 800781a:	4639      	mov	r1, r7
 800781c:	f7f9 f9a6 	bl	8000b6c <__aeabi_dcmpun>
 8007820:	9001      	str	r0, [sp, #4]
 8007822:	b1e8      	cbz	r0, 8007860 <pow+0x8c>
 8007824:	2200      	movs	r2, #0
 8007826:	2300      	movs	r3, #0
 8007828:	4620      	mov	r0, r4
 800782a:	4629      	mov	r1, r5
 800782c:	f7f9 f96c 	bl	8000b08 <__aeabi_dcmpeq>
 8007830:	2800      	cmp	r0, #0
 8007832:	d046      	beq.n	80078c2 <pow+0xee>
 8007834:	2301      	movs	r3, #1
 8007836:	9302      	str	r3, [sp, #8]
 8007838:	4b96      	ldr	r3, [pc, #600]	; (8007a94 <pow+0x2c0>)
 800783a:	9303      	str	r3, [sp, #12]
 800783c:	4b96      	ldr	r3, [pc, #600]	; (8007a98 <pow+0x2c4>)
 800783e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007842:	2200      	movs	r2, #0
 8007844:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007848:	9b00      	ldr	r3, [sp, #0]
 800784a:	2b02      	cmp	r3, #2
 800784c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007850:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007854:	d033      	beq.n	80078be <pow+0xea>
 8007856:	a802      	add	r0, sp, #8
 8007858:	f000 fefd 	bl	8008656 <matherr>
 800785c:	bb48      	cbnz	r0, 80078b2 <pow+0xde>
 800785e:	e05d      	b.n	800791c <pow+0x148>
 8007860:	f04f 0a00 	mov.w	sl, #0
 8007864:	f04f 0b00 	mov.w	fp, #0
 8007868:	4652      	mov	r2, sl
 800786a:	465b      	mov	r3, fp
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f7f9 f94a 	bl	8000b08 <__aeabi_dcmpeq>
 8007874:	ec4b ab19 	vmov	d9, sl, fp
 8007878:	2800      	cmp	r0, #0
 800787a:	d054      	beq.n	8007926 <pow+0x152>
 800787c:	4652      	mov	r2, sl
 800787e:	465b      	mov	r3, fp
 8007880:	4620      	mov	r0, r4
 8007882:	4629      	mov	r1, r5
 8007884:	f7f9 f940 	bl	8000b08 <__aeabi_dcmpeq>
 8007888:	4680      	mov	r8, r0
 800788a:	b318      	cbz	r0, 80078d4 <pow+0x100>
 800788c:	2301      	movs	r3, #1
 800788e:	9302      	str	r3, [sp, #8]
 8007890:	4b80      	ldr	r3, [pc, #512]	; (8007a94 <pow+0x2c0>)
 8007892:	9303      	str	r3, [sp, #12]
 8007894:	9b01      	ldr	r3, [sp, #4]
 8007896:	930a      	str	r3, [sp, #40]	; 0x28
 8007898:	9b00      	ldr	r3, [sp, #0]
 800789a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800789e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80078a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0d5      	beq.n	8007856 <pow+0x82>
 80078aa:	4b7b      	ldr	r3, [pc, #492]	; (8007a98 <pow+0x2c4>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b4:	b11b      	cbz	r3, 80078be <pow+0xea>
 80078b6:	f7ff fb53 	bl	8006f60 <__errno>
 80078ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078bc:	6003      	str	r3, [r0, #0]
 80078be:	ed9d 8b08 	vldr	d8, [sp, #32]
 80078c2:	eeb0 0a48 	vmov.f32	s0, s16
 80078c6:	eef0 0a68 	vmov.f32	s1, s17
 80078ca:	b00d      	add	sp, #52	; 0x34
 80078cc:	ecbd 8b04 	vpop	{d8-d9}
 80078d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d4:	ec45 4b10 	vmov	d0, r4, r5
 80078d8:	f000 feb5 	bl	8008646 <finite>
 80078dc:	2800      	cmp	r0, #0
 80078de:	d0f0      	beq.n	80078c2 <pow+0xee>
 80078e0:	4652      	mov	r2, sl
 80078e2:	465b      	mov	r3, fp
 80078e4:	4620      	mov	r0, r4
 80078e6:	4629      	mov	r1, r5
 80078e8:	f7f9 f918 	bl	8000b1c <__aeabi_dcmplt>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d0e8      	beq.n	80078c2 <pow+0xee>
 80078f0:	2301      	movs	r3, #1
 80078f2:	9302      	str	r3, [sp, #8]
 80078f4:	4b67      	ldr	r3, [pc, #412]	; (8007a94 <pow+0x2c0>)
 80078f6:	9303      	str	r3, [sp, #12]
 80078f8:	f999 3000 	ldrsb.w	r3, [r9]
 80078fc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007900:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007904:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007908:	b913      	cbnz	r3, 8007910 <pow+0x13c>
 800790a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800790e:	e7a2      	b.n	8007856 <pow+0x82>
 8007910:	4962      	ldr	r1, [pc, #392]	; (8007a9c <pow+0x2c8>)
 8007912:	2000      	movs	r0, #0
 8007914:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007918:	2b02      	cmp	r3, #2
 800791a:	d19c      	bne.n	8007856 <pow+0x82>
 800791c:	f7ff fb20 	bl	8006f60 <__errno>
 8007920:	2321      	movs	r3, #33	; 0x21
 8007922:	6003      	str	r3, [r0, #0]
 8007924:	e7c5      	b.n	80078b2 <pow+0xde>
 8007926:	eeb0 0a48 	vmov.f32	s0, s16
 800792a:	eef0 0a68 	vmov.f32	s1, s17
 800792e:	f000 fe8a 	bl	8008646 <finite>
 8007932:	9000      	str	r0, [sp, #0]
 8007934:	2800      	cmp	r0, #0
 8007936:	f040 8081 	bne.w	8007a3c <pow+0x268>
 800793a:	ec47 6b10 	vmov	d0, r6, r7
 800793e:	f000 fe82 	bl	8008646 <finite>
 8007942:	2800      	cmp	r0, #0
 8007944:	d07a      	beq.n	8007a3c <pow+0x268>
 8007946:	ec45 4b10 	vmov	d0, r4, r5
 800794a:	f000 fe7c 	bl	8008646 <finite>
 800794e:	2800      	cmp	r0, #0
 8007950:	d074      	beq.n	8007a3c <pow+0x268>
 8007952:	ec53 2b18 	vmov	r2, r3, d8
 8007956:	ee18 0a10 	vmov	r0, s16
 800795a:	4619      	mov	r1, r3
 800795c:	f7f9 f906 	bl	8000b6c <__aeabi_dcmpun>
 8007960:	f999 9000 	ldrsb.w	r9, [r9]
 8007964:	4b4b      	ldr	r3, [pc, #300]	; (8007a94 <pow+0x2c0>)
 8007966:	b1b0      	cbz	r0, 8007996 <pow+0x1c2>
 8007968:	2201      	movs	r2, #1
 800796a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800796e:	9b00      	ldr	r3, [sp, #0]
 8007970:	930a      	str	r3, [sp, #40]	; 0x28
 8007972:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007976:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800797a:	f1b9 0f00 	cmp.w	r9, #0
 800797e:	d0c4      	beq.n	800790a <pow+0x136>
 8007980:	4652      	mov	r2, sl
 8007982:	465b      	mov	r3, fp
 8007984:	4650      	mov	r0, sl
 8007986:	4659      	mov	r1, fp
 8007988:	f7f8 ff80 	bl	800088c <__aeabi_ddiv>
 800798c:	f1b9 0f02 	cmp.w	r9, #2
 8007990:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007994:	e7c1      	b.n	800791a <pow+0x146>
 8007996:	2203      	movs	r2, #3
 8007998:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800799c:	900a      	str	r0, [sp, #40]	; 0x28
 800799e:	4629      	mov	r1, r5
 80079a0:	4620      	mov	r0, r4
 80079a2:	2200      	movs	r2, #0
 80079a4:	4b3e      	ldr	r3, [pc, #248]	; (8007aa0 <pow+0x2cc>)
 80079a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80079aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80079ae:	f7f8 fe43 	bl	8000638 <__aeabi_dmul>
 80079b2:	4604      	mov	r4, r0
 80079b4:	460d      	mov	r5, r1
 80079b6:	f1b9 0f00 	cmp.w	r9, #0
 80079ba:	d124      	bne.n	8007a06 <pow+0x232>
 80079bc:	4b39      	ldr	r3, [pc, #228]	; (8007aa4 <pow+0x2d0>)
 80079be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80079c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079c6:	4630      	mov	r0, r6
 80079c8:	4652      	mov	r2, sl
 80079ca:	465b      	mov	r3, fp
 80079cc:	4639      	mov	r1, r7
 80079ce:	f7f9 f8a5 	bl	8000b1c <__aeabi_dcmplt>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d056      	beq.n	8007a84 <pow+0x2b0>
 80079d6:	ec45 4b10 	vmov	d0, r4, r5
 80079da:	f000 fe49 	bl	8008670 <rint>
 80079de:	4622      	mov	r2, r4
 80079e0:	462b      	mov	r3, r5
 80079e2:	ec51 0b10 	vmov	r0, r1, d0
 80079e6:	f7f9 f88f 	bl	8000b08 <__aeabi_dcmpeq>
 80079ea:	b920      	cbnz	r0, 80079f6 <pow+0x222>
 80079ec:	4b2e      	ldr	r3, [pc, #184]	; (8007aa8 <pow+0x2d4>)
 80079ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80079f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079f6:	f998 3000 	ldrsb.w	r3, [r8]
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d142      	bne.n	8007a84 <pow+0x2b0>
 80079fe:	f7ff faaf 	bl	8006f60 <__errno>
 8007a02:	2322      	movs	r3, #34	; 0x22
 8007a04:	e78d      	b.n	8007922 <pow+0x14e>
 8007a06:	4b29      	ldr	r3, [pc, #164]	; (8007aac <pow+0x2d8>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a0e:	4630      	mov	r0, r6
 8007a10:	4652      	mov	r2, sl
 8007a12:	465b      	mov	r3, fp
 8007a14:	4639      	mov	r1, r7
 8007a16:	f7f9 f881 	bl	8000b1c <__aeabi_dcmplt>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d0eb      	beq.n	80079f6 <pow+0x222>
 8007a1e:	ec45 4b10 	vmov	d0, r4, r5
 8007a22:	f000 fe25 	bl	8008670 <rint>
 8007a26:	4622      	mov	r2, r4
 8007a28:	462b      	mov	r3, r5
 8007a2a:	ec51 0b10 	vmov	r0, r1, d0
 8007a2e:	f7f9 f86b 	bl	8000b08 <__aeabi_dcmpeq>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d1df      	bne.n	80079f6 <pow+0x222>
 8007a36:	2200      	movs	r2, #0
 8007a38:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <pow+0x2c8>)
 8007a3a:	e7da      	b.n	80079f2 <pow+0x21e>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2300      	movs	r3, #0
 8007a40:	ec51 0b18 	vmov	r0, r1, d8
 8007a44:	f7f9 f860 	bl	8000b08 <__aeabi_dcmpeq>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	f43f af3a 	beq.w	80078c2 <pow+0xee>
 8007a4e:	ec47 6b10 	vmov	d0, r6, r7
 8007a52:	f000 fdf8 	bl	8008646 <finite>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f43f af33 	beq.w	80078c2 <pow+0xee>
 8007a5c:	ec45 4b10 	vmov	d0, r4, r5
 8007a60:	f000 fdf1 	bl	8008646 <finite>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f43f af2c 	beq.w	80078c2 <pow+0xee>
 8007a6a:	2304      	movs	r3, #4
 8007a6c:	9302      	str	r3, [sp, #8]
 8007a6e:	4b09      	ldr	r3, [pc, #36]	; (8007a94 <pow+0x2c0>)
 8007a70:	9303      	str	r3, [sp, #12]
 8007a72:	2300      	movs	r3, #0
 8007a74:	930a      	str	r3, [sp, #40]	; 0x28
 8007a76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007a7a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007a7e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007a82:	e7b8      	b.n	80079f6 <pow+0x222>
 8007a84:	a802      	add	r0, sp, #8
 8007a86:	f000 fde6 	bl	8008656 <matherr>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	f47f af11 	bne.w	80078b2 <pow+0xde>
 8007a90:	e7b5      	b.n	80079fe <pow+0x22a>
 8007a92:	bf00      	nop
 8007a94:	08008ec3 	.word	0x08008ec3
 8007a98:	3ff00000 	.word	0x3ff00000
 8007a9c:	fff00000 	.word	0xfff00000
 8007aa0:	3fe00000 	.word	0x3fe00000
 8007aa4:	47efffff 	.word	0x47efffff
 8007aa8:	c7efffff 	.word	0xc7efffff
 8007aac:	7ff00000 	.word	0x7ff00000
 8007ab0:	200009e4 	.word	0x200009e4
 8007ab4:	00000000 	.word	0x00000000

08007ab8 <__ieee754_pow>:
 8007ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	b091      	sub	sp, #68	; 0x44
 8007abe:	ed8d 1b00 	vstr	d1, [sp]
 8007ac2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007ac6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007aca:	ea58 0302 	orrs.w	r3, r8, r2
 8007ace:	ec57 6b10 	vmov	r6, r7, d0
 8007ad2:	f000 84be 	beq.w	8008452 <__ieee754_pow+0x99a>
 8007ad6:	4b7a      	ldr	r3, [pc, #488]	; (8007cc0 <__ieee754_pow+0x208>)
 8007ad8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007adc:	429c      	cmp	r4, r3
 8007ade:	463d      	mov	r5, r7
 8007ae0:	ee10 aa10 	vmov	sl, s0
 8007ae4:	dc09      	bgt.n	8007afa <__ieee754_pow+0x42>
 8007ae6:	d103      	bne.n	8007af0 <__ieee754_pow+0x38>
 8007ae8:	b93e      	cbnz	r6, 8007afa <__ieee754_pow+0x42>
 8007aea:	45a0      	cmp	r8, r4
 8007aec:	dc0d      	bgt.n	8007b0a <__ieee754_pow+0x52>
 8007aee:	e001      	b.n	8007af4 <__ieee754_pow+0x3c>
 8007af0:	4598      	cmp	r8, r3
 8007af2:	dc02      	bgt.n	8007afa <__ieee754_pow+0x42>
 8007af4:	4598      	cmp	r8, r3
 8007af6:	d10e      	bne.n	8007b16 <__ieee754_pow+0x5e>
 8007af8:	b16a      	cbz	r2, 8007b16 <__ieee754_pow+0x5e>
 8007afa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007afe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007b02:	ea54 030a 	orrs.w	r3, r4, sl
 8007b06:	f000 84a4 	beq.w	8008452 <__ieee754_pow+0x99a>
 8007b0a:	486e      	ldr	r0, [pc, #440]	; (8007cc4 <__ieee754_pow+0x20c>)
 8007b0c:	b011      	add	sp, #68	; 0x44
 8007b0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b12:	f000 bda5 	b.w	8008660 <nan>
 8007b16:	2d00      	cmp	r5, #0
 8007b18:	da53      	bge.n	8007bc2 <__ieee754_pow+0x10a>
 8007b1a:	4b6b      	ldr	r3, [pc, #428]	; (8007cc8 <__ieee754_pow+0x210>)
 8007b1c:	4598      	cmp	r8, r3
 8007b1e:	dc4d      	bgt.n	8007bbc <__ieee754_pow+0x104>
 8007b20:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007b24:	4598      	cmp	r8, r3
 8007b26:	dd4c      	ble.n	8007bc2 <__ieee754_pow+0x10a>
 8007b28:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007b2c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007b30:	2b14      	cmp	r3, #20
 8007b32:	dd26      	ble.n	8007b82 <__ieee754_pow+0xca>
 8007b34:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007b38:	fa22 f103 	lsr.w	r1, r2, r3
 8007b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d13e      	bne.n	8007bc2 <__ieee754_pow+0x10a>
 8007b44:	f001 0101 	and.w	r1, r1, #1
 8007b48:	f1c1 0b02 	rsb	fp, r1, #2
 8007b4c:	2a00      	cmp	r2, #0
 8007b4e:	d15b      	bne.n	8007c08 <__ieee754_pow+0x150>
 8007b50:	4b5b      	ldr	r3, [pc, #364]	; (8007cc0 <__ieee754_pow+0x208>)
 8007b52:	4598      	cmp	r8, r3
 8007b54:	d124      	bne.n	8007ba0 <__ieee754_pow+0xe8>
 8007b56:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007b5a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007b5e:	ea53 030a 	orrs.w	r3, r3, sl
 8007b62:	f000 8476 	beq.w	8008452 <__ieee754_pow+0x99a>
 8007b66:	4b59      	ldr	r3, [pc, #356]	; (8007ccc <__ieee754_pow+0x214>)
 8007b68:	429c      	cmp	r4, r3
 8007b6a:	dd2d      	ble.n	8007bc8 <__ieee754_pow+0x110>
 8007b6c:	f1b9 0f00 	cmp.w	r9, #0
 8007b70:	f280 8473 	bge.w	800845a <__ieee754_pow+0x9a2>
 8007b74:	2000      	movs	r0, #0
 8007b76:	2100      	movs	r1, #0
 8007b78:	ec41 0b10 	vmov	d0, r0, r1
 8007b7c:	b011      	add	sp, #68	; 0x44
 8007b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	d13e      	bne.n	8007c04 <__ieee754_pow+0x14c>
 8007b86:	f1c3 0314 	rsb	r3, r3, #20
 8007b8a:	fa48 f103 	asr.w	r1, r8, r3
 8007b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b92:	4543      	cmp	r3, r8
 8007b94:	f040 8469 	bne.w	800846a <__ieee754_pow+0x9b2>
 8007b98:	f001 0101 	and.w	r1, r1, #1
 8007b9c:	f1c1 0b02 	rsb	fp, r1, #2
 8007ba0:	4b4b      	ldr	r3, [pc, #300]	; (8007cd0 <__ieee754_pow+0x218>)
 8007ba2:	4598      	cmp	r8, r3
 8007ba4:	d118      	bne.n	8007bd8 <__ieee754_pow+0x120>
 8007ba6:	f1b9 0f00 	cmp.w	r9, #0
 8007baa:	f280 845a 	bge.w	8008462 <__ieee754_pow+0x9aa>
 8007bae:	4948      	ldr	r1, [pc, #288]	; (8007cd0 <__ieee754_pow+0x218>)
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f7f8 fe69 	bl	800088c <__aeabi_ddiv>
 8007bba:	e7dd      	b.n	8007b78 <__ieee754_pow+0xc0>
 8007bbc:	f04f 0b02 	mov.w	fp, #2
 8007bc0:	e7c4      	b.n	8007b4c <__ieee754_pow+0x94>
 8007bc2:	f04f 0b00 	mov.w	fp, #0
 8007bc6:	e7c1      	b.n	8007b4c <__ieee754_pow+0x94>
 8007bc8:	f1b9 0f00 	cmp.w	r9, #0
 8007bcc:	dad2      	bge.n	8007b74 <__ieee754_pow+0xbc>
 8007bce:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007bd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007bd6:	e7cf      	b.n	8007b78 <__ieee754_pow+0xc0>
 8007bd8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007bdc:	d106      	bne.n	8007bec <__ieee754_pow+0x134>
 8007bde:	4632      	mov	r2, r6
 8007be0:	463b      	mov	r3, r7
 8007be2:	4610      	mov	r0, r2
 8007be4:	4619      	mov	r1, r3
 8007be6:	f7f8 fd27 	bl	8000638 <__aeabi_dmul>
 8007bea:	e7c5      	b.n	8007b78 <__ieee754_pow+0xc0>
 8007bec:	4b39      	ldr	r3, [pc, #228]	; (8007cd4 <__ieee754_pow+0x21c>)
 8007bee:	4599      	cmp	r9, r3
 8007bf0:	d10a      	bne.n	8007c08 <__ieee754_pow+0x150>
 8007bf2:	2d00      	cmp	r5, #0
 8007bf4:	db08      	blt.n	8007c08 <__ieee754_pow+0x150>
 8007bf6:	ec47 6b10 	vmov	d0, r6, r7
 8007bfa:	b011      	add	sp, #68	; 0x44
 8007bfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c00:	f000 bc68 	b.w	80084d4 <__ieee754_sqrt>
 8007c04:	f04f 0b00 	mov.w	fp, #0
 8007c08:	ec47 6b10 	vmov	d0, r6, r7
 8007c0c:	f000 fd12 	bl	8008634 <fabs>
 8007c10:	ec51 0b10 	vmov	r0, r1, d0
 8007c14:	f1ba 0f00 	cmp.w	sl, #0
 8007c18:	d127      	bne.n	8007c6a <__ieee754_pow+0x1b2>
 8007c1a:	b124      	cbz	r4, 8007c26 <__ieee754_pow+0x16e>
 8007c1c:	4b2c      	ldr	r3, [pc, #176]	; (8007cd0 <__ieee754_pow+0x218>)
 8007c1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d121      	bne.n	8007c6a <__ieee754_pow+0x1b2>
 8007c26:	f1b9 0f00 	cmp.w	r9, #0
 8007c2a:	da05      	bge.n	8007c38 <__ieee754_pow+0x180>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	2000      	movs	r0, #0
 8007c32:	4927      	ldr	r1, [pc, #156]	; (8007cd0 <__ieee754_pow+0x218>)
 8007c34:	f7f8 fe2a 	bl	800088c <__aeabi_ddiv>
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	da9d      	bge.n	8007b78 <__ieee754_pow+0xc0>
 8007c3c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007c40:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007c44:	ea54 030b 	orrs.w	r3, r4, fp
 8007c48:	d108      	bne.n	8007c5c <__ieee754_pow+0x1a4>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4610      	mov	r0, r2
 8007c50:	4619      	mov	r1, r3
 8007c52:	f7f8 fb39 	bl	80002c8 <__aeabi_dsub>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	e7ac      	b.n	8007bb6 <__ieee754_pow+0xfe>
 8007c5c:	f1bb 0f01 	cmp.w	fp, #1
 8007c60:	d18a      	bne.n	8007b78 <__ieee754_pow+0xc0>
 8007c62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c66:	4619      	mov	r1, r3
 8007c68:	e786      	b.n	8007b78 <__ieee754_pow+0xc0>
 8007c6a:	0fed      	lsrs	r5, r5, #31
 8007c6c:	1e6b      	subs	r3, r5, #1
 8007c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8007c70:	ea5b 0303 	orrs.w	r3, fp, r3
 8007c74:	d102      	bne.n	8007c7c <__ieee754_pow+0x1c4>
 8007c76:	4632      	mov	r2, r6
 8007c78:	463b      	mov	r3, r7
 8007c7a:	e7e8      	b.n	8007c4e <__ieee754_pow+0x196>
 8007c7c:	4b16      	ldr	r3, [pc, #88]	; (8007cd8 <__ieee754_pow+0x220>)
 8007c7e:	4598      	cmp	r8, r3
 8007c80:	f340 80fe 	ble.w	8007e80 <__ieee754_pow+0x3c8>
 8007c84:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007c88:	4598      	cmp	r8, r3
 8007c8a:	dd0a      	ble.n	8007ca2 <__ieee754_pow+0x1ea>
 8007c8c:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <__ieee754_pow+0x214>)
 8007c8e:	429c      	cmp	r4, r3
 8007c90:	dc0d      	bgt.n	8007cae <__ieee754_pow+0x1f6>
 8007c92:	f1b9 0f00 	cmp.w	r9, #0
 8007c96:	f6bf af6d 	bge.w	8007b74 <__ieee754_pow+0xbc>
 8007c9a:	a307      	add	r3, pc, #28	; (adr r3, 8007cb8 <__ieee754_pow+0x200>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	e79f      	b.n	8007be2 <__ieee754_pow+0x12a>
 8007ca2:	4b0e      	ldr	r3, [pc, #56]	; (8007cdc <__ieee754_pow+0x224>)
 8007ca4:	429c      	cmp	r4, r3
 8007ca6:	ddf4      	ble.n	8007c92 <__ieee754_pow+0x1da>
 8007ca8:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <__ieee754_pow+0x218>)
 8007caa:	429c      	cmp	r4, r3
 8007cac:	dd18      	ble.n	8007ce0 <__ieee754_pow+0x228>
 8007cae:	f1b9 0f00 	cmp.w	r9, #0
 8007cb2:	dcf2      	bgt.n	8007c9a <__ieee754_pow+0x1e2>
 8007cb4:	e75e      	b.n	8007b74 <__ieee754_pow+0xbc>
 8007cb6:	bf00      	nop
 8007cb8:	8800759c 	.word	0x8800759c
 8007cbc:	7e37e43c 	.word	0x7e37e43c
 8007cc0:	7ff00000 	.word	0x7ff00000
 8007cc4:	08008e95 	.word	0x08008e95
 8007cc8:	433fffff 	.word	0x433fffff
 8007ccc:	3fefffff 	.word	0x3fefffff
 8007cd0:	3ff00000 	.word	0x3ff00000
 8007cd4:	3fe00000 	.word	0x3fe00000
 8007cd8:	41e00000 	.word	0x41e00000
 8007cdc:	3feffffe 	.word	0x3feffffe
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	4b63      	ldr	r3, [pc, #396]	; (8007e70 <__ieee754_pow+0x3b8>)
 8007ce4:	f7f8 faf0 	bl	80002c8 <__aeabi_dsub>
 8007ce8:	a355      	add	r3, pc, #340	; (adr r3, 8007e40 <__ieee754_pow+0x388>)
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	4604      	mov	r4, r0
 8007cf0:	460d      	mov	r5, r1
 8007cf2:	f7f8 fca1 	bl	8000638 <__aeabi_dmul>
 8007cf6:	a354      	add	r3, pc, #336	; (adr r3, 8007e48 <__ieee754_pow+0x390>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	460f      	mov	r7, r1
 8007d00:	4620      	mov	r0, r4
 8007d02:	4629      	mov	r1, r5
 8007d04:	f7f8 fc98 	bl	8000638 <__aeabi_dmul>
 8007d08:	2200      	movs	r2, #0
 8007d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d0e:	4b59      	ldr	r3, [pc, #356]	; (8007e74 <__ieee754_pow+0x3bc>)
 8007d10:	4620      	mov	r0, r4
 8007d12:	4629      	mov	r1, r5
 8007d14:	f7f8 fc90 	bl	8000638 <__aeabi_dmul>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	a14c      	add	r1, pc, #304	; (adr r1, 8007e50 <__ieee754_pow+0x398>)
 8007d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d22:	f7f8 fad1 	bl	80002c8 <__aeabi_dsub>
 8007d26:	4622      	mov	r2, r4
 8007d28:	462b      	mov	r3, r5
 8007d2a:	f7f8 fc85 	bl	8000638 <__aeabi_dmul>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	2000      	movs	r0, #0
 8007d34:	4950      	ldr	r1, [pc, #320]	; (8007e78 <__ieee754_pow+0x3c0>)
 8007d36:	f7f8 fac7 	bl	80002c8 <__aeabi_dsub>
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	462b      	mov	r3, r5
 8007d3e:	4680      	mov	r8, r0
 8007d40:	4689      	mov	r9, r1
 8007d42:	4620      	mov	r0, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	f7f8 fc77 	bl	8000638 <__aeabi_dmul>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4640      	mov	r0, r8
 8007d50:	4649      	mov	r1, r9
 8007d52:	f7f8 fc71 	bl	8000638 <__aeabi_dmul>
 8007d56:	a340      	add	r3, pc, #256	; (adr r3, 8007e58 <__ieee754_pow+0x3a0>)
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	f7f8 fc6c 	bl	8000638 <__aeabi_dmul>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d68:	f7f8 faae 	bl	80002c8 <__aeabi_dsub>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4604      	mov	r4, r0
 8007d72:	460d      	mov	r5, r1
 8007d74:	4630      	mov	r0, r6
 8007d76:	4639      	mov	r1, r7
 8007d78:	f7f8 faa8 	bl	80002cc <__adddf3>
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d82:	4632      	mov	r2, r6
 8007d84:	463b      	mov	r3, r7
 8007d86:	f7f8 fa9f 	bl	80002c8 <__aeabi_dsub>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4620      	mov	r0, r4
 8007d90:	4629      	mov	r1, r5
 8007d92:	f7f8 fa99 	bl	80002c8 <__aeabi_dsub>
 8007d96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d98:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	4606      	mov	r6, r0
 8007da0:	460f      	mov	r7, r1
 8007da2:	f040 81eb 	bne.w	800817c <__ieee754_pow+0x6c4>
 8007da6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007e60 <__ieee754_pow+0x3a8>
 8007daa:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007dae:	2400      	movs	r4, #0
 8007db0:	4622      	mov	r2, r4
 8007db2:	462b      	mov	r3, r5
 8007db4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007db8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007dbc:	f7f8 fa84 	bl	80002c8 <__aeabi_dsub>
 8007dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dc4:	f7f8 fc38 	bl	8000638 <__aeabi_dmul>
 8007dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dcc:	4680      	mov	r8, r0
 8007dce:	4689      	mov	r9, r1
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	f7f8 fc30 	bl	8000638 <__aeabi_dmul>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4640      	mov	r0, r8
 8007dde:	4649      	mov	r1, r9
 8007de0:	f7f8 fa74 	bl	80002cc <__adddf3>
 8007de4:	4622      	mov	r2, r4
 8007de6:	462b      	mov	r3, r5
 8007de8:	4680      	mov	r8, r0
 8007dea:	4689      	mov	r9, r1
 8007dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007df0:	f7f8 fc22 	bl	8000638 <__aeabi_dmul>
 8007df4:	460b      	mov	r3, r1
 8007df6:	4604      	mov	r4, r0
 8007df8:	460d      	mov	r5, r1
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	4640      	mov	r0, r8
 8007e00:	e9cd 4500 	strd	r4, r5, [sp]
 8007e04:	f7f8 fa62 	bl	80002cc <__adddf3>
 8007e08:	4b1c      	ldr	r3, [pc, #112]	; (8007e7c <__ieee754_pow+0x3c4>)
 8007e0a:	4299      	cmp	r1, r3
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	460f      	mov	r7, r1
 8007e10:	468b      	mov	fp, r1
 8007e12:	f340 82f7 	ble.w	8008404 <__ieee754_pow+0x94c>
 8007e16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007e1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007e1e:	4303      	orrs	r3, r0
 8007e20:	f000 81ea 	beq.w	80081f8 <__ieee754_pow+0x740>
 8007e24:	a310      	add	r3, pc, #64	; (adr r3, 8007e68 <__ieee754_pow+0x3b0>)
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e2e:	f7f8 fc03 	bl	8000638 <__aeabi_dmul>
 8007e32:	a30d      	add	r3, pc, #52	; (adr r3, 8007e68 <__ieee754_pow+0x3b0>)
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	e6d5      	b.n	8007be6 <__ieee754_pow+0x12e>
 8007e3a:	bf00      	nop
 8007e3c:	f3af 8000 	nop.w
 8007e40:	60000000 	.word	0x60000000
 8007e44:	3ff71547 	.word	0x3ff71547
 8007e48:	f85ddf44 	.word	0xf85ddf44
 8007e4c:	3e54ae0b 	.word	0x3e54ae0b
 8007e50:	55555555 	.word	0x55555555
 8007e54:	3fd55555 	.word	0x3fd55555
 8007e58:	652b82fe 	.word	0x652b82fe
 8007e5c:	3ff71547 	.word	0x3ff71547
 8007e60:	00000000 	.word	0x00000000
 8007e64:	bff00000 	.word	0xbff00000
 8007e68:	8800759c 	.word	0x8800759c
 8007e6c:	7e37e43c 	.word	0x7e37e43c
 8007e70:	3ff00000 	.word	0x3ff00000
 8007e74:	3fd00000 	.word	0x3fd00000
 8007e78:	3fe00000 	.word	0x3fe00000
 8007e7c:	408fffff 	.word	0x408fffff
 8007e80:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	da05      	bge.n	8007e96 <__ieee754_pow+0x3de>
 8007e8a:	4bd3      	ldr	r3, [pc, #844]	; (80081d8 <__ieee754_pow+0x720>)
 8007e8c:	f7f8 fbd4 	bl	8000638 <__aeabi_dmul>
 8007e90:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007e94:	460c      	mov	r4, r1
 8007e96:	1523      	asrs	r3, r4, #20
 8007e98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e9c:	4413      	add	r3, r2
 8007e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea0:	4bce      	ldr	r3, [pc, #824]	; (80081dc <__ieee754_pow+0x724>)
 8007ea2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007ea6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007eb0:	dd08      	ble.n	8007ec4 <__ieee754_pow+0x40c>
 8007eb2:	4bcb      	ldr	r3, [pc, #812]	; (80081e0 <__ieee754_pow+0x728>)
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	f340 815e 	ble.w	8008176 <__ieee754_pow+0x6be>
 8007eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007ec4:	f04f 0a00 	mov.w	sl, #0
 8007ec8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007ecc:	930c      	str	r3, [sp, #48]	; 0x30
 8007ece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ed0:	4bc4      	ldr	r3, [pc, #784]	; (80081e4 <__ieee754_pow+0x72c>)
 8007ed2:	4413      	add	r3, r2
 8007ed4:	ed93 7b00 	vldr	d7, [r3]
 8007ed8:	4629      	mov	r1, r5
 8007eda:	ec53 2b17 	vmov	r2, r3, d7
 8007ede:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ee2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ee6:	f7f8 f9ef 	bl	80002c8 <__aeabi_dsub>
 8007eea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460f      	mov	r7, r1
 8007ef2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ef6:	f7f8 f9e9 	bl	80002cc <__adddf3>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	2000      	movs	r0, #0
 8007f00:	49b9      	ldr	r1, [pc, #740]	; (80081e8 <__ieee754_pow+0x730>)
 8007f02:	f7f8 fcc3 	bl	800088c <__aeabi_ddiv>
 8007f06:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4630      	mov	r0, r6
 8007f10:	4639      	mov	r1, r7
 8007f12:	f7f8 fb91 	bl	8000638 <__aeabi_dmul>
 8007f16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f1a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007f1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007f22:	2300      	movs	r3, #0
 8007f24:	9302      	str	r3, [sp, #8]
 8007f26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f2a:	106d      	asrs	r5, r5, #1
 8007f2c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007f30:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007f34:	2200      	movs	r2, #0
 8007f36:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	4614      	mov	r4, r2
 8007f40:	461d      	mov	r5, r3
 8007f42:	f7f8 fb79 	bl	8000638 <__aeabi_dmul>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	f7f8 f9bb 	bl	80002c8 <__aeabi_dsub>
 8007f52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f56:	4606      	mov	r6, r0
 8007f58:	460f      	mov	r7, r1
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	f7f8 f9b3 	bl	80002c8 <__aeabi_dsub>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f6a:	f7f8 f9ad 	bl	80002c8 <__aeabi_dsub>
 8007f6e:	4642      	mov	r2, r8
 8007f70:	464b      	mov	r3, r9
 8007f72:	f7f8 fb61 	bl	8000638 <__aeabi_dmul>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	f7f8 f9a3 	bl	80002c8 <__aeabi_dsub>
 8007f82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007f86:	f7f8 fb57 	bl	8000638 <__aeabi_dmul>
 8007f8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f92:	4610      	mov	r0, r2
 8007f94:	4619      	mov	r1, r3
 8007f96:	f7f8 fb4f 	bl	8000638 <__aeabi_dmul>
 8007f9a:	a37b      	add	r3, pc, #492	; (adr r3, 8008188 <__ieee754_pow+0x6d0>)
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	460d      	mov	r5, r1
 8007fa4:	f7f8 fb48 	bl	8000638 <__aeabi_dmul>
 8007fa8:	a379      	add	r3, pc, #484	; (adr r3, 8008190 <__ieee754_pow+0x6d8>)
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	f7f8 f98d 	bl	80002cc <__adddf3>
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	f7f8 fb3f 	bl	8000638 <__aeabi_dmul>
 8007fba:	a377      	add	r3, pc, #476	; (adr r3, 8008198 <__ieee754_pow+0x6e0>)
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f7f8 f984 	bl	80002cc <__adddf3>
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	462b      	mov	r3, r5
 8007fc8:	f7f8 fb36 	bl	8000638 <__aeabi_dmul>
 8007fcc:	a374      	add	r3, pc, #464	; (adr r3, 80081a0 <__ieee754_pow+0x6e8>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	f7f8 f97b 	bl	80002cc <__adddf3>
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	462b      	mov	r3, r5
 8007fda:	f7f8 fb2d 	bl	8000638 <__aeabi_dmul>
 8007fde:	a372      	add	r3, pc, #456	; (adr r3, 80081a8 <__ieee754_pow+0x6f0>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f7f8 f972 	bl	80002cc <__adddf3>
 8007fe8:	4622      	mov	r2, r4
 8007fea:	462b      	mov	r3, r5
 8007fec:	f7f8 fb24 	bl	8000638 <__aeabi_dmul>
 8007ff0:	a36f      	add	r3, pc, #444	; (adr r3, 80081b0 <__ieee754_pow+0x6f8>)
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	f7f8 f969 	bl	80002cc <__adddf3>
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	460f      	mov	r7, r1
 8008000:	462b      	mov	r3, r5
 8008002:	4620      	mov	r0, r4
 8008004:	4629      	mov	r1, r5
 8008006:	f7f8 fb17 	bl	8000638 <__aeabi_dmul>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4630      	mov	r0, r6
 8008010:	4639      	mov	r1, r7
 8008012:	f7f8 fb11 	bl	8000638 <__aeabi_dmul>
 8008016:	4642      	mov	r2, r8
 8008018:	4604      	mov	r4, r0
 800801a:	460d      	mov	r5, r1
 800801c:	464b      	mov	r3, r9
 800801e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008022:	f7f8 f953 	bl	80002cc <__adddf3>
 8008026:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800802a:	f7f8 fb05 	bl	8000638 <__aeabi_dmul>
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	f7f8 f94b 	bl	80002cc <__adddf3>
 8008036:	4642      	mov	r2, r8
 8008038:	4606      	mov	r6, r0
 800803a:	460f      	mov	r7, r1
 800803c:	464b      	mov	r3, r9
 800803e:	4640      	mov	r0, r8
 8008040:	4649      	mov	r1, r9
 8008042:	f7f8 faf9 	bl	8000638 <__aeabi_dmul>
 8008046:	2200      	movs	r2, #0
 8008048:	4b68      	ldr	r3, [pc, #416]	; (80081ec <__ieee754_pow+0x734>)
 800804a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800804e:	f7f8 f93d 	bl	80002cc <__adddf3>
 8008052:	4632      	mov	r2, r6
 8008054:	463b      	mov	r3, r7
 8008056:	f7f8 f939 	bl	80002cc <__adddf3>
 800805a:	9802      	ldr	r0, [sp, #8]
 800805c:	460d      	mov	r5, r1
 800805e:	4604      	mov	r4, r0
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4640      	mov	r0, r8
 8008066:	4649      	mov	r1, r9
 8008068:	f7f8 fae6 	bl	8000638 <__aeabi_dmul>
 800806c:	2200      	movs	r2, #0
 800806e:	4680      	mov	r8, r0
 8008070:	4689      	mov	r9, r1
 8008072:	4b5e      	ldr	r3, [pc, #376]	; (80081ec <__ieee754_pow+0x734>)
 8008074:	4620      	mov	r0, r4
 8008076:	4629      	mov	r1, r5
 8008078:	f7f8 f926 	bl	80002c8 <__aeabi_dsub>
 800807c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008080:	f7f8 f922 	bl	80002c8 <__aeabi_dsub>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4630      	mov	r0, r6
 800808a:	4639      	mov	r1, r7
 800808c:	f7f8 f91c 	bl	80002c8 <__aeabi_dsub>
 8008090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008094:	f7f8 fad0 	bl	8000638 <__aeabi_dmul>
 8008098:	4622      	mov	r2, r4
 800809a:	4606      	mov	r6, r0
 800809c:	460f      	mov	r7, r1
 800809e:	462b      	mov	r3, r5
 80080a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080a4:	f7f8 fac8 	bl	8000638 <__aeabi_dmul>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	4630      	mov	r0, r6
 80080ae:	4639      	mov	r1, r7
 80080b0:	f7f8 f90c 	bl	80002cc <__adddf3>
 80080b4:	4606      	mov	r6, r0
 80080b6:	460f      	mov	r7, r1
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	4640      	mov	r0, r8
 80080be:	4649      	mov	r1, r9
 80080c0:	f7f8 f904 	bl	80002cc <__adddf3>
 80080c4:	9802      	ldr	r0, [sp, #8]
 80080c6:	a33c      	add	r3, pc, #240	; (adr r3, 80081b8 <__ieee754_pow+0x700>)
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	4604      	mov	r4, r0
 80080ce:	460d      	mov	r5, r1
 80080d0:	f7f8 fab2 	bl	8000638 <__aeabi_dmul>
 80080d4:	4642      	mov	r2, r8
 80080d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080da:	464b      	mov	r3, r9
 80080dc:	4620      	mov	r0, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	f7f8 f8f2 	bl	80002c8 <__aeabi_dsub>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4630      	mov	r0, r6
 80080ea:	4639      	mov	r1, r7
 80080ec:	f7f8 f8ec 	bl	80002c8 <__aeabi_dsub>
 80080f0:	a333      	add	r3, pc, #204	; (adr r3, 80081c0 <__ieee754_pow+0x708>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	f7f8 fa9f 	bl	8000638 <__aeabi_dmul>
 80080fa:	a333      	add	r3, pc, #204	; (adr r3, 80081c8 <__ieee754_pow+0x710>)
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	4606      	mov	r6, r0
 8008102:	460f      	mov	r7, r1
 8008104:	4620      	mov	r0, r4
 8008106:	4629      	mov	r1, r5
 8008108:	f7f8 fa96 	bl	8000638 <__aeabi_dmul>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 f8da 	bl	80002cc <__adddf3>
 8008118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800811a:	4b35      	ldr	r3, [pc, #212]	; (80081f0 <__ieee754_pow+0x738>)
 800811c:	4413      	add	r3, r2
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	f7f8 f8d3 	bl	80002cc <__adddf3>
 8008126:	4604      	mov	r4, r0
 8008128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800812a:	460d      	mov	r5, r1
 800812c:	f7f8 fa1a 	bl	8000564 <__aeabi_i2d>
 8008130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008132:	4b30      	ldr	r3, [pc, #192]	; (80081f4 <__ieee754_pow+0x73c>)
 8008134:	4413      	add	r3, r2
 8008136:	e9d3 8900 	ldrd	r8, r9, [r3]
 800813a:	4606      	mov	r6, r0
 800813c:	460f      	mov	r7, r1
 800813e:	4622      	mov	r2, r4
 8008140:	462b      	mov	r3, r5
 8008142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008146:	f7f8 f8c1 	bl	80002cc <__adddf3>
 800814a:	4642      	mov	r2, r8
 800814c:	464b      	mov	r3, r9
 800814e:	f7f8 f8bd 	bl	80002cc <__adddf3>
 8008152:	4632      	mov	r2, r6
 8008154:	463b      	mov	r3, r7
 8008156:	f7f8 f8b9 	bl	80002cc <__adddf3>
 800815a:	9802      	ldr	r0, [sp, #8]
 800815c:	4632      	mov	r2, r6
 800815e:	463b      	mov	r3, r7
 8008160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008164:	f7f8 f8b0 	bl	80002c8 <__aeabi_dsub>
 8008168:	4642      	mov	r2, r8
 800816a:	464b      	mov	r3, r9
 800816c:	f7f8 f8ac 	bl	80002c8 <__aeabi_dsub>
 8008170:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008174:	e607      	b.n	8007d86 <__ieee754_pow+0x2ce>
 8008176:	f04f 0a01 	mov.w	sl, #1
 800817a:	e6a5      	b.n	8007ec8 <__ieee754_pow+0x410>
 800817c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80081d0 <__ieee754_pow+0x718>
 8008180:	e613      	b.n	8007daa <__ieee754_pow+0x2f2>
 8008182:	bf00      	nop
 8008184:	f3af 8000 	nop.w
 8008188:	4a454eef 	.word	0x4a454eef
 800818c:	3fca7e28 	.word	0x3fca7e28
 8008190:	93c9db65 	.word	0x93c9db65
 8008194:	3fcd864a 	.word	0x3fcd864a
 8008198:	a91d4101 	.word	0xa91d4101
 800819c:	3fd17460 	.word	0x3fd17460
 80081a0:	518f264d 	.word	0x518f264d
 80081a4:	3fd55555 	.word	0x3fd55555
 80081a8:	db6fabff 	.word	0xdb6fabff
 80081ac:	3fdb6db6 	.word	0x3fdb6db6
 80081b0:	33333303 	.word	0x33333303
 80081b4:	3fe33333 	.word	0x3fe33333
 80081b8:	e0000000 	.word	0xe0000000
 80081bc:	3feec709 	.word	0x3feec709
 80081c0:	dc3a03fd 	.word	0xdc3a03fd
 80081c4:	3feec709 	.word	0x3feec709
 80081c8:	145b01f5 	.word	0x145b01f5
 80081cc:	be3e2fe0 	.word	0xbe3e2fe0
 80081d0:	00000000 	.word	0x00000000
 80081d4:	3ff00000 	.word	0x3ff00000
 80081d8:	43400000 	.word	0x43400000
 80081dc:	0003988e 	.word	0x0003988e
 80081e0:	000bb679 	.word	0x000bb679
 80081e4:	08008ec8 	.word	0x08008ec8
 80081e8:	3ff00000 	.word	0x3ff00000
 80081ec:	40080000 	.word	0x40080000
 80081f0:	08008ee8 	.word	0x08008ee8
 80081f4:	08008ed8 	.word	0x08008ed8
 80081f8:	a3b4      	add	r3, pc, #720	; (adr r3, 80084cc <__ieee754_pow+0xa14>)
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	4640      	mov	r0, r8
 8008200:	4649      	mov	r1, r9
 8008202:	f7f8 f863 	bl	80002cc <__adddf3>
 8008206:	4622      	mov	r2, r4
 8008208:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800820c:	462b      	mov	r3, r5
 800820e:	4630      	mov	r0, r6
 8008210:	4639      	mov	r1, r7
 8008212:	f7f8 f859 	bl	80002c8 <__aeabi_dsub>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800821e:	f7f8 fc9b 	bl	8000b58 <__aeabi_dcmpgt>
 8008222:	2800      	cmp	r0, #0
 8008224:	f47f adfe 	bne.w	8007e24 <__ieee754_pow+0x36c>
 8008228:	4aa3      	ldr	r2, [pc, #652]	; (80084b8 <__ieee754_pow+0xa00>)
 800822a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800822e:	4293      	cmp	r3, r2
 8008230:	f340 810a 	ble.w	8008448 <__ieee754_pow+0x990>
 8008234:	151b      	asrs	r3, r3, #20
 8008236:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800823a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800823e:	fa4a f303 	asr.w	r3, sl, r3
 8008242:	445b      	add	r3, fp
 8008244:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008248:	4e9c      	ldr	r6, [pc, #624]	; (80084bc <__ieee754_pow+0xa04>)
 800824a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800824e:	4116      	asrs	r6, r2
 8008250:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008254:	2000      	movs	r0, #0
 8008256:	ea23 0106 	bic.w	r1, r3, r6
 800825a:	f1c2 0214 	rsb	r2, r2, #20
 800825e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008262:	fa4a fa02 	asr.w	sl, sl, r2
 8008266:	f1bb 0f00 	cmp.w	fp, #0
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4620      	mov	r0, r4
 8008270:	4629      	mov	r1, r5
 8008272:	bfb8      	it	lt
 8008274:	f1ca 0a00 	rsblt	sl, sl, #0
 8008278:	f7f8 f826 	bl	80002c8 <__aeabi_dsub>
 800827c:	e9cd 0100 	strd	r0, r1, [sp]
 8008280:	4642      	mov	r2, r8
 8008282:	464b      	mov	r3, r9
 8008284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008288:	f7f8 f820 	bl	80002cc <__adddf3>
 800828c:	2000      	movs	r0, #0
 800828e:	a378      	add	r3, pc, #480	; (adr r3, 8008470 <__ieee754_pow+0x9b8>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	4604      	mov	r4, r0
 8008296:	460d      	mov	r5, r1
 8008298:	f7f8 f9ce 	bl	8000638 <__aeabi_dmul>
 800829c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082a0:	4606      	mov	r6, r0
 80082a2:	460f      	mov	r7, r1
 80082a4:	4620      	mov	r0, r4
 80082a6:	4629      	mov	r1, r5
 80082a8:	f7f8 f80e 	bl	80002c8 <__aeabi_dsub>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4640      	mov	r0, r8
 80082b2:	4649      	mov	r1, r9
 80082b4:	f7f8 f808 	bl	80002c8 <__aeabi_dsub>
 80082b8:	a36f      	add	r3, pc, #444	; (adr r3, 8008478 <__ieee754_pow+0x9c0>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f7f8 f9bb 	bl	8000638 <__aeabi_dmul>
 80082c2:	a36f      	add	r3, pc, #444	; (adr r3, 8008480 <__ieee754_pow+0x9c8>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	4680      	mov	r8, r0
 80082ca:	4689      	mov	r9, r1
 80082cc:	4620      	mov	r0, r4
 80082ce:	4629      	mov	r1, r5
 80082d0:	f7f8 f9b2 	bl	8000638 <__aeabi_dmul>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4640      	mov	r0, r8
 80082da:	4649      	mov	r1, r9
 80082dc:	f7f7 fff6 	bl	80002cc <__adddf3>
 80082e0:	4604      	mov	r4, r0
 80082e2:	460d      	mov	r5, r1
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	f7f7 ffee 	bl	80002cc <__adddf3>
 80082f0:	4632      	mov	r2, r6
 80082f2:	463b      	mov	r3, r7
 80082f4:	4680      	mov	r8, r0
 80082f6:	4689      	mov	r9, r1
 80082f8:	f7f7 ffe6 	bl	80002c8 <__aeabi_dsub>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4620      	mov	r0, r4
 8008302:	4629      	mov	r1, r5
 8008304:	f7f7 ffe0 	bl	80002c8 <__aeabi_dsub>
 8008308:	4642      	mov	r2, r8
 800830a:	4606      	mov	r6, r0
 800830c:	460f      	mov	r7, r1
 800830e:	464b      	mov	r3, r9
 8008310:	4640      	mov	r0, r8
 8008312:	4649      	mov	r1, r9
 8008314:	f7f8 f990 	bl	8000638 <__aeabi_dmul>
 8008318:	a35b      	add	r3, pc, #364	; (adr r3, 8008488 <__ieee754_pow+0x9d0>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	4604      	mov	r4, r0
 8008320:	460d      	mov	r5, r1
 8008322:	f7f8 f989 	bl	8000638 <__aeabi_dmul>
 8008326:	a35a      	add	r3, pc, #360	; (adr r3, 8008490 <__ieee754_pow+0x9d8>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	f7f7 ffcc 	bl	80002c8 <__aeabi_dsub>
 8008330:	4622      	mov	r2, r4
 8008332:	462b      	mov	r3, r5
 8008334:	f7f8 f980 	bl	8000638 <__aeabi_dmul>
 8008338:	a357      	add	r3, pc, #348	; (adr r3, 8008498 <__ieee754_pow+0x9e0>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f7f7 ffc5 	bl	80002cc <__adddf3>
 8008342:	4622      	mov	r2, r4
 8008344:	462b      	mov	r3, r5
 8008346:	f7f8 f977 	bl	8000638 <__aeabi_dmul>
 800834a:	a355      	add	r3, pc, #340	; (adr r3, 80084a0 <__ieee754_pow+0x9e8>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f7 ffba 	bl	80002c8 <__aeabi_dsub>
 8008354:	4622      	mov	r2, r4
 8008356:	462b      	mov	r3, r5
 8008358:	f7f8 f96e 	bl	8000638 <__aeabi_dmul>
 800835c:	a352      	add	r3, pc, #328	; (adr r3, 80084a8 <__ieee754_pow+0x9f0>)
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	f7f7 ffb3 	bl	80002cc <__adddf3>
 8008366:	4622      	mov	r2, r4
 8008368:	462b      	mov	r3, r5
 800836a:	f7f8 f965 	bl	8000638 <__aeabi_dmul>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4640      	mov	r0, r8
 8008374:	4649      	mov	r1, r9
 8008376:	f7f7 ffa7 	bl	80002c8 <__aeabi_dsub>
 800837a:	4604      	mov	r4, r0
 800837c:	460d      	mov	r5, r1
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4640      	mov	r0, r8
 8008384:	4649      	mov	r1, r9
 8008386:	f7f8 f957 	bl	8000638 <__aeabi_dmul>
 800838a:	2200      	movs	r2, #0
 800838c:	e9cd 0100 	strd	r0, r1, [sp]
 8008390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008394:	4620      	mov	r0, r4
 8008396:	4629      	mov	r1, r5
 8008398:	f7f7 ff96 	bl	80002c8 <__aeabi_dsub>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083a4:	f7f8 fa72 	bl	800088c <__aeabi_ddiv>
 80083a8:	4632      	mov	r2, r6
 80083aa:	4604      	mov	r4, r0
 80083ac:	460d      	mov	r5, r1
 80083ae:	463b      	mov	r3, r7
 80083b0:	4640      	mov	r0, r8
 80083b2:	4649      	mov	r1, r9
 80083b4:	f7f8 f940 	bl	8000638 <__aeabi_dmul>
 80083b8:	4632      	mov	r2, r6
 80083ba:	463b      	mov	r3, r7
 80083bc:	f7f7 ff86 	bl	80002cc <__adddf3>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	4620      	mov	r0, r4
 80083c6:	4629      	mov	r1, r5
 80083c8:	f7f7 ff7e 	bl	80002c8 <__aeabi_dsub>
 80083cc:	4642      	mov	r2, r8
 80083ce:	464b      	mov	r3, r9
 80083d0:	f7f7 ff7a 	bl	80002c8 <__aeabi_dsub>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	2000      	movs	r0, #0
 80083da:	4939      	ldr	r1, [pc, #228]	; (80084c0 <__ieee754_pow+0xa08>)
 80083dc:	f7f7 ff74 	bl	80002c8 <__aeabi_dsub>
 80083e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80083e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	da2f      	bge.n	800844e <__ieee754_pow+0x996>
 80083ee:	4650      	mov	r0, sl
 80083f0:	ec43 2b10 	vmov	d0, r2, r3
 80083f4:	f000 f9c0 	bl	8008778 <scalbn>
 80083f8:	ec51 0b10 	vmov	r0, r1, d0
 80083fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008400:	f7ff bbf1 	b.w	8007be6 <__ieee754_pow+0x12e>
 8008404:	4b2f      	ldr	r3, [pc, #188]	; (80084c4 <__ieee754_pow+0xa0c>)
 8008406:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800840a:	429e      	cmp	r6, r3
 800840c:	f77f af0c 	ble.w	8008228 <__ieee754_pow+0x770>
 8008410:	4b2d      	ldr	r3, [pc, #180]	; (80084c8 <__ieee754_pow+0xa10>)
 8008412:	440b      	add	r3, r1
 8008414:	4303      	orrs	r3, r0
 8008416:	d00b      	beq.n	8008430 <__ieee754_pow+0x978>
 8008418:	a325      	add	r3, pc, #148	; (adr r3, 80084b0 <__ieee754_pow+0x9f8>)
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008422:	f7f8 f909 	bl	8000638 <__aeabi_dmul>
 8008426:	a322      	add	r3, pc, #136	; (adr r3, 80084b0 <__ieee754_pow+0x9f8>)
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f7ff bbdb 	b.w	8007be6 <__ieee754_pow+0x12e>
 8008430:	4622      	mov	r2, r4
 8008432:	462b      	mov	r3, r5
 8008434:	f7f7 ff48 	bl	80002c8 <__aeabi_dsub>
 8008438:	4642      	mov	r2, r8
 800843a:	464b      	mov	r3, r9
 800843c:	f7f8 fb82 	bl	8000b44 <__aeabi_dcmpge>
 8008440:	2800      	cmp	r0, #0
 8008442:	f43f aef1 	beq.w	8008228 <__ieee754_pow+0x770>
 8008446:	e7e7      	b.n	8008418 <__ieee754_pow+0x960>
 8008448:	f04f 0a00 	mov.w	sl, #0
 800844c:	e718      	b.n	8008280 <__ieee754_pow+0x7c8>
 800844e:	4621      	mov	r1, r4
 8008450:	e7d4      	b.n	80083fc <__ieee754_pow+0x944>
 8008452:	2000      	movs	r0, #0
 8008454:	491a      	ldr	r1, [pc, #104]	; (80084c0 <__ieee754_pow+0xa08>)
 8008456:	f7ff bb8f 	b.w	8007b78 <__ieee754_pow+0xc0>
 800845a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800845e:	f7ff bb8b 	b.w	8007b78 <__ieee754_pow+0xc0>
 8008462:	4630      	mov	r0, r6
 8008464:	4639      	mov	r1, r7
 8008466:	f7ff bb87 	b.w	8007b78 <__ieee754_pow+0xc0>
 800846a:	4693      	mov	fp, r2
 800846c:	f7ff bb98 	b.w	8007ba0 <__ieee754_pow+0xe8>
 8008470:	00000000 	.word	0x00000000
 8008474:	3fe62e43 	.word	0x3fe62e43
 8008478:	fefa39ef 	.word	0xfefa39ef
 800847c:	3fe62e42 	.word	0x3fe62e42
 8008480:	0ca86c39 	.word	0x0ca86c39
 8008484:	be205c61 	.word	0xbe205c61
 8008488:	72bea4d0 	.word	0x72bea4d0
 800848c:	3e663769 	.word	0x3e663769
 8008490:	c5d26bf1 	.word	0xc5d26bf1
 8008494:	3ebbbd41 	.word	0x3ebbbd41
 8008498:	af25de2c 	.word	0xaf25de2c
 800849c:	3f11566a 	.word	0x3f11566a
 80084a0:	16bebd93 	.word	0x16bebd93
 80084a4:	3f66c16c 	.word	0x3f66c16c
 80084a8:	5555553e 	.word	0x5555553e
 80084ac:	3fc55555 	.word	0x3fc55555
 80084b0:	c2f8f359 	.word	0xc2f8f359
 80084b4:	01a56e1f 	.word	0x01a56e1f
 80084b8:	3fe00000 	.word	0x3fe00000
 80084bc:	000fffff 	.word	0x000fffff
 80084c0:	3ff00000 	.word	0x3ff00000
 80084c4:	4090cbff 	.word	0x4090cbff
 80084c8:	3f6f3400 	.word	0x3f6f3400
 80084cc:	652b82fe 	.word	0x652b82fe
 80084d0:	3c971547 	.word	0x3c971547

080084d4 <__ieee754_sqrt>:
 80084d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d8:	4955      	ldr	r1, [pc, #340]	; (8008630 <__ieee754_sqrt+0x15c>)
 80084da:	ec55 4b10 	vmov	r4, r5, d0
 80084de:	43a9      	bics	r1, r5
 80084e0:	462b      	mov	r3, r5
 80084e2:	462a      	mov	r2, r5
 80084e4:	d112      	bne.n	800850c <__ieee754_sqrt+0x38>
 80084e6:	ee10 2a10 	vmov	r2, s0
 80084ea:	ee10 0a10 	vmov	r0, s0
 80084ee:	4629      	mov	r1, r5
 80084f0:	f7f8 f8a2 	bl	8000638 <__aeabi_dmul>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	4620      	mov	r0, r4
 80084fa:	4629      	mov	r1, r5
 80084fc:	f7f7 fee6 	bl	80002cc <__adddf3>
 8008500:	4604      	mov	r4, r0
 8008502:	460d      	mov	r5, r1
 8008504:	ec45 4b10 	vmov	d0, r4, r5
 8008508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800850c:	2d00      	cmp	r5, #0
 800850e:	ee10 0a10 	vmov	r0, s0
 8008512:	4621      	mov	r1, r4
 8008514:	dc0f      	bgt.n	8008536 <__ieee754_sqrt+0x62>
 8008516:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800851a:	4330      	orrs	r0, r6
 800851c:	d0f2      	beq.n	8008504 <__ieee754_sqrt+0x30>
 800851e:	b155      	cbz	r5, 8008536 <__ieee754_sqrt+0x62>
 8008520:	ee10 2a10 	vmov	r2, s0
 8008524:	4620      	mov	r0, r4
 8008526:	4629      	mov	r1, r5
 8008528:	f7f7 fece 	bl	80002c8 <__aeabi_dsub>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	f7f8 f9ac 	bl	800088c <__aeabi_ddiv>
 8008534:	e7e4      	b.n	8008500 <__ieee754_sqrt+0x2c>
 8008536:	151b      	asrs	r3, r3, #20
 8008538:	d073      	beq.n	8008622 <__ieee754_sqrt+0x14e>
 800853a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800853e:	07dd      	lsls	r5, r3, #31
 8008540:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008544:	bf48      	it	mi
 8008546:	0fc8      	lsrmi	r0, r1, #31
 8008548:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800854c:	bf44      	itt	mi
 800854e:	0049      	lslmi	r1, r1, #1
 8008550:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008554:	2500      	movs	r5, #0
 8008556:	1058      	asrs	r0, r3, #1
 8008558:	0fcb      	lsrs	r3, r1, #31
 800855a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800855e:	0049      	lsls	r1, r1, #1
 8008560:	2316      	movs	r3, #22
 8008562:	462c      	mov	r4, r5
 8008564:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008568:	19a7      	adds	r7, r4, r6
 800856a:	4297      	cmp	r7, r2
 800856c:	bfde      	ittt	le
 800856e:	19bc      	addle	r4, r7, r6
 8008570:	1bd2      	suble	r2, r2, r7
 8008572:	19ad      	addle	r5, r5, r6
 8008574:	0fcf      	lsrs	r7, r1, #31
 8008576:	3b01      	subs	r3, #1
 8008578:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800857c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008580:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008584:	d1f0      	bne.n	8008568 <__ieee754_sqrt+0x94>
 8008586:	f04f 0c20 	mov.w	ip, #32
 800858a:	469e      	mov	lr, r3
 800858c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008590:	42a2      	cmp	r2, r4
 8008592:	eb06 070e 	add.w	r7, r6, lr
 8008596:	dc02      	bgt.n	800859e <__ieee754_sqrt+0xca>
 8008598:	d112      	bne.n	80085c0 <__ieee754_sqrt+0xec>
 800859a:	428f      	cmp	r7, r1
 800859c:	d810      	bhi.n	80085c0 <__ieee754_sqrt+0xec>
 800859e:	2f00      	cmp	r7, #0
 80085a0:	eb07 0e06 	add.w	lr, r7, r6
 80085a4:	da42      	bge.n	800862c <__ieee754_sqrt+0x158>
 80085a6:	f1be 0f00 	cmp.w	lr, #0
 80085aa:	db3f      	blt.n	800862c <__ieee754_sqrt+0x158>
 80085ac:	f104 0801 	add.w	r8, r4, #1
 80085b0:	1b12      	subs	r2, r2, r4
 80085b2:	428f      	cmp	r7, r1
 80085b4:	bf88      	it	hi
 80085b6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80085ba:	1bc9      	subs	r1, r1, r7
 80085bc:	4433      	add	r3, r6
 80085be:	4644      	mov	r4, r8
 80085c0:	0052      	lsls	r2, r2, #1
 80085c2:	f1bc 0c01 	subs.w	ip, ip, #1
 80085c6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80085ca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80085ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80085d2:	d1dd      	bne.n	8008590 <__ieee754_sqrt+0xbc>
 80085d4:	430a      	orrs	r2, r1
 80085d6:	d006      	beq.n	80085e6 <__ieee754_sqrt+0x112>
 80085d8:	1c5c      	adds	r4, r3, #1
 80085da:	bf13      	iteet	ne
 80085dc:	3301      	addne	r3, #1
 80085de:	3501      	addeq	r5, #1
 80085e0:	4663      	moveq	r3, ip
 80085e2:	f023 0301 	bicne.w	r3, r3, #1
 80085e6:	106a      	asrs	r2, r5, #1
 80085e8:	085b      	lsrs	r3, r3, #1
 80085ea:	07e9      	lsls	r1, r5, #31
 80085ec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80085f0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80085f4:	bf48      	it	mi
 80085f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80085fa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80085fe:	461c      	mov	r4, r3
 8008600:	e780      	b.n	8008504 <__ieee754_sqrt+0x30>
 8008602:	0aca      	lsrs	r2, r1, #11
 8008604:	3815      	subs	r0, #21
 8008606:	0549      	lsls	r1, r1, #21
 8008608:	2a00      	cmp	r2, #0
 800860a:	d0fa      	beq.n	8008602 <__ieee754_sqrt+0x12e>
 800860c:	02d6      	lsls	r6, r2, #11
 800860e:	d50a      	bpl.n	8008626 <__ieee754_sqrt+0x152>
 8008610:	f1c3 0420 	rsb	r4, r3, #32
 8008614:	fa21 f404 	lsr.w	r4, r1, r4
 8008618:	1e5d      	subs	r5, r3, #1
 800861a:	4099      	lsls	r1, r3
 800861c:	4322      	orrs	r2, r4
 800861e:	1b43      	subs	r3, r0, r5
 8008620:	e78b      	b.n	800853a <__ieee754_sqrt+0x66>
 8008622:	4618      	mov	r0, r3
 8008624:	e7f0      	b.n	8008608 <__ieee754_sqrt+0x134>
 8008626:	0052      	lsls	r2, r2, #1
 8008628:	3301      	adds	r3, #1
 800862a:	e7ef      	b.n	800860c <__ieee754_sqrt+0x138>
 800862c:	46a0      	mov	r8, r4
 800862e:	e7bf      	b.n	80085b0 <__ieee754_sqrt+0xdc>
 8008630:	7ff00000 	.word	0x7ff00000

08008634 <fabs>:
 8008634:	ec51 0b10 	vmov	r0, r1, d0
 8008638:	ee10 2a10 	vmov	r2, s0
 800863c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008640:	ec43 2b10 	vmov	d0, r2, r3
 8008644:	4770      	bx	lr

08008646 <finite>:
 8008646:	ee10 3a90 	vmov	r3, s1
 800864a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800864e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008652:	0fc0      	lsrs	r0, r0, #31
 8008654:	4770      	bx	lr

08008656 <matherr>:
 8008656:	2000      	movs	r0, #0
 8008658:	4770      	bx	lr
 800865a:	0000      	movs	r0, r0
 800865c:	0000      	movs	r0, r0
	...

08008660 <nan>:
 8008660:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008668 <nan+0x8>
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	00000000 	.word	0x00000000
 800866c:	7ff80000 	.word	0x7ff80000

08008670 <rint>:
 8008670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008672:	ec51 0b10 	vmov	r0, r1, d0
 8008676:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800867a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800867e:	2e13      	cmp	r6, #19
 8008680:	460b      	mov	r3, r1
 8008682:	ee10 4a10 	vmov	r4, s0
 8008686:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800868a:	dc56      	bgt.n	800873a <rint+0xca>
 800868c:	2e00      	cmp	r6, #0
 800868e:	da2b      	bge.n	80086e8 <rint+0x78>
 8008690:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008694:	4302      	orrs	r2, r0
 8008696:	d023      	beq.n	80086e0 <rint+0x70>
 8008698:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800869c:	4302      	orrs	r2, r0
 800869e:	4254      	negs	r4, r2
 80086a0:	4314      	orrs	r4, r2
 80086a2:	0c4b      	lsrs	r3, r1, #17
 80086a4:	0b24      	lsrs	r4, r4, #12
 80086a6:	045b      	lsls	r3, r3, #17
 80086a8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80086ac:	ea44 0103 	orr.w	r1, r4, r3
 80086b0:	460b      	mov	r3, r1
 80086b2:	492f      	ldr	r1, [pc, #188]	; (8008770 <rint+0x100>)
 80086b4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80086b8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80086bc:	4602      	mov	r2, r0
 80086be:	4639      	mov	r1, r7
 80086c0:	4630      	mov	r0, r6
 80086c2:	f7f7 fe03 	bl	80002cc <__adddf3>
 80086c6:	e9cd 0100 	strd	r0, r1, [sp]
 80086ca:	463b      	mov	r3, r7
 80086cc:	4632      	mov	r2, r6
 80086ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086d2:	f7f7 fdf9 	bl	80002c8 <__aeabi_dsub>
 80086d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086da:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80086de:	4639      	mov	r1, r7
 80086e0:	ec41 0b10 	vmov	d0, r0, r1
 80086e4:	b003      	add	sp, #12
 80086e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e8:	4a22      	ldr	r2, [pc, #136]	; (8008774 <rint+0x104>)
 80086ea:	4132      	asrs	r2, r6
 80086ec:	ea01 0702 	and.w	r7, r1, r2
 80086f0:	4307      	orrs	r7, r0
 80086f2:	d0f5      	beq.n	80086e0 <rint+0x70>
 80086f4:	0852      	lsrs	r2, r2, #1
 80086f6:	4011      	ands	r1, r2
 80086f8:	430c      	orrs	r4, r1
 80086fa:	d00b      	beq.n	8008714 <rint+0xa4>
 80086fc:	ea23 0202 	bic.w	r2, r3, r2
 8008700:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008704:	2e13      	cmp	r6, #19
 8008706:	fa43 f306 	asr.w	r3, r3, r6
 800870a:	bf0c      	ite	eq
 800870c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008710:	2400      	movne	r4, #0
 8008712:	4313      	orrs	r3, r2
 8008714:	4916      	ldr	r1, [pc, #88]	; (8008770 <rint+0x100>)
 8008716:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800871a:	4622      	mov	r2, r4
 800871c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008720:	4620      	mov	r0, r4
 8008722:	4629      	mov	r1, r5
 8008724:	f7f7 fdd2 	bl	80002cc <__adddf3>
 8008728:	e9cd 0100 	strd	r0, r1, [sp]
 800872c:	4622      	mov	r2, r4
 800872e:	462b      	mov	r3, r5
 8008730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008734:	f7f7 fdc8 	bl	80002c8 <__aeabi_dsub>
 8008738:	e7d2      	b.n	80086e0 <rint+0x70>
 800873a:	2e33      	cmp	r6, #51	; 0x33
 800873c:	dd07      	ble.n	800874e <rint+0xde>
 800873e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008742:	d1cd      	bne.n	80086e0 <rint+0x70>
 8008744:	ee10 2a10 	vmov	r2, s0
 8008748:	f7f7 fdc0 	bl	80002cc <__adddf3>
 800874c:	e7c8      	b.n	80086e0 <rint+0x70>
 800874e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8008752:	f04f 32ff 	mov.w	r2, #4294967295
 8008756:	40f2      	lsrs	r2, r6
 8008758:	4210      	tst	r0, r2
 800875a:	d0c1      	beq.n	80086e0 <rint+0x70>
 800875c:	0852      	lsrs	r2, r2, #1
 800875e:	4210      	tst	r0, r2
 8008760:	bf1f      	itttt	ne
 8008762:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008766:	ea20 0202 	bicne.w	r2, r0, r2
 800876a:	4134      	asrne	r4, r6
 800876c:	4314      	orrne	r4, r2
 800876e:	e7d1      	b.n	8008714 <rint+0xa4>
 8008770:	08008ef8 	.word	0x08008ef8
 8008774:	000fffff 	.word	0x000fffff

08008778 <scalbn>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	ec55 4b10 	vmov	r4, r5, d0
 800877e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008782:	4606      	mov	r6, r0
 8008784:	462b      	mov	r3, r5
 8008786:	b9aa      	cbnz	r2, 80087b4 <scalbn+0x3c>
 8008788:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800878c:	4323      	orrs	r3, r4
 800878e:	d03b      	beq.n	8008808 <scalbn+0x90>
 8008790:	4b31      	ldr	r3, [pc, #196]	; (8008858 <scalbn+0xe0>)
 8008792:	4629      	mov	r1, r5
 8008794:	2200      	movs	r2, #0
 8008796:	ee10 0a10 	vmov	r0, s0
 800879a:	f7f7 ff4d 	bl	8000638 <__aeabi_dmul>
 800879e:	4b2f      	ldr	r3, [pc, #188]	; (800885c <scalbn+0xe4>)
 80087a0:	429e      	cmp	r6, r3
 80087a2:	4604      	mov	r4, r0
 80087a4:	460d      	mov	r5, r1
 80087a6:	da12      	bge.n	80087ce <scalbn+0x56>
 80087a8:	a327      	add	r3, pc, #156	; (adr r3, 8008848 <scalbn+0xd0>)
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	f7f7 ff43 	bl	8000638 <__aeabi_dmul>
 80087b2:	e009      	b.n	80087c8 <scalbn+0x50>
 80087b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80087b8:	428a      	cmp	r2, r1
 80087ba:	d10c      	bne.n	80087d6 <scalbn+0x5e>
 80087bc:	ee10 2a10 	vmov	r2, s0
 80087c0:	4620      	mov	r0, r4
 80087c2:	4629      	mov	r1, r5
 80087c4:	f7f7 fd82 	bl	80002cc <__adddf3>
 80087c8:	4604      	mov	r4, r0
 80087ca:	460d      	mov	r5, r1
 80087cc:	e01c      	b.n	8008808 <scalbn+0x90>
 80087ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80087d2:	460b      	mov	r3, r1
 80087d4:	3a36      	subs	r2, #54	; 0x36
 80087d6:	4432      	add	r2, r6
 80087d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80087dc:	428a      	cmp	r2, r1
 80087de:	dd0b      	ble.n	80087f8 <scalbn+0x80>
 80087e0:	ec45 4b11 	vmov	d1, r4, r5
 80087e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008850 <scalbn+0xd8>
 80087e8:	f000 f83c 	bl	8008864 <copysign>
 80087ec:	a318      	add	r3, pc, #96	; (adr r3, 8008850 <scalbn+0xd8>)
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	ec51 0b10 	vmov	r0, r1, d0
 80087f6:	e7da      	b.n	80087ae <scalbn+0x36>
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	dd08      	ble.n	800880e <scalbn+0x96>
 80087fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008800:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008804:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008808:	ec45 4b10 	vmov	d0, r4, r5
 800880c:	bd70      	pop	{r4, r5, r6, pc}
 800880e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008812:	da0d      	bge.n	8008830 <scalbn+0xb8>
 8008814:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008818:	429e      	cmp	r6, r3
 800881a:	ec45 4b11 	vmov	d1, r4, r5
 800881e:	dce1      	bgt.n	80087e4 <scalbn+0x6c>
 8008820:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008848 <scalbn+0xd0>
 8008824:	f000 f81e 	bl	8008864 <copysign>
 8008828:	a307      	add	r3, pc, #28	; (adr r3, 8008848 <scalbn+0xd0>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	e7e0      	b.n	80087f2 <scalbn+0x7a>
 8008830:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008834:	3236      	adds	r2, #54	; 0x36
 8008836:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800883a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800883e:	4620      	mov	r0, r4
 8008840:	4629      	mov	r1, r5
 8008842:	2200      	movs	r2, #0
 8008844:	4b06      	ldr	r3, [pc, #24]	; (8008860 <scalbn+0xe8>)
 8008846:	e7b2      	b.n	80087ae <scalbn+0x36>
 8008848:	c2f8f359 	.word	0xc2f8f359
 800884c:	01a56e1f 	.word	0x01a56e1f
 8008850:	8800759c 	.word	0x8800759c
 8008854:	7e37e43c 	.word	0x7e37e43c
 8008858:	43500000 	.word	0x43500000
 800885c:	ffff3cb0 	.word	0xffff3cb0
 8008860:	3c900000 	.word	0x3c900000

08008864 <copysign>:
 8008864:	ec51 0b10 	vmov	r0, r1, d0
 8008868:	ee11 0a90 	vmov	r0, s3
 800886c:	ee10 2a10 	vmov	r2, s0
 8008870:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008874:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008878:	ea41 0300 	orr.w	r3, r1, r0
 800887c:	ec43 2b10 	vmov	d0, r2, r3
 8008880:	4770      	bx	lr
	...

08008884 <_init>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	bf00      	nop
 8008888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888a:	bc08      	pop	{r3}
 800888c:	469e      	mov	lr, r3
 800888e:	4770      	bx	lr

08008890 <_fini>:
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008892:	bf00      	nop
 8008894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008896:	bc08      	pop	{r3}
 8008898:	469e      	mov	lr, r3
 800889a:	4770      	bx	lr
