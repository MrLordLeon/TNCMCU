
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006acc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  08006c9c  08006c9c  00016c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007364  08007364  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007364  08007364  00017364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800736c  0800736c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800736c  0800736c  0001736c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007370  08007370  00017370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d94  20000084  080073f8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e18  080073f8  00022e18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011701  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024f6  00000000  00000000  000317b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  00033cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  00034b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e95  00000000  00000000  00035908  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc39  00000000  00000000  0005879d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2765  00000000  00000000  000643d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136b3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b8  00000000  00000000  00136bb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c84 	.word	0x08006c84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08006c84 	.word	0x08006c84

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	80fb      	strh	r3, [r7, #6]
 80005cc:	4613      	mov	r3, r2
 80005ce:	717b      	strb	r3, [r7, #5]
    int temp;

    sprintf(uartData, "\nSelector              = %d",select_8_16);
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	461a      	mov	r2, r3
 80005d4:	4951      	ldr	r1, [pc, #324]	; (800071c <conv_HEX_to_BIN+0x15c>)
 80005d6:	4852      	ldr	r0, [pc, #328]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005d8:	f005 ff58 	bl	800648c <siprintf>
    HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80005dc:	4850      	ldr	r0, [pc, #320]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005de:	f7ff fe17 	bl	8000210 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	230a      	movs	r3, #10
 80005e8:	494d      	ldr	r1, [pc, #308]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005ea:	484e      	ldr	r0, [pc, #312]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80005ec:	f005 f825 	bl	800563a <HAL_UART_Transmit>

    sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	461a      	mov	r2, r3
 80005f4:	494c      	ldr	r1, [pc, #304]	; (8000728 <conv_HEX_to_BIN+0x168>)
 80005f6:	484a      	ldr	r0, [pc, #296]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005f8:	f005 ff48 	bl	800648c <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80005fc:	4848      	ldr	r0, [pc, #288]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005fe:	f7ff fe07 	bl	8000210 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	230a      	movs	r3, #10
 8000608:	4945      	ldr	r1, [pc, #276]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800060a:	4846      	ldr	r0, [pc, #280]	; (8000724 <conv_HEX_to_BIN+0x164>)
 800060c:	f005 f815 	bl	800563a <HAL_UART_Transmit>

    if(select_8_16){
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01f      	beq.n	8000656 <conv_HEX_to_BIN+0x96>
		for(int i = 0; i < 8; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e018      	b.n	800064e <conv_HEX_to_BIN+0x8e>
			temp = hex_byte_in >> i;
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	fa42 f303 	asr.w	r3, r2, r3
 8000624:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	bfb8      	it	lt
 8000630:	425b      	neglt	r3, r3
 8000632:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	2a00      	cmp	r2, #0
 800063e:	bf14      	ite	ne
 8000640:	2201      	movne	r2, #1
 8000642:	2200      	moveq	r2, #0
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	2b07      	cmp	r3, #7
 8000652:	dde3      	ble.n	800061c <conv_HEX_to_BIN+0x5c>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000654:	e05e      	b.n	8000714 <conv_HEX_to_BIN+0x154>
	   sprintf(uartData, "\nByte value            = %x\nBinary value[LSB:MSB] =",hex_byte_in);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	461a      	mov	r2, r3
 800065a:	4934      	ldr	r1, [pc, #208]	; (800072c <conv_HEX_to_BIN+0x16c>)
 800065c:	4830      	ldr	r0, [pc, #192]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800065e:	f005 ff15 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000662:	482f      	ldr	r0, [pc, #188]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000664:	f7ff fdd4 	bl	8000210 <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	b29a      	uxth	r2, r3
 800066c:	230a      	movs	r3, #10
 800066e:	492c      	ldr	r1, [pc, #176]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000670:	482c      	ldr	r0, [pc, #176]	; (8000724 <conv_HEX_to_BIN+0x164>)
 8000672:	f004 ffe2 	bl	800563a <HAL_UART_Transmit>
		for(int i = 0; i < 16; i++){
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	e038      	b.n	80006ee <conv_HEX_to_BIN+0x12e>
			temp = hex_byte_in >> i;
 800067c:	88fa      	ldrh	r2, [r7, #6]
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	fa42 f303 	asr.w	r3, r2, r3
 8000684:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " b=%d ",temp);
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4929      	ldr	r1, [pc, #164]	; (8000730 <conv_HEX_to_BIN+0x170>)
 800068a:	4825      	ldr	r0, [pc, #148]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800068c:	f005 fefe 	bl	800648c <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000690:	4823      	ldr	r0, [pc, #140]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000692:	f7ff fdbd 	bl	8000210 <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	b29a      	uxth	r2, r3
 800069a:	230a      	movs	r3, #10
 800069c:	4920      	ldr	r1, [pc, #128]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800069e:	4821      	ldr	r0, [pc, #132]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80006a0:	f004 ffcb 	bl	800563a <HAL_UART_Transmit>
			temp = temp%2;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " a=%d ",temp);
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	491f      	ldr	r1, [pc, #124]	; (8000734 <conv_HEX_to_BIN+0x174>)
 80006b6:	481a      	ldr	r0, [pc, #104]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006b8:	f005 fee8 	bl	800648c <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80006bc:	4818      	ldr	r0, [pc, #96]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006be:	f7ff fda7 	bl	8000210 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	230a      	movs	r3, #10
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006ca:	4816      	ldr	r0, [pc, #88]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80006cc:	f004 ffb5 	bl	800563a <HAL_UART_Transmit>
			*(bin_byte_out + 16 - 1 - i) = temp; //MSB is at lowest index
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	f1c3 030f 	rsb	r3, r3, #15
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	4413      	add	r3, r2
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	2a00      	cmp	r2, #0
 80006de:	bf14      	ite	ne
 80006e0:	2201      	movne	r2, #1
 80006e2:	2200      	moveq	r2, #0
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	3301      	adds	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	ddc3      	ble.n	800067c <conv_HEX_to_BIN+0xbc>
		sprintf(uartData, "\n ");
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <conv_HEX_to_BIN+0x178>)
 80006f8:	8811      	ldrh	r1, [r2, #0]
 80006fa:	7892      	ldrb	r2, [r2, #2]
 80006fc:	8019      	strh	r1, [r3, #0]
 80006fe:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000702:	f7ff fd85 	bl	8000210 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	b29a      	uxth	r2, r3
 800070a:	230a      	movs	r3, #10
 800070c:	4904      	ldr	r1, [pc, #16]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <conv_HEX_to_BIN+0x164>)
 8000710:	f004 ff93 	bl	800563a <HAL_UART_Transmit>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	08006c9c 	.word	0x08006c9c
 8000720:	20001cd4 	.word	0x20001cd4
 8000724:	20002b90 	.word	0x20002b90
 8000728:	08006cb8 	.word	0x08006cb8
 800072c:	08006cec 	.word	0x08006cec
 8000730:	08006d20 	.word	0x08006d20
 8000734:	08006d28 	.word	0x08006d28
 8000738:	08006d30 	.word	0x08006d30

0800073c <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8000740:	2201      	movs	r2, #1
 8000742:	4909      	ldr	r1, [pc, #36]	; (8000768 <init_AX25+0x2c>)
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <init_AX25+0x30>)
 8000746:	f005 f811 	bl	800576c <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <init_AX25+0x34>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <init_AX25+0x34>)
 8000752:	2200      	movs	r2, #0
 8000754:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <init_AX25+0x34>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <init_AX25+0x34>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20001448 	.word	0x20001448
 800076c:	20002b90 	.word	0x20002b90
 8000770:	2000143c 	.word	0x2000143c

08000774 <tx_rx>:

void tx_rx() {
 8000774:	b5b0      	push	{r4, r5, r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	if (changeMode) {
 800077a:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <tx_rx+0x80>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <tx_rx+0x18>
		changeMode = 0;
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <tx_rx+0x80>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
		toggleMode();
 8000788:	f001 fcbc 	bl	8002104 <toggleMode>
	}

	//Transmission Mode
	if (mode) {
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <tx_rx+0x84>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d008      	beq.n	80007a6 <tx_rx+0x32>
		bool packet_received = false;
 8000794:	2300      	movs	r3, #0
 8000796:	71bb      	strb	r3, [r7, #6]
		bool packet_converted = false;
 8000798:	2300      	movs	r3, #0
 800079a:	717b      	strb	r3, [r7, #5]

		//Run receiving KISS
		packet_received = receiving_KISS();
 800079c:	f001 f9ac 	bl	8001af8 <receiving_KISS>
 80007a0:	4603      	mov	r3, r0
 80007a2:	71bb      	strb	r3, [r7, #6]
		if(!change){
			sprintf(uartData, "Changing mode due to request\n");
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
}
 80007a4:	e022      	b.n	80007ec <tx_rx+0x78>
		bool change = receiving_AX25();
 80007a6:	f000 ff41 	bl	800162c <receiving_AX25>
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
		if(!change){
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f083 0301 	eor.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d018      	beq.n	80007ec <tx_rx+0x78>
			sprintf(uartData, "Changing mode due to request\n");
 80007ba:	4a10      	ldr	r2, [pc, #64]	; (80007fc <tx_rx+0x88>)
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <tx_rx+0x8c>)
 80007be:	4615      	mov	r5, r2
 80007c0:	461c      	mov	r4, r3
 80007c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c4:	6028      	str	r0, [r5, #0]
 80007c6:	6069      	str	r1, [r5, #4]
 80007c8:	60aa      	str	r2, [r5, #8]
 80007ca:	60eb      	str	r3, [r5, #12]
 80007cc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80007ce:	6128      	str	r0, [r5, #16]
 80007d0:	6169      	str	r1, [r5, #20]
 80007d2:	61aa      	str	r2, [r5, #24]
 80007d4:	8823      	ldrh	r3, [r4, #0]
 80007d6:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80007d8:	4808      	ldr	r0, [pc, #32]	; (80007fc <tx_rx+0x88>)
 80007da:	f7ff fd19 	bl	8000210 <strlen>
 80007de:	4603      	mov	r3, r0
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	230a      	movs	r3, #10
 80007e4:	4905      	ldr	r1, [pc, #20]	; (80007fc <tx_rx+0x88>)
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <tx_rx+0x90>)
 80007e8:	f004 ff27 	bl	800563a <HAL_UART_Transmit>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bdb0      	pop	{r4, r5, r7, pc}
 80007f4:	200000a5 	.word	0x200000a5
 80007f8:	20002b38 	.word	0x20002b38
 80007fc:	20001cd4 	.word	0x20001cd4
 8000800:	08006d34 	.word	0x08006d34
 8000804:	20002b90 	.word	0x20002b90

08000808 <print_outAX25>:
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		output_AX25();
	}
}

void print_outAX25(){
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	b08d      	sub	sp, #52	; 0x34
 800080c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800080e:	4b9b      	ldr	r3, [pc, #620]	; (8000a7c <print_outAX25+0x274>)
 8000810:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000818:	330c      	adds	r3, #12
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET being sent to radio\n");
 800081e:	4b98      	ldr	r3, [pc, #608]	; (8000a80 <print_outAX25+0x278>)
 8000820:	4a98      	ldr	r2, [pc, #608]	; (8000a84 <print_outAX25+0x27c>)
 8000822:	4614      	mov	r4, r2
 8000824:	469c      	mov	ip, r3
 8000826:	f104 0e20 	add.w	lr, r4, #32
 800082a:	4665      	mov	r5, ip
 800082c:	4626      	mov	r6, r4
 800082e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000830:	6028      	str	r0, [r5, #0]
 8000832:	6069      	str	r1, [r5, #4]
 8000834:	60aa      	str	r2, [r5, #8]
 8000836:	60eb      	str	r3, [r5, #12]
 8000838:	3410      	adds	r4, #16
 800083a:	f10c 0c10 	add.w	ip, ip, #16
 800083e:	4574      	cmp	r4, lr
 8000840:	d1f3      	bne.n	800082a <print_outAX25+0x22>
 8000842:	4662      	mov	r2, ip
 8000844:	4623      	mov	r3, r4
 8000846:	cb03      	ldmia	r3!, {r0, r1}
 8000848:	6010      	str	r0, [r2, #0]
 800084a:	6051      	str	r1, [r2, #4]
 800084c:	8819      	ldrh	r1, [r3, #0]
 800084e:	789b      	ldrb	r3, [r3, #2]
 8000850:	8111      	strh	r1, [r2, #8]
 8000852:	7293      	strb	r3, [r2, #10]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000854:	488a      	ldr	r0, [pc, #552]	; (8000a80 <print_outAX25+0x278>)
 8000856:	f7ff fcdb 	bl	8000210 <strlen>
 800085a:	4603      	mov	r3, r0
 800085c:	b29a      	uxth	r2, r3
 800085e:	230a      	movs	r3, #10
 8000860:	4987      	ldr	r1, [pc, #540]	; (8000a80 <print_outAX25+0x278>)
 8000862:	4889      	ldr	r0, [pc, #548]	; (8000a88 <print_outAX25+0x280>)
 8000864:	f004 fee9 	bl	800563a <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = local_packet->address;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800086e:	3310      	adds	r3, #16
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
 8000878:	e040      	b.n	80008fc <print_outAX25+0xf4>
		sprintf(uartData, "Address Field %d =",i+1);
 800087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087c:	3301      	adds	r3, #1
 800087e:	461a      	mov	r2, r3
 8000880:	4982      	ldr	r1, [pc, #520]	; (8000a8c <print_outAX25+0x284>)
 8000882:	487f      	ldr	r0, [pc, #508]	; (8000a80 <print_outAX25+0x278>)
 8000884:	f005 fe02 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000888:	487d      	ldr	r0, [pc, #500]	; (8000a80 <print_outAX25+0x278>)
 800088a:	f7ff fcc1 	bl	8000210 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29a      	uxth	r2, r3
 8000892:	230a      	movs	r3, #10
 8000894:	497a      	ldr	r1, [pc, #488]	; (8000a80 <print_outAX25+0x278>)
 8000896:	487c      	ldr	r0, [pc, #496]	; (8000a88 <print_outAX25+0x280>)
 8000898:	f004 fecf 	bl	800563a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
 80008a0:	e015      	b.n	80008ce <print_outAX25+0xc6>
			sprintf(uartData, " %d ",*(curr_mem+j));
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	4978      	ldr	r1, [pc, #480]	; (8000a90 <print_outAX25+0x288>)
 80008ae:	4874      	ldr	r0, [pc, #464]	; (8000a80 <print_outAX25+0x278>)
 80008b0:	f005 fdec 	bl	800648c <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80008b4:	4872      	ldr	r0, [pc, #456]	; (8000a80 <print_outAX25+0x278>)
 80008b6:	f7ff fcab 	bl	8000210 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	230a      	movs	r3, #10
 80008c0:	496f      	ldr	r1, [pc, #444]	; (8000a80 <print_outAX25+0x278>)
 80008c2:	4871      	ldr	r0, [pc, #452]	; (8000a88 <print_outAX25+0x280>)
 80008c4:	f004 feb9 	bl	800563a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80008c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ca:	3301      	adds	r3, #1
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	2b07      	cmp	r3, #7
 80008d2:	dde6      	ble.n	80008a2 <print_outAX25+0x9a>
		}
		curr_mem += 8;
 80008d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d6:	3308      	adds	r3, #8
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80008da:	4a69      	ldr	r2, [pc, #420]	; (8000a80 <print_outAX25+0x278>)
 80008dc:	4b6d      	ldr	r3, [pc, #436]	; (8000a94 <print_outAX25+0x28c>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80008e2:	4867      	ldr	r0, [pc, #412]	; (8000a80 <print_outAX25+0x278>)
 80008e4:	f7ff fc94 	bl	8000210 <strlen>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	230a      	movs	r3, #10
 80008ee:	4964      	ldr	r1, [pc, #400]	; (8000a80 <print_outAX25+0x278>)
 80008f0:	4865      	ldr	r0, [pc, #404]	; (8000a88 <print_outAX25+0x280>)
 80008f2:	f004 fea2 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 80008f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f8:	3301      	adds	r3, #1
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80008fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fe:	2b0d      	cmp	r3, #13
 8000900:	ddbb      	ble.n	800087a <print_outAX25+0x72>
	}

	//if address was bitstuffed then print rest of address field
	sprintf(uartData, "Address Field extra = ");
 8000902:	4a5f      	ldr	r2, [pc, #380]	; (8000a80 <print_outAX25+0x278>)
 8000904:	4b64      	ldr	r3, [pc, #400]	; (8000a98 <print_outAX25+0x290>)
 8000906:	4614      	mov	r4, r2
 8000908:	461d      	mov	r5, r3
 800090a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090c:	6020      	str	r0, [r4, #0]
 800090e:	6061      	str	r1, [r4, #4]
 8000910:	60a2      	str	r2, [r4, #8]
 8000912:	60e3      	str	r3, [r4, #12]
 8000914:	6828      	ldr	r0, [r5, #0]
 8000916:	6120      	str	r0, [r4, #16]
 8000918:	88ab      	ldrh	r3, [r5, #4]
 800091a:	79aa      	ldrb	r2, [r5, #6]
 800091c:	82a3      	strh	r3, [r4, #20]
 800091e:	4613      	mov	r3, r2
 8000920:	75a3      	strb	r3, [r4, #22]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000922:	4857      	ldr	r0, [pc, #348]	; (8000a80 <print_outAX25+0x278>)
 8000924:	f7ff fc74 	bl	8000210 <strlen>
 8000928:	4603      	mov	r3, r0
 800092a:	b29a      	uxth	r2, r3
 800092c:	230a      	movs	r3, #10
 800092e:	4954      	ldr	r1, [pc, #336]	; (8000a80 <print_outAX25+0x278>)
 8000930:	4855      	ldr	r0, [pc, #340]	; (8000a88 <print_outAX25+0x280>)
 8000932:	f004 fe82 	bl	800563a <HAL_UART_Transmit>
	curr_mem += address_len;
 8000936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000938:	3370      	adds	r3, #112	; 0x70
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_address > 0){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000942:	3310      	adds	r3, #16
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	dd21      	ble.n	800098e <print_outAX25+0x186>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
 800094e:	e016      	b.n	800097e <print_outAX25+0x176>
			sprintf(uartData, " %d ",*(curr_mem-i));
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	425b      	negs	r3, r3
 8000954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	494c      	ldr	r1, [pc, #304]	; (8000a90 <print_outAX25+0x288>)
 800095e:	4848      	ldr	r0, [pc, #288]	; (8000a80 <print_outAX25+0x278>)
 8000960:	f005 fd94 	bl	800648c <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000964:	4846      	ldr	r0, [pc, #280]	; (8000a80 <print_outAX25+0x278>)
 8000966:	f7ff fc53 	bl	8000210 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29a      	uxth	r2, r3
 800096e:	230a      	movs	r3, #10
 8000970:	4943      	ldr	r1, [pc, #268]	; (8000a80 <print_outAX25+0x278>)
 8000972:	4845      	ldr	r0, [pc, #276]	; (8000a88 <print_outAX25+0x280>)
 8000974:	f004 fe61 	bl	800563a <HAL_UART_Transmit>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	3301      	adds	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000984:	3310      	adds	r3, #16
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	6a3a      	ldr	r2, [r7, #32]
 800098a:	429a      	cmp	r2, r3
 800098c:	dbe0      	blt.n	8000950 <print_outAX25+0x148>
		}
	}
	sprintf(uartData, "\n");
 800098e:	4a3c      	ldr	r2, [pc, #240]	; (8000a80 <print_outAX25+0x278>)
 8000990:	4b40      	ldr	r3, [pc, #256]	; (8000a94 <print_outAX25+0x28c>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000996:	483a      	ldr	r0, [pc, #232]	; (8000a80 <print_outAX25+0x278>)
 8000998:	f7ff fc3a 	bl	8000210 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	b29a      	uxth	r2, r3
 80009a0:	230a      	movs	r3, #10
 80009a2:	4937      	ldr	r1, [pc, #220]	; (8000a80 <print_outAX25+0x278>)
 80009a4:	4838      	ldr	r0, [pc, #224]	; (8000a88 <print_outAX25+0x280>)
 80009a6:	f004 fe48 	bl	800563a <HAL_UART_Transmit>

	//Print Control Field
	curr_mem = local_packet->control;//Subtract 8 to start at the flag start
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80009b0:	3314      	adds	r3, #20
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 80009b6:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <print_outAX25+0x278>)
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <print_outAX25+0x294>)
 80009ba:	4615      	mov	r5, r2
 80009bc:	461c      	mov	r4, r3
 80009be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c0:	6028      	str	r0, [r5, #0]
 80009c2:	6069      	str	r1, [r5, #4]
 80009c4:	60aa      	str	r2, [r5, #8]
 80009c6:	60eb      	str	r3, [r5, #12]
 80009c8:	8823      	ldrh	r3, [r4, #0]
 80009ca:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009cc:	482c      	ldr	r0, [pc, #176]	; (8000a80 <print_outAX25+0x278>)
 80009ce:	f7ff fc1f 	bl	8000210 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	230a      	movs	r3, #10
 80009d8:	4929      	ldr	r1, [pc, #164]	; (8000a80 <print_outAX25+0x278>)
 80009da:	482b      	ldr	r0, [pc, #172]	; (8000a88 <print_outAX25+0x280>)
 80009dc:	f004 fe2d 	bl	800563a <HAL_UART_Transmit>

	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	e015      	b.n	8000a12 <print_outAX25+0x20a>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	4927      	ldr	r1, [pc, #156]	; (8000a90 <print_outAX25+0x288>)
 80009f2:	4823      	ldr	r0, [pc, #140]	; (8000a80 <print_outAX25+0x278>)
 80009f4:	f005 fd4a 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009f8:	4821      	ldr	r0, [pc, #132]	; (8000a80 <print_outAX25+0x278>)
 80009fa:	f7ff fc09 	bl	8000210 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	230a      	movs	r3, #10
 8000a04:	491e      	ldr	r1, [pc, #120]	; (8000a80 <print_outAX25+0x278>)
 8000a06:	4820      	ldr	r0, [pc, #128]	; (8000a88 <print_outAX25+0x280>)
 8000a08:	f004 fe17 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	61fb      	str	r3, [r7, #28]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000a18:	3314      	adds	r3, #20
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	69fa      	ldr	r2, [r7, #28]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbe0      	blt.n	80009e6 <print_outAX25+0x1de>
	}
	sprintf(uartData, "\n");
 8000a24:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <print_outAX25+0x278>)
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <print_outAX25+0x28c>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a2c:	4814      	ldr	r0, [pc, #80]	; (8000a80 <print_outAX25+0x278>)
 8000a2e:	f7ff fbef 	bl	8000210 <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	230a      	movs	r3, #10
 8000a38:	4911      	ldr	r1, [pc, #68]	; (8000a80 <print_outAX25+0x278>)
 8000a3a:	4813      	ldr	r0, [pc, #76]	; (8000a88 <print_outAX25+0x280>)
 8000a3c:	f004 fdfd 	bl	800563a <HAL_UART_Transmit>

	//PID
	curr_mem = local_packet->PID;//Subtract 8 to start at the flag start
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000a46:	3318      	adds	r3, #24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <print_outAX25+0x278>)
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <print_outAX25+0x298>)
 8000a50:	4615      	mov	r5, r2
 8000a52:	461c      	mov	r4, r3
 8000a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a56:	6028      	str	r0, [r5, #0]
 8000a58:	6069      	str	r1, [r5, #4]
 8000a5a:	60aa      	str	r2, [r5, #8]
 8000a5c:	60eb      	str	r3, [r5, #12]
 8000a5e:	8823      	ldrh	r3, [r4, #0]
 8000a60:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <print_outAX25+0x278>)
 8000a64:	f7ff fbd4 	bl	8000210 <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	4904      	ldr	r1, [pc, #16]	; (8000a80 <print_outAX25+0x278>)
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <print_outAX25+0x280>)
 8000a72:	f004 fde2 	bl	800563a <HAL_UART_Transmit>

	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
 8000a7a:	e029      	b.n	8000ad0 <print_outAX25+0x2c8>
 8000a7c:	200000d4 	.word	0x200000d4
 8000a80:	20001cd4 	.word	0x20001cd4
 8000a84:	08006dcc 	.word	0x08006dcc
 8000a88:	20002b90 	.word	0x20002b90
 8000a8c:	08006df8 	.word	0x08006df8
 8000a90:	08006e0c 	.word	0x08006e0c
 8000a94:	08006e14 	.word	0x08006e14
 8000a98:	08006e18 	.word	0x08006e18
 8000a9c:	08006e30 	.word	0x08006e30
 8000aa0:	08006e44 	.word	0x08006e44
		sprintf(uartData, " %d ",*(curr_mem+i));
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	499d      	ldr	r1, [pc, #628]	; (8000d24 <print_outAX25+0x51c>)
 8000ab0:	489d      	ldr	r0, [pc, #628]	; (8000d28 <print_outAX25+0x520>)
 8000ab2:	f005 fceb 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ab6:	489c      	ldr	r0, [pc, #624]	; (8000d28 <print_outAX25+0x520>)
 8000ab8:	f7ff fbaa 	bl	8000210 <strlen>
 8000abc:	4603      	mov	r3, r0
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	4999      	ldr	r1, [pc, #612]	; (8000d28 <print_outAX25+0x520>)
 8000ac4:	4899      	ldr	r0, [pc, #612]	; (8000d2c <print_outAX25+0x524>)
 8000ac6:	f004 fdb8 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	3301      	adds	r3, #1
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000ad6:	3318      	adds	r3, #24
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3308      	adds	r3, #8
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	dbe0      	blt.n	8000aa4 <print_outAX25+0x29c>
	}
	sprintf(uartData, "\n");
 8000ae2:	4a91      	ldr	r2, [pc, #580]	; (8000d28 <print_outAX25+0x520>)
 8000ae4:	4b92      	ldr	r3, [pc, #584]	; (8000d30 <print_outAX25+0x528>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000aea:	488f      	ldr	r0, [pc, #572]	; (8000d28 <print_outAX25+0x520>)
 8000aec:	f7ff fb90 	bl	8000210 <strlen>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	230a      	movs	r3, #10
 8000af6:	498c      	ldr	r1, [pc, #560]	; (8000d28 <print_outAX25+0x520>)
 8000af8:	488c      	ldr	r0, [pc, #560]	; (8000d2c <print_outAX25+0x524>)
 8000afa:	f004 fd9e 	bl	800563a <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = local_packet->Info;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b04:	331c      	adds	r3, #28
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e040      	b.n	8000b92 <print_outAX25+0x38a>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	461a      	mov	r2, r3
 8000b16:	4987      	ldr	r1, [pc, #540]	; (8000d34 <print_outAX25+0x52c>)
 8000b18:	4883      	ldr	r0, [pc, #524]	; (8000d28 <print_outAX25+0x520>)
 8000b1a:	f005 fcb7 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b1e:	4882      	ldr	r0, [pc, #520]	; (8000d28 <print_outAX25+0x520>)
 8000b20:	f7ff fb76 	bl	8000210 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	230a      	movs	r3, #10
 8000b2a:	497f      	ldr	r1, [pc, #508]	; (8000d28 <print_outAX25+0x520>)
 8000b2c:	487f      	ldr	r0, [pc, #508]	; (8000d2c <print_outAX25+0x524>)
 8000b2e:	f004 fd84 	bl	800563a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	e015      	b.n	8000b64 <print_outAX25+0x35c>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4978      	ldr	r1, [pc, #480]	; (8000d24 <print_outAX25+0x51c>)
 8000b44:	4878      	ldr	r0, [pc, #480]	; (8000d28 <print_outAX25+0x520>)
 8000b46:	f005 fca1 	bl	800648c <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b4a:	4877      	ldr	r0, [pc, #476]	; (8000d28 <print_outAX25+0x520>)
 8000b4c:	f7ff fb60 	bl	8000210 <strlen>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	230a      	movs	r3, #10
 8000b56:	4974      	ldr	r1, [pc, #464]	; (8000d28 <print_outAX25+0x520>)
 8000b58:	4874      	ldr	r0, [pc, #464]	; (8000d2c <print_outAX25+0x524>)
 8000b5a:	f004 fd6e 	bl	800563a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	3301      	adds	r3, #1
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	2b07      	cmp	r3, #7
 8000b68:	dde6      	ble.n	8000b38 <print_outAX25+0x330>
		}
		curr_mem += 8;
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	3308      	adds	r3, #8
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000b70:	4a6d      	ldr	r2, [pc, #436]	; (8000d28 <print_outAX25+0x520>)
 8000b72:	4b6f      	ldr	r3, [pc, #444]	; (8000d30 <print_outAX25+0x528>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b78:	486b      	ldr	r0, [pc, #428]	; (8000d28 <print_outAX25+0x520>)
 8000b7a:	f7ff fb49 	bl	8000210 <strlen>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	230a      	movs	r3, #10
 8000b84:	4968      	ldr	r1, [pc, #416]	; (8000d28 <print_outAX25+0x520>)
 8000b86:	4869      	ldr	r0, [pc, #420]	; (8000d2c <print_outAX25+0x524>)
 8000b88:	f004 fd57 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	da00      	bge.n	8000ba0 <print_outAX25+0x398>
 8000b9e:	3307      	adds	r3, #7
 8000ba0:	10db      	asrs	r3, r3, #3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	dbb2      	blt.n	8000b10 <print_outAX25+0x308>
	}

	//if Info was bitstuffed then print rest of address field
	sprintf(uartData, "Info Field extra = ");
 8000baa:	4a5f      	ldr	r2, [pc, #380]	; (8000d28 <print_outAX25+0x520>)
 8000bac:	4b62      	ldr	r3, [pc, #392]	; (8000d38 <print_outAX25+0x530>)
 8000bae:	4615      	mov	r5, r2
 8000bb0:	461c      	mov	r4, r3
 8000bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb4:	6028      	str	r0, [r5, #0]
 8000bb6:	6069      	str	r1, [r5, #4]
 8000bb8:	60aa      	str	r2, [r5, #8]
 8000bba:	60eb      	str	r3, [r5, #12]
 8000bbc:	6820      	ldr	r0, [r4, #0]
 8000bbe:	6128      	str	r0, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000bc0:	4859      	ldr	r0, [pc, #356]	; (8000d28 <print_outAX25+0x520>)
 8000bc2:	f7ff fb25 	bl	8000210 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	230a      	movs	r3, #10
 8000bcc:	4956      	ldr	r1, [pc, #344]	; (8000d28 <print_outAX25+0x520>)
 8000bce:	4857      	ldr	r0, [pc, #348]	; (8000d2c <print_outAX25+0x524>)
 8000bd0:	f004 fd33 	bl	800563a <HAL_UART_Transmit>
	curr_mem += local_packet->Info_Len;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be0:	4413      	add	r3, r2
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_Info > 0){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000bea:	331c      	adds	r3, #28
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dd20      	ble.n	8000c34 <print_outAX25+0x42c>
		for(int i = 0; i < local_packet->stuffed_Info; i++){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e015      	b.n	8000c24 <print_outAX25+0x41c>
			sprintf(uartData, " %d ",*(curr_mem+i));
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bfc:	4413      	add	r3, r2
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4948      	ldr	r1, [pc, #288]	; (8000d24 <print_outAX25+0x51c>)
 8000c04:	4848      	ldr	r0, [pc, #288]	; (8000d28 <print_outAX25+0x520>)
 8000c06:	f005 fc41 	bl	800648c <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c0a:	4847      	ldr	r0, [pc, #284]	; (8000d28 <print_outAX25+0x520>)
 8000c0c:	f7ff fb00 	bl	8000210 <strlen>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	230a      	movs	r3, #10
 8000c16:	4944      	ldr	r1, [pc, #272]	; (8000d28 <print_outAX25+0x520>)
 8000c18:	4844      	ldr	r0, [pc, #272]	; (8000d2c <print_outAX25+0x524>)
 8000c1a:	f004 fd0e 	bl	800563a <HAL_UART_Transmit>
		for(int i = 0; i < local_packet->stuffed_Info; i++){
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000c2a:	331c      	adds	r3, #28
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbe1      	blt.n	8000bf8 <print_outAX25+0x3f0>
		}
	}
	sprintf(uartData, "\n");
 8000c34:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <print_outAX25+0x520>)
 8000c36:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <print_outAX25+0x528>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c3c:	483a      	ldr	r0, [pc, #232]	; (8000d28 <print_outAX25+0x520>)
 8000c3e:	f7ff fae7 	bl	8000210 <strlen>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	230a      	movs	r3, #10
 8000c48:	4937      	ldr	r1, [pc, #220]	; (8000d28 <print_outAX25+0x520>)
 8000c4a:	4838      	ldr	r0, [pc, #224]	; (8000d2c <print_outAX25+0x524>)
 8000c4c:	f004 fcf5 	bl	800563a <HAL_UART_Transmit>

	curr_mem = local_packet->FCS;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000c56:	3304      	adds	r3, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "FCS Field     =")	;
 8000c5c:	4a32      	ldr	r2, [pc, #200]	; (8000d28 <print_outAX25+0x520>)
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <print_outAX25+0x534>)
 8000c60:	4614      	mov	r4, r2
 8000c62:	461d      	mov	r5, r3
 8000c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c66:	6020      	str	r0, [r4, #0]
 8000c68:	6061      	str	r1, [r4, #4]
 8000c6a:	60a2      	str	r2, [r4, #8]
 8000c6c:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c6e:	482e      	ldr	r0, [pc, #184]	; (8000d28 <print_outAX25+0x520>)
 8000c70:	f7ff face 	bl	8000210 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	230a      	movs	r3, #10
 8000c7a:	492b      	ldr	r1, [pc, #172]	; (8000d28 <print_outAX25+0x520>)
 8000c7c:	482b      	ldr	r0, [pc, #172]	; (8000d2c <print_outAX25+0x524>)
 8000c7e:	f004 fcdc 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	e015      	b.n	8000cb4 <print_outAX25+0x4ac>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c8c:	4413      	add	r3, r2
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4924      	ldr	r1, [pc, #144]	; (8000d24 <print_outAX25+0x51c>)
 8000c94:	4824      	ldr	r0, [pc, #144]	; (8000d28 <print_outAX25+0x520>)
 8000c96:	f005 fbf9 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c9a:	4823      	ldr	r0, [pc, #140]	; (8000d28 <print_outAX25+0x520>)
 8000c9c:	f7ff fab8 	bl	8000210 <strlen>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	4920      	ldr	r1, [pc, #128]	; (8000d28 <print_outAX25+0x520>)
 8000ca8:	4820      	ldr	r0, [pc, #128]	; (8000d2c <print_outAX25+0x524>)
 8000caa:	f004 fcc6 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3310      	adds	r3, #16
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbe1      	blt.n	8000c88 <print_outAX25+0x480>
	}

	sprintf(uartData, "\n");
 8000cc4:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <print_outAX25+0x520>)
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <print_outAX25+0x528>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ccc:	4816      	ldr	r0, [pc, #88]	; (8000d28 <print_outAX25+0x520>)
 8000cce:	f7ff fa9f 	bl	8000210 <strlen>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	4913      	ldr	r1, [pc, #76]	; (8000d28 <print_outAX25+0x520>)
 8000cda:	4814      	ldr	r0, [pc, #80]	; (8000d2c <print_outAX25+0x524>)
 8000cdc:	f004 fcad 	bl	800563a <HAL_UART_Transmit>

	//reset bitstuff members
	local_packet->stuffed_address = 0;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000ce6:	3310      	adds	r3, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_control = 0;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000cf2:	3314      	adds	r3, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_PID = 0;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000cfe:	3318      	adds	r3, #24
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_Info = 0;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d0a:	331c      	adds	r3, #28
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_FCS = 0;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
}
 8000d1a:	bf00      	nop
 8000d1c:	3734      	adds	r7, #52	; 0x34
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d22:	bf00      	nop
 8000d24:	08006e0c 	.word	0x08006e0c
 8000d28:	20001cd4 	.word	0x20001cd4
 8000d2c:	20002b90 	.word	0x20002b90
 8000d30:	08006e14 	.word	0x08006e14
 8000d34:	08006e58 	.word	0x08006e58
 8000d38:	08006e6c 	.word	0x08006e6c
 8000d3c:	08006e80 	.word	0x08006e80

08000d40 <print_AX25>:

void print_AX25(){
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	b08d      	sub	sp, #52	; 0x34
 8000d44:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000d46:	4b96      	ldr	r3, [pc, #600]	; (8000fa0 <print_AX25+0x260>)
 8000d48:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d50:	330c      	adds	r3, #12
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 8000d56:	4b93      	ldr	r3, [pc, #588]	; (8000fa4 <print_AX25+0x264>)
 8000d58:	4a93      	ldr	r2, [pc, #588]	; (8000fa8 <print_AX25+0x268>)
 8000d5a:	4614      	mov	r4, r2
 8000d5c:	469c      	mov	ip, r3
 8000d5e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d62:	4665      	mov	r5, ip
 8000d64:	4626      	mov	r6, r4
 8000d66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d68:	6028      	str	r0, [r5, #0]
 8000d6a:	6069      	str	r1, [r5, #4]
 8000d6c:	60aa      	str	r2, [r5, #8]
 8000d6e:	60eb      	str	r3, [r5, #12]
 8000d70:	3410      	adds	r4, #16
 8000d72:	f10c 0c10 	add.w	ip, ip, #16
 8000d76:	4574      	cmp	r4, lr
 8000d78:	d1f3      	bne.n	8000d62 <print_AX25+0x22>
 8000d7a:	4663      	mov	r3, ip
 8000d7c:	4622      	mov	r2, r4
 8000d7e:	6810      	ldr	r0, [r2, #0]
 8000d80:	6018      	str	r0, [r3, #0]
 8000d82:	8891      	ldrh	r1, [r2, #4]
 8000d84:	7992      	ldrb	r2, [r2, #6]
 8000d86:	8099      	strh	r1, [r3, #4]
 8000d88:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d8a:	4886      	ldr	r0, [pc, #536]	; (8000fa4 <print_AX25+0x264>)
 8000d8c:	f7ff fa40 	bl	8000210 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	230a      	movs	r3, #10
 8000d96:	4983      	ldr	r1, [pc, #524]	; (8000fa4 <print_AX25+0x264>)
 8000d98:	4884      	ldr	r0, [pc, #528]	; (8000fac <print_AX25+0x26c>)
 8000d9a:	f004 fc4e 	bl	800563a <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->address) + address_len - 1;
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000da4:	3310      	adds	r3, #16
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	336f      	adds	r3, #111	; 0x6f
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8000db0:	e041      	b.n	8000e36 <print_AX25+0xf6>
		sprintf(uartData, "Address Field %d =",i+1);
 8000db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db4:	3301      	adds	r3, #1
 8000db6:	461a      	mov	r2, r3
 8000db8:	497d      	ldr	r1, [pc, #500]	; (8000fb0 <print_AX25+0x270>)
 8000dba:	487a      	ldr	r0, [pc, #488]	; (8000fa4 <print_AX25+0x264>)
 8000dbc:	f005 fb66 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000dc0:	4878      	ldr	r0, [pc, #480]	; (8000fa4 <print_AX25+0x264>)
 8000dc2:	f7ff fa25 	bl	8000210 <strlen>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	230a      	movs	r3, #10
 8000dcc:	4975      	ldr	r1, [pc, #468]	; (8000fa4 <print_AX25+0x264>)
 8000dce:	4877      	ldr	r0, [pc, #476]	; (8000fac <print_AX25+0x26c>)
 8000dd0:	f004 fc33 	bl	800563a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd8:	e016      	b.n	8000e08 <print_AX25+0xc8>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	425b      	negs	r3, r3
 8000dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4973      	ldr	r1, [pc, #460]	; (8000fb4 <print_AX25+0x274>)
 8000de8:	486e      	ldr	r0, [pc, #440]	; (8000fa4 <print_AX25+0x264>)
 8000dea:	f005 fb4f 	bl	800648c <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000dee:	486d      	ldr	r0, [pc, #436]	; (8000fa4 <print_AX25+0x264>)
 8000df0:	f7ff fa0e 	bl	8000210 <strlen>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	230a      	movs	r3, #10
 8000dfa:	496a      	ldr	r1, [pc, #424]	; (8000fa4 <print_AX25+0x264>)
 8000dfc:	486b      	ldr	r0, [pc, #428]	; (8000fac <print_AX25+0x26c>)
 8000dfe:	f004 fc1c 	bl	800563a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	3301      	adds	r3, #1
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	2b07      	cmp	r3, #7
 8000e0c:	dde5      	ble.n	8000dda <print_AX25+0x9a>
		}
		curr_mem -= 8;
 8000e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e10:	3b08      	subs	r3, #8
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000e14:	4a63      	ldr	r2, [pc, #396]	; (8000fa4 <print_AX25+0x264>)
 8000e16:	4b68      	ldr	r3, [pc, #416]	; (8000fb8 <print_AX25+0x278>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e1c:	4861      	ldr	r0, [pc, #388]	; (8000fa4 <print_AX25+0x264>)
 8000e1e:	f7ff f9f7 	bl	8000210 <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	230a      	movs	r3, #10
 8000e28:	495e      	ldr	r1, [pc, #376]	; (8000fa4 <print_AX25+0x264>)
 8000e2a:	4860      	ldr	r0, [pc, #384]	; (8000fac <print_AX25+0x26c>)
 8000e2c:	f004 fc05 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8000e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e32:	3301      	adds	r3, #1
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e38:	2b0d      	cmp	r3, #13
 8000e3a:	ddba      	ble.n	8000db2 <print_AX25+0x72>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000e42:	3314      	adds	r3, #20
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8000e48:	4a56      	ldr	r2, [pc, #344]	; (8000fa4 <print_AX25+0x264>)
 8000e4a:	4b5c      	ldr	r3, [pc, #368]	; (8000fbc <print_AX25+0x27c>)
 8000e4c:	4615      	mov	r5, r2
 8000e4e:	461c      	mov	r4, r3
 8000e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e52:	6028      	str	r0, [r5, #0]
 8000e54:	6069      	str	r1, [r5, #4]
 8000e56:	60aa      	str	r2, [r5, #8]
 8000e58:	60eb      	str	r3, [r5, #12]
 8000e5a:	8823      	ldrh	r3, [r4, #0]
 8000e5c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e5e:	4851      	ldr	r0, [pc, #324]	; (8000fa4 <print_AX25+0x264>)
 8000e60:	f7ff f9d6 	bl	8000210 <strlen>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	230a      	movs	r3, #10
 8000e6a:	494e      	ldr	r1, [pc, #312]	; (8000fa4 <print_AX25+0x264>)
 8000e6c:	484f      	ldr	r0, [pc, #316]	; (8000fac <print_AX25+0x26c>)
 8000e6e:	f004 fbe4 	bl	800563a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
 8000e76:	e017      	b.n	8000ea8 <print_AX25+0x168>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e80:	4413      	add	r3, r2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	494b      	ldr	r1, [pc, #300]	; (8000fb4 <print_AX25+0x274>)
 8000e88:	4846      	ldr	r0, [pc, #280]	; (8000fa4 <print_AX25+0x264>)
 8000e8a:	f005 faff 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e8e:	4845      	ldr	r0, [pc, #276]	; (8000fa4 <print_AX25+0x264>)
 8000e90:	f7ff f9be 	bl	8000210 <strlen>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	230a      	movs	r3, #10
 8000e9a:	4942      	ldr	r1, [pc, #264]	; (8000fa4 <print_AX25+0x264>)
 8000e9c:	4843      	ldr	r0, [pc, #268]	; (8000fac <print_AX25+0x26c>)
 8000e9e:	f004 fbcc 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	623b      	str	r3, [r7, #32]
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	2b07      	cmp	r3, #7
 8000eac:	dde4      	ble.n	8000e78 <print_AX25+0x138>
	}
	sprintf(uartData, "\n");
 8000eae:	4a3d      	ldr	r2, [pc, #244]	; (8000fa4 <print_AX25+0x264>)
 8000eb0:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <print_AX25+0x278>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000eb6:	483b      	ldr	r0, [pc, #236]	; (8000fa4 <print_AX25+0x264>)
 8000eb8:	f7ff f9aa 	bl	8000210 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	4938      	ldr	r1, [pc, #224]	; (8000fa4 <print_AX25+0x264>)
 8000ec4:	4839      	ldr	r0, [pc, #228]	; (8000fac <print_AX25+0x26c>)
 8000ec6:	f004 fbb8 	bl	800563a <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ed0:	3318      	adds	r3, #24
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8000ed6:	4a33      	ldr	r2, [pc, #204]	; (8000fa4 <print_AX25+0x264>)
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <print_AX25+0x280>)
 8000eda:	4615      	mov	r5, r2
 8000edc:	461c      	mov	r4, r3
 8000ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee0:	6028      	str	r0, [r5, #0]
 8000ee2:	6069      	str	r1, [r5, #4]
 8000ee4:	60aa      	str	r2, [r5, #8]
 8000ee6:	60eb      	str	r3, [r5, #12]
 8000ee8:	8823      	ldrh	r3, [r4, #0]
 8000eea:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000eec:	482d      	ldr	r0, [pc, #180]	; (8000fa4 <print_AX25+0x264>)
 8000eee:	f7ff f98f 	bl	8000210 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	492a      	ldr	r1, [pc, #168]	; (8000fa4 <print_AX25+0x264>)
 8000efa:	482c      	ldr	r0, [pc, #176]	; (8000fac <print_AX25+0x26c>)
 8000efc:	f004 fb9d 	bl	800563a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	e017      	b.n	8000f36 <print_AX25+0x1f6>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f1c3 0307 	rsb	r3, r3, #7
 8000f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f0e:	4413      	add	r3, r2
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4927      	ldr	r1, [pc, #156]	; (8000fb4 <print_AX25+0x274>)
 8000f16:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <print_AX25+0x264>)
 8000f18:	f005 fab8 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f1c:	4821      	ldr	r0, [pc, #132]	; (8000fa4 <print_AX25+0x264>)
 8000f1e:	f7ff f977 	bl	8000210 <strlen>
 8000f22:	4603      	mov	r3, r0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	230a      	movs	r3, #10
 8000f28:	491e      	ldr	r1, [pc, #120]	; (8000fa4 <print_AX25+0x264>)
 8000f2a:	4820      	ldr	r0, [pc, #128]	; (8000fac <print_AX25+0x26c>)
 8000f2c:	f004 fb85 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	3301      	adds	r3, #1
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	2b07      	cmp	r3, #7
 8000f3a:	dde4      	ble.n	8000f06 <print_AX25+0x1c6>
	}
	sprintf(uartData, "\n");
 8000f3c:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <print_AX25+0x264>)
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <print_AX25+0x278>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f44:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <print_AX25+0x264>)
 8000f46:	f7ff f963 	bl	8000210 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	230a      	movs	r3, #10
 8000f50:	4914      	ldr	r1, [pc, #80]	; (8000fa4 <print_AX25+0x264>)
 8000f52:	4816      	ldr	r0, [pc, #88]	; (8000fac <print_AX25+0x26c>)
 8000f54:	f004 fb71 	bl	800563a <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000f5e:	331c      	adds	r3, #28
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
 8000f74:	e056      	b.n	8001024 <print_AX25+0x2e4>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4911      	ldr	r1, [pc, #68]	; (8000fc4 <print_AX25+0x284>)
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <print_AX25+0x264>)
 8000f80:	f005 fa84 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <print_AX25+0x264>)
 8000f86:	f7ff f943 	bl	8000210 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	230a      	movs	r3, #10
 8000f90:	4904      	ldr	r1, [pc, #16]	; (8000fa4 <print_AX25+0x264>)
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <print_AX25+0x26c>)
 8000f94:	f004 fb51 	bl	800563a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	e02b      	b.n	8000ff6 <print_AX25+0x2b6>
 8000f9e:	bf00      	nop
 8000fa0:	200000d4 	.word	0x200000d4
 8000fa4:	20001cd4 	.word	0x20001cd4
 8000fa8:	08006e90 	.word	0x08006e90
 8000fac:	20002b90 	.word	0x20002b90
 8000fb0:	08006df8 	.word	0x08006df8
 8000fb4:	08006e0c 	.word	0x08006e0c
 8000fb8:	08006e14 	.word	0x08006e14
 8000fbc:	08006e30 	.word	0x08006e30
 8000fc0:	08006e44 	.word	0x08006e44
 8000fc4:	08006e58 	.word	0x08006e58
			sprintf(uartData, " %d ",*(curr_mem-j));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	425b      	negs	r3, r3
 8000fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fce:	4413      	add	r3, r2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4943      	ldr	r1, [pc, #268]	; (80010e4 <print_AX25+0x3a4>)
 8000fd6:	4844      	ldr	r0, [pc, #272]	; (80010e8 <print_AX25+0x3a8>)
 8000fd8:	f005 fa58 	bl	800648c <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fdc:	4842      	ldr	r0, [pc, #264]	; (80010e8 <print_AX25+0x3a8>)
 8000fde:	f7ff f917 	bl	8000210 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	493f      	ldr	r1, [pc, #252]	; (80010e8 <print_AX25+0x3a8>)
 8000fea:	4840      	ldr	r0, [pc, #256]	; (80010ec <print_AX25+0x3ac>)
 8000fec:	f004 fb25 	bl	800563a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b07      	cmp	r3, #7
 8000ffa:	dde5      	ble.n	8000fc8 <print_AX25+0x288>
		}
		curr_mem -= 8;
 8000ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffe:	3b08      	subs	r3, #8
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8001002:	4a39      	ldr	r2, [pc, #228]	; (80010e8 <print_AX25+0x3a8>)
 8001004:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <print_AX25+0x3b0>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800100a:	4837      	ldr	r0, [pc, #220]	; (80010e8 <print_AX25+0x3a8>)
 800100c:	f7ff f900 	bl	8000210 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	230a      	movs	r3, #10
 8001016:	4934      	ldr	r1, [pc, #208]	; (80010e8 <print_AX25+0x3a8>)
 8001018:	4834      	ldr	r0, [pc, #208]	; (80010ec <print_AX25+0x3ac>)
 800101a:	f004 fb0e 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	3301      	adds	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	da00      	bge.n	8001032 <print_AX25+0x2f2>
 8001030:	3307      	adds	r3, #7
 8001032:	10db      	asrs	r3, r3, #3
 8001034:	461a      	mov	r2, r3
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4293      	cmp	r3, r2
 800103a:	db9c      	blt.n	8000f76 <print_AX25+0x236>
	}

	curr_mem = (local_packet->FCS) + 8;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001042:	3304      	adds	r3, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3308      	adds	r3, #8
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(FCS_len/8);i++){
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	e042      	b.n	80010d6 <print_AX25+0x396>
		sprintf(uartData, "FCS Field %d     =",i+1)	;
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	3301      	adds	r3, #1
 8001054:	461a      	mov	r2, r3
 8001056:	4927      	ldr	r1, [pc, #156]	; (80010f4 <print_AX25+0x3b4>)
 8001058:	4823      	ldr	r0, [pc, #140]	; (80010e8 <print_AX25+0x3a8>)
 800105a:	f005 fa17 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800105e:	4822      	ldr	r0, [pc, #136]	; (80010e8 <print_AX25+0x3a8>)
 8001060:	f7ff f8d6 	bl	8000210 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	b29a      	uxth	r2, r3
 8001068:	230a      	movs	r3, #10
 800106a:	491f      	ldr	r1, [pc, #124]	; (80010e8 <print_AX25+0x3a8>)
 800106c:	481f      	ldr	r0, [pc, #124]	; (80010ec <print_AX25+0x3ac>)
 800106e:	f004 fae4 	bl	800563a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e017      	b.n	80010a8 <print_AX25+0x368>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4917      	ldr	r1, [pc, #92]	; (80010e4 <print_AX25+0x3a4>)
 8001088:	4817      	ldr	r0, [pc, #92]	; (80010e8 <print_AX25+0x3a8>)
 800108a:	f005 f9ff 	bl	800648c <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800108e:	4816      	ldr	r0, [pc, #88]	; (80010e8 <print_AX25+0x3a8>)
 8001090:	f7ff f8be 	bl	8000210 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	b29a      	uxth	r2, r3
 8001098:	230a      	movs	r3, #10
 800109a:	4913      	ldr	r1, [pc, #76]	; (80010e8 <print_AX25+0x3a8>)
 800109c:	4813      	ldr	r0, [pc, #76]	; (80010ec <print_AX25+0x3ac>)
 800109e:	f004 facc 	bl	800563a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3301      	adds	r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b07      	cmp	r3, #7
 80010ac:	dde4      	ble.n	8001078 <print_AX25+0x338>
		}
		curr_mem -= 8;
 80010ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b0:	3b08      	subs	r3, #8
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80010b4:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <print_AX25+0x3a8>)
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <print_AX25+0x3b0>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010bc:	480a      	ldr	r0, [pc, #40]	; (80010e8 <print_AX25+0x3a8>)
 80010be:	f7ff f8a7 	bl	8000210 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	230a      	movs	r3, #10
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <print_AX25+0x3a8>)
 80010ca:	4808      	ldr	r0, [pc, #32]	; (80010ec <print_AX25+0x3ac>)
 80010cc:	f004 fab5 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<(FCS_len/8);i++){
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	3301      	adds	r3, #1
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	ddb9      	ble.n	8001050 <print_AX25+0x310>
	}
}
 80010dc:	bf00      	nop
 80010de:	3734      	adds	r7, #52	; 0x34
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e4:	08006e0c 	.word	0x08006e0c
 80010e8:	20001cd4 	.word	0x20001cd4
 80010ec:	20002b90 	.word	0x20002b90
 80010f0:	08006e14 	.word	0x08006e14
 80010f4:	08006ec8 	.word	0x08006ec8

080010f8 <clear_AX25>:
void clear_AX25(){
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <clear_AX25+0x5c>)
 8001100:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 8001102:	4a15      	ldr	r2, [pc, #84]	; (8001158 <clear_AX25+0x60>)
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <clear_AX25+0x64>)
 8001106:	4615      	mov	r5, r2
 8001108:	461c      	mov	r4, r3
 800110a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110c:	6028      	str	r0, [r5, #0]
 800110e:	6069      	str	r1, [r5, #4]
 8001110:	60aa      	str	r2, [r5, #8]
 8001112:	60eb      	str	r3, [r5, #12]
 8001114:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001116:	6128      	str	r0, [r5, #16]
 8001118:	6169      	str	r1, [r5, #20]
 800111a:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800111c:	480e      	ldr	r0, [pc, #56]	; (8001158 <clear_AX25+0x60>)
 800111e:	f7ff f877 	bl	8000210 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	b29a      	uxth	r2, r3
 8001126:	230a      	movs	r3, #10
 8001128:	490b      	ldr	r1, [pc, #44]	; (8001158 <clear_AX25+0x60>)
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <clear_AX25+0x68>)
 800112c:	f004 fa85 	bl	800563a <HAL_UART_Transmit>

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f640 225f 	movw	r2, #2655	; 0xa5f
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f005 f993 	bl	8006464 <memcpy>
	local_packet->got_packet = false;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001144:	3309      	adds	r3, #9
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bdb0      	pop	{r4, r5, r7, pc}
 8001152:	bf00      	nop
 8001154:	200000d4 	.word	0x200000d4
 8001158:	20001cd4 	.word	0x20001cd4
 800115c:	08006edc 	.word	0x08006edc
 8001160:	20002b90 	.word	0x20002b90

08001164 <print_KISS>:

void output_KISS() {
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}
void print_KISS(){
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	b08d      	sub	sp, #52	; 0x34
 8001168:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800116a:	4baf      	ldr	r3, [pc, #700]	; (8001428 <print_KISS+0x2c4>)
 800116c:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001174:	330c      	adds	r3, #12
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 800117a:	4bac      	ldr	r3, [pc, #688]	; (800142c <print_KISS+0x2c8>)
 800117c:	4aac      	ldr	r2, [pc, #688]	; (8001430 <print_KISS+0x2cc>)
 800117e:	4614      	mov	r4, r2
 8001180:	469c      	mov	ip, r3
 8001182:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001186:	4665      	mov	r5, ip
 8001188:	4626      	mov	r6, r4
 800118a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800118c:	6028      	str	r0, [r5, #0]
 800118e:	6069      	str	r1, [r5, #4]
 8001190:	60aa      	str	r2, [r5, #8]
 8001192:	60eb      	str	r3, [r5, #12]
 8001194:	3410      	adds	r4, #16
 8001196:	f10c 0c10 	add.w	ip, ip, #16
 800119a:	4574      	cmp	r4, lr
 800119c:	d1f3      	bne.n	8001186 <print_KISS+0x22>
 800119e:	4663      	mov	r3, ip
 80011a0:	4622      	mov	r2, r4
 80011a2:	6810      	ldr	r0, [r2, #0]
 80011a4:	6018      	str	r0, [r3, #0]
 80011a6:	8891      	ldrh	r1, [r2, #4]
 80011a8:	7992      	ldrb	r2, [r2, #6]
 80011aa:	8099      	strh	r1, [r3, #4]
 80011ac:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011ae:	489f      	ldr	r0, [pc, #636]	; (800142c <print_KISS+0x2c8>)
 80011b0:	f7ff f82e 	bl	8000210 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	230a      	movs	r3, #10
 80011ba:	499c      	ldr	r1, [pc, #624]	; (800142c <print_KISS+0x2c8>)
 80011bc:	489d      	ldr	r0, [pc, #628]	; (8001434 <print_KISS+0x2d0>)
 80011be:	f004 fa3c 	bl	800563a <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address + address_len + 16 - 1);//start at the flag start
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011c8:	3310      	adds	r3, #16
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	337f      	adds	r3, #127	; 0x7f
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 80011d0:	4a96      	ldr	r2, [pc, #600]	; (800142c <print_KISS+0x2c8>)
 80011d2:	4b99      	ldr	r3, [pc, #612]	; (8001438 <print_KISS+0x2d4>)
 80011d4:	4615      	mov	r5, r2
 80011d6:	461c      	mov	r4, r3
 80011d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011da:	6028      	str	r0, [r5, #0]
 80011dc:	6069      	str	r1, [r5, #4]
 80011de:	60aa      	str	r2, [r5, #8]
 80011e0:	60eb      	str	r3, [r5, #12]
 80011e2:	8823      	ldrh	r3, [r4, #0]
 80011e4:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011e6:	4891      	ldr	r0, [pc, #580]	; (800142c <print_KISS+0x2c8>)
 80011e8:	f7ff f812 	bl	8000210 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	230a      	movs	r3, #10
 80011f2:	498e      	ldr	r1, [pc, #568]	; (800142c <print_KISS+0x2c8>)
 80011f4:	488f      	ldr	r0, [pc, #572]	; (8001434 <print_KISS+0x2d0>)
 80011f6:	f004 fa20 	bl	800563a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80011fe:	e016      	b.n	800122e <print_KISS+0xca>
		sprintf(uartData, " %d ",*(curr_mem-i));
 8001200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001202:	425b      	negs	r3, r3
 8001204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	498b      	ldr	r1, [pc, #556]	; (800143c <print_KISS+0x2d8>)
 800120e:	4887      	ldr	r0, [pc, #540]	; (800142c <print_KISS+0x2c8>)
 8001210:	f005 f93c 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001214:	4885      	ldr	r0, [pc, #532]	; (800142c <print_KISS+0x2c8>)
 8001216:	f7fe fffb 	bl	8000210 <strlen>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	230a      	movs	r3, #10
 8001220:	4982      	ldr	r1, [pc, #520]	; (800142c <print_KISS+0x2c8>)
 8001222:	4884      	ldr	r0, [pc, #528]	; (8001434 <print_KISS+0x2d0>)
 8001224:	f004 fa09 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122a:	3301      	adds	r3, #1
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
 800122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001230:	2b07      	cmp	r3, #7
 8001232:	dde5      	ble.n	8001200 <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 8001234:	4a7d      	ldr	r2, [pc, #500]	; (800142c <print_KISS+0x2c8>)
 8001236:	4b82      	ldr	r3, [pc, #520]	; (8001440 <print_KISS+0x2dc>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800123c:	487b      	ldr	r0, [pc, #492]	; (800142c <print_KISS+0x2c8>)
 800123e:	f7fe ffe7 	bl	8000210 <strlen>
 8001242:	4603      	mov	r3, r0
 8001244:	b29a      	uxth	r2, r3
 8001246:	230a      	movs	r3, #10
 8001248:	4978      	ldr	r1, [pc, #480]	; (800142c <print_KISS+0x2c8>)
 800124a:	487a      	ldr	r0, [pc, #488]	; (8001434 <print_KISS+0x2d0>)
 800124c:	f004 f9f5 	bl	800563a <HAL_UART_Transmit>

	curr_mem = (local_packet->address) + address_len - 1;
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001256:	3310      	adds	r3, #16
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	336f      	adds	r3, #111	; 0x6f
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
 8001262:	e041      	b.n	80012e8 <print_KISS+0x184>
		sprintf(uartData, "Address Field %d =",i+1);
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	3301      	adds	r3, #1
 8001268:	461a      	mov	r2, r3
 800126a:	4976      	ldr	r1, [pc, #472]	; (8001444 <print_KISS+0x2e0>)
 800126c:	486f      	ldr	r0, [pc, #444]	; (800142c <print_KISS+0x2c8>)
 800126e:	f005 f90d 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001272:	486e      	ldr	r0, [pc, #440]	; (800142c <print_KISS+0x2c8>)
 8001274:	f7fe ffcc 	bl	8000210 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	b29a      	uxth	r2, r3
 800127c:	230a      	movs	r3, #10
 800127e:	496b      	ldr	r1, [pc, #428]	; (800142c <print_KISS+0x2c8>)
 8001280:	486c      	ldr	r0, [pc, #432]	; (8001434 <print_KISS+0x2d0>)
 8001282:	f004 f9da 	bl	800563a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
 800128a:	e016      	b.n	80012ba <print_KISS+0x156>
			sprintf(uartData, " %d ",*(curr_mem-j));
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	425b      	negs	r3, r3
 8001290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	4968      	ldr	r1, [pc, #416]	; (800143c <print_KISS+0x2d8>)
 800129a:	4864      	ldr	r0, [pc, #400]	; (800142c <print_KISS+0x2c8>)
 800129c:	f005 f8f6 	bl	800648c <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012a0:	4862      	ldr	r0, [pc, #392]	; (800142c <print_KISS+0x2c8>)
 80012a2:	f7fe ffb5 	bl	8000210 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	230a      	movs	r3, #10
 80012ac:	495f      	ldr	r1, [pc, #380]	; (800142c <print_KISS+0x2c8>)
 80012ae:	4861      	ldr	r0, [pc, #388]	; (8001434 <print_KISS+0x2d0>)
 80012b0:	f004 f9c3 	bl	800563a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	3301      	adds	r3, #1
 80012b8:	623b      	str	r3, [r7, #32]
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	2b07      	cmp	r3, #7
 80012be:	dde5      	ble.n	800128c <print_KISS+0x128>
		}
		curr_mem -= 8;
 80012c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c2:	3b08      	subs	r3, #8
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80012c6:	4a59      	ldr	r2, [pc, #356]	; (800142c <print_KISS+0x2c8>)
 80012c8:	4b5d      	ldr	r3, [pc, #372]	; (8001440 <print_KISS+0x2dc>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012ce:	4857      	ldr	r0, [pc, #348]	; (800142c <print_KISS+0x2c8>)
 80012d0:	f7fe ff9e 	bl	8000210 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	230a      	movs	r3, #10
 80012da:	4954      	ldr	r1, [pc, #336]	; (800142c <print_KISS+0x2c8>)
 80012dc:	4855      	ldr	r0, [pc, #340]	; (8001434 <print_KISS+0x2d0>)
 80012de:	f004 f9ac 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	3301      	adds	r3, #1
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	2b0d      	cmp	r3, #13
 80012ec:	ddba      	ble.n	8001264 <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80012f4:	3314      	adds	r3, #20
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 80012fa:	4a4c      	ldr	r2, [pc, #304]	; (800142c <print_KISS+0x2c8>)
 80012fc:	4b52      	ldr	r3, [pc, #328]	; (8001448 <print_KISS+0x2e4>)
 80012fe:	4615      	mov	r5, r2
 8001300:	461c      	mov	r4, r3
 8001302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001304:	6028      	str	r0, [r5, #0]
 8001306:	6069      	str	r1, [r5, #4]
 8001308:	60aa      	str	r2, [r5, #8]
 800130a:	60eb      	str	r3, [r5, #12]
 800130c:	8823      	ldrh	r3, [r4, #0]
 800130e:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001310:	4846      	ldr	r0, [pc, #280]	; (800142c <print_KISS+0x2c8>)
 8001312:	f7fe ff7d 	bl	8000210 <strlen>
 8001316:	4603      	mov	r3, r0
 8001318:	b29a      	uxth	r2, r3
 800131a:	230a      	movs	r3, #10
 800131c:	4943      	ldr	r1, [pc, #268]	; (800142c <print_KISS+0x2c8>)
 800131e:	4845      	ldr	r0, [pc, #276]	; (8001434 <print_KISS+0x2d0>)
 8001320:	f004 f98b 	bl	800563a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	e017      	b.n	800135a <print_KISS+0x1f6>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	f1c3 0307 	rsb	r3, r3, #7
 8001330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	4940      	ldr	r1, [pc, #256]	; (800143c <print_KISS+0x2d8>)
 800133a:	483c      	ldr	r0, [pc, #240]	; (800142c <print_KISS+0x2c8>)
 800133c:	f005 f8a6 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001340:	483a      	ldr	r0, [pc, #232]	; (800142c <print_KISS+0x2c8>)
 8001342:	f7fe ff65 	bl	8000210 <strlen>
 8001346:	4603      	mov	r3, r0
 8001348:	b29a      	uxth	r2, r3
 800134a:	230a      	movs	r3, #10
 800134c:	4937      	ldr	r1, [pc, #220]	; (800142c <print_KISS+0x2c8>)
 800134e:	4839      	ldr	r0, [pc, #228]	; (8001434 <print_KISS+0x2d0>)
 8001350:	f004 f973 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	3301      	adds	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	2b07      	cmp	r3, #7
 800135e:	dde4      	ble.n	800132a <print_KISS+0x1c6>
	}
	sprintf(uartData, "\n");
 8001360:	4a32      	ldr	r2, [pc, #200]	; (800142c <print_KISS+0x2c8>)
 8001362:	4b37      	ldr	r3, [pc, #220]	; (8001440 <print_KISS+0x2dc>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001368:	4830      	ldr	r0, [pc, #192]	; (800142c <print_KISS+0x2c8>)
 800136a:	f7fe ff51 	bl	8000210 <strlen>
 800136e:	4603      	mov	r3, r0
 8001370:	b29a      	uxth	r2, r3
 8001372:	230a      	movs	r3, #10
 8001374:	492d      	ldr	r1, [pc, #180]	; (800142c <print_KISS+0x2c8>)
 8001376:	482f      	ldr	r0, [pc, #188]	; (8001434 <print_KISS+0x2d0>)
 8001378:	f004 f95f 	bl	800563a <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001382:	3318      	adds	r3, #24
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8001388:	4a28      	ldr	r2, [pc, #160]	; (800142c <print_KISS+0x2c8>)
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <print_KISS+0x2e8>)
 800138c:	4615      	mov	r5, r2
 800138e:	461c      	mov	r4, r3
 8001390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001392:	6028      	str	r0, [r5, #0]
 8001394:	6069      	str	r1, [r5, #4]
 8001396:	60aa      	str	r2, [r5, #8]
 8001398:	60eb      	str	r3, [r5, #12]
 800139a:	8823      	ldrh	r3, [r4, #0]
 800139c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800139e:	4823      	ldr	r0, [pc, #140]	; (800142c <print_KISS+0x2c8>)
 80013a0:	f7fe ff36 	bl	8000210 <strlen>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	230a      	movs	r3, #10
 80013aa:	4920      	ldr	r1, [pc, #128]	; (800142c <print_KISS+0x2c8>)
 80013ac:	4821      	ldr	r0, [pc, #132]	; (8001434 <print_KISS+0x2d0>)
 80013ae:	f004 f944 	bl	800563a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	e017      	b.n	80013e8 <print_KISS+0x284>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	491d      	ldr	r1, [pc, #116]	; (800143c <print_KISS+0x2d8>)
 80013c8:	4818      	ldr	r0, [pc, #96]	; (800142c <print_KISS+0x2c8>)
 80013ca:	f005 f85f 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013ce:	4817      	ldr	r0, [pc, #92]	; (800142c <print_KISS+0x2c8>)
 80013d0:	f7fe ff1e 	bl	8000210 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	230a      	movs	r3, #10
 80013da:	4914      	ldr	r1, [pc, #80]	; (800142c <print_KISS+0x2c8>)
 80013dc:	4815      	ldr	r0, [pc, #84]	; (8001434 <print_KISS+0x2d0>)
 80013de:	f004 f92c 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	3301      	adds	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2b07      	cmp	r3, #7
 80013ec:	dde4      	ble.n	80013b8 <print_KISS+0x254>
	}
	sprintf(uartData, "\n");
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <print_KISS+0x2c8>)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <print_KISS+0x2dc>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <print_KISS+0x2c8>)
 80013f8:	f7fe ff0a 	bl	8000210 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	230a      	movs	r3, #10
 8001402:	490a      	ldr	r1, [pc, #40]	; (800142c <print_KISS+0x2c8>)
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <print_KISS+0x2d0>)
 8001406:	f004 f918 	bl	800563a <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001410:	331c      	adds	r3, #28
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3b01      	subs	r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e055      	b.n	80014d4 <print_KISS+0x370>
 8001428:	200000d4 	.word	0x200000d4
 800142c:	20001cd4 	.word	0x20001cd4
 8001430:	08006ef8 	.word	0x08006ef8
 8001434:	20002b90 	.word	0x20002b90
 8001438:	08006f30 	.word	0x08006f30
 800143c:	08006e0c 	.word	0x08006e0c
 8001440:	08006e14 	.word	0x08006e14
 8001444:	08006df8 	.word	0x08006df8
 8001448:	08006e30 	.word	0x08006e30
 800144c:	08006e44 	.word	0x08006e44
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3301      	adds	r3, #1
 8001454:	461a      	mov	r2, r3
 8001456:	494a      	ldr	r1, [pc, #296]	; (8001580 <print_KISS+0x41c>)
 8001458:	484a      	ldr	r0, [pc, #296]	; (8001584 <print_KISS+0x420>)
 800145a:	f005 f817 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800145e:	4849      	ldr	r0, [pc, #292]	; (8001584 <print_KISS+0x420>)
 8001460:	f7fe fed6 	bl	8000210 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	230a      	movs	r3, #10
 800146a:	4946      	ldr	r1, [pc, #280]	; (8001584 <print_KISS+0x420>)
 800146c:	4846      	ldr	r0, [pc, #280]	; (8001588 <print_KISS+0x424>)
 800146e:	f004 f8e4 	bl	800563a <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	e016      	b.n	80014a6 <print_KISS+0x342>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	425b      	negs	r3, r3
 800147c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4941      	ldr	r1, [pc, #260]	; (800158c <print_KISS+0x428>)
 8001486:	483f      	ldr	r0, [pc, #252]	; (8001584 <print_KISS+0x420>)
 8001488:	f005 f800 	bl	800648c <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800148c:	483d      	ldr	r0, [pc, #244]	; (8001584 <print_KISS+0x420>)
 800148e:	f7fe febf 	bl	8000210 <strlen>
 8001492:	4603      	mov	r3, r0
 8001494:	b29a      	uxth	r2, r3
 8001496:	230a      	movs	r3, #10
 8001498:	493a      	ldr	r1, [pc, #232]	; (8001584 <print_KISS+0x420>)
 800149a:	483b      	ldr	r0, [pc, #236]	; (8001588 <print_KISS+0x424>)
 800149c:	f004 f8cd 	bl	800563a <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	3301      	adds	r3, #1
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	2b07      	cmp	r3, #7
 80014aa:	dde5      	ble.n	8001478 <print_KISS+0x314>
		}
		curr_mem -= 8;
 80014ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ae:	3b08      	subs	r3, #8
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80014b2:	4a34      	ldr	r2, [pc, #208]	; (8001584 <print_KISS+0x420>)
 80014b4:	4b36      	ldr	r3, [pc, #216]	; (8001590 <print_KISS+0x42c>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014ba:	4832      	ldr	r0, [pc, #200]	; (8001584 <print_KISS+0x420>)
 80014bc:	f7fe fea8 	bl	8000210 <strlen>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	230a      	movs	r3, #10
 80014c6:	492f      	ldr	r1, [pc, #188]	; (8001584 <print_KISS+0x420>)
 80014c8:	482f      	ldr	r0, [pc, #188]	; (8001588 <print_KISS+0x424>)
 80014ca:	f004 f8b6 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da00      	bge.n	80014e2 <print_KISS+0x37e>
 80014e0:	3307      	adds	r3, #7
 80014e2:	10db      	asrs	r3, r3, #3
 80014e4:	461a      	mov	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	4293      	cmp	r3, r2
 80014ea:	dbb1      	blt.n	8001450 <print_KISS+0x2ec>
	}

	//Print Stop Flag
	curr_mem = local_packet->KISS_PACKET;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 80014f4:	4a23      	ldr	r2, [pc, #140]	; (8001584 <print_KISS+0x420>)
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <print_KISS+0x430>)
 80014f8:	4615      	mov	r5, r2
 80014fa:	461c      	mov	r4, r3
 80014fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fe:	6028      	str	r0, [r5, #0]
 8001500:	6069      	str	r1, [r5, #4]
 8001502:	60aa      	str	r2, [r5, #8]
 8001504:	60eb      	str	r3, [r5, #12]
 8001506:	8823      	ldrh	r3, [r4, #0]
 8001508:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800150a:	481e      	ldr	r0, [pc, #120]	; (8001584 <print_KISS+0x420>)
 800150c:	f7fe fe80 	bl	8000210 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	230a      	movs	r3, #10
 8001516:	491b      	ldr	r1, [pc, #108]	; (8001584 <print_KISS+0x420>)
 8001518:	481b      	ldr	r0, [pc, #108]	; (8001588 <print_KISS+0x424>)
 800151a:	f004 f88e 	bl	800563a <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	e017      	b.n	8001554 <print_KISS+0x3f0>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800152c:	4413      	add	r3, r2
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4916      	ldr	r1, [pc, #88]	; (800158c <print_KISS+0x428>)
 8001534:	4813      	ldr	r0, [pc, #76]	; (8001584 <print_KISS+0x420>)
 8001536:	f004 ffa9 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800153a:	4812      	ldr	r0, [pc, #72]	; (8001584 <print_KISS+0x420>)
 800153c:	f7fe fe68 	bl	8000210 <strlen>
 8001540:	4603      	mov	r3, r0
 8001542:	b29a      	uxth	r2, r3
 8001544:	230a      	movs	r3, #10
 8001546:	490f      	ldr	r1, [pc, #60]	; (8001584 <print_KISS+0x420>)
 8001548:	480f      	ldr	r0, [pc, #60]	; (8001588 <print_KISS+0x424>)
 800154a:	f004 f876 	bl	800563a <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b07      	cmp	r3, #7
 8001558:	dde4      	ble.n	8001524 <print_KISS+0x3c0>
	}
	sprintf(uartData, "\n");
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <print_KISS+0x420>)
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <print_KISS+0x42c>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001562:	4808      	ldr	r0, [pc, #32]	; (8001584 <print_KISS+0x420>)
 8001564:	f7fe fe54 	bl	8000210 <strlen>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	230a      	movs	r3, #10
 800156e:	4905      	ldr	r1, [pc, #20]	; (8001584 <print_KISS+0x420>)
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <print_KISS+0x424>)
 8001572:	f004 f862 	bl	800563a <HAL_UART_Transmit>

}
 8001576:	bf00      	nop
 8001578:	3734      	adds	r7, #52	; 0x34
 800157a:	46bd      	mov	sp, r7
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157e:	bf00      	nop
 8001580:	08006e58 	.word	0x08006e58
 8001584:	20001cd4 	.word	0x20001cd4
 8001588:	20002b90 	.word	0x20002b90
 800158c:	08006e0c 	.word	0x08006e0c
 8001590:	08006e14 	.word	0x08006e14
 8001594:	08006f44 	.word	0x08006f44

08001598 <UART2_EXCEPTION_CALLBACK>:

//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 800159c:	2201      	movs	r2, #1
 800159e:	491d      	ldr	r1, [pc, #116]	; (8001614 <UART2_EXCEPTION_CALLBACK+0x7c>)
 80015a0:	481d      	ldr	r0, [pc, #116]	; (8001618 <UART2_EXCEPTION_CALLBACK+0x80>)
 80015a2:	f004 f8e3 	bl	800576c <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015ae:	7b1b      	ldrb	r3, [r3, #12]
 80015b0:	2bc0      	cmp	r3, #192	; 0xc0
 80015b2:	d104      	bne.n	80015be <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	3301      	adds	r3, #1
 80015ba:	4a18      	ldr	r2, [pc, #96]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015bc:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <UART2_EXCEPTION_CALLBACK+0x88>)
 80015c6:	4413      	add	r3, r2
 80015c8:	4a14      	ldr	r2, [pc, #80]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015ca:	7b12      	ldrb	r2, [r2, #12]
 80015cc:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a11      	ldr	r2, [pc, #68]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015d6:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	dd16      	ble.n	800160e <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <UART2_EXCEPTION_CALLBACK+0x8c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	f083 0301 	eor.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <UART2_EXCEPTION_CALLBACK+0x90>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001606:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <UART2_EXCEPTION_CALLBACK+0x84>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]

	  }
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20001448 	.word	0x20001448
 8001618:	20002b90 	.word	0x20002b90
 800161c:	2000143c 	.word	0x2000143c
 8001620:	2000144a 	.word	0x2000144a
 8001624:	20002b38 	.word	0x20002b38
 8001628:	200000a5 	.word	0x200000a5

0800162c <receiving_AX25>:
//****************************************************************************************************************
//END OF UART Handling data flow

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 8001632:	4a51      	ldr	r2, [pc, #324]	; (8001778 <receiving_AX25+0x14c>)
 8001634:	4b51      	ldr	r3, [pc, #324]	; (800177c <receiving_AX25+0x150>)
 8001636:	4615      	mov	r5, r2
 8001638:	461c      	mov	r4, r3
 800163a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163c:	6028      	str	r0, [r5, #0]
 800163e:	6069      	str	r1, [r5, #4]
 8001640:	60aa      	str	r2, [r5, #8]
 8001642:	60eb      	str	r3, [r5, #12]
 8001644:	cc03      	ldmia	r4!, {r0, r1}
 8001646:	6128      	str	r0, [r5, #16]
 8001648:	6169      	str	r1, [r5, #20]
 800164a:	7823      	ldrb	r3, [r4, #0]
 800164c:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800164e:	484a      	ldr	r0, [pc, #296]	; (8001778 <receiving_AX25+0x14c>)
 8001650:	f7fe fdde 	bl	8000210 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	230a      	movs	r3, #10
 800165a:	4947      	ldr	r1, [pc, #284]	; (8001778 <receiving_AX25+0x14c>)
 800165c:	4848      	ldr	r0, [pc, #288]	; (8001780 <receiving_AX25+0x154>)
 800165e:	f003 ffec 	bl	800563a <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001662:	4b48      	ldr	r3, [pc, #288]	; (8001784 <receiving_AX25+0x158>)
 8001664:	60fb      	str	r3, [r7, #12]

	int packet_status;
	packet_status = streamGet();
 8001666:	f001 f84d 	bl	8002704 <streamGet>
 800166a:	60b8      	str	r0, [r7, #8]

	//Valid packet received
	if(packet_status == 1){
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d13b      	bne.n	80016ea <receiving_AX25+0xbe>
		//Remove the bit stuffed zeros from received packet and reset packet type
		//remove_bit_stuffing();
		local_packet->i_frame_packet = false;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001678:	3308      	adds	r3, #8
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]

		//Validate packet
		bool AX25_IsValid = AX25_Packet_Validate();
 800167e:	f000 f889 	bl	8001794 <AX25_Packet_Validate>
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		if(AX25_IsValid){
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00b      	beq.n	80016a4 <receiving_AX25+0x78>
			//Put data into KISS format and buffer
			AX25_TO_KISS();
 800168c:	f000 f9aa 	bl	80019e4 <AX25_TO_KISS>

			//Transmit KISS Packet that has been generated
			//output_KISS();

			//Clear AX.25 buffer
			memset(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f640 225f 	movw	r2, #2655	; 0xa5f
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f004 feee 	bl	800647a <memset>

			//Loop back and begin receiving another message
			receiving_AX25();
 800169e:	f7ff ffc5 	bl	800162c <receiving_AX25>
 80016a2:	e065      	b.n	8001770 <receiving_AX25+0x144>
		}
		else{
			sprintf(uartData, "Packet was not valid, restarting\n");
 80016a4:	4b34      	ldr	r3, [pc, #208]	; (8001778 <receiving_AX25+0x14c>)
 80016a6:	4a38      	ldr	r2, [pc, #224]	; (8001788 <receiving_AX25+0x15c>)
 80016a8:	4614      	mov	r4, r2
 80016aa:	469c      	mov	ip, r3
 80016ac:	f104 0e20 	add.w	lr, r4, #32
 80016b0:	4665      	mov	r5, ip
 80016b2:	4626      	mov	r6, r4
 80016b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016b6:	6028      	str	r0, [r5, #0]
 80016b8:	6069      	str	r1, [r5, #4]
 80016ba:	60aa      	str	r2, [r5, #8]
 80016bc:	60eb      	str	r3, [r5, #12]
 80016be:	3410      	adds	r4, #16
 80016c0:	f10c 0c10 	add.w	ip, ip, #16
 80016c4:	4574      	cmp	r4, lr
 80016c6:	d1f3      	bne.n	80016b0 <receiving_AX25+0x84>
 80016c8:	4662      	mov	r2, ip
 80016ca:	4623      	mov	r3, r4
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80016d0:	4829      	ldr	r0, [pc, #164]	; (8001778 <receiving_AX25+0x14c>)
 80016d2:	f7fe fd9d 	bl	8000210 <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29a      	uxth	r2, r3
 80016da:	230a      	movs	r3, #10
 80016dc:	4926      	ldr	r1, [pc, #152]	; (8001778 <receiving_AX25+0x14c>)
 80016de:	4828      	ldr	r0, [pc, #160]	; (8001780 <receiving_AX25+0x154>)
 80016e0:	f003 ffab 	bl	800563a <HAL_UART_Transmit>
			receiving_AX25();
 80016e4:	f7ff ffa2 	bl	800162c <receiving_AX25>
 80016e8:	e042      	b.n	8001770 <receiving_AX25+0x144>
		}
	}
	//Return code for toggleMode
	else if(packet_status == -1){
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f0:	d118      	bne.n	8001724 <receiving_AX25+0xf8>
		sprintf(uartData, "Need to change mode\n");
 80016f2:	4a21      	ldr	r2, [pc, #132]	; (8001778 <receiving_AX25+0x14c>)
 80016f4:	4b25      	ldr	r3, [pc, #148]	; (800178c <receiving_AX25+0x160>)
 80016f6:	4615      	mov	r5, r2
 80016f8:	461c      	mov	r4, r3
 80016fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fc:	6028      	str	r0, [r5, #0]
 80016fe:	6069      	str	r1, [r5, #4]
 8001700:	60aa      	str	r2, [r5, #8]
 8001702:	60eb      	str	r3, [r5, #12]
 8001704:	6820      	ldr	r0, [r4, #0]
 8001706:	6128      	str	r0, [r5, #16]
 8001708:	7923      	ldrb	r3, [r4, #4]
 800170a:	752b      	strb	r3, [r5, #20]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800170c:	481a      	ldr	r0, [pc, #104]	; (8001778 <receiving_AX25+0x14c>)
 800170e:	f7fe fd7f 	bl	8000210 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	230a      	movs	r3, #10
 8001718:	4917      	ldr	r1, [pc, #92]	; (8001778 <receiving_AX25+0x14c>)
 800171a:	4819      	ldr	r0, [pc, #100]	; (8001780 <receiving_AX25+0x154>)
 800171c:	f003 ff8d 	bl	800563a <HAL_UART_Transmit>

		return false;
 8001720:	2300      	movs	r3, #0
 8001722:	e025      	b.n	8001770 <receiving_AX25+0x144>
	}
	//Weird case of unknown return code toggles mode
	else{
		sprintf(uartData, "Packet status was unknown, restarting\n");
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <receiving_AX25+0x14c>)
 8001726:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <receiving_AX25+0x164>)
 8001728:	4614      	mov	r4, r2
 800172a:	469c      	mov	ip, r3
 800172c:	f104 0e20 	add.w	lr, r4, #32
 8001730:	4665      	mov	r5, ip
 8001732:	4626      	mov	r6, r4
 8001734:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001736:	6028      	str	r0, [r5, #0]
 8001738:	6069      	str	r1, [r5, #4]
 800173a:	60aa      	str	r2, [r5, #8]
 800173c:	60eb      	str	r3, [r5, #12]
 800173e:	3410      	adds	r4, #16
 8001740:	f10c 0c10 	add.w	ip, ip, #16
 8001744:	4574      	cmp	r4, lr
 8001746:	d1f3      	bne.n	8001730 <receiving_AX25+0x104>
 8001748:	4663      	mov	r3, ip
 800174a:	4622      	mov	r2, r4
 800174c:	6810      	ldr	r0, [r2, #0]
 800174e:	6018      	str	r0, [r3, #0]
 8001750:	8891      	ldrh	r1, [r2, #4]
 8001752:	7992      	ldrb	r2, [r2, #6]
 8001754:	8099      	strh	r1, [r3, #4]
 8001756:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001758:	4807      	ldr	r0, [pc, #28]	; (8001778 <receiving_AX25+0x14c>)
 800175a:	f7fe fd59 	bl	8000210 <strlen>
 800175e:	4603      	mov	r3, r0
 8001760:	b29a      	uxth	r2, r3
 8001762:	230a      	movs	r3, #10
 8001764:	4904      	ldr	r1, [pc, #16]	; (8001778 <receiving_AX25+0x14c>)
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <receiving_AX25+0x154>)
 8001768:	f003 ff67 	bl	800563a <HAL_UART_Transmit>
		receiving_AX25();
 800176c:	f7ff ff5e 	bl	800162c <receiving_AX25>
	}
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001778:	20001cd4 	.word	0x20001cd4
 800177c:	08006f58 	.word	0x08006f58
 8001780:	20002b90 	.word	0x20002b90
 8001784:	200000d4 	.word	0x200000d4
 8001788:	08006f74 	.word	0x08006f74
 800178c:	08006f98 	.word	0x08006f98
 8001790:	08006fb0 	.word	0x08006fb0

08001794 <AX25_Packet_Validate>:
		}
	}
	//transmit kiss
}

bool AX25_Packet_Validate(){
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <AX25_Packet_Validate+0x5c>)
 800179c:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <AX25_Packet_Validate+0x60>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b77      	cmp	r3, #119	; 0x77
 80017a8:	dc0a      	bgt.n	80017c0 <AX25_Packet_Validate+0x2c>
		sprintf(uartData,"Trash Packet");
 80017aa:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <AX25_Packet_Validate+0x64>)
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <AX25_Packet_Validate+0x68>)
 80017ae:	4614      	mov	r4, r2
 80017b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80017b2:	6020      	str	r0, [r4, #0]
 80017b4:	6061      	str	r1, [r4, #4]
 80017b6:	60a2      	str	r2, [r4, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	7323      	strb	r3, [r4, #12]
		return false;
 80017bc:	2300      	movs	r3, #0
 80017be:	e013      	b.n	80017e8 <AX25_Packet_Validate+0x54>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <AX25_Packet_Validate+0x60>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00a      	beq.n	80017e2 <AX25_Packet_Validate+0x4e>
		sprintf(uartData,"Trash Packet");
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <AX25_Packet_Validate+0x64>)
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <AX25_Packet_Validate+0x68>)
 80017d0:	4614      	mov	r4, r2
 80017d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80017d4:	6020      	str	r0, [r4, #0]
 80017d6:	6061      	str	r1, [r4, #4]
 80017d8:	60a2      	str	r2, [r4, #8]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	7323      	strb	r3, [r4, #12]
		return false;
 80017de:	2300      	movs	r3, #0
 80017e0:	e002      	b.n	80017e8 <AX25_Packet_Validate+0x54>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 80017e2:	f000 f80d 	bl	8001800 <set_packet_pointer_AX25>
		//return crc_check();
		return true;
 80017e6:	2301      	movs	r3, #1
	}

//	return true; //valid packet
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd90      	pop	{r4, r7, pc}
 80017f0:	200000d4 	.word	0x200000d4
 80017f4:	200000a0 	.word	0x200000a0
 80017f8:	20001cd4 	.word	0x20001cd4
 80017fc:	08006fd8 	.word	0x08006fd8

08001800 <set_packet_pointer_AX25>:


void set_packet_pointer_AX25(){
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001806:	4b6e      	ldr	r3, [pc, #440]	; (80019c0 <set_packet_pointer_AX25+0x1c0>)
 8001808:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 800180a:	2310      	movs	r3, #16
 800180c:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 800180e:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 8001810:	4a6d      	ldr	r2, [pc, #436]	; (80019c8 <set_packet_pointer_AX25+0x1c8>)
 8001812:	4614      	mov	r4, r2
 8001814:	469c      	mov	ip, r3
 8001816:	f104 0e20 	add.w	lr, r4, #32
 800181a:	4665      	mov	r5, ip
 800181c:	4626      	mov	r6, r4
 800181e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001820:	6028      	str	r0, [r5, #0]
 8001822:	6069      	str	r1, [r5, #4]
 8001824:	60aa      	str	r2, [r5, #8]
 8001826:	60eb      	str	r3, [r5, #12]
 8001828:	3410      	adds	r4, #16
 800182a:	f10c 0c10 	add.w	ip, ip, #16
 800182e:	4574      	cmp	r4, lr
 8001830:	d1f3      	bne.n	800181a <set_packet_pointer_AX25+0x1a>
 8001832:	4663      	mov	r3, ip
 8001834:	4622      	mov	r2, r4
 8001836:	7812      	ldrb	r2, [r2, #0]
 8001838:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800183a:	4862      	ldr	r0, [pc, #392]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 800183c:	f7fe fce8 	bl	8000210 <strlen>
 8001840:	4603      	mov	r3, r0
 8001842:	b29a      	uxth	r2, r3
 8001844:	230a      	movs	r3, #10
 8001846:	495f      	ldr	r1, [pc, #380]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 8001848:	4860      	ldr	r0, [pc, #384]	; (80019cc <set_packet_pointer_AX25+0x1cc>)
 800184a:	f003 fef6 	bl	800563a <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 8001852:	4a5c      	ldr	r2, [pc, #368]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 8001854:	4b5e      	ldr	r3, [pc, #376]	; (80019d0 <set_packet_pointer_AX25+0x1d0>)
 8001856:	4615      	mov	r5, r2
 8001858:	461c      	mov	r4, r3
 800185a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185c:	6028      	str	r0, [r5, #0]
 800185e:	6069      	str	r1, [r5, #4]
 8001860:	60aa      	str	r2, [r5, #8]
 8001862:	60eb      	str	r3, [r5, #12]
 8001864:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001866:	6128      	str	r0, [r5, #16]
 8001868:	6169      	str	r1, [r5, #20]
 800186a:	61aa      	str	r2, [r5, #24]
 800186c:	7823      	ldrb	r3, [r4, #0]
 800186e:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001870:	4854      	ldr	r0, [pc, #336]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 8001872:	f7fe fccd 	bl	8000210 <strlen>
 8001876:	4603      	mov	r3, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	230a      	movs	r3, #10
 800187c:	4951      	ldr	r1, [pc, #324]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 800187e:	4853      	ldr	r0, [pc, #332]	; (80019cc <set_packet_pointer_AX25+0x1cc>)
 8001880:	f003 fedb 	bl	800563a <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800188a:	3310      	adds	r3, #16
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3370      	adds	r3, #112	; 0x70
 8001894:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	3370      	adds	r3, #112	; 0x70
 800189a:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 800189c:	4a49      	ldr	r2, [pc, #292]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 800189e:	4b4d      	ldr	r3, [pc, #308]	; (80019d4 <set_packet_pointer_AX25+0x1d4>)
 80018a0:	4615      	mov	r5, r2
 80018a2:	461c      	mov	r4, r3
 80018a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a6:	6028      	str	r0, [r5, #0]
 80018a8:	6069      	str	r1, [r5, #4]
 80018aa:	60aa      	str	r2, [r5, #8]
 80018ac:	60eb      	str	r3, [r5, #12]
 80018ae:	cc07      	ldmia	r4!, {r0, r1, r2}
 80018b0:	6128      	str	r0, [r5, #16]
 80018b2:	6169      	str	r1, [r5, #20]
 80018b4:	61aa      	str	r2, [r5, #24]
 80018b6:	7823      	ldrb	r3, [r4, #0]
 80018b8:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018ba:	4842      	ldr	r0, [pc, #264]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 80018bc:	f7fe fca8 	bl	8000210 <strlen>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	230a      	movs	r3, #10
 80018c6:	493f      	ldr	r1, [pc, #252]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 80018c8:	4840      	ldr	r0, [pc, #256]	; (80019cc <set_packet_pointer_AX25+0x1cc>)
 80018ca:	f003 feb6 	bl	800563a <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80018d4:	3314      	adds	r3, #20
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3308      	adds	r3, #8
 80018de:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	3308      	adds	r3, #8
 80018e4:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 80018e6:	4a37      	ldr	r2, [pc, #220]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 80018e8:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <set_packet_pointer_AX25+0x1d8>)
 80018ea:	4615      	mov	r5, r2
 80018ec:	461c      	mov	r4, r3
 80018ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f0:	6028      	str	r0, [r5, #0]
 80018f2:	6069      	str	r1, [r5, #4]
 80018f4:	60aa      	str	r2, [r5, #8]
 80018f6:	60eb      	str	r3, [r5, #12]
 80018f8:	cc03      	ldmia	r4!, {r0, r1}
 80018fa:	6128      	str	r0, [r5, #16]
 80018fc:	6169      	str	r1, [r5, #20]
 80018fe:	7823      	ldrb	r3, [r4, #0]
 8001900:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001902:	4830      	ldr	r0, [pc, #192]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 8001904:	f7fe fc84 	bl	8000210 <strlen>
 8001908:	4603      	mov	r3, r0
 800190a:	b29a      	uxth	r2, r3
 800190c:	230a      	movs	r3, #10
 800190e:	492d      	ldr	r1, [pc, #180]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 8001910:	482e      	ldr	r0, [pc, #184]	; (80019cc <set_packet_pointer_AX25+0x1cc>)
 8001912:	f003 fe92 	bl	800563a <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800191c:	3318      	adds	r3, #24
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3308      	adds	r3, #8
 8001926:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	3308      	adds	r3, #8
 800192c:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <set_packet_pointer_AX25+0x1dc>)
 8001932:	4615      	mov	r5, r2
 8001934:	461c      	mov	r4, r3
 8001936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001938:	6028      	str	r0, [r5, #0]
 800193a:	6069      	str	r1, [r5, #4]
 800193c:	60aa      	str	r2, [r5, #8]
 800193e:	60eb      	str	r3, [r5, #12]
 8001940:	cc03      	ldmia	r4!, {r0, r1}
 8001942:	6128      	str	r0, [r5, #16]
 8001944:	6169      	str	r1, [r5, #20]
 8001946:	8823      	ldrh	r3, [r4, #0]
 8001948:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800194a:	481e      	ldr	r0, [pc, #120]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 800194c:	f7fe fc60 	bl	8000210 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	230a      	movs	r3, #10
 8001956:	491b      	ldr	r1, [pc, #108]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 8001958:	481c      	ldr	r0, [pc, #112]	; (80019cc <set_packet_pointer_AX25+0x1cc>)
 800195a:	f003 fe6e 	bl	800563a <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001964:	331c      	adds	r3, #28
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <set_packet_pointer_AX25+0x1e0>)
 800197e:	4615      	mov	r5, r2
 8001980:	461c      	mov	r4, r3
 8001982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001984:	6028      	str	r0, [r5, #0]
 8001986:	6069      	str	r1, [r5, #4]
 8001988:	60aa      	str	r2, [r5, #8]
 800198a:	60eb      	str	r3, [r5, #12]
 800198c:	cc03      	ldmia	r4!, {r0, r1}
 800198e:	6128      	str	r0, [r5, #16]
 8001990:	6169      	str	r1, [r5, #20]
 8001992:	7823      	ldrb	r3, [r4, #0]
 8001994:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001996:	480b      	ldr	r0, [pc, #44]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 8001998:	f7fe fc3a 	bl	8000210 <strlen>
 800199c:	4603      	mov	r3, r0
 800199e:	b29a      	uxth	r2, r3
 80019a0:	230a      	movs	r3, #10
 80019a2:	4908      	ldr	r1, [pc, #32]	; (80019c4 <set_packet_pointer_AX25+0x1c4>)
 80019a4:	4809      	ldr	r0, [pc, #36]	; (80019cc <set_packet_pointer_AX25+0x1cc>)
 80019a6:	f003 fe48 	bl	800563a <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019b0:	3304      	adds	r3, #4
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	601a      	str	r2, [r3, #0]
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019be:	bf00      	nop
 80019c0:	200000d4 	.word	0x200000d4
 80019c4:	20001cd4 	.word	0x20001cd4
 80019c8:	08006fe8 	.word	0x08006fe8
 80019cc:	20002b90 	.word	0x20002b90
 80019d0:	0800700c 	.word	0x0800700c
 80019d4:	0800702c 	.word	0x0800702c
 80019d8:	0800704c 	.word	0x0800704c
 80019dc:	08007068 	.word	0x08007068
 80019e0:	08007084 	.word	0x08007084

080019e4 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <AX25_TO_KISS+0x10c>)
 80019ec:	603b      	str	r3, [r7, #0]

	set_packet_pointer_AX25();
 80019ee:	f7ff ff07 	bl	8001800 <set_packet_pointer_AX25>
	print_AX25();
 80019f2:	f7ff f9a5 	bl	8000d40 <print_AX25>

	bool* cpy_from_ptr = (local_packet->AX25_PACKET+8);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	3308      	adds	r3, #8
 80019fa:	60fb      	str	r3, [r7, #12]

	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	493d      	ldr	r1, [pc, #244]	; (8001af4 <AX25_TO_KISS+0x110>)
 8001a00:	461a      	mov	r2, r3
 8001a02:	460b      	mov	r3, r1
 8001a04:	cb03      	ldmia	r3!, {r0, r1}
 8001a06:	6010      	str	r0, [r2, #0]
 8001a08:	6051      	str	r1, [r2, #4]
	cpy_from_ptr += FLAG_SIZE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3308      	adds	r3, #8
 8001a0e:	60fb      	str	r3, [r7, #12]

	//copy in each byte MSB to LSB
	for(int i = 0; i < address_len/8; i++){
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	e014      	b.n	8001a40 <AX25_TO_KISS+0x5c>
		memcpy(cpy_from_ptr,(local_packet->address + address_len - 8 - i*8),8*bool_size);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a1c:	3310      	adds	r3, #16
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8001a28:	4413      	add	r3, r2
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f004 fd18 	bl	8006464 <memcpy>
		cpy_from_ptr += 8;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3308      	adds	r3, #8
 8001a38:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < address_len/8; i++){
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b0d      	cmp	r3, #13
 8001a44:	dde7      	ble.n	8001a16 <AX25_TO_KISS+0x32>
	}

	memcpy(cpy_from_ptr,local_packet->control,control_len*bool_size);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a4c:	3314      	adds	r3, #20
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2208      	movs	r2, #8
 8001a52:	4619      	mov	r1, r3
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f004 fd05 	bl	8006464 <memcpy>
	cpy_from_ptr += control_len;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	60fb      	str	r3, [r7, #12]

	memcpy(local_packet->AX25_PACKET,KISS_FLAG,FLAG_SIZE);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4924      	ldr	r1, [pc, #144]	; (8001af4 <AX25_TO_KISS+0x110>)
 8001a64:	461a      	mov	r2, r3
 8001a66:	460b      	mov	r3, r1
 8001a68:	cb03      	ldmia	r3!, {r0, r1}
 8001a6a:	6010      	str	r0, [r2, #0]
 8001a6c:	6051      	str	r1, [r2, #4]
	//copy in each byte MSB to LSB
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	e019      	b.n	8001aa8 <AX25_TO_KISS+0xc4>
		memcpy(cpy_from_ptr,(local_packet->Info + local_packet->Info_Len - 8 - i*8),8*bool_size); //copy in each byte MSB to LSB
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a7a:	331c      	adds	r3, #28
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	1acb      	subs	r3, r1, r3
 8001a8e:	3b08      	subs	r3, #8
 8001a90:	4413      	add	r3, r2
 8001a92:	2208      	movs	r2, #8
 8001a94:	4619      	mov	r1, r3
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f004 fce4 	bl	8006464 <memcpy>
		cpy_from_ptr += 8;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da00      	bge.n	8001ab6 <AX25_TO_KISS+0xd2>
 8001ab4:	3307      	adds	r3, #7
 8001ab6:	10db      	asrs	r3, r3, #3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4293      	cmp	r3, r2
 8001abe:	dbd9      	blt.n	8001a74 <AX25_TO_KISS+0x90>
	}
	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	490c      	ldr	r1, [pc, #48]	; (8001af4 <AX25_TO_KISS+0x110>)
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	cb03      	ldmia	r3!, {r0, r1}
 8001aca:	6010      	str	r0, [r2, #0]
 8001acc:	6051      	str	r1, [r2, #4]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001ad4:	3314      	adds	r3, #20
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2208      	movs	r2, #8
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fcc1 	bl	8006464 <memcpy>
	cpy_from_ptr += control_len;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3308      	adds	r3, #8
 8001ae6:	60fb      	str	r3, [r7, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200000d4 	.word	0x200000d4
 8001af4:	20000000 	.word	0x20000000

08001af8 <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8001afe:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <receiving_KISS+0xd4>)
 8001b00:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001b02:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <receiving_KISS+0xd8>)
 8001b04:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	7b5b      	ldrb	r3, [r3, #13]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d059      	beq.n	8001bc2 <receiving_KISS+0xca>
		sprintf(uartData, "\nGot a packet via UART of size %d, printing now...\n",local_UART_packet->received_byte_cnt);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	461a      	mov	r2, r3
 8001b14:	492f      	ldr	r1, [pc, #188]	; (8001bd4 <receiving_KISS+0xdc>)
 8001b16:	4830      	ldr	r0, [pc, #192]	; (8001bd8 <receiving_KISS+0xe0>)
 8001b18:	f004 fcb8 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b1c:	482e      	ldr	r0, [pc, #184]	; (8001bd8 <receiving_KISS+0xe0>)
 8001b1e:	f7fe fb77 	bl	8000210 <strlen>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	230a      	movs	r3, #10
 8001b28:	492b      	ldr	r1, [pc, #172]	; (8001bd8 <receiving_KISS+0xe0>)
 8001b2a:	482c      	ldr	r0, [pc, #176]	; (8001bdc <receiving_KISS+0xe4>)
 8001b2c:	f003 fd85 	bl	800563a <HAL_UART_Transmit>
		int byte_cnt = local_UART_packet->received_byte_cnt;
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i < byte_cnt;i++){
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e01f      	b.n	8001b7c <receiving_KISS+0x84>
			//Hex value from UART
			 //start from LS Byte = Highest index
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[byte_cnt-1-i];
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	1e5a      	subs	r2, r3, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4413      	add	r3, r2
 8001b48:	7b9b      	ldrb	r3, [r3, #14]
 8001b4a:	71bb      	strb	r3, [r7, #6]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	3307      	adds	r3, #7
 8001b5a:	603b      	str	r3, [r7, #0]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 8001b5c:	79bb      	ldrb	r3, [r7, #6]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2201      	movs	r2, #1
 8001b62:	6839      	ldr	r1, [r7, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fd2b 	bl	80005c0 <conv_HEX_to_BIN>

//			local_UART_packet->got_packet = false;
			local_packet->got_packet = true;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b70:	3309      	adds	r3, #9
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i < byte_cnt;i++){
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dbdb      	blt.n	8001b3c <receiving_KISS+0x44>
		}
		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b8e:	330c      	adds	r3, #12
 8001b90:	601a      	str	r2, [r3, #0]
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset)*8;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b98:	330c      	adds	r3, #12
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3b12      	subs	r3, #18
 8001b9e:	00da      	lsls	r2, r3, #3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001ba6:	601a      	str	r2, [r3, #0]

		//Convert KISS packet to AX.25 packet
		bool success = KISS_TO_AX25();
 8001ba8:	f000 f878 	bl	8001c9c <KISS_TO_AX25>
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
		//Upon exit, have a perfectly good AX.25 packet

		//Output AFSK waveform for radio
		if(success) {
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <receiving_KISS+0xc2>
//			output_AX25();
			print_AX25();
 8001bb6:	f7ff f8c3 	bl	8000d40 <print_AX25>
		}
		clear_AX25();
 8001bba:	f7ff fa9d 	bl	80010f8 <clear_AX25>
		return success;
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	e000      	b.n	8001bc4 <receiving_KISS+0xcc>
	}
	return false;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000143c 	.word	0x2000143c
 8001bd0:	200000d4 	.word	0x200000d4
 8001bd4:	080070a0 	.word	0x080070a0
 8001bd8:	20001cd4 	.word	0x20001cd4
 8001bdc:	20002b90 	.word	0x20002b90

08001be0 <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <set_packet_pointer_KISS+0xac>)
 8001be8:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS\n");
 8001bea:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <set_packet_pointer_KISS+0xb0>)
 8001bec:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <set_packet_pointer_KISS+0xb4>)
 8001bee:	4614      	mov	r4, r2
 8001bf0:	461d      	mov	r5, r3
 8001bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bf4:	6020      	str	r0, [r4, #0]
 8001bf6:	6061      	str	r1, [r4, #4]
 8001bf8:	60a2      	str	r2, [r4, #8]
 8001bfa:	60e3      	str	r3, [r4, #12]
 8001bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bfe:	6120      	str	r0, [r4, #16]
 8001c00:	6161      	str	r1, [r4, #20]
 8001c02:	61a2      	str	r2, [r4, #24]
 8001c04:	61e3      	str	r3, [r4, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c06:	4822      	ldr	r0, [pc, #136]	; (8001c90 <set_packet_pointer_KISS+0xb0>)
 8001c08:	f7fe fb02 	bl	8000210 <strlen>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	230a      	movs	r3, #10
 8001c12:	491f      	ldr	r1, [pc, #124]	; (8001c90 <set_packet_pointer_KISS+0xb0>)
 8001c14:	4820      	ldr	r0, [pc, #128]	; (8001c98 <set_packet_pointer_KISS+0xb8>)
 8001c16:	f003 fd10 	bl	800563a <HAL_UART_Transmit>

	bool *curr_mem = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c26:	330c      	adds	r3, #12
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3b02      	subs	r3, #2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	603b      	str	r3, [r7, #0]

	curr_mem -= address_len;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	3b70      	subs	r3, #112	; 0x70
 8001c36:	603b      	str	r3, [r7, #0]
	local_packet->address = curr_mem;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c3e:	3310      	adds	r3, #16
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	601a      	str	r2, [r3, #0]

	curr_mem -= control_len;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	3b08      	subs	r3, #8
 8001c48:	603b      	str	r3, [r7, #0]
	local_packet->control = curr_mem;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c50:	3314      	adds	r3, #20
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	601a      	str	r2, [r3, #0]

	curr_mem -= PID_len;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	3b08      	subs	r3, #8
 8001c5a:	603b      	str	r3, [r7, #0]
	local_packet->PID = curr_mem;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c62:	3318      	adds	r3, #24
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	601a      	str	r2, [r3, #0]

	curr_mem -= local_packet->Info_Len;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	425b      	negs	r3, r3
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	603b      	str	r3, [r7, #0]
	local_packet->Info = curr_mem;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c7e:	331c      	adds	r3, #28
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	601a      	str	r2, [r3, #0]
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8c:	200000d4 	.word	0x200000d4
 8001c90:	20001cd4 	.word	0x20001cd4
 8001c94:	080070d4 	.word	0x080070d4
 8001c98:	20002b90 	.word	0x20002b90

08001c9c <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <KISS_TO_AX25+0x10c>)
 8001ca4:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Before KISS -> AX.25 conversion\n");
 8001ca6:	4b41      	ldr	r3, [pc, #260]	; (8001dac <KISS_TO_AX25+0x110>)
 8001ca8:	4a41      	ldr	r2, [pc, #260]	; (8001db0 <KISS_TO_AX25+0x114>)
 8001caa:	4614      	mov	r4, r2
 8001cac:	469c      	mov	ip, r3
 8001cae:	f104 0e20 	add.w	lr, r4, #32
 8001cb2:	4665      	mov	r5, ip
 8001cb4:	4626      	mov	r6, r4
 8001cb6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001cb8:	6028      	str	r0, [r5, #0]
 8001cba:	6069      	str	r1, [r5, #4]
 8001cbc:	60aa      	str	r2, [r5, #8]
 8001cbe:	60eb      	str	r3, [r5, #12]
 8001cc0:	3410      	adds	r4, #16
 8001cc2:	f10c 0c10 	add.w	ip, ip, #16
 8001cc6:	4574      	cmp	r4, lr
 8001cc8:	d1f3      	bne.n	8001cb2 <KISS_TO_AX25+0x16>
 8001cca:	4663      	mov	r3, ip
 8001ccc:	4622      	mov	r2, r4
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001cd2:	4836      	ldr	r0, [pc, #216]	; (8001dac <KISS_TO_AX25+0x110>)
 8001cd4:	f7fe fa9c 	bl	8000210 <strlen>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	230a      	movs	r3, #10
 8001cde:	4933      	ldr	r1, [pc, #204]	; (8001dac <KISS_TO_AX25+0x110>)
 8001ce0:	4834      	ldr	r0, [pc, #208]	; (8001db4 <KISS_TO_AX25+0x118>)
 8001ce2:	f003 fcaa 	bl	800563a <HAL_UART_Transmit>

	set_packet_pointer_KISS();
 8001ce6:	f7ff ff7b 	bl	8001be0 <set_packet_pointer_KISS>
	print_KISS();
 8001cea:	f7ff fa3b 	bl	8001164 <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3b02      	subs	r3, #2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4413      	add	r3, r2
 8001d04:	603b      	str	r3, [r7, #0]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 8001d06:	f7ff fd7b 	bl	8001800 <set_packet_pointer_AX25>

	cpy_from_ptr -= address_len;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	3b70      	subs	r3, #112	; 0x70
 8001d0e:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->address,cpy_from_ptr,address_len);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d16:	3310      	adds	r3, #16
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2270      	movs	r2, #112	; 0x70
 8001d1c:	6839      	ldr	r1, [r7, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 fba0 	bl	8006464 <memcpy>

	cpy_from_ptr -= control_len;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	3b08      	subs	r3, #8
 8001d28:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d30:	3314      	adds	r3, #20
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2208      	movs	r2, #8
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 fb93 	bl	8006464 <memcpy>

	cpy_from_ptr -= PID_len;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	3b08      	subs	r3, #8
 8001d42:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d4a:	3318      	adds	r3, #24
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2208      	movs	r2, #8
 8001d50:	6839      	ldr	r1, [r7, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f004 fb86 	bl	8006464 <memcpy>

	cpy_from_ptr -= local_packet->Info_Len;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	425b      	negs	r3, r3
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d6e:	331c      	adds	r3, #28
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	6839      	ldr	r1, [r7, #0]
 8001d7e:	f004 fb71 	bl	8006464 <memcpy>

	//USE CRC HERE TO GENERATE FCS FIELD
	rxBit_count = address_len + control_len + PID_len + local_packet->Info_Len - 8;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3378      	adds	r3, #120	; 0x78
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <KISS_TO_AX25+0x11c>)
 8001d8e:	6013      	str	r3, [r2, #0]
	crc_generate();
 8001d90:	f000 f88e 	bl	8001eb0 <crc_generate>

	//BIT STUFFING NEEDED
//	bitstuffing(local_packet);
	rxBit_count = 0;
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <KISS_TO_AX25+0x11c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
//	print_AX25();
	print_outAX25();
 8001d9a:	f7fe fd35 	bl	8000808 <print_outAX25>
	return true; //valid packet
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da8:	200000d4 	.word	0x200000d4
 8001dac:	20001cd4 	.word	0x20001cd4
 8001db0:	080070f4 	.word	0x080070f4
 8001db4:	20002b90 	.word	0x20002b90
 8001db8:	200000a0 	.word	0x200000a0

08001dbc <crc_calc>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001dc8:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <crc_calc+0xe0>)
 8001dca:	61fb      	str	r3, [r7, #28]
	int out_bit;
	int roll_bit = *crc_ptr_in & 0x0001;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	61bb      	str	r3, [r7, #24]
    int poly = 0x8408;             			//reverse order of 0x1021
 8001dd6:	f248 4308 	movw	r3, #33800	; 0x8408
 8001dda:	617b      	str	r3, [r7, #20]

    out_bit = in_bit ^ roll_bit; 		//xor lsb of current crc with input bit
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4053      	eors	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
	*crc_ptr_in >>= 1;               	//right shift by 1
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	105a      	asrs	r2, r3, #1
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0x0000;
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <crc_calc+0x3e>
 8001df4:	f248 4308 	movw	r3, #33800	; 0x8408
 8001df8:	e000      	b.n	8001dfc <crc_calc+0x40>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
	*crc_ptr_in ^= poly;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	405a      	eors	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	601a      	str	r2, [r3, #0]

    //End condition
//	if(*crc_count_ptr_in >= rxBit_count){
	if(*crc_count_ptr_in >= rxBit_count){
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <crc_calc+0xe4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	db38      	blt.n	8001e92 <crc_calc+0xd6>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8001e28:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	6013      	str	r3, [r2, #0]
  	    sprintf(uartData, "Convert CRC to FCS (hex) = %x\n",local_packet->crc);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e36:	3304      	adds	r3, #4
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4919      	ldr	r1, [pc, #100]	; (8001ea4 <crc_calc+0xe8>)
 8001e3e:	481a      	ldr	r0, [pc, #104]	; (8001ea8 <crc_calc+0xec>)
 8001e40:	f004 fb24 	bl	800648c <siprintf>
    	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e44:	4818      	ldr	r0, [pc, #96]	; (8001ea8 <crc_calc+0xec>)
 8001e46:	f7fe f9e3 	bl	8000210 <strlen>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	230a      	movs	r3, #10
 8001e50:	4915      	ldr	r1, [pc, #84]	; (8001ea8 <crc_calc+0xec>)
 8001e52:	4816      	ldr	r0, [pc, #88]	; (8001eac <crc_calc+0xf0>)
 8001e54:	f003 fbf1 	bl	800563a <HAL_UART_Transmit>
    	if(local_packet->check_crc == false){
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e5e:	330c      	adds	r3, #12
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	f083 0301 	eor.w	r3, r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d012      	beq.n	8001e92 <crc_calc+0xd6>
    		//REMEBER TO CHECK THIS CRC conversion FOR ACCURACY LATER
    		conv_HEX_to_BIN(*crc_ptr_in,local_packet->FCS,false);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b298      	uxth	r0, r3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001e78:	3304      	adds	r3, #4
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f7fe fb9e 	bl	80005c0 <conv_HEX_to_BIN>
    		local_packet->crc = 0xFFFF;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e90:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 8001e92:	bf00      	nop
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200000d4 	.word	0x200000d4
 8001ea0:	200000a0 	.word	0x200000a0
 8001ea4:	08007118 	.word	0x08007118
 8001ea8:	20001cd4 	.word	0x20001cd4
 8001eac:	20002b90 	.word	0x20002b90

08001eb0 <crc_generate>:

void crc_generate(){
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001eb6:	4b73      	ldr	r3, [pc, #460]	; (8002084 <crc_generate+0x1d4>)
 8001eb8:	60bb      	str	r3, [r7, #8]
	uint16_t * crc_ptr = &(local_packet->crc);
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	607b      	str	r3, [r7, #4]
	int * crc_count_ptr = &(local_packet->crc_count);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001eca:	3308      	adds	r3, #8
 8001ecc:	603b      	str	r3, [r7, #0]
	bool *curr_mem;

	*crc_ptr = 0xFFFF;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed4:	801a      	strh	r2, [r3, #0]
	*crc_count_ptr = 0;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	sprintf(uartData, "Performing CRC generation\n");
 8001edc:	4a6a      	ldr	r2, [pc, #424]	; (8002088 <crc_generate+0x1d8>)
 8001ede:	4b6b      	ldr	r3, [pc, #428]	; (800208c <crc_generate+0x1dc>)
 8001ee0:	4615      	mov	r5, r2
 8001ee2:	461c      	mov	r4, r3
 8001ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee6:	6028      	str	r0, [r5, #0]
 8001ee8:	6069      	str	r1, [r5, #4]
 8001eea:	60aa      	str	r2, [r5, #8]
 8001eec:	60eb      	str	r3, [r5, #12]
 8001eee:	cc03      	ldmia	r4!, {r0, r1}
 8001ef0:	6128      	str	r0, [r5, #16]
 8001ef2:	6169      	str	r1, [r5, #20]
 8001ef4:	8823      	ldrh	r3, [r4, #0]
 8001ef6:	78a2      	ldrb	r2, [r4, #2]
 8001ef8:	832b      	strh	r3, [r5, #24]
 8001efa:	4613      	mov	r3, r2
 8001efc:	76ab      	strb	r3, [r5, #26]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001efe:	4862      	ldr	r0, [pc, #392]	; (8002088 <crc_generate+0x1d8>)
 8001f00:	f7fe f986 	bl	8000210 <strlen>
 8001f04:	4603      	mov	r3, r0
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	230a      	movs	r3, #10
 8001f0a:	495f      	ldr	r1, [pc, #380]	; (8002088 <crc_generate+0x1d8>)
 8001f0c:	4860      	ldr	r0, [pc, #384]	; (8002090 <crc_generate+0x1e0>)
 8001f0e:	f003 fb94 	bl	800563a <HAL_UART_Transmit>

	//Calculate CRC for address
	curr_mem = (local_packet->address) + address_len - 8;//start at MS Byte(LSB)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f18:	3310      	adds	r3, #16
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3368      	adds	r3, #104	; 0x68
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
 8001f24:	e017      	b.n	8001f56 <crc_generate+0xa6>
		for(int j = 0;j<8;j++){
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	e00b      	b.n	8001f44 <crc_generate+0x94>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f30:	4413      	add	r3, r2
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff3f 	bl	8001dbc <crc_calc>
		for(int j = 0;j<8;j++){
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3301      	adds	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b07      	cmp	r3, #7
 8001f48:	ddf0      	ble.n	8001f2c <crc_generate+0x7c>
		}
		curr_mem -= 8;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	3b08      	subs	r3, #8
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	3301      	adds	r3, #1
 8001f54:	623b      	str	r3, [r7, #32]
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	2b0d      	cmp	r3, #13
 8001f5a:	dde4      	ble.n	8001f26 <crc_generate+0x76>
	}

	//Calculate CRC for control
	curr_mem = local_packet->control;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f62:	3314      	adds	r3, #20
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < control_len; i++){
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	e00f      	b.n	8001f8e <crc_generate+0xde>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f74:	3314      	adds	r3, #20
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff1a 	bl	8001dbc <crc_calc>
	for(int i = 0; i < control_len; i++){
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b07      	cmp	r3, #7
 8001f92:	ddec      	ble.n	8001f6e <crc_generate+0xbe>
	}

//	//Calculate CRC for PID (if packet is of type i-frame)
	curr_mem = local_packet->PID;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f9a:	3318      	adds	r3, #24
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < PID_len; i++){
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e00f      	b.n	8001fc6 <crc_generate+0x116>
		//Call crc_calc per bit
		crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001fac:	3318      	adds	r3, #24
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fefe 	bl	8001dbc <crc_calc>
	for(int i = 0; i < PID_len; i++){
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b07      	cmp	r3, #7
 8001fca:	ddec      	ble.n	8001fa6 <crc_generate+0xf6>
	}

	//Calculate CRC for Info field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 8;//start at MS Byte(LSB)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001fd2:	331c      	adds	r3, #28
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3b08      	subs	r3, #8
 8001fe0:	4413      	add	r3, r2
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8)-1;i++){
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	e017      	b.n	800201a <crc_generate+0x16a>
		for(int j = 0;j<8;j++){
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	e00b      	b.n	8002008 <crc_generate+0x158>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff4:	4413      	add	r3, r2
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fedd 	bl	8001dbc <crc_calc>
		for(int j = 0;j<8;j++){
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3301      	adds	r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b07      	cmp	r3, #7
 800200c:	ddf0      	ble.n	8001ff0 <crc_generate+0x140>
		}
		curr_mem -= 8;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	3b08      	subs	r3, #8
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8)-1;i++){
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	3301      	adds	r3, #1
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	da00      	bge.n	8002028 <crc_generate+0x178>
 8002026:	3307      	adds	r3, #7
 8002028:	10db      	asrs	r3, r3, #3
 800202a:	3b01      	subs	r3, #1
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	429a      	cmp	r2, r3
 8002030:	dbdb      	blt.n	8001fea <crc_generate+0x13a>
	}

	sprintf(uartData, "rx_bitcnt = %d\n", rxBit_count);
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <crc_generate+0x1e4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	4917      	ldr	r1, [pc, #92]	; (8002098 <crc_generate+0x1e8>)
 800203a:	4813      	ldr	r0, [pc, #76]	; (8002088 <crc_generate+0x1d8>)
 800203c:	f004 fa26 	bl	800648c <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002040:	4811      	ldr	r0, [pc, #68]	; (8002088 <crc_generate+0x1d8>)
 8002042:	f7fe f8e5 	bl	8000210 <strlen>
 8002046:	4603      	mov	r3, r0
 8002048:	b29a      	uxth	r2, r3
 800204a:	230a      	movs	r3, #10
 800204c:	490e      	ldr	r1, [pc, #56]	; (8002088 <crc_generate+0x1d8>)
 800204e:	4810      	ldr	r0, [pc, #64]	; (8002090 <crc_generate+0x1e0>)
 8002050:	f003 faf3 	bl	800563a <HAL_UART_Transmit>

	sprintf(uartData, "bitcnt_ptr = %d\n", *crc_count_ptr);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4910      	ldr	r1, [pc, #64]	; (800209c <crc_generate+0x1ec>)
 800205c:	480a      	ldr	r0, [pc, #40]	; (8002088 <crc_generate+0x1d8>)
 800205e:	f004 fa15 	bl	800648c <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002062:	4809      	ldr	r0, [pc, #36]	; (8002088 <crc_generate+0x1d8>)
 8002064:	f7fe f8d4 	bl	8000210 <strlen>
 8002068:	4603      	mov	r3, r0
 800206a:	b29a      	uxth	r2, r3
 800206c:	230a      	movs	r3, #10
 800206e:	4906      	ldr	r1, [pc, #24]	; (8002088 <crc_generate+0x1d8>)
 8002070:	4807      	ldr	r0, [pc, #28]	; (8002090 <crc_generate+0x1e0>)
 8002072:	f003 fae2 	bl	800563a <HAL_UART_Transmit>
	*crc_count_ptr = 0;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
}
 800207c:	bf00      	nop
 800207e:	3728      	adds	r7, #40	; 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bdb0      	pop	{r4, r5, r7, pc}
 8002084:	200000d4 	.word	0x200000d4
 8002088:	20001cd4 	.word	0x20001cd4
 800208c:	08007138 	.word	0x08007138
 8002090:	20002b90 	.word	0x20002b90
 8002094:	200000a0 	.word	0x200000a0
 8002098:	08007154 	.word	0x08007154
 800209c:	08007164 	.word	0x08007164

080020a0 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 80020aa:	f000 f999 	bl	80023e0 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <initProgram+0x58>)
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	7013      	strb	r3, [r2, #0]
	toggleMode();
 80020b4:	f000 f826 	bl	8002104 <toggleMode>
	toggleMode();
 80020b8:	f000 f824 	bl	8002104 <toggleMode>

	if (mode) {
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <initProgram+0x58>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d009      	beq.n	80020d8 <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <initProgram+0x5c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2264      	movs	r2, #100	; 0x64
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <initProgram+0x60>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f44f 724f 	mov.w	r2, #828	; 0x33c
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80020d6:	e008      	b.n	80020ea <initProgram+0x4a>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <initProgram+0x5c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <initProgram+0x60>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2268      	movs	r2, #104	; 0x68
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 80020ea:	f7fe fb27 	bl	800073c <init_AX25>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20002b38 	.word	0x20002b38
 80020fc:	20002b50 	.word	0x20002b50
 8002100:	20002898 	.word	0x20002898

08002104 <toggleMode>:



void toggleMode() {
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002108:	2006      	movs	r0, #6
 800210a:	f001 fadc 	bl	80036c6 <HAL_NVIC_DisableIRQ>

	//Toggle mode
	mode = !mode;
 800210e:	4b27      	ldr	r3, [pc, #156]	; (80021ac <toggleMode+0xa8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf14      	ite	ne
 8002116:	2301      	movne	r3, #1
 8002118:	2300      	moveq	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f083 0301 	eor.w	r3, r3, #1
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b20      	ldr	r3, [pc, #128]	; (80021ac <toggleMode+0xa8>)
 800212a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 800212c:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <toggleMode+0xa8>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	2120      	movs	r1, #32
 8002134:	481e      	ldr	r0, [pc, #120]	; (80021b0 <toggleMode+0xac>)
 8002136:	f002 f89d 	bl	8004274 <HAL_GPIO_WritePin>
	midbit = false;
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <toggleMode+0xb0>)
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 8002140:	481d      	ldr	r0, [pc, #116]	; (80021b8 <toggleMode+0xb4>)
 8002142:	f002 fe2c 	bl	8004d9e <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <toggleMode+0xb4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop(&htim4);
 800214e:	481b      	ldr	r0, [pc, #108]	; (80021bc <toggleMode+0xb8>)
 8002150:	f002 fe25 	bl	8004d9e <HAL_TIM_Base_Stop>
	htim4.Instance->CNT = 0;
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <toggleMode+0xb8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <toggleMode+0xa8>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <toggleMode+0x6c>
		//Set Timer periods
		//htim2.Instance->ARR = TIM2_AUTORELOAD_TX; This is no longer used
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <toggleMode+0xb4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f44f 724f 	mov.w	r2, #828	; 0x33c
 800216c:	62da      	str	r2, [r3, #44]	; 0x2c
 800216e:	e015      	b.n	800219c <toggleMode+0x98>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <toggleMode+0xbc>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f242 7210 	movw	r2, #10000	; 0x2710
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <toggleMode+0xb4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2268      	movs	r2, #104	; 0x68
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start(&htim4);
 8002182:	480e      	ldr	r0, [pc, #56]	; (80021bc <toggleMode+0xb8>)
 8002184:	f002 fde7 	bl	8004d56 <HAL_TIM_Base_Start>

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 8002188:	480b      	ldr	r0, [pc, #44]	; (80021b8 <toggleMode+0xb4>)
 800218a:	f002 fe33 	bl	8004df4 <HAL_TIM_Base_Start_IT>

		//Stop DAC
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800218e:	2100      	movs	r1, #0
 8002190:	480c      	ldr	r0, [pc, #48]	; (80021c4 <toggleMode+0xc0>)
 8002192:	f001 fad4 	bl	800373e <HAL_DAC_Stop_DMA>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002196:	2006      	movs	r0, #6
 8002198:	f001 fa87 	bl	80036aa <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800219c:	2200      	movs	r2, #0
 800219e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a2:	4803      	ldr	r0, [pc, #12]	; (80021b0 <toggleMode+0xac>)
 80021a4:	f002 f866 	bl	8004274 <HAL_GPIO_WritePin>
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20002b38 	.word	0x20002b38
 80021b0:	40020000 	.word	0x40020000
 80021b4:	200000a4 	.word	0x200000a4
 80021b8:	20002898 	.word	0x20002898
 80021bc:	20002dd0 	.word	0x20002dd0
 80021c0:	20002b50 	.word	0x20002b50
 80021c4:	20002b3c 	.word	0x20002b3c

080021c8 <loadPeriodBuffer>:
bool bufffull = false;
void loadPeriodBuffer(int timerCnt) {
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	if(canWrite){
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <loadPeriodBuffer+0x64>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01d      	beq.n	8002214 <loadPeriodBuffer+0x4c>
		periodBuffer[periodSaveCount] = timerCnt;
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <loadPeriodBuffer+0x68>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a14      	ldr	r2, [pc, #80]	; (8002234 <loadPeriodBuffer+0x6c>)
 80021e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		periodSaveCount++;
 80021e6:	4b12      	ldr	r3, [pc, #72]	; (8002230 <loadPeriodBuffer+0x68>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	3301      	adds	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <loadPeriodBuffer+0x68>)
 80021f0:	801a      	strh	r2, [r3, #0]
		if (periodSaveCount >= RX_BUFFERSIZE) {
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <loadPeriodBuffer+0x68>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	2b7f      	cmp	r3, #127	; 0x7f
 80021f8:	d902      	bls.n	8002200 <loadPeriodBuffer+0x38>
			periodSaveCount = 0;
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <loadPeriodBuffer+0x68>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	801a      	strh	r2, [r3, #0]
		}

		//Buffer is full
		if(periodSaveCount == periodReadCount){
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <loadPeriodBuffer+0x68>)
 8002202:	881a      	ldrh	r2, [r3, #0]
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <loadPeriodBuffer+0x70>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d106      	bne.n	800221a <loadPeriodBuffer+0x52>
			canWrite = false;
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <loadPeriodBuffer+0x64>)
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e002      	b.n	800221a <loadPeriodBuffer+0x52>
		}
	} else {
		bufffull = true;
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <loadPeriodBuffer+0x74>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <loadPeriodBuffer+0x78>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	20000010 	.word	0x20000010
 8002230:	200000ba 	.word	0x200000ba
 8002234:	20002938 	.word	0x20002938
 8002238:	200000bc 	.word	0x200000bc
 800223c:	200000a6 	.word	0x200000a6
 8002240:	200000b8 	.word	0x200000b8

08002244 <Tim3IT>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void Tim3IT() {
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	if (mode) {
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <Tim3IT+0x54>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <Tim3IT+0x14>
		midbit = false;
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <Tim3IT+0x58>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]

		else {
			signal_detect_decay--;
		}
	}
}
 8002256:	e01c      	b.n	8002292 <Tim3IT+0x4e>
		if(signal_detect_decay <= 0){
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <Tim3IT+0x5c>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d112      	bne.n	8002286 <Tim3IT+0x42>
			if(signal_valid){
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <Tim3IT+0x60>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <Tim3IT+0x3a>
				loadPeriodBuffer(-1);
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f7ff ffac 	bl	80021c8 <loadPeriodBuffer>
				HAL_TIM_Base_Stop(&htim4);
 8002270:	480d      	ldr	r0, [pc, #52]	; (80022a8 <Tim3IT+0x64>)
 8002272:	f002 fd94 	bl	8004d9e <HAL_TIM_Base_Stop>
				htim4.Instance->CNT = 0;
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <Tim3IT+0x64>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
			signal_valid = false;
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <Tim3IT+0x60>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
}
 8002284:	e005      	b.n	8002292 <Tim3IT+0x4e>
			signal_detect_decay--;
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <Tim3IT+0x5c>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <Tim3IT+0x5c>)
 8002290:	801a      	strh	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20002b38 	.word	0x20002b38
 800229c:	200000a4 	.word	0x200000a4
 80022a0:	200000be 	.word	0x200000be
 80022a4:	200000c0 	.word	0x200000c0
 80022a8:	20002dd0 	.word	0x20002dd0

080022ac <FreqCounterPinEXTI>:
int edges = 0;
int gotVal = 0;
int last_carrier_tone = 0;
int carrier_tone = 0;

void FreqCounterPinEXTI() {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
	//Measure time since last measurement
	gotVal = htim2.Instance->CNT;
 80022b2:	4b2e      	ldr	r3, [pc, #184]	; (800236c <FreqCounterPinEXTI+0xc0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <FreqCounterPinEXTI+0xc4>)
 80022bc:	601a      	str	r2, [r3, #0]
	int freq = PCONVERT / (gotVal);
 80022be:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <FreqCounterPinEXTI+0xc4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a2c      	ldr	r2, [pc, #176]	; (8002374 <FreqCounterPinEXTI+0xc8>)
 80022c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80022c8:	607b      	str	r3, [r7, #4]
	loadPeriodBuffer(gotVal);
 80022ca:	4b29      	ldr	r3, [pc, #164]	; (8002370 <FreqCounterPinEXTI+0xc4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff7a 	bl	80021c8 <loadPeriodBuffer>

	last_carrier_tone = carrier_tone;
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <FreqCounterPinEXTI+0xcc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a28      	ldr	r2, [pc, #160]	; (800237c <FreqCounterPinEXTI+0xd0>)
 80022da:	6013      	str	r3, [r2, #0]

	//2200Hz detected
	if ( ((HIGHFREQ - FREQDEV) < freq) && (freq < (HIGHFREQ + FREQDEV)) ){
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f240 726c 	movw	r2, #1900	; 0x76c
 80022e2:	4293      	cmp	r3, r2
 80022e4:	dd09      	ble.n	80022fa <FreqCounterPinEXTI+0x4e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80022ec:	4293      	cmp	r3, r2
 80022ee:	dc04      	bgt.n	80022fa <FreqCounterPinEXTI+0x4e>
		carrier_tone = HIGHFREQ;
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <FreqCounterPinEXTI+0xcc>)
 80022f2:	f640 0298 	movw	r2, #2200	; 0x898
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e011      	b.n	800231e <FreqCounterPinEXTI+0x72>
	}
	//1200Hz detected
	else if ( ((LOWFREQ - FREQDEV) < freq) && (freq < (LOWFREQ + FREQDEV)) ){
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002300:	dd09      	ble.n	8002316 <FreqCounterPinEXTI+0x6a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f240 52db 	movw	r2, #1499	; 0x5db
 8002308:	4293      	cmp	r3, r2
 800230a:	dc04      	bgt.n	8002316 <FreqCounterPinEXTI+0x6a>
		carrier_tone = LOWFREQ;
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <FreqCounterPinEXTI+0xcc>)
 800230e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e003      	b.n	800231e <FreqCounterPinEXTI+0x72>
	}
	//Invalid freq
	else{
		carrier_tone = -1;
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <FreqCounterPinEXTI+0xcc>)
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	601a      	str	r2, [r3, #0]
//		sprintf(uartData, "bad frequency detected, frequency was %d\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}

	if(carrier_tone!=last_carrier_tone || carrier_tone == -1){
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <FreqCounterPinEXTI+0xcc>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4b16      	ldr	r3, [pc, #88]	; (800237c <FreqCounterPinEXTI+0xd0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d104      	bne.n	8002334 <FreqCounterPinEXTI+0x88>
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <FreqCounterPinEXTI+0xcc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002332:	d107      	bne.n	8002344 <FreqCounterPinEXTI+0x98>
		edges = 0;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <FreqCounterPinEXTI+0xd4>)
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
		htim4.Instance->CNT = 0;
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <FreqCounterPinEXTI+0xd8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2200      	movs	r2, #0
 8002340:	625a      	str	r2, [r3, #36]	; 0x24
 8002342:	e004      	b.n	800234e <FreqCounterPinEXTI+0xa2>
	} else {
		edges++;
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <FreqCounterPinEXTI+0xd4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <FreqCounterPinEXTI+0xd4>)
 800234c:	6013      	str	r3, [r2, #0]
	}

	signal_valid = true;
 800234e:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <FreqCounterPinEXTI+0xdc>)
 8002350:	2201      	movs	r2, #1
 8002352:	701a      	strb	r2, [r3, #0]
	signal_detect_decay = DECAY_TIME;
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <FreqCounterPinEXTI+0xe0>)
 8002356:	2208      	movs	r2, #8
 8002358:	801a      	strh	r2, [r3, #0]
	htim2.Instance->CNT = 0;
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <FreqCounterPinEXTI+0xc0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20002b50 	.word	0x20002b50
 8002370:	200000ac 	.word	0x200000ac
 8002374:	00989680 	.word	0x00989680
 8002378:	200000b4 	.word	0x200000b4
 800237c:	200000b0 	.word	0x200000b0
 8002380:	200000a8 	.word	0x200000a8
 8002384:	20002dd0 	.word	0x20002dd0
 8002388:	200000c0 	.word	0x200000c0
 800238c:	200000be 	.word	0x200000be

08002390 <generateBitstream>:
	}

	HAL_TIM_Base_Stop(&htim3);
	return wave_start;
}
void generateBitstream() {
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <generateBitstream+0x4c>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <generateBitstream+0x4c>)
 800239c:	2201      	movs	r2, #1
 800239e:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <generateBitstream+0x4c>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <generateBitstream+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <generateBitstream+0x4c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <generateBitstream+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <generateBitstream+0x4c>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <generateBitstream+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <generateBitstream+0x4c>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <generateBitstream+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	725a      	strb	r2, [r3, #9]

}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	2000288c 	.word	0x2000288c

080023e0 <initOUTData>:
void initOUTData() {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	//edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
	//edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
	generateBitstream();
 80023e4:	f7ff ffd4 	bl	8002390 <generateBitstream>
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}

080023ec <pertobit>:
uint16_t	signal_detect_decay = 0;			//Pseudo timer to detect if value is valid
bool		signal_valid = false;					//Determines if frequency being read is a valid bit
uint16_t trackBit = 0;
uint16_t bitSaveCount = 0;

int pertobit(uint32_t inputPeriod) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / inputPeriod;
 80023f4:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <pertobit+0x88>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	60fb      	str	r3, [r7, #12]

//	sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	//return freq;
	if ((HIGHFREQ - FREQDEV < freq) && (freq < HIGHFREQ + FREQDEV)){
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f240 726c 	movw	r2, #1900	; 0x76c
 8002404:	4293      	cmp	r3, r2
 8002406:	dd15      	ble.n	8002434 <pertobit+0x48>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800240e:	4293      	cmp	r3, r2
 8002410:	dc10      	bgt.n	8002434 <pertobit+0x48>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4918      	ldr	r1, [pc, #96]	; (8002478 <pertobit+0x8c>)
 8002416:	4819      	ldr	r0, [pc, #100]	; (800247c <pertobit+0x90>)
 8002418:	f004 f838 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800241c:	4817      	ldr	r0, [pc, #92]	; (800247c <pertobit+0x90>)
 800241e:	f7fd fef7 	bl	8000210 <strlen>
 8002422:	4603      	mov	r3, r0
 8002424:	b29a      	uxth	r2, r3
 8002426:	230a      	movs	r3, #10
 8002428:	4914      	ldr	r1, [pc, #80]	; (800247c <pertobit+0x90>)
 800242a:	4815      	ldr	r0, [pc, #84]	; (8002480 <pertobit+0x94>)
 800242c:	f003 f905 	bl	800563a <HAL_UART_Transmit>
		return 1;
 8002430:	2301      	movs	r3, #1
 8002432:	e01b      	b.n	800246c <pertobit+0x80>
	}
	else if ((LOWFREQ - FREQDEV < freq) && (freq < LOWFREQ + FREQDEV)){
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800243a:	dd15      	ble.n	8002468 <pertobit+0x7c>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f240 52db 	movw	r2, #1499	; 0x5db
 8002442:	4293      	cmp	r3, r2
 8002444:	dc10      	bgt.n	8002468 <pertobit+0x7c>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	490b      	ldr	r1, [pc, #44]	; (8002478 <pertobit+0x8c>)
 800244a:	480c      	ldr	r0, [pc, #48]	; (800247c <pertobit+0x90>)
 800244c:	f004 f81e 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002450:	480a      	ldr	r0, [pc, #40]	; (800247c <pertobit+0x90>)
 8002452:	f7fd fedd 	bl	8000210 <strlen>
 8002456:	4603      	mov	r3, r0
 8002458:	b29a      	uxth	r2, r3
 800245a:	230a      	movs	r3, #10
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <pertobit+0x90>)
 800245e:	4808      	ldr	r0, [pc, #32]	; (8002480 <pertobit+0x94>)
 8002460:	f003 f8eb 	bl	800563a <HAL_UART_Transmit>
		return 0;
 8002464:	2300      	movs	r3, #0
 8002466:	e001      	b.n	800246c <pertobit+0x80>
	}
	else
//		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		return -1;
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	00989680 	.word	0x00989680
 8002478:	080071d0 	.word	0x080071d0
 800247c:	20001cd4 	.word	0x20001cd4
 8002480:	20002b90 	.word	0x20002b90

08002484 <loadBit>:
int loadBit(){
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
	int startbit;
	int currbit = -1;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
 800248e:	617b      	str	r3, [r7, #20]
	int loopCount = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
	int checkCount;
	bool goodbit = false;
 8002494:	2300      	movs	r3, #0
 8002496:	72fb      	strb	r3, [r7, #11]

	startbit = pertobit(periodBuffer[trackBit]);
 8002498:	4b31      	ldr	r3, [pc, #196]	; (8002560 <loadBit+0xdc>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b31      	ldr	r3, [pc, #196]	; (8002564 <loadBit+0xe0>)
 80024a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ffa1 	bl	80023ec <pertobit>
 80024aa:	6078      	str	r0, [r7, #4]
//	sprintf(uartData, "startbit = %d\n",startbit);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	//Increment trackBit
	trackBit++;
 80024ac:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <loadBit+0xdc>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <loadBit+0xdc>)
 80024b6:	801a      	strh	r2, [r3, #0]
	if (trackBit >= RX_BUFFERSIZE)
 80024b8:	4b29      	ldr	r3, [pc, #164]	; (8002560 <loadBit+0xdc>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	2b7f      	cmp	r3, #127	; 0x7f
 80024be:	d902      	bls.n	80024c6 <loadBit+0x42>
		trackBit = 0;
 80024c0:	4b27      	ldr	r3, [pc, #156]	; (8002560 <loadBit+0xdc>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	801a      	strh	r2, [r3, #0]

	if(startbit==1){
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d102      	bne.n	80024d2 <loadBit+0x4e>
		checkCount = 3;
 80024cc:	2303      	movs	r3, #3
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e02f      	b.n	8002532 <loadBit+0xae>
	}
	else if(startbit==0){
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <loadBit+0x5a>
		checkCount = 1;
 80024d8:	2301      	movs	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e029      	b.n	8002532 <loadBit+0xae>
	}
	else {
		checkCount = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
	}

	//Valiate startbit value
	while(loopCount<checkCount){
 80024e2:	e026      	b.n	8002532 <loadBit+0xae>
		currbit = pertobit(periodBuffer[trackBit]);
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <loadBit+0xdc>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <loadBit+0xe0>)
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff7b 	bl	80023ec <pertobit>
 80024f6:	6178      	str	r0, [r7, #20]

		//Good bit
		if(startbit==currbit){
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d10c      	bne.n	800251a <loadBit+0x96>
			goodbit = true;
 8002500:	2301      	movs	r3, #1
 8002502:	72fb      	strb	r3, [r7, #11]
			goodbit = false;
			break;
		}

		//Increment trackBit
		trackBit++;
 8002504:	4b16      	ldr	r3, [pc, #88]	; (8002560 <loadBit+0xdc>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	4b14      	ldr	r3, [pc, #80]	; (8002560 <loadBit+0xdc>)
 800250e:	801a      	strh	r2, [r3, #0]
		if (trackBit >= RX_BUFFERSIZE)
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <loadBit+0xdc>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	2b7f      	cmp	r3, #127	; 0x7f
 8002516:	d909      	bls.n	800252c <loadBit+0xa8>
 8002518:	e005      	b.n	8002526 <loadBit+0xa2>
			currbit = -1;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	617b      	str	r3, [r7, #20]
			goodbit = false;
 8002520:	2300      	movs	r3, #0
 8002522:	72fb      	strb	r3, [r7, #11]
			break;
 8002524:	e009      	b.n	800253a <loadBit+0xb6>
			trackBit = 0;
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <loadBit+0xdc>)
 8002528:	2200      	movs	r2, #0
 800252a:	801a      	strh	r2, [r3, #0]
		loopCount++;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	3301      	adds	r3, #1
 8002530:	613b      	str	r3, [r7, #16]
	while(loopCount<checkCount){
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	429a      	cmp	r2, r3
 8002538:	dbd4      	blt.n	80024e4 <loadBit+0x60>
	}

	//Increment bitSaveCount
	bitSaveCount++;
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <loadBit+0xe4>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <loadBit+0xe4>)
 8002544:	801a      	strh	r2, [r3, #0]
	if (bitSaveCount >= RX_BUFFERSIZE)
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <loadBit+0xe4>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	2b7f      	cmp	r3, #127	; 0x7f
 800254c:	d902      	bls.n	8002554 <loadBit+0xd0>
		bitSaveCount = 0;
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <loadBit+0xe4>)
 8002550:	2200      	movs	r2, #0
 8002552:	801a      	strh	r2, [r3, #0]

	return currbit;
 8002554:	697b      	ldr	r3, [r7, #20]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200000c2 	.word	0x200000c2
 8002564:	20002938 	.word	0x20002938
 8002568:	200000c4 	.word	0x200000c4

0800256c <loadOctet>:
int loadOctet(bool* bufferptr) {
 800256c:	b5b0      	push	{r4, r5, r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	int bit;
	bool myPtr[8];
	bool isFlag = true;
 8002574:	2301      	movs	r3, #1
 8002576:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < 8; i++) {
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e043      	b.n	8002606 <loadOctet+0x9a>
		bit = loadBit();
 800257e:	f7ff ff81 	bl	8002484 <loadBit>
 8002582:	6138      	str	r0, [r7, #16]

		sprintf(uartData, "bit[%d] = %d \n",i,bit);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4955      	ldr	r1, [pc, #340]	; (80026e0 <loadOctet+0x174>)
 800258a:	4856      	ldr	r0, [pc, #344]	; (80026e4 <loadOctet+0x178>)
 800258c:	f003 ff7e 	bl	800648c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002590:	4854      	ldr	r0, [pc, #336]	; (80026e4 <loadOctet+0x178>)
 8002592:	f7fd fe3d 	bl	8000210 <strlen>
 8002596:	4603      	mov	r3, r0
 8002598:	b29a      	uxth	r2, r3
 800259a:	230a      	movs	r3, #10
 800259c:	4951      	ldr	r1, [pc, #324]	; (80026e4 <loadOctet+0x178>)
 800259e:	4852      	ldr	r0, [pc, #328]	; (80026e8 <loadOctet+0x17c>)
 80025a0:	f003 f84b 	bl	800563a <HAL_UART_Transmit>

        if(bit < 0){
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	da11      	bge.n	80025ce <loadOctet+0x62>
    		sprintf(uartData, "bit %d was bad\n",i);
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	494f      	ldr	r1, [pc, #316]	; (80026ec <loadOctet+0x180>)
 80025ae:	484d      	ldr	r0, [pc, #308]	; (80026e4 <loadOctet+0x178>)
 80025b0:	f003 ff6c 	bl	800648c <siprintf>
    		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80025b4:	484b      	ldr	r0, [pc, #300]	; (80026e4 <loadOctet+0x178>)
 80025b6:	f7fd fe2b 	bl	8000210 <strlen>
 80025ba:	4603      	mov	r3, r0
 80025bc:	b29a      	uxth	r2, r3
 80025be:	230a      	movs	r3, #10
 80025c0:	4948      	ldr	r1, [pc, #288]	; (80026e4 <loadOctet+0x178>)
 80025c2:	4849      	ldr	r0, [pc, #292]	; (80026e8 <loadOctet+0x17c>)
 80025c4:	f003 f839 	bl	800563a <HAL_UART_Transmit>
        	return -1;
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	e083      	b.n	80026d6 <loadOctet+0x16a>
        }
		myPtr[i] = bit;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf14      	ite	ne
 80025d4:	2301      	movne	r3, #1
 80025d6:	2300      	moveq	r3, #0
 80025d8:	b2d9      	uxtb	r1, r3
 80025da:	f107 0208 	add.w	r2, r7, #8
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4413      	add	r3, r2
 80025e2:	460a      	mov	r2, r1
 80025e4:	701a      	strb	r2, [r3, #0]
        if(myPtr[i] != AX25TBYTE[i]){
 80025e6:	f107 0208 	add.w	r2, r7, #8
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4413      	add	r3, r2
 80025ee:	781a      	ldrb	r2, [r3, #0]
 80025f0:	493f      	ldr	r1, [pc, #252]	; (80026f0 <loadOctet+0x184>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	440b      	add	r3, r1
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <loadOctet+0x94>
        	isFlag = false;
 80025fc:	2300      	movs	r3, #0
 80025fe:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) {
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	3301      	adds	r3, #1
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b07      	cmp	r3, #7
 800260a:	ddb8      	ble.n	800257e <loadOctet+0x12>
        }
    }
	//If this is not a flag, copy the values into the buffer pointer
	if(!isFlag){
 800260c:	7ffb      	ldrb	r3, [r7, #31]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d05d      	beq.n	80026d4 <loadOctet+0x168>
		sprintf(uartData, "Printing octet [MSB:LSB]= ");
 8002618:	4a32      	ldr	r2, [pc, #200]	; (80026e4 <loadOctet+0x178>)
 800261a:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <loadOctet+0x188>)
 800261c:	4615      	mov	r5, r2
 800261e:	461c      	mov	r4, r3
 8002620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002622:	6028      	str	r0, [r5, #0]
 8002624:	6069      	str	r1, [r5, #4]
 8002626:	60aa      	str	r2, [r5, #8]
 8002628:	60eb      	str	r3, [r5, #12]
 800262a:	cc03      	ldmia	r4!, {r0, r1}
 800262c:	6128      	str	r0, [r5, #16]
 800262e:	6169      	str	r1, [r5, #20]
 8002630:	8823      	ldrh	r3, [r4, #0]
 8002632:	78a2      	ldrb	r2, [r4, #2]
 8002634:	832b      	strh	r3, [r5, #24]
 8002636:	4613      	mov	r3, r2
 8002638:	76ab      	strb	r3, [r5, #26]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800263a:	482a      	ldr	r0, [pc, #168]	; (80026e4 <loadOctet+0x178>)
 800263c:	f7fd fde8 	bl	8000210 <strlen>
 8002640:	4603      	mov	r3, r0
 8002642:	b29a      	uxth	r2, r3
 8002644:	230a      	movs	r3, #10
 8002646:	4927      	ldr	r1, [pc, #156]	; (80026e4 <loadOctet+0x178>)
 8002648:	4827      	ldr	r0, [pc, #156]	; (80026e8 <loadOctet+0x17c>)
 800264a:	f002 fff6 	bl	800563a <HAL_UART_Transmit>

		for(int i = 0;i<8;i++){
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	e02c      	b.n	80026ae <loadOctet+0x142>
			bufferptr[7-i] = (myPtr[7-i]==1)?true:false;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	f107 0220 	add.w	r2, r7, #32
 800265e:	4413      	add	r3, r2
 8002660:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	4619      	mov	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	440b      	add	r3, r1
 8002670:	701a      	strb	r2, [r3, #0]
			rxBit_count++;
 8002672:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <loadOctet+0x18c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <loadOctet+0x18c>)
 800267a:	6013      	str	r3, [r2, #0]
			sprintf(uartData, " %d ",bufferptr[7-i]);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	461a      	mov	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	491b      	ldr	r1, [pc, #108]	; (80026fc <loadOctet+0x190>)
 800268e:	4815      	ldr	r0, [pc, #84]	; (80026e4 <loadOctet+0x178>)
 8002690:	f003 fefc 	bl	800648c <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002694:	4813      	ldr	r0, [pc, #76]	; (80026e4 <loadOctet+0x178>)
 8002696:	f7fd fdbb 	bl	8000210 <strlen>
 800269a:	4603      	mov	r3, r0
 800269c:	b29a      	uxth	r2, r3
 800269e:	230a      	movs	r3, #10
 80026a0:	4910      	ldr	r1, [pc, #64]	; (80026e4 <loadOctet+0x178>)
 80026a2:	4811      	ldr	r0, [pc, #68]	; (80026e8 <loadOctet+0x17c>)
 80026a4:	f002 ffc9 	bl	800563a <HAL_UART_Transmit>
		for(int i = 0;i<8;i++){
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b07      	cmp	r3, #7
 80026b2:	ddcf      	ble.n	8002654 <loadOctet+0xe8>
		}
		sprintf(uartData, "\r\n");
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <loadOctet+0x178>)
 80026b6:	4a12      	ldr	r2, [pc, #72]	; (8002700 <loadOctet+0x194>)
 80026b8:	8811      	ldrh	r1, [r2, #0]
 80026ba:	7892      	ldrb	r2, [r2, #2]
 80026bc:	8019      	strh	r1, [r3, #0]
 80026be:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80026c0:	4808      	ldr	r0, [pc, #32]	; (80026e4 <loadOctet+0x178>)
 80026c2:	f7fd fda5 	bl	8000210 <strlen>
 80026c6:	4603      	mov	r3, r0
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	230a      	movs	r3, #10
 80026cc:	4905      	ldr	r1, [pc, #20]	; (80026e4 <loadOctet+0x178>)
 80026ce:	4806      	ldr	r0, [pc, #24]	; (80026e8 <loadOctet+0x17c>)
 80026d0:	f002 ffb3 	bl	800563a <HAL_UART_Transmit>
	}
	return isFlag;
 80026d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bdb0      	pop	{r4, r5, r7, pc}
 80026de:	bf00      	nop
 80026e0:	080071ec 	.word	0x080071ec
 80026e4:	20001cd4 	.word	0x20001cd4
 80026e8:	20002b90 	.word	0x20002b90
 80026ec:	080071fc 	.word	0x080071fc
 80026f0:	20000008 	.word	0x20000008
 80026f4:	0800720c 	.word	0x0800720c
 80026f8:	200000a0 	.word	0x200000a0
 80026fc:	08007228 	.word	0x08007228
 8002700:	08007230 	.word	0x08007230

08002704 <streamGet>:
int streamGet() {
 8002704:	b5b0      	push	{r4, r5, r7, lr}
 8002706:	b090      	sub	sp, #64	; 0x40
 8002708:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800270a:	4b88      	ldr	r3, [pc, #544]	; (800292c <streamGet+0x228>)
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28

	int byteArray[8];
	int max_octets = (int)(AX25_PACKET_MAX)/8;
 800270e:	f240 134b 	movw	r3, #331	; 0x14b
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
	int octet_count,good_octet;
	bool gotflag;

	//Just do this unless we need to toggle
	while(!changeMode){
 8002714:	e0fb      	b.n	800290e <streamGet+0x20a>
		gotflag = false;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//Slide bits
		for(int i = 0; i < 7; i++){
 800271c:	2300      	movs	r3, #0
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
 8002720:	e011      	b.n	8002746 <streamGet+0x42>
			byteArray[i] = byteArray[i+1];
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	3301      	adds	r3, #1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800272c:	4413      	add	r3, r2
 800272e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800273a:	440b      	add	r3, r1
 800273c:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 7; i++){
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	3301      	adds	r3, #1
 8002744:	633b      	str	r3, [r7, #48]	; 0x30
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	2b06      	cmp	r3, #6
 800274a:	ddea      	ble.n	8002722 <streamGet+0x1e>
		}
		byteArray[7] = loadBit();
 800274c:	f7ff fe9a 	bl	8002484 <loadBit>
 8002750:	4603      	mov	r3, r0
 8002752:	623b      	str	r3, [r7, #32]
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
//		}
//		sprintf(uartData, "Current octet:");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		//Detect AX25 flag bytes
		for(int i = 0;i < 8; i++){
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002758:	e019      	b.n	800278e <streamGet+0x8a>
//			sprintf(uartData, " %d ",byteArray[i]);
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			//If the byte isn't lined up, break loop
			if(byteArray[i]!=AX25TBYTE[i]) {
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002762:	4413      	add	r3, r2
 8002764:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002768:	4971      	ldr	r1, [pc, #452]	; (8002930 <streamGet+0x22c>)
 800276a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276c:	440a      	add	r2, r1
 800276e:	7812      	ldrb	r2, [r2, #0]
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <streamGet+0x78>
				gotflag = false;
 8002774:	2300      	movs	r3, #0
 8002776:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 800277a:	e00b      	b.n	8002794 <streamGet+0x90>
			}
			//If the loop makes it to the lowest bit, the flag should be lined up
			else if(i==7){
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	2b07      	cmp	r3, #7
 8002780:	d102      	bne.n	8002788 <streamGet+0x84>
				gotflag = true;
 8002782:	2301      	movs	r3, #1
 8002784:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0;i < 8; i++){
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278a:	3301      	adds	r3, #1
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002790:	2b07      	cmp	r3, #7
 8002792:	dde2      	ble.n	800275a <streamGet+0x56>
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);


		//Got flag
		if(gotflag){
 8002794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80b8 	beq.w	800290e <streamGet+0x20a>
			sprintf(uartData, "Start AX.25 Flag Detected\r\n");
 800279e:	4a65      	ldr	r2, [pc, #404]	; (8002934 <streamGet+0x230>)
 80027a0:	4b65      	ldr	r3, [pc, #404]	; (8002938 <streamGet+0x234>)
 80027a2:	4615      	mov	r5, r2
 80027a4:	461c      	mov	r4, r3
 80027a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a8:	6028      	str	r0, [r5, #0]
 80027aa:	6069      	str	r1, [r5, #4]
 80027ac:	60aa      	str	r2, [r5, #8]
 80027ae:	60eb      	str	r3, [r5, #12]
 80027b0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80027b2:	6128      	str	r0, [r5, #16]
 80027b4:	6169      	str	r1, [r5, #20]
 80027b6:	61aa      	str	r2, [r5, #24]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80027b8:	485e      	ldr	r0, [pc, #376]	; (8002934 <streamGet+0x230>)
 80027ba:	f7fd fd29 	bl	8000210 <strlen>
 80027be:	4603      	mov	r3, r0
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	230a      	movs	r3, #10
 80027c4:	495b      	ldr	r1, [pc, #364]	; (8002934 <streamGet+0x230>)
 80027c6:	485d      	ldr	r0, [pc, #372]	; (800293c <streamGet+0x238>)
 80027c8:	f002 ff37 	bl	800563a <HAL_UART_Transmit>
			octet_count  = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c

			//Until AX.25 buffer overflows, continue reading octets
			good_octet = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	63bb      	str	r3, [r7, #56]	; 0x38
			while( (good_octet==0) && (octet_count < max_octets) ){
 80027d4:	e01a      	b.n	800280c <streamGet+0x108>
				good_octet = loadOctet(&local_packet->AX25_PACKET[octet_count*8]);
 80027d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027dc:	4413      	add	r3, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fec4 	bl	800256c <loadOctet>
 80027e4:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(uartData, "Loaded octet %d out of %d\r\n",octet_count,max_octets);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027ea:	4955      	ldr	r1, [pc, #340]	; (8002940 <streamGet+0x23c>)
 80027ec:	4851      	ldr	r0, [pc, #324]	; (8002934 <streamGet+0x230>)
 80027ee:	f003 fe4d 	bl	800648c <siprintf>
				//sprintf(uartData, "good_octet: %d\r\n",good_octet);
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80027f2:	4850      	ldr	r0, [pc, #320]	; (8002934 <streamGet+0x230>)
 80027f4:	f7fd fd0c 	bl	8000210 <strlen>
 80027f8:	4603      	mov	r3, r0
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	230a      	movs	r3, #10
 80027fe:	494d      	ldr	r1, [pc, #308]	; (8002934 <streamGet+0x230>)
 8002800:	484e      	ldr	r0, [pc, #312]	; (800293c <streamGet+0x238>)
 8002802:	f002 ff1a 	bl	800563a <HAL_UART_Transmit>

				octet_count+=1;
 8002806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002808:	3301      	adds	r3, #1
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
			while( (good_octet==0) && (octet_count < max_octets) ){
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <streamGet+0x116>
 8002812:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	429a      	cmp	r2, r3
 8002818:	dbdd      	blt.n	80027d6 <streamGet+0xd2>
			}
			//If an octet was bad, this was a bad packet
			if(good_octet!=1){
 800281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281c:	2b01      	cmp	r3, #1
 800281e:	d012      	beq.n	8002846 <streamGet+0x142>
				sprintf(uartData, "Bad packet! Detected bad signal.\n\n",octet_count);
 8002820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002822:	4948      	ldr	r1, [pc, #288]	; (8002944 <streamGet+0x240>)
 8002824:	4843      	ldr	r0, [pc, #268]	; (8002934 <streamGet+0x230>)
 8002826:	f003 fe31 	bl	800648c <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800282a:	4842      	ldr	r0, [pc, #264]	; (8002934 <streamGet+0x230>)
 800282c:	f7fd fcf0 	bl	8000210 <strlen>
 8002830:	4603      	mov	r3, r0
 8002832:	b29a      	uxth	r2, r3
 8002834:	230a      	movs	r3, #10
 8002836:	493f      	ldr	r1, [pc, #252]	; (8002934 <streamGet+0x230>)
 8002838:	4840      	ldr	r0, [pc, #256]	; (800293c <streamGet+0x238>)
 800283a:	f002 fefe 	bl	800563a <HAL_UART_Transmit>
				//for(int i = 0;i<)
				gotflag = false;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002844:	e063      	b.n	800290e <streamGet+0x20a>
			}
			//If ax.25 buffer overflows
			else if(octet_count >= max_octets){
 8002846:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	429a      	cmp	r2, r3
 800284c:	db12      	blt.n	8002874 <streamGet+0x170>
				sprintf(uartData, "Bad packet! Not enough octets\r\n\n",octet_count);
 800284e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002850:	493d      	ldr	r1, [pc, #244]	; (8002948 <streamGet+0x244>)
 8002852:	4838      	ldr	r0, [pc, #224]	; (8002934 <streamGet+0x230>)
 8002854:	f003 fe1a 	bl	800648c <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002858:	4836      	ldr	r0, [pc, #216]	; (8002934 <streamGet+0x230>)
 800285a:	f7fd fcd9 	bl	8000210 <strlen>
 800285e:	4603      	mov	r3, r0
 8002860:	b29a      	uxth	r2, r3
 8002862:	230a      	movs	r3, #10
 8002864:	4933      	ldr	r1, [pc, #204]	; (8002934 <streamGet+0x230>)
 8002866:	4835      	ldr	r0, [pc, #212]	; (800293c <streamGet+0x238>)
 8002868:	f002 fee7 	bl	800563a <HAL_UART_Transmit>
				gotflag = false;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002872:	e04c      	b.n	800290e <streamGet+0x20a>
			}
			//
			else if(octet_count == 1){
 8002874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d12d      	bne.n	80028d6 <streamGet+0x1d2>
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n");
 800287a:	4a2e      	ldr	r2, [pc, #184]	; (8002934 <streamGet+0x230>)
 800287c:	4b33      	ldr	r3, [pc, #204]	; (800294c <streamGet+0x248>)
 800287e:	4615      	mov	r5, r2
 8002880:	461c      	mov	r4, r3
 8002882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002884:	6028      	str	r0, [r5, #0]
 8002886:	6069      	str	r1, [r5, #4]
 8002888:	60aa      	str	r2, [r5, #8]
 800288a:	60eb      	str	r3, [r5, #12]
 800288c:	cc03      	ldmia	r4!, {r0, r1}
 800288e:	6128      	str	r0, [r5, #16]
 8002890:	6169      	str	r1, [r5, #20]
 8002892:	8823      	ldrh	r3, [r4, #0]
 8002894:	78a2      	ldrb	r2, [r4, #2]
 8002896:	832b      	strh	r3, [r5, #24]
 8002898:	4613      	mov	r3, r2
 800289a:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800289c:	4825      	ldr	r0, [pc, #148]	; (8002934 <streamGet+0x230>)
 800289e:	f7fd fcb7 	bl	8000210 <strlen>
 80028a2:	4603      	mov	r3, r0
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	230a      	movs	r3, #10
 80028a8:	4922      	ldr	r1, [pc, #136]	; (8002934 <streamGet+0x230>)
 80028aa:	4824      	ldr	r0, [pc, #144]	; (800293c <streamGet+0x238>)
 80028ac:	f002 fec5 	bl	800563a <HAL_UART_Transmit>
				sprintf(uartData, "Bad packet! Not enough octetes.\r\n\n",octet_count);
 80028b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028b2:	4927      	ldr	r1, [pc, #156]	; (8002950 <streamGet+0x24c>)
 80028b4:	481f      	ldr	r0, [pc, #124]	; (8002934 <streamGet+0x230>)
 80028b6:	f003 fde9 	bl	800648c <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80028ba:	481e      	ldr	r0, [pc, #120]	; (8002934 <streamGet+0x230>)
 80028bc:	f7fd fca8 	bl	8000210 <strlen>
 80028c0:	4603      	mov	r3, r0
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	230a      	movs	r3, #10
 80028c6:	491b      	ldr	r1, [pc, #108]	; (8002934 <streamGet+0x230>)
 80028c8:	481c      	ldr	r0, [pc, #112]	; (800293c <streamGet+0x238>)
 80028ca:	f002 feb6 	bl	800563a <HAL_UART_Transmit>
				gotflag = false;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80028d4:	e01b      	b.n	800290e <streamGet+0x20a>
			}
			//If ax.25 buffer does not overflow, this was a good packet
			else {
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n\n");
 80028d6:	4a17      	ldr	r2, [pc, #92]	; (8002934 <streamGet+0x230>)
 80028d8:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <streamGet+0x250>)
 80028da:	4615      	mov	r5, r2
 80028dc:	461c      	mov	r4, r3
 80028de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e0:	6028      	str	r0, [r5, #0]
 80028e2:	6069      	str	r1, [r5, #4]
 80028e4:	60aa      	str	r2, [r5, #8]
 80028e6:	60eb      	str	r3, [r5, #12]
 80028e8:	cc07      	ldmia	r4!, {r0, r1, r2}
 80028ea:	6128      	str	r0, [r5, #16]
 80028ec:	6169      	str	r1, [r5, #20]
 80028ee:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80028f0:	4810      	ldr	r0, [pc, #64]	; (8002934 <streamGet+0x230>)
 80028f2:	f7fd fc8d 	bl	8000210 <strlen>
 80028f6:	4603      	mov	r3, r0
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	230a      	movs	r3, #10
 80028fc:	490d      	ldr	r1, [pc, #52]	; (8002934 <streamGet+0x230>)
 80028fe:	480f      	ldr	r0, [pc, #60]	; (800293c <streamGet+0x238>)
 8002900:	f002 fe9b 	bl	800563a <HAL_UART_Transmit>
				gotflag = false;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return 1;
 800290a:	2301      	movs	r3, #1
 800290c:	e009      	b.n	8002922 <streamGet+0x21e>
	while(!changeMode){
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <streamGet+0x254>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	f083 0301 	eor.w	r3, r3, #1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	f47f aefc 	bne.w	8002716 <streamGet+0x12>
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
	//Break if mode needs to change
	if(toggleMode)
		return -1;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002922:	4618      	mov	r0, r3
 8002924:	3740      	adds	r7, #64	; 0x40
 8002926:	46bd      	mov	sp, r7
 8002928:	bdb0      	pop	{r4, r5, r7, pc}
 800292a:	bf00      	nop
 800292c:	200000d4 	.word	0x200000d4
 8002930:	20000008 	.word	0x20000008
 8002934:	20001cd4 	.word	0x20001cd4
 8002938:	08007234 	.word	0x08007234
 800293c:	20002b90 	.word	0x20002b90
 8002940:	08007250 	.word	0x08007250
 8002944:	0800726c 	.word	0x0800726c
 8002948:	08007290 	.word	0x08007290
 800294c:	080072b4 	.word	0x080072b4
 8002950:	080072d0 	.word	0x080072d0
 8002954:	080072f4 	.word	0x080072f4
 8002958:	200000a5 	.word	0x200000a5

0800295c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002960:	f000 fd18 	bl	8003394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002964:	f000 f820 	bl	80029a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002968:	f000 f9f0 	bl	8002d4c <MX_GPIO_Init>
  MX_DMA_Init();
 800296c:	f000 f9ce 	bl	8002d0c <MX_DMA_Init>
  MX_DAC_Init();
 8002970:	f000 f888 	bl	8002a84 <MX_DAC_Init>
  MX_TIM2_Init();
 8002974:	f000 f8b0 	bl	8002ad8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002978:	f000 f8fa 	bl	8002b70 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800297c:	f000 f994 	bl	8002ca8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002980:	f000 f944 	bl	8002c0c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8002984:	4806      	ldr	r0, [pc, #24]	; (80029a0 <main+0x44>)
 8002986:	f002 f9e6 	bl	8004d56 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 800298a:	4806      	ldr	r0, [pc, #24]	; (80029a4 <main+0x48>)
 800298c:	f002 fa32 	bl	8004df4 <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 8002990:	f000 fabc 	bl	8002f0c <uart_gpio_init>

	initProgram(false);
 8002994:	2000      	movs	r0, #0
 8002996:	f7ff fb83 	bl	80020a0 <initProgram>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tx_rx();
 800299a:	f7fd feeb 	bl	8000774 <tx_rx>
 800299e:	e7fc      	b.n	800299a <main+0x3e>
 80029a0:	20002b50 	.word	0x20002b50
 80029a4:	20002898 	.word	0x20002898

080029a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b094      	sub	sp, #80	; 0x50
 80029ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ae:	f107 031c 	add.w	r3, r7, #28
 80029b2:	2234      	movs	r2, #52	; 0x34
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 fd5f 	bl	800647a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029bc:	f107 0308 	add.w	r3, r7, #8
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029cc:	2300      	movs	r3, #0
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <SystemClock_Config+0xd4>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4a29      	ldr	r2, [pc, #164]	; (8002a7c <SystemClock_Config+0xd4>)
 80029d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029da:	6413      	str	r3, [r2, #64]	; 0x40
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <SystemClock_Config+0xd4>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80029e8:	2300      	movs	r3, #0
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <SystemClock_Config+0xd8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029f4:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <SystemClock_Config+0xd8>)
 80029f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <SystemClock_Config+0xd8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a12:	2302      	movs	r3, #2
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002a20:	235a      	movs	r3, #90	; 0x5a
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a24:	2302      	movs	r3, #2
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 ff09 	bl	800484c <HAL_RCC_OscConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002a40:	f000 fa8c 	bl	8002f5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a44:	230f      	movs	r3, #15
 8002a46:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	2102      	movs	r1, #2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 fc38 	bl	80042d8 <HAL_RCC_ClockConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002a6e:	f000 fa75 	bl	8002f5c <Error_Handler>
  }
}
 8002a72:	bf00      	nop
 8002a74:	3750      	adds	r7, #80	; 0x50
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000

08002a84 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002a92:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <MX_DAC_Init+0x4c>)
 8002a94:	4a0f      	ldr	r2, [pc, #60]	; (8002ad4 <MX_DAC_Init+0x50>)
 8002a96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002a98:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <MX_DAC_Init+0x4c>)
 8002a9a:	f000 fe2e 	bl	80036fa <HAL_DAC_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002aa4:	f000 fa5a 	bl	8002f5c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002aa8:	2324      	movs	r3, #36	; 0x24
 8002aaa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002ab0:	463b      	mov	r3, r7
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <MX_DAC_Init+0x4c>)
 8002ab8:	f000 fe82 	bl	80037c0 <HAL_DAC_ConfigChannel>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002ac2:	f000 fa4b 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20002b3c 	.word	0x20002b3c
 8002ad4:	40007400 	.word	0x40007400

08002ad8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aec:	463b      	mov	r3, r7
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <MX_TIM2_Init+0x94>)
 8002af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002afa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <MX_TIM2_Init+0x94>)
 8002afe:	2208      	movs	r2, #8
 8002b00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b02:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <MX_TIM2_Init+0x94>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002b08:	4b18      	ldr	r3, [pc, #96]	; (8002b6c <MX_TIM2_Init+0x94>)
 8002b0a:	2263      	movs	r2, #99	; 0x63
 8002b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b0e:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <MX_TIM2_Init+0x94>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b14:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <MX_TIM2_Init+0x94>)
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b1a:	4814      	ldr	r0, [pc, #80]	; (8002b6c <MX_TIM2_Init+0x94>)
 8002b1c:	f002 f8f0 	bl	8004d00 <HAL_TIM_Base_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002b26:	f000 fa19 	bl	8002f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b30:	f107 0308 	add.w	r3, r7, #8
 8002b34:	4619      	mov	r1, r3
 8002b36:	480d      	ldr	r0, [pc, #52]	; (8002b6c <MX_TIM2_Init+0x94>)
 8002b38:	f002 fa88 	bl	800504c <HAL_TIM_ConfigClockSource>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002b42:	f000 fa0b 	bl	8002f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b46:	2320      	movs	r3, #32
 8002b48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b4e:	463b      	mov	r3, r7
 8002b50:	4619      	mov	r1, r3
 8002b52:	4806      	ldr	r0, [pc, #24]	; (8002b6c <MX_TIM2_Init+0x94>)
 8002b54:	f002 fc94 	bl	8005480 <HAL_TIMEx_MasterConfigSynchronization>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002b5e:	f000 f9fd 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20002b50 	.word	0x20002b50

08002b70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b76:	f107 0308 	add.w	r3, r7, #8
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b84:	463b      	mov	r3, r7
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <MX_TIM3_Init+0x94>)
 8002b8e:	4a1e      	ldr	r2, [pc, #120]	; (8002c08 <MX_TIM3_Init+0x98>)
 8002b90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <MX_TIM3_Init+0x94>)
 8002b94:	2259      	movs	r2, #89	; 0x59
 8002b96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <MX_TIM3_Init+0x94>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 8002b9e:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <MX_TIM3_Init+0x94>)
 8002ba0:	f240 3241 	movw	r2, #833	; 0x341
 8002ba4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <MX_TIM3_Init+0x94>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bac:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <MX_TIM3_Init+0x94>)
 8002bae:	2280      	movs	r2, #128	; 0x80
 8002bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bb2:	4814      	ldr	r0, [pc, #80]	; (8002c04 <MX_TIM3_Init+0x94>)
 8002bb4:	f002 f8a4 	bl	8004d00 <HAL_TIM_Base_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002bbe:	f000 f9cd 	bl	8002f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480d      	ldr	r0, [pc, #52]	; (8002c04 <MX_TIM3_Init+0x94>)
 8002bd0:	f002 fa3c 	bl	800504c <HAL_TIM_ConfigClockSource>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002bda:	f000 f9bf 	bl	8002f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002be6:	463b      	mov	r3, r7
 8002be8:	4619      	mov	r1, r3
 8002bea:	4806      	ldr	r0, [pc, #24]	; (8002c04 <MX_TIM3_Init+0x94>)
 8002bec:	f002 fc48 	bl	8005480 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002bf6:	f000 f9b1 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20002898 	.word	0x20002898
 8002c08:	40000400 	.word	0x40000400

08002c0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c20:	463b      	mov	r3, r7
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <MX_TIM4_Init+0x94>)
 8002c2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ca4 <MX_TIM4_Init+0x98>)
 8002c2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <MX_TIM4_Init+0x94>)
 8002c30:	2259      	movs	r2, #89	; 0x59
 8002c32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <MX_TIM4_Init+0x94>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <MX_TIM4_Init+0x94>)
 8002c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <MX_TIM4_Init+0x94>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c48:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <MX_TIM4_Init+0x94>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c4e:	4814      	ldr	r0, [pc, #80]	; (8002ca0 <MX_TIM4_Init+0x94>)
 8002c50:	f002 f856 	bl	8004d00 <HAL_TIM_Base_Init>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002c5a:	f000 f97f 	bl	8002f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c64:	f107 0308 	add.w	r3, r7, #8
 8002c68:	4619      	mov	r1, r3
 8002c6a:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <MX_TIM4_Init+0x94>)
 8002c6c:	f002 f9ee 	bl	800504c <HAL_TIM_ConfigClockSource>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002c76:	f000 f971 	bl	8002f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c82:	463b      	mov	r3, r7
 8002c84:	4619      	mov	r1, r3
 8002c86:	4806      	ldr	r0, [pc, #24]	; (8002ca0 <MX_TIM4_Init+0x94>)
 8002c88:	f002 fbfa 	bl	8005480 <HAL_TIMEx_MasterConfigSynchronization>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002c92:	f000 f963 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20002dd0 	.word	0x20002dd0
 8002ca4:	40000800 	.word	0x40000800

08002ca8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cac:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <MX_USART2_UART_Init+0x5c>)
 8002cae:	4a16      	ldr	r2, [pc, #88]	; (8002d08 <MX_USART2_UART_Init+0x60>)
 8002cb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <MX_USART2_UART_Init+0x5c>)
 8002cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <MX_USART2_UART_Init+0x5c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <MX_USART2_UART_Init+0x5c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <MX_USART2_UART_Init+0x5c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <MX_USART2_UART_Init+0x5c>)
 8002cce:	220c      	movs	r2, #12
 8002cd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <MX_USART2_UART_Init+0x5c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <MX_USART2_UART_Init+0x5c>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cde:	4809      	ldr	r0, [pc, #36]	; (8002d04 <MX_USART2_UART_Init+0x5c>)
 8002ce0:	f002 fc5e 	bl	80055a0 <HAL_UART_Init>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cea:	f000 f937 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2026      	movs	r0, #38	; 0x26
 8002cf4:	f000 fcbd 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cf8:	2026      	movs	r0, #38	; 0x26
 8002cfa:	f000 fcd6 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20002b90 	.word	0x20002b90
 8002d08:	40004400 	.word	0x40004400

08002d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <MX_DMA_Init+0x3c>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <MX_DMA_Init+0x3c>)
 8002d1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d20:	6313      	str	r3, [r2, #48]	; 0x30
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <MX_DMA_Init+0x3c>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	2010      	movs	r0, #16
 8002d34:	f000 fc9d 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002d38:	2010      	movs	r0, #16
 8002d3a:	f000 fcb6 	bl	80036aa <HAL_NVIC_EnableIRQ>

}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800

08002d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	60da      	str	r2, [r3, #12]
 8002d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	4b45      	ldr	r3, [pc, #276]	; (8002e7c <MX_GPIO_Init+0x130>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a44      	ldr	r2, [pc, #272]	; (8002e7c <MX_GPIO_Init+0x130>)
 8002d6c:	f043 0304 	orr.w	r3, r3, #4
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <MX_GPIO_Init+0x130>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <MX_GPIO_Init+0x130>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a3d      	ldr	r2, [pc, #244]	; (8002e7c <MX_GPIO_Init+0x130>)
 8002d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <MX_GPIO_Init+0x130>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <MX_GPIO_Init+0x130>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a36      	ldr	r2, [pc, #216]	; (8002e7c <MX_GPIO_Init+0x130>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b34      	ldr	r3, [pc, #208]	; (8002e7c <MX_GPIO_Init+0x130>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <MX_GPIO_Init+0x130>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a2f      	ldr	r2, [pc, #188]	; (8002e7c <MX_GPIO_Init+0x130>)
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <MX_GPIO_Init+0x130>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	607b      	str	r3, [r7, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002dd8:	4829      	ldr	r0, [pc, #164]	; (8002e80 <MX_GPIO_Init+0x134>)
 8002dda:	f001 fa4b 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2110      	movs	r1, #16
 8002de2:	4828      	ldr	r0, [pc, #160]	; (8002e84 <MX_GPIO_Init+0x138>)
 8002de4:	f001 fa46 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <MX_GPIO_Init+0x13c>)
 8002df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002df6:	f107 0314 	add.w	r3, r7, #20
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4821      	ldr	r0, [pc, #132]	; (8002e84 <MX_GPIO_Init+0x138>)
 8002dfe:	f001 f8a7 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e02:	2301      	movs	r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e06:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <MX_GPIO_Init+0x140>)
 8002e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0e:	f107 0314 	add.w	r3, r7, #20
 8002e12:	4619      	mov	r1, r3
 8002e14:	481a      	ldr	r0, [pc, #104]	; (8002e80 <MX_GPIO_Init+0x134>)
 8002e16:	f001 f89b 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8002e1a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e20:	2301      	movs	r3, #1
 8002e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	4619      	mov	r1, r3
 8002e32:	4813      	ldr	r0, [pc, #76]	; (8002e80 <MX_GPIO_Init+0x134>)
 8002e34:	f001 f88c 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8002e38:	2310      	movs	r3, #16
 8002e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	480d      	ldr	r0, [pc, #52]	; (8002e84 <MX_GPIO_Init+0x138>)
 8002e50:	f001 f87e 	bl	8003f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2100      	movs	r1, #0
 8002e58:	2006      	movs	r0, #6
 8002e5a:	f000 fc0a 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002e5e:	2006      	movs	r0, #6
 8002e60:	f000 fc23 	bl	80036aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e64:	2200      	movs	r2, #0
 8002e66:	2100      	movs	r1, #0
 8002e68:	2028      	movs	r0, #40	; 0x28
 8002e6a:	f000 fc02 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e6e:	2028      	movs	r0, #40	; 0x28
 8002e70:	f000 fc1b 	bl	80036aa <HAL_NVIC_EnableIRQ>

}
 8002e74:	bf00      	nop
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40020000 	.word	0x40020000
 8002e84:	40020800 	.word	0x40020800
 8002e88:	10210000 	.word	0x10210000
 8002e8c:	10110000 	.word	0x10110000

08002e90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d102      	bne.n	8002ea6 <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 8002ea0:	f7ff f9d0 	bl	8002244 <Tim3IT>
	else
		__NOP();
}
 8002ea4:	e000      	b.n	8002ea8 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 8002ea6:	bf00      	nop
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20002898 	.word	0x20002898

08002eb4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 8002ec4:	f7ff f9f2 	bl	80022ac <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ece:	d103      	bne.n	8002ed8 <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x30>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 8002ed6:	e000      	b.n	8002eda <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 8002ed8:	bf00      	nop
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200000a5 	.word	0x200000a5

08002ee8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <HAL_UART_RxCpltCallback+0x20>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 8002efa:	f7fe fb4d 	bl	8001598 <UART2_EXCEPTION_CALLBACK>
  }
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40004400 	.word	0x40004400

08002f0c <uart_gpio_init>:

void uart_gpio_init()
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <uart_gpio_init+0x48>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <uart_gpio_init+0x48>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <uart_gpio_init+0x48>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002f2e:	230c      	movs	r3, #12
 8002f30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f36:	2301      	movs	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f3e:	2307      	movs	r3, #7
 8002f40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f42:	1d3b      	adds	r3, r7, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4804      	ldr	r0, [pc, #16]	; (8002f58 <uart_gpio_init+0x4c>)
 8002f48:	f001 f802 	bl	8003f50 <HAL_GPIO_Init>
}
 8002f4c:	bf00      	nop
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40020000 	.word	0x40020000

08002f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_MspInit+0x4c>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <HAL_MspInit+0x4c>)
 8002f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f80:	6453      	str	r3, [r2, #68]	; 0x44
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <HAL_MspInit+0x4c>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_MspInit+0x4c>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <HAL_MspInit+0x4c>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_MspInit+0x4c>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002faa:	2007      	movs	r0, #7
 8002fac:	f000 fb56 	bl	800365c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40023800 	.word	0x40023800

08002fbc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2f      	ldr	r2, [pc, #188]	; (8003098 <HAL_DAC_MspInit+0xdc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d158      	bne.n	8003090 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	4b2e      	ldr	r3, [pc, #184]	; (800309c <HAL_DAC_MspInit+0xe0>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a2d      	ldr	r2, [pc, #180]	; (800309c <HAL_DAC_MspInit+0xe0>)
 8002fe8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_DAC_MspInit+0xe0>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b27      	ldr	r3, [pc, #156]	; (800309c <HAL_DAC_MspInit+0xe0>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a26      	ldr	r2, [pc, #152]	; (800309c <HAL_DAC_MspInit+0xe0>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b24      	ldr	r3, [pc, #144]	; (800309c <HAL_DAC_MspInit+0xe0>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003016:	2310      	movs	r3, #16
 8003018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800301a:	2303      	movs	r3, #3
 800301c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	f107 0314 	add.w	r3, r7, #20
 8003026:	4619      	mov	r1, r3
 8003028:	481d      	ldr	r0, [pc, #116]	; (80030a0 <HAL_DAC_MspInit+0xe4>)
 800302a:	f000 ff91 	bl	8003f50 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800302e:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 8003030:	4a1d      	ldr	r2, [pc, #116]	; (80030a8 <HAL_DAC_MspInit+0xec>)
 8003032:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 8003036:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800303a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800303c:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 800303e:	2240      	movs	r2, #64	; 0x40
 8003040:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 8003044:	2200      	movs	r2, #0
 8003046:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 800304a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800304e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 8003052:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003056:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 800305a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800305e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 8003062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003066:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003068:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 800306a:	2200      	movs	r2, #0
 800306c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800306e:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 8003070:	2200      	movs	r2, #0
 8003072:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003074:	480b      	ldr	r0, [pc, #44]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 8003076:	f000 fbf1 	bl	800385c <HAL_DMA_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8003080:	f7ff ff6c 	bl	8002f5c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	4a06      	ldr	r2, [pc, #24]	; (80030a4 <HAL_DAC_MspInit+0xe8>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003090:	bf00      	nop
 8003092:	3728      	adds	r7, #40	; 0x28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40007400 	.word	0x40007400
 800309c:	40023800 	.word	0x40023800
 80030a0:	40020000 	.word	0x40020000
 80030a4:	200028d8 	.word	0x200028d8
 80030a8:	40026088 	.word	0x40026088

080030ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030bc:	d10e      	bne.n	80030dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_TIM_Base_MspInit+0x98>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <HAL_TIM_Base_MspInit+0x98>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_TIM_Base_MspInit+0x98>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80030da:	e02e      	b.n	800313a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a19      	ldr	r2, [pc, #100]	; (8003148 <HAL_TIM_Base_MspInit+0x9c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d116      	bne.n	8003114 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_TIM_Base_MspInit+0x98>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4a15      	ldr	r2, [pc, #84]	; (8003144 <HAL_TIM_Base_MspInit+0x98>)
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	6413      	str	r3, [r2, #64]	; 0x40
 80030f6:	4b13      	ldr	r3, [pc, #76]	; (8003144 <HAL_TIM_Base_MspInit+0x98>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003102:	2200      	movs	r2, #0
 8003104:	2100      	movs	r1, #0
 8003106:	201d      	movs	r0, #29
 8003108:	f000 fab3 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800310c:	201d      	movs	r0, #29
 800310e:	f000 facc 	bl	80036aa <HAL_NVIC_EnableIRQ>
}
 8003112:	e012      	b.n	800313a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0c      	ldr	r2, [pc, #48]	; (800314c <HAL_TIM_Base_MspInit+0xa0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10d      	bne.n	800313a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_TIM_Base_MspInit+0x98>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	4a07      	ldr	r2, [pc, #28]	; (8003144 <HAL_TIM_Base_MspInit+0x98>)
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	6413      	str	r3, [r2, #64]	; 0x40
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_TIM_Base_MspInit+0x98>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
}
 800313a:	bf00      	nop
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800

08003150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <HAL_UART_MspInit+0x94>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d133      	bne.n	80031da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_UART_MspInit+0x98>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <HAL_UART_MspInit+0x98>)
 800317c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003180:	6413      	str	r3, [r2, #64]	; 0x40
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_UART_MspInit+0x98>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_UART_MspInit+0x98>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <HAL_UART_MspInit+0x98>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_UART_MspInit+0x98>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031aa:	230c      	movs	r3, #12
 80031ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	2302      	movs	r3, #2
 80031b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b6:	2303      	movs	r3, #3
 80031b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ba:	2307      	movs	r3, #7
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	f107 0314 	add.w	r3, r7, #20
 80031c2:	4619      	mov	r1, r3
 80031c4:	4809      	ldr	r0, [pc, #36]	; (80031ec <HAL_UART_MspInit+0x9c>)
 80031c6:	f000 fec3 	bl	8003f50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	2026      	movs	r0, #38	; 0x26
 80031d0:	f000 fa4f 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031d4:	2026      	movs	r0, #38	; 0x26
 80031d6:	f000 fa68 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031da:	bf00      	nop
 80031dc:	3728      	adds	r7, #40	; 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40004400 	.word	0x40004400
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020000 	.word	0x40020000

080031f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003202:	e7fe      	b.n	8003202 <HardFault_Handler+0x4>

08003204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003208:	e7fe      	b.n	8003208 <MemManage_Handler+0x4>

0800320a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800320e:	e7fe      	b.n	800320e <BusFault_Handler+0x4>

08003210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003214:	e7fe      	b.n	8003214 <UsageFault_Handler+0x4>

08003216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003228:	bf00      	nop
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003232:	b480      	push	{r7}
 8003234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003244:	f000 f8f8 	bl	8003438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}

0800324c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003250:	2001      	movs	r0, #1
 8003252:	f001 f829 	bl	80042a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003260:	4802      	ldr	r0, [pc, #8]	; (800326c <DMA1_Stream5_IRQHandler+0x10>)
 8003262:	f000 fc3b 	bl	8003adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200028d8 	.word	0x200028d8

08003270 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003274:	4802      	ldr	r0, [pc, #8]	; (8003280 <TIM3_IRQHandler+0x10>)
 8003276:	f001 fde1 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20002898 	.word	0x20002898

08003284 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003288:	4802      	ldr	r0, [pc, #8]	; (8003294 <USART2_IRQHandler+0x10>)
 800328a:	f002 fac5 	bl	8005818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20002b90 	.word	0x20002b90

08003298 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800329c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032a0:	f001 f802 	bl	80042a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <_sbrk+0x5c>)
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <_sbrk+0x60>)
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032bc:	4b13      	ldr	r3, [pc, #76]	; (800330c <_sbrk+0x64>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <_sbrk+0x64>)
 80032c6:	4a12      	ldr	r2, [pc, #72]	; (8003310 <_sbrk+0x68>)
 80032c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <_sbrk+0x64>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d207      	bcs.n	80032e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032d8:	f003 f89a 	bl	8006410 <__errno>
 80032dc:	4602      	mov	r2, r0
 80032de:	230c      	movs	r3, #12
 80032e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	e009      	b.n	80032fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <_sbrk+0x64>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <_sbrk+0x64>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	4a05      	ldr	r2, [pc, #20]	; (800330c <_sbrk+0x64>)
 80032f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032fa:	68fb      	ldr	r3, [r7, #12]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20020000 	.word	0x20020000
 8003308:	00000400 	.word	0x00000400
 800330c:	200000c8 	.word	0x200000c8
 8003310:	20002e18 	.word	0x20002e18

08003314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <SystemInit+0x28>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	4a07      	ldr	r2, [pc, #28]	; (800333c <SystemInit+0x28>)
 8003320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <SystemInit+0x28>)
 800332a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800332e:	609a      	str	r2, [r3, #8]
#endif
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003378 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003344:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003346:	e003      	b.n	8003350 <LoopCopyDataInit>

08003348 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800334a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800334c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800334e:	3104      	adds	r1, #4

08003350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003350:	480b      	ldr	r0, [pc, #44]	; (8003380 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003354:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003356:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003358:	d3f6      	bcc.n	8003348 <CopyDataInit>
  ldr  r2, =_sbss
 800335a:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800335c:	e002      	b.n	8003364 <LoopFillZerobss>

0800335e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800335e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003360:	f842 3b04 	str.w	r3, [r2], #4

08003364 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003366:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003368:	d3f9      	bcc.n	800335e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800336a:	f7ff ffd3 	bl	8003314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800336e:	f003 f855 	bl	800641c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003372:	f7ff faf3 	bl	800295c <main>
  bx  lr    
 8003376:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003378:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800337c:	08007374 	.word	0x08007374
  ldr  r0, =_sdata
 8003380:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003384:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8003388:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 800338c:	20002e18 	.word	0x20002e18

08003390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003390:	e7fe      	b.n	8003390 <ADC_IRQHandler>
	...

08003394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003398:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <HAL_Init+0x40>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <HAL_Init+0x40>)
 800339e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_Init+0x40>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <HAL_Init+0x40>)
 80033aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033b0:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <HAL_Init+0x40>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <HAL_Init+0x40>)
 80033b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033bc:	2003      	movs	r0, #3
 80033be:	f000 f94d 	bl	800365c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033c2:	2000      	movs	r0, #0
 80033c4:	f000 f808 	bl	80033d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033c8:	f7ff fdd0 	bl	8002f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40023c00 	.word	0x40023c00

080033d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033e0:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_InitTick+0x54>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b12      	ldr	r3, [pc, #72]	; (8003430 <HAL_InitTick+0x58>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	4619      	mov	r1, r3
 80033ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 f973 	bl	80036e2 <HAL_SYSTICK_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e00e      	b.n	8003424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b0f      	cmp	r3, #15
 800340a:	d80a      	bhi.n	8003422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800340c:	2200      	movs	r2, #0
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	f04f 30ff 	mov.w	r0, #4294967295
 8003414:	f000 f92d 	bl	8003672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003418:	4a06      	ldr	r2, [pc, #24]	; (8003434 <HAL_InitTick+0x5c>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	e000      	b.n	8003424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000014 	.word	0x20000014
 8003430:	2000001c 	.word	0x2000001c
 8003434:	20000018 	.word	0x20000018

08003438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_IncTick+0x20>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_IncTick+0x24>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4413      	add	r3, r2
 8003448:	4a04      	ldr	r2, [pc, #16]	; (800345c <HAL_IncTick+0x24>)
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	2000001c 	.word	0x2000001c
 800345c:	20002e10 	.word	0x20002e10

08003460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return uwTick;
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <HAL_GetTick+0x14>)
 8003466:	681b      	ldr	r3, [r3, #0]
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20002e10 	.word	0x20002e10

08003478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003494:	4013      	ands	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034aa:	4a04      	ldr	r2, [pc, #16]	; (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	60d3      	str	r3, [r2, #12]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <__NVIC_GetPriorityGrouping+0x18>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0a1b      	lsrs	r3, r3, #8
 80034ca:	f003 0307 	and.w	r3, r3, #7
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	db0b      	blt.n	8003506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	f003 021f 	and.w	r2, r3, #31
 80034f4:	4907      	ldr	r1, [pc, #28]	; (8003514 <__NVIC_EnableIRQ+0x38>)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	2001      	movs	r0, #1
 80034fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	e000e100 	.word	0xe000e100

08003518 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	2b00      	cmp	r3, #0
 8003528:	db10      	blt.n	800354c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	f003 021f 	and.w	r2, r3, #31
 8003530:	4909      	ldr	r1, [pc, #36]	; (8003558 <__NVIC_DisableIRQ+0x40>)
 8003532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2001      	movs	r0, #1
 800353a:	fa00 f202 	lsl.w	r2, r0, r2
 800353e:	3320      	adds	r3, #32
 8003540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003544:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003548:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000e100 	.word	0xe000e100

0800355c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356c:	2b00      	cmp	r3, #0
 800356e:	db0a      	blt.n	8003586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	490c      	ldr	r1, [pc, #48]	; (80035a8 <__NVIC_SetPriority+0x4c>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	0112      	lsls	r2, r2, #4
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	440b      	add	r3, r1
 8003580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003584:	e00a      	b.n	800359c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4908      	ldr	r1, [pc, #32]	; (80035ac <__NVIC_SetPriority+0x50>)
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	3b04      	subs	r3, #4
 8003594:	0112      	lsls	r2, r2, #4
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	440b      	add	r3, r1
 800359a:	761a      	strb	r2, [r3, #24]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000e100 	.word	0xe000e100
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f1c3 0307 	rsb	r3, r3, #7
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf28      	it	cs
 80035ce:	2304      	movcs	r3, #4
 80035d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d902      	bls.n	80035e0 <NVIC_EncodePriority+0x30>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3b03      	subs	r3, #3
 80035de:	e000      	b.n	80035e2 <NVIC_EncodePriority+0x32>
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	f04f 32ff 	mov.w	r2, #4294967295
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	401a      	ands	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f8:	f04f 31ff 	mov.w	r1, #4294967295
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	43d9      	mvns	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003608:	4313      	orrs	r3, r2
         );
}
 800360a:	4618      	mov	r0, r3
 800360c:	3724      	adds	r7, #36	; 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003628:	d301      	bcc.n	800362e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362a:	2301      	movs	r3, #1
 800362c:	e00f      	b.n	800364e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362e:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <SysTick_Config+0x40>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003636:	210f      	movs	r1, #15
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	f7ff ff8e 	bl	800355c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <SysTick_Config+0x40>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <SysTick_Config+0x40>)
 8003648:	2207      	movs	r2, #7
 800364a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e000e010 	.word	0xe000e010

0800365c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff07 	bl	8003478 <__NVIC_SetPriorityGrouping>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003684:	f7ff ff1c 	bl	80034c0 <__NVIC_GetPriorityGrouping>
 8003688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7ff ff8e 	bl	80035b0 <NVIC_EncodePriority>
 8003694:	4602      	mov	r2, r0
 8003696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff5d 	bl	800355c <__NVIC_SetPriority>
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff0f 	bl	80034dc <__NVIC_EnableIRQ>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80036d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff1f 	bl	8003518 <__NVIC_DisableIRQ>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ff94 	bl	8003618 <SysTick_Config>
 80036f0:	4603      	mov	r3, r0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e014      	b.n	8003736 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	791b      	ldrb	r3, [r3, #4]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d105      	bne.n	8003722 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff fc4d 	bl	8002fbc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6819      	ldr	r1, [r3, #0]
 8003752:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43da      	mvns	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	400a      	ands	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6819      	ldr	r1, [r3, #0]
 800376c:	2201      	movs	r2, #1
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43da      	mvns	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	400a      	ands	r2, r1
 800377c:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d107      	bne.n	8003794 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f915 	bl	80039b8 <HAL_DMA_Abort>
 800378e:	4603      	mov	r3, r0
 8003790:	73fb      	strb	r3, [r7, #15]
 8003792:	e006      	b.n	80037a2 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 f90d 	bl	80039b8 <HAL_DMA_Abort>
 800379e:	4603      	mov	r3, r0
 80037a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2204      	movs	r2, #4
 80037ac:	711a      	strb	r2, [r3, #4]
 80037ae:	e002      	b.n	80037b6 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	795b      	ldrb	r3, [r3, #5]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_DAC_ConfigChannel+0x20>
 80037dc:	2302      	movs	r3, #2
 80037de:	e036      	b.n	800384e <HAL_DAC_ConfigChannel+0x8e>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2202      	movs	r2, #2
 80037ea:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80037f4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4013      	ands	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	22c0      	movs	r2, #192	; 0xc0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43da      	mvns	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	400a      	ands	r2, r1
 800383e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003868:	f7ff fdfa 	bl	8003460 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e099      	b.n	80039ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003898:	e00f      	b.n	80038ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800389a:	f7ff fde1 	bl	8003460 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b05      	cmp	r3, #5
 80038a6:	d908      	bls.n	80038ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2203      	movs	r2, #3
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e078      	b.n	80039ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e8      	bne.n	800389a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4b38      	ldr	r3, [pc, #224]	; (80039b4 <HAL_DMA_Init+0x158>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b04      	cmp	r3, #4
 8003912:	d107      	bne.n	8003924 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	4313      	orrs	r3, r2
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f023 0307 	bic.w	r3, r3, #7
 800393a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2b04      	cmp	r3, #4
 800394c:	d117      	bne.n	800397e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00e      	beq.n	800397e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fa7b 	bl	8003e5c <DMA_CheckFifoParam>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800397a:	2301      	movs	r3, #1
 800397c:	e016      	b.n	80039ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fa32 	bl	8003df0 <DMA_CalcBaseAndBitshift>
 800398c:	4603      	mov	r3, r0
 800398e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	223f      	movs	r2, #63	; 0x3f
 8003996:	409a      	lsls	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	f010803f 	.word	0xf010803f

080039b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039c6:	f7ff fd4b 	bl	8003460 <HAL_GetTick>
 80039ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d008      	beq.n	80039ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e052      	b.n	8003a90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0216 	bic.w	r2, r2, #22
 80039f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <HAL_DMA_Abort+0x62>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0208 	bic.w	r2, r2, #8
 8003a28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a3a:	e013      	b.n	8003a64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a3c:	f7ff fd10 	bl	8003460 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d90c      	bls.n	8003a64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e015      	b.n	8003a90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e4      	bne.n	8003a3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a76:	223f      	movs	r2, #63	; 0x3f
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d004      	beq.n	8003ab6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2280      	movs	r2, #128	; 0x80
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e00c      	b.n	8003ad0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2205      	movs	r2, #5
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ae8:	4b92      	ldr	r3, [pc, #584]	; (8003d34 <HAL_DMA_IRQHandler+0x258>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a92      	ldr	r2, [pc, #584]	; (8003d38 <HAL_DMA_IRQHandler+0x25c>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0a9b      	lsrs	r3, r3, #10
 8003af4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	2208      	movs	r2, #8
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01a      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d013      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b34:	2208      	movs	r2, #8
 8003b36:	409a      	lsls	r2, r3
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	f043 0201 	orr.w	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f043 0202 	orr.w	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	2204      	movs	r2, #4
 8003b84:	409a      	lsls	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d012      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	2204      	movs	r2, #4
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	f043 0204 	orr.w	r2, r3, #4
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb8:	2210      	movs	r2, #16
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d043      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d03c      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d018      	beq.n	8003c1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d108      	bne.n	8003c0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d024      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4798      	blx	r3
 8003c0a:	e01f      	b.n	8003c4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01b      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
 8003c1c:	e016      	b.n	8003c4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0208 	bic.w	r2, r2, #8
 8003c3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	2220      	movs	r2, #32
 8003c52:	409a      	lsls	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 808e 	beq.w	8003d7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8086 	beq.w	8003d7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c72:	2220      	movs	r2, #32
 8003c74:	409a      	lsls	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d136      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0216 	bic.w	r2, r2, #22
 8003c94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <HAL_DMA_IRQHandler+0x1da>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0208 	bic.w	r2, r2, #8
 8003cc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	223f      	movs	r2, #63	; 0x3f
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d07d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
        }
        return;
 8003cf2:	e078      	b.n	8003de6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01c      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d108      	bne.n	8003d22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d030      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
 8003d20:	e02b      	b.n	8003d7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d027      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4798      	blx	r3
 8003d32:	e022      	b.n	8003d7a <HAL_DMA_IRQHandler+0x29e>
 8003d34:	20000014 	.word	0x20000014
 8003d38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10f      	bne.n	8003d6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0210 	bic.w	r2, r2, #16
 8003d58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d032      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d022      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2205      	movs	r2, #5
 8003d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0201 	bic.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	3301      	adds	r3, #1
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d307      	bcc.n	8003dc2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f2      	bne.n	8003da6 <HAL_DMA_IRQHandler+0x2ca>
 8003dc0:	e000      	b.n	8003dc4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dc2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
 8003de4:	e000      	b.n	8003de8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003de6:	bf00      	nop
    }
  }
}
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop

08003df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	3b10      	subs	r3, #16
 8003e00:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <DMA_CalcBaseAndBitshift+0x64>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e0a:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <DMA_CalcBaseAndBitshift+0x68>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d909      	bls.n	8003e32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	1d1a      	adds	r2, r3, #4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8003e30:	e007      	b.n	8003e42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	aaaaaaab 	.word	0xaaaaaaab
 8003e58:	08007328 	.word	0x08007328

08003e5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d11f      	bne.n	8003eb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d855      	bhi.n	8003f28 <DMA_CheckFifoParam+0xcc>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <DMA_CheckFifoParam+0x28>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003e95 	.word	0x08003e95
 8003e88:	08003ea7 	.word	0x08003ea7
 8003e8c:	08003e95 	.word	0x08003e95
 8003e90:	08003f29 	.word	0x08003f29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d045      	beq.n	8003f2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ea4:	e042      	b.n	8003f2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eae:	d13f      	bne.n	8003f30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb4:	e03c      	b.n	8003f30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebe:	d121      	bne.n	8003f04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d836      	bhi.n	8003f34 <DMA_CheckFifoParam+0xd8>
 8003ec6:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <DMA_CheckFifoParam+0x70>)
 8003ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ecc:	08003edd 	.word	0x08003edd
 8003ed0:	08003ee3 	.word	0x08003ee3
 8003ed4:	08003edd 	.word	0x08003edd
 8003ed8:	08003ef5 	.word	0x08003ef5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee0:	e02f      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d024      	beq.n	8003f38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef2:	e021      	b.n	8003f38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003efc:	d11e      	bne.n	8003f3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f02:	e01b      	b.n	8003f3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d902      	bls.n	8003f10 <DMA_CheckFifoParam+0xb4>
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d003      	beq.n	8003f16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f0e:	e018      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
      break;
 8003f14:	e015      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00e      	beq.n	8003f40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
      break;
 8003f26:	e00b      	b.n	8003f40 <DMA_CheckFifoParam+0xe4>
      break;
 8003f28:	bf00      	nop
 8003f2a:	e00a      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;
 8003f2c:	bf00      	nop
 8003f2e:	e008      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;
 8003f30:	bf00      	nop
 8003f32:	e006      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;
 8003f34:	bf00      	nop
 8003f36:	e004      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;
 8003f38:	bf00      	nop
 8003f3a:	e002      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;   
 8003f3c:	bf00      	nop
 8003f3e:	e000      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;
 8003f40:	bf00      	nop
    }
  } 
  
  return status; 
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	e165      	b.n	8004238 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	f040 8154 	bne.w	8004232 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d00b      	beq.n	8003faa <HAL_GPIO_Init+0x5a>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d007      	beq.n	8003faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f9e:	2b11      	cmp	r3, #17
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b12      	cmp	r3, #18
 8003fa8:	d130      	bne.n	800400c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 0201 	and.w	r2, r3, #1
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	2203      	movs	r2, #3
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0xfc>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b12      	cmp	r3, #18
 800404a:	d123      	bne.n	8004094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	08da      	lsrs	r2, r3, #3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3208      	adds	r2, #8
 8004054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	220f      	movs	r2, #15
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	08da      	lsrs	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3208      	adds	r2, #8
 800408e:	69b9      	ldr	r1, [r7, #24]
 8004090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	2203      	movs	r2, #3
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0203 	and.w	r2, r3, #3
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80ae 	beq.w	8004232 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	4b5c      	ldr	r3, [pc, #368]	; (800424c <HAL_GPIO_Init+0x2fc>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	4a5b      	ldr	r2, [pc, #364]	; (800424c <HAL_GPIO_Init+0x2fc>)
 80040e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e4:	6453      	str	r3, [r2, #68]	; 0x44
 80040e6:	4b59      	ldr	r3, [pc, #356]	; (800424c <HAL_GPIO_Init+0x2fc>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040f2:	4a57      	ldr	r2, [pc, #348]	; (8004250 <HAL_GPIO_Init+0x300>)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	3302      	adds	r3, #2
 80040fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	220f      	movs	r2, #15
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4e      	ldr	r2, [pc, #312]	; (8004254 <HAL_GPIO_Init+0x304>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d025      	beq.n	800416a <HAL_GPIO_Init+0x21a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4d      	ldr	r2, [pc, #308]	; (8004258 <HAL_GPIO_Init+0x308>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01f      	beq.n	8004166 <HAL_GPIO_Init+0x216>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a4c      	ldr	r2, [pc, #304]	; (800425c <HAL_GPIO_Init+0x30c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d019      	beq.n	8004162 <HAL_GPIO_Init+0x212>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4b      	ldr	r2, [pc, #300]	; (8004260 <HAL_GPIO_Init+0x310>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_GPIO_Init+0x20e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a4a      	ldr	r2, [pc, #296]	; (8004264 <HAL_GPIO_Init+0x314>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00d      	beq.n	800415a <HAL_GPIO_Init+0x20a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a49      	ldr	r2, [pc, #292]	; (8004268 <HAL_GPIO_Init+0x318>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <HAL_GPIO_Init+0x206>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a48      	ldr	r2, [pc, #288]	; (800426c <HAL_GPIO_Init+0x31c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_GPIO_Init+0x202>
 800414e:	2306      	movs	r3, #6
 8004150:	e00c      	b.n	800416c <HAL_GPIO_Init+0x21c>
 8004152:	2307      	movs	r3, #7
 8004154:	e00a      	b.n	800416c <HAL_GPIO_Init+0x21c>
 8004156:	2305      	movs	r3, #5
 8004158:	e008      	b.n	800416c <HAL_GPIO_Init+0x21c>
 800415a:	2304      	movs	r3, #4
 800415c:	e006      	b.n	800416c <HAL_GPIO_Init+0x21c>
 800415e:	2303      	movs	r3, #3
 8004160:	e004      	b.n	800416c <HAL_GPIO_Init+0x21c>
 8004162:	2302      	movs	r3, #2
 8004164:	e002      	b.n	800416c <HAL_GPIO_Init+0x21c>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <HAL_GPIO_Init+0x21c>
 800416a:	2300      	movs	r3, #0
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	f002 0203 	and.w	r2, r2, #3
 8004172:	0092      	lsls	r2, r2, #2
 8004174:	4093      	lsls	r3, r2
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800417c:	4934      	ldr	r1, [pc, #208]	; (8004250 <HAL_GPIO_Init+0x300>)
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	3302      	adds	r3, #2
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800418a:	4b39      	ldr	r3, [pc, #228]	; (8004270 <HAL_GPIO_Init+0x320>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	43db      	mvns	r3, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041ae:	4a30      	ldr	r2, [pc, #192]	; (8004270 <HAL_GPIO_Init+0x320>)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041b4:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <HAL_GPIO_Init+0x320>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041d8:	4a25      	ldr	r2, [pc, #148]	; (8004270 <HAL_GPIO_Init+0x320>)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041de:	4b24      	ldr	r3, [pc, #144]	; (8004270 <HAL_GPIO_Init+0x320>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4013      	ands	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004202:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_GPIO_Init+0x320>)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004208:	4b19      	ldr	r3, [pc, #100]	; (8004270 <HAL_GPIO_Init+0x320>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800422c:	4a10      	ldr	r2, [pc, #64]	; (8004270 <HAL_GPIO_Init+0x320>)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3301      	adds	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	2b0f      	cmp	r3, #15
 800423c:	f67f ae96 	bls.w	8003f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004240:	bf00      	nop
 8004242:	3724      	adds	r7, #36	; 0x24
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40023800 	.word	0x40023800
 8004250:	40013800 	.word	0x40013800
 8004254:	40020000 	.word	0x40020000
 8004258:	40020400 	.word	0x40020400
 800425c:	40020800 	.word	0x40020800
 8004260:	40020c00 	.word	0x40020c00
 8004264:	40021000 	.word	0x40021000
 8004268:	40021400 	.word	0x40021400
 800426c:	40021800 	.word	0x40021800
 8004270:	40013c00 	.word	0x40013c00

08004274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	807b      	strh	r3, [r7, #2]
 8004280:	4613      	mov	r3, r2
 8004282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004284:	787b      	ldrb	r3, [r7, #1]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800428a:	887a      	ldrh	r2, [r7, #2]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004290:	e003      	b.n	800429a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004292:	887b      	ldrh	r3, [r7, #2]
 8004294:	041a      	lsls	r2, r3, #16
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	619a      	str	r2, [r3, #24]
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	88fb      	ldrh	r3, [r7, #6]
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d006      	beq.n	80042cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042be:	4a05      	ldr	r2, [pc, #20]	; (80042d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042c0:	88fb      	ldrh	r3, [r7, #6]
 80042c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042c4:	88fb      	ldrh	r3, [r7, #6]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fdf4 	bl	8002eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40013c00 	.word	0x40013c00

080042d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0cc      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ec:	4b68      	ldr	r3, [pc, #416]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d90c      	bls.n	8004314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b65      	ldr	r3, [pc, #404]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b63      	ldr	r3, [pc, #396]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0b8      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d020      	beq.n	8004362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800432c:	4b59      	ldr	r3, [pc, #356]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a58      	ldr	r2, [pc, #352]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004344:	4b53      	ldr	r3, [pc, #332]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a52      	ldr	r2, [pc, #328]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800434e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004350:	4b50      	ldr	r3, [pc, #320]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	494d      	ldr	r1, [pc, #308]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d044      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d107      	bne.n	8004386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d119      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e07f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d003      	beq.n	8004396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004392:	2b03      	cmp	r3, #3
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004396:	4b3f      	ldr	r3, [pc, #252]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e06f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a6:	4b3b      	ldr	r3, [pc, #236]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e067      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b6:	4b37      	ldr	r3, [pc, #220]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 0203 	bic.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4934      	ldr	r1, [pc, #208]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c8:	f7ff f84a 	bl	8003460 <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d0:	f7ff f846 	bl	8003460 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e04f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 020c 	and.w	r2, r3, #12
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d1eb      	bne.n	80043d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d20c      	bcs.n	8004420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b22      	ldr	r3, [pc, #136]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e032      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4916      	ldr	r1, [pc, #88]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	490e      	ldr	r1, [pc, #56]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800445e:	f000 f855 	bl	800450c <HAL_RCC_GetSysClockFreq>
 8004462:	4601      	mov	r1, r0
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	5cd3      	ldrb	r3, [r2, r3]
 8004472:	fa21 f303 	lsr.w	r3, r1, r3
 8004476:	4a09      	ldr	r2, [pc, #36]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_RCC_ClockConfig+0x1c8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe ffaa 	bl	80033d8 <HAL_InitTick>

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40023c00 	.word	0x40023c00
 8004494:	40023800 	.word	0x40023800
 8004498:	08007310 	.word	0x08007310
 800449c:	20000014 	.word	0x20000014
 80044a0:	20000018 	.word	0x20000018

080044a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000014 	.word	0x20000014

080044bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044c0:	f7ff fff0 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044c4:	4601      	mov	r1, r0
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	0a9b      	lsrs	r3, r3, #10
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	4a03      	ldr	r2, [pc, #12]	; (80044e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d2:	5cd3      	ldrb	r3, [r2, r3]
 80044d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40023800 	.word	0x40023800
 80044e0:	08007320 	.word	0x08007320

080044e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044e8:	f7ff ffdc 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044ec:	4601      	mov	r1, r0
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	0b5b      	lsrs	r3, r3, #13
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	4a03      	ldr	r2, [pc, #12]	; (8004508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fa:	5cd3      	ldrb	r3, [r2, r3]
 80044fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40023800 	.word	0x40023800
 8004508:	08007320 	.word	0x08007320

0800450c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004526:	4bc6      	ldr	r3, [pc, #792]	; (8004840 <HAL_RCC_GetSysClockFreq+0x334>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	2b0c      	cmp	r3, #12
 8004530:	f200 817e 	bhi.w	8004830 <HAL_RCC_GetSysClockFreq+0x324>
 8004534:	a201      	add	r2, pc, #4	; (adr r2, 800453c <HAL_RCC_GetSysClockFreq+0x30>)
 8004536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453a:	bf00      	nop
 800453c:	08004571 	.word	0x08004571
 8004540:	08004831 	.word	0x08004831
 8004544:	08004831 	.word	0x08004831
 8004548:	08004831 	.word	0x08004831
 800454c:	08004577 	.word	0x08004577
 8004550:	08004831 	.word	0x08004831
 8004554:	08004831 	.word	0x08004831
 8004558:	08004831 	.word	0x08004831
 800455c:	0800457d 	.word	0x0800457d
 8004560:	08004831 	.word	0x08004831
 8004564:	08004831 	.word	0x08004831
 8004568:	08004831 	.word	0x08004831
 800456c:	080046d9 	.word	0x080046d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004570:	4bb4      	ldr	r3, [pc, #720]	; (8004844 <HAL_RCC_GetSysClockFreq+0x338>)
 8004572:	613b      	str	r3, [r7, #16]
       break;
 8004574:	e15f      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004576:	4bb4      	ldr	r3, [pc, #720]	; (8004848 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004578:	613b      	str	r3, [r7, #16]
      break;
 800457a:	e15c      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800457c:	4bb0      	ldr	r3, [pc, #704]	; (8004840 <HAL_RCC_GetSysClockFreq+0x334>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004584:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004586:	4bae      	ldr	r3, [pc, #696]	; (8004840 <HAL_RCC_GetSysClockFreq+0x334>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d04a      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004592:	4bab      	ldr	r3, [pc, #684]	; (8004840 <HAL_RCC_GetSysClockFreq+0x334>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	099b      	lsrs	r3, r3, #6
 8004598:	f04f 0400 	mov.w	r4, #0
 800459c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	ea03 0501 	and.w	r5, r3, r1
 80045a8:	ea04 0602 	and.w	r6, r4, r2
 80045ac:	4629      	mov	r1, r5
 80045ae:	4632      	mov	r2, r6
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	f04f 0400 	mov.w	r4, #0
 80045b8:	0154      	lsls	r4, r2, #5
 80045ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045be:	014b      	lsls	r3, r1, #5
 80045c0:	4619      	mov	r1, r3
 80045c2:	4622      	mov	r2, r4
 80045c4:	1b49      	subs	r1, r1, r5
 80045c6:	eb62 0206 	sbc.w	r2, r2, r6
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	f04f 0400 	mov.w	r4, #0
 80045d2:	0194      	lsls	r4, r2, #6
 80045d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045d8:	018b      	lsls	r3, r1, #6
 80045da:	1a5b      	subs	r3, r3, r1
 80045dc:	eb64 0402 	sbc.w	r4, r4, r2
 80045e0:	f04f 0100 	mov.w	r1, #0
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	00e2      	lsls	r2, r4, #3
 80045ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045ee:	00d9      	lsls	r1, r3, #3
 80045f0:	460b      	mov	r3, r1
 80045f2:	4614      	mov	r4, r2
 80045f4:	195b      	adds	r3, r3, r5
 80045f6:	eb44 0406 	adc.w	r4, r4, r6
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	0262      	lsls	r2, r4, #9
 8004604:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004608:	0259      	lsls	r1, r3, #9
 800460a:	460b      	mov	r3, r1
 800460c:	4614      	mov	r4, r2
 800460e:	4618      	mov	r0, r3
 8004610:	4621      	mov	r1, r4
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f04f 0400 	mov.w	r4, #0
 8004618:	461a      	mov	r2, r3
 800461a:	4623      	mov	r3, r4
 800461c:	f7fb fe50 	bl	80002c0 <__aeabi_uldivmod>
 8004620:	4603      	mov	r3, r0
 8004622:	460c      	mov	r4, r1
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	e049      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004628:	4b85      	ldr	r3, [pc, #532]	; (8004840 <HAL_RCC_GetSysClockFreq+0x334>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	099b      	lsrs	r3, r3, #6
 800462e:	f04f 0400 	mov.w	r4, #0
 8004632:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	ea03 0501 	and.w	r5, r3, r1
 800463e:	ea04 0602 	and.w	r6, r4, r2
 8004642:	4629      	mov	r1, r5
 8004644:	4632      	mov	r2, r6
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	f04f 0400 	mov.w	r4, #0
 800464e:	0154      	lsls	r4, r2, #5
 8004650:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004654:	014b      	lsls	r3, r1, #5
 8004656:	4619      	mov	r1, r3
 8004658:	4622      	mov	r2, r4
 800465a:	1b49      	subs	r1, r1, r5
 800465c:	eb62 0206 	sbc.w	r2, r2, r6
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	f04f 0400 	mov.w	r4, #0
 8004668:	0194      	lsls	r4, r2, #6
 800466a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800466e:	018b      	lsls	r3, r1, #6
 8004670:	1a5b      	subs	r3, r3, r1
 8004672:	eb64 0402 	sbc.w	r4, r4, r2
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	00e2      	lsls	r2, r4, #3
 8004680:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004684:	00d9      	lsls	r1, r3, #3
 8004686:	460b      	mov	r3, r1
 8004688:	4614      	mov	r4, r2
 800468a:	195b      	adds	r3, r3, r5
 800468c:	eb44 0406 	adc.w	r4, r4, r6
 8004690:	f04f 0100 	mov.w	r1, #0
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	02a2      	lsls	r2, r4, #10
 800469a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800469e:	0299      	lsls	r1, r3, #10
 80046a0:	460b      	mov	r3, r1
 80046a2:	4614      	mov	r4, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	4621      	mov	r1, r4
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f04f 0400 	mov.w	r4, #0
 80046ae:	461a      	mov	r2, r3
 80046b0:	4623      	mov	r3, r4
 80046b2:	f7fb fe05 	bl	80002c0 <__aeabi_uldivmod>
 80046b6:	4603      	mov	r3, r0
 80046b8:	460c      	mov	r4, r1
 80046ba:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046bc:	4b60      	ldr	r3, [pc, #384]	; (8004840 <HAL_RCC_GetSysClockFreq+0x334>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	3301      	adds	r3, #1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	613b      	str	r3, [r7, #16]
      break;
 80046d6:	e0ae      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046d8:	4b59      	ldr	r3, [pc, #356]	; (8004840 <HAL_RCC_GetSysClockFreq+0x334>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046e0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046e2:	4b57      	ldr	r3, [pc, #348]	; (8004840 <HAL_RCC_GetSysClockFreq+0x334>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d04a      	beq.n	8004784 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ee:	4b54      	ldr	r3, [pc, #336]	; (8004840 <HAL_RCC_GetSysClockFreq+0x334>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	099b      	lsrs	r3, r3, #6
 80046f4:	f04f 0400 	mov.w	r4, #0
 80046f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	ea03 0501 	and.w	r5, r3, r1
 8004704:	ea04 0602 	and.w	r6, r4, r2
 8004708:	4629      	mov	r1, r5
 800470a:	4632      	mov	r2, r6
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	f04f 0400 	mov.w	r4, #0
 8004714:	0154      	lsls	r4, r2, #5
 8004716:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800471a:	014b      	lsls	r3, r1, #5
 800471c:	4619      	mov	r1, r3
 800471e:	4622      	mov	r2, r4
 8004720:	1b49      	subs	r1, r1, r5
 8004722:	eb62 0206 	sbc.w	r2, r2, r6
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	f04f 0400 	mov.w	r4, #0
 800472e:	0194      	lsls	r4, r2, #6
 8004730:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004734:	018b      	lsls	r3, r1, #6
 8004736:	1a5b      	subs	r3, r3, r1
 8004738:	eb64 0402 	sbc.w	r4, r4, r2
 800473c:	f04f 0100 	mov.w	r1, #0
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	00e2      	lsls	r2, r4, #3
 8004746:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800474a:	00d9      	lsls	r1, r3, #3
 800474c:	460b      	mov	r3, r1
 800474e:	4614      	mov	r4, r2
 8004750:	195b      	adds	r3, r3, r5
 8004752:	eb44 0406 	adc.w	r4, r4, r6
 8004756:	f04f 0100 	mov.w	r1, #0
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	0262      	lsls	r2, r4, #9
 8004760:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004764:	0259      	lsls	r1, r3, #9
 8004766:	460b      	mov	r3, r1
 8004768:	4614      	mov	r4, r2
 800476a:	4618      	mov	r0, r3
 800476c:	4621      	mov	r1, r4
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f04f 0400 	mov.w	r4, #0
 8004774:	461a      	mov	r2, r3
 8004776:	4623      	mov	r3, r4
 8004778:	f7fb fda2 	bl	80002c0 <__aeabi_uldivmod>
 800477c:	4603      	mov	r3, r0
 800477e:	460c      	mov	r4, r1
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e049      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004784:	4b2e      	ldr	r3, [pc, #184]	; (8004840 <HAL_RCC_GetSysClockFreq+0x334>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	f04f 0400 	mov.w	r4, #0
 800478e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	ea03 0501 	and.w	r5, r3, r1
 800479a:	ea04 0602 	and.w	r6, r4, r2
 800479e:	4629      	mov	r1, r5
 80047a0:	4632      	mov	r2, r6
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	f04f 0400 	mov.w	r4, #0
 80047aa:	0154      	lsls	r4, r2, #5
 80047ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047b0:	014b      	lsls	r3, r1, #5
 80047b2:	4619      	mov	r1, r3
 80047b4:	4622      	mov	r2, r4
 80047b6:	1b49      	subs	r1, r1, r5
 80047b8:	eb62 0206 	sbc.w	r2, r2, r6
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	f04f 0400 	mov.w	r4, #0
 80047c4:	0194      	lsls	r4, r2, #6
 80047c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047ca:	018b      	lsls	r3, r1, #6
 80047cc:	1a5b      	subs	r3, r3, r1
 80047ce:	eb64 0402 	sbc.w	r4, r4, r2
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	00e2      	lsls	r2, r4, #3
 80047dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047e0:	00d9      	lsls	r1, r3, #3
 80047e2:	460b      	mov	r3, r1
 80047e4:	4614      	mov	r4, r2
 80047e6:	195b      	adds	r3, r3, r5
 80047e8:	eb44 0406 	adc.w	r4, r4, r6
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	02a2      	lsls	r2, r4, #10
 80047f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80047fa:	0299      	lsls	r1, r3, #10
 80047fc:	460b      	mov	r3, r1
 80047fe:	4614      	mov	r4, r2
 8004800:	4618      	mov	r0, r3
 8004802:	4621      	mov	r1, r4
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f04f 0400 	mov.w	r4, #0
 800480a:	461a      	mov	r2, r3
 800480c:	4623      	mov	r3, r4
 800480e:	f7fb fd57 	bl	80002c0 <__aeabi_uldivmod>
 8004812:	4603      	mov	r3, r0
 8004814:	460c      	mov	r4, r1
 8004816:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_RCC_GetSysClockFreq+0x334>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	0f1b      	lsrs	r3, r3, #28
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	613b      	str	r3, [r7, #16]
      break;
 800482e:	e002      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <HAL_RCC_GetSysClockFreq+0x338>)
 8004832:	613b      	str	r3, [r7, #16]
      break;
 8004834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004836:	693b      	ldr	r3, [r7, #16]
}
 8004838:	4618      	mov	r0, r3
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004840:	40023800 	.word	0x40023800
 8004844:	00f42400 	.word	0x00f42400
 8004848:	007a1200 	.word	0x007a1200

0800484c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8083 	beq.w	800496c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004866:	4b95      	ldr	r3, [pc, #596]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b04      	cmp	r3, #4
 8004870:	d019      	beq.n	80048a6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004872:	4b92      	ldr	r3, [pc, #584]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800487a:	2b08      	cmp	r3, #8
 800487c:	d106      	bne.n	800488c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800487e:	4b8f      	ldr	r3, [pc, #572]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488a:	d00c      	beq.n	80048a6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800488c:	4b8b      	ldr	r3, [pc, #556]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d112      	bne.n	80048be <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004898:	4b88      	ldr	r3, [pc, #544]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a4:	d10b      	bne.n	80048be <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a6:	4b85      	ldr	r3, [pc, #532]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d05b      	beq.n	800496a <HAL_RCC_OscConfig+0x11e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d157      	bne.n	800496a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e216      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c6:	d106      	bne.n	80048d6 <HAL_RCC_OscConfig+0x8a>
 80048c8:	4b7c      	ldr	r3, [pc, #496]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a7b      	ldr	r2, [pc, #492]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80048ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	e01d      	b.n	8004912 <HAL_RCC_OscConfig+0xc6>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048de:	d10c      	bne.n	80048fa <HAL_RCC_OscConfig+0xae>
 80048e0:	4b76      	ldr	r3, [pc, #472]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a75      	ldr	r2, [pc, #468]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80048e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4b73      	ldr	r3, [pc, #460]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a72      	ldr	r2, [pc, #456]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80048f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	e00b      	b.n	8004912 <HAL_RCC_OscConfig+0xc6>
 80048fa:	4b70      	ldr	r3, [pc, #448]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a6f      	ldr	r2, [pc, #444]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b6d      	ldr	r3, [pc, #436]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a6c      	ldr	r2, [pc, #432]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 800490c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004910:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d013      	beq.n	8004942 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fe fda1 	bl	8003460 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004922:	f7fe fd9d 	bl	8003460 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b64      	cmp	r3, #100	; 0x64
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e1db      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004934:	4b61      	ldr	r3, [pc, #388]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0xd6>
 8004940:	e014      	b.n	800496c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004942:	f7fe fd8d 	bl	8003460 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800494a:	f7fe fd89 	bl	8003460 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b64      	cmp	r3, #100	; 0x64
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e1c7      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495c:	4b57      	ldr	r3, [pc, #348]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <HAL_RCC_OscConfig+0xfe>
 8004968:	e000      	b.n	800496c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d06f      	beq.n	8004a58 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004978:	4b50      	ldr	r3, [pc, #320]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 030c 	and.w	r3, r3, #12
 8004980:	2b00      	cmp	r3, #0
 8004982:	d017      	beq.n	80049b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004984:	4b4d      	ldr	r3, [pc, #308]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800498c:	2b08      	cmp	r3, #8
 800498e:	d105      	bne.n	800499c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004990:	4b4a      	ldr	r3, [pc, #296]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800499c:	4b47      	ldr	r3, [pc, #284]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	d11c      	bne.n	80049e2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049a8:	4b44      	ldr	r3, [pc, #272]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d116      	bne.n	80049e2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b4:	4b41      	ldr	r3, [pc, #260]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_OscConfig+0x180>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e18f      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049cc:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4938      	ldr	r1, [pc, #224]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e0:	e03a      	b.n	8004a58 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d020      	beq.n	8004a2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ea:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fe fd36 	bl	8003460 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f8:	f7fe fd32 	bl	8003460 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e170      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0a:	4b2c      	ldr	r3, [pc, #176]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a16:	4b29      	ldr	r3, [pc, #164]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	4925      	ldr	r1, [pc, #148]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	600b      	str	r3, [r1, #0]
 8004a2a:	e015      	b.n	8004a58 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a2c:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fe fd15 	bl	8003460 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a3a:	f7fe fd11 	bl	8003460 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e14f      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f0      	bne.n	8004a3a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d037      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d016      	beq.n	8004a9a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6c:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <HAL_RCC_OscConfig+0x278>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a72:	f7fe fcf5 	bl	8003460 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a7a:	f7fe fcf1 	bl	8003460 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e12f      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x22e>
 8004a98:	e01c      	b.n	8004ad4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <HAL_RCC_OscConfig+0x278>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa0:	f7fe fcde 	bl	8003460 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa6:	e00f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aa8:	f7fe fcda 	bl	8003460 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d908      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e118      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	42470000 	.word	0x42470000
 8004ac4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	4b8a      	ldr	r3, [pc, #552]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e9      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8097 	beq.w	8004c10 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae6:	4b83      	ldr	r3, [pc, #524]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10f      	bne.n	8004b12 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	4a7e      	ldr	r2, [pc, #504]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b00:	6413      	str	r3, [r2, #64]	; 0x40
 8004b02:	4b7c      	ldr	r3, [pc, #496]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b12:	4b79      	ldr	r3, [pc, #484]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d118      	bne.n	8004b50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b1e:	4b76      	ldr	r3, [pc, #472]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a75      	ldr	r2, [pc, #468]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2a:	f7fe fc99 	bl	8003460 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b32:	f7fe fc95 	bl	8003460 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0d3      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	4b6c      	ldr	r3, [pc, #432]	; (8004cf8 <HAL_RCC_OscConfig+0x4ac>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d106      	bne.n	8004b66 <HAL_RCC_OscConfig+0x31a>
 8004b58:	4b66      	ldr	r3, [pc, #408]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	4a65      	ldr	r2, [pc, #404]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	6713      	str	r3, [r2, #112]	; 0x70
 8004b64:	e01c      	b.n	8004ba0 <HAL_RCC_OscConfig+0x354>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b05      	cmp	r3, #5
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x33c>
 8004b6e:	4b61      	ldr	r3, [pc, #388]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	4a60      	ldr	r2, [pc, #384]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004b74:	f043 0304 	orr.w	r3, r3, #4
 8004b78:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7a:	4b5e      	ldr	r3, [pc, #376]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	4a5d      	ldr	r2, [pc, #372]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6713      	str	r3, [r2, #112]	; 0x70
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x354>
 8004b88:	4b5a      	ldr	r3, [pc, #360]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	4a59      	ldr	r2, [pc, #356]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	6713      	str	r3, [r2, #112]	; 0x70
 8004b94:	4b57      	ldr	r3, [pc, #348]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b98:	4a56      	ldr	r2, [pc, #344]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004b9a:	f023 0304 	bic.w	r3, r3, #4
 8004b9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba8:	f7fe fc5a 	bl	8003460 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb0:	f7fe fc56 	bl	8003460 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e092      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc6:	4b4b      	ldr	r3, [pc, #300]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0ee      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x364>
 8004bd2:	e014      	b.n	8004bfe <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fe fc44 	bl	8003460 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fe fc40 	bl	8003460 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e07c      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf2:	4b40      	ldr	r3, [pc, #256]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1ee      	bne.n	8004bdc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d105      	bne.n	8004c10 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c04:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	4a3a      	ldr	r2, [pc, #232]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d068      	beq.n	8004cea <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c18:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d060      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d145      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2c:	4b33      	ldr	r3, [pc, #204]	; (8004cfc <HAL_RCC_OscConfig+0x4b0>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c32:	f7fe fc15 	bl	8003460 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3a:	f7fe fc11 	bl	8003460 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e04f      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4c:	4b29      	ldr	r3, [pc, #164]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f0      	bne.n	8004c3a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	019b      	lsls	r3, r3, #6
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	085b      	lsrs	r3, r3, #1
 8004c70:	3b01      	subs	r3, #1
 8004c72:	041b      	lsls	r3, r3, #16
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	061b      	lsls	r3, r3, #24
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	071b      	lsls	r3, r3, #28
 8004c84:	491b      	ldr	r1, [pc, #108]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c8a:	4b1c      	ldr	r3, [pc, #112]	; (8004cfc <HAL_RCC_OscConfig+0x4b0>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fe fbe6 	bl	8003460 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c98:	f7fe fbe2 	bl	8003460 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e020      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0x44c>
 8004cb6:	e018      	b.n	8004cea <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb8:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <HAL_RCC_OscConfig+0x4b0>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbe:	f7fe fbcf 	bl	8003460 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc6:	f7fe fbcb 	bl	8003460 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e009      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd8:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <HAL_RCC_OscConfig+0x4a8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f0      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x47a>
 8004ce4:	e001      	b.n	8004cea <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e000      	b.n	8004cec <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40007000 	.word	0x40007000
 8004cfc:	42470060 	.word	0x42470060

08004d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e01d      	b.n	8004d4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fe f9c0 	bl	80030ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f000 fa64 	bl	800520c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b06      	cmp	r3, #6
 8004d76:	d007      	beq.n	8004d88 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2202      	movs	r2, #2
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a1a      	ldr	r2, [r3, #32]
 8004db4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10f      	bne.n	8004dde <HAL_TIM_Base_Stop+0x40>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	f240 4344 	movw	r3, #1092	; 0x444
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d107      	bne.n	8004dde <HAL_TIM_Base_Stop+0x40>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b06      	cmp	r3, #6
 8004e1c:	d007      	beq.n	8004e2e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0202 	mvn.w	r2, #2
 8004e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f9a5 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f997 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f9a8 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0204 	mvn.w	r2, #4
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f97b 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f96d 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f97e 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d122      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d11b      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0208 	mvn.w	r2, #8
 8004f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2204      	movs	r2, #4
 8004f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f951 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f943 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f954 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d122      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d11b      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0210 	mvn.w	r2, #16
 8004f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f927 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004f80:	e005      	b.n	8004f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f919 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f92a 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0201 	mvn.w	r2, #1
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fd ff68 	bl	8002e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b80      	cmp	r3, #128	; 0x80
 8004fcc:	d10e      	bne.n	8004fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	d107      	bne.n	8004fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fad0 	bl	800558c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d10e      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d107      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8ef 	bl	80051f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b20      	cmp	r3, #32
 8005024:	d10e      	bne.n	8005044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b20      	cmp	r3, #32
 8005032:	d107      	bne.n	8005044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0220 	mvn.w	r2, #32
 800503c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fa9a 	bl	8005578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_TIM_ConfigClockSource+0x18>
 8005060:	2302      	movs	r3, #2
 8005062:	e0a6      	b.n	80051b2 <HAL_TIM_ConfigClockSource+0x166>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005082:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800508a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d067      	beq.n	800516c <HAL_TIM_ConfigClockSource+0x120>
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d80b      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x6c>
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d073      	beq.n	800518c <HAL_TIM_ConfigClockSource+0x140>
 80050a4:	2b10      	cmp	r3, #16
 80050a6:	d802      	bhi.n	80050ae <HAL_TIM_ConfigClockSource+0x62>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d06f      	beq.n	800518c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80050ac:	e078      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d06c      	beq.n	800518c <HAL_TIM_ConfigClockSource+0x140>
 80050b2:	2b30      	cmp	r3, #48	; 0x30
 80050b4:	d06a      	beq.n	800518c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80050b6:	e073      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050b8:	2b70      	cmp	r3, #112	; 0x70
 80050ba:	d00d      	beq.n	80050d8 <HAL_TIM_ConfigClockSource+0x8c>
 80050bc:	2b70      	cmp	r3, #112	; 0x70
 80050be:	d804      	bhi.n	80050ca <HAL_TIM_ConfigClockSource+0x7e>
 80050c0:	2b50      	cmp	r3, #80	; 0x50
 80050c2:	d033      	beq.n	800512c <HAL_TIM_ConfigClockSource+0xe0>
 80050c4:	2b60      	cmp	r3, #96	; 0x60
 80050c6:	d041      	beq.n	800514c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80050c8:	e06a      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ce:	d066      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x152>
 80050d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d4:	d017      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80050d6:	e063      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	6899      	ldr	r1, [r3, #8]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f000 f9aa 	bl	8005440 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	609a      	str	r2, [r3, #8]
      break;
 8005104:	e04c      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6899      	ldr	r1, [r3, #8]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f000 f993 	bl	8005440 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005128:	609a      	str	r2, [r3, #8]
      break;
 800512a:	e039      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	6859      	ldr	r1, [r3, #4]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	461a      	mov	r2, r3
 800513a:	f000 f907 	bl	800534c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2150      	movs	r1, #80	; 0x50
 8005144:	4618      	mov	r0, r3
 8005146:	f000 f960 	bl	800540a <TIM_ITRx_SetConfig>
      break;
 800514a:	e029      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6859      	ldr	r1, [r3, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	461a      	mov	r2, r3
 800515a:	f000 f926 	bl	80053aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2160      	movs	r1, #96	; 0x60
 8005164:	4618      	mov	r0, r3
 8005166:	f000 f950 	bl	800540a <TIM_ITRx_SetConfig>
      break;
 800516a:	e019      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	6859      	ldr	r1, [r3, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	461a      	mov	r2, r3
 800517a:	f000 f8e7 	bl	800534c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2140      	movs	r1, #64	; 0x40
 8005184:	4618      	mov	r0, r3
 8005186:	f000 f940 	bl	800540a <TIM_ITRx_SetConfig>
      break;
 800518a:	e009      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f000 f937 	bl	800540a <TIM_ITRx_SetConfig>
      break;
 800519c:	e000      	b.n	80051a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800519e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a40      	ldr	r2, [pc, #256]	; (8005320 <TIM_Base_SetConfig+0x114>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d00f      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a3d      	ldr	r2, [pc, #244]	; (8005324 <TIM_Base_SetConfig+0x118>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00b      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a3c      	ldr	r2, [pc, #240]	; (8005328 <TIM_Base_SetConfig+0x11c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a3b      	ldr	r2, [pc, #236]	; (800532c <TIM_Base_SetConfig+0x120>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a3a      	ldr	r2, [pc, #232]	; (8005330 <TIM_Base_SetConfig+0x124>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d108      	bne.n	800525e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2f      	ldr	r2, [pc, #188]	; (8005320 <TIM_Base_SetConfig+0x114>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d02b      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526c:	d027      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2c      	ldr	r2, [pc, #176]	; (8005324 <TIM_Base_SetConfig+0x118>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d023      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2b      	ldr	r2, [pc, #172]	; (8005328 <TIM_Base_SetConfig+0x11c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01f      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2a      	ldr	r2, [pc, #168]	; (800532c <TIM_Base_SetConfig+0x120>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01b      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a29      	ldr	r2, [pc, #164]	; (8005330 <TIM_Base_SetConfig+0x124>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d017      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a28      	ldr	r2, [pc, #160]	; (8005334 <TIM_Base_SetConfig+0x128>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a27      	ldr	r2, [pc, #156]	; (8005338 <TIM_Base_SetConfig+0x12c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00f      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a26      	ldr	r2, [pc, #152]	; (800533c <TIM_Base_SetConfig+0x130>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00b      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a25      	ldr	r2, [pc, #148]	; (8005340 <TIM_Base_SetConfig+0x134>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d007      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a24      	ldr	r2, [pc, #144]	; (8005344 <TIM_Base_SetConfig+0x138>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a23      	ldr	r2, [pc, #140]	; (8005348 <TIM_Base_SetConfig+0x13c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d108      	bne.n	80052d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a0a      	ldr	r2, [pc, #40]	; (8005320 <TIM_Base_SetConfig+0x114>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_Base_SetConfig+0xf8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a0c      	ldr	r2, [pc, #48]	; (8005330 <TIM_Base_SetConfig+0x124>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d103      	bne.n	800530c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	615a      	str	r2, [r3, #20]
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40010000 	.word	0x40010000
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40010400 	.word	0x40010400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800
 8005340:	40001800 	.word	0x40001800
 8005344:	40001c00 	.word	0x40001c00
 8005348:	40002000 	.word	0x40002000

0800534c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f023 0201 	bic.w	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f023 030a 	bic.w	r3, r3, #10
 8005388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	621a      	str	r2, [r3, #32]
}
 800539e:	bf00      	nop
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b087      	sub	sp, #28
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f023 0210 	bic.w	r2, r3, #16
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	031b      	lsls	r3, r3, #12
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	f043 0307 	orr.w	r3, r3, #7
 800542c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	609a      	str	r2, [r3, #8]
}
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800545a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	021a      	lsls	r2, r3, #8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	431a      	orrs	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4313      	orrs	r3, r2
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	609a      	str	r2, [r3, #8]
}
 8005474:	bf00      	nop
 8005476:	371c      	adds	r7, #28
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005494:	2302      	movs	r3, #2
 8005496:	e05a      	b.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a21      	ldr	r2, [pc, #132]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e4:	d01d      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1a      	ldr	r2, [pc, #104]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a18      	ldr	r2, [pc, #96]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a17      	ldr	r2, [pc, #92]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a15      	ldr	r2, [pc, #84]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d10c      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	4313      	orrs	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40010000 	.word	0x40010000
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40010400 	.word	0x40010400
 8005570:	40014000 	.word	0x40014000
 8005574:	40001800 	.word	0x40001800

08005578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e03f      	b.n	8005632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fd fdc2 	bl	8003150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2224      	movs	r2, #36	; 0x24
 80055d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fb97 	bl	8005d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b088      	sub	sp, #32
 800563e:	af02      	add	r7, sp, #8
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b20      	cmp	r3, #32
 8005658:	f040 8083 	bne.w	8005762 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_UART_Transmit+0x2e>
 8005662:	88fb      	ldrh	r3, [r7, #6]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e07b      	b.n	8005764 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HAL_UART_Transmit+0x40>
 8005676:	2302      	movs	r3, #2
 8005678:	e074      	b.n	8005764 <HAL_UART_Transmit+0x12a>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2221      	movs	r2, #33	; 0x21
 800568c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005690:	f7fd fee6 	bl	8003460 <HAL_GetTick>
 8005694:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	88fa      	ldrh	r2, [r7, #6]
 800569a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80056aa:	e042      	b.n	8005732 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c2:	d122      	bne.n	800570a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	2180      	movs	r1, #128	; 0x80
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f9b6 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e042      	b.n	8005764 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d103      	bne.n	8005702 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	3302      	adds	r3, #2
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	e017      	b.n	8005732 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	3301      	adds	r3, #1
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	e013      	b.n	8005732 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2200      	movs	r2, #0
 8005712:	2180      	movs	r1, #128	; 0x80
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f993 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e01f      	b.n	8005764 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	60ba      	str	r2, [r7, #8]
 800572a:	781a      	ldrb	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1b7      	bne.n	80056ac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2200      	movs	r2, #0
 8005744:	2140      	movs	r1, #64	; 0x40
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f97a 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e006      	b.n	8005764 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b20      	cmp	r3, #32
 8005784:	d140      	bne.n	8005808 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_UART_Receive_IT+0x26>
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e039      	b.n	800580a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_UART_Receive_IT+0x38>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e032      	b.n	800580a <HAL_UART_Receive_IT+0x9e>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2222      	movs	r2, #34	; 0x22
 80057c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0201 	orr.w	r2, r2, #1
 80057f2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0220 	orr.w	r2, r2, #32
 8005802:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	e000      	b.n	800580a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005808:	2302      	movs	r3, #2
  }
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10d      	bne.n	800586a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_UART_IRQHandler+0x52>
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f9d6 	bl	8005c14 <UART_Receive_IT>
      return;
 8005868:	e0d1      	b.n	8005a0e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80b0 	beq.w	80059d2 <HAL_UART_IRQHandler+0x1ba>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d105      	bne.n	8005888 <HAL_UART_IRQHandler+0x70>
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80a5 	beq.w	80059d2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <HAL_UART_IRQHandler+0x90>
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a0:	f043 0201 	orr.w	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_UART_IRQHandler+0xb0>
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	f043 0202 	orr.w	r2, r3, #2
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <HAL_UART_IRQHandler+0xd0>
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e0:	f043 0204 	orr.w	r2, r3, #4
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00f      	beq.n	8005912 <HAL_UART_IRQHandler+0xfa>
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <HAL_UART_IRQHandler+0xee>
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	f043 0208 	orr.w	r2, r3, #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d078      	beq.n	8005a0c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <HAL_UART_IRQHandler+0x11c>
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f970 	bl	8005c14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	bf0c      	ite	eq
 8005942:	2301      	moveq	r3, #1
 8005944:	2300      	movne	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <HAL_UART_IRQHandler+0x144>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d031      	beq.n	80059c0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f8b9 	bl	8005ad4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d123      	bne.n	80059b8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695a      	ldr	r2, [r3, #20]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005984:	2b00      	cmp	r3, #0
 8005986:	d013      	beq.n	80059b0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598c:	4a21      	ldr	r2, [pc, #132]	; (8005a14 <HAL_UART_IRQHandler+0x1fc>)
 800598e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005994:	4618      	mov	r0, r3
 8005996:	f7fe f87f 	bl	8003a98 <HAL_DMA_Abort_IT>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d016      	beq.n	80059ce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059aa:	4610      	mov	r0, r2
 80059ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ae:	e00e      	b.n	80059ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f83b 	bl	8005a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b6:	e00a      	b.n	80059ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f837 	bl	8005a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059be:	e006      	b.n	80059ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f833 	bl	8005a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80059cc:	e01e      	b.n	8005a0c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ce:	bf00      	nop
    return;
 80059d0:	e01c      	b.n	8005a0c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_UART_IRQHandler+0x1d6>
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f8a6 	bl	8005b38 <UART_Transmit_IT>
    return;
 80059ec:	e00f      	b.n	8005a0e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <HAL_UART_IRQHandler+0x1f6>
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8ee 	bl	8005be4 <UART_EndTransmit_IT>
    return;
 8005a08:	bf00      	nop
 8005a0a:	e000      	b.n	8005a0e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005a0c:	bf00      	nop
  }
}
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	08005b11 	.word	0x08005b11

08005a18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a50:	e02c      	b.n	8005aac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d028      	beq.n	8005aac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d007      	beq.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a60:	f7fd fcfe 	bl	8003460 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d21d      	bcs.n	8005aac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e00f      	b.n	8005acc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d0c3      	beq.n	8005a52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005aea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695a      	ldr	r2, [r3, #20]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0201 	bic.w	r2, r2, #1
 8005afa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff ff7e 	bl	8005a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b21      	cmp	r3, #33	; 0x21
 8005b4a:	d144      	bne.n	8005bd6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b54:	d11a      	bne.n	8005b8c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b6a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d105      	bne.n	8005b80 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	1c9a      	adds	r2, r3, #2
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	621a      	str	r2, [r3, #32]
 8005b7e:	e00e      	b.n	8005b9e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]
 8005b8a:	e008      	b.n	8005b9e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	1c59      	adds	r1, r3, #1
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6211      	str	r1, [r2, #32]
 8005b96:	781a      	ldrb	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	4619      	mov	r1, r3
 8005bac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10f      	bne.n	8005bd2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e000      	b.n	8005bd8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005bd6:	2302      	movs	r3, #2
  }
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bfa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ff07 	bl	8005a18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b22      	cmp	r3, #34	; 0x22
 8005c26:	d171      	bne.n	8005d0c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c30:	d123      	bne.n	8005c7a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10e      	bne.n	8005c5e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	1c9a      	adds	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c5c:	e029      	b.n	8005cb2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	629a      	str	r2, [r3, #40]	; 0x28
 8005c78:	e01b      	b.n	8005cb2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6858      	ldr	r0, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	1c59      	adds	r1, r3, #1
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6291      	str	r1, [r2, #40]	; 0x28
 8005c92:	b2c2      	uxtb	r2, r0
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	e00c      	b.n	8005cb2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	1c58      	adds	r0, r3, #1
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	6288      	str	r0, [r1, #40]	; 0x28
 8005caa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d120      	bne.n	8005d08 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0220 	bic.w	r2, r2, #32
 8005cd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ce4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695a      	ldr	r2, [r3, #20]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0201 	bic.w	r2, r2, #1
 8005cf4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fd f8f2 	bl	8002ee8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e002      	b.n	8005d0e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1c:	b085      	sub	sp, #20
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d5a:	f023 030c 	bic.w	r3, r3, #12
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	68f9      	ldr	r1, [r7, #12]
 8005d64:	430b      	orrs	r3, r1
 8005d66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d86:	f040 818b 	bne.w	80060a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4ac1      	ldr	r2, [pc, #772]	; (8006094 <UART_SetConfig+0x37c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d005      	beq.n	8005da0 <UART_SetConfig+0x88>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4abf      	ldr	r2, [pc, #764]	; (8006098 <UART_SetConfig+0x380>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	f040 80bd 	bne.w	8005f1a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005da0:	f7fe fba0 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 8005da4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	461d      	mov	r5, r3
 8005daa:	f04f 0600 	mov.w	r6, #0
 8005dae:	46a8      	mov	r8, r5
 8005db0:	46b1      	mov	r9, r6
 8005db2:	eb18 0308 	adds.w	r3, r8, r8
 8005db6:	eb49 0409 	adc.w	r4, r9, r9
 8005dba:	4698      	mov	r8, r3
 8005dbc:	46a1      	mov	r9, r4
 8005dbe:	eb18 0805 	adds.w	r8, r8, r5
 8005dc2:	eb49 0906 	adc.w	r9, r9, r6
 8005dc6:	f04f 0100 	mov.w	r1, #0
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005dd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005dd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dda:	4688      	mov	r8, r1
 8005ddc:	4691      	mov	r9, r2
 8005dde:	eb18 0005 	adds.w	r0, r8, r5
 8005de2:	eb49 0106 	adc.w	r1, r9, r6
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	461d      	mov	r5, r3
 8005dec:	f04f 0600 	mov.w	r6, #0
 8005df0:	196b      	adds	r3, r5, r5
 8005df2:	eb46 0406 	adc.w	r4, r6, r6
 8005df6:	461a      	mov	r2, r3
 8005df8:	4623      	mov	r3, r4
 8005dfa:	f7fa fa61 	bl	80002c0 <__aeabi_uldivmod>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	461a      	mov	r2, r3
 8005e04:	4ba5      	ldr	r3, [pc, #660]	; (800609c <UART_SetConfig+0x384>)
 8005e06:	fba3 2302 	umull	r2, r3, r3, r2
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	461d      	mov	r5, r3
 8005e14:	f04f 0600 	mov.w	r6, #0
 8005e18:	46a9      	mov	r9, r5
 8005e1a:	46b2      	mov	sl, r6
 8005e1c:	eb19 0309 	adds.w	r3, r9, r9
 8005e20:	eb4a 040a 	adc.w	r4, sl, sl
 8005e24:	4699      	mov	r9, r3
 8005e26:	46a2      	mov	sl, r4
 8005e28:	eb19 0905 	adds.w	r9, r9, r5
 8005e2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e30:	f04f 0100 	mov.w	r1, #0
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e44:	4689      	mov	r9, r1
 8005e46:	4692      	mov	sl, r2
 8005e48:	eb19 0005 	adds.w	r0, r9, r5
 8005e4c:	eb4a 0106 	adc.w	r1, sl, r6
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	461d      	mov	r5, r3
 8005e56:	f04f 0600 	mov.w	r6, #0
 8005e5a:	196b      	adds	r3, r5, r5
 8005e5c:	eb46 0406 	adc.w	r4, r6, r6
 8005e60:	461a      	mov	r2, r3
 8005e62:	4623      	mov	r3, r4
 8005e64:	f7fa fa2c 	bl	80002c0 <__aeabi_uldivmod>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4b8b      	ldr	r3, [pc, #556]	; (800609c <UART_SetConfig+0x384>)
 8005e70:	fba3 1302 	umull	r1, r3, r3, r2
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	2164      	movs	r1, #100	; 0x64
 8005e78:	fb01 f303 	mul.w	r3, r1, r3
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	3332      	adds	r3, #50	; 0x32
 8005e82:	4a86      	ldr	r2, [pc, #536]	; (800609c <UART_SetConfig+0x384>)
 8005e84:	fba2 2303 	umull	r2, r3, r2, r3
 8005e88:	095b      	lsrs	r3, r3, #5
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e90:	4498      	add	r8, r3
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	461d      	mov	r5, r3
 8005e96:	f04f 0600 	mov.w	r6, #0
 8005e9a:	46a9      	mov	r9, r5
 8005e9c:	46b2      	mov	sl, r6
 8005e9e:	eb19 0309 	adds.w	r3, r9, r9
 8005ea2:	eb4a 040a 	adc.w	r4, sl, sl
 8005ea6:	4699      	mov	r9, r3
 8005ea8:	46a2      	mov	sl, r4
 8005eaa:	eb19 0905 	adds.w	r9, r9, r5
 8005eae:	eb4a 0a06 	adc.w	sl, sl, r6
 8005eb2:	f04f 0100 	mov.w	r1, #0
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ebe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ec2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ec6:	4689      	mov	r9, r1
 8005ec8:	4692      	mov	sl, r2
 8005eca:	eb19 0005 	adds.w	r0, r9, r5
 8005ece:	eb4a 0106 	adc.w	r1, sl, r6
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	461d      	mov	r5, r3
 8005ed8:	f04f 0600 	mov.w	r6, #0
 8005edc:	196b      	adds	r3, r5, r5
 8005ede:	eb46 0406 	adc.w	r4, r6, r6
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4623      	mov	r3, r4
 8005ee6:	f7fa f9eb 	bl	80002c0 <__aeabi_uldivmod>
 8005eea:	4603      	mov	r3, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4b6a      	ldr	r3, [pc, #424]	; (800609c <UART_SetConfig+0x384>)
 8005ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	2164      	movs	r1, #100	; 0x64
 8005efa:	fb01 f303 	mul.w	r3, r1, r3
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	3332      	adds	r3, #50	; 0x32
 8005f04:	4a65      	ldr	r2, [pc, #404]	; (800609c <UART_SetConfig+0x384>)
 8005f06:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	f003 0207 	and.w	r2, r3, #7
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4442      	add	r2, r8
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	e26f      	b.n	80063fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f1a:	f7fe facf 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 8005f1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	461d      	mov	r5, r3
 8005f24:	f04f 0600 	mov.w	r6, #0
 8005f28:	46a8      	mov	r8, r5
 8005f2a:	46b1      	mov	r9, r6
 8005f2c:	eb18 0308 	adds.w	r3, r8, r8
 8005f30:	eb49 0409 	adc.w	r4, r9, r9
 8005f34:	4698      	mov	r8, r3
 8005f36:	46a1      	mov	r9, r4
 8005f38:	eb18 0805 	adds.w	r8, r8, r5
 8005f3c:	eb49 0906 	adc.w	r9, r9, r6
 8005f40:	f04f 0100 	mov.w	r1, #0
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f54:	4688      	mov	r8, r1
 8005f56:	4691      	mov	r9, r2
 8005f58:	eb18 0005 	adds.w	r0, r8, r5
 8005f5c:	eb49 0106 	adc.w	r1, r9, r6
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	461d      	mov	r5, r3
 8005f66:	f04f 0600 	mov.w	r6, #0
 8005f6a:	196b      	adds	r3, r5, r5
 8005f6c:	eb46 0406 	adc.w	r4, r6, r6
 8005f70:	461a      	mov	r2, r3
 8005f72:	4623      	mov	r3, r4
 8005f74:	f7fa f9a4 	bl	80002c0 <__aeabi_uldivmod>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4b47      	ldr	r3, [pc, #284]	; (800609c <UART_SetConfig+0x384>)
 8005f80:	fba3 2302 	umull	r2, r3, r3, r2
 8005f84:	095b      	lsrs	r3, r3, #5
 8005f86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	461d      	mov	r5, r3
 8005f8e:	f04f 0600 	mov.w	r6, #0
 8005f92:	46a9      	mov	r9, r5
 8005f94:	46b2      	mov	sl, r6
 8005f96:	eb19 0309 	adds.w	r3, r9, r9
 8005f9a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f9e:	4699      	mov	r9, r3
 8005fa0:	46a2      	mov	sl, r4
 8005fa2:	eb19 0905 	adds.w	r9, r9, r5
 8005fa6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005faa:	f04f 0100 	mov.w	r1, #0
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fbe:	4689      	mov	r9, r1
 8005fc0:	4692      	mov	sl, r2
 8005fc2:	eb19 0005 	adds.w	r0, r9, r5
 8005fc6:	eb4a 0106 	adc.w	r1, sl, r6
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	461d      	mov	r5, r3
 8005fd0:	f04f 0600 	mov.w	r6, #0
 8005fd4:	196b      	adds	r3, r5, r5
 8005fd6:	eb46 0406 	adc.w	r4, r6, r6
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4623      	mov	r3, r4
 8005fde:	f7fa f96f 	bl	80002c0 <__aeabi_uldivmod>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4b2c      	ldr	r3, [pc, #176]	; (800609c <UART_SetConfig+0x384>)
 8005fea:	fba3 1302 	umull	r1, r3, r3, r2
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	2164      	movs	r1, #100	; 0x64
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	3332      	adds	r3, #50	; 0x32
 8005ffc:	4a27      	ldr	r2, [pc, #156]	; (800609c <UART_SetConfig+0x384>)
 8005ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800600a:	4498      	add	r8, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	461d      	mov	r5, r3
 8006010:	f04f 0600 	mov.w	r6, #0
 8006014:	46a9      	mov	r9, r5
 8006016:	46b2      	mov	sl, r6
 8006018:	eb19 0309 	adds.w	r3, r9, r9
 800601c:	eb4a 040a 	adc.w	r4, sl, sl
 8006020:	4699      	mov	r9, r3
 8006022:	46a2      	mov	sl, r4
 8006024:	eb19 0905 	adds.w	r9, r9, r5
 8006028:	eb4a 0a06 	adc.w	sl, sl, r6
 800602c:	f04f 0100 	mov.w	r1, #0
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006038:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800603c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006040:	4689      	mov	r9, r1
 8006042:	4692      	mov	sl, r2
 8006044:	eb19 0005 	adds.w	r0, r9, r5
 8006048:	eb4a 0106 	adc.w	r1, sl, r6
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	461d      	mov	r5, r3
 8006052:	f04f 0600 	mov.w	r6, #0
 8006056:	196b      	adds	r3, r5, r5
 8006058:	eb46 0406 	adc.w	r4, r6, r6
 800605c:	461a      	mov	r2, r3
 800605e:	4623      	mov	r3, r4
 8006060:	f7fa f92e 	bl	80002c0 <__aeabi_uldivmod>
 8006064:	4603      	mov	r3, r0
 8006066:	460c      	mov	r4, r1
 8006068:	461a      	mov	r2, r3
 800606a:	4b0c      	ldr	r3, [pc, #48]	; (800609c <UART_SetConfig+0x384>)
 800606c:	fba3 1302 	umull	r1, r3, r3, r2
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	2164      	movs	r1, #100	; 0x64
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	3332      	adds	r3, #50	; 0x32
 800607e:	4a07      	ldr	r2, [pc, #28]	; (800609c <UART_SetConfig+0x384>)
 8006080:	fba2 2303 	umull	r2, r3, r2, r3
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	f003 0207 	and.w	r2, r3, #7
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4442      	add	r2, r8
 8006090:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006092:	e1b2      	b.n	80063fa <UART_SetConfig+0x6e2>
 8006094:	40011000 	.word	0x40011000
 8006098:	40011400 	.word	0x40011400
 800609c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4ad7      	ldr	r2, [pc, #860]	; (8006404 <UART_SetConfig+0x6ec>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d005      	beq.n	80060b6 <UART_SetConfig+0x39e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4ad6      	ldr	r2, [pc, #856]	; (8006408 <UART_SetConfig+0x6f0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	f040 80d1 	bne.w	8006258 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80060b6:	f7fe fa15 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 80060ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	469a      	mov	sl, r3
 80060c0:	f04f 0b00 	mov.w	fp, #0
 80060c4:	46d0      	mov	r8, sl
 80060c6:	46d9      	mov	r9, fp
 80060c8:	eb18 0308 	adds.w	r3, r8, r8
 80060cc:	eb49 0409 	adc.w	r4, r9, r9
 80060d0:	4698      	mov	r8, r3
 80060d2:	46a1      	mov	r9, r4
 80060d4:	eb18 080a 	adds.w	r8, r8, sl
 80060d8:	eb49 090b 	adc.w	r9, r9, fp
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060f0:	4688      	mov	r8, r1
 80060f2:	4691      	mov	r9, r2
 80060f4:	eb1a 0508 	adds.w	r5, sl, r8
 80060f8:	eb4b 0609 	adc.w	r6, fp, r9
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4619      	mov	r1, r3
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	f04f 0400 	mov.w	r4, #0
 800610e:	0094      	lsls	r4, r2, #2
 8006110:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006114:	008b      	lsls	r3, r1, #2
 8006116:	461a      	mov	r2, r3
 8006118:	4623      	mov	r3, r4
 800611a:	4628      	mov	r0, r5
 800611c:	4631      	mov	r1, r6
 800611e:	f7fa f8cf 	bl	80002c0 <__aeabi_uldivmod>
 8006122:	4603      	mov	r3, r0
 8006124:	460c      	mov	r4, r1
 8006126:	461a      	mov	r2, r3
 8006128:	4bb8      	ldr	r3, [pc, #736]	; (800640c <UART_SetConfig+0x6f4>)
 800612a:	fba3 2302 	umull	r2, r3, r3, r2
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	469b      	mov	fp, r3
 8006138:	f04f 0c00 	mov.w	ip, #0
 800613c:	46d9      	mov	r9, fp
 800613e:	46e2      	mov	sl, ip
 8006140:	eb19 0309 	adds.w	r3, r9, r9
 8006144:	eb4a 040a 	adc.w	r4, sl, sl
 8006148:	4699      	mov	r9, r3
 800614a:	46a2      	mov	sl, r4
 800614c:	eb19 090b 	adds.w	r9, r9, fp
 8006150:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006154:	f04f 0100 	mov.w	r1, #0
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006160:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006164:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006168:	4689      	mov	r9, r1
 800616a:	4692      	mov	sl, r2
 800616c:	eb1b 0509 	adds.w	r5, fp, r9
 8006170:	eb4c 060a 	adc.w	r6, ip, sl
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	4619      	mov	r1, r3
 800617a:	f04f 0200 	mov.w	r2, #0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	f04f 0400 	mov.w	r4, #0
 8006186:	0094      	lsls	r4, r2, #2
 8006188:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800618c:	008b      	lsls	r3, r1, #2
 800618e:	461a      	mov	r2, r3
 8006190:	4623      	mov	r3, r4
 8006192:	4628      	mov	r0, r5
 8006194:	4631      	mov	r1, r6
 8006196:	f7fa f893 	bl	80002c0 <__aeabi_uldivmod>
 800619a:	4603      	mov	r3, r0
 800619c:	460c      	mov	r4, r1
 800619e:	461a      	mov	r2, r3
 80061a0:	4b9a      	ldr	r3, [pc, #616]	; (800640c <UART_SetConfig+0x6f4>)
 80061a2:	fba3 1302 	umull	r1, r3, r3, r2
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	2164      	movs	r1, #100	; 0x64
 80061aa:	fb01 f303 	mul.w	r3, r1, r3
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	3332      	adds	r3, #50	; 0x32
 80061b4:	4a95      	ldr	r2, [pc, #596]	; (800640c <UART_SetConfig+0x6f4>)
 80061b6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061c0:	4498      	add	r8, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	469b      	mov	fp, r3
 80061c6:	f04f 0c00 	mov.w	ip, #0
 80061ca:	46d9      	mov	r9, fp
 80061cc:	46e2      	mov	sl, ip
 80061ce:	eb19 0309 	adds.w	r3, r9, r9
 80061d2:	eb4a 040a 	adc.w	r4, sl, sl
 80061d6:	4699      	mov	r9, r3
 80061d8:	46a2      	mov	sl, r4
 80061da:	eb19 090b 	adds.w	r9, r9, fp
 80061de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061e2:	f04f 0100 	mov.w	r1, #0
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061f6:	4689      	mov	r9, r1
 80061f8:	4692      	mov	sl, r2
 80061fa:	eb1b 0509 	adds.w	r5, fp, r9
 80061fe:	eb4c 060a 	adc.w	r6, ip, sl
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	4619      	mov	r1, r3
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	f04f 0400 	mov.w	r4, #0
 8006214:	0094      	lsls	r4, r2, #2
 8006216:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800621a:	008b      	lsls	r3, r1, #2
 800621c:	461a      	mov	r2, r3
 800621e:	4623      	mov	r3, r4
 8006220:	4628      	mov	r0, r5
 8006222:	4631      	mov	r1, r6
 8006224:	f7fa f84c 	bl	80002c0 <__aeabi_uldivmod>
 8006228:	4603      	mov	r3, r0
 800622a:	460c      	mov	r4, r1
 800622c:	461a      	mov	r2, r3
 800622e:	4b77      	ldr	r3, [pc, #476]	; (800640c <UART_SetConfig+0x6f4>)
 8006230:	fba3 1302 	umull	r1, r3, r3, r2
 8006234:	095b      	lsrs	r3, r3, #5
 8006236:	2164      	movs	r1, #100	; 0x64
 8006238:	fb01 f303 	mul.w	r3, r1, r3
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	3332      	adds	r3, #50	; 0x32
 8006242:	4a72      	ldr	r2, [pc, #456]	; (800640c <UART_SetConfig+0x6f4>)
 8006244:	fba2 2303 	umull	r2, r3, r2, r3
 8006248:	095b      	lsrs	r3, r3, #5
 800624a:	f003 020f 	and.w	r2, r3, #15
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4442      	add	r2, r8
 8006254:	609a      	str	r2, [r3, #8]
 8006256:	e0d0      	b.n	80063fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006258:	f7fe f930 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 800625c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	469a      	mov	sl, r3
 8006262:	f04f 0b00 	mov.w	fp, #0
 8006266:	46d0      	mov	r8, sl
 8006268:	46d9      	mov	r9, fp
 800626a:	eb18 0308 	adds.w	r3, r8, r8
 800626e:	eb49 0409 	adc.w	r4, r9, r9
 8006272:	4698      	mov	r8, r3
 8006274:	46a1      	mov	r9, r4
 8006276:	eb18 080a 	adds.w	r8, r8, sl
 800627a:	eb49 090b 	adc.w	r9, r9, fp
 800627e:	f04f 0100 	mov.w	r1, #0
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800628a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800628e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006292:	4688      	mov	r8, r1
 8006294:	4691      	mov	r9, r2
 8006296:	eb1a 0508 	adds.w	r5, sl, r8
 800629a:	eb4b 0609 	adc.w	r6, fp, r9
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	4619      	mov	r1, r3
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	f04f 0400 	mov.w	r4, #0
 80062b0:	0094      	lsls	r4, r2, #2
 80062b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062b6:	008b      	lsls	r3, r1, #2
 80062b8:	461a      	mov	r2, r3
 80062ba:	4623      	mov	r3, r4
 80062bc:	4628      	mov	r0, r5
 80062be:	4631      	mov	r1, r6
 80062c0:	f7f9 fffe 	bl	80002c0 <__aeabi_uldivmod>
 80062c4:	4603      	mov	r3, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	461a      	mov	r2, r3
 80062ca:	4b50      	ldr	r3, [pc, #320]	; (800640c <UART_SetConfig+0x6f4>)
 80062cc:	fba3 2302 	umull	r2, r3, r3, r2
 80062d0:	095b      	lsrs	r3, r3, #5
 80062d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	469b      	mov	fp, r3
 80062da:	f04f 0c00 	mov.w	ip, #0
 80062de:	46d9      	mov	r9, fp
 80062e0:	46e2      	mov	sl, ip
 80062e2:	eb19 0309 	adds.w	r3, r9, r9
 80062e6:	eb4a 040a 	adc.w	r4, sl, sl
 80062ea:	4699      	mov	r9, r3
 80062ec:	46a2      	mov	sl, r4
 80062ee:	eb19 090b 	adds.w	r9, r9, fp
 80062f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062f6:	f04f 0100 	mov.w	r1, #0
 80062fa:	f04f 0200 	mov.w	r2, #0
 80062fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006302:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006306:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800630a:	4689      	mov	r9, r1
 800630c:	4692      	mov	sl, r2
 800630e:	eb1b 0509 	adds.w	r5, fp, r9
 8006312:	eb4c 060a 	adc.w	r6, ip, sl
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	4619      	mov	r1, r3
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	f04f 0400 	mov.w	r4, #0
 8006328:	0094      	lsls	r4, r2, #2
 800632a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800632e:	008b      	lsls	r3, r1, #2
 8006330:	461a      	mov	r2, r3
 8006332:	4623      	mov	r3, r4
 8006334:	4628      	mov	r0, r5
 8006336:	4631      	mov	r1, r6
 8006338:	f7f9 ffc2 	bl	80002c0 <__aeabi_uldivmod>
 800633c:	4603      	mov	r3, r0
 800633e:	460c      	mov	r4, r1
 8006340:	461a      	mov	r2, r3
 8006342:	4b32      	ldr	r3, [pc, #200]	; (800640c <UART_SetConfig+0x6f4>)
 8006344:	fba3 1302 	umull	r1, r3, r3, r2
 8006348:	095b      	lsrs	r3, r3, #5
 800634a:	2164      	movs	r1, #100	; 0x64
 800634c:	fb01 f303 	mul.w	r3, r1, r3
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	3332      	adds	r3, #50	; 0x32
 8006356:	4a2d      	ldr	r2, [pc, #180]	; (800640c <UART_SetConfig+0x6f4>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006362:	4498      	add	r8, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	469b      	mov	fp, r3
 8006368:	f04f 0c00 	mov.w	ip, #0
 800636c:	46d9      	mov	r9, fp
 800636e:	46e2      	mov	sl, ip
 8006370:	eb19 0309 	adds.w	r3, r9, r9
 8006374:	eb4a 040a 	adc.w	r4, sl, sl
 8006378:	4699      	mov	r9, r3
 800637a:	46a2      	mov	sl, r4
 800637c:	eb19 090b 	adds.w	r9, r9, fp
 8006380:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006384:	f04f 0100 	mov.w	r1, #0
 8006388:	f04f 0200 	mov.w	r2, #0
 800638c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006390:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006394:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006398:	4689      	mov	r9, r1
 800639a:	4692      	mov	sl, r2
 800639c:	eb1b 0509 	adds.w	r5, fp, r9
 80063a0:	eb4c 060a 	adc.w	r6, ip, sl
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	4619      	mov	r1, r3
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	f04f 0400 	mov.w	r4, #0
 80063b6:	0094      	lsls	r4, r2, #2
 80063b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063bc:	008b      	lsls	r3, r1, #2
 80063be:	461a      	mov	r2, r3
 80063c0:	4623      	mov	r3, r4
 80063c2:	4628      	mov	r0, r5
 80063c4:	4631      	mov	r1, r6
 80063c6:	f7f9 ff7b 	bl	80002c0 <__aeabi_uldivmod>
 80063ca:	4603      	mov	r3, r0
 80063cc:	460c      	mov	r4, r1
 80063ce:	461a      	mov	r2, r3
 80063d0:	4b0e      	ldr	r3, [pc, #56]	; (800640c <UART_SetConfig+0x6f4>)
 80063d2:	fba3 1302 	umull	r1, r3, r3, r2
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	2164      	movs	r1, #100	; 0x64
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	3332      	adds	r3, #50	; 0x32
 80063e4:	4a09      	ldr	r2, [pc, #36]	; (800640c <UART_SetConfig+0x6f4>)
 80063e6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	f003 020f 	and.w	r2, r3, #15
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4442      	add	r2, r8
 80063f6:	609a      	str	r2, [r3, #8]
}
 80063f8:	e7ff      	b.n	80063fa <UART_SetConfig+0x6e2>
 80063fa:	bf00      	nop
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006404:	40011000 	.word	0x40011000
 8006408:	40011400 	.word	0x40011400
 800640c:	51eb851f 	.word	0x51eb851f

08006410 <__errno>:
 8006410:	4b01      	ldr	r3, [pc, #4]	; (8006418 <__errno+0x8>)
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20000020 	.word	0x20000020

0800641c <__libc_init_array>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	4e0d      	ldr	r6, [pc, #52]	; (8006454 <__libc_init_array+0x38>)
 8006420:	4c0d      	ldr	r4, [pc, #52]	; (8006458 <__libc_init_array+0x3c>)
 8006422:	1ba4      	subs	r4, r4, r6
 8006424:	10a4      	asrs	r4, r4, #2
 8006426:	2500      	movs	r5, #0
 8006428:	42a5      	cmp	r5, r4
 800642a:	d109      	bne.n	8006440 <__libc_init_array+0x24>
 800642c:	4e0b      	ldr	r6, [pc, #44]	; (800645c <__libc_init_array+0x40>)
 800642e:	4c0c      	ldr	r4, [pc, #48]	; (8006460 <__libc_init_array+0x44>)
 8006430:	f000 fc28 	bl	8006c84 <_init>
 8006434:	1ba4      	subs	r4, r4, r6
 8006436:	10a4      	asrs	r4, r4, #2
 8006438:	2500      	movs	r5, #0
 800643a:	42a5      	cmp	r5, r4
 800643c:	d105      	bne.n	800644a <__libc_init_array+0x2e>
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006444:	4798      	blx	r3
 8006446:	3501      	adds	r5, #1
 8006448:	e7ee      	b.n	8006428 <__libc_init_array+0xc>
 800644a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800644e:	4798      	blx	r3
 8006450:	3501      	adds	r5, #1
 8006452:	e7f2      	b.n	800643a <__libc_init_array+0x1e>
 8006454:	0800736c 	.word	0x0800736c
 8006458:	0800736c 	.word	0x0800736c
 800645c:	0800736c 	.word	0x0800736c
 8006460:	08007370 	.word	0x08007370

08006464 <memcpy>:
 8006464:	b510      	push	{r4, lr}
 8006466:	1e43      	subs	r3, r0, #1
 8006468:	440a      	add	r2, r1
 800646a:	4291      	cmp	r1, r2
 800646c:	d100      	bne.n	8006470 <memcpy+0xc>
 800646e:	bd10      	pop	{r4, pc}
 8006470:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006474:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006478:	e7f7      	b.n	800646a <memcpy+0x6>

0800647a <memset>:
 800647a:	4402      	add	r2, r0
 800647c:	4603      	mov	r3, r0
 800647e:	4293      	cmp	r3, r2
 8006480:	d100      	bne.n	8006484 <memset+0xa>
 8006482:	4770      	bx	lr
 8006484:	f803 1b01 	strb.w	r1, [r3], #1
 8006488:	e7f9      	b.n	800647e <memset+0x4>
	...

0800648c <siprintf>:
 800648c:	b40e      	push	{r1, r2, r3}
 800648e:	b500      	push	{lr}
 8006490:	b09c      	sub	sp, #112	; 0x70
 8006492:	ab1d      	add	r3, sp, #116	; 0x74
 8006494:	9002      	str	r0, [sp, #8]
 8006496:	9006      	str	r0, [sp, #24]
 8006498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800649c:	4809      	ldr	r0, [pc, #36]	; (80064c4 <siprintf+0x38>)
 800649e:	9107      	str	r1, [sp, #28]
 80064a0:	9104      	str	r1, [sp, #16]
 80064a2:	4909      	ldr	r1, [pc, #36]	; (80064c8 <siprintf+0x3c>)
 80064a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a8:	9105      	str	r1, [sp, #20]
 80064aa:	6800      	ldr	r0, [r0, #0]
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	a902      	add	r1, sp, #8
 80064b0:	f000 f866 	bl	8006580 <_svfiprintf_r>
 80064b4:	9b02      	ldr	r3, [sp, #8]
 80064b6:	2200      	movs	r2, #0
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	b01c      	add	sp, #112	; 0x70
 80064bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80064c0:	b003      	add	sp, #12
 80064c2:	4770      	bx	lr
 80064c4:	20000020 	.word	0x20000020
 80064c8:	ffff0208 	.word	0xffff0208

080064cc <__ssputs_r>:
 80064cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	688e      	ldr	r6, [r1, #8]
 80064d2:	429e      	cmp	r6, r3
 80064d4:	4682      	mov	sl, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	4690      	mov	r8, r2
 80064da:	4699      	mov	r9, r3
 80064dc:	d837      	bhi.n	800654e <__ssputs_r+0x82>
 80064de:	898a      	ldrh	r2, [r1, #12]
 80064e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064e4:	d031      	beq.n	800654a <__ssputs_r+0x7e>
 80064e6:	6825      	ldr	r5, [r4, #0]
 80064e8:	6909      	ldr	r1, [r1, #16]
 80064ea:	1a6f      	subs	r7, r5, r1
 80064ec:	6965      	ldr	r5, [r4, #20]
 80064ee:	2302      	movs	r3, #2
 80064f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80064f8:	f109 0301 	add.w	r3, r9, #1
 80064fc:	443b      	add	r3, r7
 80064fe:	429d      	cmp	r5, r3
 8006500:	bf38      	it	cc
 8006502:	461d      	movcc	r5, r3
 8006504:	0553      	lsls	r3, r2, #21
 8006506:	d530      	bpl.n	800656a <__ssputs_r+0x9e>
 8006508:	4629      	mov	r1, r5
 800650a:	f000 fb21 	bl	8006b50 <_malloc_r>
 800650e:	4606      	mov	r6, r0
 8006510:	b950      	cbnz	r0, 8006528 <__ssputs_r+0x5c>
 8006512:	230c      	movs	r3, #12
 8006514:	f8ca 3000 	str.w	r3, [sl]
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	f04f 30ff 	mov.w	r0, #4294967295
 8006524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006528:	463a      	mov	r2, r7
 800652a:	6921      	ldr	r1, [r4, #16]
 800652c:	f7ff ff9a 	bl	8006464 <memcpy>
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653a:	81a3      	strh	r3, [r4, #12]
 800653c:	6126      	str	r6, [r4, #16]
 800653e:	6165      	str	r5, [r4, #20]
 8006540:	443e      	add	r6, r7
 8006542:	1bed      	subs	r5, r5, r7
 8006544:	6026      	str	r6, [r4, #0]
 8006546:	60a5      	str	r5, [r4, #8]
 8006548:	464e      	mov	r6, r9
 800654a:	454e      	cmp	r6, r9
 800654c:	d900      	bls.n	8006550 <__ssputs_r+0x84>
 800654e:	464e      	mov	r6, r9
 8006550:	4632      	mov	r2, r6
 8006552:	4641      	mov	r1, r8
 8006554:	6820      	ldr	r0, [r4, #0]
 8006556:	f000 fa93 	bl	8006a80 <memmove>
 800655a:	68a3      	ldr	r3, [r4, #8]
 800655c:	1b9b      	subs	r3, r3, r6
 800655e:	60a3      	str	r3, [r4, #8]
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	441e      	add	r6, r3
 8006564:	6026      	str	r6, [r4, #0]
 8006566:	2000      	movs	r0, #0
 8006568:	e7dc      	b.n	8006524 <__ssputs_r+0x58>
 800656a:	462a      	mov	r2, r5
 800656c:	f000 fb4a 	bl	8006c04 <_realloc_r>
 8006570:	4606      	mov	r6, r0
 8006572:	2800      	cmp	r0, #0
 8006574:	d1e2      	bne.n	800653c <__ssputs_r+0x70>
 8006576:	6921      	ldr	r1, [r4, #16]
 8006578:	4650      	mov	r0, sl
 800657a:	f000 fa9b 	bl	8006ab4 <_free_r>
 800657e:	e7c8      	b.n	8006512 <__ssputs_r+0x46>

08006580 <_svfiprintf_r>:
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	461d      	mov	r5, r3
 8006586:	898b      	ldrh	r3, [r1, #12]
 8006588:	061f      	lsls	r7, r3, #24
 800658a:	b09d      	sub	sp, #116	; 0x74
 800658c:	4680      	mov	r8, r0
 800658e:	460c      	mov	r4, r1
 8006590:	4616      	mov	r6, r2
 8006592:	d50f      	bpl.n	80065b4 <_svfiprintf_r+0x34>
 8006594:	690b      	ldr	r3, [r1, #16]
 8006596:	b96b      	cbnz	r3, 80065b4 <_svfiprintf_r+0x34>
 8006598:	2140      	movs	r1, #64	; 0x40
 800659a:	f000 fad9 	bl	8006b50 <_malloc_r>
 800659e:	6020      	str	r0, [r4, #0]
 80065a0:	6120      	str	r0, [r4, #16]
 80065a2:	b928      	cbnz	r0, 80065b0 <_svfiprintf_r+0x30>
 80065a4:	230c      	movs	r3, #12
 80065a6:	f8c8 3000 	str.w	r3, [r8]
 80065aa:	f04f 30ff 	mov.w	r0, #4294967295
 80065ae:	e0c8      	b.n	8006742 <_svfiprintf_r+0x1c2>
 80065b0:	2340      	movs	r3, #64	; 0x40
 80065b2:	6163      	str	r3, [r4, #20]
 80065b4:	2300      	movs	r3, #0
 80065b6:	9309      	str	r3, [sp, #36]	; 0x24
 80065b8:	2320      	movs	r3, #32
 80065ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065be:	2330      	movs	r3, #48	; 0x30
 80065c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065c4:	9503      	str	r5, [sp, #12]
 80065c6:	f04f 0b01 	mov.w	fp, #1
 80065ca:	4637      	mov	r7, r6
 80065cc:	463d      	mov	r5, r7
 80065ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80065d2:	b10b      	cbz	r3, 80065d8 <_svfiprintf_r+0x58>
 80065d4:	2b25      	cmp	r3, #37	; 0x25
 80065d6:	d13e      	bne.n	8006656 <_svfiprintf_r+0xd6>
 80065d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80065dc:	d00b      	beq.n	80065f6 <_svfiprintf_r+0x76>
 80065de:	4653      	mov	r3, sl
 80065e0:	4632      	mov	r2, r6
 80065e2:	4621      	mov	r1, r4
 80065e4:	4640      	mov	r0, r8
 80065e6:	f7ff ff71 	bl	80064cc <__ssputs_r>
 80065ea:	3001      	adds	r0, #1
 80065ec:	f000 80a4 	beq.w	8006738 <_svfiprintf_r+0x1b8>
 80065f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f2:	4453      	add	r3, sl
 80065f4:	9309      	str	r3, [sp, #36]	; 0x24
 80065f6:	783b      	ldrb	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 809d 	beq.w	8006738 <_svfiprintf_r+0x1b8>
 80065fe:	2300      	movs	r3, #0
 8006600:	f04f 32ff 	mov.w	r2, #4294967295
 8006604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	9307      	str	r3, [sp, #28]
 800660c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006610:	931a      	str	r3, [sp, #104]	; 0x68
 8006612:	462f      	mov	r7, r5
 8006614:	2205      	movs	r2, #5
 8006616:	f817 1b01 	ldrb.w	r1, [r7], #1
 800661a:	4850      	ldr	r0, [pc, #320]	; (800675c <_svfiprintf_r+0x1dc>)
 800661c:	f7f9 fe00 	bl	8000220 <memchr>
 8006620:	9b04      	ldr	r3, [sp, #16]
 8006622:	b9d0      	cbnz	r0, 800665a <_svfiprintf_r+0xda>
 8006624:	06d9      	lsls	r1, r3, #27
 8006626:	bf44      	itt	mi
 8006628:	2220      	movmi	r2, #32
 800662a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800662e:	071a      	lsls	r2, r3, #28
 8006630:	bf44      	itt	mi
 8006632:	222b      	movmi	r2, #43	; 0x2b
 8006634:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006638:	782a      	ldrb	r2, [r5, #0]
 800663a:	2a2a      	cmp	r2, #42	; 0x2a
 800663c:	d015      	beq.n	800666a <_svfiprintf_r+0xea>
 800663e:	9a07      	ldr	r2, [sp, #28]
 8006640:	462f      	mov	r7, r5
 8006642:	2000      	movs	r0, #0
 8006644:	250a      	movs	r5, #10
 8006646:	4639      	mov	r1, r7
 8006648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800664c:	3b30      	subs	r3, #48	; 0x30
 800664e:	2b09      	cmp	r3, #9
 8006650:	d94d      	bls.n	80066ee <_svfiprintf_r+0x16e>
 8006652:	b1b8      	cbz	r0, 8006684 <_svfiprintf_r+0x104>
 8006654:	e00f      	b.n	8006676 <_svfiprintf_r+0xf6>
 8006656:	462f      	mov	r7, r5
 8006658:	e7b8      	b.n	80065cc <_svfiprintf_r+0x4c>
 800665a:	4a40      	ldr	r2, [pc, #256]	; (800675c <_svfiprintf_r+0x1dc>)
 800665c:	1a80      	subs	r0, r0, r2
 800665e:	fa0b f000 	lsl.w	r0, fp, r0
 8006662:	4318      	orrs	r0, r3
 8006664:	9004      	str	r0, [sp, #16]
 8006666:	463d      	mov	r5, r7
 8006668:	e7d3      	b.n	8006612 <_svfiprintf_r+0x92>
 800666a:	9a03      	ldr	r2, [sp, #12]
 800666c:	1d11      	adds	r1, r2, #4
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	9103      	str	r1, [sp, #12]
 8006672:	2a00      	cmp	r2, #0
 8006674:	db01      	blt.n	800667a <_svfiprintf_r+0xfa>
 8006676:	9207      	str	r2, [sp, #28]
 8006678:	e004      	b.n	8006684 <_svfiprintf_r+0x104>
 800667a:	4252      	negs	r2, r2
 800667c:	f043 0302 	orr.w	r3, r3, #2
 8006680:	9207      	str	r2, [sp, #28]
 8006682:	9304      	str	r3, [sp, #16]
 8006684:	783b      	ldrb	r3, [r7, #0]
 8006686:	2b2e      	cmp	r3, #46	; 0x2e
 8006688:	d10c      	bne.n	80066a4 <_svfiprintf_r+0x124>
 800668a:	787b      	ldrb	r3, [r7, #1]
 800668c:	2b2a      	cmp	r3, #42	; 0x2a
 800668e:	d133      	bne.n	80066f8 <_svfiprintf_r+0x178>
 8006690:	9b03      	ldr	r3, [sp, #12]
 8006692:	1d1a      	adds	r2, r3, #4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	9203      	str	r2, [sp, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	bfb8      	it	lt
 800669c:	f04f 33ff 	movlt.w	r3, #4294967295
 80066a0:	3702      	adds	r7, #2
 80066a2:	9305      	str	r3, [sp, #20]
 80066a4:	4d2e      	ldr	r5, [pc, #184]	; (8006760 <_svfiprintf_r+0x1e0>)
 80066a6:	7839      	ldrb	r1, [r7, #0]
 80066a8:	2203      	movs	r2, #3
 80066aa:	4628      	mov	r0, r5
 80066ac:	f7f9 fdb8 	bl	8000220 <memchr>
 80066b0:	b138      	cbz	r0, 80066c2 <_svfiprintf_r+0x142>
 80066b2:	2340      	movs	r3, #64	; 0x40
 80066b4:	1b40      	subs	r0, r0, r5
 80066b6:	fa03 f000 	lsl.w	r0, r3, r0
 80066ba:	9b04      	ldr	r3, [sp, #16]
 80066bc:	4303      	orrs	r3, r0
 80066be:	3701      	adds	r7, #1
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	7839      	ldrb	r1, [r7, #0]
 80066c4:	4827      	ldr	r0, [pc, #156]	; (8006764 <_svfiprintf_r+0x1e4>)
 80066c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066ca:	2206      	movs	r2, #6
 80066cc:	1c7e      	adds	r6, r7, #1
 80066ce:	f7f9 fda7 	bl	8000220 <memchr>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d038      	beq.n	8006748 <_svfiprintf_r+0x1c8>
 80066d6:	4b24      	ldr	r3, [pc, #144]	; (8006768 <_svfiprintf_r+0x1e8>)
 80066d8:	bb13      	cbnz	r3, 8006720 <_svfiprintf_r+0x1a0>
 80066da:	9b03      	ldr	r3, [sp, #12]
 80066dc:	3307      	adds	r3, #7
 80066de:	f023 0307 	bic.w	r3, r3, #7
 80066e2:	3308      	adds	r3, #8
 80066e4:	9303      	str	r3, [sp, #12]
 80066e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e8:	444b      	add	r3, r9
 80066ea:	9309      	str	r3, [sp, #36]	; 0x24
 80066ec:	e76d      	b.n	80065ca <_svfiprintf_r+0x4a>
 80066ee:	fb05 3202 	mla	r2, r5, r2, r3
 80066f2:	2001      	movs	r0, #1
 80066f4:	460f      	mov	r7, r1
 80066f6:	e7a6      	b.n	8006646 <_svfiprintf_r+0xc6>
 80066f8:	2300      	movs	r3, #0
 80066fa:	3701      	adds	r7, #1
 80066fc:	9305      	str	r3, [sp, #20]
 80066fe:	4619      	mov	r1, r3
 8006700:	250a      	movs	r5, #10
 8006702:	4638      	mov	r0, r7
 8006704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006708:	3a30      	subs	r2, #48	; 0x30
 800670a:	2a09      	cmp	r2, #9
 800670c:	d903      	bls.n	8006716 <_svfiprintf_r+0x196>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0c8      	beq.n	80066a4 <_svfiprintf_r+0x124>
 8006712:	9105      	str	r1, [sp, #20]
 8006714:	e7c6      	b.n	80066a4 <_svfiprintf_r+0x124>
 8006716:	fb05 2101 	mla	r1, r5, r1, r2
 800671a:	2301      	movs	r3, #1
 800671c:	4607      	mov	r7, r0
 800671e:	e7f0      	b.n	8006702 <_svfiprintf_r+0x182>
 8006720:	ab03      	add	r3, sp, #12
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	4622      	mov	r2, r4
 8006726:	4b11      	ldr	r3, [pc, #68]	; (800676c <_svfiprintf_r+0x1ec>)
 8006728:	a904      	add	r1, sp, #16
 800672a:	4640      	mov	r0, r8
 800672c:	f3af 8000 	nop.w
 8006730:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006734:	4681      	mov	r9, r0
 8006736:	d1d6      	bne.n	80066e6 <_svfiprintf_r+0x166>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	065b      	lsls	r3, r3, #25
 800673c:	f53f af35 	bmi.w	80065aa <_svfiprintf_r+0x2a>
 8006740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006742:	b01d      	add	sp, #116	; 0x74
 8006744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006748:	ab03      	add	r3, sp, #12
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	4622      	mov	r2, r4
 800674e:	4b07      	ldr	r3, [pc, #28]	; (800676c <_svfiprintf_r+0x1ec>)
 8006750:	a904      	add	r1, sp, #16
 8006752:	4640      	mov	r0, r8
 8006754:	f000 f882 	bl	800685c <_printf_i>
 8006758:	e7ea      	b.n	8006730 <_svfiprintf_r+0x1b0>
 800675a:	bf00      	nop
 800675c:	08007330 	.word	0x08007330
 8006760:	08007336 	.word	0x08007336
 8006764:	0800733a 	.word	0x0800733a
 8006768:	00000000 	.word	0x00000000
 800676c:	080064cd 	.word	0x080064cd

08006770 <_printf_common>:
 8006770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	4691      	mov	r9, r2
 8006776:	461f      	mov	r7, r3
 8006778:	688a      	ldr	r2, [r1, #8]
 800677a:	690b      	ldr	r3, [r1, #16]
 800677c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006780:	4293      	cmp	r3, r2
 8006782:	bfb8      	it	lt
 8006784:	4613      	movlt	r3, r2
 8006786:	f8c9 3000 	str.w	r3, [r9]
 800678a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800678e:	4606      	mov	r6, r0
 8006790:	460c      	mov	r4, r1
 8006792:	b112      	cbz	r2, 800679a <_printf_common+0x2a>
 8006794:	3301      	adds	r3, #1
 8006796:	f8c9 3000 	str.w	r3, [r9]
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	0699      	lsls	r1, r3, #26
 800679e:	bf42      	ittt	mi
 80067a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80067a4:	3302      	addmi	r3, #2
 80067a6:	f8c9 3000 	strmi.w	r3, [r9]
 80067aa:	6825      	ldr	r5, [r4, #0]
 80067ac:	f015 0506 	ands.w	r5, r5, #6
 80067b0:	d107      	bne.n	80067c2 <_printf_common+0x52>
 80067b2:	f104 0a19 	add.w	sl, r4, #25
 80067b6:	68e3      	ldr	r3, [r4, #12]
 80067b8:	f8d9 2000 	ldr.w	r2, [r9]
 80067bc:	1a9b      	subs	r3, r3, r2
 80067be:	42ab      	cmp	r3, r5
 80067c0:	dc28      	bgt.n	8006814 <_printf_common+0xa4>
 80067c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	3300      	adds	r3, #0
 80067ca:	bf18      	it	ne
 80067cc:	2301      	movne	r3, #1
 80067ce:	0692      	lsls	r2, r2, #26
 80067d0:	d42d      	bmi.n	800682e <_printf_common+0xbe>
 80067d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067d6:	4639      	mov	r1, r7
 80067d8:	4630      	mov	r0, r6
 80067da:	47c0      	blx	r8
 80067dc:	3001      	adds	r0, #1
 80067de:	d020      	beq.n	8006822 <_printf_common+0xb2>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	68e5      	ldr	r5, [r4, #12]
 80067e4:	f8d9 2000 	ldr.w	r2, [r9]
 80067e8:	f003 0306 	and.w	r3, r3, #6
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	bf08      	it	eq
 80067f0:	1aad      	subeq	r5, r5, r2
 80067f2:	68a3      	ldr	r3, [r4, #8]
 80067f4:	6922      	ldr	r2, [r4, #16]
 80067f6:	bf0c      	ite	eq
 80067f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067fc:	2500      	movne	r5, #0
 80067fe:	4293      	cmp	r3, r2
 8006800:	bfc4      	itt	gt
 8006802:	1a9b      	subgt	r3, r3, r2
 8006804:	18ed      	addgt	r5, r5, r3
 8006806:	f04f 0900 	mov.w	r9, #0
 800680a:	341a      	adds	r4, #26
 800680c:	454d      	cmp	r5, r9
 800680e:	d11a      	bne.n	8006846 <_printf_common+0xd6>
 8006810:	2000      	movs	r0, #0
 8006812:	e008      	b.n	8006826 <_printf_common+0xb6>
 8006814:	2301      	movs	r3, #1
 8006816:	4652      	mov	r2, sl
 8006818:	4639      	mov	r1, r7
 800681a:	4630      	mov	r0, r6
 800681c:	47c0      	blx	r8
 800681e:	3001      	adds	r0, #1
 8006820:	d103      	bne.n	800682a <_printf_common+0xba>
 8006822:	f04f 30ff 	mov.w	r0, #4294967295
 8006826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682a:	3501      	adds	r5, #1
 800682c:	e7c3      	b.n	80067b6 <_printf_common+0x46>
 800682e:	18e1      	adds	r1, r4, r3
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	2030      	movs	r0, #48	; 0x30
 8006834:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006838:	4422      	add	r2, r4
 800683a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800683e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006842:	3302      	adds	r3, #2
 8006844:	e7c5      	b.n	80067d2 <_printf_common+0x62>
 8006846:	2301      	movs	r3, #1
 8006848:	4622      	mov	r2, r4
 800684a:	4639      	mov	r1, r7
 800684c:	4630      	mov	r0, r6
 800684e:	47c0      	blx	r8
 8006850:	3001      	adds	r0, #1
 8006852:	d0e6      	beq.n	8006822 <_printf_common+0xb2>
 8006854:	f109 0901 	add.w	r9, r9, #1
 8006858:	e7d8      	b.n	800680c <_printf_common+0x9c>
	...

0800685c <_printf_i>:
 800685c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006860:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006864:	460c      	mov	r4, r1
 8006866:	7e09      	ldrb	r1, [r1, #24]
 8006868:	b085      	sub	sp, #20
 800686a:	296e      	cmp	r1, #110	; 0x6e
 800686c:	4617      	mov	r7, r2
 800686e:	4606      	mov	r6, r0
 8006870:	4698      	mov	r8, r3
 8006872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006874:	f000 80b3 	beq.w	80069de <_printf_i+0x182>
 8006878:	d822      	bhi.n	80068c0 <_printf_i+0x64>
 800687a:	2963      	cmp	r1, #99	; 0x63
 800687c:	d036      	beq.n	80068ec <_printf_i+0x90>
 800687e:	d80a      	bhi.n	8006896 <_printf_i+0x3a>
 8006880:	2900      	cmp	r1, #0
 8006882:	f000 80b9 	beq.w	80069f8 <_printf_i+0x19c>
 8006886:	2958      	cmp	r1, #88	; 0x58
 8006888:	f000 8083 	beq.w	8006992 <_printf_i+0x136>
 800688c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006890:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006894:	e032      	b.n	80068fc <_printf_i+0xa0>
 8006896:	2964      	cmp	r1, #100	; 0x64
 8006898:	d001      	beq.n	800689e <_printf_i+0x42>
 800689a:	2969      	cmp	r1, #105	; 0x69
 800689c:	d1f6      	bne.n	800688c <_printf_i+0x30>
 800689e:	6820      	ldr	r0, [r4, #0]
 80068a0:	6813      	ldr	r3, [r2, #0]
 80068a2:	0605      	lsls	r5, r0, #24
 80068a4:	f103 0104 	add.w	r1, r3, #4
 80068a8:	d52a      	bpl.n	8006900 <_printf_i+0xa4>
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6011      	str	r1, [r2, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	da03      	bge.n	80068ba <_printf_i+0x5e>
 80068b2:	222d      	movs	r2, #45	; 0x2d
 80068b4:	425b      	negs	r3, r3
 80068b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80068ba:	486f      	ldr	r0, [pc, #444]	; (8006a78 <_printf_i+0x21c>)
 80068bc:	220a      	movs	r2, #10
 80068be:	e039      	b.n	8006934 <_printf_i+0xd8>
 80068c0:	2973      	cmp	r1, #115	; 0x73
 80068c2:	f000 809d 	beq.w	8006a00 <_printf_i+0x1a4>
 80068c6:	d808      	bhi.n	80068da <_printf_i+0x7e>
 80068c8:	296f      	cmp	r1, #111	; 0x6f
 80068ca:	d020      	beq.n	800690e <_printf_i+0xb2>
 80068cc:	2970      	cmp	r1, #112	; 0x70
 80068ce:	d1dd      	bne.n	800688c <_printf_i+0x30>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	f043 0320 	orr.w	r3, r3, #32
 80068d6:	6023      	str	r3, [r4, #0]
 80068d8:	e003      	b.n	80068e2 <_printf_i+0x86>
 80068da:	2975      	cmp	r1, #117	; 0x75
 80068dc:	d017      	beq.n	800690e <_printf_i+0xb2>
 80068de:	2978      	cmp	r1, #120	; 0x78
 80068e0:	d1d4      	bne.n	800688c <_printf_i+0x30>
 80068e2:	2378      	movs	r3, #120	; 0x78
 80068e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068e8:	4864      	ldr	r0, [pc, #400]	; (8006a7c <_printf_i+0x220>)
 80068ea:	e055      	b.n	8006998 <_printf_i+0x13c>
 80068ec:	6813      	ldr	r3, [r2, #0]
 80068ee:	1d19      	adds	r1, r3, #4
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6011      	str	r1, [r2, #0]
 80068f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068fc:	2301      	movs	r3, #1
 80068fe:	e08c      	b.n	8006a1a <_printf_i+0x1be>
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6011      	str	r1, [r2, #0]
 8006904:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006908:	bf18      	it	ne
 800690a:	b21b      	sxthne	r3, r3
 800690c:	e7cf      	b.n	80068ae <_printf_i+0x52>
 800690e:	6813      	ldr	r3, [r2, #0]
 8006910:	6825      	ldr	r5, [r4, #0]
 8006912:	1d18      	adds	r0, r3, #4
 8006914:	6010      	str	r0, [r2, #0]
 8006916:	0628      	lsls	r0, r5, #24
 8006918:	d501      	bpl.n	800691e <_printf_i+0xc2>
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	e002      	b.n	8006924 <_printf_i+0xc8>
 800691e:	0668      	lsls	r0, r5, #25
 8006920:	d5fb      	bpl.n	800691a <_printf_i+0xbe>
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	4854      	ldr	r0, [pc, #336]	; (8006a78 <_printf_i+0x21c>)
 8006926:	296f      	cmp	r1, #111	; 0x6f
 8006928:	bf14      	ite	ne
 800692a:	220a      	movne	r2, #10
 800692c:	2208      	moveq	r2, #8
 800692e:	2100      	movs	r1, #0
 8006930:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006934:	6865      	ldr	r5, [r4, #4]
 8006936:	60a5      	str	r5, [r4, #8]
 8006938:	2d00      	cmp	r5, #0
 800693a:	f2c0 8095 	blt.w	8006a68 <_printf_i+0x20c>
 800693e:	6821      	ldr	r1, [r4, #0]
 8006940:	f021 0104 	bic.w	r1, r1, #4
 8006944:	6021      	str	r1, [r4, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d13d      	bne.n	80069c6 <_printf_i+0x16a>
 800694a:	2d00      	cmp	r5, #0
 800694c:	f040 808e 	bne.w	8006a6c <_printf_i+0x210>
 8006950:	4665      	mov	r5, ip
 8006952:	2a08      	cmp	r2, #8
 8006954:	d10b      	bne.n	800696e <_printf_i+0x112>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	07db      	lsls	r3, r3, #31
 800695a:	d508      	bpl.n	800696e <_printf_i+0x112>
 800695c:	6923      	ldr	r3, [r4, #16]
 800695e:	6862      	ldr	r2, [r4, #4]
 8006960:	429a      	cmp	r2, r3
 8006962:	bfde      	ittt	le
 8006964:	2330      	movle	r3, #48	; 0x30
 8006966:	f805 3c01 	strble.w	r3, [r5, #-1]
 800696a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800696e:	ebac 0305 	sub.w	r3, ip, r5
 8006972:	6123      	str	r3, [r4, #16]
 8006974:	f8cd 8000 	str.w	r8, [sp]
 8006978:	463b      	mov	r3, r7
 800697a:	aa03      	add	r2, sp, #12
 800697c:	4621      	mov	r1, r4
 800697e:	4630      	mov	r0, r6
 8006980:	f7ff fef6 	bl	8006770 <_printf_common>
 8006984:	3001      	adds	r0, #1
 8006986:	d14d      	bne.n	8006a24 <_printf_i+0x1c8>
 8006988:	f04f 30ff 	mov.w	r0, #4294967295
 800698c:	b005      	add	sp, #20
 800698e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006992:	4839      	ldr	r0, [pc, #228]	; (8006a78 <_printf_i+0x21c>)
 8006994:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006998:	6813      	ldr	r3, [r2, #0]
 800699a:	6821      	ldr	r1, [r4, #0]
 800699c:	1d1d      	adds	r5, r3, #4
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6015      	str	r5, [r2, #0]
 80069a2:	060a      	lsls	r2, r1, #24
 80069a4:	d50b      	bpl.n	80069be <_printf_i+0x162>
 80069a6:	07ca      	lsls	r2, r1, #31
 80069a8:	bf44      	itt	mi
 80069aa:	f041 0120 	orrmi.w	r1, r1, #32
 80069ae:	6021      	strmi	r1, [r4, #0]
 80069b0:	b91b      	cbnz	r3, 80069ba <_printf_i+0x15e>
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	f022 0220 	bic.w	r2, r2, #32
 80069b8:	6022      	str	r2, [r4, #0]
 80069ba:	2210      	movs	r2, #16
 80069bc:	e7b7      	b.n	800692e <_printf_i+0xd2>
 80069be:	064d      	lsls	r5, r1, #25
 80069c0:	bf48      	it	mi
 80069c2:	b29b      	uxthmi	r3, r3
 80069c4:	e7ef      	b.n	80069a6 <_printf_i+0x14a>
 80069c6:	4665      	mov	r5, ip
 80069c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80069cc:	fb02 3311 	mls	r3, r2, r1, r3
 80069d0:	5cc3      	ldrb	r3, [r0, r3]
 80069d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80069d6:	460b      	mov	r3, r1
 80069d8:	2900      	cmp	r1, #0
 80069da:	d1f5      	bne.n	80069c8 <_printf_i+0x16c>
 80069dc:	e7b9      	b.n	8006952 <_printf_i+0xf6>
 80069de:	6813      	ldr	r3, [r2, #0]
 80069e0:	6825      	ldr	r5, [r4, #0]
 80069e2:	6961      	ldr	r1, [r4, #20]
 80069e4:	1d18      	adds	r0, r3, #4
 80069e6:	6010      	str	r0, [r2, #0]
 80069e8:	0628      	lsls	r0, r5, #24
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	d501      	bpl.n	80069f2 <_printf_i+0x196>
 80069ee:	6019      	str	r1, [r3, #0]
 80069f0:	e002      	b.n	80069f8 <_printf_i+0x19c>
 80069f2:	066a      	lsls	r2, r5, #25
 80069f4:	d5fb      	bpl.n	80069ee <_printf_i+0x192>
 80069f6:	8019      	strh	r1, [r3, #0]
 80069f8:	2300      	movs	r3, #0
 80069fa:	6123      	str	r3, [r4, #16]
 80069fc:	4665      	mov	r5, ip
 80069fe:	e7b9      	b.n	8006974 <_printf_i+0x118>
 8006a00:	6813      	ldr	r3, [r2, #0]
 8006a02:	1d19      	adds	r1, r3, #4
 8006a04:	6011      	str	r1, [r2, #0]
 8006a06:	681d      	ldr	r5, [r3, #0]
 8006a08:	6862      	ldr	r2, [r4, #4]
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f7f9 fc07 	bl	8000220 <memchr>
 8006a12:	b108      	cbz	r0, 8006a18 <_printf_i+0x1bc>
 8006a14:	1b40      	subs	r0, r0, r5
 8006a16:	6060      	str	r0, [r4, #4]
 8006a18:	6863      	ldr	r3, [r4, #4]
 8006a1a:	6123      	str	r3, [r4, #16]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a22:	e7a7      	b.n	8006974 <_printf_i+0x118>
 8006a24:	6923      	ldr	r3, [r4, #16]
 8006a26:	462a      	mov	r2, r5
 8006a28:	4639      	mov	r1, r7
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	47c0      	blx	r8
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d0aa      	beq.n	8006988 <_printf_i+0x12c>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	079b      	lsls	r3, r3, #30
 8006a36:	d413      	bmi.n	8006a60 <_printf_i+0x204>
 8006a38:	68e0      	ldr	r0, [r4, #12]
 8006a3a:	9b03      	ldr	r3, [sp, #12]
 8006a3c:	4298      	cmp	r0, r3
 8006a3e:	bfb8      	it	lt
 8006a40:	4618      	movlt	r0, r3
 8006a42:	e7a3      	b.n	800698c <_printf_i+0x130>
 8006a44:	2301      	movs	r3, #1
 8006a46:	464a      	mov	r2, r9
 8006a48:	4639      	mov	r1, r7
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	47c0      	blx	r8
 8006a4e:	3001      	adds	r0, #1
 8006a50:	d09a      	beq.n	8006988 <_printf_i+0x12c>
 8006a52:	3501      	adds	r5, #1
 8006a54:	68e3      	ldr	r3, [r4, #12]
 8006a56:	9a03      	ldr	r2, [sp, #12]
 8006a58:	1a9b      	subs	r3, r3, r2
 8006a5a:	42ab      	cmp	r3, r5
 8006a5c:	dcf2      	bgt.n	8006a44 <_printf_i+0x1e8>
 8006a5e:	e7eb      	b.n	8006a38 <_printf_i+0x1dc>
 8006a60:	2500      	movs	r5, #0
 8006a62:	f104 0919 	add.w	r9, r4, #25
 8006a66:	e7f5      	b.n	8006a54 <_printf_i+0x1f8>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1ac      	bne.n	80069c6 <_printf_i+0x16a>
 8006a6c:	7803      	ldrb	r3, [r0, #0]
 8006a6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a76:	e76c      	b.n	8006952 <_printf_i+0xf6>
 8006a78:	08007341 	.word	0x08007341
 8006a7c:	08007352 	.word	0x08007352

08006a80 <memmove>:
 8006a80:	4288      	cmp	r0, r1
 8006a82:	b510      	push	{r4, lr}
 8006a84:	eb01 0302 	add.w	r3, r1, r2
 8006a88:	d807      	bhi.n	8006a9a <memmove+0x1a>
 8006a8a:	1e42      	subs	r2, r0, #1
 8006a8c:	4299      	cmp	r1, r3
 8006a8e:	d00a      	beq.n	8006aa6 <memmove+0x26>
 8006a90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a94:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a98:	e7f8      	b.n	8006a8c <memmove+0xc>
 8006a9a:	4283      	cmp	r3, r0
 8006a9c:	d9f5      	bls.n	8006a8a <memmove+0xa>
 8006a9e:	1881      	adds	r1, r0, r2
 8006aa0:	1ad2      	subs	r2, r2, r3
 8006aa2:	42d3      	cmn	r3, r2
 8006aa4:	d100      	bne.n	8006aa8 <memmove+0x28>
 8006aa6:	bd10      	pop	{r4, pc}
 8006aa8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006ab0:	e7f7      	b.n	8006aa2 <memmove+0x22>
	...

08006ab4 <_free_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	2900      	cmp	r1, #0
 8006aba:	d045      	beq.n	8006b48 <_free_r+0x94>
 8006abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac0:	1f0c      	subs	r4, r1, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bfb8      	it	lt
 8006ac6:	18e4      	addlt	r4, r4, r3
 8006ac8:	f000 f8d2 	bl	8006c70 <__malloc_lock>
 8006acc:	4a1f      	ldr	r2, [pc, #124]	; (8006b4c <_free_r+0x98>)
 8006ace:	6813      	ldr	r3, [r2, #0]
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	b933      	cbnz	r3, 8006ae2 <_free_r+0x2e>
 8006ad4:	6063      	str	r3, [r4, #4]
 8006ad6:	6014      	str	r4, [r2, #0]
 8006ad8:	4628      	mov	r0, r5
 8006ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ade:	f000 b8c8 	b.w	8006c72 <__malloc_unlock>
 8006ae2:	42a3      	cmp	r3, r4
 8006ae4:	d90c      	bls.n	8006b00 <_free_r+0x4c>
 8006ae6:	6821      	ldr	r1, [r4, #0]
 8006ae8:	1862      	adds	r2, r4, r1
 8006aea:	4293      	cmp	r3, r2
 8006aec:	bf04      	itt	eq
 8006aee:	681a      	ldreq	r2, [r3, #0]
 8006af0:	685b      	ldreq	r3, [r3, #4]
 8006af2:	6063      	str	r3, [r4, #4]
 8006af4:	bf04      	itt	eq
 8006af6:	1852      	addeq	r2, r2, r1
 8006af8:	6022      	streq	r2, [r4, #0]
 8006afa:	6004      	str	r4, [r0, #0]
 8006afc:	e7ec      	b.n	8006ad8 <_free_r+0x24>
 8006afe:	4613      	mov	r3, r2
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	b10a      	cbz	r2, 8006b08 <_free_r+0x54>
 8006b04:	42a2      	cmp	r2, r4
 8006b06:	d9fa      	bls.n	8006afe <_free_r+0x4a>
 8006b08:	6819      	ldr	r1, [r3, #0]
 8006b0a:	1858      	adds	r0, r3, r1
 8006b0c:	42a0      	cmp	r0, r4
 8006b0e:	d10b      	bne.n	8006b28 <_free_r+0x74>
 8006b10:	6820      	ldr	r0, [r4, #0]
 8006b12:	4401      	add	r1, r0
 8006b14:	1858      	adds	r0, r3, r1
 8006b16:	4282      	cmp	r2, r0
 8006b18:	6019      	str	r1, [r3, #0]
 8006b1a:	d1dd      	bne.n	8006ad8 <_free_r+0x24>
 8006b1c:	6810      	ldr	r0, [r2, #0]
 8006b1e:	6852      	ldr	r2, [r2, #4]
 8006b20:	605a      	str	r2, [r3, #4]
 8006b22:	4401      	add	r1, r0
 8006b24:	6019      	str	r1, [r3, #0]
 8006b26:	e7d7      	b.n	8006ad8 <_free_r+0x24>
 8006b28:	d902      	bls.n	8006b30 <_free_r+0x7c>
 8006b2a:	230c      	movs	r3, #12
 8006b2c:	602b      	str	r3, [r5, #0]
 8006b2e:	e7d3      	b.n	8006ad8 <_free_r+0x24>
 8006b30:	6820      	ldr	r0, [r4, #0]
 8006b32:	1821      	adds	r1, r4, r0
 8006b34:	428a      	cmp	r2, r1
 8006b36:	bf04      	itt	eq
 8006b38:	6811      	ldreq	r1, [r2, #0]
 8006b3a:	6852      	ldreq	r2, [r2, #4]
 8006b3c:	6062      	str	r2, [r4, #4]
 8006b3e:	bf04      	itt	eq
 8006b40:	1809      	addeq	r1, r1, r0
 8006b42:	6021      	streq	r1, [r4, #0]
 8006b44:	605c      	str	r4, [r3, #4]
 8006b46:	e7c7      	b.n	8006ad8 <_free_r+0x24>
 8006b48:	bd38      	pop	{r3, r4, r5, pc}
 8006b4a:	bf00      	nop
 8006b4c:	200000cc 	.word	0x200000cc

08006b50 <_malloc_r>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	1ccd      	adds	r5, r1, #3
 8006b54:	f025 0503 	bic.w	r5, r5, #3
 8006b58:	3508      	adds	r5, #8
 8006b5a:	2d0c      	cmp	r5, #12
 8006b5c:	bf38      	it	cc
 8006b5e:	250c      	movcc	r5, #12
 8006b60:	2d00      	cmp	r5, #0
 8006b62:	4606      	mov	r6, r0
 8006b64:	db01      	blt.n	8006b6a <_malloc_r+0x1a>
 8006b66:	42a9      	cmp	r1, r5
 8006b68:	d903      	bls.n	8006b72 <_malloc_r+0x22>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	6033      	str	r3, [r6, #0]
 8006b6e:	2000      	movs	r0, #0
 8006b70:	bd70      	pop	{r4, r5, r6, pc}
 8006b72:	f000 f87d 	bl	8006c70 <__malloc_lock>
 8006b76:	4a21      	ldr	r2, [pc, #132]	; (8006bfc <_malloc_r+0xac>)
 8006b78:	6814      	ldr	r4, [r2, #0]
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	b991      	cbnz	r1, 8006ba4 <_malloc_r+0x54>
 8006b7e:	4c20      	ldr	r4, [pc, #128]	; (8006c00 <_malloc_r+0xb0>)
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	b91b      	cbnz	r3, 8006b8c <_malloc_r+0x3c>
 8006b84:	4630      	mov	r0, r6
 8006b86:	f000 f863 	bl	8006c50 <_sbrk_r>
 8006b8a:	6020      	str	r0, [r4, #0]
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4630      	mov	r0, r6
 8006b90:	f000 f85e 	bl	8006c50 <_sbrk_r>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d124      	bne.n	8006be2 <_malloc_r+0x92>
 8006b98:	230c      	movs	r3, #12
 8006b9a:	6033      	str	r3, [r6, #0]
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f000 f868 	bl	8006c72 <__malloc_unlock>
 8006ba2:	e7e4      	b.n	8006b6e <_malloc_r+0x1e>
 8006ba4:	680b      	ldr	r3, [r1, #0]
 8006ba6:	1b5b      	subs	r3, r3, r5
 8006ba8:	d418      	bmi.n	8006bdc <_malloc_r+0x8c>
 8006baa:	2b0b      	cmp	r3, #11
 8006bac:	d90f      	bls.n	8006bce <_malloc_r+0x7e>
 8006bae:	600b      	str	r3, [r1, #0]
 8006bb0:	50cd      	str	r5, [r1, r3]
 8006bb2:	18cc      	adds	r4, r1, r3
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f000 f85c 	bl	8006c72 <__malloc_unlock>
 8006bba:	f104 000b 	add.w	r0, r4, #11
 8006bbe:	1d23      	adds	r3, r4, #4
 8006bc0:	f020 0007 	bic.w	r0, r0, #7
 8006bc4:	1ac3      	subs	r3, r0, r3
 8006bc6:	d0d3      	beq.n	8006b70 <_malloc_r+0x20>
 8006bc8:	425a      	negs	r2, r3
 8006bca:	50e2      	str	r2, [r4, r3]
 8006bcc:	e7d0      	b.n	8006b70 <_malloc_r+0x20>
 8006bce:	428c      	cmp	r4, r1
 8006bd0:	684b      	ldr	r3, [r1, #4]
 8006bd2:	bf16      	itet	ne
 8006bd4:	6063      	strne	r3, [r4, #4]
 8006bd6:	6013      	streq	r3, [r2, #0]
 8006bd8:	460c      	movne	r4, r1
 8006bda:	e7eb      	b.n	8006bb4 <_malloc_r+0x64>
 8006bdc:	460c      	mov	r4, r1
 8006bde:	6849      	ldr	r1, [r1, #4]
 8006be0:	e7cc      	b.n	8006b7c <_malloc_r+0x2c>
 8006be2:	1cc4      	adds	r4, r0, #3
 8006be4:	f024 0403 	bic.w	r4, r4, #3
 8006be8:	42a0      	cmp	r0, r4
 8006bea:	d005      	beq.n	8006bf8 <_malloc_r+0xa8>
 8006bec:	1a21      	subs	r1, r4, r0
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f000 f82e 	bl	8006c50 <_sbrk_r>
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d0cf      	beq.n	8006b98 <_malloc_r+0x48>
 8006bf8:	6025      	str	r5, [r4, #0]
 8006bfa:	e7db      	b.n	8006bb4 <_malloc_r+0x64>
 8006bfc:	200000cc 	.word	0x200000cc
 8006c00:	200000d0 	.word	0x200000d0

08006c04 <_realloc_r>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	4607      	mov	r7, r0
 8006c08:	4614      	mov	r4, r2
 8006c0a:	460e      	mov	r6, r1
 8006c0c:	b921      	cbnz	r1, 8006c18 <_realloc_r+0x14>
 8006c0e:	4611      	mov	r1, r2
 8006c10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c14:	f7ff bf9c 	b.w	8006b50 <_malloc_r>
 8006c18:	b922      	cbnz	r2, 8006c24 <_realloc_r+0x20>
 8006c1a:	f7ff ff4b 	bl	8006ab4 <_free_r>
 8006c1e:	4625      	mov	r5, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c24:	f000 f826 	bl	8006c74 <_malloc_usable_size_r>
 8006c28:	42a0      	cmp	r0, r4
 8006c2a:	d20f      	bcs.n	8006c4c <_realloc_r+0x48>
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4638      	mov	r0, r7
 8006c30:	f7ff ff8e 	bl	8006b50 <_malloc_r>
 8006c34:	4605      	mov	r5, r0
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d0f2      	beq.n	8006c20 <_realloc_r+0x1c>
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	f7ff fc11 	bl	8006464 <memcpy>
 8006c42:	4631      	mov	r1, r6
 8006c44:	4638      	mov	r0, r7
 8006c46:	f7ff ff35 	bl	8006ab4 <_free_r>
 8006c4a:	e7e9      	b.n	8006c20 <_realloc_r+0x1c>
 8006c4c:	4635      	mov	r5, r6
 8006c4e:	e7e7      	b.n	8006c20 <_realloc_r+0x1c>

08006c50 <_sbrk_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4c06      	ldr	r4, [pc, #24]	; (8006c6c <_sbrk_r+0x1c>)
 8006c54:	2300      	movs	r3, #0
 8006c56:	4605      	mov	r5, r0
 8006c58:	4608      	mov	r0, r1
 8006c5a:	6023      	str	r3, [r4, #0]
 8006c5c:	f7fc fb24 	bl	80032a8 <_sbrk>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d102      	bne.n	8006c6a <_sbrk_r+0x1a>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	b103      	cbz	r3, 8006c6a <_sbrk_r+0x1a>
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	20002e14 	.word	0x20002e14

08006c70 <__malloc_lock>:
 8006c70:	4770      	bx	lr

08006c72 <__malloc_unlock>:
 8006c72:	4770      	bx	lr

08006c74 <_malloc_usable_size_r>:
 8006c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c78:	1f18      	subs	r0, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfbc      	itt	lt
 8006c7e:	580b      	ldrlt	r3, [r1, r0]
 8006c80:	18c0      	addlt	r0, r0, r3
 8006c82:	4770      	bx	lr

08006c84 <_init>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	bf00      	nop
 8006c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8a:	bc08      	pop	{r3}
 8006c8c:	469e      	mov	lr, r3
 8006c8e:	4770      	bx	lr

08006c90 <_fini>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	bf00      	nop
 8006c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c96:	bc08      	pop	{r3}
 8006c98:	469e      	mov	lr, r3
 8006c9a:	4770      	bx	lr
