
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007840  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  08007a10  08007a10  00017a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080b0  080080b0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080b8  080080b8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080b8  080080b8  000180b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080bc  080080bc  000180bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080080c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029d0  20000084  08008144  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a54  08008144  00022a54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001424a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000298a  00000000  00000000  000342fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  00036c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  00037b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023756  00000000  00000000  00038920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf2f  00000000  00000000  0005c076  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d298d  00000000  00000000  00068fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f0  00000000  00000000  0013b9b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080079f8 	.word	0x080079f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	080079f8 	.word	0x080079f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	80fb      	strh	r3, [r7, #6]
 80005cc:	4613      	mov	r3, r2
 80005ce:	717b      	strb	r3, [r7, #5]
    int temp;

    sprintf(uartData, "\nSelector              = %d",select_8_16);
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	461a      	mov	r2, r3
 80005d4:	4951      	ldr	r1, [pc, #324]	; (800071c <conv_HEX_to_BIN+0x15c>)
 80005d6:	4852      	ldr	r0, [pc, #328]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005d8:	f006 fe2c 	bl	8007234 <siprintf>
    HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80005dc:	4850      	ldr	r0, [pc, #320]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005de:	f7ff fe17 	bl	8000210 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	230a      	movs	r3, #10
 80005e8:	494d      	ldr	r1, [pc, #308]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005ea:	484e      	ldr	r0, [pc, #312]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80005ec:	f005 fee1 	bl	80063b2 <HAL_UART_Transmit>

    sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	461a      	mov	r2, r3
 80005f4:	494c      	ldr	r1, [pc, #304]	; (8000728 <conv_HEX_to_BIN+0x168>)
 80005f6:	484a      	ldr	r0, [pc, #296]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005f8:	f006 fe1c 	bl	8007234 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80005fc:	4848      	ldr	r0, [pc, #288]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005fe:	f7ff fe07 	bl	8000210 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	230a      	movs	r3, #10
 8000608:	4945      	ldr	r1, [pc, #276]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800060a:	4846      	ldr	r0, [pc, #280]	; (8000724 <conv_HEX_to_BIN+0x164>)
 800060c:	f005 fed1 	bl	80063b2 <HAL_UART_Transmit>

    if(select_8_16){
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01f      	beq.n	8000656 <conv_HEX_to_BIN+0x96>
		for(int i = 0; i < 8; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e018      	b.n	800064e <conv_HEX_to_BIN+0x8e>
			temp = hex_byte_in >> i;
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	fa42 f303 	asr.w	r3, r2, r3
 8000624:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	bfb8      	it	lt
 8000630:	425b      	neglt	r3, r3
 8000632:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	2a00      	cmp	r2, #0
 800063e:	bf14      	ite	ne
 8000640:	2201      	movne	r2, #1
 8000642:	2200      	moveq	r2, #0
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	2b07      	cmp	r3, #7
 8000652:	dde3      	ble.n	800061c <conv_HEX_to_BIN+0x5c>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000654:	e05e      	b.n	8000714 <conv_HEX_to_BIN+0x154>
	   sprintf(uartData, "\nByte value            = %x\nBinary value[LSB:MSB] =",hex_byte_in);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	461a      	mov	r2, r3
 800065a:	4934      	ldr	r1, [pc, #208]	; (800072c <conv_HEX_to_BIN+0x16c>)
 800065c:	4830      	ldr	r0, [pc, #192]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800065e:	f006 fde9 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000662:	482f      	ldr	r0, [pc, #188]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000664:	f7ff fdd4 	bl	8000210 <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	b29a      	uxth	r2, r3
 800066c:	230a      	movs	r3, #10
 800066e:	492c      	ldr	r1, [pc, #176]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000670:	482c      	ldr	r0, [pc, #176]	; (8000724 <conv_HEX_to_BIN+0x164>)
 8000672:	f005 fe9e 	bl	80063b2 <HAL_UART_Transmit>
		for(int i = 0; i < 16; i++){
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	e038      	b.n	80006ee <conv_HEX_to_BIN+0x12e>
			temp = hex_byte_in >> i;
 800067c:	88fa      	ldrh	r2, [r7, #6]
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	fa42 f303 	asr.w	r3, r2, r3
 8000684:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " b=%d ",temp);
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4929      	ldr	r1, [pc, #164]	; (8000730 <conv_HEX_to_BIN+0x170>)
 800068a:	4825      	ldr	r0, [pc, #148]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800068c:	f006 fdd2 	bl	8007234 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000690:	4823      	ldr	r0, [pc, #140]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000692:	f7ff fdbd 	bl	8000210 <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	b29a      	uxth	r2, r3
 800069a:	230a      	movs	r3, #10
 800069c:	4920      	ldr	r1, [pc, #128]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800069e:	4821      	ldr	r0, [pc, #132]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80006a0:	f005 fe87 	bl	80063b2 <HAL_UART_Transmit>
			temp = temp%2;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " a=%d ",temp);
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	491f      	ldr	r1, [pc, #124]	; (8000734 <conv_HEX_to_BIN+0x174>)
 80006b6:	481a      	ldr	r0, [pc, #104]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006b8:	f006 fdbc 	bl	8007234 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80006bc:	4818      	ldr	r0, [pc, #96]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006be:	f7ff fda7 	bl	8000210 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	230a      	movs	r3, #10
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006ca:	4816      	ldr	r0, [pc, #88]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80006cc:	f005 fe71 	bl	80063b2 <HAL_UART_Transmit>
			*(bin_byte_out + 16 - 1 - i) = temp; //MSB is at lowest index
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	f1c3 030f 	rsb	r3, r3, #15
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	4413      	add	r3, r2
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	2a00      	cmp	r2, #0
 80006de:	bf14      	ite	ne
 80006e0:	2201      	movne	r2, #1
 80006e2:	2200      	moveq	r2, #0
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	3301      	adds	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	ddc3      	ble.n	800067c <conv_HEX_to_BIN+0xbc>
		sprintf(uartData, "\n ");
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <conv_HEX_to_BIN+0x178>)
 80006f8:	8811      	ldrh	r1, [r2, #0]
 80006fa:	7892      	ldrb	r2, [r2, #2]
 80006fc:	8019      	strh	r1, [r3, #0]
 80006fe:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000702:	f7ff fd85 	bl	8000210 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	b29a      	uxth	r2, r3
 800070a:	230a      	movs	r3, #10
 800070c:	4904      	ldr	r1, [pc, #16]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <conv_HEX_to_BIN+0x164>)
 8000710:	f005 fe4f 	bl	80063b2 <HAL_UART_Transmit>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	08007a10 	.word	0x08007a10
 8000720:	20001ccc 	.word	0x20001ccc
 8000724:	200029c8 	.word	0x200029c8
 8000728:	08007a2c 	.word	0x08007a2c
 800072c:	08007a60 	.word	0x08007a60
 8000730:	08007a94 	.word	0x08007a94
 8000734:	08007a9c 	.word	0x08007a9c
 8000738:	08007aa4 	.word	0x08007aa4

0800073c <tx_rx>:
	return acc;
}

//General Program
//****************************************************************************************************************
void tx_rx() {
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	if (changeMode) {
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <tx_rx+0x90>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d004      	beq.n	8000754 <tx_rx+0x18>
		changeMode = 0;
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <tx_rx+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
		toggleMode();
 8000750:	f000 ffc4 	bl	80016dc <toggleMode>
	}

	//Transmission Mode
	if (mode) {
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <tx_rx+0x94>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00f      	beq.n	800077c <tx_rx+0x40>
		bool packet_received = false;
 800075c:	2300      	movs	r3, #0
 800075e:	71bb      	strb	r3, [r7, #6]
		bool packet_converted = false;
 8000760:	2300      	movs	r3, #0
 8000762:	717b      	strb	r3, [r7, #5]

		//Run receiving KISS
		packet_received = receiving_KISS();
 8000764:	f000 faa0 	bl	8000ca8 <receiving_KISS>
 8000768:	4603      	mov	r3, r0
 800076a:	71bb      	strb	r3, [r7, #6]

		if(packet_received){
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d027      	beq.n	80007c2 <tx_rx+0x86>
			//Convert KISS packet to AX.25 packet
			packet_converted = KISS_TO_AX25();
 8000772:	f000 fb61 	bl	8000e38 <KISS_TO_AX25>
 8000776:	4603      	mov	r3, r0
 8000778:	717b      	strb	r3, [r7, #5]
		if(!change){
			sprintf(uartData, "Changing mode due to request\n");
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
}
 800077a:	e022      	b.n	80007c2 <tx_rx+0x86>
		bool change = receiving_AX25();
 800077c:	f000 f830 	bl	80007e0 <receiving_AX25>
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
		if(!change){
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f083 0301 	eor.w	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d018      	beq.n	80007c2 <tx_rx+0x86>
			sprintf(uartData, "Changing mode due to request\n");
 8000790:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <tx_rx+0x98>)
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <tx_rx+0x9c>)
 8000794:	4615      	mov	r5, r2
 8000796:	461c      	mov	r4, r3
 8000798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800079a:	6028      	str	r0, [r5, #0]
 800079c:	6069      	str	r1, [r5, #4]
 800079e:	60aa      	str	r2, [r5, #8]
 80007a0:	60eb      	str	r3, [r5, #12]
 80007a2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80007a4:	6128      	str	r0, [r5, #16]
 80007a6:	6169      	str	r1, [r5, #20]
 80007a8:	61aa      	str	r2, [r5, #24]
 80007aa:	8823      	ldrh	r3, [r4, #0]
 80007ac:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80007ae:	4809      	ldr	r0, [pc, #36]	; (80007d4 <tx_rx+0x98>)
 80007b0:	f7ff fd2e 	bl	8000210 <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	230a      	movs	r3, #10
 80007ba:	4906      	ldr	r1, [pc, #24]	; (80007d4 <tx_rx+0x98>)
 80007bc:	4807      	ldr	r0, [pc, #28]	; (80007dc <tx_rx+0xa0>)
 80007be:	f005 fdf8 	bl	80063b2 <HAL_UART_Transmit>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bdb0      	pop	{r4, r5, r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000a5 	.word	0x200000a5
 80007d0:	20002970 	.word	0x20002970
 80007d4:	20001ccc 	.word	0x20001ccc
 80007d8:	08007aa8 	.word	0x08007aa8
 80007dc:	200029c8 	.word	0x200029c8

080007e0 <receiving_AX25>:
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 80007e6:	4a50      	ldr	r2, [pc, #320]	; (8000928 <receiving_AX25+0x148>)
 80007e8:	4b50      	ldr	r3, [pc, #320]	; (800092c <receiving_AX25+0x14c>)
 80007ea:	4615      	mov	r5, r2
 80007ec:	461c      	mov	r4, r3
 80007ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f0:	6028      	str	r0, [r5, #0]
 80007f2:	6069      	str	r1, [r5, #4]
 80007f4:	60aa      	str	r2, [r5, #8]
 80007f6:	60eb      	str	r3, [r5, #12]
 80007f8:	cc03      	ldmia	r4!, {r0, r1}
 80007fa:	6128      	str	r0, [r5, #16]
 80007fc:	6169      	str	r1, [r5, #20]
 80007fe:	7823      	ldrb	r3, [r4, #0]
 8000800:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000802:	4849      	ldr	r0, [pc, #292]	; (8000928 <receiving_AX25+0x148>)
 8000804:	f7ff fd04 	bl	8000210 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	b29a      	uxth	r2, r3
 800080c:	230a      	movs	r3, #10
 800080e:	4946      	ldr	r1, [pc, #280]	; (8000928 <receiving_AX25+0x148>)
 8000810:	4847      	ldr	r0, [pc, #284]	; (8000930 <receiving_AX25+0x150>)
 8000812:	f005 fdce 	bl	80063b2 <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000816:	4b47      	ldr	r3, [pc, #284]	; (8000934 <receiving_AX25+0x154>)
 8000818:	60fb      	str	r3, [r7, #12]

	int packet_status;
//	packet_status = streamGet();

	//Valid packet received
	if(packet_status == 1){
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d13b      	bne.n	8000898 <receiving_AX25+0xb8>
		//Remove the bit stuffed zeros from received packet and reset packet type
		//remove_bit_stuffing();
		local_packet->i_frame_packet = false;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000826:	3308      	adds	r3, #8
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]

		//Validate packet
		bool AX25_IsValid = AX25_Packet_Validate();
 800082c:	f000 f88a 	bl	8000944 <AX25_Packet_Validate>
 8000830:	4603      	mov	r3, r0
 8000832:	71fb      	strb	r3, [r7, #7]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		if(AX25_IsValid){
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00b      	beq.n	8000852 <receiving_AX25+0x72>
			//Put data into KISS format and buffer
			AX25_TO_KISS();
 800083a:	f000 f9ab 	bl	8000b94 <AX25_TO_KISS>

			//Transmit KISS Packet that has been generated
			//output_KISS();

			//Clear AX.25 buffer
			memset(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f640 225f 	movw	r2, #2655	; 0xa5f
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f006 fcec 	bl	8007224 <memset>

			//Loop back and begin receiving another message
			receiving_AX25();
 800084c:	f7ff ffc8 	bl	80007e0 <receiving_AX25>
 8000850:	e065      	b.n	800091e <receiving_AX25+0x13e>
		}
		else{
			sprintf(uartData, "Packet was not valid, restarting\n");
 8000852:	4b35      	ldr	r3, [pc, #212]	; (8000928 <receiving_AX25+0x148>)
 8000854:	4a38      	ldr	r2, [pc, #224]	; (8000938 <receiving_AX25+0x158>)
 8000856:	4614      	mov	r4, r2
 8000858:	469c      	mov	ip, r3
 800085a:	f104 0e20 	add.w	lr, r4, #32
 800085e:	4665      	mov	r5, ip
 8000860:	4626      	mov	r6, r4
 8000862:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000864:	6028      	str	r0, [r5, #0]
 8000866:	6069      	str	r1, [r5, #4]
 8000868:	60aa      	str	r2, [r5, #8]
 800086a:	60eb      	str	r3, [r5, #12]
 800086c:	3410      	adds	r4, #16
 800086e:	f10c 0c10 	add.w	ip, ip, #16
 8000872:	4574      	cmp	r4, lr
 8000874:	d1f3      	bne.n	800085e <receiving_AX25+0x7e>
 8000876:	4662      	mov	r2, ip
 8000878:	4623      	mov	r3, r4
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800087e:	482a      	ldr	r0, [pc, #168]	; (8000928 <receiving_AX25+0x148>)
 8000880:	f7ff fcc6 	bl	8000210 <strlen>
 8000884:	4603      	mov	r3, r0
 8000886:	b29a      	uxth	r2, r3
 8000888:	230a      	movs	r3, #10
 800088a:	4927      	ldr	r1, [pc, #156]	; (8000928 <receiving_AX25+0x148>)
 800088c:	4828      	ldr	r0, [pc, #160]	; (8000930 <receiving_AX25+0x150>)
 800088e:	f005 fd90 	bl	80063b2 <HAL_UART_Transmit>
			receiving_AX25();
 8000892:	f7ff ffa5 	bl	80007e0 <receiving_AX25>
 8000896:	e042      	b.n	800091e <receiving_AX25+0x13e>
		}
	}
	//Return code for toggleMode
	else if(packet_status == -1){
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800089e:	d118      	bne.n	80008d2 <receiving_AX25+0xf2>
		sprintf(uartData, "Need to change mode\n");
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <receiving_AX25+0x148>)
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <receiving_AX25+0x15c>)
 80008a4:	4615      	mov	r5, r2
 80008a6:	461c      	mov	r4, r3
 80008a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008aa:	6028      	str	r0, [r5, #0]
 80008ac:	6069      	str	r1, [r5, #4]
 80008ae:	60aa      	str	r2, [r5, #8]
 80008b0:	60eb      	str	r3, [r5, #12]
 80008b2:	6820      	ldr	r0, [r4, #0]
 80008b4:	6128      	str	r0, [r5, #16]
 80008b6:	7923      	ldrb	r3, [r4, #4]
 80008b8:	752b      	strb	r3, [r5, #20]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80008ba:	481b      	ldr	r0, [pc, #108]	; (8000928 <receiving_AX25+0x148>)
 80008bc:	f7ff fca8 	bl	8000210 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	230a      	movs	r3, #10
 80008c6:	4918      	ldr	r1, [pc, #96]	; (8000928 <receiving_AX25+0x148>)
 80008c8:	4819      	ldr	r0, [pc, #100]	; (8000930 <receiving_AX25+0x150>)
 80008ca:	f005 fd72 	bl	80063b2 <HAL_UART_Transmit>

		return false;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e025      	b.n	800091e <receiving_AX25+0x13e>
	}
	//Weird case of unknown return code toggles mode
	else{
		sprintf(uartData, "Packet status was unknown, restarting\n");
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <receiving_AX25+0x148>)
 80008d4:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <receiving_AX25+0x160>)
 80008d6:	4614      	mov	r4, r2
 80008d8:	469c      	mov	ip, r3
 80008da:	f104 0e20 	add.w	lr, r4, #32
 80008de:	4665      	mov	r5, ip
 80008e0:	4626      	mov	r6, r4
 80008e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008e4:	6028      	str	r0, [r5, #0]
 80008e6:	6069      	str	r1, [r5, #4]
 80008e8:	60aa      	str	r2, [r5, #8]
 80008ea:	60eb      	str	r3, [r5, #12]
 80008ec:	3410      	adds	r4, #16
 80008ee:	f10c 0c10 	add.w	ip, ip, #16
 80008f2:	4574      	cmp	r4, lr
 80008f4:	d1f3      	bne.n	80008de <receiving_AX25+0xfe>
 80008f6:	4663      	mov	r3, ip
 80008f8:	4622      	mov	r2, r4
 80008fa:	6810      	ldr	r0, [r2, #0]
 80008fc:	6018      	str	r0, [r3, #0]
 80008fe:	8891      	ldrh	r1, [r2, #4]
 8000900:	7992      	ldrb	r2, [r2, #6]
 8000902:	8099      	strh	r1, [r3, #4]
 8000904:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000906:	4808      	ldr	r0, [pc, #32]	; (8000928 <receiving_AX25+0x148>)
 8000908:	f7ff fc82 	bl	8000210 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	b29a      	uxth	r2, r3
 8000910:	230a      	movs	r3, #10
 8000912:	4905      	ldr	r1, [pc, #20]	; (8000928 <receiving_AX25+0x148>)
 8000914:	4806      	ldr	r0, [pc, #24]	; (8000930 <receiving_AX25+0x150>)
 8000916:	f005 fd4c 	bl	80063b2 <HAL_UART_Transmit>
		receiving_AX25();
 800091a:	f7ff ff61 	bl	80007e0 <receiving_AX25>
	}
}
 800091e:	4618      	mov	r0, r3
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	bf00      	nop
 8000928:	20001ccc 	.word	0x20001ccc
 800092c:	08007b5c 	.word	0x08007b5c
 8000930:	200029c8 	.word	0x200029c8
 8000934:	200000c8 	.word	0x200000c8
 8000938:	08007b78 	.word	0x08007b78
 800093c:	08007b9c 	.word	0x08007b9c
 8000940:	08007bb4 	.word	0x08007bb4

08000944 <AX25_Packet_Validate>:
		}
	}
	//transmit kiss
}

bool AX25_Packet_Validate(){
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <AX25_Packet_Validate+0x5c>)
 800094c:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <AX25_Packet_Validate+0x60>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b77      	cmp	r3, #119	; 0x77
 8000958:	dc0a      	bgt.n	8000970 <AX25_Packet_Validate+0x2c>
		sprintf(uartData,"Trash Packet");
 800095a:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <AX25_Packet_Validate+0x64>)
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <AX25_Packet_Validate+0x68>)
 800095e:	4614      	mov	r4, r2
 8000960:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000962:	6020      	str	r0, [r4, #0]
 8000964:	6061      	str	r1, [r4, #4]
 8000966:	60a2      	str	r2, [r4, #8]
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	7323      	strb	r3, [r4, #12]
		return false;
 800096c:	2300      	movs	r3, #0
 800096e:	e013      	b.n	8000998 <AX25_Packet_Validate+0x54>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <AX25_Packet_Validate+0x60>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0307 	and.w	r3, r3, #7
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00a      	beq.n	8000992 <AX25_Packet_Validate+0x4e>
		sprintf(uartData,"Trash Packet");
 800097c:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <AX25_Packet_Validate+0x64>)
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <AX25_Packet_Validate+0x68>)
 8000980:	4614      	mov	r4, r2
 8000982:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000984:	6020      	str	r0, [r4, #0]
 8000986:	6061      	str	r1, [r4, #4]
 8000988:	60a2      	str	r2, [r4, #8]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	7323      	strb	r3, [r4, #12]
		return false;
 800098e:	2300      	movs	r3, #0
 8000990:	e002      	b.n	8000998 <AX25_Packet_Validate+0x54>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 8000992:	f000 f80d 	bl	80009b0 <set_packet_pointer_AX25>
		//return crc_check();
		return true;
 8000996:	2301      	movs	r3, #1
	}

//	return true; //valid packet
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	200000c8 	.word	0x200000c8
 80009a4:	200000a0 	.word	0x200000a0
 80009a8:	20001ccc 	.word	0x20001ccc
 80009ac:	08007c34 	.word	0x08007c34

080009b0 <set_packet_pointer_AX25>:


void set_packet_pointer_AX25(){
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80009b6:	4b6e      	ldr	r3, [pc, #440]	; (8000b70 <set_packet_pointer_AX25+0x1c0>)
 80009b8:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 80009ba:	2310      	movs	r3, #16
 80009bc:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 80009be:	4b6d      	ldr	r3, [pc, #436]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 80009c0:	4a6d      	ldr	r2, [pc, #436]	; (8000b78 <set_packet_pointer_AX25+0x1c8>)
 80009c2:	4614      	mov	r4, r2
 80009c4:	469c      	mov	ip, r3
 80009c6:	f104 0e20 	add.w	lr, r4, #32
 80009ca:	4665      	mov	r5, ip
 80009cc:	4626      	mov	r6, r4
 80009ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80009d0:	6028      	str	r0, [r5, #0]
 80009d2:	6069      	str	r1, [r5, #4]
 80009d4:	60aa      	str	r2, [r5, #8]
 80009d6:	60eb      	str	r3, [r5, #12]
 80009d8:	3410      	adds	r4, #16
 80009da:	f10c 0c10 	add.w	ip, ip, #16
 80009de:	4574      	cmp	r4, lr
 80009e0:	d1f3      	bne.n	80009ca <set_packet_pointer_AX25+0x1a>
 80009e2:	4663      	mov	r3, ip
 80009e4:	4622      	mov	r2, r4
 80009e6:	7812      	ldrb	r2, [r2, #0]
 80009e8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009ea:	4862      	ldr	r0, [pc, #392]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 80009ec:	f7ff fc10 	bl	8000210 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	230a      	movs	r3, #10
 80009f6:	495f      	ldr	r1, [pc, #380]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 80009f8:	4860      	ldr	r0, [pc, #384]	; (8000b7c <set_packet_pointer_AX25+0x1cc>)
 80009fa:	f005 fcda 	bl	80063b2 <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 8000a02:	4a5c      	ldr	r2, [pc, #368]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000a04:	4b5e      	ldr	r3, [pc, #376]	; (8000b80 <set_packet_pointer_AX25+0x1d0>)
 8000a06:	4615      	mov	r5, r2
 8000a08:	461c      	mov	r4, r3
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000a16:	6128      	str	r0, [r5, #16]
 8000a18:	6169      	str	r1, [r5, #20]
 8000a1a:	61aa      	str	r2, [r5, #24]
 8000a1c:	7823      	ldrb	r3, [r4, #0]
 8000a1e:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a20:	4854      	ldr	r0, [pc, #336]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000a22:	f7ff fbf5 	bl	8000210 <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	4951      	ldr	r1, [pc, #324]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000a2e:	4853      	ldr	r0, [pc, #332]	; (8000b7c <set_packet_pointer_AX25+0x1cc>)
 8000a30:	f005 fcbf 	bl	80063b2 <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000a3a:	3310      	adds	r3, #16
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3370      	adds	r3, #112	; 0x70
 8000a44:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	3370      	adds	r3, #112	; 0x70
 8000a4a:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 8000a4c:	4a49      	ldr	r2, [pc, #292]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000a4e:	4b4d      	ldr	r3, [pc, #308]	; (8000b84 <set_packet_pointer_AX25+0x1d4>)
 8000a50:	4615      	mov	r5, r2
 8000a52:	461c      	mov	r4, r3
 8000a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a56:	6028      	str	r0, [r5, #0]
 8000a58:	6069      	str	r1, [r5, #4]
 8000a5a:	60aa      	str	r2, [r5, #8]
 8000a5c:	60eb      	str	r3, [r5, #12]
 8000a5e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000a60:	6128      	str	r0, [r5, #16]
 8000a62:	6169      	str	r1, [r5, #20]
 8000a64:	61aa      	str	r2, [r5, #24]
 8000a66:	7823      	ldrb	r3, [r4, #0]
 8000a68:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a6a:	4842      	ldr	r0, [pc, #264]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000a6c:	f7ff fbd0 	bl	8000210 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	230a      	movs	r3, #10
 8000a76:	493f      	ldr	r1, [pc, #252]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000a78:	4840      	ldr	r0, [pc, #256]	; (8000b7c <set_packet_pointer_AX25+0x1cc>)
 8000a7a:	f005 fc9a 	bl	80063b2 <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000a84:	3314      	adds	r3, #20
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3308      	adds	r3, #8
 8000a8e:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	3308      	adds	r3, #8
 8000a94:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000a98:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <set_packet_pointer_AX25+0x1d8>)
 8000a9a:	4615      	mov	r5, r2
 8000a9c:	461c      	mov	r4, r3
 8000a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aa0:	6028      	str	r0, [r5, #0]
 8000aa2:	6069      	str	r1, [r5, #4]
 8000aa4:	60aa      	str	r2, [r5, #8]
 8000aa6:	60eb      	str	r3, [r5, #12]
 8000aa8:	cc03      	ldmia	r4!, {r0, r1}
 8000aaa:	6128      	str	r0, [r5, #16]
 8000aac:	6169      	str	r1, [r5, #20]
 8000aae:	7823      	ldrb	r3, [r4, #0]
 8000ab0:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ab2:	4830      	ldr	r0, [pc, #192]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000ab4:	f7ff fbac 	bl	8000210 <strlen>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	230a      	movs	r3, #10
 8000abe:	492d      	ldr	r1, [pc, #180]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000ac0:	482e      	ldr	r0, [pc, #184]	; (8000b7c <set_packet_pointer_AX25+0x1cc>)
 8000ac2:	f005 fc76 	bl	80063b2 <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000acc:	3318      	adds	r3, #24
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3308      	adds	r3, #8
 8000ad6:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	3308      	adds	r3, #8
 8000adc:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 8000ade:	4a25      	ldr	r2, [pc, #148]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <set_packet_pointer_AX25+0x1dc>)
 8000ae2:	4615      	mov	r5, r2
 8000ae4:	461c      	mov	r4, r3
 8000ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae8:	6028      	str	r0, [r5, #0]
 8000aea:	6069      	str	r1, [r5, #4]
 8000aec:	60aa      	str	r2, [r5, #8]
 8000aee:	60eb      	str	r3, [r5, #12]
 8000af0:	cc03      	ldmia	r4!, {r0, r1}
 8000af2:	6128      	str	r0, [r5, #16]
 8000af4:	6169      	str	r1, [r5, #20]
 8000af6:	8823      	ldrh	r3, [r4, #0]
 8000af8:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000afa:	481e      	ldr	r0, [pc, #120]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000afc:	f7ff fb88 	bl	8000210 <strlen>
 8000b00:	4603      	mov	r3, r0
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	230a      	movs	r3, #10
 8000b06:	491b      	ldr	r1, [pc, #108]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000b08:	481c      	ldr	r0, [pc, #112]	; (8000b7c <set_packet_pointer_AX25+0x1cc>)
 8000b0a:	f005 fc52 	bl	80063b2 <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b14:	331c      	adds	r3, #28
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <set_packet_pointer_AX25+0x1e0>)
 8000b2e:	4615      	mov	r5, r2
 8000b30:	461c      	mov	r4, r3
 8000b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b34:	6028      	str	r0, [r5, #0]
 8000b36:	6069      	str	r1, [r5, #4]
 8000b38:	60aa      	str	r2, [r5, #8]
 8000b3a:	60eb      	str	r3, [r5, #12]
 8000b3c:	cc03      	ldmia	r4!, {r0, r1}
 8000b3e:	6128      	str	r0, [r5, #16]
 8000b40:	6169      	str	r1, [r5, #20]
 8000b42:	7823      	ldrb	r3, [r4, #0]
 8000b44:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b46:	480b      	ldr	r0, [pc, #44]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000b48:	f7ff fb62 	bl	8000210 <strlen>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	230a      	movs	r3, #10
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <set_packet_pointer_AX25+0x1c4>)
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <set_packet_pointer_AX25+0x1cc>)
 8000b56:	f005 fc2c 	bl	80063b2 <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000b60:	3304      	adds	r3, #4
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	601a      	str	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000c8 	.word	0x200000c8
 8000b74:	20001ccc 	.word	0x20001ccc
 8000b78:	08007c44 	.word	0x08007c44
 8000b7c:	200029c8 	.word	0x200029c8
 8000b80:	08007c68 	.word	0x08007c68
 8000b84:	08007c88 	.word	0x08007c88
 8000b88:	08007ca8 	.word	0x08007ca8
 8000b8c:	08007cc4 	.word	0x08007cc4
 8000b90:	08007ce0 	.word	0x08007ce0

08000b94 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000b9a:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <AX25_TO_KISS+0x10c>)
 8000b9c:	603b      	str	r3, [r7, #0]

	set_packet_pointer_AX25();
 8000b9e:	f7ff ff07 	bl	80009b0 <set_packet_pointer_AX25>
	print_AX25();
 8000ba2:	f000 fe09 	bl	80017b8 <print_AX25>

	bool* cpy_from_ptr = (local_packet->AX25_PACKET+8);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	3308      	adds	r3, #8
 8000baa:	60fb      	str	r3, [r7, #12]

	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	493d      	ldr	r1, [pc, #244]	; (8000ca4 <AX25_TO_KISS+0x110>)
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	cb03      	ldmia	r3!, {r0, r1}
 8000bb6:	6010      	str	r0, [r2, #0]
 8000bb8:	6051      	str	r1, [r2, #4]
	cpy_from_ptr += FLAG_SIZE;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3308      	adds	r3, #8
 8000bbe:	60fb      	str	r3, [r7, #12]

	//copy in each byte MSB to LSB
	for(int i = 0; i < address_len/8; i++){
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	e014      	b.n	8000bf0 <AX25_TO_KISS+0x5c>
		memcpy(cpy_from_ptr,(local_packet->address + address_len - 8 - i*8),8*bool_size);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000bcc:	3310      	adds	r3, #16
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8000bd8:	4413      	add	r3, r2
 8000bda:	2208      	movs	r2, #8
 8000bdc:	4619      	mov	r1, r3
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f006 fafc 	bl	80071dc <memcpy>
		cpy_from_ptr += 8;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3308      	adds	r3, #8
 8000be8:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < address_len/8; i++){
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	3301      	adds	r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	2b0d      	cmp	r3, #13
 8000bf4:	dde7      	ble.n	8000bc6 <AX25_TO_KISS+0x32>
	}

	memcpy(cpy_from_ptr,local_packet->control,control_len*bool_size);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000bfc:	3314      	adds	r3, #20
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2208      	movs	r2, #8
 8000c02:	4619      	mov	r1, r3
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f006 fae9 	bl	80071dc <memcpy>
	cpy_from_ptr += control_len;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	3308      	adds	r3, #8
 8000c0e:	60fb      	str	r3, [r7, #12]

	memcpy(local_packet->AX25_PACKET,KISS_FLAG,FLAG_SIZE);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	4924      	ldr	r1, [pc, #144]	; (8000ca4 <AX25_TO_KISS+0x110>)
 8000c14:	461a      	mov	r2, r3
 8000c16:	460b      	mov	r3, r1
 8000c18:	cb03      	ldmia	r3!, {r0, r1}
 8000c1a:	6010      	str	r0, [r2, #0]
 8000c1c:	6051      	str	r1, [r2, #4]
	//copy in each byte MSB to LSB
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	e019      	b.n	8000c58 <AX25_TO_KISS+0xc4>
		memcpy(cpy_from_ptr,(local_packet->Info + local_packet->Info_Len - 8 - i*8),8*bool_size); //copy in each byte MSB to LSB
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000c2a:	331c      	adds	r3, #28
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4619      	mov	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	1acb      	subs	r3, r1, r3
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	4413      	add	r3, r2
 8000c42:	2208      	movs	r2, #8
 8000c44:	4619      	mov	r1, r3
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f006 fac8 	bl	80071dc <memcpy>
		cpy_from_ptr += 8;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3308      	adds	r3, #8
 8000c50:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3301      	adds	r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	da00      	bge.n	8000c66 <AX25_TO_KISS+0xd2>
 8000c64:	3307      	adds	r3, #7
 8000c66:	10db      	asrs	r3, r3, #3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	dbd9      	blt.n	8000c24 <AX25_TO_KISS+0x90>
	}
	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <AX25_TO_KISS+0x110>)
 8000c74:	461a      	mov	r2, r3
 8000c76:	460b      	mov	r3, r1
 8000c78:	cb03      	ldmia	r3!, {r0, r1}
 8000c7a:	6010      	str	r0, [r2, #0]
 8000c7c:	6051      	str	r1, [r2, #4]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000c84:	3314      	adds	r3, #20
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2208      	movs	r2, #8
 8000c8a:	68f9      	ldr	r1, [r7, #12]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f006 faa5 	bl	80071dc <memcpy>
	cpy_from_ptr += control_len;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3308      	adds	r3, #8
 8000c96:	60fb      	str	r3, [r7, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200000c8 	.word	0x200000c8
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <receiving_KISS+0xc0>)
 8000cb0:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <receiving_KISS+0xc4>)
 8000cb4:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	7b5b      	ldrb	r3, [r3, #13]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d04e      	beq.n	8000d5c <receiving_KISS+0xb4>
		sprintf(uartData, "\nGot a packet via UART of size %d, printing now...\n",local_UART_packet->received_byte_cnt);
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	492a      	ldr	r1, [pc, #168]	; (8000d70 <receiving_KISS+0xc8>)
 8000cc6:	482b      	ldr	r0, [pc, #172]	; (8000d74 <receiving_KISS+0xcc>)
 8000cc8:	f006 fab4 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ccc:	4829      	ldr	r0, [pc, #164]	; (8000d74 <receiving_KISS+0xcc>)
 8000cce:	f7ff fa9f 	bl	8000210 <strlen>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	4926      	ldr	r1, [pc, #152]	; (8000d74 <receiving_KISS+0xcc>)
 8000cda:	4827      	ldr	r0, [pc, #156]	; (8000d78 <receiving_KISS+0xd0>)
 8000cdc:	f005 fb69 	bl	80063b2 <HAL_UART_Transmit>
		int byte_cnt = local_UART_packet->received_byte_cnt;
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i < byte_cnt;i++){
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e01f      	b.n	8000d2c <receiving_KISS+0x84>
			//Hex value from UART
			 //start from LS Byte = Highest index
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[byte_cnt-1-i];
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	1e5a      	subs	r2, r3, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	7b9b      	ldrb	r3, [r3, #14]
 8000cfa:	71fb      	strb	r3, [r7, #7]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	3307      	adds	r3, #7
 8000d0a:	603b      	str	r3, [r7, #0]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	2201      	movs	r2, #1
 8000d12:	6839      	ldr	r1, [r7, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fc53 	bl	80005c0 <conv_HEX_to_BIN>

//			local_UART_packet->got_packet = false;
			local_packet->got_packet = true;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d20:	3309      	adds	r3, #9
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i < byte_cnt;i++){
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbdb      	blt.n	8000cec <receiving_KISS+0x44>
		}

		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d3e:	330c      	adds	r3, #12
 8000d40:	601a      	str	r2, [r3, #0]
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset)*8;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d48:	330c      	adds	r3, #12
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3b13      	subs	r3, #19
 8000d4e:	00da      	lsls	r2, r3, #3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d56:	601a      	str	r2, [r3, #0]

		return true;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <receiving_KISS+0xb6>
	}
	return false;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20001434 	.word	0x20001434
 8000d6c:	200000c8 	.word	0x200000c8
 8000d70:	08007cfc 	.word	0x08007cfc
 8000d74:	20001ccc 	.word	0x20001ccc
 8000d78:	200029c8 	.word	0x200029c8

08000d7c <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 8000d7c:	b5b0      	push	{r4, r5, r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <set_packet_pointer_KISS+0xac>)
 8000d84:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS\n");
 8000d86:	4a29      	ldr	r2, [pc, #164]	; (8000e2c <set_packet_pointer_KISS+0xb0>)
 8000d88:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <set_packet_pointer_KISS+0xb4>)
 8000d8a:	4614      	mov	r4, r2
 8000d8c:	461d      	mov	r5, r3
 8000d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d90:	6020      	str	r0, [r4, #0]
 8000d92:	6061      	str	r1, [r4, #4]
 8000d94:	60a2      	str	r2, [r4, #8]
 8000d96:	60e3      	str	r3, [r4, #12]
 8000d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9a:	6120      	str	r0, [r4, #16]
 8000d9c:	6161      	str	r1, [r4, #20]
 8000d9e:	61a2      	str	r2, [r4, #24]
 8000da0:	61e3      	str	r3, [r4, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000da2:	4822      	ldr	r0, [pc, #136]	; (8000e2c <set_packet_pointer_KISS+0xb0>)
 8000da4:	f7ff fa34 	bl	8000210 <strlen>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	230a      	movs	r3, #10
 8000dae:	491f      	ldr	r1, [pc, #124]	; (8000e2c <set_packet_pointer_KISS+0xb0>)
 8000db0:	4820      	ldr	r0, [pc, #128]	; (8000e34 <set_packet_pointer_KISS+0xb8>)
 8000db2:	f005 fafe 	bl	80063b2 <HAL_UART_Transmit>

	bool *curr_mem = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000dc2:	330c      	adds	r3, #12
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4413      	add	r3, r2
 8000dcc:	603b      	str	r3, [r7, #0]

	curr_mem -= address_len;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	3b70      	subs	r3, #112	; 0x70
 8000dd2:	603b      	str	r3, [r7, #0]
	local_packet->address = curr_mem;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000dda:	3310      	adds	r3, #16
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	601a      	str	r2, [r3, #0]

	curr_mem -= control_len;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	3b08      	subs	r3, #8
 8000de4:	603b      	str	r3, [r7, #0]
	local_packet->control = curr_mem;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000dec:	3314      	adds	r3, #20
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	601a      	str	r2, [r3, #0]

	curr_mem -= PID_len;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	3b08      	subs	r3, #8
 8000df6:	603b      	str	r3, [r7, #0]
	local_packet->PID = curr_mem;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000dfe:	3318      	adds	r3, #24
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	601a      	str	r2, [r3, #0]

	curr_mem -= local_packet->Info_Len;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	425b      	negs	r3, r3
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	603b      	str	r3, [r7, #0]
	local_packet->Info = curr_mem;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000e1a:	331c      	adds	r3, #28
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	601a      	str	r2, [r3, #0]
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bdb0      	pop	{r4, r5, r7, pc}
 8000e28:	200000c8 	.word	0x200000c8
 8000e2c:	20001ccc 	.word	0x20001ccc
 8000e30:	08007d30 	.word	0x08007d30
 8000e34:	200029c8 	.word	0x200029c8

08000e38 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 8000e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000e3e:	4b8c      	ldr	r3, [pc, #560]	; (8001070 <KISS_TO_AX25+0x238>)
 8000e40:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Before KISS -> AX.25 conversion\n");
 8000e42:	4b8c      	ldr	r3, [pc, #560]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000e44:	4a8c      	ldr	r2, [pc, #560]	; (8001078 <KISS_TO_AX25+0x240>)
 8000e46:	4614      	mov	r4, r2
 8000e48:	469c      	mov	ip, r3
 8000e4a:	f104 0e20 	add.w	lr, r4, #32
 8000e4e:	4665      	mov	r5, ip
 8000e50:	4626      	mov	r6, r4
 8000e52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e54:	6028      	str	r0, [r5, #0]
 8000e56:	6069      	str	r1, [r5, #4]
 8000e58:	60aa      	str	r2, [r5, #8]
 8000e5a:	60eb      	str	r3, [r5, #12]
 8000e5c:	3410      	adds	r4, #16
 8000e5e:	f10c 0c10 	add.w	ip, ip, #16
 8000e62:	4574      	cmp	r4, lr
 8000e64:	d1f3      	bne.n	8000e4e <KISS_TO_AX25+0x16>
 8000e66:	4663      	mov	r3, ip
 8000e68:	4622      	mov	r2, r4
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e6e:	4881      	ldr	r0, [pc, #516]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000e70:	f7ff f9ce 	bl	8000210 <strlen>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	230a      	movs	r3, #10
 8000e7a:	497e      	ldr	r1, [pc, #504]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000e7c:	487f      	ldr	r0, [pc, #508]	; (800107c <KISS_TO_AX25+0x244>)
 8000e7e:	f005 fa98 	bl	80063b2 <HAL_UART_Transmit>

	set_packet_pointer_KISS();
 8000e82:	f7ff ff7b 	bl	8000d7c <set_packet_pointer_KISS>
	print_KISS();
 8000e86:	f001 f92f 	bl	80020e8 <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e96:	330c      	adds	r3, #12
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3b02      	subs	r3, #2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	4413      	add	r3, r2
 8000ea0:	603b      	str	r3, [r7, #0]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 8000ea2:	f7ff fd85 	bl	80009b0 <set_packet_pointer_AX25>

	cpy_from_ptr -= address_len;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	3b70      	subs	r3, #112	; 0x70
 8000eaa:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->address,cpy_from_ptr,address_len);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000eb2:	3310      	adds	r3, #16
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2270      	movs	r2, #112	; 0x70
 8000eb8:	6839      	ldr	r1, [r7, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f006 f98e 	bl	80071dc <memcpy>

	cpy_from_ptr -= control_len;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	3b08      	subs	r3, #8
 8000ec4:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ecc:	3314      	adds	r3, #20
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	6839      	ldr	r1, [r7, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 f981 	bl	80071dc <memcpy>

	cpy_from_ptr -= PID_len;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	3b08      	subs	r3, #8
 8000ede:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ee6:	3318      	adds	r3, #24
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2208      	movs	r2, #8
 8000eec:	6839      	ldr	r1, [r7, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f006 f974 	bl	80071dc <memcpy>

	cpy_from_ptr -= local_packet->Info_Len;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	425b      	negs	r3, r3
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000f0a:	331c      	adds	r3, #28
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	6839      	ldr	r1, [r7, #0]
 8000f1a:	f006 f95f 	bl	80071dc <memcpy>

	//USE CRC HERE TO GENERATE FCS FIELD
	rxBit_count = address_len + control_len + PID_len + local_packet->Info_Len;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3380      	adds	r3, #128	; 0x80
 8000f28:	4a55      	ldr	r2, [pc, #340]	; (8001080 <KISS_TO_AX25+0x248>)
 8000f2a:	6013      	str	r3, [r2, #0]
	crc_generate();
 8000f2c:	f000 faca 	bl	80014c4 <crc_generate>
	print_AX25();
 8000f30:	f000 fc42 	bl	80017b8 <print_AX25>

	sprintf(uartData, "\n line Printing AX25 = \n");
 8000f34:	4a4f      	ldr	r2, [pc, #316]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000f36:	4b53      	ldr	r3, [pc, #332]	; (8001084 <KISS_TO_AX25+0x24c>)
 8000f38:	4615      	mov	r5, r2
 8000f3a:	461c      	mov	r4, r3
 8000f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f3e:	6028      	str	r0, [r5, #0]
 8000f40:	6069      	str	r1, [r5, #4]
 8000f42:	60aa      	str	r2, [r5, #8]
 8000f44:	60eb      	str	r3, [r5, #12]
 8000f46:	cc03      	ldmia	r4!, {r0, r1}
 8000f48:	6128      	str	r0, [r5, #16]
 8000f4a:	6169      	str	r1, [r5, #20]
 8000f4c:	7823      	ldrb	r3, [r4, #0]
 8000f4e:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f50:	4848      	ldr	r0, [pc, #288]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000f52:	f7ff f95d 	bl	8000210 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	4945      	ldr	r1, [pc, #276]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000f5e:	4847      	ldr	r0, [pc, #284]	; (800107c <KISS_TO_AX25+0x244>)
 8000f60:	f005 fa27 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	e015      	b.n	8000f96 <KISS_TO_AX25+0x15e>
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4944      	ldr	r1, [pc, #272]	; (8001088 <KISS_TO_AX25+0x250>)
 8000f76:	483f      	ldr	r0, [pc, #252]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000f78:	f006 f95c 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f7c:	483d      	ldr	r0, [pc, #244]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000f7e:	f7ff f947 	bl	8000210 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	230a      	movs	r3, #10
 8000f88:	493a      	ldr	r1, [pc, #232]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000f8a:	483c      	ldr	r0, [pc, #240]	; (800107c <KISS_TO_AX25+0x244>)
 8000f8c:	f005 fa11 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3301      	adds	r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b3a      	ldr	r3, [pc, #232]	; (8001080 <KISS_TO_AX25+0x248>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3310      	adds	r3, #16
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dbe3      	blt.n	8000f6a <KISS_TO_AX25+0x132>
	}
	sprintf(uartData, "\n");
 8000fa2:	4a34      	ldr	r2, [pc, #208]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000fa4:	4b39      	ldr	r3, [pc, #228]	; (800108c <KISS_TO_AX25+0x254>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000faa:	4832      	ldr	r0, [pc, #200]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000fac:	f7ff f930 	bl	8000210 <strlen>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	492f      	ldr	r1, [pc, #188]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000fb8:	4830      	ldr	r0, [pc, #192]	; (800107c <KISS_TO_AX25+0x244>)
 8000fba:	f005 f9fa 	bl	80063b2 <HAL_UART_Transmit>

	//BIT STUFFING NEEDED
	bit_stuff_fields();
 8000fbe:	f000 f867 	bl	8001090 <bit_stuff_fields>

	sprintf(uartData, "\n line Printing AX25 = \n");
 8000fc2:	4a2c      	ldr	r2, [pc, #176]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000fc4:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <KISS_TO_AX25+0x24c>)
 8000fc6:	4615      	mov	r5, r2
 8000fc8:	461c      	mov	r4, r3
 8000fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fcc:	6028      	str	r0, [r5, #0]
 8000fce:	6069      	str	r1, [r5, #4]
 8000fd0:	60aa      	str	r2, [r5, #8]
 8000fd2:	60eb      	str	r3, [r5, #12]
 8000fd4:	cc03      	ldmia	r4!, {r0, r1}
 8000fd6:	6128      	str	r0, [r5, #16]
 8000fd8:	6169      	str	r1, [r5, #20]
 8000fda:	7823      	ldrb	r3, [r4, #0]
 8000fdc:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fde:	4825      	ldr	r0, [pc, #148]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000fe0:	f7ff f916 	bl	8000210 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	230a      	movs	r3, #10
 8000fea:	4922      	ldr	r1, [pc, #136]	; (8001074 <KISS_TO_AX25+0x23c>)
 8000fec:	4823      	ldr	r0, [pc, #140]	; (800107c <KISS_TO_AX25+0x244>)
 8000fee:	f005 f9e0 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	e015      	b.n	8001024 <KISS_TO_AX25+0x1ec>
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4921      	ldr	r1, [pc, #132]	; (8001088 <KISS_TO_AX25+0x250>)
 8001004:	481b      	ldr	r0, [pc, #108]	; (8001074 <KISS_TO_AX25+0x23c>)
 8001006:	f006 f915 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800100a:	481a      	ldr	r0, [pc, #104]	; (8001074 <KISS_TO_AX25+0x23c>)
 800100c:	f7ff f900 	bl	8000210 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	230a      	movs	r3, #10
 8001016:	4917      	ldr	r1, [pc, #92]	; (8001074 <KISS_TO_AX25+0x23c>)
 8001018:	4818      	ldr	r0, [pc, #96]	; (800107c <KISS_TO_AX25+0x244>)
 800101a:	f005 f9ca 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	3301      	adds	r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <KISS_TO_AX25+0x248>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f103 0210 	add.w	r2, r3, #16
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001032:	3304      	adds	r3, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	429a      	cmp	r2, r3
 800103c:	dbdc      	blt.n	8000ff8 <KISS_TO_AX25+0x1c0>
	}
	sprintf(uartData, "\n");
 800103e:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <KISS_TO_AX25+0x23c>)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <KISS_TO_AX25+0x254>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001046:	480b      	ldr	r0, [pc, #44]	; (8001074 <KISS_TO_AX25+0x23c>)
 8001048:	f7ff f8e2 	bl	8000210 <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	230a      	movs	r3, #10
 8001052:	4908      	ldr	r1, [pc, #32]	; (8001074 <KISS_TO_AX25+0x23c>)
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <KISS_TO_AX25+0x244>)
 8001056:	f005 f9ac 	bl	80063b2 <HAL_UART_Transmit>
	rxBit_count = 0;
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <KISS_TO_AX25+0x248>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
//	Print the ax25 packet
	print_outAX25();
 8001060:	f000 fd70 	bl	8001b44 <print_outAX25>
	return true; //valid packet
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800106e:	bf00      	nop
 8001070:	200000c8 	.word	0x200000c8
 8001074:	20001ccc 	.word	0x20001ccc
 8001078:	08007d50 	.word	0x08007d50
 800107c:	200029c8 	.word	0x200029c8
 8001080:	200000a0 	.word	0x200000a0
 8001084:	08007d74 	.word	0x08007d74
 8001088:	08007d90 	.word	0x08007d90
 800108c:	08007d98 	.word	0x08007d98

08001090 <bit_stuff_fields>:

void bit_stuff_fields(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001096:	4b88      	ldr	r3, [pc, #544]	; (80012b8 <bit_stuff_fields+0x228>)
 8001098:	60fb      	str	r3, [r7, #12]
	int ax25_len = rxBit_count + FCS_len;
 800109a:	4b88      	ldr	r3, [pc, #544]	; (80012bc <bit_stuff_fields+0x22c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3310      	adds	r3, #16
 80010a0:	60bb      	str	r3, [r7, #8]
	int ones_count = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
	ones_count = bitstuffing(local_packet->address,address_len,ax25_len, ones_count, &(local_packet->stuffed_address));
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80010ac:	3310      	adds	r3, #16
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80010b6:	3310      	adds	r3, #16
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	2170      	movs	r1, #112	; 0x70
 80010c0:	f000 f91a 	bl	80012f8 <bitstuffing>
 80010c4:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_address;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80010cc:	3304      	adds	r3, #4
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80010d6:	3310      	adds	r3, #16
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	441a      	add	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80010e2:	3304      	adds	r3, #4
 80010e4:	601a      	str	r2, [r3, #0]
	ax25_len -= address_len;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	3b70      	subs	r3, #112	; 0x70
 80010ea:	60bb      	str	r3, [r7, #8]

	local_packet->control += local_packet->bit_stuffed_zeros;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80010f2:	3314      	adds	r3, #20
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80010fc:	3304      	adds	r3, #4
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	441a      	add	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001108:	3314      	adds	r3, #20
 800110a:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->control,control_len,ax25_len, ones_count, &(local_packet->stuffed_control));
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001112:	3314      	adds	r3, #20
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800111c:	3314      	adds	r3, #20
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	2108      	movs	r1, #8
 8001126:	f000 f8e7 	bl	80012f8 <bitstuffing>
 800112a:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_control;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001132:	3304      	adds	r3, #4
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800113c:	3314      	adds	r3, #20
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	441a      	add	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001148:	3304      	adds	r3, #4
 800114a:	601a      	str	r2, [r3, #0]
	ax25_len -= control_len;
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3b08      	subs	r3, #8
 8001150:	60bb      	str	r3, [r7, #8]

	local_packet->PID += local_packet->bit_stuffed_zeros;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001158:	3318      	adds	r3, #24
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001162:	3304      	adds	r3, #4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	441a      	add	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800116e:	3318      	adds	r3, #24
 8001170:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->PID,PID_len,ax25_len, ones_count, &(local_packet->stuffed_PID));
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001178:	3318      	adds	r3, #24
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001182:	3318      	adds	r3, #24
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	2108      	movs	r1, #8
 800118c:	f000 f8b4 	bl	80012f8 <bitstuffing>
 8001190:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_PID;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001198:	3304      	adds	r3, #4
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011a2:	3318      	adds	r3, #24
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	441a      	add	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80011ae:	3304      	adds	r3, #4
 80011b0:	601a      	str	r2, [r3, #0]
	ax25_len -= PID_len;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3b08      	subs	r3, #8
 80011b6:	60bb      	str	r3, [r7, #8]

	local_packet->Info += local_packet->bit_stuffed_zeros;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011be:	331c      	adds	r3, #28
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80011c8:	3304      	adds	r3, #4
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	441a      	add	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011d4:	331c      	adds	r3, #28
 80011d6:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->Info,local_packet->Info_Len, ax25_len, ones_count, &(local_packet->stuffed_Info));
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011de:	331c      	adds	r3, #28
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011e8:	6819      	ldr	r1, [r3, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011f0:	331c      	adds	r3, #28
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f000 f87e 	bl	80012f8 <bitstuffing>
 80011fc:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_Info;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001204:	3304      	adds	r3, #4
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800120e:	331c      	adds	r3, #28
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	441a      	add	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800121a:	3304      	adds	r3, #4
 800121c:	601a      	str	r2, [r3, #0]
	ax25_len -= local_packet->Info_Len;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	60bb      	str	r3, [r7, #8]

	local_packet->FCS += local_packet->bit_stuffed_zeros;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001232:	3304      	adds	r3, #4
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800123c:	3304      	adds	r3, #4
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	441a      	add	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001248:	3304      	adds	r3, #4
 800124a:	601a      	str	r2, [r3, #0]
	bitstuffing(local_packet->FCS,FCS_len, ax25_len, ones_count, &(local_packet->stuffed_FCS));
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001252:	3304      	adds	r3, #4
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	2110      	movs	r1, #16
 8001264:	f000 f848 	bl	80012f8 <bitstuffing>
	local_packet->bit_stuffed_zeros += local_packet->stuffed_FCS;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800126e:	3304      	adds	r3, #4
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	441a      	add	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001282:	3304      	adds	r3, #4
 8001284:	601a      	str	r2, [r3, #0]

	sprintf(uartData, "bit stuffed zeros = %d\n",local_packet->bit_stuffed_zeros);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800128c:	3304      	adds	r3, #4
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	490b      	ldr	r1, [pc, #44]	; (80012c0 <bit_stuff_fields+0x230>)
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <bit_stuff_fields+0x234>)
 8001296:	f005 ffcd 	bl	8007234 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800129a:	480a      	ldr	r0, [pc, #40]	; (80012c4 <bit_stuff_fields+0x234>)
 800129c:	f7fe ffb8 	bl	8000210 <strlen>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	230a      	movs	r3, #10
 80012a6:	4907      	ldr	r1, [pc, #28]	; (80012c4 <bit_stuff_fields+0x234>)
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <bit_stuff_fields+0x238>)
 80012aa:	f005 f882 	bl	80063b2 <HAL_UART_Transmit>
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200000c8 	.word	0x200000c8
 80012bc:	200000a0 	.word	0x200000a0
 80012c0:	08007d9c 	.word	0x08007d9c
 80012c4:	20001ccc 	.word	0x20001ccc
 80012c8:	200029c8 	.word	0x200029c8

080012cc <bit_stuff>:

void bit_stuff(bool* array,int bits_left){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	memmove(array+2,array+1,bits_left);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	1c98      	adds	r0, r3, #2
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3301      	adds	r3, #1
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f005 ff86 	bl	80071f2 <memmove>
	*(array+1) = false;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3301      	adds	r3, #1
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <bitstuffing>:

int bitstuffing(bool* packet,int len,int bits_left, int ones_count,int *stuff){
 80012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
	sprintf(uartData, "\nChecking if bit stuffing is needed\n");
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <bitstuffing+0xcc>)
 8001308:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <bitstuffing+0xd0>)
 800130a:	4614      	mov	r4, r2
 800130c:	469c      	mov	ip, r3
 800130e:	f104 0e20 	add.w	lr, r4, #32
 8001312:	4665      	mov	r5, ip
 8001314:	4626      	mov	r6, r4
 8001316:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001318:	6028      	str	r0, [r5, #0]
 800131a:	6069      	str	r1, [r5, #4]
 800131c:	60aa      	str	r2, [r5, #8]
 800131e:	60eb      	str	r3, [r5, #12]
 8001320:	3410      	adds	r4, #16
 8001322:	f10c 0c10 	add.w	ip, ip, #16
 8001326:	4574      	cmp	r4, lr
 8001328:	d1f3      	bne.n	8001312 <bitstuffing+0x1a>
 800132a:	4663      	mov	r3, ip
 800132c:	4622      	mov	r2, r4
 800132e:	6810      	ldr	r0, [r2, #0]
 8001330:	6018      	str	r0, [r3, #0]
 8001332:	7912      	ldrb	r2, [r2, #4]
 8001334:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001336:	4823      	ldr	r0, [pc, #140]	; (80013c4 <bitstuffing+0xcc>)
 8001338:	f7fe ff6a 	bl	8000210 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	b29a      	uxth	r2, r3
 8001340:	230a      	movs	r3, #10
 8001342:	4920      	ldr	r1, [pc, #128]	; (80013c4 <bitstuffing+0xcc>)
 8001344:	4821      	ldr	r0, [pc, #132]	; (80013cc <bitstuffing+0xd4>)
 8001346:	f005 f834 	bl	80063b2 <HAL_UART_Transmit>

	int bit_stuff_count = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
	bool *curr_mem = packet;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	617b      	str	r3, [r7, #20]
	int left;

	//Increment through array
	for(int i = 0; i < len+bit_stuff_count; i++){
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	e027      	b.n	80013a8 <bitstuffing+0xb0>
		//Check if the current index in array is a one
        if(*(curr_mem+i)){
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4413      	add	r3, r2
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d01c      	beq.n	800139e <bitstuffing+0xa6>
        	//Inc ones count
        	ones_count++;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	603b      	str	r3, [r7, #0]

        	//If 5 consecutive ones, do bit stuff
            if(ones_count == 5){
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2b05      	cmp	r3, #5
 800136e:	d118      	bne.n	80013a2 <bitstuffing+0xaa>
        		//Calculate the number of bits left
        		left = (bits_left+bit_stuff_count) - i - 1;
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	441a      	add	r2, r3
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	3b01      	subs	r3, #1
 800137c:	613b      	str	r3, [r7, #16]
                bit_stuff(curr_mem+i,left);
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	4413      	add	r3, r2
 8001384:	6939      	ldr	r1, [r7, #16]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ffa0 	bl	80012cc <bit_stuff>

                bit_stuff_count++;
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	3301      	adds	r3, #1
 8001390:	61fb      	str	r3, [r7, #28]
                ones_count = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	603b      	str	r3, [r7, #0]
                i++;
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	3301      	adds	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	e001      	b.n	80013a2 <bitstuffing+0xaa>
            }
        }
        else{
        	ones_count = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < len+bit_stuff_count; i++){
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	4413      	add	r3, r2
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dbd1      	blt.n	8001358 <bitstuffing+0x60>
        }
	}
	*stuff = bit_stuff_count;
 80013b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	601a      	str	r2, [r3, #0]
	return ones_count;
 80013ba:	683b      	ldr	r3, [r7, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3724      	adds	r7, #36	; 0x24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c4:	20001ccc 	.word	0x20001ccc
 80013c8:	08007db4 	.word	0x08007db4
 80013cc:	200029c8 	.word	0x200029c8

080013d0 <crc_calc>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 80013dc:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <crc_calc+0xe0>)
 80013de:	61fb      	str	r3, [r7, #28]
	int out_bit;
	int roll_bit = *crc_ptr_in & 0x0001;
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	61bb      	str	r3, [r7, #24]
    int poly = 0x8408;             			//reverse order of 0x1021
 80013ea:	f248 4308 	movw	r3, #33800	; 0x8408
 80013ee:	617b      	str	r3, [r7, #20]

    out_bit = in_bit ^ roll_bit; 		//xor lsb of current crc with input bit
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	4053      	eors	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
	*crc_ptr_in >>= 1;               	//right shift by 1
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	105a      	asrs	r2, r3, #1
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0x0000;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d102      	bne.n	800140e <crc_calc+0x3e>
 8001408:	f248 4308 	movw	r3, #33800	; 0x8408
 800140c:	e000      	b.n	8001410 <crc_calc+0x40>
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
	*crc_ptr_in ^= poly;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	405a      	eors	r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	601a      	str	r2, [r3, #0]

    //End condition
//	if(*crc_count_ptr_in >= rxBit_count){
	if(*crc_count_ptr_in >= rxBit_count){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <crc_calc+0xe4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	db38      	blt.n	80014a6 <crc_calc+0xd6>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 800143c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	6013      	str	r3, [r2, #0]
  	    sprintf(uartData, "Convert CRC to FCS (hex) = %x\n",local_packet->crc);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800144a:	3308      	adds	r3, #8
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	4919      	ldr	r1, [pc, #100]	; (80014b8 <crc_calc+0xe8>)
 8001452:	481a      	ldr	r0, [pc, #104]	; (80014bc <crc_calc+0xec>)
 8001454:	f005 feee 	bl	8007234 <siprintf>
    	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001458:	4818      	ldr	r0, [pc, #96]	; (80014bc <crc_calc+0xec>)
 800145a:	f7fe fed9 	bl	8000210 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	230a      	movs	r3, #10
 8001464:	4915      	ldr	r1, [pc, #84]	; (80014bc <crc_calc+0xec>)
 8001466:	4816      	ldr	r0, [pc, #88]	; (80014c0 <crc_calc+0xf0>)
 8001468:	f004 ffa3 	bl	80063b2 <HAL_UART_Transmit>
    	if(local_packet->check_crc == false){
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001472:	3310      	adds	r3, #16
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	f083 0301 	eor.w	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d012      	beq.n	80014a6 <crc_calc+0xd6>
    		//REMEBER TO CHECK THIS CRC conversion FOR ACCURACY LATER
    		conv_HEX_to_BIN(*crc_ptr_in,local_packet->FCS,false);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b298      	uxth	r0, r3
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800148c:	3304      	adds	r3, #4
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2200      	movs	r2, #0
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff f894 	bl	80005c0 <conv_HEX_to_BIN>
    		local_packet->crc = 0xFFFF;
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800149e:	3308      	adds	r3, #8
 80014a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a4:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200000c8 	.word	0x200000c8
 80014b4:	200000a0 	.word	0x200000a0
 80014b8:	08007ddc 	.word	0x08007ddc
 80014bc:	20001ccc 	.word	0x20001ccc
 80014c0:	200029c8 	.word	0x200029c8

080014c4 <crc_generate>:

void crc_generate(){
 80014c4:	b5b0      	push	{r4, r5, r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80014ca:	4b73      	ldr	r3, [pc, #460]	; (8001698 <crc_generate+0x1d4>)
 80014cc:	60bb      	str	r3, [r7, #8]
	uint16_t * crc_ptr = &(local_packet->crc);
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80014d4:	3308      	adds	r3, #8
 80014d6:	607b      	str	r3, [r7, #4]
	int * crc_count_ptr = &(local_packet->crc_count);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80014de:	330c      	adds	r3, #12
 80014e0:	603b      	str	r3, [r7, #0]
	bool *curr_mem;

	*crc_ptr = 0xFFFF;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e8:	801a      	strh	r2, [r3, #0]
	*crc_count_ptr = 0;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	sprintf(uartData, "Performing CRC generation\n");
 80014f0:	4a6a      	ldr	r2, [pc, #424]	; (800169c <crc_generate+0x1d8>)
 80014f2:	4b6b      	ldr	r3, [pc, #428]	; (80016a0 <crc_generate+0x1dc>)
 80014f4:	4615      	mov	r5, r2
 80014f6:	461c      	mov	r4, r3
 80014f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fa:	6028      	str	r0, [r5, #0]
 80014fc:	6069      	str	r1, [r5, #4]
 80014fe:	60aa      	str	r2, [r5, #8]
 8001500:	60eb      	str	r3, [r5, #12]
 8001502:	cc03      	ldmia	r4!, {r0, r1}
 8001504:	6128      	str	r0, [r5, #16]
 8001506:	6169      	str	r1, [r5, #20]
 8001508:	8823      	ldrh	r3, [r4, #0]
 800150a:	78a2      	ldrb	r2, [r4, #2]
 800150c:	832b      	strh	r3, [r5, #24]
 800150e:	4613      	mov	r3, r2
 8001510:	76ab      	strb	r3, [r5, #26]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001512:	4862      	ldr	r0, [pc, #392]	; (800169c <crc_generate+0x1d8>)
 8001514:	f7fe fe7c 	bl	8000210 <strlen>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	230a      	movs	r3, #10
 800151e:	495f      	ldr	r1, [pc, #380]	; (800169c <crc_generate+0x1d8>)
 8001520:	4860      	ldr	r0, [pc, #384]	; (80016a4 <crc_generate+0x1e0>)
 8001522:	f004 ff46 	bl	80063b2 <HAL_UART_Transmit>

	//Calculate CRC for address
	curr_mem = (local_packet->address) + address_len - 8;//start at MS Byte(LSB)
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800152c:	3310      	adds	r3, #16
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3368      	adds	r3, #104	; 0x68
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
 8001538:	e017      	b.n	800156a <crc_generate+0xa6>
		for(int j = 0;j<8;j++){
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	e00b      	b.n	8001558 <crc_generate+0x94>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff3f 	bl	80013d0 <crc_calc>
		for(int j = 0;j<8;j++){
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b07      	cmp	r3, #7
 800155c:	ddf0      	ble.n	8001540 <crc_generate+0x7c>
		}
		curr_mem -= 8;
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	3b08      	subs	r3, #8
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	3301      	adds	r3, #1
 8001568:	623b      	str	r3, [r7, #32]
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	2b0d      	cmp	r3, #13
 800156e:	dde4      	ble.n	800153a <crc_generate+0x76>
	}

	//Calculate CRC for control
	curr_mem = local_packet->control;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001576:	3314      	adds	r3, #20
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < control_len; i++){
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	e00f      	b.n	80015a2 <crc_generate+0xde>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001588:	3314      	adds	r3, #20
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	4413      	add	r3, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff1a 	bl	80013d0 <crc_calc>
	for(int i = 0; i < control_len; i++){
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	3301      	adds	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b07      	cmp	r3, #7
 80015a6:	ddec      	ble.n	8001582 <crc_generate+0xbe>
	}

//	//Calculate CRC for PID (if packet is of type i-frame)
	curr_mem = local_packet->PID;
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80015ae:	3318      	adds	r3, #24
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < PID_len; i++){
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e00f      	b.n	80015da <crc_generate+0x116>
		//Call crc_calc per bit
		crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr);
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80015c0:	3318      	adds	r3, #24
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	4413      	add	r3, r2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fefe 	bl	80013d0 <crc_calc>
	for(int i = 0; i < PID_len; i++){
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2b07      	cmp	r3, #7
 80015de:	ddec      	ble.n	80015ba <crc_generate+0xf6>
	}

	//Calculate CRC for Info field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 8;//start at MS Byte(LSB)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80015e6:	331c      	adds	r3, #28
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3b08      	subs	r3, #8
 80015f4:	4413      	add	r3, r2
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8);i++){
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	e017      	b.n	800162e <crc_generate+0x16a>
		for(int j = 0;j<8;j++){
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e00b      	b.n	800161c <crc_generate+0x158>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fedd 	bl	80013d0 <crc_calc>
		for(int j = 0;j<8;j++){
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3301      	adds	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b07      	cmp	r3, #7
 8001620:	ddf0      	ble.n	8001604 <crc_generate+0x140>
		}
		curr_mem -= 8;
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	3b08      	subs	r3, #8
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8);i++){
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	3301      	adds	r3, #1
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	da00      	bge.n	800163c <crc_generate+0x178>
 800163a:	3307      	adds	r3, #7
 800163c:	10db      	asrs	r3, r3, #3
 800163e:	461a      	mov	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4293      	cmp	r3, r2
 8001644:	dbdb      	blt.n	80015fe <crc_generate+0x13a>
	}

	sprintf(uartData, "rx_bitcnt = %d\n", rxBit_count);
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <crc_generate+0x1e4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4917      	ldr	r1, [pc, #92]	; (80016ac <crc_generate+0x1e8>)
 800164e:	4813      	ldr	r0, [pc, #76]	; (800169c <crc_generate+0x1d8>)
 8001650:	f005 fdf0 	bl	8007234 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001654:	4811      	ldr	r0, [pc, #68]	; (800169c <crc_generate+0x1d8>)
 8001656:	f7fe fddb 	bl	8000210 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	230a      	movs	r3, #10
 8001660:	490e      	ldr	r1, [pc, #56]	; (800169c <crc_generate+0x1d8>)
 8001662:	4810      	ldr	r0, [pc, #64]	; (80016a4 <crc_generate+0x1e0>)
 8001664:	f004 fea5 	bl	80063b2 <HAL_UART_Transmit>

	sprintf(uartData, "bitcnt_ptr = %d\n", *crc_count_ptr);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4910      	ldr	r1, [pc, #64]	; (80016b0 <crc_generate+0x1ec>)
 8001670:	480a      	ldr	r0, [pc, #40]	; (800169c <crc_generate+0x1d8>)
 8001672:	f005 fddf 	bl	8007234 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001676:	4809      	ldr	r0, [pc, #36]	; (800169c <crc_generate+0x1d8>)
 8001678:	f7fe fdca 	bl	8000210 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	230a      	movs	r3, #10
 8001682:	4906      	ldr	r1, [pc, #24]	; (800169c <crc_generate+0x1d8>)
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <crc_generate+0x1e0>)
 8001686:	f004 fe94 	bl	80063b2 <HAL_UART_Transmit>
	*crc_count_ptr = 0;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bdb0      	pop	{r4, r5, r7, pc}
 8001698:	200000c8 	.word	0x200000c8
 800169c:	20001ccc 	.word	0x20001ccc
 80016a0:	08007dfc 	.word	0x08007dfc
 80016a4:	200029c8 	.word	0x200029c8
 80016a8:	200000a0 	.word	0x200000a0
 80016ac:	08007e18 	.word	0x08007e18
 80016b0:	08007e28 	.word	0x08007e28

080016b4 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]

	//Set hardware properly
	mode = modeStart;
 80016be:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <initProgram+0x24>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	7013      	strb	r3, [r2, #0]
	toggleMode();
 80016c4:	f000 f80a 	bl	80016dc <toggleMode>
	toggleMode();
 80016c8:	f000 f808 	bl	80016dc <toggleMode>

	init_UART();
 80016cc:	f001 f83e 	bl	800274c <init_UART>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20002970 	.word	0x20002970

080016dc <toggleMode>:

void toggleMode() {
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0

	//Toggle mode
	mode = !mode;
 80016e0:	4b2e      	ldr	r3, [pc, #184]	; (800179c <toggleMode+0xc0>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf14      	ite	ne
 80016e8:	2301      	movne	r3, #1
 80016ea:	2300      	moveq	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f083 0301 	eor.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b28      	ldr	r3, [pc, #160]	; (800179c <toggleMode+0xc0>)
 80016fc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 80016fe:	4b27      	ldr	r3, [pc, #156]	; (800179c <toggleMode+0xc0>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	2120      	movs	r1, #32
 8001706:	4826      	ldr	r0, [pc, #152]	; (80017a0 <toggleMode+0xc4>)
 8001708:	f002 fdbc 	bl	8004284 <HAL_GPIO_WritePin>

	//Stop DAC
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800170c:	2100      	movs	r1, #0
 800170e:	4825      	ldr	r0, [pc, #148]	; (80017a4 <toggleMode+0xc8>)
 8001710:	f002 f81d 	bl	800374e <HAL_DAC_Stop_DMA>
	midbit = false;
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <toggleMode+0xcc>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]

	//Stop Timers the Correct Way
	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 800171a:	2100      	movs	r1, #0
 800171c:	4823      	ldr	r0, [pc, #140]	; (80017ac <toggleMode+0xd0>)
 800171e:	f003 fc75 	bl	800500c <HAL_TIM_OC_Stop_IT>
	HAL_TIM_Base_Stop(&htim3);
 8001722:	4823      	ldr	r0, [pc, #140]	; (80017b0 <toggleMode+0xd4>)
 8001724:	f003 fb69 	bl	8004dfa <HAL_TIM_Base_Stop>
	HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 8001728:	2100      	movs	r1, #0
 800172a:	4822      	ldr	r0, [pc, #136]	; (80017b4 <toggleMode+0xd8>)
 800172c:	f003 fda6 	bl	800527c <HAL_TIM_IC_Stop_IT>

	//Zero Timers
	htim2.Instance->CNT = 0;
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <toggleMode+0xd0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT = 0;
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <toggleMode+0xd4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2200      	movs	r2, #0
 800173e:	625a      	str	r2, [r3, #36]	; 0x24
	htim5.Instance->CNT = 0;
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <toggleMode+0xd8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

	//Transmission Mode
	if (mode) {
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <toggleMode+0xc0>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00d      	beq.n	800176c <toggleMode+0x90>

		//Set Timer Auto Reload Settings
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX_LOW;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <toggleMode+0xd0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	226c      	movs	r2, #108	; 0x6c
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <toggleMode+0xd4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
		htim5.Instance->ARR = TIM5_AUTORELOAD_TX;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <toggleMode+0xd8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2200      	movs	r2, #0
 8001768:	62da      	str	r2, [r3, #44]	; 0x2c

		//Start Timers the Correct Way
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
	}
}
 800176a:	e014      	b.n	8001796 <toggleMode+0xba>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX_LOW;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <toggleMode+0xd0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	226c      	movs	r2, #108	; 0x6c
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <toggleMode+0xd4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f44f 724f 	mov.w	r2, #828	; 0x33c
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
		htim5.Instance->ARR = TIM5_AUTORELOAD_TX;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <toggleMode+0xd8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2200      	movs	r2, #0
 8001784:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001786:	2100      	movs	r1, #0
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <toggleMode+0xd0>)
 800178a:	f003 fbbb 	bl	8004f04 <HAL_TIM_OC_Start_IT>
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800178e:	2100      	movs	r1, #0
 8001790:	4808      	ldr	r0, [pc, #32]	; (80017b4 <toggleMode+0xd8>)
 8001792:	f003 fd0b 	bl	80051ac <HAL_TIM_IC_Start_IT>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20002970 	.word	0x20002970
 80017a0:	40020000 	.word	0x40020000
 80017a4:	20002974 	.word	0x20002974
 80017a8:	200000a4 	.word	0x200000a4
 80017ac:	20002988 	.word	0x20002988
 80017b0:	200028d0 	.word	0x200028d0
 80017b4:	20002890 	.word	0x20002890

080017b8 <print_AX25>:
#include "debug.h"
#include "AX.25.h"
#include "FreqIO.h"
//Printing Packets
//****************************************************************************************************************
void print_AX25(){
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	b08b      	sub	sp, #44	; 0x2c
 80017bc:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80017be:	4b90      	ldr	r3, [pc, #576]	; (8001a00 <print_AX25+0x248>)
 80017c0:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80017c8:	330c      	adds	r3, #12
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 80017ce:	4b8d      	ldr	r3, [pc, #564]	; (8001a04 <print_AX25+0x24c>)
 80017d0:	4a8d      	ldr	r2, [pc, #564]	; (8001a08 <print_AX25+0x250>)
 80017d2:	4614      	mov	r4, r2
 80017d4:	469c      	mov	ip, r3
 80017d6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80017da:	4665      	mov	r5, ip
 80017dc:	4626      	mov	r6, r4
 80017de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80017e0:	6028      	str	r0, [r5, #0]
 80017e2:	6069      	str	r1, [r5, #4]
 80017e4:	60aa      	str	r2, [r5, #8]
 80017e6:	60eb      	str	r3, [r5, #12]
 80017e8:	3410      	adds	r4, #16
 80017ea:	f10c 0c10 	add.w	ip, ip, #16
 80017ee:	4574      	cmp	r4, lr
 80017f0:	d1f3      	bne.n	80017da <print_AX25+0x22>
 80017f2:	4663      	mov	r3, ip
 80017f4:	4622      	mov	r2, r4
 80017f6:	6810      	ldr	r0, [r2, #0]
 80017f8:	6018      	str	r0, [r3, #0]
 80017fa:	8891      	ldrh	r1, [r2, #4]
 80017fc:	7992      	ldrb	r2, [r2, #6]
 80017fe:	8099      	strh	r1, [r3, #4]
 8001800:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001802:	4880      	ldr	r0, [pc, #512]	; (8001a04 <print_AX25+0x24c>)
 8001804:	f7fe fd04 	bl	8000210 <strlen>
 8001808:	4603      	mov	r3, r0
 800180a:	b29a      	uxth	r2, r3
 800180c:	230a      	movs	r3, #10
 800180e:	497d      	ldr	r1, [pc, #500]	; (8001a04 <print_AX25+0x24c>)
 8001810:	487e      	ldr	r0, [pc, #504]	; (8001a0c <print_AX25+0x254>)
 8001812:	f004 fdce 	bl	80063b2 <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->AX25_PACKET) + address_len - 1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	336f      	adds	r3, #111	; 0x6f
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<address_len/8;i++){
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
 8001820:	e041      	b.n	80018a6 <print_AX25+0xee>
		sprintf(uartData, "Address Field %d =",i+1);
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	3301      	adds	r3, #1
 8001826:	461a      	mov	r2, r3
 8001828:	4979      	ldr	r1, [pc, #484]	; (8001a10 <print_AX25+0x258>)
 800182a:	4876      	ldr	r0, [pc, #472]	; (8001a04 <print_AX25+0x24c>)
 800182c:	f005 fd02 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001830:	4874      	ldr	r0, [pc, #464]	; (8001a04 <print_AX25+0x24c>)
 8001832:	f7fe fced 	bl	8000210 <strlen>
 8001836:	4603      	mov	r3, r0
 8001838:	b29a      	uxth	r2, r3
 800183a:	230a      	movs	r3, #10
 800183c:	4971      	ldr	r1, [pc, #452]	; (8001a04 <print_AX25+0x24c>)
 800183e:	4873      	ldr	r0, [pc, #460]	; (8001a0c <print_AX25+0x254>)
 8001840:	f004 fdb7 	bl	80063b2 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	e016      	b.n	8001878 <print_AX25+0xc0>
			sprintf(uartData, " %d ",*(curr_mem-j));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	425b      	negs	r3, r3
 800184e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001850:	4413      	add	r3, r2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	496f      	ldr	r1, [pc, #444]	; (8001a14 <print_AX25+0x25c>)
 8001858:	486a      	ldr	r0, [pc, #424]	; (8001a04 <print_AX25+0x24c>)
 800185a:	f005 fceb 	bl	8007234 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800185e:	4869      	ldr	r0, [pc, #420]	; (8001a04 <print_AX25+0x24c>)
 8001860:	f7fe fcd6 	bl	8000210 <strlen>
 8001864:	4603      	mov	r3, r0
 8001866:	b29a      	uxth	r2, r3
 8001868:	230a      	movs	r3, #10
 800186a:	4966      	ldr	r1, [pc, #408]	; (8001a04 <print_AX25+0x24c>)
 800186c:	4867      	ldr	r0, [pc, #412]	; (8001a0c <print_AX25+0x254>)
 800186e:	f004 fda0 	bl	80063b2 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3301      	adds	r3, #1
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	2b07      	cmp	r3, #7
 800187c:	dde5      	ble.n	800184a <print_AX25+0x92>
		}
		curr_mem -= 8;
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	3b08      	subs	r3, #8
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(uartData, "\n");
 8001884:	4a5f      	ldr	r2, [pc, #380]	; (8001a04 <print_AX25+0x24c>)
 8001886:	4b64      	ldr	r3, [pc, #400]	; (8001a18 <print_AX25+0x260>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800188c:	485d      	ldr	r0, [pc, #372]	; (8001a04 <print_AX25+0x24c>)
 800188e:	f7fe fcbf 	bl	8000210 <strlen>
 8001892:	4603      	mov	r3, r0
 8001894:	b29a      	uxth	r2, r3
 8001896:	230a      	movs	r3, #10
 8001898:	495a      	ldr	r1, [pc, #360]	; (8001a04 <print_AX25+0x24c>)
 800189a:	485c      	ldr	r0, [pc, #368]	; (8001a0c <print_AX25+0x254>)
 800189c:	f004 fd89 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	3301      	adds	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	2b0d      	cmp	r3, #13
 80018aa:	ddba      	ble.n	8001822 <print_AX25+0x6a>
	}

	//Print Control Field
	curr_mem += address_len;//Subtract 8 to start at the flag start
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	3370      	adds	r3, #112	; 0x70
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(uartData, "Control Field   =");
 80018b2:	4a54      	ldr	r2, [pc, #336]	; (8001a04 <print_AX25+0x24c>)
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <print_AX25+0x264>)
 80018b6:	4615      	mov	r5, r2
 80018b8:	461c      	mov	r4, r3
 80018ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018bc:	6028      	str	r0, [r5, #0]
 80018be:	6069      	str	r1, [r5, #4]
 80018c0:	60aa      	str	r2, [r5, #8]
 80018c2:	60eb      	str	r3, [r5, #12]
 80018c4:	8823      	ldrh	r3, [r4, #0]
 80018c6:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018c8:	484e      	ldr	r0, [pc, #312]	; (8001a04 <print_AX25+0x24c>)
 80018ca:	f7fe fca1 	bl	8000210 <strlen>
 80018ce:	4603      	mov	r3, r0
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	230a      	movs	r3, #10
 80018d4:	494b      	ldr	r1, [pc, #300]	; (8001a04 <print_AX25+0x24c>)
 80018d6:	484d      	ldr	r0, [pc, #308]	; (8001a0c <print_AX25+0x254>)
 80018d8:	f004 fd6b 	bl	80063b2 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	e017      	b.n	8001912 <print_AX25+0x15a>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	f1c3 0307 	rsb	r3, r3, #7
 80018e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ea:	4413      	add	r3, r2
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4948      	ldr	r1, [pc, #288]	; (8001a14 <print_AX25+0x25c>)
 80018f2:	4844      	ldr	r0, [pc, #272]	; (8001a04 <print_AX25+0x24c>)
 80018f4:	f005 fc9e 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018f8:	4842      	ldr	r0, [pc, #264]	; (8001a04 <print_AX25+0x24c>)
 80018fa:	f7fe fc89 	bl	8000210 <strlen>
 80018fe:	4603      	mov	r3, r0
 8001900:	b29a      	uxth	r2, r3
 8001902:	230a      	movs	r3, #10
 8001904:	493f      	ldr	r1, [pc, #252]	; (8001a04 <print_AX25+0x24c>)
 8001906:	4841      	ldr	r0, [pc, #260]	; (8001a0c <print_AX25+0x254>)
 8001908:	f004 fd53 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	3301      	adds	r3, #1
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b07      	cmp	r3, #7
 8001916:	dde4      	ble.n	80018e2 <print_AX25+0x12a>
	}
	sprintf(uartData, "\n");
 8001918:	4a3a      	ldr	r2, [pc, #232]	; (8001a04 <print_AX25+0x24c>)
 800191a:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <print_AX25+0x260>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001920:	4838      	ldr	r0, [pc, #224]	; (8001a04 <print_AX25+0x24c>)
 8001922:	f7fe fc75 	bl	8000210 <strlen>
 8001926:	4603      	mov	r3, r0
 8001928:	b29a      	uxth	r2, r3
 800192a:	230a      	movs	r3, #10
 800192c:	4935      	ldr	r1, [pc, #212]	; (8001a04 <print_AX25+0x24c>)
 800192e:	4837      	ldr	r0, [pc, #220]	; (8001a0c <print_AX25+0x254>)
 8001930:	f004 fd3f 	bl	80063b2 <HAL_UART_Transmit>

	//PID
	curr_mem += control_len;//Subtract 8 to start at the flag start
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	3308      	adds	r3, #8
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(uartData, "PID Field       =");
 800193a:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <print_AX25+0x24c>)
 800193c:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <print_AX25+0x268>)
 800193e:	4615      	mov	r5, r2
 8001940:	461c      	mov	r4, r3
 8001942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001944:	6028      	str	r0, [r5, #0]
 8001946:	6069      	str	r1, [r5, #4]
 8001948:	60aa      	str	r2, [r5, #8]
 800194a:	60eb      	str	r3, [r5, #12]
 800194c:	8823      	ldrh	r3, [r4, #0]
 800194e:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001950:	482c      	ldr	r0, [pc, #176]	; (8001a04 <print_AX25+0x24c>)
 8001952:	f7fe fc5d 	bl	8000210 <strlen>
 8001956:	4603      	mov	r3, r0
 8001958:	b29a      	uxth	r2, r3
 800195a:	230a      	movs	r3, #10
 800195c:	4929      	ldr	r1, [pc, #164]	; (8001a04 <print_AX25+0x24c>)
 800195e:	482b      	ldr	r0, [pc, #172]	; (8001a0c <print_AX25+0x254>)
 8001960:	f004 fd27 	bl	80063b2 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e017      	b.n	800199a <print_AX25+0x1e2>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f1c3 0307 	rsb	r3, r3, #7
 8001970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4926      	ldr	r1, [pc, #152]	; (8001a14 <print_AX25+0x25c>)
 800197a:	4822      	ldr	r0, [pc, #136]	; (8001a04 <print_AX25+0x24c>)
 800197c:	f005 fc5a 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001980:	4820      	ldr	r0, [pc, #128]	; (8001a04 <print_AX25+0x24c>)
 8001982:	f7fe fc45 	bl	8000210 <strlen>
 8001986:	4603      	mov	r3, r0
 8001988:	b29a      	uxth	r2, r3
 800198a:	230a      	movs	r3, #10
 800198c:	491d      	ldr	r1, [pc, #116]	; (8001a04 <print_AX25+0x24c>)
 800198e:	481f      	ldr	r0, [pc, #124]	; (8001a0c <print_AX25+0x254>)
 8001990:	f004 fd0f 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b07      	cmp	r3, #7
 800199e:	dde4      	ble.n	800196a <print_AX25+0x1b2>
	}
	sprintf(uartData, "\n");
 80019a0:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <print_AX25+0x24c>)
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <print_AX25+0x260>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80019a8:	4816      	ldr	r0, [pc, #88]	; (8001a04 <print_AX25+0x24c>)
 80019aa:	f7fe fc31 	bl	8000210 <strlen>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	230a      	movs	r3, #10
 80019b4:	4913      	ldr	r1, [pc, #76]	; (8001a04 <print_AX25+0x24c>)
 80019b6:	4815      	ldr	r0, [pc, #84]	; (8001a0c <print_AX25+0x254>)
 80019b8:	f004 fcfb 	bl	80063b2 <HAL_UART_Transmit>
	curr_mem += PID_len;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	3308      	adds	r3, #8
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24

	//Print Info Field
	curr_mem += local_packet->Info_Len - 1;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ce:	4413      	add	r3, r2
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e055      	b.n	8001a84 <print_AX25+0x2cc>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	3301      	adds	r3, #1
 80019dc:	461a      	mov	r2, r3
 80019de:	4911      	ldr	r1, [pc, #68]	; (8001a24 <print_AX25+0x26c>)
 80019e0:	4808      	ldr	r0, [pc, #32]	; (8001a04 <print_AX25+0x24c>)
 80019e2:	f005 fc27 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <print_AX25+0x24c>)
 80019e8:	f7fe fc12 	bl	8000210 <strlen>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	230a      	movs	r3, #10
 80019f2:	4904      	ldr	r1, [pc, #16]	; (8001a04 <print_AX25+0x24c>)
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <print_AX25+0x254>)
 80019f6:	f004 fcdc 	bl	80063b2 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	e02a      	b.n	8001a56 <print_AX25+0x29e>
 8001a00:	200000c8 	.word	0x200000c8
 8001a04:	20001ccc 	.word	0x20001ccc
 8001a08:	08007e3c 	.word	0x08007e3c
 8001a0c:	200029c8 	.word	0x200029c8
 8001a10:	08007e74 	.word	0x08007e74
 8001a14:	08007e88 	.word	0x08007e88
 8001a18:	08007e90 	.word	0x08007e90
 8001a1c:	08007e94 	.word	0x08007e94
 8001a20:	08007ea8 	.word	0x08007ea8
 8001a24:	08007ebc 	.word	0x08007ebc
			sprintf(uartData, " %d ",*(curr_mem-j));
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	425b      	negs	r3, r3
 8001a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	493e      	ldr	r1, [pc, #248]	; (8001b30 <print_AX25+0x378>)
 8001a36:	483f      	ldr	r0, [pc, #252]	; (8001b34 <print_AX25+0x37c>)
 8001a38:	f005 fbfc 	bl	8007234 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001a3c:	483d      	ldr	r0, [pc, #244]	; (8001b34 <print_AX25+0x37c>)
 8001a3e:	f7fe fbe7 	bl	8000210 <strlen>
 8001a42:	4603      	mov	r3, r0
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	230a      	movs	r3, #10
 8001a48:	493a      	ldr	r1, [pc, #232]	; (8001b34 <print_AX25+0x37c>)
 8001a4a:	483b      	ldr	r0, [pc, #236]	; (8001b38 <print_AX25+0x380>)
 8001a4c:	f004 fcb1 	bl	80063b2 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3301      	adds	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b07      	cmp	r3, #7
 8001a5a:	dde5      	ble.n	8001a28 <print_AX25+0x270>
		}
		curr_mem -= 8;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	3b08      	subs	r3, #8
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(uartData, "\n");
 8001a62:	4a34      	ldr	r2, [pc, #208]	; (8001b34 <print_AX25+0x37c>)
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <print_AX25+0x384>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001a6a:	4832      	ldr	r0, [pc, #200]	; (8001b34 <print_AX25+0x37c>)
 8001a6c:	f7fe fbd0 	bl	8000210 <strlen>
 8001a70:	4603      	mov	r3, r0
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	230a      	movs	r3, #10
 8001a76:	492f      	ldr	r1, [pc, #188]	; (8001b34 <print_AX25+0x37c>)
 8001a78:	482f      	ldr	r0, [pc, #188]	; (8001b38 <print_AX25+0x380>)
 8001a7a:	f004 fc9a 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	3301      	adds	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da00      	bge.n	8001a92 <print_AX25+0x2da>
 8001a90:	3307      	adds	r3, #7
 8001a92:	10db      	asrs	r3, r3, #3
 8001a94:	461a      	mov	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	db9d      	blt.n	80019d8 <print_AX25+0x220>
	}
	curr_mem += local_packet->Info_Len;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	4413      	add	r3, r2
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24

	sprintf(uartData, "FCS Field = ")	;
 8001aac:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <print_AX25+0x37c>)
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <print_AX25+0x388>)
 8001ab0:	4614      	mov	r4, r2
 8001ab2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ab4:	6020      	str	r0, [r4, #0]
 8001ab6:	6061      	str	r1, [r4, #4]
 8001ab8:	60a2      	str	r2, [r4, #8]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	7323      	strb	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001abe:	481d      	ldr	r0, [pc, #116]	; (8001b34 <print_AX25+0x37c>)
 8001ac0:	f7fe fba6 	bl	8000210 <strlen>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	230a      	movs	r3, #10
 8001aca:	491a      	ldr	r1, [pc, #104]	; (8001b34 <print_AX25+0x37c>)
 8001acc:	481a      	ldr	r0, [pc, #104]	; (8001b38 <print_AX25+0x380>)
 8001ace:	f004 fc70 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len;i++){
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	e015      	b.n	8001b04 <print_AX25+0x34c>
		sprintf(uartData, " %d ",curr_mem[i])	;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001adc:	4413      	add	r3, r2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4913      	ldr	r1, [pc, #76]	; (8001b30 <print_AX25+0x378>)
 8001ae4:	4813      	ldr	r0, [pc, #76]	; (8001b34 <print_AX25+0x37c>)
 8001ae6:	f005 fba5 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001aea:	4812      	ldr	r0, [pc, #72]	; (8001b34 <print_AX25+0x37c>)
 8001aec:	f7fe fb90 	bl	8000210 <strlen>
 8001af0:	4603      	mov	r3, r0
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	230a      	movs	r3, #10
 8001af6:	490f      	ldr	r1, [pc, #60]	; (8001b34 <print_AX25+0x37c>)
 8001af8:	480f      	ldr	r0, [pc, #60]	; (8001b38 <print_AX25+0x380>)
 8001afa:	f004 fc5a 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len;i++){
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3301      	adds	r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b0f      	cmp	r3, #15
 8001b08:	dde6      	ble.n	8001ad8 <print_AX25+0x320>
	}
	sprintf(uartData, "\n");
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <print_AX25+0x37c>)
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <print_AX25+0x384>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b12:	4808      	ldr	r0, [pc, #32]	; (8001b34 <print_AX25+0x37c>)
 8001b14:	f7fe fb7c 	bl	8000210 <strlen>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	230a      	movs	r3, #10
 8001b1e:	4905      	ldr	r1, [pc, #20]	; (8001b34 <print_AX25+0x37c>)
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <print_AX25+0x380>)
 8001b22:	f004 fc46 	bl	80063b2 <HAL_UART_Transmit>
}
 8001b26:	bf00      	nop
 8001b28:	372c      	adds	r7, #44	; 0x2c
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	08007e88 	.word	0x08007e88
 8001b34:	20001ccc 	.word	0x20001ccc
 8001b38:	200029c8 	.word	0x200029c8
 8001b3c:	08007e90 	.word	0x08007e90
 8001b40:	08007ed0 	.word	0x08007ed0

08001b44 <print_outAX25>:

void print_outAX25(){
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	b08d      	sub	sp, #52	; 0x34
 8001b48:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001b4a:	4b95      	ldr	r3, [pc, #596]	; (8001da0 <print_outAX25+0x25c>)
 8001b4c:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b54:	330c      	adds	r3, #12
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET being sent to radio\n");
 8001b5a:	4b92      	ldr	r3, [pc, #584]	; (8001da4 <print_outAX25+0x260>)
 8001b5c:	4a92      	ldr	r2, [pc, #584]	; (8001da8 <print_outAX25+0x264>)
 8001b5e:	4614      	mov	r4, r2
 8001b60:	469c      	mov	ip, r3
 8001b62:	f104 0e20 	add.w	lr, r4, #32
 8001b66:	4665      	mov	r5, ip
 8001b68:	4626      	mov	r6, r4
 8001b6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b6c:	6028      	str	r0, [r5, #0]
 8001b6e:	6069      	str	r1, [r5, #4]
 8001b70:	60aa      	str	r2, [r5, #8]
 8001b72:	60eb      	str	r3, [r5, #12]
 8001b74:	3410      	adds	r4, #16
 8001b76:	f10c 0c10 	add.w	ip, ip, #16
 8001b7a:	4574      	cmp	r4, lr
 8001b7c:	d1f3      	bne.n	8001b66 <print_outAX25+0x22>
 8001b7e:	4662      	mov	r2, ip
 8001b80:	4623      	mov	r3, r4
 8001b82:	cb03      	ldmia	r3!, {r0, r1}
 8001b84:	6010      	str	r0, [r2, #0]
 8001b86:	6051      	str	r1, [r2, #4]
 8001b88:	8819      	ldrh	r1, [r3, #0]
 8001b8a:	789b      	ldrb	r3, [r3, #2]
 8001b8c:	8111      	strh	r1, [r2, #8]
 8001b8e:	7293      	strb	r3, [r2, #10]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b90:	4884      	ldr	r0, [pc, #528]	; (8001da4 <print_outAX25+0x260>)
 8001b92:	f7fe fb3d 	bl	8000210 <strlen>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	230a      	movs	r3, #10
 8001b9c:	4981      	ldr	r1, [pc, #516]	; (8001da4 <print_outAX25+0x260>)
 8001b9e:	4883      	ldr	r0, [pc, #524]	; (8001dac <print_outAX25+0x268>)
 8001ba0:	f004 fc07 	bl	80063b2 <HAL_UART_Transmit>
	sprintf(uartData, "AX25 FLAG = ");
 8001ba4:	4a7f      	ldr	r2, [pc, #508]	; (8001da4 <print_outAX25+0x260>)
 8001ba6:	4b82      	ldr	r3, [pc, #520]	; (8001db0 <print_outAX25+0x26c>)
 8001ba8:	4614      	mov	r4, r2
 8001baa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001bac:	6020      	str	r0, [r4, #0]
 8001bae:	6061      	str	r1, [r4, #4]
 8001bb0:	60a2      	str	r2, [r4, #8]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	7323      	strb	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001bb6:	487b      	ldr	r0, [pc, #492]	; (8001da4 <print_outAX25+0x260>)
 8001bb8:	f7fe fb2a 	bl	8000210 <strlen>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	230a      	movs	r3, #10
 8001bc2:	4978      	ldr	r1, [pc, #480]	; (8001da4 <print_outAX25+0x260>)
 8001bc4:	4879      	ldr	r0, [pc, #484]	; (8001dac <print_outAX25+0x268>)
 8001bc6:	f004 fbf4 	bl	80063b2 <HAL_UART_Transmit>
	curr_mem = AX25TBYTE;
 8001bca:	4b7a      	ldr	r3, [pc, #488]	; (8001db4 <print_outAX25+0x270>)
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < 8; i++){
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd2:	e015      	b.n	8001c00 <print_outAX25+0xbc>
		sprintf(uartData, " %d ",curr_mem[i]);
 8001bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd8:	4413      	add	r3, r2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4976      	ldr	r1, [pc, #472]	; (8001db8 <print_outAX25+0x274>)
 8001be0:	4870      	ldr	r0, [pc, #448]	; (8001da4 <print_outAX25+0x260>)
 8001be2:	f005 fb27 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001be6:	486f      	ldr	r0, [pc, #444]	; (8001da4 <print_outAX25+0x260>)
 8001be8:	f7fe fb12 	bl	8000210 <strlen>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	496c      	ldr	r1, [pc, #432]	; (8001da4 <print_outAX25+0x260>)
 8001bf4:	486d      	ldr	r0, [pc, #436]	; (8001dac <print_outAX25+0x268>)
 8001bf6:	f004 fbdc 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0; i < 8; i++){
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c02:	2b07      	cmp	r3, #7
 8001c04:	dde6      	ble.n	8001bd4 <print_outAX25+0x90>
	}
	sprintf(uartData, "\n");
 8001c06:	4a67      	ldr	r2, [pc, #412]	; (8001da4 <print_outAX25+0x260>)
 8001c08:	4b6c      	ldr	r3, [pc, #432]	; (8001dbc <print_outAX25+0x278>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c0e:	4865      	ldr	r0, [pc, #404]	; (8001da4 <print_outAX25+0x260>)
 8001c10:	f7fe fafe 	bl	8000210 <strlen>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	230a      	movs	r3, #10
 8001c1a:	4962      	ldr	r1, [pc, #392]	; (8001da4 <print_outAX25+0x260>)
 8001c1c:	4863      	ldr	r0, [pc, #396]	; (8001dac <print_outAX25+0x268>)
 8001c1e:	f004 fbc8 	bl	80063b2 <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = local_packet->address;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c28:	3310      	adds	r3, #16
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
 8001c32:	e040      	b.n	8001cb6 <print_outAX25+0x172>
		sprintf(uartData, "Address Field %d =",i+1);
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	3301      	adds	r3, #1
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4961      	ldr	r1, [pc, #388]	; (8001dc0 <print_outAX25+0x27c>)
 8001c3c:	4859      	ldr	r0, [pc, #356]	; (8001da4 <print_outAX25+0x260>)
 8001c3e:	f005 faf9 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c42:	4858      	ldr	r0, [pc, #352]	; (8001da4 <print_outAX25+0x260>)
 8001c44:	f7fe fae4 	bl	8000210 <strlen>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	4955      	ldr	r1, [pc, #340]	; (8001da4 <print_outAX25+0x260>)
 8001c50:	4856      	ldr	r0, [pc, #344]	; (8001dac <print_outAX25+0x268>)
 8001c52:	f004 fbae 	bl	80063b2 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
 8001c5a:	e015      	b.n	8001c88 <print_outAX25+0x144>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c60:	4413      	add	r3, r2
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4954      	ldr	r1, [pc, #336]	; (8001db8 <print_outAX25+0x274>)
 8001c68:	484e      	ldr	r0, [pc, #312]	; (8001da4 <print_outAX25+0x260>)
 8001c6a:	f005 fae3 	bl	8007234 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c6e:	484d      	ldr	r0, [pc, #308]	; (8001da4 <print_outAX25+0x260>)
 8001c70:	f7fe face 	bl	8000210 <strlen>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	230a      	movs	r3, #10
 8001c7a:	494a      	ldr	r1, [pc, #296]	; (8001da4 <print_outAX25+0x260>)
 8001c7c:	484b      	ldr	r0, [pc, #300]	; (8001dac <print_outAX25+0x268>)
 8001c7e:	f004 fb98 	bl	80063b2 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	3301      	adds	r3, #1
 8001c86:	623b      	str	r3, [r7, #32]
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	2b07      	cmp	r3, #7
 8001c8c:	dde6      	ble.n	8001c5c <print_outAX25+0x118>
		}
		curr_mem += 8;
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	3308      	adds	r3, #8
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8001c94:	4a43      	ldr	r2, [pc, #268]	; (8001da4 <print_outAX25+0x260>)
 8001c96:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <print_outAX25+0x278>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c9c:	4841      	ldr	r0, [pc, #260]	; (8001da4 <print_outAX25+0x260>)
 8001c9e:	f7fe fab7 	bl	8000210 <strlen>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	493e      	ldr	r1, [pc, #248]	; (8001da4 <print_outAX25+0x260>)
 8001caa:	4840      	ldr	r0, [pc, #256]	; (8001dac <print_outAX25+0x268>)
 8001cac:	f004 fb81 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	2b0d      	cmp	r3, #13
 8001cba:	ddbb      	ble.n	8001c34 <print_outAX25+0xf0>
	}

	//if address was bitstuffed then print rest of address field
	sprintf(uartData, "Address Field extra = ");
 8001cbc:	4a39      	ldr	r2, [pc, #228]	; (8001da4 <print_outAX25+0x260>)
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <print_outAX25+0x280>)
 8001cc0:	4614      	mov	r4, r2
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc6:	6020      	str	r0, [r4, #0]
 8001cc8:	6061      	str	r1, [r4, #4]
 8001cca:	60a2      	str	r2, [r4, #8]
 8001ccc:	60e3      	str	r3, [r4, #12]
 8001cce:	6828      	ldr	r0, [r5, #0]
 8001cd0:	6120      	str	r0, [r4, #16]
 8001cd2:	88ab      	ldrh	r3, [r5, #4]
 8001cd4:	79aa      	ldrb	r2, [r5, #6]
 8001cd6:	82a3      	strh	r3, [r4, #20]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	75a3      	strb	r3, [r4, #22]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001cdc:	4831      	ldr	r0, [pc, #196]	; (8001da4 <print_outAX25+0x260>)
 8001cde:	f7fe fa97 	bl	8000210 <strlen>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	492e      	ldr	r1, [pc, #184]	; (8001da4 <print_outAX25+0x260>)
 8001cea:	4830      	ldr	r0, [pc, #192]	; (8001dac <print_outAX25+0x268>)
 8001cec:	f004 fb61 	bl	80063b2 <HAL_UART_Transmit>
	curr_mem += address_len;
 8001cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf2:	3370      	adds	r3, #112	; 0x70
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_address > 0){
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	dd21      	ble.n	8001d48 <print_outAX25+0x204>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	e016      	b.n	8001d38 <print_outAX25+0x1f4>
			sprintf(uartData, " %d ",*(curr_mem-i));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	425b      	negs	r3, r3
 8001d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d10:	4413      	add	r3, r2
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4928      	ldr	r1, [pc, #160]	; (8001db8 <print_outAX25+0x274>)
 8001d18:	4822      	ldr	r0, [pc, #136]	; (8001da4 <print_outAX25+0x260>)
 8001d1a:	f005 fa8b 	bl	8007234 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001d1e:	4821      	ldr	r0, [pc, #132]	; (8001da4 <print_outAX25+0x260>)
 8001d20:	f7fe fa76 	bl	8000210 <strlen>
 8001d24:	4603      	mov	r3, r0
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	230a      	movs	r3, #10
 8001d2a:	491e      	ldr	r1, [pc, #120]	; (8001da4 <print_outAX25+0x260>)
 8001d2c:	481f      	ldr	r0, [pc, #124]	; (8001dac <print_outAX25+0x268>)
 8001d2e:	f004 fb40 	bl	80063b2 <HAL_UART_Transmit>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3301      	adds	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d3e:	3310      	adds	r3, #16
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	dbe0      	blt.n	8001d0a <print_outAX25+0x1c6>
		}
	}
	sprintf(uartData, "\n");
 8001d48:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <print_outAX25+0x260>)
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <print_outAX25+0x278>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001d50:	4814      	ldr	r0, [pc, #80]	; (8001da4 <print_outAX25+0x260>)
 8001d52:	f7fe fa5d 	bl	8000210 <strlen>
 8001d56:	4603      	mov	r3, r0
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	230a      	movs	r3, #10
 8001d5c:	4911      	ldr	r1, [pc, #68]	; (8001da4 <print_outAX25+0x260>)
 8001d5e:	4813      	ldr	r0, [pc, #76]	; (8001dac <print_outAX25+0x268>)
 8001d60:	f004 fb27 	bl	80063b2 <HAL_UART_Transmit>

	//Print Control Field
	curr_mem = local_packet->control;//Subtract 8 to start at the flag start
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d6a:	3314      	adds	r3, #20
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8001d70:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <print_outAX25+0x260>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <print_outAX25+0x284>)
 8001d74:	4615      	mov	r5, r2
 8001d76:	461c      	mov	r4, r3
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	6028      	str	r0, [r5, #0]
 8001d7c:	6069      	str	r1, [r5, #4]
 8001d7e:	60aa      	str	r2, [r5, #8]
 8001d80:	60eb      	str	r3, [r5, #12]
 8001d82:	8823      	ldrh	r3, [r4, #0]
 8001d84:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <print_outAX25+0x260>)
 8001d88:	f7fe fa42 	bl	8000210 <strlen>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	230a      	movs	r3, #10
 8001d92:	4904      	ldr	r1, [pc, #16]	; (8001da4 <print_outAX25+0x260>)
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <print_outAX25+0x268>)
 8001d96:	f004 fb0c 	bl	80063b2 <HAL_UART_Transmit>

	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	e02b      	b.n	8001df8 <print_outAX25+0x2b4>
 8001da0:	200000c8 	.word	0x200000c8
 8001da4:	20001ccc 	.word	0x20001ccc
 8001da8:	08007ee0 	.word	0x08007ee0
 8001dac:	200029c8 	.word	0x200029c8
 8001db0:	08007f0c 	.word	0x08007f0c
 8001db4:	20000008 	.word	0x20000008
 8001db8:	08007e88 	.word	0x08007e88
 8001dbc:	08007e90 	.word	0x08007e90
 8001dc0:	08007e74 	.word	0x08007e74
 8001dc4:	08007f1c 	.word	0x08007f1c
 8001dc8:	08007e94 	.word	0x08007e94
		sprintf(uartData, " %d ",*(curr_mem+i));
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4990      	ldr	r1, [pc, #576]	; (8002018 <print_outAX25+0x4d4>)
 8001dd8:	4890      	ldr	r0, [pc, #576]	; (800201c <print_outAX25+0x4d8>)
 8001dda:	f005 fa2b 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001dde:	488f      	ldr	r0, [pc, #572]	; (800201c <print_outAX25+0x4d8>)
 8001de0:	f7fe fa16 	bl	8000210 <strlen>
 8001de4:	4603      	mov	r3, r0
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	230a      	movs	r3, #10
 8001dea:	498c      	ldr	r1, [pc, #560]	; (800201c <print_outAX25+0x4d8>)
 8001dec:	488c      	ldr	r0, [pc, #560]	; (8002020 <print_outAX25+0x4dc>)
 8001dee:	f004 fae0 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001dfe:	3314      	adds	r3, #20
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3308      	adds	r3, #8
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dbe0      	blt.n	8001dcc <print_outAX25+0x288>
	}
	sprintf(uartData, "\n");
 8001e0a:	4a84      	ldr	r2, [pc, #528]	; (800201c <print_outAX25+0x4d8>)
 8001e0c:	4b85      	ldr	r3, [pc, #532]	; (8002024 <print_outAX25+0x4e0>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e12:	4882      	ldr	r0, [pc, #520]	; (800201c <print_outAX25+0x4d8>)
 8001e14:	f7fe f9fc 	bl	8000210 <strlen>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	497f      	ldr	r1, [pc, #508]	; (800201c <print_outAX25+0x4d8>)
 8001e20:	487f      	ldr	r0, [pc, #508]	; (8002020 <print_outAX25+0x4dc>)
 8001e22:	f004 fac6 	bl	80063b2 <HAL_UART_Transmit>

	//PID
	curr_mem = local_packet->PID;//Subtract 8 to start at the flag start
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001e2c:	3318      	adds	r3, #24
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8001e32:	4a7a      	ldr	r2, [pc, #488]	; (800201c <print_outAX25+0x4d8>)
 8001e34:	4b7c      	ldr	r3, [pc, #496]	; (8002028 <print_outAX25+0x4e4>)
 8001e36:	4615      	mov	r5, r2
 8001e38:	461c      	mov	r4, r3
 8001e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3c:	6028      	str	r0, [r5, #0]
 8001e3e:	6069      	str	r1, [r5, #4]
 8001e40:	60aa      	str	r2, [r5, #8]
 8001e42:	60eb      	str	r3, [r5, #12]
 8001e44:	8823      	ldrh	r3, [r4, #0]
 8001e46:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e48:	4874      	ldr	r0, [pc, #464]	; (800201c <print_outAX25+0x4d8>)
 8001e4a:	f7fe f9e1 	bl	8000210 <strlen>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	230a      	movs	r3, #10
 8001e54:	4971      	ldr	r1, [pc, #452]	; (800201c <print_outAX25+0x4d8>)
 8001e56:	4872      	ldr	r0, [pc, #456]	; (8002020 <print_outAX25+0x4dc>)
 8001e58:	f004 faab 	bl	80063b2 <HAL_UART_Transmit>

	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	e015      	b.n	8001e8e <print_outAX25+0x34a>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e66:	4413      	add	r3, r2
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	496a      	ldr	r1, [pc, #424]	; (8002018 <print_outAX25+0x4d4>)
 8001e6e:	486b      	ldr	r0, [pc, #428]	; (800201c <print_outAX25+0x4d8>)
 8001e70:	f005 f9e0 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e74:	4869      	ldr	r0, [pc, #420]	; (800201c <print_outAX25+0x4d8>)
 8001e76:	f7fe f9cb 	bl	8000210 <strlen>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	230a      	movs	r3, #10
 8001e80:	4966      	ldr	r1, [pc, #408]	; (800201c <print_outAX25+0x4d8>)
 8001e82:	4867      	ldr	r0, [pc, #412]	; (8002020 <print_outAX25+0x4dc>)
 8001e84:	f004 fa95 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001e94:	3318      	adds	r3, #24
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3308      	adds	r3, #8
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	dbe0      	blt.n	8001e62 <print_outAX25+0x31e>
	}
	sprintf(uartData, "\n");
 8001ea0:	4a5e      	ldr	r2, [pc, #376]	; (800201c <print_outAX25+0x4d8>)
 8001ea2:	4b60      	ldr	r3, [pc, #384]	; (8002024 <print_outAX25+0x4e0>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ea8:	485c      	ldr	r0, [pc, #368]	; (800201c <print_outAX25+0x4d8>)
 8001eaa:	f7fe f9b1 	bl	8000210 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	230a      	movs	r3, #10
 8001eb4:	4959      	ldr	r1, [pc, #356]	; (800201c <print_outAX25+0x4d8>)
 8001eb6:	485a      	ldr	r0, [pc, #360]	; (8002020 <print_outAX25+0x4dc>)
 8001eb8:	f004 fa7b 	bl	80063b2 <HAL_UART_Transmit>

	sprintf(uartData, "Info Field = ");
 8001ebc:	4a57      	ldr	r2, [pc, #348]	; (800201c <print_outAX25+0x4d8>)
 8001ebe:	4b5b      	ldr	r3, [pc, #364]	; (800202c <print_outAX25+0x4e8>)
 8001ec0:	4614      	mov	r4, r2
 8001ec2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ec4:	6020      	str	r0, [r4, #0]
 8001ec6:	6061      	str	r1, [r4, #4]
 8001ec8:	60a2      	str	r2, [r4, #8]
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	81a3      	strh	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ece:	4853      	ldr	r0, [pc, #332]	; (800201c <print_outAX25+0x4d8>)
 8001ed0:	f7fe f99e 	bl	8000210 <strlen>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	230a      	movs	r3, #10
 8001eda:	4950      	ldr	r1, [pc, #320]	; (800201c <print_outAX25+0x4d8>)
 8001edc:	4850      	ldr	r0, [pc, #320]	; (8002020 <print_outAX25+0x4dc>)
 8001ede:	f004 fa68 	bl	80063b2 <HAL_UART_Transmit>
	curr_mem = local_packet->Info;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001ee8:	331c      	adds	r3, #28
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < local_packet->Info_Len + local_packet->stuffed_Info;i++){
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	e015      	b.n	8001f20 <print_outAX25+0x3dc>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef8:	4413      	add	r3, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4946      	ldr	r1, [pc, #280]	; (8002018 <print_outAX25+0x4d4>)
 8001f00:	4846      	ldr	r0, [pc, #280]	; (800201c <print_outAX25+0x4d8>)
 8001f02:	f005 f997 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f06:	4845      	ldr	r0, [pc, #276]	; (800201c <print_outAX25+0x4d8>)
 8001f08:	f7fe f982 	bl	8000210 <strlen>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	230a      	movs	r3, #10
 8001f12:	4942      	ldr	r1, [pc, #264]	; (800201c <print_outAX25+0x4d8>)
 8001f14:	4842      	ldr	r0, [pc, #264]	; (8002020 <print_outAX25+0x4dc>)
 8001f16:	f004 fa4c 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0; i < local_packet->Info_Len + local_packet->stuffed_Info;i++){
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001f2e:	331c      	adds	r3, #28
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	dbdc      	blt.n	8001ef4 <print_outAX25+0x3b0>
	}
	sprintf(uartData, "\n");
 8001f3a:	4a38      	ldr	r2, [pc, #224]	; (800201c <print_outAX25+0x4d8>)
 8001f3c:	4b39      	ldr	r3, [pc, #228]	; (8002024 <print_outAX25+0x4e0>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f42:	4836      	ldr	r0, [pc, #216]	; (800201c <print_outAX25+0x4d8>)
 8001f44:	f7fe f964 	bl	8000210 <strlen>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	230a      	movs	r3, #10
 8001f4e:	4933      	ldr	r1, [pc, #204]	; (800201c <print_outAX25+0x4d8>)
 8001f50:	4833      	ldr	r0, [pc, #204]	; (8002020 <print_outAX25+0x4dc>)
 8001f52:	f004 fa2e 	bl	80063b2 <HAL_UART_Transmit>

	curr_mem = local_packet->FCS;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "FCS Field     =")	;
 8001f62:	4a2e      	ldr	r2, [pc, #184]	; (800201c <print_outAX25+0x4d8>)
 8001f64:	4b32      	ldr	r3, [pc, #200]	; (8002030 <print_outAX25+0x4ec>)
 8001f66:	4614      	mov	r4, r2
 8001f68:	461d      	mov	r5, r3
 8001f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f6c:	6020      	str	r0, [r4, #0]
 8001f6e:	6061      	str	r1, [r4, #4]
 8001f70:	60a2      	str	r2, [r4, #8]
 8001f72:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f74:	4829      	ldr	r0, [pc, #164]	; (800201c <print_outAX25+0x4d8>)
 8001f76:	f7fe f94b 	bl	8000210 <strlen>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	230a      	movs	r3, #10
 8001f80:	4926      	ldr	r1, [pc, #152]	; (800201c <print_outAX25+0x4d8>)
 8001f82:	4827      	ldr	r0, [pc, #156]	; (8002020 <print_outAX25+0x4dc>)
 8001f84:	f004 fa15 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	e015      	b.n	8001fba <print_outAX25+0x476>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	491f      	ldr	r1, [pc, #124]	; (8002018 <print_outAX25+0x4d4>)
 8001f9a:	4820      	ldr	r0, [pc, #128]	; (800201c <print_outAX25+0x4d8>)
 8001f9c:	f005 f94a 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001fa0:	481e      	ldr	r0, [pc, #120]	; (800201c <print_outAX25+0x4d8>)
 8001fa2:	f7fe f935 	bl	8000210 <strlen>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	230a      	movs	r3, #10
 8001fac:	491b      	ldr	r1, [pc, #108]	; (800201c <print_outAX25+0x4d8>)
 8001fae:	481c      	ldr	r0, [pc, #112]	; (8002020 <print_outAX25+0x4dc>)
 8001fb0:	f004 f9ff 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3310      	adds	r3, #16
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	dbe1      	blt.n	8001f8e <print_outAX25+0x44a>
	}

	sprintf(uartData, "\n");
 8001fca:	4a14      	ldr	r2, [pc, #80]	; (800201c <print_outAX25+0x4d8>)
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <print_outAX25+0x4e0>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001fd2:	4812      	ldr	r0, [pc, #72]	; (800201c <print_outAX25+0x4d8>)
 8001fd4:	f7fe f91c 	bl	8000210 <strlen>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	230a      	movs	r3, #10
 8001fde:	490f      	ldr	r1, [pc, #60]	; (800201c <print_outAX25+0x4d8>)
 8001fe0:	480f      	ldr	r0, [pc, #60]	; (8002020 <print_outAX25+0x4dc>)
 8001fe2:	f004 f9e6 	bl	80063b2 <HAL_UART_Transmit>

	sprintf(uartData, "AX25 FLAG = ");
 8001fe6:	4a0d      	ldr	r2, [pc, #52]	; (800201c <print_outAX25+0x4d8>)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <print_outAX25+0x4f0>)
 8001fea:	4614      	mov	r4, r2
 8001fec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001fee:	6020      	str	r0, [r4, #0]
 8001ff0:	6061      	str	r1, [r4, #4]
 8001ff2:	60a2      	str	r2, [r4, #8]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	7323      	strb	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ff8:	4808      	ldr	r0, [pc, #32]	; (800201c <print_outAX25+0x4d8>)
 8001ffa:	f7fe f909 	bl	8000210 <strlen>
 8001ffe:	4603      	mov	r3, r0
 8002000:	b29a      	uxth	r2, r3
 8002002:	230a      	movs	r3, #10
 8002004:	4905      	ldr	r1, [pc, #20]	; (800201c <print_outAX25+0x4d8>)
 8002006:	4806      	ldr	r0, [pc, #24]	; (8002020 <print_outAX25+0x4dc>)
 8002008:	f004 f9d3 	bl	80063b2 <HAL_UART_Transmit>
	curr_mem = AX25TBYTE;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <print_outAX25+0x4f4>)
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < 8; i++){
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	e028      	b.n	8002068 <print_outAX25+0x524>
 8002016:	bf00      	nop
 8002018:	08007e88 	.word	0x08007e88
 800201c:	20001ccc 	.word	0x20001ccc
 8002020:	200029c8 	.word	0x200029c8
 8002024:	08007e90 	.word	0x08007e90
 8002028:	08007ea8 	.word	0x08007ea8
 800202c:	08007f34 	.word	0x08007f34
 8002030:	08007f44 	.word	0x08007f44
 8002034:	08007f0c 	.word	0x08007f0c
 8002038:	20000008 	.word	0x20000008
		sprintf(uartData, " %d ",curr_mem[i]);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002040:	4413      	add	r3, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4924      	ldr	r1, [pc, #144]	; (80020d8 <print_outAX25+0x594>)
 8002048:	4824      	ldr	r0, [pc, #144]	; (80020dc <print_outAX25+0x598>)
 800204a:	f005 f8f3 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800204e:	4823      	ldr	r0, [pc, #140]	; (80020dc <print_outAX25+0x598>)
 8002050:	f7fe f8de 	bl	8000210 <strlen>
 8002054:	4603      	mov	r3, r0
 8002056:	b29a      	uxth	r2, r3
 8002058:	230a      	movs	r3, #10
 800205a:	4920      	ldr	r1, [pc, #128]	; (80020dc <print_outAX25+0x598>)
 800205c:	4820      	ldr	r0, [pc, #128]	; (80020e0 <print_outAX25+0x59c>)
 800205e:	f004 f9a8 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0; i < 8; i++){
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3301      	adds	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b07      	cmp	r3, #7
 800206c:	dde6      	ble.n	800203c <print_outAX25+0x4f8>
	}
	sprintf(uartData, "\n");
 800206e:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <print_outAX25+0x598>)
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <print_outAX25+0x5a0>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002076:	4819      	ldr	r0, [pc, #100]	; (80020dc <print_outAX25+0x598>)
 8002078:	f7fe f8ca 	bl	8000210 <strlen>
 800207c:	4603      	mov	r3, r0
 800207e:	b29a      	uxth	r2, r3
 8002080:	230a      	movs	r3, #10
 8002082:	4916      	ldr	r1, [pc, #88]	; (80020dc <print_outAX25+0x598>)
 8002084:	4816      	ldr	r0, [pc, #88]	; (80020e0 <print_outAX25+0x59c>)
 8002086:	f004 f994 	bl	80063b2 <HAL_UART_Transmit>



	//reset bitstuff members
	local_packet->stuffed_address = 0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002090:	3310      	adds	r3, #16
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_control = 0;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800209c:	3314      	adds	r3, #20
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_PID = 0;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80020a8:	3318      	adds	r3, #24
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_Info = 0;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80020b4:	331c      	adds	r3, #28
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_FCS = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
	local_packet->bit_stuffed_zeros = 0;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80020ca:	3304      	adds	r3, #4
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	bf00      	nop
 80020d2:	3734      	adds	r7, #52	; 0x34
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d8:	08007e88 	.word	0x08007e88
 80020dc:	20001ccc 	.word	0x20001ccc
 80020e0:	200029c8 	.word	0x200029c8
 80020e4:	08007e90 	.word	0x08007e90

080020e8 <print_KISS>:

void print_KISS(){
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	b08d      	sub	sp, #52	; 0x34
 80020ec:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80020ee:	4baf      	ldr	r3, [pc, #700]	; (80023ac <print_KISS+0x2c4>)
 80020f0:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80020f8:	330c      	adds	r3, #12
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 80020fe:	4bac      	ldr	r3, [pc, #688]	; (80023b0 <print_KISS+0x2c8>)
 8002100:	4aac      	ldr	r2, [pc, #688]	; (80023b4 <print_KISS+0x2cc>)
 8002102:	4614      	mov	r4, r2
 8002104:	469c      	mov	ip, r3
 8002106:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800210a:	4665      	mov	r5, ip
 800210c:	4626      	mov	r6, r4
 800210e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002110:	6028      	str	r0, [r5, #0]
 8002112:	6069      	str	r1, [r5, #4]
 8002114:	60aa      	str	r2, [r5, #8]
 8002116:	60eb      	str	r3, [r5, #12]
 8002118:	3410      	adds	r4, #16
 800211a:	f10c 0c10 	add.w	ip, ip, #16
 800211e:	4574      	cmp	r4, lr
 8002120:	d1f3      	bne.n	800210a <print_KISS+0x22>
 8002122:	4663      	mov	r3, ip
 8002124:	4622      	mov	r2, r4
 8002126:	6810      	ldr	r0, [r2, #0]
 8002128:	6018      	str	r0, [r3, #0]
 800212a:	8891      	ldrh	r1, [r2, #4]
 800212c:	7992      	ldrb	r2, [r2, #6]
 800212e:	8099      	strh	r1, [r3, #4]
 8002130:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002132:	489f      	ldr	r0, [pc, #636]	; (80023b0 <print_KISS+0x2c8>)
 8002134:	f7fe f86c 	bl	8000210 <strlen>
 8002138:	4603      	mov	r3, r0
 800213a:	b29a      	uxth	r2, r3
 800213c:	230a      	movs	r3, #10
 800213e:	499c      	ldr	r1, [pc, #624]	; (80023b0 <print_KISS+0x2c8>)
 8002140:	489d      	ldr	r0, [pc, #628]	; (80023b8 <print_KISS+0x2d0>)
 8002142:	f004 f936 	bl	80063b2 <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address + address_len + 16 - 1);//start at the flag start
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800214c:	3310      	adds	r3, #16
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	337f      	adds	r3, #127	; 0x7f
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 8002154:	4a96      	ldr	r2, [pc, #600]	; (80023b0 <print_KISS+0x2c8>)
 8002156:	4b99      	ldr	r3, [pc, #612]	; (80023bc <print_KISS+0x2d4>)
 8002158:	4615      	mov	r5, r2
 800215a:	461c      	mov	r4, r3
 800215c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215e:	6028      	str	r0, [r5, #0]
 8002160:	6069      	str	r1, [r5, #4]
 8002162:	60aa      	str	r2, [r5, #8]
 8002164:	60eb      	str	r3, [r5, #12]
 8002166:	8823      	ldrh	r3, [r4, #0]
 8002168:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800216a:	4891      	ldr	r0, [pc, #580]	; (80023b0 <print_KISS+0x2c8>)
 800216c:	f7fe f850 	bl	8000210 <strlen>
 8002170:	4603      	mov	r3, r0
 8002172:	b29a      	uxth	r2, r3
 8002174:	230a      	movs	r3, #10
 8002176:	498e      	ldr	r1, [pc, #568]	; (80023b0 <print_KISS+0x2c8>)
 8002178:	488f      	ldr	r0, [pc, #572]	; (80023b8 <print_KISS+0x2d0>)
 800217a:	f004 f91a 	bl	80063b2 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 800217e:	2300      	movs	r3, #0
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
 8002182:	e016      	b.n	80021b2 <print_KISS+0xca>
		sprintf(uartData, " %d ",*(curr_mem-i));
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	425b      	negs	r3, r3
 8002188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	498b      	ldr	r1, [pc, #556]	; (80023c0 <print_KISS+0x2d8>)
 8002192:	4887      	ldr	r0, [pc, #540]	; (80023b0 <print_KISS+0x2c8>)
 8002194:	f005 f84e 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002198:	4885      	ldr	r0, [pc, #532]	; (80023b0 <print_KISS+0x2c8>)
 800219a:	f7fe f839 	bl	8000210 <strlen>
 800219e:	4603      	mov	r3, r0
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	230a      	movs	r3, #10
 80021a4:	4982      	ldr	r1, [pc, #520]	; (80023b0 <print_KISS+0x2c8>)
 80021a6:	4884      	ldr	r0, [pc, #528]	; (80023b8 <print_KISS+0x2d0>)
 80021a8:	f004 f903 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	3301      	adds	r3, #1
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	2b07      	cmp	r3, #7
 80021b6:	dde5      	ble.n	8002184 <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 80021b8:	4a7d      	ldr	r2, [pc, #500]	; (80023b0 <print_KISS+0x2c8>)
 80021ba:	4b82      	ldr	r3, [pc, #520]	; (80023c4 <print_KISS+0x2dc>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80021c0:	487b      	ldr	r0, [pc, #492]	; (80023b0 <print_KISS+0x2c8>)
 80021c2:	f7fe f825 	bl	8000210 <strlen>
 80021c6:	4603      	mov	r3, r0
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	230a      	movs	r3, #10
 80021cc:	4978      	ldr	r1, [pc, #480]	; (80023b0 <print_KISS+0x2c8>)
 80021ce:	487a      	ldr	r0, [pc, #488]	; (80023b8 <print_KISS+0x2d0>)
 80021d0:	f004 f8ef 	bl	80063b2 <HAL_UART_Transmit>

	curr_mem = (local_packet->address) + address_len - 1;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80021da:	3310      	adds	r3, #16
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	336f      	adds	r3, #111	; 0x6f
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
 80021e6:	e041      	b.n	800226c <print_KISS+0x184>
		sprintf(uartData, "Address Field %d =",i+1);
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	3301      	adds	r3, #1
 80021ec:	461a      	mov	r2, r3
 80021ee:	4976      	ldr	r1, [pc, #472]	; (80023c8 <print_KISS+0x2e0>)
 80021f0:	486f      	ldr	r0, [pc, #444]	; (80023b0 <print_KISS+0x2c8>)
 80021f2:	f005 f81f 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80021f6:	486e      	ldr	r0, [pc, #440]	; (80023b0 <print_KISS+0x2c8>)
 80021f8:	f7fe f80a 	bl	8000210 <strlen>
 80021fc:	4603      	mov	r3, r0
 80021fe:	b29a      	uxth	r2, r3
 8002200:	230a      	movs	r3, #10
 8002202:	496b      	ldr	r1, [pc, #428]	; (80023b0 <print_KISS+0x2c8>)
 8002204:	486c      	ldr	r0, [pc, #432]	; (80023b8 <print_KISS+0x2d0>)
 8002206:	f004 f8d4 	bl	80063b2 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
 800220e:	e016      	b.n	800223e <print_KISS+0x156>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	425b      	negs	r3, r3
 8002214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002216:	4413      	add	r3, r2
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	4968      	ldr	r1, [pc, #416]	; (80023c0 <print_KISS+0x2d8>)
 800221e:	4864      	ldr	r0, [pc, #400]	; (80023b0 <print_KISS+0x2c8>)
 8002220:	f005 f808 	bl	8007234 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002224:	4862      	ldr	r0, [pc, #392]	; (80023b0 <print_KISS+0x2c8>)
 8002226:	f7fd fff3 	bl	8000210 <strlen>
 800222a:	4603      	mov	r3, r0
 800222c:	b29a      	uxth	r2, r3
 800222e:	230a      	movs	r3, #10
 8002230:	495f      	ldr	r1, [pc, #380]	; (80023b0 <print_KISS+0x2c8>)
 8002232:	4861      	ldr	r0, [pc, #388]	; (80023b8 <print_KISS+0x2d0>)
 8002234:	f004 f8bd 	bl	80063b2 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	3301      	adds	r3, #1
 800223c:	623b      	str	r3, [r7, #32]
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	2b07      	cmp	r3, #7
 8002242:	dde5      	ble.n	8002210 <print_KISS+0x128>
		}
		curr_mem -= 8;
 8002244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002246:	3b08      	subs	r3, #8
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 800224a:	4a59      	ldr	r2, [pc, #356]	; (80023b0 <print_KISS+0x2c8>)
 800224c:	4b5d      	ldr	r3, [pc, #372]	; (80023c4 <print_KISS+0x2dc>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002252:	4857      	ldr	r0, [pc, #348]	; (80023b0 <print_KISS+0x2c8>)
 8002254:	f7fd ffdc 	bl	8000210 <strlen>
 8002258:	4603      	mov	r3, r0
 800225a:	b29a      	uxth	r2, r3
 800225c:	230a      	movs	r3, #10
 800225e:	4954      	ldr	r1, [pc, #336]	; (80023b0 <print_KISS+0x2c8>)
 8002260:	4855      	ldr	r0, [pc, #340]	; (80023b8 <print_KISS+0x2d0>)
 8002262:	f004 f8a6 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	3301      	adds	r3, #1
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	2b0d      	cmp	r3, #13
 8002270:	ddba      	ble.n	80021e8 <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002278:	3314      	adds	r3, #20
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 800227e:	4a4c      	ldr	r2, [pc, #304]	; (80023b0 <print_KISS+0x2c8>)
 8002280:	4b52      	ldr	r3, [pc, #328]	; (80023cc <print_KISS+0x2e4>)
 8002282:	4615      	mov	r5, r2
 8002284:	461c      	mov	r4, r3
 8002286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002288:	6028      	str	r0, [r5, #0]
 800228a:	6069      	str	r1, [r5, #4]
 800228c:	60aa      	str	r2, [r5, #8]
 800228e:	60eb      	str	r3, [r5, #12]
 8002290:	8823      	ldrh	r3, [r4, #0]
 8002292:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002294:	4846      	ldr	r0, [pc, #280]	; (80023b0 <print_KISS+0x2c8>)
 8002296:	f7fd ffbb 	bl	8000210 <strlen>
 800229a:	4603      	mov	r3, r0
 800229c:	b29a      	uxth	r2, r3
 800229e:	230a      	movs	r3, #10
 80022a0:	4943      	ldr	r1, [pc, #268]	; (80023b0 <print_KISS+0x2c8>)
 80022a2:	4845      	ldr	r0, [pc, #276]	; (80023b8 <print_KISS+0x2d0>)
 80022a4:	f004 f885 	bl	80063b2 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	e017      	b.n	80022de <print_KISS+0x1f6>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f1c3 0307 	rsb	r3, r3, #7
 80022b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	4940      	ldr	r1, [pc, #256]	; (80023c0 <print_KISS+0x2d8>)
 80022be:	483c      	ldr	r0, [pc, #240]	; (80023b0 <print_KISS+0x2c8>)
 80022c0:	f004 ffb8 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80022c4:	483a      	ldr	r0, [pc, #232]	; (80023b0 <print_KISS+0x2c8>)
 80022c6:	f7fd ffa3 	bl	8000210 <strlen>
 80022ca:	4603      	mov	r3, r0
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	230a      	movs	r3, #10
 80022d0:	4937      	ldr	r1, [pc, #220]	; (80023b0 <print_KISS+0x2c8>)
 80022d2:	4839      	ldr	r0, [pc, #228]	; (80023b8 <print_KISS+0x2d0>)
 80022d4:	f004 f86d 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3301      	adds	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	2b07      	cmp	r3, #7
 80022e2:	dde4      	ble.n	80022ae <print_KISS+0x1c6>
	}
	sprintf(uartData, "\n");
 80022e4:	4a32      	ldr	r2, [pc, #200]	; (80023b0 <print_KISS+0x2c8>)
 80022e6:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <print_KISS+0x2dc>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80022ec:	4830      	ldr	r0, [pc, #192]	; (80023b0 <print_KISS+0x2c8>)
 80022ee:	f7fd ff8f 	bl	8000210 <strlen>
 80022f2:	4603      	mov	r3, r0
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	230a      	movs	r3, #10
 80022f8:	492d      	ldr	r1, [pc, #180]	; (80023b0 <print_KISS+0x2c8>)
 80022fa:	482f      	ldr	r0, [pc, #188]	; (80023b8 <print_KISS+0x2d0>)
 80022fc:	f004 f859 	bl	80063b2 <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002306:	3318      	adds	r3, #24
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 800230c:	4a28      	ldr	r2, [pc, #160]	; (80023b0 <print_KISS+0x2c8>)
 800230e:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <print_KISS+0x2e8>)
 8002310:	4615      	mov	r5, r2
 8002312:	461c      	mov	r4, r3
 8002314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002316:	6028      	str	r0, [r5, #0]
 8002318:	6069      	str	r1, [r5, #4]
 800231a:	60aa      	str	r2, [r5, #8]
 800231c:	60eb      	str	r3, [r5, #12]
 800231e:	8823      	ldrh	r3, [r4, #0]
 8002320:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002322:	4823      	ldr	r0, [pc, #140]	; (80023b0 <print_KISS+0x2c8>)
 8002324:	f7fd ff74 	bl	8000210 <strlen>
 8002328:	4603      	mov	r3, r0
 800232a:	b29a      	uxth	r2, r3
 800232c:	230a      	movs	r3, #10
 800232e:	4920      	ldr	r1, [pc, #128]	; (80023b0 <print_KISS+0x2c8>)
 8002330:	4821      	ldr	r0, [pc, #132]	; (80023b8 <print_KISS+0x2d0>)
 8002332:	f004 f83e 	bl	80063b2 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	e017      	b.n	800236c <print_KISS+0x284>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	491d      	ldr	r1, [pc, #116]	; (80023c0 <print_KISS+0x2d8>)
 800234c:	4818      	ldr	r0, [pc, #96]	; (80023b0 <print_KISS+0x2c8>)
 800234e:	f004 ff71 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002352:	4817      	ldr	r0, [pc, #92]	; (80023b0 <print_KISS+0x2c8>)
 8002354:	f7fd ff5c 	bl	8000210 <strlen>
 8002358:	4603      	mov	r3, r0
 800235a:	b29a      	uxth	r2, r3
 800235c:	230a      	movs	r3, #10
 800235e:	4914      	ldr	r1, [pc, #80]	; (80023b0 <print_KISS+0x2c8>)
 8002360:	4815      	ldr	r0, [pc, #84]	; (80023b8 <print_KISS+0x2d0>)
 8002362:	f004 f826 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	3301      	adds	r3, #1
 800236a:	61bb      	str	r3, [r7, #24]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2b07      	cmp	r3, #7
 8002370:	dde4      	ble.n	800233c <print_KISS+0x254>
	}
	sprintf(uartData, "\n");
 8002372:	4a0f      	ldr	r2, [pc, #60]	; (80023b0 <print_KISS+0x2c8>)
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <print_KISS+0x2dc>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800237a:	480d      	ldr	r0, [pc, #52]	; (80023b0 <print_KISS+0x2c8>)
 800237c:	f7fd ff48 	bl	8000210 <strlen>
 8002380:	4603      	mov	r3, r0
 8002382:	b29a      	uxth	r2, r3
 8002384:	230a      	movs	r3, #10
 8002386:	490a      	ldr	r1, [pc, #40]	; (80023b0 <print_KISS+0x2c8>)
 8002388:	480b      	ldr	r0, [pc, #44]	; (80023b8 <print_KISS+0x2d0>)
 800238a:	f004 f812 	bl	80063b2 <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002394:	331c      	adds	r3, #28
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e055      	b.n	8002458 <print_KISS+0x370>
 80023ac:	200000c8 	.word	0x200000c8
 80023b0:	20001ccc 	.word	0x20001ccc
 80023b4:	08007f54 	.word	0x08007f54
 80023b8:	200029c8 	.word	0x200029c8
 80023bc:	08007f8c 	.word	0x08007f8c
 80023c0:	08007e88 	.word	0x08007e88
 80023c4:	08007e90 	.word	0x08007e90
 80023c8:	08007e74 	.word	0x08007e74
 80023cc:	08007e94 	.word	0x08007e94
 80023d0:	08007ea8 	.word	0x08007ea8
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3301      	adds	r3, #1
 80023d8:	461a      	mov	r2, r3
 80023da:	494a      	ldr	r1, [pc, #296]	; (8002504 <print_KISS+0x41c>)
 80023dc:	484a      	ldr	r0, [pc, #296]	; (8002508 <print_KISS+0x420>)
 80023de:	f004 ff29 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80023e2:	4849      	ldr	r0, [pc, #292]	; (8002508 <print_KISS+0x420>)
 80023e4:	f7fd ff14 	bl	8000210 <strlen>
 80023e8:	4603      	mov	r3, r0
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	230a      	movs	r3, #10
 80023ee:	4946      	ldr	r1, [pc, #280]	; (8002508 <print_KISS+0x420>)
 80023f0:	4846      	ldr	r0, [pc, #280]	; (800250c <print_KISS+0x424>)
 80023f2:	f003 ffde 	bl	80063b2 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	e016      	b.n	800242a <print_KISS+0x342>
			sprintf(uartData, " %d ",*(curr_mem-j));
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	425b      	negs	r3, r3
 8002400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002402:	4413      	add	r3, r2
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	4941      	ldr	r1, [pc, #260]	; (8002510 <print_KISS+0x428>)
 800240a:	483f      	ldr	r0, [pc, #252]	; (8002508 <print_KISS+0x420>)
 800240c:	f004 ff12 	bl	8007234 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002410:	483d      	ldr	r0, [pc, #244]	; (8002508 <print_KISS+0x420>)
 8002412:	f7fd fefd 	bl	8000210 <strlen>
 8002416:	4603      	mov	r3, r0
 8002418:	b29a      	uxth	r2, r3
 800241a:	230a      	movs	r3, #10
 800241c:	493a      	ldr	r1, [pc, #232]	; (8002508 <print_KISS+0x420>)
 800241e:	483b      	ldr	r0, [pc, #236]	; (800250c <print_KISS+0x424>)
 8002420:	f003 ffc7 	bl	80063b2 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	3301      	adds	r3, #1
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b07      	cmp	r3, #7
 800242e:	dde5      	ble.n	80023fc <print_KISS+0x314>
		}
		curr_mem -= 8;
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	3b08      	subs	r3, #8
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002436:	4a34      	ldr	r2, [pc, #208]	; (8002508 <print_KISS+0x420>)
 8002438:	4b36      	ldr	r3, [pc, #216]	; (8002514 <print_KISS+0x42c>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800243e:	4832      	ldr	r0, [pc, #200]	; (8002508 <print_KISS+0x420>)
 8002440:	f7fd fee6 	bl	8000210 <strlen>
 8002444:	4603      	mov	r3, r0
 8002446:	b29a      	uxth	r2, r3
 8002448:	230a      	movs	r3, #10
 800244a:	492f      	ldr	r1, [pc, #188]	; (8002508 <print_KISS+0x420>)
 800244c:	482f      	ldr	r0, [pc, #188]	; (800250c <print_KISS+0x424>)
 800244e:	f003 ffb0 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3301      	adds	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	da00      	bge.n	8002466 <print_KISS+0x37e>
 8002464:	3307      	adds	r3, #7
 8002466:	10db      	asrs	r3, r3, #3
 8002468:	461a      	mov	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4293      	cmp	r3, r2
 800246e:	dbb1      	blt.n	80023d4 <print_KISS+0x2ec>
	}

	//Print Stop Flag
	curr_mem = local_packet->KISS_PACKET;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 8002478:	4a23      	ldr	r2, [pc, #140]	; (8002508 <print_KISS+0x420>)
 800247a:	4b27      	ldr	r3, [pc, #156]	; (8002518 <print_KISS+0x430>)
 800247c:	4615      	mov	r5, r2
 800247e:	461c      	mov	r4, r3
 8002480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002482:	6028      	str	r0, [r5, #0]
 8002484:	6069      	str	r1, [r5, #4]
 8002486:	60aa      	str	r2, [r5, #8]
 8002488:	60eb      	str	r3, [r5, #12]
 800248a:	8823      	ldrh	r3, [r4, #0]
 800248c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800248e:	481e      	ldr	r0, [pc, #120]	; (8002508 <print_KISS+0x420>)
 8002490:	f7fd febe 	bl	8000210 <strlen>
 8002494:	4603      	mov	r3, r0
 8002496:	b29a      	uxth	r2, r3
 8002498:	230a      	movs	r3, #10
 800249a:	491b      	ldr	r1, [pc, #108]	; (8002508 <print_KISS+0x420>)
 800249c:	481b      	ldr	r0, [pc, #108]	; (800250c <print_KISS+0x424>)
 800249e:	f003 ff88 	bl	80063b2 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	e017      	b.n	80024d8 <print_KISS+0x3f0>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b0:	4413      	add	r3, r2
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4916      	ldr	r1, [pc, #88]	; (8002510 <print_KISS+0x428>)
 80024b8:	4813      	ldr	r0, [pc, #76]	; (8002508 <print_KISS+0x420>)
 80024ba:	f004 febb 	bl	8007234 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80024be:	4812      	ldr	r0, [pc, #72]	; (8002508 <print_KISS+0x420>)
 80024c0:	f7fd fea6 	bl	8000210 <strlen>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	230a      	movs	r3, #10
 80024ca:	490f      	ldr	r1, [pc, #60]	; (8002508 <print_KISS+0x420>)
 80024cc:	480f      	ldr	r0, [pc, #60]	; (800250c <print_KISS+0x424>)
 80024ce:	f003 ff70 	bl	80063b2 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3301      	adds	r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b07      	cmp	r3, #7
 80024dc:	dde4      	ble.n	80024a8 <print_KISS+0x3c0>
	}
	sprintf(uartData, "\n");
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <print_KISS+0x420>)
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <print_KISS+0x42c>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80024e6:	4808      	ldr	r0, [pc, #32]	; (8002508 <print_KISS+0x420>)
 80024e8:	f7fd fe92 	bl	8000210 <strlen>
 80024ec:	4603      	mov	r3, r0
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	230a      	movs	r3, #10
 80024f2:	4905      	ldr	r1, [pc, #20]	; (8002508 <print_KISS+0x420>)
 80024f4:	4805      	ldr	r0, [pc, #20]	; (800250c <print_KISS+0x424>)
 80024f6:	f003 ff5c 	bl	80063b2 <HAL_UART_Transmit>

}
 80024fa:	bf00      	nop
 80024fc:	3734      	adds	r7, #52	; 0x34
 80024fe:	46bd      	mov	sp, r7
 8002500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002502:	bf00      	nop
 8002504:	08007ebc 	.word	0x08007ebc
 8002508:	20001ccc 	.word	0x20001ccc
 800250c:	200029c8 	.word	0x200029c8
 8002510:	08007e88 	.word	0x08007e88
 8002514:	08007e90 	.word	0x08007e90
 8002518:	08007fa0 	.word	0x08007fa0

0800251c <Tim2_OC_Callback>:

bool hold_state;
bool NRZI;

//Timer 2 Output Compare Callback
void Tim2_OC_Callback(){
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
	freq_pin_state_last = hold_state;
 8002522:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <Tim2_OC_Callback+0xb4>)
 8002524:	781a      	ldrb	r2, [r3, #0]
 8002526:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <Tim2_OC_Callback+0xb8>)
 8002528:	701a      	strb	r2, [r3, #0]

	//Check if this is valid data
	if(clk_sync){
 800252a:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <Tim2_OC_Callback+0xbc>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d034      	beq.n	800259c <Tim2_OC_Callback+0x80>
		uint32_t this_capture = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8002532:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <Tim2_OC_Callback+0xc0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	607b      	str	r3, [r7, #4]
		uint32_t next_sampl = this_capture + bit_sample_period;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8002540:	3335      	adds	r3, #53	; 0x35
 8002542:	603b      	str	r3, [r7, #0]
		NRZI = (freq_pin_state_curr==freq_pin_state_last) ? 1 : 0;
 8002544:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <Tim2_OC_Callback+0xc4>)
 8002546:	781a      	ldrb	r2, [r3, #0]
 8002548:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <Tim2_OC_Callback+0xb8>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <Tim2_OC_Callback+0xc8>)
 8002558:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(GPIOA,D0_Pin);//Interpreted clock
 800255a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800255e:	4822      	ldr	r0, [pc, #136]	; (80025e8 <Tim2_OC_Callback+0xcc>)
 8002560:	f001 fea9 	bl	80042b6 <HAL_GPIO_TogglePin>

		HAL_GPIO_WritePin(GPIOA,D1_Pin,freq_pin_state_curr);
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <Tim2_OC_Callback+0xc4>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800256e:	481e      	ldr	r0, [pc, #120]	; (80025e8 <Tim2_OC_Callback+0xcc>)
 8002570:	f001 fe88 	bl	8004284 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,D2_Pin,freq_pin_state_last);
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <Tim2_OC_Callback+0xb8>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800257e:	481b      	ldr	r0, [pc, #108]	; (80025ec <Tim2_OC_Callback+0xd0>)
 8002580:	f001 fe80 	bl	8004284 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,D3_Pin,NRZI);
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <Tim2_OC_Callback+0xc8>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	2110      	movs	r1, #16
 800258c:	4817      	ldr	r0, [pc, #92]	; (80025ec <Tim2_OC_Callback+0xd0>)
 800258e:	f001 fe79 	bl	8004284 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,next_sampl); // if we have not received a transition to the input capture module, we want to refresh the output compare module with the last known bit period
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <Tim2_OC_Callback+0xc0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	635a      	str	r2, [r3, #52]	; 0x34
 800259a:	e003      	b.n	80025a4 <Tim2_OC_Callback+0x88>
	}
	//Clock not syncd
	else
	{
		//Turn off OC until syncd
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <Tim2_OC_Callback+0xc0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//Inc number of bits since last clock sync
	captured_bits_count++;
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <Tim2_OC_Callback+0xd4>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <Tim2_OC_Callback+0xd4>)
 80025ae:	701a      	strb	r2, [r3, #0]
	if(captured_bits_count >= samp_per_bit * no_clk_max_cnt){
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <Tim2_OC_Callback+0xd4>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b1f      	cmp	r3, #31
 80025b6:	d902      	bls.n	80025be <Tim2_OC_Callback+0xa2>
		clk_sync = false;	//Clock is no longer sync
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <Tim2_OC_Callback+0xbc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
	}

	hold_state = freq_pin_state_curr;
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <Tim2_OC_Callback+0xc4>)
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <Tim2_OC_Callback+0xb4>)
 80025c4:	701a      	strb	r2, [r3, #0]

	return;
 80025c6:	bf00      	nop
}
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20002a48 	.word	0x20002a48
 80025d4:	200000a9 	.word	0x200000a9
 80025d8:	200000a7 	.word	0x200000a7
 80025dc:	20002988 	.word	0x20002988
 80025e0:	200000a8 	.word	0x200000a8
 80025e4:	20002a49 	.word	0x20002a49
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020400 	.word	0x40020400
 80025f0:	200000a6 	.word	0x200000a6

080025f4 <Tim3_IT_Callback>:
void Tim3_IT_Callback() {
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
	if (mode) {
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <Tim3_IT_Callback+0x1c>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <Tim3_IT_Callback+0x12>
		midbit = false;
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <Tim3_IT_Callback+0x20>)
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
	}
	//Timer 3 does nothing in RX
	else {}
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	20002970 	.word	0x20002970
 8002614:	200000a4 	.word	0x200000a4

08002618 <Tim5_IC_Callback>:
//Timer 5 Input Capture Callback
void Tim5_IC_Callback(){
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
	static uint32_t capture_difference = 0;
	static bool rise_captured = false;		// these are used to ensure that we aren't trying to compute the difference
	static bool fall_captured = false;		// before we have captured both a rising and falling edge
	static bool signal_edge = RISING_EDGE;	// so we know what edge we are looking for (really, the opposite of the edge that was captured last

	uint32_t this_capture = 0;		// simply stores either the rising or falling capture, based on which state we are in (avoids duplicate code)
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
	//Grap pin state for OC timer
	freq_pin_state_curr = signal_edge;
 8002622:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <Tim5_IC_Callback+0x108>)
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	4b3f      	ldr	r3, [pc, #252]	; (8002724 <Tim5_IC_Callback+0x10c>)
 8002628:	701a      	strb	r2, [r3, #0]

	//Rising Edge
	if (signal_edge)
 800262a:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <Tim5_IC_Callback+0x108>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d01f      	beq.n	8002672 <Tim5_IC_Callback+0x5a>
	{
		rising_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1); //Time-stamp interrupt
 8002632:	2100      	movs	r1, #0
 8002634:	483c      	ldr	r0, [pc, #240]	; (8002728 <Tim5_IC_Callback+0x110>)
 8002636:	f003 f94d 	bl	80058d4 <HAL_TIM_ReadCapturedValue>
 800263a:	4602      	mov	r2, r0
 800263c:	4b3b      	ldr	r3, [pc, #236]	; (800272c <Tim5_IC_Callback+0x114>)
 800263e:	601a      	str	r2, [r3, #0]
		signal_edge = FALLING_EDGE;		// look for falling edge on next capture
 8002640:	4b37      	ldr	r3, [pc, #220]	; (8002720 <Tim5_IC_Callback+0x108>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
		rise_captured = true;
 8002646:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <Tim5_IC_Callback+0x118>)
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]

		if (rise_captured && fall_captured)
 800264c:	4b38      	ldr	r3, [pc, #224]	; (8002730 <Tim5_IC_Callback+0x118>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d02d      	beq.n	80026b0 <Tim5_IC_Callback+0x98>
 8002654:	4b37      	ldr	r3, [pc, #220]	; (8002734 <Tim5_IC_Callback+0x11c>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d029      	beq.n	80026b0 <Tim5_IC_Callback+0x98>
		{
			capture_difference = rising_capture - falling_capture;		// calculate difference
 800265c:	4b33      	ldr	r3, [pc, #204]	; (800272c <Tim5_IC_Callback+0x114>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b35      	ldr	r3, [pc, #212]	; (8002738 <Tim5_IC_Callback+0x120>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	4a35      	ldr	r2, [pc, #212]	; (800273c <Tim5_IC_Callback+0x124>)
 8002668:	6013      	str	r3, [r2, #0]
			this_capture = rising_capture;		// set current sample to rising edge
 800266a:	4b30      	ldr	r3, [pc, #192]	; (800272c <Tim5_IC_Callback+0x114>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	e01e      	b.n	80026b0 <Tim5_IC_Callback+0x98>
	}

	//Falling edge
	else
	{
		falling_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);		//Time-stamp interrupt
 8002672:	2100      	movs	r1, #0
 8002674:	482c      	ldr	r0, [pc, #176]	; (8002728 <Tim5_IC_Callback+0x110>)
 8002676:	f003 f92d 	bl	80058d4 <HAL_TIM_ReadCapturedValue>
 800267a:	4602      	mov	r2, r0
 800267c:	4b2e      	ldr	r3, [pc, #184]	; (8002738 <Tim5_IC_Callback+0x120>)
 800267e:	601a      	str	r2, [r3, #0]
		fall_captured = true;
 8002680:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <Tim5_IC_Callback+0x11c>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
		signal_edge = RISING_EDGE;		// look for rising edge on next capture
 8002686:	4b26      	ldr	r3, [pc, #152]	; (8002720 <Tim5_IC_Callback+0x108>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]

		if (rise_captured && fall_captured)
 800268c:	4b28      	ldr	r3, [pc, #160]	; (8002730 <Tim5_IC_Callback+0x118>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00d      	beq.n	80026b0 <Tim5_IC_Callback+0x98>
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <Tim5_IC_Callback+0x11c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d009      	beq.n	80026b0 <Tim5_IC_Callback+0x98>
		{
			capture_difference = falling_capture - rising_capture;		// calculate difference
 800269c:	4b26      	ldr	r3, [pc, #152]	; (8002738 <Tim5_IC_Callback+0x120>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <Tim5_IC_Callback+0x114>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	4a25      	ldr	r2, [pc, #148]	; (800273c <Tim5_IC_Callback+0x124>)
 80026a8:	6013      	str	r3, [r2, #0]
			this_capture = falling_capture;
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <Tim5_IC_Callback+0x120>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	607b      	str	r3, [r7, #4]
		}
	}

	//Have now captured the transition period
	//Can use this to align sampling clock
	if (rise_captured && fall_captured)
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <Tim5_IC_Callback+0x118>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d02f      	beq.n	8002718 <Tim5_IC_Callback+0x100>
 80026b8:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <Tim5_IC_Callback+0x11c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02b      	beq.n	8002718 <Tim5_IC_Callback+0x100>
	{
		//Check if the transition was a valid transition period to use
		if(SYMBOL_PERIOD-SYMBOL_MARGIN < capture_difference && capture_difference < SYMBOL_PERIOD+SYMBOL_MARGIN){
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <Tim5_IC_Callback+0x124>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f247 5230 	movw	r2, #30000	; 0x7530
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d925      	bls.n	8002718 <Tim5_IC_Callback+0x100>
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <Tim5_IC_Callback+0x124>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f648 7239 	movw	r2, #36665	; 0x8f39
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d81f      	bhi.n	8002718 <Tim5_IC_Callback+0x100>

			//Predict clock
			uint32_t next_sampl;

			if(!clk_sync){
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <Tim5_IC_Callback+0x128>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	f083 0301 	eor.w	r3, r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <Tim5_IC_Callback+0xe2>
				next_sampl = this_capture + SYMBOL_PERIOD;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80026ec:	3335      	adds	r3, #53	; 0x35
 80026ee:	603b      	str	r3, [r7, #0]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, next_sampl);
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <Tim5_IC_Callback+0x12c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34
 80026f8:	e008      	b.n	800270c <Tim5_IC_Callback+0xf4>
			}
			else {
				next_sampl = this_capture + bit_sample_period;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8002700:	3335      	adds	r3, #53	; 0x35
 8002702:	603b      	str	r3, [r7, #0]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, next_sampl);
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <Tim5_IC_Callback+0x12c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	635a      	str	r2, [r3, #52]	; 0x34
			}
			//Reset roll-over value
			captured_bits_count = 0;
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <Tim5_IC_Callback+0x130>)
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]

			//Have now synced with clock
			clk_sync = true;
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <Tim5_IC_Callback+0x128>)
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000010 	.word	0x20000010
 8002724:	200000a8 	.word	0x200000a8
 8002728:	20002890 	.word	0x20002890
 800272c:	200000ac 	.word	0x200000ac
 8002730:	200000b0 	.word	0x200000b0
 8002734:	200000b1 	.word	0x200000b1
 8002738:	200000b4 	.word	0x200000b4
 800273c:	200000b8 	.word	0x200000b8
 8002740:	200000a7 	.word	0x200000a7
 8002744:	20002988 	.word	0x20002988
 8002748:	200000a6 	.word	0x200000a6

0800274c <init_UART>:

void init_UART(){
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8002750:	2201      	movs	r2, #1
 8002752:	4909      	ldr	r1, [pc, #36]	; (8002778 <init_UART+0x2c>)
 8002754:	4809      	ldr	r0, [pc, #36]	; (800277c <init_UART+0x30>)
 8002756:	f003 fec5 	bl	80064e4 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <init_UART+0x34>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <init_UART+0x34>)
 8002762:	2200      	movs	r2, #0
 8002764:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <init_UART+0x34>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <init_UART+0x34>)
 800276e:	2200      	movs	r2, #0
 8002770:	605a      	str	r2, [r3, #4]
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20001440 	.word	0x20001440
 800277c:	200029c8 	.word	0x200029c8
 8002780:	20001434 	.word	0x20001434

08002784 <UART2_Exception_Callback>:
void UART2_Exception_Callback(){
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 8002788:	2201      	movs	r2, #1
 800278a:	491d      	ldr	r1, [pc, #116]	; (8002800 <UART2_Exception_Callback+0x7c>)
 800278c:	481d      	ldr	r0, [pc, #116]	; (8002804 <UART2_Exception_Callback+0x80>)
 800278e:	f003 fea9 	bl	80064e4 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <UART2_Exception_Callback+0x84>)
 8002794:	2200      	movs	r2, #0
 8002796:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <UART2_Exception_Callback+0x84>)
 800279a:	7b1b      	ldrb	r3, [r3, #12]
 800279c:	2bc0      	cmp	r3, #192	; 0xc0
 800279e:	d104      	bne.n	80027aa <UART2_Exception_Callback+0x26>
		  UART_packet.flags++;
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <UART2_Exception_Callback+0x84>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	3301      	adds	r3, #1
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <UART2_Exception_Callback+0x84>)
 80027a8:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 80027aa:	4b17      	ldr	r3, [pc, #92]	; (8002808 <UART2_Exception_Callback+0x84>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <UART2_Exception_Callback+0x88>)
 80027b2:	4413      	add	r3, r2
 80027b4:	4a14      	ldr	r2, [pc, #80]	; (8002808 <UART2_Exception_Callback+0x84>)
 80027b6:	7b12      	ldrb	r2, [r2, #12]
 80027b8:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <UART2_Exception_Callback+0x84>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <UART2_Exception_Callback+0x84>)
 80027c2:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <UART2_Exception_Callback+0x84>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	dd16      	ble.n	80027fa <UART2_Exception_Callback+0x76>
		  if(!mode){
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <UART2_Exception_Callback+0x8c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <UART2_Exception_Callback+0x5c>
			  changeMode = true;
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <UART2_Exception_Callback+0x90>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <UART2_Exception_Callback+0x84>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <UART2_Exception_Callback+0x84>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <UART2_Exception_Callback+0x84>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a05      	ldr	r2, [pc, #20]	; (8002808 <UART2_Exception_Callback+0x84>)
 80027f2:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <UART2_Exception_Callback+0x84>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]

	  }
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20001440 	.word	0x20001440
 8002804:	200029c8 	.word	0x200029c8
 8002808:	20001434 	.word	0x20001434
 800280c:	20001442 	.word	0x20001442
 8002810:	20002970 	.word	0x20002970
 8002814:	200000a5 	.word	0x200000a5

08002818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800281c:	f000 fdf2 	bl	8003404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002820:	f000 f820 	bl	8002864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002824:	f000 fa3c 	bl	8002ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002828:	f000 fa1a 	bl	8002c60 <MX_DMA_Init>
  MX_DAC_Init();
 800282c:	f000 f888 	bl	8002940 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8002830:	f000 f9e4 	bl	8002bfc <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8002834:	f000 f972 	bl	8002b1c <MX_TIM5_Init>
  MX_TIM2_Init();
 8002838:	f000 f8ac 	bl	8002994 <MX_TIM2_Init>
  MX_TIM3_Init();
 800283c:	f000 f920 	bl	8002a80 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8002840:	4806      	ldr	r0, [pc, #24]	; (800285c <main+0x44>)
 8002842:	f002 fab6 	bl	8004db2 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002846:	4806      	ldr	r0, [pc, #24]	; (8002860 <main+0x48>)
 8002848:	f002 fb02 	bl	8004e50 <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 800284c:	f000 fb1a 	bl	8002e84 <uart_gpio_init>

	initProgram(false);
 8002850:	2000      	movs	r0, #0
 8002852:	f7fe ff2f 	bl	80016b4 <initProgram>
    /* USER CODE BEGIN 3 */
		//testing bit stuffing
//		bool test_array[] = {1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0};
//		int len = sizeof(test_array)/sizeof(bool);
//		test_remove_bitstuffing(test_array,len);
		tx_rx();
 8002856:	f7fd ff71 	bl	800073c <tx_rx>
 800285a:	e7fc      	b.n	8002856 <main+0x3e>
 800285c:	20002988 	.word	0x20002988
 8002860:	200028d0 	.word	0x200028d0

08002864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b094      	sub	sp, #80	; 0x50
 8002868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	2234      	movs	r2, #52	; 0x34
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f004 fcd6 	bl	8007224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002878:	f107 0308 	add.w	r3, r7, #8
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <SystemClock_Config+0xd4>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	4a29      	ldr	r2, [pc, #164]	; (8002938 <SystemClock_Config+0xd4>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6413      	str	r3, [r2, #64]	; 0x40
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <SystemClock_Config+0xd4>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80028a4:	2300      	movs	r3, #0
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4b24      	ldr	r3, [pc, #144]	; (800293c <SystemClock_Config+0xd8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028b0:	4a22      	ldr	r2, [pc, #136]	; (800293c <SystemClock_Config+0xd8>)
 80028b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <SystemClock_Config+0xd8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028c4:	2302      	movs	r3, #2
 80028c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c8:	2301      	movs	r3, #1
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028cc:	2310      	movs	r3, #16
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028d0:	2302      	movs	r3, #2
 80028d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028d4:	2300      	movs	r3, #0
 80028d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028d8:	2308      	movs	r3, #8
 80028da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80028dc:	2350      	movs	r3, #80	; 0x50
 80028de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028e0:	2302      	movs	r3, #2
 80028e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028e4:	2302      	movs	r3, #2
 80028e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028e8:	2302      	movs	r3, #2
 80028ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 ffd9 	bl	80048a8 <HAL_RCC_OscConfig>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80028fc:	f000 faea 	bl	8002ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002900:	230f      	movs	r3, #15
 8002902:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002904:	2302      	movs	r3, #2
 8002906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800290c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002910:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002916:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002918:	f107 0308 	add.w	r3, r7, #8
 800291c:	2102      	movs	r1, #2
 800291e:	4618      	mov	r0, r3
 8002920:	f001 fd08 	bl	8004334 <HAL_RCC_ClockConfig>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800292a:	f000 fad3 	bl	8002ed4 <Error_Handler>
  }
}
 800292e:	bf00      	nop
 8002930:	3750      	adds	r7, #80	; 0x50
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000

08002940 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002946:	463b      	mov	r3, r7
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <MX_DAC_Init+0x4c>)
 8002950:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <MX_DAC_Init+0x50>)
 8002952:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <MX_DAC_Init+0x4c>)
 8002956:	f000 fed8 	bl	800370a <HAL_DAC_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002960:	f000 fab8 	bl	8002ed4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002964:	2324      	movs	r3, #36	; 0x24
 8002966:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002968:	2300      	movs	r3, #0
 800296a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800296c:	463b      	mov	r3, r7
 800296e:	2200      	movs	r2, #0
 8002970:	4619      	mov	r1, r3
 8002972:	4806      	ldr	r0, [pc, #24]	; (800298c <MX_DAC_Init+0x4c>)
 8002974:	f000 ff2c 	bl	80037d0 <HAL_DAC_ConfigChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800297e:	f000 faa9 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20002974 	.word	0x20002974
 8002990:	40007400 	.word	0x40007400

08002994 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08e      	sub	sp, #56	; 0x38
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800299a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a8:	f107 0320 	add.w	r3, r7, #32
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
 80029c0:	615a      	str	r2, [r3, #20]
 80029c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029c4:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <MX_TIM2_Init+0xe8>)
 80029c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <MX_TIM2_Init+0xe8>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d2:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <MX_TIM2_Init+0xe8>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <MX_TIM2_Init+0xe8>)
 80029da:	f04f 32ff 	mov.w	r2, #4294967295
 80029de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e0:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <MX_TIM2_Init+0xe8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e6:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <MX_TIM2_Init+0xe8>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029ec:	4823      	ldr	r0, [pc, #140]	; (8002a7c <MX_TIM2_Init+0xe8>)
 80029ee:	f002 f9b5 	bl	8004d5c <HAL_TIM_Base_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80029f8:	f000 fa6c 	bl	8002ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a06:	4619      	mov	r1, r3
 8002a08:	481c      	ldr	r0, [pc, #112]	; (8002a7c <MX_TIM2_Init+0xe8>)
 8002a0a:	f002 feab 	bl	8005764 <HAL_TIM_ConfigClockSource>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a14:	f000 fa5e 	bl	8002ed4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002a18:	4818      	ldr	r0, [pc, #96]	; (8002a7c <MX_TIM2_Init+0xe8>)
 8002a1a:	f002 fa3d 	bl	8004e98 <HAL_TIM_OC_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a24:	f000 fa56 	bl	8002ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a30:	f107 0320 	add.w	r3, r7, #32
 8002a34:	4619      	mov	r1, r3
 8002a36:	4811      	ldr	r0, [pc, #68]	; (8002a7c <MX_TIM2_Init+0xe8>)
 8002a38:	f003 fbde 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a42:	f000 fa47 	bl	8002ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4807      	ldr	r0, [pc, #28]	; (8002a7c <MX_TIM2_Init+0xe8>)
 8002a5e:	f002 fd85 	bl	800556c <HAL_TIM_OC_ConfigChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002a68:	f000 fa34 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a6c:	4803      	ldr	r0, [pc, #12]	; (8002a7c <MX_TIM2_Init+0xe8>)
 8002a6e:	f000 fb63 	bl	8003138 <HAL_TIM_MspPostInit>

}
 8002a72:	bf00      	nop
 8002a74:	3738      	adds	r7, #56	; 0x38
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20002988 	.word	0x20002988

08002a80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a86:	f107 0308 	add.w	r3, r7, #8
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a94:	463b      	mov	r3, r7
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <MX_TIM3_Init+0x94>)
 8002a9e:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <MX_TIM3_Init+0x98>)
 8002aa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <MX_TIM3_Init+0x94>)
 8002aa4:	224f      	movs	r2, #79	; 0x4f
 8002aa6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <MX_TIM3_Init+0x94>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 828;
 8002aae:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <MX_TIM3_Init+0x94>)
 8002ab0:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8002ab4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <MX_TIM3_Init+0x94>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <MX_TIM3_Init+0x94>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ac2:	4814      	ldr	r0, [pc, #80]	; (8002b14 <MX_TIM3_Init+0x94>)
 8002ac4:	f002 f94a 	bl	8004d5c <HAL_TIM_Base_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002ace:	f000 fa01 	bl	8002ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ad8:	f107 0308 	add.w	r3, r7, #8
 8002adc:	4619      	mov	r1, r3
 8002ade:	480d      	ldr	r0, [pc, #52]	; (8002b14 <MX_TIM3_Init+0x94>)
 8002ae0:	f002 fe40 	bl	8005764 <HAL_TIM_ConfigClockSource>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002aea:	f000 f9f3 	bl	8002ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002af6:	463b      	mov	r3, r7
 8002af8:	4619      	mov	r1, r3
 8002afa:	4806      	ldr	r0, [pc, #24]	; (8002b14 <MX_TIM3_Init+0x94>)
 8002afc:	f003 fb7c 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002b06:	f000 f9e5 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b0a:	bf00      	nop
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200028d0 	.word	0x200028d0
 8002b18:	40000400 	.word	0x40000400

08002b1c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	; 0x28
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b22:	f107 0318 	add.w	r3, r7, #24
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b30:	f107 0310 	add.w	r3, r7, #16
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b3a:	463b      	mov	r3, r7
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b46:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <MX_TIM5_Init+0xd8>)
 8002b48:	4a2b      	ldr	r2, [pc, #172]	; (8002bf8 <MX_TIM5_Init+0xdc>)
 8002b4a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2-1;
 8002b4c:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <MX_TIM5_Init+0xd8>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b52:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <MX_TIM5_Init+0xd8>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002b58:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <MX_TIM5_Init+0xd8>)
 8002b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <MX_TIM5_Init+0xd8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b66:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <MX_TIM5_Init+0xd8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b6c:	4821      	ldr	r0, [pc, #132]	; (8002bf4 <MX_TIM5_Init+0xd8>)
 8002b6e:	f002 f8f5 	bl	8004d5c <HAL_TIM_Base_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8002b78:	f000 f9ac 	bl	8002ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b80:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b82:	f107 0318 	add.w	r3, r7, #24
 8002b86:	4619      	mov	r1, r3
 8002b88:	481a      	ldr	r0, [pc, #104]	; (8002bf4 <MX_TIM5_Init+0xd8>)
 8002b8a:	f002 fdeb 	bl	8005764 <HAL_TIM_ConfigClockSource>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002b94:	f000 f99e 	bl	8002ed4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002b98:	4816      	ldr	r0, [pc, #88]	; (8002bf4 <MX_TIM5_Init+0xd8>)
 8002b9a:	f002 fad1 	bl	8005140 <HAL_TIM_IC_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002ba4:	f000 f996 	bl	8002ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	480f      	ldr	r0, [pc, #60]	; (8002bf4 <MX_TIM5_Init+0xd8>)
 8002bb8:	f003 fb1e 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8002bc2:	f000 f987 	bl	8002ed4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002bc6:	230a      	movs	r3, #10
 8002bc8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002bd6:	463b      	mov	r3, r7
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <MX_TIM5_Init+0xd8>)
 8002bde:	f002 fd25 	bl	800562c <HAL_TIM_IC_ConfigChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8002be8:	f000 f974 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002bec:	bf00      	nop
 8002bee:	3728      	adds	r7, #40	; 0x28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20002890 	.word	0x20002890
 8002bf8:	40000c00 	.word	0x40000c00

08002bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c00:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <MX_USART2_UART_Init+0x5c>)
 8002c02:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <MX_USART2_UART_Init+0x60>)
 8002c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <MX_USART2_UART_Init+0x5c>)
 8002c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <MX_USART2_UART_Init+0x5c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <MX_USART2_UART_Init+0x5c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <MX_USART2_UART_Init+0x5c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <MX_USART2_UART_Init+0x5c>)
 8002c22:	220c      	movs	r2, #12
 8002c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <MX_USART2_UART_Init+0x5c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <MX_USART2_UART_Init+0x5c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c32:	4809      	ldr	r0, [pc, #36]	; (8002c58 <MX_USART2_UART_Init+0x5c>)
 8002c34:	f003 fb70 	bl	8006318 <HAL_UART_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c3e:	f000 f949 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	2026      	movs	r0, #38	; 0x26
 8002c48:	f000 fd29 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c4c:	2026      	movs	r0, #38	; 0x26
 8002c4e:	f000 fd42 	bl	80036d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	200029c8 	.word	0x200029c8
 8002c5c:	40004400 	.word	0x40004400

08002c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <MX_DMA_Init+0x3c>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <MX_DMA_Init+0x3c>)
 8002c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <MX_DMA_Init+0x3c>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002c82:	2200      	movs	r2, #0
 8002c84:	2100      	movs	r1, #0
 8002c86:	2010      	movs	r0, #16
 8002c88:	f000 fd09 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002c8c:	2010      	movs	r0, #16
 8002c8e:	f000 fd22 	bl	80036d6 <HAL_NVIC_EnableIRQ>

}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <MX_GPIO_Init+0x134>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a45      	ldr	r2, [pc, #276]	; (8002dd4 <MX_GPIO_Init+0x134>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <MX_GPIO_Init+0x134>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <MX_GPIO_Init+0x134>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a3e      	ldr	r2, [pc, #248]	; (8002dd4 <MX_GPIO_Init+0x134>)
 8002cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b3c      	ldr	r3, [pc, #240]	; (8002dd4 <MX_GPIO_Init+0x134>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <MX_GPIO_Init+0x134>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a37      	ldr	r2, [pc, #220]	; (8002dd4 <MX_GPIO_Init+0x134>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <MX_GPIO_Init+0x134>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <MX_GPIO_Init+0x134>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a30      	ldr	r2, [pc, #192]	; (8002dd4 <MX_GPIO_Init+0x134>)
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <MX_GPIO_Init+0x134>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D1_Pin|D0_Pin, GPIO_PIN_RESET);
 8002d26:	2200      	movs	r2, #0
 8002d28:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002d2c:	482a      	ldr	r0, [pc, #168]	; (8002dd8 <MX_GPIO_Init+0x138>)
 8002d2e:	f001 faa9 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2110      	movs	r1, #16
 8002d36:	4829      	ldr	r0, [pc, #164]	; (8002ddc <MX_GPIO_Init+0x13c>)
 8002d38:	f001 faa4 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D3_Pin, GPIO_PIN_RESET);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002d42:	4827      	ldr	r0, [pc, #156]	; (8002de0 <MX_GPIO_Init+0x140>)
 8002d44:	f001 fa9e 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d4e:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <MX_GPIO_Init+0x144>)
 8002d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	481f      	ldr	r0, [pc, #124]	; (8002ddc <MX_GPIO_Init+0x13c>)
 8002d5e:	f001 f8ff 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D1_Pin D0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D1_Pin|D0_Pin;
 8002d62:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4817      	ldr	r0, [pc, #92]	; (8002dd8 <MX_GPIO_Init+0x138>)
 8002d7c:	f001 f8f0 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8002d80:	2310      	movs	r3, #16
 8002d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d84:	2301      	movs	r3, #1
 8002d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	4619      	mov	r1, r3
 8002d96:	4811      	ldr	r0, [pc, #68]	; (8002ddc <MX_GPIO_Init+0x13c>)
 8002d98:	f001 f8e2 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin;
 8002d9c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da2:	2301      	movs	r3, #1
 8002da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002daa:	2300      	movs	r3, #0
 8002dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	4619      	mov	r1, r3
 8002db4:	480a      	ldr	r0, [pc, #40]	; (8002de0 <MX_GPIO_Init+0x140>)
 8002db6:	f001 f8d3 	bl	8003f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2028      	movs	r0, #40	; 0x28
 8002dc0:	f000 fc6d 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dc4:	2028      	movs	r0, #40	; 0x28
 8002dc6:	f000 fc86 	bl	80036d6 <HAL_NVIC_EnableIRQ>

}
 8002dca:	bf00      	nop
 8002dcc:	3728      	adds	r7, #40	; 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40020400 	.word	0x40020400
 8002de4:	10210000 	.word	0x10210000

08002de8 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d106      	bne.n	8002e08 <HAL_TIM_OC_DelayElapsedCallback+0x20>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	7f1b      	ldrb	r3, [r3, #28]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <HAL_TIM_OC_DelayElapsedCallback+0x20>
	{
		Tim2_OC_Callback();
 8002e02:	f7ff fb8b 	bl	800251c <Tim2_OC_Callback>
	}
	return;
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
}
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d102      	bne.n	8002e26 <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3_IT_Callback();
 8002e20:	f7ff fbe8 	bl	80025f4 <Tim3_IT_Callback>
	else
		__NOP();

	return;
 8002e24:	e001      	b.n	8002e2a <HAL_TIM_PeriodElapsedCallback+0x1a>
		__NOP();
 8002e26:	bf00      	nop
	return;
 8002e28:	bf00      	nop
}
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200028d0 	.word	0x200028d0

08002e34 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	//Make sure this is the right timer and channel
	if (htim->Instance == TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a06      	ldr	r2, [pc, #24]	; (8002e5c <HAL_TIM_IC_CaptureCallback+0x28>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d106      	bne.n	8002e54 <HAL_TIM_IC_CaptureCallback+0x20>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7f1b      	ldrb	r3, [r3, #28]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_TIM_IC_CaptureCallback+0x20>
	{
		Tim5_IC_Callback();
 8002e4e:	f7ff fbe3 	bl	8002618 <Tim5_IC_Callback>
	}

	return;
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
}
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40000c00 	.word	0x40000c00

08002e60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <HAL_UART_RxCpltCallback+0x20>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d101      	bne.n	8002e76 <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_Exception_Callback();
 8002e72:	f7ff fc87 	bl	8002784 <UART2_Exception_Callback>
  }
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40004400 	.word	0x40004400

08002e84 <uart_gpio_init>:

void uart_gpio_init()
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <uart_gpio_init+0x48>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <uart_gpio_init+0x48>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <uart_gpio_init+0x48>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eb6:	2307      	movs	r3, #7
 8002eb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <uart_gpio_init+0x4c>)
 8002ec0:	f001 f84e 	bl	8003f60 <HAL_GPIO_Init>
}
 8002ec4:	bf00      	nop
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40020000 	.word	0x40020000

08002ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_MspInit+0x4c>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	4a0f      	ldr	r2, [pc, #60]	; (8002f30 <HAL_MspInit+0x4c>)
 8002ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8002efa:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <HAL_MspInit+0x4c>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_MspInit+0x4c>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <HAL_MspInit+0x4c>)
 8002f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_MspInit+0x4c>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f22:	2007      	movs	r0, #7
 8002f24:	f000 fbb0 	bl	8003688 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40023800 	.word	0x40023800

08002f34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2f      	ldr	r2, [pc, #188]	; (8003010 <HAL_DAC_MspInit+0xdc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d158      	bne.n	8003008 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <HAL_DAC_MspInit+0xe0>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a2d      	ldr	r2, [pc, #180]	; (8003014 <HAL_DAC_MspInit+0xe0>)
 8002f60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
 8002f66:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_DAC_MspInit+0xe0>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	4b27      	ldr	r3, [pc, #156]	; (8003014 <HAL_DAC_MspInit+0xe0>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4a26      	ldr	r2, [pc, #152]	; (8003014 <HAL_DAC_MspInit+0xe0>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6313      	str	r3, [r2, #48]	; 0x30
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_DAC_MspInit+0xe0>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f8e:	2310      	movs	r3, #16
 8002f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f92:	2303      	movs	r3, #3
 8002f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9a:	f107 0314 	add.w	r3, r7, #20
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	481d      	ldr	r0, [pc, #116]	; (8003018 <HAL_DAC_MspInit+0xe4>)
 8002fa2:	f000 ffdd 	bl	8003f60 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8002fa8:	4a1d      	ldr	r2, [pc, #116]	; (8003020 <HAL_DAC_MspInit+0xec>)
 8002faa:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8002fae:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002fb2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8002fb6:	2240      	movs	r2, #64	; 0x40
 8002fb8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002fc0:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8002fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fc6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8002fca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fce:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8002fd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fd6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8002fd8:	4b10      	ldr	r3, [pc, #64]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8002fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fde:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002fec:	480b      	ldr	r0, [pc, #44]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8002fee:	f000 fc3d 	bl	800386c <HAL_DMA_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8002ff8:	f7ff ff6c 	bl	8002ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a07      	ldr	r2, [pc, #28]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8003000:	609a      	str	r2, [r3, #8]
 8003002:	4a06      	ldr	r2, [pc, #24]	; (800301c <HAL_DAC_MspInit+0xe8>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003008:	bf00      	nop
 800300a:	3728      	adds	r7, #40	; 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40007400 	.word	0x40007400
 8003014:	40023800 	.word	0x40023800
 8003018:	40020000 	.word	0x40020000
 800301c:	20002910 	.word	0x20002910
 8003020:	40026088 	.word	0x40026088

08003024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08c      	sub	sp, #48	; 0x30
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003044:	d116      	bne.n	8003074 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	4b37      	ldr	r3, [pc, #220]	; (8003128 <HAL_TIM_Base_MspInit+0x104>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a36      	ldr	r2, [pc, #216]	; (8003128 <HAL_TIM_Base_MspInit+0x104>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
 8003056:	4b34      	ldr	r3, [pc, #208]	; (8003128 <HAL_TIM_Base_MspInit+0x104>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	201c      	movs	r0, #28
 8003068:	f000 fb19 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800306c:	201c      	movs	r0, #28
 800306e:	f000 fb32 	bl	80036d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003072:	e054      	b.n	800311e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2c      	ldr	r2, [pc, #176]	; (800312c <HAL_TIM_Base_MspInit+0x108>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d116      	bne.n	80030ac <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_TIM_Base_MspInit+0x104>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a28      	ldr	r2, [pc, #160]	; (8003128 <HAL_TIM_Base_MspInit+0x104>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_TIM_Base_MspInit+0x104>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	2100      	movs	r1, #0
 800309e:	201d      	movs	r0, #29
 80030a0:	f000 fafd 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030a4:	201d      	movs	r0, #29
 80030a6:	f000 fb16 	bl	80036d6 <HAL_NVIC_EnableIRQ>
}
 80030aa:	e038      	b.n	800311e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <HAL_TIM_Base_MspInit+0x10c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d133      	bne.n	800311e <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_TIM_Base_MspInit+0x104>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <HAL_TIM_Base_MspInit+0x104>)
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_TIM_Base_MspInit+0x104>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b14      	ldr	r3, [pc, #80]	; (8003128 <HAL_TIM_Base_MspInit+0x104>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	4a13      	ldr	r2, [pc, #76]	; (8003128 <HAL_TIM_Base_MspInit+0x104>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6313      	str	r3, [r2, #48]	; 0x30
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_TIM_Base_MspInit+0x104>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fa:	2300      	movs	r3, #0
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80030fe:	2302      	movs	r3, #2
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003102:	f107 031c 	add.w	r3, r7, #28
 8003106:	4619      	mov	r1, r3
 8003108:	480a      	ldr	r0, [pc, #40]	; (8003134 <HAL_TIM_Base_MspInit+0x110>)
 800310a:	f000 ff29 	bl	8003f60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2100      	movs	r1, #0
 8003112:	2032      	movs	r0, #50	; 0x32
 8003114:	f000 fac3 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003118:	2032      	movs	r0, #50	; 0x32
 800311a:	f000 fadc 	bl	80036d6 <HAL_NVIC_EnableIRQ>
}
 800311e:	bf00      	nop
 8003120:	3730      	adds	r7, #48	; 0x30
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800
 800312c:	40000400 	.word	0x40000400
 8003130:	40000c00 	.word	0x40000c00
 8003134:	40020000 	.word	0x40020000

08003138 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 030c 	add.w	r3, r7, #12
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003158:	d11e      	bne.n	8003198 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_TIM_MspPostInit+0x68>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4a0f      	ldr	r2, [pc, #60]	; (80031a0 <HAL_TIM_MspPostInit+0x68>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <HAL_TIM_MspPostInit+0x68>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003188:	2301      	movs	r3, #1
 800318a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	4619      	mov	r1, r3
 8003192:	4804      	ldr	r0, [pc, #16]	; (80031a4 <HAL_TIM_MspPostInit+0x6c>)
 8003194:	f000 fee4 	bl	8003f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003198:	bf00      	nop
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40020000 	.word	0x40020000

080031a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	; 0x28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 0314 	add.w	r3, r7, #20
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1d      	ldr	r2, [pc, #116]	; (800323c <HAL_UART_MspInit+0x94>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d133      	bne.n	8003232 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <HAL_UART_MspInit+0x98>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	4a1b      	ldr	r2, [pc, #108]	; (8003240 <HAL_UART_MspInit+0x98>)
 80031d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d8:	6413      	str	r3, [r2, #64]	; 0x40
 80031da:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_UART_MspInit+0x98>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_UART_MspInit+0x98>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a14      	ldr	r2, [pc, #80]	; (8003240 <HAL_UART_MspInit+0x98>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_UART_MspInit+0x98>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003202:	230c      	movs	r3, #12
 8003204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320e:	2303      	movs	r3, #3
 8003210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003212:	2307      	movs	r3, #7
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003216:	f107 0314 	add.w	r3, r7, #20
 800321a:	4619      	mov	r1, r3
 800321c:	4809      	ldr	r0, [pc, #36]	; (8003244 <HAL_UART_MspInit+0x9c>)
 800321e:	f000 fe9f 	bl	8003f60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	2100      	movs	r1, #0
 8003226:	2026      	movs	r0, #38	; 0x26
 8003228:	f000 fa39 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800322c:	2026      	movs	r0, #38	; 0x26
 800322e:	f000 fa52 	bl	80036d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003232:	bf00      	nop
 8003234:	3728      	adds	r7, #40	; 0x28
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40004400 	.word	0x40004400
 8003240:	40023800 	.word	0x40023800
 8003244:	40020000 	.word	0x40020000

08003248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003256:	b480      	push	{r7}
 8003258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800325a:	e7fe      	b.n	800325a <HardFault_Handler+0x4>

0800325c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003260:	e7fe      	b.n	8003260 <MemManage_Handler+0x4>

08003262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003266:	e7fe      	b.n	8003266 <BusFault_Handler+0x4>

08003268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800326c:	e7fe      	b.n	800326c <UsageFault_Handler+0x4>

0800326e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800329c:	f000 f904 	bl	80034a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <DMA1_Stream5_IRQHandler+0x10>)
 80032aa:	f000 fc1f 	bl	8003aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20002910 	.word	0x20002910

080032b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032bc:	4802      	ldr	r0, [pc, #8]	; (80032c8 <TIM2_IRQHandler+0x10>)
 80032be:	f002 f84d 	bl	800535c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20002988 	.word	0x20002988

080032cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032d0:	4802      	ldr	r0, [pc, #8]	; (80032dc <TIM3_IRQHandler+0x10>)
 80032d2:	f002 f843 	bl	800535c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	200028d0 	.word	0x200028d0

080032e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <USART2_IRQHandler+0x10>)
 80032e6:	f003 f953 	bl	8006590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200029c8 	.word	0x200029c8

080032f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80032f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032fc:	f000 fff6 	bl	80042ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}

08003304 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <TIM5_IRQHandler+0x10>)
 800330a:	f002 f827 	bl	800535c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20002890 	.word	0x20002890

08003318 <_sbrk>:
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <_sbrk+0x5c>)
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <_sbrk+0x60>)
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	4b13      	ldr	r3, [pc, #76]	; (800337c <_sbrk+0x64>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <_sbrk+0x22>
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <_sbrk+0x64>)
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <_sbrk+0x68>)
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <_sbrk+0x64>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	429a      	cmp	r2, r3
 8003346:	d207      	bcs.n	8003358 <_sbrk+0x40>
 8003348:	f003 ff1e 	bl	8007188 <__errno>
 800334c:	4602      	mov	r2, r0
 800334e:	230c      	movs	r3, #12
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	e009      	b.n	800336c <_sbrk+0x54>
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <_sbrk+0x64>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	4b07      	ldr	r3, [pc, #28]	; (800337c <_sbrk+0x64>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	4a05      	ldr	r2, [pc, #20]	; (800337c <_sbrk+0x64>)
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20020000 	.word	0x20020000
 8003378:	00000400 	.word	0x00000400
 800337c:	200000bc 	.word	0x200000bc
 8003380:	20002a58 	.word	0x20002a58

08003384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003388:	4b08      	ldr	r3, [pc, #32]	; (80033ac <SystemInit+0x28>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	4a07      	ldr	r2, [pc, #28]	; (80033ac <SystemInit+0x28>)
 8003390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <SystemInit+0x28>)
 800339a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800339e:	609a      	str	r2, [r3, #8]
#endif
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <Reset_Handler>:
 80033b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033e8 <LoopFillZerobss+0x14>
 80033b4:	2100      	movs	r1, #0
 80033b6:	e003      	b.n	80033c0 <LoopCopyDataInit>

080033b8 <CopyDataInit>:
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <LoopFillZerobss+0x18>)
 80033ba:	585b      	ldr	r3, [r3, r1]
 80033bc:	5043      	str	r3, [r0, r1]
 80033be:	3104      	adds	r1, #4

080033c0 <LoopCopyDataInit>:
 80033c0:	480b      	ldr	r0, [pc, #44]	; (80033f0 <LoopFillZerobss+0x1c>)
 80033c2:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <LoopFillZerobss+0x20>)
 80033c4:	1842      	adds	r2, r0, r1
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d3f6      	bcc.n	80033b8 <CopyDataInit>
 80033ca:	4a0b      	ldr	r2, [pc, #44]	; (80033f8 <LoopFillZerobss+0x24>)
 80033cc:	e002      	b.n	80033d4 <LoopFillZerobss>

080033ce <FillZerobss>:
 80033ce:	2300      	movs	r3, #0
 80033d0:	f842 3b04 	str.w	r3, [r2], #4

080033d4 <LoopFillZerobss>:
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <LoopFillZerobss+0x28>)
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d3f9      	bcc.n	80033ce <FillZerobss>
 80033da:	f7ff ffd3 	bl	8003384 <SystemInit>
 80033de:	f003 fed9 	bl	8007194 <__libc_init_array>
 80033e2:	f7ff fa19 	bl	8002818 <main>
 80033e6:	4770      	bx	lr
 80033e8:	20020000 	.word	0x20020000
 80033ec:	080080c0 	.word	0x080080c0
 80033f0:	20000000 	.word	0x20000000
 80033f4:	20000084 	.word	0x20000084
 80033f8:	20000084 	.word	0x20000084
 80033fc:	20002a54 	.word	0x20002a54

08003400 <ADC_IRQHandler>:
 8003400:	e7fe      	b.n	8003400 <ADC_IRQHandler>
	...

08003404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003408:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <HAL_Init+0x40>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <HAL_Init+0x40>)
 800340e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_Init+0x40>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <HAL_Init+0x40>)
 800341a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800341e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003420:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HAL_Init+0x40>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a07      	ldr	r2, [pc, #28]	; (8003444 <HAL_Init+0x40>)
 8003426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800342c:	2003      	movs	r0, #3
 800342e:	f000 f92b 	bl	8003688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003432:	2000      	movs	r0, #0
 8003434:	f000 f808 	bl	8003448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003438:	f7ff fd54 	bl	8002ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40023c00 	.word	0x40023c00

08003448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003450:	4b12      	ldr	r3, [pc, #72]	; (800349c <HAL_InitTick+0x54>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <HAL_InitTick+0x58>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	4619      	mov	r1, r3
 800345a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800345e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f943 	bl	80036f2 <HAL_SYSTICK_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e00e      	b.n	8003494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b0f      	cmp	r3, #15
 800347a:	d80a      	bhi.n	8003492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800347c:	2200      	movs	r2, #0
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	f000 f90b 	bl	800369e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003488:	4a06      	ldr	r2, [pc, #24]	; (80034a4 <HAL_InitTick+0x5c>)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000014 	.word	0x20000014
 80034a0:	2000001c 	.word	0x2000001c
 80034a4:	20000018 	.word	0x20000018

080034a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_IncTick+0x20>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_IncTick+0x24>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4413      	add	r3, r2
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_IncTick+0x24>)
 80034ba:	6013      	str	r3, [r2, #0]
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	2000001c 	.word	0x2000001c
 80034cc:	20002a4c 	.word	0x20002a4c

080034d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return uwTick;
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <HAL_GetTick+0x14>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20002a4c 	.word	0x20002a4c

080034e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <__NVIC_SetPriorityGrouping+0x44>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351a:	4a04      	ldr	r2, [pc, #16]	; (800352c <__NVIC_SetPriorityGrouping+0x44>)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	60d3      	str	r3, [r2, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <__NVIC_GetPriorityGrouping+0x18>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 0307 	and.w	r3, r3, #7
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	2b00      	cmp	r3, #0
 800355c:	db0b      	blt.n	8003576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	4907      	ldr	r1, [pc, #28]	; (8003584 <__NVIC_EnableIRQ+0x38>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2001      	movs	r0, #1
 800356e:	fa00 f202 	lsl.w	r2, r0, r2
 8003572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000e100 	.word	0xe000e100

08003588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003598:	2b00      	cmp	r3, #0
 800359a:	db0a      	blt.n	80035b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	490c      	ldr	r1, [pc, #48]	; (80035d4 <__NVIC_SetPriority+0x4c>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	0112      	lsls	r2, r2, #4
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	440b      	add	r3, r1
 80035ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b0:	e00a      	b.n	80035c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4908      	ldr	r1, [pc, #32]	; (80035d8 <__NVIC_SetPriority+0x50>)
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	3b04      	subs	r3, #4
 80035c0:	0112      	lsls	r2, r2, #4
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	440b      	add	r3, r1
 80035c6:	761a      	strb	r2, [r3, #24]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000e100 	.word	0xe000e100
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f1c3 0307 	rsb	r3, r3, #7
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	bf28      	it	cs
 80035fa:	2304      	movcs	r3, #4
 80035fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3304      	adds	r3, #4
 8003602:	2b06      	cmp	r3, #6
 8003604:	d902      	bls.n	800360c <NVIC_EncodePriority+0x30>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3b03      	subs	r3, #3
 800360a:	e000      	b.n	800360e <NVIC_EncodePriority+0x32>
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003610:	f04f 32ff 	mov.w	r2, #4294967295
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	401a      	ands	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003624:	f04f 31ff 	mov.w	r1, #4294967295
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	43d9      	mvns	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	4313      	orrs	r3, r2
         );
}
 8003636:	4618      	mov	r0, r3
 8003638:	3724      	adds	r7, #36	; 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003654:	d301      	bcc.n	800365a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003656:	2301      	movs	r3, #1
 8003658:	e00f      	b.n	800367a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <SysTick_Config+0x40>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003662:	210f      	movs	r1, #15
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	f7ff ff8e 	bl	8003588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <SysTick_Config+0x40>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <SysTick_Config+0x40>)
 8003674:	2207      	movs	r2, #7
 8003676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000e010 	.word	0xe000e010

08003688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff29 	bl	80034e8 <__NVIC_SetPriorityGrouping>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b0:	f7ff ff3e 	bl	8003530 <__NVIC_GetPriorityGrouping>
 80036b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	6978      	ldr	r0, [r7, #20]
 80036bc:	f7ff ff8e 	bl	80035dc <NVIC_EncodePriority>
 80036c0:	4602      	mov	r2, r0
 80036c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ff5d 	bl	8003588 <__NVIC_SetPriority>
}
 80036ce:	bf00      	nop
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	4603      	mov	r3, r0
 80036de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff31 	bl	800354c <__NVIC_EnableIRQ>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ffa2 	bl	8003644 <SysTick_Config>
 8003700:	4603      	mov	r3, r0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e014      	b.n	8003746 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	791b      	ldrb	r3, [r3, #4]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d105      	bne.n	8003732 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fc01 	bl	8002f34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6819      	ldr	r1, [r3, #0]
 8003762:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43da      	mvns	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	400a      	ands	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6819      	ldr	r1, [r3, #0]
 800377c:	2201      	movs	r2, #1
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43da      	mvns	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	400a      	ands	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 f915 	bl	80039c8 <HAL_DMA_Abort>
 800379e:	4603      	mov	r3, r0
 80037a0:	73fb      	strb	r3, [r7, #15]
 80037a2:	e006      	b.n	80037b2 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f90d 	bl	80039c8 <HAL_DMA_Abort>
 80037ae:	4603      	mov	r3, r0
 80037b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2204      	movs	r2, #4
 80037bc:	711a      	strb	r2, [r3, #4]
 80037be:	e002      	b.n	80037c6 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	795b      	ldrb	r3, [r3, #5]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_DAC_ConfigChannel+0x20>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e036      	b.n	800385e <HAL_DAC_ConfigChannel+0x8e>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2202      	movs	r2, #2
 80037fa:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003804:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4013      	ands	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6819      	ldr	r1, [r3, #0]
 800383e:	22c0      	movs	r2, #192	; 0xc0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43da      	mvns	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	400a      	ands	r2, r1
 800384e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003878:	f7ff fe2a 	bl	80034d0 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e099      	b.n	80039bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a8:	e00f      	b.n	80038ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038aa:	f7ff fe11 	bl	80034d0 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d908      	bls.n	80038ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2203      	movs	r2, #3
 80038c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e078      	b.n	80039bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e8      	bne.n	80038aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4b38      	ldr	r3, [pc, #224]	; (80039c4 <HAL_DMA_Init+0x158>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800390e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	2b04      	cmp	r3, #4
 8003922:	d107      	bne.n	8003934 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	4313      	orrs	r3, r2
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f023 0307 	bic.w	r3, r3, #7
 800394a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	2b04      	cmp	r3, #4
 800395c:	d117      	bne.n	800398e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00e      	beq.n	800398e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fa7b 	bl	8003e6c <DMA_CheckFifoParam>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2240      	movs	r2, #64	; 0x40
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800398a:	2301      	movs	r3, #1
 800398c:	e016      	b.n	80039bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa32 	bl	8003e00 <DMA_CalcBaseAndBitshift>
 800399c:	4603      	mov	r3, r0
 800399e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	223f      	movs	r2, #63	; 0x3f
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	f010803f 	.word	0xf010803f

080039c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039d6:	f7ff fd7b 	bl	80034d0 <HAL_GetTick>
 80039da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d008      	beq.n	80039fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e052      	b.n	8003aa0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0216 	bic.w	r2, r2, #22
 8003a08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <HAL_DMA_Abort+0x62>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0208 	bic.w	r2, r2, #8
 8003a38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a4a:	e013      	b.n	8003a74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a4c:	f7ff fd40 	bl	80034d0 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	d90c      	bls.n	8003a74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e015      	b.n	8003aa0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e4      	bne.n	8003a4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a86:	223f      	movs	r2, #63	; 0x3f
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d004      	beq.n	8003ac6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2280      	movs	r2, #128	; 0x80
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00c      	b.n	8003ae0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2205      	movs	r2, #5
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003af8:	4b92      	ldr	r3, [pc, #584]	; (8003d44 <HAL_DMA_IRQHandler+0x258>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a92      	ldr	r2, [pc, #584]	; (8003d48 <HAL_DMA_IRQHandler+0x25c>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	0a9b      	lsrs	r3, r3, #10
 8003b04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b16:	2208      	movs	r2, #8
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01a      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0204 	bic.w	r2, r2, #4
 8003b3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	2208      	movs	r2, #8
 8003b46:	409a      	lsls	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f043 0201 	orr.w	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d012      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	f043 0202 	orr.w	r2, r3, #2
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	2204      	movs	r2, #4
 8003b94:	409a      	lsls	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d012      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	f043 0204 	orr.w	r2, r3, #4
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	2210      	movs	r2, #16
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d043      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d03c      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be6:	2210      	movs	r2, #16
 8003be8:	409a      	lsls	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d018      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d108      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d024      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	4798      	blx	r3
 8003c1a:	e01f      	b.n	8003c5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01b      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	e016      	b.n	8003c5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d107      	bne.n	8003c4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0208 	bic.w	r2, r2, #8
 8003c4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	2220      	movs	r2, #32
 8003c62:	409a      	lsls	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 808e 	beq.w	8003d8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8086 	beq.w	8003d8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c82:	2220      	movs	r2, #32
 8003c84:	409a      	lsls	r2, r3
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d136      	bne.n	8003d04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0216 	bic.w	r2, r2, #22
 8003ca4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695a      	ldr	r2, [r3, #20]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <HAL_DMA_IRQHandler+0x1da>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0208 	bic.w	r2, r2, #8
 8003cd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	223f      	movs	r2, #63	; 0x3f
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d07d      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	4798      	blx	r3
        }
        return;
 8003d02:	e078      	b.n	8003df6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01c      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d108      	bne.n	8003d32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d030      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
 8003d30:	e02b      	b.n	8003d8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d027      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
 8003d42:	e022      	b.n	8003d8a <HAL_DMA_IRQHandler+0x29e>
 8003d44:	20000014 	.word	0x20000014
 8003d48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10f      	bne.n	8003d7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0210 	bic.w	r2, r2, #16
 8003d68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d032      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d022      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2205      	movs	r2, #5
 8003da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3301      	adds	r3, #1
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d307      	bcc.n	8003dd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f2      	bne.n	8003db6 <HAL_DMA_IRQHandler+0x2ca>
 8003dd0:	e000      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dd2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
 8003df4:	e000      	b.n	8003df8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003df6:	bf00      	nop
    }
  }
}
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop

08003e00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	3b10      	subs	r3, #16
 8003e10:	4a14      	ldr	r2, [pc, #80]	; (8003e64 <DMA_CalcBaseAndBitshift+0x64>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e1a:	4a13      	ldr	r2, [pc, #76]	; (8003e68 <DMA_CalcBaseAndBitshift+0x68>)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d909      	bls.n	8003e42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e36:	f023 0303 	bic.w	r3, r3, #3
 8003e3a:	1d1a      	adds	r2, r3, #4
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	659a      	str	r2, [r3, #88]	; 0x58
 8003e40:	e007      	b.n	8003e52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e4a:	f023 0303 	bic.w	r3, r3, #3
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	aaaaaaab 	.word	0xaaaaaaab
 8003e68:	08008074 	.word	0x08008074

08003e6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11f      	bne.n	8003ec6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d855      	bhi.n	8003f38 <DMA_CheckFifoParam+0xcc>
 8003e8c:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <DMA_CheckFifoParam+0x28>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eb7 	.word	0x08003eb7
 8003e9c:	08003ea5 	.word	0x08003ea5
 8003ea0:	08003f39 	.word	0x08003f39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d045      	beq.n	8003f3c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb4:	e042      	b.n	8003f3c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ebe:	d13f      	bne.n	8003f40 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec4:	e03c      	b.n	8003f40 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ece:	d121      	bne.n	8003f14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d836      	bhi.n	8003f44 <DMA_CheckFifoParam+0xd8>
 8003ed6:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <DMA_CheckFifoParam+0x70>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003eed 	.word	0x08003eed
 8003ee0:	08003ef3 	.word	0x08003ef3
 8003ee4:	08003eed 	.word	0x08003eed
 8003ee8:	08003f05 	.word	0x08003f05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef0:	e02f      	b.n	8003f52 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d024      	beq.n	8003f48 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f02:	e021      	b.n	8003f48 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f0c:	d11e      	bne.n	8003f4c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f12:	e01b      	b.n	8003f4c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d902      	bls.n	8003f20 <DMA_CheckFifoParam+0xb4>
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d003      	beq.n	8003f26 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f1e:	e018      	b.n	8003f52 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
      break;
 8003f24:	e015      	b.n	8003f52 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00e      	beq.n	8003f50 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
      break;
 8003f36:	e00b      	b.n	8003f50 <DMA_CheckFifoParam+0xe4>
      break;
 8003f38:	bf00      	nop
 8003f3a:	e00a      	b.n	8003f52 <DMA_CheckFifoParam+0xe6>
      break;
 8003f3c:	bf00      	nop
 8003f3e:	e008      	b.n	8003f52 <DMA_CheckFifoParam+0xe6>
      break;
 8003f40:	bf00      	nop
 8003f42:	e006      	b.n	8003f52 <DMA_CheckFifoParam+0xe6>
      break;
 8003f44:	bf00      	nop
 8003f46:	e004      	b.n	8003f52 <DMA_CheckFifoParam+0xe6>
      break;
 8003f48:	bf00      	nop
 8003f4a:	e002      	b.n	8003f52 <DMA_CheckFifoParam+0xe6>
      break;   
 8003f4c:	bf00      	nop
 8003f4e:	e000      	b.n	8003f52 <DMA_CheckFifoParam+0xe6>
      break;
 8003f50:	bf00      	nop
    }
  } 
  
  return status; 
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b089      	sub	sp, #36	; 0x24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	e165      	b.n	8004248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f040 8154 	bne.w	8004242 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d00b      	beq.n	8003fba <HAL_GPIO_Init+0x5a>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d007      	beq.n	8003fba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fae:	2b11      	cmp	r3, #17
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b12      	cmp	r3, #18
 8003fb8:	d130      	bne.n	800401c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 0201 	and.w	r2, r3, #1
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	2203      	movs	r2, #3
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d003      	beq.n	800405c <HAL_GPIO_Init+0xfc>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b12      	cmp	r3, #18
 800405a:	d123      	bne.n	80040a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	08da      	lsrs	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3208      	adds	r2, #8
 8004064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	220f      	movs	r2, #15
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	08da      	lsrs	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3208      	adds	r2, #8
 800409e:	69b9      	ldr	r1, [r7, #24]
 80040a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	2203      	movs	r2, #3
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0203 	and.w	r2, r3, #3
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80ae 	beq.w	8004242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	4b5c      	ldr	r3, [pc, #368]	; (800425c <HAL_GPIO_Init+0x2fc>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	4a5b      	ldr	r2, [pc, #364]	; (800425c <HAL_GPIO_Init+0x2fc>)
 80040f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f4:	6453      	str	r3, [r2, #68]	; 0x44
 80040f6:	4b59      	ldr	r3, [pc, #356]	; (800425c <HAL_GPIO_Init+0x2fc>)
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004102:	4a57      	ldr	r2, [pc, #348]	; (8004260 <HAL_GPIO_Init+0x300>)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	3302      	adds	r3, #2
 800410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	220f      	movs	r2, #15
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a4e      	ldr	r2, [pc, #312]	; (8004264 <HAL_GPIO_Init+0x304>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d025      	beq.n	800417a <HAL_GPIO_Init+0x21a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4d      	ldr	r2, [pc, #308]	; (8004268 <HAL_GPIO_Init+0x308>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01f      	beq.n	8004176 <HAL_GPIO_Init+0x216>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a4c      	ldr	r2, [pc, #304]	; (800426c <HAL_GPIO_Init+0x30c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d019      	beq.n	8004172 <HAL_GPIO_Init+0x212>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a4b      	ldr	r2, [pc, #300]	; (8004270 <HAL_GPIO_Init+0x310>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <HAL_GPIO_Init+0x20e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a4a      	ldr	r2, [pc, #296]	; (8004274 <HAL_GPIO_Init+0x314>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00d      	beq.n	800416a <HAL_GPIO_Init+0x20a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a49      	ldr	r2, [pc, #292]	; (8004278 <HAL_GPIO_Init+0x318>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <HAL_GPIO_Init+0x206>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a48      	ldr	r2, [pc, #288]	; (800427c <HAL_GPIO_Init+0x31c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d101      	bne.n	8004162 <HAL_GPIO_Init+0x202>
 800415e:	2306      	movs	r3, #6
 8004160:	e00c      	b.n	800417c <HAL_GPIO_Init+0x21c>
 8004162:	2307      	movs	r3, #7
 8004164:	e00a      	b.n	800417c <HAL_GPIO_Init+0x21c>
 8004166:	2305      	movs	r3, #5
 8004168:	e008      	b.n	800417c <HAL_GPIO_Init+0x21c>
 800416a:	2304      	movs	r3, #4
 800416c:	e006      	b.n	800417c <HAL_GPIO_Init+0x21c>
 800416e:	2303      	movs	r3, #3
 8004170:	e004      	b.n	800417c <HAL_GPIO_Init+0x21c>
 8004172:	2302      	movs	r3, #2
 8004174:	e002      	b.n	800417c <HAL_GPIO_Init+0x21c>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_GPIO_Init+0x21c>
 800417a:	2300      	movs	r3, #0
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	f002 0203 	and.w	r2, r2, #3
 8004182:	0092      	lsls	r2, r2, #2
 8004184:	4093      	lsls	r3, r2
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800418c:	4934      	ldr	r1, [pc, #208]	; (8004260 <HAL_GPIO_Init+0x300>)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	3302      	adds	r3, #2
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800419a:	4b39      	ldr	r3, [pc, #228]	; (8004280 <HAL_GPIO_Init+0x320>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041be:	4a30      	ldr	r2, [pc, #192]	; (8004280 <HAL_GPIO_Init+0x320>)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041c4:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <HAL_GPIO_Init+0x320>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041e8:	4a25      	ldr	r2, [pc, #148]	; (8004280 <HAL_GPIO_Init+0x320>)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_GPIO_Init+0x320>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004212:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_GPIO_Init+0x320>)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_GPIO_Init+0x320>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800423c:	4a10      	ldr	r2, [pc, #64]	; (8004280 <HAL_GPIO_Init+0x320>)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3301      	adds	r3, #1
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b0f      	cmp	r3, #15
 800424c:	f67f ae96 	bls.w	8003f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004250:	bf00      	nop
 8004252:	3724      	adds	r7, #36	; 0x24
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	40023800 	.word	0x40023800
 8004260:	40013800 	.word	0x40013800
 8004264:	40020000 	.word	0x40020000
 8004268:	40020400 	.word	0x40020400
 800426c:	40020800 	.word	0x40020800
 8004270:	40020c00 	.word	0x40020c00
 8004274:	40021000 	.word	0x40021000
 8004278:	40021400 	.word	0x40021400
 800427c:	40021800 	.word	0x40021800
 8004280:	40013c00 	.word	0x40013c00

08004284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
 8004290:	4613      	mov	r3, r2
 8004292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004294:	787b      	ldrb	r3, [r7, #1]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800429a:	887a      	ldrh	r2, [r7, #2]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042a0:	e003      	b.n	80042aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042a2:	887b      	ldrh	r3, [r7, #2]
 80042a4:	041a      	lsls	r2, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	619a      	str	r2, [r3, #24]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	460b      	mov	r3, r1
 80042c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	887b      	ldrh	r3, [r7, #2]
 80042c8:	401a      	ands	r2, r3
 80042ca:	887b      	ldrh	r3, [r7, #2]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d104      	bne.n	80042da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042d0:	887b      	ldrh	r3, [r7, #2]
 80042d2:	041a      	lsls	r2, r3, #16
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80042d8:	e002      	b.n	80042e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80042da:	887a      	ldrh	r2, [r7, #2]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	619a      	str	r2, [r3, #24]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042f6:	4b08      	ldr	r3, [pc, #32]	; (8004318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d006      	beq.n	8004310 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004302:	4a05      	ldr	r2, [pc, #20]	; (8004318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f806 	bl	800431c <HAL_GPIO_EXTI_Callback>
  }
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40013c00 	.word	0x40013c00

0800431c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0cc      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004348:	4b68      	ldr	r3, [pc, #416]	; (80044ec <HAL_RCC_ClockConfig+0x1b8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d90c      	bls.n	8004370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004356:	4b65      	ldr	r3, [pc, #404]	; (80044ec <HAL_RCC_ClockConfig+0x1b8>)
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b63      	ldr	r3, [pc, #396]	; (80044ec <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0b8      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d020      	beq.n	80043be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004388:	4b59      	ldr	r3, [pc, #356]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4a58      	ldr	r2, [pc, #352]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043a0:	4b53      	ldr	r3, [pc, #332]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4a52      	ldr	r2, [pc, #328]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ac:	4b50      	ldr	r3, [pc, #320]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	494d      	ldr	r1, [pc, #308]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d044      	beq.n	8004454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d107      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	4b47      	ldr	r3, [pc, #284]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d119      	bne.n	8004412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e07f      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d107      	bne.n	8004402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f2:	4b3f      	ldr	r3, [pc, #252]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e06f      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004402:	4b3b      	ldr	r3, [pc, #236]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e067      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004412:	4b37      	ldr	r3, [pc, #220]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f023 0203 	bic.w	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	4934      	ldr	r1, [pc, #208]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	4313      	orrs	r3, r2
 8004422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004424:	f7ff f854 	bl	80034d0 <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442a:	e00a      	b.n	8004442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800442c:	f7ff f850 	bl	80034d0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f241 3288 	movw	r2, #5000	; 0x1388
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e04f      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004442:	4b2b      	ldr	r3, [pc, #172]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 020c 	and.w	r2, r3, #12
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	429a      	cmp	r2, r3
 8004452:	d1eb      	bne.n	800442c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004454:	4b25      	ldr	r3, [pc, #148]	; (80044ec <HAL_RCC_ClockConfig+0x1b8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d20c      	bcs.n	800447c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b22      	ldr	r3, [pc, #136]	; (80044ec <HAL_RCC_ClockConfig+0x1b8>)
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800446a:	4b20      	ldr	r3, [pc, #128]	; (80044ec <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e032      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4916      	ldr	r1, [pc, #88]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044a6:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	490e      	ldr	r1, [pc, #56]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ba:	f000 f855 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 80044be:	4601      	mov	r1, r0
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <HAL_RCC_ClockConfig+0x1c0>)
 80044cc:	5cd3      	ldrb	r3, [r2, r3]
 80044ce:	fa21 f303 	lsr.w	r3, r1, r3
 80044d2:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <HAL_RCC_ClockConfig+0x1c8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe ffb4 	bl	8003448 <HAL_InitTick>

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40023c00 	.word	0x40023c00
 80044f0:	40023800 	.word	0x40023800
 80044f4:	0800805c 	.word	0x0800805c
 80044f8:	20000014 	.word	0x20000014
 80044fc:	20000018 	.word	0x20000018

08004500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <HAL_RCC_GetHCLKFreq+0x14>)
 8004506:	681b      	ldr	r3, [r3, #0]
}
 8004508:	4618      	mov	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000014 	.word	0x20000014

08004518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800451c:	f7ff fff0 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 8004520:	4601      	mov	r1, r0
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	0a9b      	lsrs	r3, r3, #10
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4a03      	ldr	r2, [pc, #12]	; (800453c <HAL_RCC_GetPCLK1Freq+0x24>)
 800452e:	5cd3      	ldrb	r3, [r2, r3]
 8004530:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40023800 	.word	0x40023800
 800453c:	0800806c 	.word	0x0800806c

08004540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004544:	f7ff ffdc 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 8004548:	4601      	mov	r1, r0
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	0b5b      	lsrs	r3, r3, #13
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	4a03      	ldr	r2, [pc, #12]	; (8004564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004556:	5cd3      	ldrb	r3, [r2, r3]
 8004558:	fa21 f303 	lsr.w	r3, r1, r3
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40023800 	.word	0x40023800
 8004564:	0800806c 	.word	0x0800806c

08004568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004582:	4bc6      	ldr	r3, [pc, #792]	; (800489c <HAL_RCC_GetSysClockFreq+0x334>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b0c      	cmp	r3, #12
 800458c:	f200 817e 	bhi.w	800488c <HAL_RCC_GetSysClockFreq+0x324>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <HAL_RCC_GetSysClockFreq+0x30>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045cd 	.word	0x080045cd
 800459c:	0800488d 	.word	0x0800488d
 80045a0:	0800488d 	.word	0x0800488d
 80045a4:	0800488d 	.word	0x0800488d
 80045a8:	080045d3 	.word	0x080045d3
 80045ac:	0800488d 	.word	0x0800488d
 80045b0:	0800488d 	.word	0x0800488d
 80045b4:	0800488d 	.word	0x0800488d
 80045b8:	080045d9 	.word	0x080045d9
 80045bc:	0800488d 	.word	0x0800488d
 80045c0:	0800488d 	.word	0x0800488d
 80045c4:	0800488d 	.word	0x0800488d
 80045c8:	08004735 	.word	0x08004735
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045cc:	4bb4      	ldr	r3, [pc, #720]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x338>)
 80045ce:	613b      	str	r3, [r7, #16]
       break;
 80045d0:	e15f      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045d2:	4bb4      	ldr	r3, [pc, #720]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80045d4:	613b      	str	r3, [r7, #16]
      break;
 80045d6:	e15c      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d8:	4bb0      	ldr	r3, [pc, #704]	; (800489c <HAL_RCC_GetSysClockFreq+0x334>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045e2:	4bae      	ldr	r3, [pc, #696]	; (800489c <HAL_RCC_GetSysClockFreq+0x334>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d04a      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ee:	4bab      	ldr	r3, [pc, #684]	; (800489c <HAL_RCC_GetSysClockFreq+0x334>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	099b      	lsrs	r3, r3, #6
 80045f4:	f04f 0400 	mov.w	r4, #0
 80045f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	ea03 0501 	and.w	r5, r3, r1
 8004604:	ea04 0602 	and.w	r6, r4, r2
 8004608:	4629      	mov	r1, r5
 800460a:	4632      	mov	r2, r6
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	f04f 0400 	mov.w	r4, #0
 8004614:	0154      	lsls	r4, r2, #5
 8004616:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800461a:	014b      	lsls	r3, r1, #5
 800461c:	4619      	mov	r1, r3
 800461e:	4622      	mov	r2, r4
 8004620:	1b49      	subs	r1, r1, r5
 8004622:	eb62 0206 	sbc.w	r2, r2, r6
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	f04f 0400 	mov.w	r4, #0
 800462e:	0194      	lsls	r4, r2, #6
 8004630:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004634:	018b      	lsls	r3, r1, #6
 8004636:	1a5b      	subs	r3, r3, r1
 8004638:	eb64 0402 	sbc.w	r4, r4, r2
 800463c:	f04f 0100 	mov.w	r1, #0
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	00e2      	lsls	r2, r4, #3
 8004646:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800464a:	00d9      	lsls	r1, r3, #3
 800464c:	460b      	mov	r3, r1
 800464e:	4614      	mov	r4, r2
 8004650:	195b      	adds	r3, r3, r5
 8004652:	eb44 0406 	adc.w	r4, r4, r6
 8004656:	f04f 0100 	mov.w	r1, #0
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	0262      	lsls	r2, r4, #9
 8004660:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004664:	0259      	lsls	r1, r3, #9
 8004666:	460b      	mov	r3, r1
 8004668:	4614      	mov	r4, r2
 800466a:	4618      	mov	r0, r3
 800466c:	4621      	mov	r1, r4
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f04f 0400 	mov.w	r4, #0
 8004674:	461a      	mov	r2, r3
 8004676:	4623      	mov	r3, r4
 8004678:	f7fb fe22 	bl	80002c0 <__aeabi_uldivmod>
 800467c:	4603      	mov	r3, r0
 800467e:	460c      	mov	r4, r1
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e049      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004684:	4b85      	ldr	r3, [pc, #532]	; (800489c <HAL_RCC_GetSysClockFreq+0x334>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	099b      	lsrs	r3, r3, #6
 800468a:	f04f 0400 	mov.w	r4, #0
 800468e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	ea03 0501 	and.w	r5, r3, r1
 800469a:	ea04 0602 	and.w	r6, r4, r2
 800469e:	4629      	mov	r1, r5
 80046a0:	4632      	mov	r2, r6
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	f04f 0400 	mov.w	r4, #0
 80046aa:	0154      	lsls	r4, r2, #5
 80046ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046b0:	014b      	lsls	r3, r1, #5
 80046b2:	4619      	mov	r1, r3
 80046b4:	4622      	mov	r2, r4
 80046b6:	1b49      	subs	r1, r1, r5
 80046b8:	eb62 0206 	sbc.w	r2, r2, r6
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	f04f 0400 	mov.w	r4, #0
 80046c4:	0194      	lsls	r4, r2, #6
 80046c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046ca:	018b      	lsls	r3, r1, #6
 80046cc:	1a5b      	subs	r3, r3, r1
 80046ce:	eb64 0402 	sbc.w	r4, r4, r2
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	00e2      	lsls	r2, r4, #3
 80046dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046e0:	00d9      	lsls	r1, r3, #3
 80046e2:	460b      	mov	r3, r1
 80046e4:	4614      	mov	r4, r2
 80046e6:	195b      	adds	r3, r3, r5
 80046e8:	eb44 0406 	adc.w	r4, r4, r6
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	02a2      	lsls	r2, r4, #10
 80046f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046fa:	0299      	lsls	r1, r3, #10
 80046fc:	460b      	mov	r3, r1
 80046fe:	4614      	mov	r4, r2
 8004700:	4618      	mov	r0, r3
 8004702:	4621      	mov	r1, r4
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f04f 0400 	mov.w	r4, #0
 800470a:	461a      	mov	r2, r3
 800470c:	4623      	mov	r3, r4
 800470e:	f7fb fdd7 	bl	80002c0 <__aeabi_uldivmod>
 8004712:	4603      	mov	r3, r0
 8004714:	460c      	mov	r4, r1
 8004716:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004718:	4b60      	ldr	r3, [pc, #384]	; (800489c <HAL_RCC_GetSysClockFreq+0x334>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	0c1b      	lsrs	r3, r3, #16
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	3301      	adds	r3, #1
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004730:	613b      	str	r3, [r7, #16]
      break;
 8004732:	e0ae      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004734:	4b59      	ldr	r3, [pc, #356]	; (800489c <HAL_RCC_GetSysClockFreq+0x334>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800473c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800473e:	4b57      	ldr	r3, [pc, #348]	; (800489c <HAL_RCC_GetSysClockFreq+0x334>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d04a      	beq.n	80047e0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474a:	4b54      	ldr	r3, [pc, #336]	; (800489c <HAL_RCC_GetSysClockFreq+0x334>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	099b      	lsrs	r3, r3, #6
 8004750:	f04f 0400 	mov.w	r4, #0
 8004754:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	ea03 0501 	and.w	r5, r3, r1
 8004760:	ea04 0602 	and.w	r6, r4, r2
 8004764:	4629      	mov	r1, r5
 8004766:	4632      	mov	r2, r6
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	f04f 0400 	mov.w	r4, #0
 8004770:	0154      	lsls	r4, r2, #5
 8004772:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004776:	014b      	lsls	r3, r1, #5
 8004778:	4619      	mov	r1, r3
 800477a:	4622      	mov	r2, r4
 800477c:	1b49      	subs	r1, r1, r5
 800477e:	eb62 0206 	sbc.w	r2, r2, r6
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	f04f 0400 	mov.w	r4, #0
 800478a:	0194      	lsls	r4, r2, #6
 800478c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004790:	018b      	lsls	r3, r1, #6
 8004792:	1a5b      	subs	r3, r3, r1
 8004794:	eb64 0402 	sbc.w	r4, r4, r2
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	00e2      	lsls	r2, r4, #3
 80047a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047a6:	00d9      	lsls	r1, r3, #3
 80047a8:	460b      	mov	r3, r1
 80047aa:	4614      	mov	r4, r2
 80047ac:	195b      	adds	r3, r3, r5
 80047ae:	eb44 0406 	adc.w	r4, r4, r6
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	0262      	lsls	r2, r4, #9
 80047bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80047c0:	0259      	lsls	r1, r3, #9
 80047c2:	460b      	mov	r3, r1
 80047c4:	4614      	mov	r4, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	4621      	mov	r1, r4
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f04f 0400 	mov.w	r4, #0
 80047d0:	461a      	mov	r2, r3
 80047d2:	4623      	mov	r3, r4
 80047d4:	f7fb fd74 	bl	80002c0 <__aeabi_uldivmod>
 80047d8:	4603      	mov	r3, r0
 80047da:	460c      	mov	r4, r1
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e049      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e0:	4b2e      	ldr	r3, [pc, #184]	; (800489c <HAL_RCC_GetSysClockFreq+0x334>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	099b      	lsrs	r3, r3, #6
 80047e6:	f04f 0400 	mov.w	r4, #0
 80047ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	ea03 0501 	and.w	r5, r3, r1
 80047f6:	ea04 0602 	and.w	r6, r4, r2
 80047fa:	4629      	mov	r1, r5
 80047fc:	4632      	mov	r2, r6
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	f04f 0400 	mov.w	r4, #0
 8004806:	0154      	lsls	r4, r2, #5
 8004808:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800480c:	014b      	lsls	r3, r1, #5
 800480e:	4619      	mov	r1, r3
 8004810:	4622      	mov	r2, r4
 8004812:	1b49      	subs	r1, r1, r5
 8004814:	eb62 0206 	sbc.w	r2, r2, r6
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	f04f 0400 	mov.w	r4, #0
 8004820:	0194      	lsls	r4, r2, #6
 8004822:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004826:	018b      	lsls	r3, r1, #6
 8004828:	1a5b      	subs	r3, r3, r1
 800482a:	eb64 0402 	sbc.w	r4, r4, r2
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	00e2      	lsls	r2, r4, #3
 8004838:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800483c:	00d9      	lsls	r1, r3, #3
 800483e:	460b      	mov	r3, r1
 8004840:	4614      	mov	r4, r2
 8004842:	195b      	adds	r3, r3, r5
 8004844:	eb44 0406 	adc.w	r4, r4, r6
 8004848:	f04f 0100 	mov.w	r1, #0
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	02a2      	lsls	r2, r4, #10
 8004852:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004856:	0299      	lsls	r1, r3, #10
 8004858:	460b      	mov	r3, r1
 800485a:	4614      	mov	r4, r2
 800485c:	4618      	mov	r0, r3
 800485e:	4621      	mov	r1, r4
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f04f 0400 	mov.w	r4, #0
 8004866:	461a      	mov	r2, r3
 8004868:	4623      	mov	r3, r4
 800486a:	f7fb fd29 	bl	80002c0 <__aeabi_uldivmod>
 800486e:	4603      	mov	r3, r0
 8004870:	460c      	mov	r4, r1
 8004872:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004874:	4b09      	ldr	r3, [pc, #36]	; (800489c <HAL_RCC_GetSysClockFreq+0x334>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	0f1b      	lsrs	r3, r3, #28
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	613b      	str	r3, [r7, #16]
      break;
 800488a:	e002      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x338>)
 800488e:	613b      	str	r3, [r7, #16]
      break;
 8004890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004892:	693b      	ldr	r3, [r7, #16]
}
 8004894:	4618      	mov	r0, r3
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489c:	40023800 	.word	0x40023800
 80048a0:	00f42400 	.word	0x00f42400
 80048a4:	007a1200 	.word	0x007a1200

080048a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8083 	beq.w	80049c8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048c2:	4b95      	ldr	r3, [pc, #596]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d019      	beq.n	8004902 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048ce:	4b92      	ldr	r3, [pc, #584]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d106      	bne.n	80048e8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048da:	4b8f      	ldr	r3, [pc, #572]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e6:	d00c      	beq.n	8004902 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048e8:	4b8b      	ldr	r3, [pc, #556]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048f0:	2b0c      	cmp	r3, #12
 80048f2:	d112      	bne.n	800491a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f4:	4b88      	ldr	r3, [pc, #544]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004900:	d10b      	bne.n	800491a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004902:	4b85      	ldr	r3, [pc, #532]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d05b      	beq.n	80049c6 <HAL_RCC_OscConfig+0x11e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d157      	bne.n	80049c6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e216      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004922:	d106      	bne.n	8004932 <HAL_RCC_OscConfig+0x8a>
 8004924:	4b7c      	ldr	r3, [pc, #496]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a7b      	ldr	r2, [pc, #492]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 800492a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	e01d      	b.n	800496e <HAL_RCC_OscConfig+0xc6>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800493a:	d10c      	bne.n	8004956 <HAL_RCC_OscConfig+0xae>
 800493c:	4b76      	ldr	r3, [pc, #472]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a75      	ldr	r2, [pc, #468]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4b73      	ldr	r3, [pc, #460]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a72      	ldr	r2, [pc, #456]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 800494e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	e00b      	b.n	800496e <HAL_RCC_OscConfig+0xc6>
 8004956:	4b70      	ldr	r3, [pc, #448]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6f      	ldr	r2, [pc, #444]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 800495c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	4b6d      	ldr	r3, [pc, #436]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a6c      	ldr	r2, [pc, #432]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d013      	beq.n	800499e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004976:	f7fe fdab 	bl	80034d0 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800497e:	f7fe fda7 	bl	80034d0 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b64      	cmp	r3, #100	; 0x64
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e1db      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004990:	4b61      	ldr	r3, [pc, #388]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0xd6>
 800499c:	e014      	b.n	80049c8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499e:	f7fe fd97 	bl	80034d0 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a6:	f7fe fd93 	bl	80034d0 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b64      	cmp	r3, #100	; 0x64
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e1c7      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b8:	4b57      	ldr	r3, [pc, #348]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f0      	bne.n	80049a6 <HAL_RCC_OscConfig+0xfe>
 80049c4:	e000      	b.n	80049c8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d06f      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049d4:	4b50      	ldr	r3, [pc, #320]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 030c 	and.w	r3, r3, #12
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d017      	beq.n	8004a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049e0:	4b4d      	ldr	r3, [pc, #308]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d105      	bne.n	80049f8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049ec:	4b4a      	ldr	r3, [pc, #296]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00b      	beq.n	8004a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f8:	4b47      	ldr	r3, [pc, #284]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	d11c      	bne.n	8004a3e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a04:	4b44      	ldr	r3, [pc, #272]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d116      	bne.n	8004a3e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a10:	4b41      	ldr	r3, [pc, #260]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_OscConfig+0x180>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e18f      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b3b      	ldr	r3, [pc, #236]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4938      	ldr	r1, [pc, #224]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3c:	e03a      	b.n	8004ab4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d020      	beq.n	8004a88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a46:	4b35      	ldr	r3, [pc, #212]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fe fd40 	bl	80034d0 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a54:	f7fe fd3c 	bl	80034d0 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e170      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a66:	4b2c      	ldr	r3, [pc, #176]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a72:	4b29      	ldr	r3, [pc, #164]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4925      	ldr	r1, [pc, #148]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]
 8004a86:	e015      	b.n	8004ab4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a88:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fe fd1f 	bl	80034d0 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a96:	f7fe fd1b 	bl	80034d0 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e14f      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d037      	beq.n	8004b30 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d016      	beq.n	8004af6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <HAL_RCC_OscConfig+0x278>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ace:	f7fe fcff 	bl	80034d0 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad6:	f7fe fcfb 	bl	80034d0 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e12f      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <HAL_RCC_OscConfig+0x270>)
 8004aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x22e>
 8004af4:	e01c      	b.n	8004b30 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_RCC_OscConfig+0x278>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afc:	f7fe fce8 	bl	80034d0 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b02:	e00f      	b.n	8004b24 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b04:	f7fe fce4 	bl	80034d0 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d908      	bls.n	8004b24 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e118      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
 8004b16:	bf00      	nop
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	42470000 	.word	0x42470000
 8004b20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b24:	4b8a      	ldr	r3, [pc, #552]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e9      	bne.n	8004b04 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8097 	beq.w	8004c6c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b42:	4b83      	ldr	r3, [pc, #524]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10f      	bne.n	8004b6e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	4b7f      	ldr	r3, [pc, #508]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	4a7e      	ldr	r2, [pc, #504]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5e:	4b7c      	ldr	r3, [pc, #496]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6e:	4b79      	ldr	r3, [pc, #484]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d118      	bne.n	8004bac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b7a:	4b76      	ldr	r3, [pc, #472]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a75      	ldr	r2, [pc, #468]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b86:	f7fe fca3 	bl	80034d0 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8e:	f7fe fc9f 	bl	80034d0 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0d3      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba0:	4b6c      	ldr	r3, [pc, #432]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x31a>
 8004bb4:	4b66      	ldr	r3, [pc, #408]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	4a65      	ldr	r2, [pc, #404]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc0:	e01c      	b.n	8004bfc <HAL_RCC_OscConfig+0x354>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b05      	cmp	r3, #5
 8004bc8:	d10c      	bne.n	8004be4 <HAL_RCC_OscConfig+0x33c>
 8004bca:	4b61      	ldr	r3, [pc, #388]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	4a60      	ldr	r2, [pc, #384]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004bd0:	f043 0304 	orr.w	r3, r3, #4
 8004bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd6:	4b5e      	ldr	r3, [pc, #376]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bda:	4a5d      	ldr	r2, [pc, #372]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	6713      	str	r3, [r2, #112]	; 0x70
 8004be2:	e00b      	b.n	8004bfc <HAL_RCC_OscConfig+0x354>
 8004be4:	4b5a      	ldr	r3, [pc, #360]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	4a59      	ldr	r2, [pc, #356]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004bea:	f023 0301 	bic.w	r3, r3, #1
 8004bee:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf0:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	4a56      	ldr	r2, [pc, #344]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004bf6:	f023 0304 	bic.w	r3, r3, #4
 8004bfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d015      	beq.n	8004c30 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c04:	f7fe fc64 	bl	80034d0 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c0c:	f7fe fc60 	bl	80034d0 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e092      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c22:	4b4b      	ldr	r3, [pc, #300]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0ee      	beq.n	8004c0c <HAL_RCC_OscConfig+0x364>
 8004c2e:	e014      	b.n	8004c5a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c30:	f7fe fc4e 	bl	80034d0 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c36:	e00a      	b.n	8004c4e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c38:	f7fe fc4a 	bl	80034d0 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e07c      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c4e:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1ee      	bne.n	8004c38 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d105      	bne.n	8004c6c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c60:	4b3b      	ldr	r3, [pc, #236]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	4a3a      	ldr	r2, [pc, #232]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d068      	beq.n	8004d46 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c74:	4b36      	ldr	r3, [pc, #216]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 030c 	and.w	r3, r3, #12
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d060      	beq.n	8004d42 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d145      	bne.n	8004d14 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c88:	4b33      	ldr	r3, [pc, #204]	; (8004d58 <HAL_RCC_OscConfig+0x4b0>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fe fc1f 	bl	80034d0 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c96:	f7fe fc1b 	bl	80034d0 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e04f      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca8:	4b29      	ldr	r3, [pc, #164]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	019b      	lsls	r3, r3, #6
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	041b      	lsls	r3, r3, #16
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	061b      	lsls	r3, r3, #24
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	071b      	lsls	r3, r3, #28
 8004ce0:	491b      	ldr	r1, [pc, #108]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce6:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <HAL_RCC_OscConfig+0x4b0>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fe fbf0 	bl	80034d0 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf4:	f7fe fbec 	bl	80034d0 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e020      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d06:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x44c>
 8004d12:	e018      	b.n	8004d46 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d14:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <HAL_RCC_OscConfig+0x4b0>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1a:	f7fe fbd9 	bl	80034d0 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d22:	f7fe fbd5 	bl	80034d0 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e009      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d34:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <HAL_RCC_OscConfig+0x4a8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f0      	bne.n	8004d22 <HAL_RCC_OscConfig+0x47a>
 8004d40:	e001      	b.n	8004d46 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40023800 	.word	0x40023800
 8004d54:	40007000 	.word	0x40007000
 8004d58:	42470060 	.word	0x42470060

08004d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e01d      	b.n	8004daa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fe f94e 	bl	8003024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	f000 fdf2 	bl	8005984 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b06      	cmp	r3, #6
 8004dd2:	d007      	beq.n	8004de4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2202      	movs	r2, #2
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a1a      	ldr	r2, [r3, #32]
 8004e10:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10f      	bne.n	8004e3a <HAL_TIM_Base_Stop+0x40>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6a1a      	ldr	r2, [r3, #32]
 8004e20:	f240 4344 	movw	r3, #1092	; 0x444
 8004e24:	4013      	ands	r3, r2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d107      	bne.n	8004e3a <HAL_TIM_Base_Stop+0x40>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b06      	cmp	r3, #6
 8004e78:	d007      	beq.n	8004e8a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e01d      	b.n	8004ee6 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f815 	bl	8004eee <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f000 fd54 	bl	8005984 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
	...

08004f04 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b0c      	cmp	r3, #12
 8004f12:	d841      	bhi.n	8004f98 <HAL_TIM_OC_Start_IT+0x94>
 8004f14:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <HAL_TIM_OC_Start_IT+0x18>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08004f99 	.word	0x08004f99
 8004f24:	08004f99 	.word	0x08004f99
 8004f28:	08004f99 	.word	0x08004f99
 8004f2c:	08004f63 	.word	0x08004f63
 8004f30:	08004f99 	.word	0x08004f99
 8004f34:	08004f99 	.word	0x08004f99
 8004f38:	08004f99 	.word	0x08004f99
 8004f3c:	08004f75 	.word	0x08004f75
 8004f40:	08004f99 	.word	0x08004f99
 8004f44:	08004f99 	.word	0x08004f99
 8004f48:	08004f99 	.word	0x08004f99
 8004f4c:	08004f87 	.word	0x08004f87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0202 	orr.w	r2, r2, #2
 8004f5e:	60da      	str	r2, [r3, #12]
      break;
 8004f60:	e01b      	b.n	8004f9a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0204 	orr.w	r2, r2, #4
 8004f70:	60da      	str	r2, [r3, #12]
      break;
 8004f72:	e012      	b.n	8004f9a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0208 	orr.w	r2, r2, #8
 8004f82:	60da      	str	r2, [r3, #12]
      break;
 8004f84:	e009      	b.n	8004f9a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0210 	orr.w	r2, r2, #16
 8004f94:	60da      	str	r2, [r3, #12]
      break;
 8004f96:	e000      	b.n	8004f9a <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8004f98:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	6839      	ldr	r1, [r7, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 f902 	bl	80061ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a15      	ldr	r2, [pc, #84]	; (8005004 <HAL_TIM_OC_Start_IT+0x100>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_TIM_OC_Start_IT+0xb8>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a14      	ldr	r2, [pc, #80]	; (8005008 <HAL_TIM_OC_Start_IT+0x104>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d101      	bne.n	8004fc0 <HAL_TIM_OC_Start_IT+0xbc>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <HAL_TIM_OC_Start_IT+0xbe>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b06      	cmp	r3, #6
 8004fe6:	d007      	beq.n	8004ff8 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40010000 	.word	0x40010000
 8005008:	40010400 	.word	0x40010400

0800500c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b0c      	cmp	r3, #12
 800501a:	d841      	bhi.n	80050a0 <HAL_TIM_OC_Stop_IT+0x94>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <HAL_TIM_OC_Stop_IT+0x18>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005059 	.word	0x08005059
 8005028:	080050a1 	.word	0x080050a1
 800502c:	080050a1 	.word	0x080050a1
 8005030:	080050a1 	.word	0x080050a1
 8005034:	0800506b 	.word	0x0800506b
 8005038:	080050a1 	.word	0x080050a1
 800503c:	080050a1 	.word	0x080050a1
 8005040:	080050a1 	.word	0x080050a1
 8005044:	0800507d 	.word	0x0800507d
 8005048:	080050a1 	.word	0x080050a1
 800504c:	080050a1 	.word	0x080050a1
 8005050:	080050a1 	.word	0x080050a1
 8005054:	0800508f 	.word	0x0800508f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0202 	bic.w	r2, r2, #2
 8005066:	60da      	str	r2, [r3, #12]
      break;
 8005068:	e01b      	b.n	80050a2 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0204 	bic.w	r2, r2, #4
 8005078:	60da      	str	r2, [r3, #12]
      break;
 800507a:	e012      	b.n	80050a2 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0208 	bic.w	r2, r2, #8
 800508a:	60da      	str	r2, [r3, #12]
      break;
 800508c:	e009      	b.n	80050a2 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0210 	bic.w	r2, r2, #16
 800509c:	60da      	str	r2, [r3, #12]
      break;
 800509e:	e000      	b.n	80050a2 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 80050a0:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	6839      	ldr	r1, [r7, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f001 f87e 	bl	80061ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a20      	ldr	r2, [pc, #128]	; (8005138 <HAL_TIM_OC_Stop_IT+0x12c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <HAL_TIM_OC_Stop_IT+0xb8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1f      	ldr	r2, [pc, #124]	; (800513c <HAL_TIM_OC_Stop_IT+0x130>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d101      	bne.n	80050c8 <HAL_TIM_OC_Stop_IT+0xbc>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <HAL_TIM_OC_Stop_IT+0xbe>
 80050c8:	2300      	movs	r3, #0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d017      	beq.n	80050fe <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6a1a      	ldr	r2, [r3, #32]
 80050d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80050d8:	4013      	ands	r3, r2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10f      	bne.n	80050fe <HAL_TIM_OC_Stop_IT+0xf2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6a1a      	ldr	r2, [r3, #32]
 80050e4:	f240 4344 	movw	r3, #1092	; 0x444
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d107      	bne.n	80050fe <HAL_TIM_OC_Stop_IT+0xf2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6a1a      	ldr	r2, [r3, #32]
 8005104:	f241 1311 	movw	r3, #4369	; 0x1111
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10f      	bne.n	800512e <HAL_TIM_OC_Stop_IT+0x122>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6a1a      	ldr	r2, [r3, #32]
 8005114:	f240 4344 	movw	r3, #1092	; 0x444
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d107      	bne.n	800512e <HAL_TIM_OC_Stop_IT+0x122>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40010000 	.word	0x40010000
 800513c:	40010400 	.word	0x40010400

08005140 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e01d      	b.n	800518e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f815 	bl	8005196 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3304      	adds	r3, #4
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f000 fc00 	bl	8005984 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d841      	bhi.n	8005240 <HAL_TIM_IC_Start_IT+0x94>
 80051bc:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <HAL_TIM_IC_Start_IT+0x18>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051f9 	.word	0x080051f9
 80051c8:	08005241 	.word	0x08005241
 80051cc:	08005241 	.word	0x08005241
 80051d0:	08005241 	.word	0x08005241
 80051d4:	0800520b 	.word	0x0800520b
 80051d8:	08005241 	.word	0x08005241
 80051dc:	08005241 	.word	0x08005241
 80051e0:	08005241 	.word	0x08005241
 80051e4:	0800521d 	.word	0x0800521d
 80051e8:	08005241 	.word	0x08005241
 80051ec:	08005241 	.word	0x08005241
 80051f0:	08005241 	.word	0x08005241
 80051f4:	0800522f 	.word	0x0800522f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0202 	orr.w	r2, r2, #2
 8005206:	60da      	str	r2, [r3, #12]
      break;
 8005208:	e01b      	b.n	8005242 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0204 	orr.w	r2, r2, #4
 8005218:	60da      	str	r2, [r3, #12]
      break;
 800521a:	e012      	b.n	8005242 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0208 	orr.w	r2, r2, #8
 800522a:	60da      	str	r2, [r3, #12]
      break;
 800522c:	e009      	b.n	8005242 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0210 	orr.w	r2, r2, #16
 800523c:	60da      	str	r2, [r3, #12]
      break;
 800523e:	e000      	b.n	8005242 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005240:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2201      	movs	r2, #1
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 ffae 	bl	80061ac <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b06      	cmp	r3, #6
 8005260:	d007      	beq.n	8005272 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b0c      	cmp	r3, #12
 800528a:	d841      	bhi.n	8005310 <HAL_TIM_IC_Stop_IT+0x94>
 800528c:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <HAL_TIM_IC_Stop_IT+0x18>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052c9 	.word	0x080052c9
 8005298:	08005311 	.word	0x08005311
 800529c:	08005311 	.word	0x08005311
 80052a0:	08005311 	.word	0x08005311
 80052a4:	080052db 	.word	0x080052db
 80052a8:	08005311 	.word	0x08005311
 80052ac:	08005311 	.word	0x08005311
 80052b0:	08005311 	.word	0x08005311
 80052b4:	080052ed 	.word	0x080052ed
 80052b8:	08005311 	.word	0x08005311
 80052bc:	08005311 	.word	0x08005311
 80052c0:	08005311 	.word	0x08005311
 80052c4:	080052ff 	.word	0x080052ff
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0202 	bic.w	r2, r2, #2
 80052d6:	60da      	str	r2, [r3, #12]
      break;
 80052d8:	e01b      	b.n	8005312 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0204 	bic.w	r2, r2, #4
 80052e8:	60da      	str	r2, [r3, #12]
      break;
 80052ea:	e012      	b.n	8005312 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0208 	bic.w	r2, r2, #8
 80052fa:	60da      	str	r2, [r3, #12]
      break;
 80052fc:	e009      	b.n	8005312 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0210 	bic.w	r2, r2, #16
 800530c:	60da      	str	r2, [r3, #12]
      break;
 800530e:	e000      	b.n	8005312 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8005310:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2200      	movs	r2, #0
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f000 ff46 	bl	80061ac <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6a1a      	ldr	r2, [r3, #32]
 8005326:	f241 1311 	movw	r3, #4369	; 0x1111
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10f      	bne.n	8005350 <HAL_TIM_IC_Stop_IT+0xd4>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	f240 4344 	movw	r3, #1092	; 0x444
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d107      	bne.n	8005350 <HAL_TIM_IC_Stop_IT+0xd4>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop

0800535c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b02      	cmp	r3, #2
 8005370:	d122      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b02      	cmp	r3, #2
 800537e:	d11b      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0202 	mvn.w	r2, #2
 8005388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fd fd48 	bl	8002e34 <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fd fd1e 	bl	8002de8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fad5 	bl	800595c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d122      	bne.n	800540c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d11b      	bne.n	800540c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0204 	mvn.w	r2, #4
 80053dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2202      	movs	r2, #2
 80053e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fd fd1e 	bl	8002e34 <HAL_TIM_IC_CaptureCallback>
 80053f8:	e005      	b.n	8005406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fd fcf4 	bl	8002de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 faab 	bl	800595c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b08      	cmp	r3, #8
 8005418:	d122      	bne.n	8005460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b08      	cmp	r3, #8
 8005426:	d11b      	bne.n	8005460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0208 	mvn.w	r2, #8
 8005430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2204      	movs	r2, #4
 8005436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fd fcf4 	bl	8002e34 <HAL_TIM_IC_CaptureCallback>
 800544c:	e005      	b.n	800545a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fd fcca 	bl	8002de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fa81 	bl	800595c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b10      	cmp	r3, #16
 800546c:	d122      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b10      	cmp	r3, #16
 800547a:	d11b      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0210 	mvn.w	r2, #16
 8005484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2208      	movs	r2, #8
 800548a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fd fcca 	bl	8002e34 <HAL_TIM_IC_CaptureCallback>
 80054a0:	e005      	b.n	80054ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fd fca0 	bl	8002de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fa57 	bl	800595c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d10e      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d107      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0201 	mvn.w	r2, #1
 80054d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fd fc98 	bl	8002e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ea:	2b80      	cmp	r3, #128	; 0x80
 80054ec:	d10e      	bne.n	800550c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f8:	2b80      	cmp	r3, #128	; 0x80
 80054fa:	d107      	bne.n	800550c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fefc 	bl	8006304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d10e      	bne.n	8005538 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d107      	bne.n	8005538 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa1c 	bl	8005970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b20      	cmp	r3, #32
 8005544:	d10e      	bne.n	8005564 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b20      	cmp	r3, #32
 8005552:	d107      	bne.n	8005564 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0220 	mvn.w	r2, #32
 800555c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fec6 	bl	80062f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005564:	bf00      	nop
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005582:	2302      	movs	r3, #2
 8005584:	e04e      	b.n	8005624 <HAL_TIM_OC_ConfigChannel+0xb8>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2202      	movs	r2, #2
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b0c      	cmp	r3, #12
 800559a:	d839      	bhi.n	8005610 <HAL_TIM_OC_ConfigChannel+0xa4>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <HAL_TIM_OC_ConfigChannel+0x38>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055d9 	.word	0x080055d9
 80055a8:	08005611 	.word	0x08005611
 80055ac:	08005611 	.word	0x08005611
 80055b0:	08005611 	.word	0x08005611
 80055b4:	080055e7 	.word	0x080055e7
 80055b8:	08005611 	.word	0x08005611
 80055bc:	08005611 	.word	0x08005611
 80055c0:	08005611 	.word	0x08005611
 80055c4:	080055f5 	.word	0x080055f5
 80055c8:	08005611 	.word	0x08005611
 80055cc:	08005611 	.word	0x08005611
 80055d0:	08005611 	.word	0x08005611
 80055d4:	08005603 	.word	0x08005603
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fa70 	bl	8005ac4 <TIM_OC1_SetConfig>
      break;
 80055e4:	e015      	b.n	8005612 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fad9 	bl	8005ba4 <TIM_OC2_SetConfig>
      break;
 80055f2:	e00e      	b.n	8005612 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fb48 	bl	8005c90 <TIM_OC3_SetConfig>
      break;
 8005600:	e007      	b.n	8005612 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fbb5 	bl	8005d78 <TIM_OC4_SetConfig>
      break;
 800560e:	e000      	b.n	8005612 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005610:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005642:	2302      	movs	r3, #2
 8005644:	e08a      	b.n	800575c <HAL_TIM_IC_ConfigChannel+0x130>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2202      	movs	r2, #2
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11b      	bne.n	8005694 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f000 fbda 	bl	8005e24 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 020c 	bic.w	r2, r2, #12
 800567e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6999      	ldr	r1, [r3, #24]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	619a      	str	r2, [r3, #24]
 8005692:	e05a      	b.n	800574a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b04      	cmp	r3, #4
 8005698:	d11c      	bne.n	80056d4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	6819      	ldr	r1, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f000 fc5e 	bl	8005f6a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	699a      	ldr	r2, [r3, #24]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056bc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6999      	ldr	r1, [r3, #24]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	021a      	lsls	r2, r3, #8
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	619a      	str	r2, [r3, #24]
 80056d2:	e03a      	b.n	800574a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d11b      	bne.n	8005712 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6819      	ldr	r1, [r3, #0]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f000 fcab 	bl	8006044 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 020c 	bic.w	r2, r2, #12
 80056fc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69d9      	ldr	r1, [r3, #28]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	61da      	str	r2, [r3, #28]
 8005710:	e01b      	b.n	800574a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6819      	ldr	r1, [r3, #0]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f000 fccb 	bl	80060bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005734:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69d9      	ldr	r1, [r3, #28]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	021a      	lsls	r2, r3, #8
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_TIM_ConfigClockSource+0x18>
 8005778:	2302      	movs	r3, #2
 800577a:	e0a6      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x166>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800579a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d067      	beq.n	8005884 <HAL_TIM_ConfigClockSource+0x120>
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d80b      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x6c>
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d073      	beq.n	80058a4 <HAL_TIM_ConfigClockSource+0x140>
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d802      	bhi.n	80057c6 <HAL_TIM_ConfigClockSource+0x62>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d06f      	beq.n	80058a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80057c4:	e078      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d06c      	beq.n	80058a4 <HAL_TIM_ConfigClockSource+0x140>
 80057ca:	2b30      	cmp	r3, #48	; 0x30
 80057cc:	d06a      	beq.n	80058a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80057ce:	e073      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057d0:	2b70      	cmp	r3, #112	; 0x70
 80057d2:	d00d      	beq.n	80057f0 <HAL_TIM_ConfigClockSource+0x8c>
 80057d4:	2b70      	cmp	r3, #112	; 0x70
 80057d6:	d804      	bhi.n	80057e2 <HAL_TIM_ConfigClockSource+0x7e>
 80057d8:	2b50      	cmp	r3, #80	; 0x50
 80057da:	d033      	beq.n	8005844 <HAL_TIM_ConfigClockSource+0xe0>
 80057dc:	2b60      	cmp	r3, #96	; 0x60
 80057de:	d041      	beq.n	8005864 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80057e0:	e06a      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	d066      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x152>
 80057e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ec:	d017      	beq.n	800581e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80057ee:	e063      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6818      	ldr	r0, [r3, #0]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	6899      	ldr	r1, [r3, #8]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f000 fcb4 	bl	800616c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005812:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	609a      	str	r2, [r3, #8]
      break;
 800581c:	e04c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6899      	ldr	r1, [r3, #8]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f000 fc9d 	bl	800616c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005840:	609a      	str	r2, [r3, #8]
      break;
 8005842:	e039      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	6859      	ldr	r1, [r3, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	461a      	mov	r2, r3
 8005852:	f000 fb5b 	bl	8005f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2150      	movs	r1, #80	; 0x50
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fc6a 	bl	8006136 <TIM_ITRx_SetConfig>
      break;
 8005862:	e029      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	6859      	ldr	r1, [r3, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	461a      	mov	r2, r3
 8005872:	f000 fbb7 	bl	8005fe4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2160      	movs	r1, #96	; 0x60
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fc5a 	bl	8006136 <TIM_ITRx_SetConfig>
      break;
 8005882:	e019      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	6859      	ldr	r1, [r3, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	461a      	mov	r2, r3
 8005892:	f000 fb3b 	bl	8005f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2140      	movs	r1, #64	; 0x40
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fc4a 	bl	8006136 <TIM_ITRx_SetConfig>
      break;
 80058a2:	e009      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4619      	mov	r1, r3
 80058ae:	4610      	mov	r0, r2
 80058b0:	f000 fc41 	bl	8006136 <TIM_ITRx_SetConfig>
      break;
 80058b4:	e000      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80058b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b0c      	cmp	r3, #12
 80058e6:	d831      	bhi.n	800594c <HAL_TIM_ReadCapturedValue+0x78>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005925 	.word	0x08005925
 80058f4:	0800594d 	.word	0x0800594d
 80058f8:	0800594d 	.word	0x0800594d
 80058fc:	0800594d 	.word	0x0800594d
 8005900:	0800592f 	.word	0x0800592f
 8005904:	0800594d 	.word	0x0800594d
 8005908:	0800594d 	.word	0x0800594d
 800590c:	0800594d 	.word	0x0800594d
 8005910:	08005939 	.word	0x08005939
 8005914:	0800594d 	.word	0x0800594d
 8005918:	0800594d 	.word	0x0800594d
 800591c:	0800594d 	.word	0x0800594d
 8005920:	08005943 	.word	0x08005943
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592a:	60fb      	str	r3, [r7, #12]

      break;
 800592c:	e00f      	b.n	800594e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	60fb      	str	r3, [r7, #12]

      break;
 8005936:	e00a      	b.n	800594e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593e:	60fb      	str	r3, [r7, #12]

      break;
 8005940:	e005      	b.n	800594e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	60fb      	str	r3, [r7, #12]

      break;
 800594a:	e000      	b.n	800594e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800594c:	bf00      	nop
  }

  return tmpreg;
 800594e:	68fb      	ldr	r3, [r7, #12]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a40      	ldr	r2, [pc, #256]	; (8005a98 <TIM_Base_SetConfig+0x114>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d013      	beq.n	80059c4 <TIM_Base_SetConfig+0x40>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a2:	d00f      	beq.n	80059c4 <TIM_Base_SetConfig+0x40>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a3d      	ldr	r2, [pc, #244]	; (8005a9c <TIM_Base_SetConfig+0x118>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00b      	beq.n	80059c4 <TIM_Base_SetConfig+0x40>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a3c      	ldr	r2, [pc, #240]	; (8005aa0 <TIM_Base_SetConfig+0x11c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d007      	beq.n	80059c4 <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a3b      	ldr	r2, [pc, #236]	; (8005aa4 <TIM_Base_SetConfig+0x120>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a3a      	ldr	r2, [pc, #232]	; (8005aa8 <TIM_Base_SetConfig+0x124>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d108      	bne.n	80059d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2f      	ldr	r2, [pc, #188]	; (8005a98 <TIM_Base_SetConfig+0x114>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d02b      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e4:	d027      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2c      	ldr	r2, [pc, #176]	; (8005a9c <TIM_Base_SetConfig+0x118>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d023      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2b      	ldr	r2, [pc, #172]	; (8005aa0 <TIM_Base_SetConfig+0x11c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01f      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2a      	ldr	r2, [pc, #168]	; (8005aa4 <TIM_Base_SetConfig+0x120>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d01b      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a29      	ldr	r2, [pc, #164]	; (8005aa8 <TIM_Base_SetConfig+0x124>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d017      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a28      	ldr	r2, [pc, #160]	; (8005aac <TIM_Base_SetConfig+0x128>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d013      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a27      	ldr	r2, [pc, #156]	; (8005ab0 <TIM_Base_SetConfig+0x12c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00f      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a26      	ldr	r2, [pc, #152]	; (8005ab4 <TIM_Base_SetConfig+0x130>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00b      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <TIM_Base_SetConfig+0x134>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d007      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a24      	ldr	r2, [pc, #144]	; (8005abc <TIM_Base_SetConfig+0x138>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d003      	beq.n	8005a36 <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a23      	ldr	r2, [pc, #140]	; (8005ac0 <TIM_Base_SetConfig+0x13c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d108      	bne.n	8005a48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a0a      	ldr	r2, [pc, #40]	; (8005a98 <TIM_Base_SetConfig+0x114>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_Base_SetConfig+0xf8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a0c      	ldr	r2, [pc, #48]	; (8005aa8 <TIM_Base_SetConfig+0x124>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d103      	bne.n	8005a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	615a      	str	r2, [r3, #20]
}
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40000c00 	.word	0x40000c00
 8005aa8:	40010400 	.word	0x40010400
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40014400 	.word	0x40014400
 8005ab4:	40014800 	.word	0x40014800
 8005ab8:	40001800 	.word	0x40001800
 8005abc:	40001c00 	.word	0x40001c00
 8005ac0:	40002000 	.word	0x40002000

08005ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f023 0201 	bic.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0303 	bic.w	r3, r3, #3
 8005afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f023 0302 	bic.w	r3, r3, #2
 8005b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a20      	ldr	r2, [pc, #128]	; (8005b9c <TIM_OC1_SetConfig+0xd8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_OC1_SetConfig+0x64>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a1f      	ldr	r2, [pc, #124]	; (8005ba0 <TIM_OC1_SetConfig+0xdc>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d10c      	bne.n	8005b42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0308 	bic.w	r3, r3, #8
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f023 0304 	bic.w	r3, r3, #4
 8005b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <TIM_OC1_SetConfig+0xd8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d003      	beq.n	8005b52 <TIM_OC1_SetConfig+0x8e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <TIM_OC1_SetConfig+0xdc>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d111      	bne.n	8005b76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	621a      	str	r2, [r3, #32]
}
 8005b90:	bf00      	nop
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	40010000 	.word	0x40010000
 8005ba0:	40010400 	.word	0x40010400

08005ba4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f023 0210 	bic.w	r2, r3, #16
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0320 	bic.w	r3, r3, #32
 8005bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a22      	ldr	r2, [pc, #136]	; (8005c88 <TIM_OC2_SetConfig+0xe4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_OC2_SetConfig+0x68>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <TIM_OC2_SetConfig+0xe8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d10d      	bne.n	8005c28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <TIM_OC2_SetConfig+0xe4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_OC2_SetConfig+0x94>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC2_SetConfig+0xe8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d113      	bne.n	8005c60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	621a      	str	r2, [r3, #32]
}
 8005c7a:	bf00      	nop
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40010400 	.word	0x40010400

08005c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a21      	ldr	r2, [pc, #132]	; (8005d70 <TIM_OC3_SetConfig+0xe0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_OC3_SetConfig+0x66>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a20      	ldr	r2, [pc, #128]	; (8005d74 <TIM_OC3_SetConfig+0xe4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d10d      	bne.n	8005d12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a16      	ldr	r2, [pc, #88]	; (8005d70 <TIM_OC3_SetConfig+0xe0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d003      	beq.n	8005d22 <TIM_OC3_SetConfig+0x92>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <TIM_OC3_SetConfig+0xe4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d113      	bne.n	8005d4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	011b      	lsls	r3, r3, #4
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	621a      	str	r2, [r3, #32]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40010400 	.word	0x40010400

08005d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	031b      	lsls	r3, r3, #12
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a12      	ldr	r2, [pc, #72]	; (8005e1c <TIM_OC4_SetConfig+0xa4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <TIM_OC4_SetConfig+0x68>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a11      	ldr	r2, [pc, #68]	; (8005e20 <TIM_OC4_SetConfig+0xa8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d109      	bne.n	8005df4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005de6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	019b      	lsls	r3, r3, #6
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	621a      	str	r2, [r3, #32]
}
 8005e0e:	bf00      	nop
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400

08005e24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f023 0201 	bic.w	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4a28      	ldr	r2, [pc, #160]	; (8005ef0 <TIM_TI1_SetConfig+0xcc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d01b      	beq.n	8005e8a <TIM_TI1_SetConfig+0x66>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e58:	d017      	beq.n	8005e8a <TIM_TI1_SetConfig+0x66>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a25      	ldr	r2, [pc, #148]	; (8005ef4 <TIM_TI1_SetConfig+0xd0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <TIM_TI1_SetConfig+0x66>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a24      	ldr	r2, [pc, #144]	; (8005ef8 <TIM_TI1_SetConfig+0xd4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00f      	beq.n	8005e8a <TIM_TI1_SetConfig+0x66>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4a23      	ldr	r2, [pc, #140]	; (8005efc <TIM_TI1_SetConfig+0xd8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00b      	beq.n	8005e8a <TIM_TI1_SetConfig+0x66>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <TIM_TI1_SetConfig+0xdc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d007      	beq.n	8005e8a <TIM_TI1_SetConfig+0x66>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4a21      	ldr	r2, [pc, #132]	; (8005f04 <TIM_TI1_SetConfig+0xe0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d003      	beq.n	8005e8a <TIM_TI1_SetConfig+0x66>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a20      	ldr	r2, [pc, #128]	; (8005f08 <TIM_TI1_SetConfig+0xe4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d101      	bne.n	8005e8e <TIM_TI1_SetConfig+0x6a>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <TIM_TI1_SetConfig+0x6c>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d008      	beq.n	8005ea6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f023 0303 	bic.w	r3, r3, #3
 8005e9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	e003      	b.n	8005eae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f043 0301 	orr.w	r3, r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f023 030a 	bic.w	r3, r3, #10
 8005ec8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f003 030a 	and.w	r3, r3, #10
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40001800 	.word	0x40001800

08005f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	f023 0201 	bic.w	r2, r3, #1
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f023 030a 	bic.w	r3, r3, #10
 8005f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	621a      	str	r2, [r3, #32]
}
 8005f5e:	bf00      	nop
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b087      	sub	sp, #28
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
 8005f76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	f023 0210 	bic.w	r2, r3, #16
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	031b      	lsls	r3, r3, #12
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	621a      	str	r2, [r3, #32]
}
 8005fd8:	bf00      	nop
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f023 0210 	bic.w	r2, r3, #16
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800600e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	031b      	lsls	r3, r3, #12
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006020:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	621a      	str	r2, [r3, #32]
}
 8006038:	bf00      	nop
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f023 0303 	bic.w	r3, r3, #3
 8006070:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006080:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	b2db      	uxtb	r3, r3
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006094:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	621a      	str	r2, [r3, #32]
}
 80060b0:	bf00      	nop
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	031b      	lsls	r3, r3, #12
 8006100:	b29b      	uxth	r3, r3
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800610e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	031b      	lsls	r3, r3, #12
 8006114:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	f043 0307 	orr.w	r3, r3, #7
 8006158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	609a      	str	r2, [r3, #8]
}
 8006160:	bf00      	nop
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	021a      	lsls	r2, r3, #8
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	431a      	orrs	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4313      	orrs	r3, r2
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	609a      	str	r2, [r3, #8]
}
 80061a0:	bf00      	nop
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	2201      	movs	r2, #1
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a1a      	ldr	r2, [r3, #32]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	43db      	mvns	r3, r3
 80061ce:	401a      	ands	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1a      	ldr	r2, [r3, #32]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	fa01 f303 	lsl.w	r3, r1, r3
 80061e4:	431a      	orrs	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	621a      	str	r2, [r3, #32]
}
 80061ea:	bf00      	nop
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
	...

080061f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800620c:	2302      	movs	r3, #2
 800620e:	e05a      	b.n	80062c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a21      	ldr	r2, [pc, #132]	; (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d022      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625c:	d01d      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a1d      	ldr	r2, [pc, #116]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d018      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1b      	ldr	r2, [pc, #108]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1a      	ldr	r2, [pc, #104]	; (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a18      	ldr	r2, [pc, #96]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a17      	ldr	r2, [pc, #92]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a15      	ldr	r2, [pc, #84]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d10c      	bne.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40000800 	.word	0x40000800
 80062e0:	40000c00 	.word	0x40000c00
 80062e4:	40010400 	.word	0x40010400
 80062e8:	40014000 	.word	0x40014000
 80062ec:	40001800 	.word	0x40001800

080062f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e03f      	b.n	80063aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fc ff32 	bl	80031a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2224      	movs	r2, #36	; 0x24
 8006348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800635a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fb97 	bl	8006a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695a      	ldr	r2, [r3, #20]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b088      	sub	sp, #32
 80063b6:	af02      	add	r7, sp, #8
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	603b      	str	r3, [r7, #0]
 80063be:	4613      	mov	r3, r2
 80063c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	f040 8083 	bne.w	80064da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_UART_Transmit+0x2e>
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e07b      	b.n	80064dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Transmit+0x40>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e074      	b.n	80064dc <HAL_UART_Transmit+0x12a>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2221      	movs	r2, #33	; 0x21
 8006404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006408:	f7fd f862 	bl	80034d0 <HAL_GetTick>
 800640c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	88fa      	ldrh	r2, [r7, #6]
 8006412:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	88fa      	ldrh	r2, [r7, #6]
 8006418:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006422:	e042      	b.n	80064aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643a:	d122      	bne.n	8006482 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2200      	movs	r2, #0
 8006444:	2180      	movs	r1, #128	; 0x80
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f9b6 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e042      	b.n	80064dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006468:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	3302      	adds	r3, #2
 8006476:	60bb      	str	r3, [r7, #8]
 8006478:	e017      	b.n	80064aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	3301      	adds	r3, #1
 800647e:	60bb      	str	r3, [r7, #8]
 8006480:	e013      	b.n	80064aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2200      	movs	r2, #0
 800648a:	2180      	movs	r1, #128	; 0x80
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f993 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e01f      	b.n	80064dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	60ba      	str	r2, [r7, #8]
 80064a2:	781a      	ldrb	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1b7      	bne.n	8006424 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2200      	movs	r2, #0
 80064bc:	2140      	movs	r1, #64	; 0x40
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f97a 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e006      	b.n	80064dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	e000      	b.n	80064dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80064da:	2302      	movs	r3, #2
  }
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d140      	bne.n	8006580 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_UART_Receive_IT+0x26>
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e039      	b.n	8006582 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_UART_Receive_IT+0x38>
 8006518:	2302      	movs	r3, #2
 800651a:	e032      	b.n	8006582 <HAL_UART_Receive_IT+0x9e>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	88fa      	ldrh	r2, [r7, #6]
 800652e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2222      	movs	r2, #34	; 0x22
 8006540:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800655a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695a      	ldr	r2, [r3, #20]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0220 	orr.w	r2, r2, #32
 800657a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	e000      	b.n	8006582 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006580:	2302      	movs	r3, #2
  }
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
	...

08006590 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10d      	bne.n	80065e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <HAL_UART_IRQHandler+0x52>
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f9d6 	bl	800698c <UART_Receive_IT>
      return;
 80065e0:	e0d1      	b.n	8006786 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 80b0 	beq.w	800674a <HAL_UART_IRQHandler+0x1ba>
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <HAL_UART_IRQHandler+0x70>
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80a5 	beq.w	800674a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <HAL_UART_IRQHandler+0x90>
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006618:	f043 0201 	orr.w	r2, r3, #1
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <HAL_UART_IRQHandler+0xb0>
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006638:	f043 0202 	orr.w	r2, r3, #2
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <HAL_UART_IRQHandler+0xd0>
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d005      	beq.n	8006660 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006658:	f043 0204 	orr.w	r2, r3, #4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00f      	beq.n	800668a <HAL_UART_IRQHandler+0xfa>
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <HAL_UART_IRQHandler+0xee>
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006682:	f043 0208 	orr.w	r2, r3, #8
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d078      	beq.n	8006784 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d007      	beq.n	80066ac <HAL_UART_IRQHandler+0x11c>
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f970 	bl	800698c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	bf0c      	ite	eq
 80066ba:	2301      	moveq	r3, #1
 80066bc:	2300      	movne	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d102      	bne.n	80066d4 <HAL_UART_IRQHandler+0x144>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d031      	beq.n	8006738 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f8b9 	bl	800684c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	d123      	bne.n	8006730 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695a      	ldr	r2, [r3, #20]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d013      	beq.n	8006728 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	4a21      	ldr	r2, [pc, #132]	; (800678c <HAL_UART_IRQHandler+0x1fc>)
 8006706:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670c:	4618      	mov	r0, r3
 800670e:	f7fd f9cb 	bl	8003aa8 <HAL_DMA_Abort_IT>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d016      	beq.n	8006746 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006722:	4610      	mov	r0, r2
 8006724:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006726:	e00e      	b.n	8006746 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f83b 	bl	80067a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672e:	e00a      	b.n	8006746 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f837 	bl	80067a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006736:	e006      	b.n	8006746 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f833 	bl	80067a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006744:	e01e      	b.n	8006784 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006746:	bf00      	nop
    return;
 8006748:	e01c      	b.n	8006784 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006750:	2b00      	cmp	r3, #0
 8006752:	d008      	beq.n	8006766 <HAL_UART_IRQHandler+0x1d6>
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f8a6 	bl	80068b0 <UART_Transmit_IT>
    return;
 8006764:	e00f      	b.n	8006786 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <HAL_UART_IRQHandler+0x1f6>
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f8ee 	bl	800695c <UART_EndTransmit_IT>
    return;
 8006780:	bf00      	nop
 8006782:	e000      	b.n	8006786 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006784:	bf00      	nop
  }
}
 8006786:	3720      	adds	r7, #32
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	08006889 	.word	0x08006889

08006790 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	4613      	mov	r3, r2
 80067c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c8:	e02c      	b.n	8006824 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d028      	beq.n	8006824 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067d8:	f7fc fe7a 	bl	80034d0 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d21d      	bcs.n	8006824 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695a      	ldr	r2, [r3, #20]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0201 	bic.w	r2, r2, #1
 8006806:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e00f      	b.n	8006844 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	4013      	ands	r3, r2
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	429a      	cmp	r2, r3
 8006832:	bf0c      	ite	eq
 8006834:	2301      	moveq	r3, #1
 8006836:	2300      	movne	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	461a      	mov	r2, r3
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	429a      	cmp	r2, r3
 8006840:	d0c3      	beq.n	80067ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006862:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7ff ff7e 	bl	80067a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a8:	bf00      	nop
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b21      	cmp	r3, #33	; 0x21
 80068c2:	d144      	bne.n	800694e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068cc:	d11a      	bne.n	8006904 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d105      	bne.n	80068f8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	1c9a      	adds	r2, r3, #2
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	621a      	str	r2, [r3, #32]
 80068f6:	e00e      	b.n	8006916 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	621a      	str	r2, [r3, #32]
 8006902:	e008      	b.n	8006916 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	1c59      	adds	r1, r3, #1
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6211      	str	r1, [r2, #32]
 800690e:	781a      	ldrb	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29b      	uxth	r3, r3
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	4619      	mov	r1, r3
 8006924:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10f      	bne.n	800694a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006938:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006948:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	e000      	b.n	8006950 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800694e:	2302      	movs	r3, #2
  }
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006972:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff ff07 	bl	8006790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b22      	cmp	r3, #34	; 0x22
 800699e:	d171      	bne.n	8006a84 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a8:	d123      	bne.n	80069f2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10e      	bne.n	80069d6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	1c9a      	adds	r2, r3, #2
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	629a      	str	r2, [r3, #40]	; 0x28
 80069d4:	e029      	b.n	8006a2a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28
 80069f0:	e01b      	b.n	8006a2a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6858      	ldr	r0, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	1c59      	adds	r1, r3, #1
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6291      	str	r1, [r2, #40]	; 0x28
 8006a0a:	b2c2      	uxtb	r2, r0
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	e00c      	b.n	8006a2a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1c:	1c58      	adds	r0, r3, #1
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	6288      	str	r0, [r1, #40]	; 0x28
 8006a22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	4619      	mov	r1, r3
 8006a38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d120      	bne.n	8006a80 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0220 	bic.w	r2, r2, #32
 8006a4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695a      	ldr	r2, [r3, #20]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0201 	bic.w	r2, r2, #1
 8006a6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fc f9f2 	bl	8002e60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e002      	b.n	8006a86 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	e000      	b.n	8006a86 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006a84:	2302      	movs	r3, #2
  }
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006ad2:	f023 030c 	bic.w	r3, r3, #12
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	430b      	orrs	r3, r1
 8006ade:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006afe:	f040 818b 	bne.w	8006e18 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4ac1      	ldr	r2, [pc, #772]	; (8006e0c <UART_SetConfig+0x37c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d005      	beq.n	8006b18 <UART_SetConfig+0x88>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4abf      	ldr	r2, [pc, #764]	; (8006e10 <UART_SetConfig+0x380>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	f040 80bd 	bne.w	8006c92 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b18:	f7fd fd12 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
 8006b1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	461d      	mov	r5, r3
 8006b22:	f04f 0600 	mov.w	r6, #0
 8006b26:	46a8      	mov	r8, r5
 8006b28:	46b1      	mov	r9, r6
 8006b2a:	eb18 0308 	adds.w	r3, r8, r8
 8006b2e:	eb49 0409 	adc.w	r4, r9, r9
 8006b32:	4698      	mov	r8, r3
 8006b34:	46a1      	mov	r9, r4
 8006b36:	eb18 0805 	adds.w	r8, r8, r5
 8006b3a:	eb49 0906 	adc.w	r9, r9, r6
 8006b3e:	f04f 0100 	mov.w	r1, #0
 8006b42:	f04f 0200 	mov.w	r2, #0
 8006b46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b52:	4688      	mov	r8, r1
 8006b54:	4691      	mov	r9, r2
 8006b56:	eb18 0005 	adds.w	r0, r8, r5
 8006b5a:	eb49 0106 	adc.w	r1, r9, r6
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	461d      	mov	r5, r3
 8006b64:	f04f 0600 	mov.w	r6, #0
 8006b68:	196b      	adds	r3, r5, r5
 8006b6a:	eb46 0406 	adc.w	r4, r6, r6
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4623      	mov	r3, r4
 8006b72:	f7f9 fba5 	bl	80002c0 <__aeabi_uldivmod>
 8006b76:	4603      	mov	r3, r0
 8006b78:	460c      	mov	r4, r1
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4ba5      	ldr	r3, [pc, #660]	; (8006e14 <UART_SetConfig+0x384>)
 8006b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	f04f 0600 	mov.w	r6, #0
 8006b90:	46a9      	mov	r9, r5
 8006b92:	46b2      	mov	sl, r6
 8006b94:	eb19 0309 	adds.w	r3, r9, r9
 8006b98:	eb4a 040a 	adc.w	r4, sl, sl
 8006b9c:	4699      	mov	r9, r3
 8006b9e:	46a2      	mov	sl, r4
 8006ba0:	eb19 0905 	adds.w	r9, r9, r5
 8006ba4:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bbc:	4689      	mov	r9, r1
 8006bbe:	4692      	mov	sl, r2
 8006bc0:	eb19 0005 	adds.w	r0, r9, r5
 8006bc4:	eb4a 0106 	adc.w	r1, sl, r6
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	461d      	mov	r5, r3
 8006bce:	f04f 0600 	mov.w	r6, #0
 8006bd2:	196b      	adds	r3, r5, r5
 8006bd4:	eb46 0406 	adc.w	r4, r6, r6
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4623      	mov	r3, r4
 8006bdc:	f7f9 fb70 	bl	80002c0 <__aeabi_uldivmod>
 8006be0:	4603      	mov	r3, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	461a      	mov	r2, r3
 8006be6:	4b8b      	ldr	r3, [pc, #556]	; (8006e14 <UART_SetConfig+0x384>)
 8006be8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bec:	095b      	lsrs	r3, r3, #5
 8006bee:	2164      	movs	r1, #100	; 0x64
 8006bf0:	fb01 f303 	mul.w	r3, r1, r3
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	3332      	adds	r3, #50	; 0x32
 8006bfa:	4a86      	ldr	r2, [pc, #536]	; (8006e14 <UART_SetConfig+0x384>)
 8006bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006c00:	095b      	lsrs	r3, r3, #5
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c08:	4498      	add	r8, r3
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	461d      	mov	r5, r3
 8006c0e:	f04f 0600 	mov.w	r6, #0
 8006c12:	46a9      	mov	r9, r5
 8006c14:	46b2      	mov	sl, r6
 8006c16:	eb19 0309 	adds.w	r3, r9, r9
 8006c1a:	eb4a 040a 	adc.w	r4, sl, sl
 8006c1e:	4699      	mov	r9, r3
 8006c20:	46a2      	mov	sl, r4
 8006c22:	eb19 0905 	adds.w	r9, r9, r5
 8006c26:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c2a:	f04f 0100 	mov.w	r1, #0
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c3e:	4689      	mov	r9, r1
 8006c40:	4692      	mov	sl, r2
 8006c42:	eb19 0005 	adds.w	r0, r9, r5
 8006c46:	eb4a 0106 	adc.w	r1, sl, r6
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	461d      	mov	r5, r3
 8006c50:	f04f 0600 	mov.w	r6, #0
 8006c54:	196b      	adds	r3, r5, r5
 8006c56:	eb46 0406 	adc.w	r4, r6, r6
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4623      	mov	r3, r4
 8006c5e:	f7f9 fb2f 	bl	80002c0 <__aeabi_uldivmod>
 8006c62:	4603      	mov	r3, r0
 8006c64:	460c      	mov	r4, r1
 8006c66:	461a      	mov	r2, r3
 8006c68:	4b6a      	ldr	r3, [pc, #424]	; (8006e14 <UART_SetConfig+0x384>)
 8006c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	2164      	movs	r1, #100	; 0x64
 8006c72:	fb01 f303 	mul.w	r3, r1, r3
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	3332      	adds	r3, #50	; 0x32
 8006c7c:	4a65      	ldr	r2, [pc, #404]	; (8006e14 <UART_SetConfig+0x384>)
 8006c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	f003 0207 	and.w	r2, r3, #7
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4442      	add	r2, r8
 8006c8e:	609a      	str	r2, [r3, #8]
 8006c90:	e26f      	b.n	8007172 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c92:	f7fd fc41 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 8006c96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	461d      	mov	r5, r3
 8006c9c:	f04f 0600 	mov.w	r6, #0
 8006ca0:	46a8      	mov	r8, r5
 8006ca2:	46b1      	mov	r9, r6
 8006ca4:	eb18 0308 	adds.w	r3, r8, r8
 8006ca8:	eb49 0409 	adc.w	r4, r9, r9
 8006cac:	4698      	mov	r8, r3
 8006cae:	46a1      	mov	r9, r4
 8006cb0:	eb18 0805 	adds.w	r8, r8, r5
 8006cb4:	eb49 0906 	adc.w	r9, r9, r6
 8006cb8:	f04f 0100 	mov.w	r1, #0
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ccc:	4688      	mov	r8, r1
 8006cce:	4691      	mov	r9, r2
 8006cd0:	eb18 0005 	adds.w	r0, r8, r5
 8006cd4:	eb49 0106 	adc.w	r1, r9, r6
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	461d      	mov	r5, r3
 8006cde:	f04f 0600 	mov.w	r6, #0
 8006ce2:	196b      	adds	r3, r5, r5
 8006ce4:	eb46 0406 	adc.w	r4, r6, r6
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4623      	mov	r3, r4
 8006cec:	f7f9 fae8 	bl	80002c0 <__aeabi_uldivmod>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	4b47      	ldr	r3, [pc, #284]	; (8006e14 <UART_SetConfig+0x384>)
 8006cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8006cfc:	095b      	lsrs	r3, r3, #5
 8006cfe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	461d      	mov	r5, r3
 8006d06:	f04f 0600 	mov.w	r6, #0
 8006d0a:	46a9      	mov	r9, r5
 8006d0c:	46b2      	mov	sl, r6
 8006d0e:	eb19 0309 	adds.w	r3, r9, r9
 8006d12:	eb4a 040a 	adc.w	r4, sl, sl
 8006d16:	4699      	mov	r9, r3
 8006d18:	46a2      	mov	sl, r4
 8006d1a:	eb19 0905 	adds.w	r9, r9, r5
 8006d1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d22:	f04f 0100 	mov.w	r1, #0
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d36:	4689      	mov	r9, r1
 8006d38:	4692      	mov	sl, r2
 8006d3a:	eb19 0005 	adds.w	r0, r9, r5
 8006d3e:	eb4a 0106 	adc.w	r1, sl, r6
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	461d      	mov	r5, r3
 8006d48:	f04f 0600 	mov.w	r6, #0
 8006d4c:	196b      	adds	r3, r5, r5
 8006d4e:	eb46 0406 	adc.w	r4, r6, r6
 8006d52:	461a      	mov	r2, r3
 8006d54:	4623      	mov	r3, r4
 8006d56:	f7f9 fab3 	bl	80002c0 <__aeabi_uldivmod>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	461a      	mov	r2, r3
 8006d60:	4b2c      	ldr	r3, [pc, #176]	; (8006e14 <UART_SetConfig+0x384>)
 8006d62:	fba3 1302 	umull	r1, r3, r3, r2
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	2164      	movs	r1, #100	; 0x64
 8006d6a:	fb01 f303 	mul.w	r3, r1, r3
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	3332      	adds	r3, #50	; 0x32
 8006d74:	4a27      	ldr	r2, [pc, #156]	; (8006e14 <UART_SetConfig+0x384>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d82:	4498      	add	r8, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	461d      	mov	r5, r3
 8006d88:	f04f 0600 	mov.w	r6, #0
 8006d8c:	46a9      	mov	r9, r5
 8006d8e:	46b2      	mov	sl, r6
 8006d90:	eb19 0309 	adds.w	r3, r9, r9
 8006d94:	eb4a 040a 	adc.w	r4, sl, sl
 8006d98:	4699      	mov	r9, r3
 8006d9a:	46a2      	mov	sl, r4
 8006d9c:	eb19 0905 	adds.w	r9, r9, r5
 8006da0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006da4:	f04f 0100 	mov.w	r1, #0
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006db0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006db4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006db8:	4689      	mov	r9, r1
 8006dba:	4692      	mov	sl, r2
 8006dbc:	eb19 0005 	adds.w	r0, r9, r5
 8006dc0:	eb4a 0106 	adc.w	r1, sl, r6
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	461d      	mov	r5, r3
 8006dca:	f04f 0600 	mov.w	r6, #0
 8006dce:	196b      	adds	r3, r5, r5
 8006dd0:	eb46 0406 	adc.w	r4, r6, r6
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	4623      	mov	r3, r4
 8006dd8:	f7f9 fa72 	bl	80002c0 <__aeabi_uldivmod>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	461a      	mov	r2, r3
 8006de2:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <UART_SetConfig+0x384>)
 8006de4:	fba3 1302 	umull	r1, r3, r3, r2
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	2164      	movs	r1, #100	; 0x64
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	3332      	adds	r3, #50	; 0x32
 8006df6:	4a07      	ldr	r2, [pc, #28]	; (8006e14 <UART_SetConfig+0x384>)
 8006df8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	f003 0207 	and.w	r2, r3, #7
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4442      	add	r2, r8
 8006e08:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006e0a:	e1b2      	b.n	8007172 <UART_SetConfig+0x6e2>
 8006e0c:	40011000 	.word	0x40011000
 8006e10:	40011400 	.word	0x40011400
 8006e14:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4ad7      	ldr	r2, [pc, #860]	; (800717c <UART_SetConfig+0x6ec>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d005      	beq.n	8006e2e <UART_SetConfig+0x39e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4ad6      	ldr	r2, [pc, #856]	; (8007180 <UART_SetConfig+0x6f0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	f040 80d1 	bne.w	8006fd0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e2e:	f7fd fb87 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
 8006e32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	469a      	mov	sl, r3
 8006e38:	f04f 0b00 	mov.w	fp, #0
 8006e3c:	46d0      	mov	r8, sl
 8006e3e:	46d9      	mov	r9, fp
 8006e40:	eb18 0308 	adds.w	r3, r8, r8
 8006e44:	eb49 0409 	adc.w	r4, r9, r9
 8006e48:	4698      	mov	r8, r3
 8006e4a:	46a1      	mov	r9, r4
 8006e4c:	eb18 080a 	adds.w	r8, r8, sl
 8006e50:	eb49 090b 	adc.w	r9, r9, fp
 8006e54:	f04f 0100 	mov.w	r1, #0
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e68:	4688      	mov	r8, r1
 8006e6a:	4691      	mov	r9, r2
 8006e6c:	eb1a 0508 	adds.w	r5, sl, r8
 8006e70:	eb4b 0609 	adc.w	r6, fp, r9
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	f04f 0400 	mov.w	r4, #0
 8006e86:	0094      	lsls	r4, r2, #2
 8006e88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e8c:	008b      	lsls	r3, r1, #2
 8006e8e:	461a      	mov	r2, r3
 8006e90:	4623      	mov	r3, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	4631      	mov	r1, r6
 8006e96:	f7f9 fa13 	bl	80002c0 <__aeabi_uldivmod>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	4bb8      	ldr	r3, [pc, #736]	; (8007184 <UART_SetConfig+0x6f4>)
 8006ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	469b      	mov	fp, r3
 8006eb0:	f04f 0c00 	mov.w	ip, #0
 8006eb4:	46d9      	mov	r9, fp
 8006eb6:	46e2      	mov	sl, ip
 8006eb8:	eb19 0309 	adds.w	r3, r9, r9
 8006ebc:	eb4a 040a 	adc.w	r4, sl, sl
 8006ec0:	4699      	mov	r9, r3
 8006ec2:	46a2      	mov	sl, r4
 8006ec4:	eb19 090b 	adds.w	r9, r9, fp
 8006ec8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ecc:	f04f 0100 	mov.w	r1, #0
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ed8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006edc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ee0:	4689      	mov	r9, r1
 8006ee2:	4692      	mov	sl, r2
 8006ee4:	eb1b 0509 	adds.w	r5, fp, r9
 8006ee8:	eb4c 060a 	adc.w	r6, ip, sl
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	f04f 0400 	mov.w	r4, #0
 8006efe:	0094      	lsls	r4, r2, #2
 8006f00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f04:	008b      	lsls	r3, r1, #2
 8006f06:	461a      	mov	r2, r3
 8006f08:	4623      	mov	r3, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	f7f9 f9d7 	bl	80002c0 <__aeabi_uldivmod>
 8006f12:	4603      	mov	r3, r0
 8006f14:	460c      	mov	r4, r1
 8006f16:	461a      	mov	r2, r3
 8006f18:	4b9a      	ldr	r3, [pc, #616]	; (8007184 <UART_SetConfig+0x6f4>)
 8006f1a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	2164      	movs	r1, #100	; 0x64
 8006f22:	fb01 f303 	mul.w	r3, r1, r3
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	3332      	adds	r3, #50	; 0x32
 8006f2c:	4a95      	ldr	r2, [pc, #596]	; (8007184 <UART_SetConfig+0x6f4>)
 8006f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f32:	095b      	lsrs	r3, r3, #5
 8006f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f38:	4498      	add	r8, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	469b      	mov	fp, r3
 8006f3e:	f04f 0c00 	mov.w	ip, #0
 8006f42:	46d9      	mov	r9, fp
 8006f44:	46e2      	mov	sl, ip
 8006f46:	eb19 0309 	adds.w	r3, r9, r9
 8006f4a:	eb4a 040a 	adc.w	r4, sl, sl
 8006f4e:	4699      	mov	r9, r3
 8006f50:	46a2      	mov	sl, r4
 8006f52:	eb19 090b 	adds.w	r9, r9, fp
 8006f56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f5a:	f04f 0100 	mov.w	r1, #0
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f6e:	4689      	mov	r9, r1
 8006f70:	4692      	mov	sl, r2
 8006f72:	eb1b 0509 	adds.w	r5, fp, r9
 8006f76:	eb4c 060a 	adc.w	r6, ip, sl
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	f04f 0400 	mov.w	r4, #0
 8006f8c:	0094      	lsls	r4, r2, #2
 8006f8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f92:	008b      	lsls	r3, r1, #2
 8006f94:	461a      	mov	r2, r3
 8006f96:	4623      	mov	r3, r4
 8006f98:	4628      	mov	r0, r5
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	f7f9 f990 	bl	80002c0 <__aeabi_uldivmod>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	4b77      	ldr	r3, [pc, #476]	; (8007184 <UART_SetConfig+0x6f4>)
 8006fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	2164      	movs	r1, #100	; 0x64
 8006fb0:	fb01 f303 	mul.w	r3, r1, r3
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	3332      	adds	r3, #50	; 0x32
 8006fba:	4a72      	ldr	r2, [pc, #456]	; (8007184 <UART_SetConfig+0x6f4>)
 8006fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	f003 020f 	and.w	r2, r3, #15
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4442      	add	r2, r8
 8006fcc:	609a      	str	r2, [r3, #8]
 8006fce:	e0d0      	b.n	8007172 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fd0:	f7fd faa2 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 8006fd4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	469a      	mov	sl, r3
 8006fda:	f04f 0b00 	mov.w	fp, #0
 8006fde:	46d0      	mov	r8, sl
 8006fe0:	46d9      	mov	r9, fp
 8006fe2:	eb18 0308 	adds.w	r3, r8, r8
 8006fe6:	eb49 0409 	adc.w	r4, r9, r9
 8006fea:	4698      	mov	r8, r3
 8006fec:	46a1      	mov	r9, r4
 8006fee:	eb18 080a 	adds.w	r8, r8, sl
 8006ff2:	eb49 090b 	adc.w	r9, r9, fp
 8006ff6:	f04f 0100 	mov.w	r1, #0
 8006ffa:	f04f 0200 	mov.w	r2, #0
 8006ffe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007002:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007006:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800700a:	4688      	mov	r8, r1
 800700c:	4691      	mov	r9, r2
 800700e:	eb1a 0508 	adds.w	r5, sl, r8
 8007012:	eb4b 0609 	adc.w	r6, fp, r9
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	4619      	mov	r1, r3
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	f04f 0400 	mov.w	r4, #0
 8007028:	0094      	lsls	r4, r2, #2
 800702a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800702e:	008b      	lsls	r3, r1, #2
 8007030:	461a      	mov	r2, r3
 8007032:	4623      	mov	r3, r4
 8007034:	4628      	mov	r0, r5
 8007036:	4631      	mov	r1, r6
 8007038:	f7f9 f942 	bl	80002c0 <__aeabi_uldivmod>
 800703c:	4603      	mov	r3, r0
 800703e:	460c      	mov	r4, r1
 8007040:	461a      	mov	r2, r3
 8007042:	4b50      	ldr	r3, [pc, #320]	; (8007184 <UART_SetConfig+0x6f4>)
 8007044:	fba3 2302 	umull	r2, r3, r3, r2
 8007048:	095b      	lsrs	r3, r3, #5
 800704a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	469b      	mov	fp, r3
 8007052:	f04f 0c00 	mov.w	ip, #0
 8007056:	46d9      	mov	r9, fp
 8007058:	46e2      	mov	sl, ip
 800705a:	eb19 0309 	adds.w	r3, r9, r9
 800705e:	eb4a 040a 	adc.w	r4, sl, sl
 8007062:	4699      	mov	r9, r3
 8007064:	46a2      	mov	sl, r4
 8007066:	eb19 090b 	adds.w	r9, r9, fp
 800706a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800706e:	f04f 0100 	mov.w	r1, #0
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800707a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800707e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007082:	4689      	mov	r9, r1
 8007084:	4692      	mov	sl, r2
 8007086:	eb1b 0509 	adds.w	r5, fp, r9
 800708a:	eb4c 060a 	adc.w	r6, ip, sl
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	4619      	mov	r1, r3
 8007094:	f04f 0200 	mov.w	r2, #0
 8007098:	f04f 0300 	mov.w	r3, #0
 800709c:	f04f 0400 	mov.w	r4, #0
 80070a0:	0094      	lsls	r4, r2, #2
 80070a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070a6:	008b      	lsls	r3, r1, #2
 80070a8:	461a      	mov	r2, r3
 80070aa:	4623      	mov	r3, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	4631      	mov	r1, r6
 80070b0:	f7f9 f906 	bl	80002c0 <__aeabi_uldivmod>
 80070b4:	4603      	mov	r3, r0
 80070b6:	460c      	mov	r4, r1
 80070b8:	461a      	mov	r2, r3
 80070ba:	4b32      	ldr	r3, [pc, #200]	; (8007184 <UART_SetConfig+0x6f4>)
 80070bc:	fba3 1302 	umull	r1, r3, r3, r2
 80070c0:	095b      	lsrs	r3, r3, #5
 80070c2:	2164      	movs	r1, #100	; 0x64
 80070c4:	fb01 f303 	mul.w	r3, r1, r3
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	3332      	adds	r3, #50	; 0x32
 80070ce:	4a2d      	ldr	r2, [pc, #180]	; (8007184 <UART_SetConfig+0x6f4>)
 80070d0:	fba2 2303 	umull	r2, r3, r2, r3
 80070d4:	095b      	lsrs	r3, r3, #5
 80070d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070da:	4498      	add	r8, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	469b      	mov	fp, r3
 80070e0:	f04f 0c00 	mov.w	ip, #0
 80070e4:	46d9      	mov	r9, fp
 80070e6:	46e2      	mov	sl, ip
 80070e8:	eb19 0309 	adds.w	r3, r9, r9
 80070ec:	eb4a 040a 	adc.w	r4, sl, sl
 80070f0:	4699      	mov	r9, r3
 80070f2:	46a2      	mov	sl, r4
 80070f4:	eb19 090b 	adds.w	r9, r9, fp
 80070f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070fc:	f04f 0100 	mov.w	r1, #0
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007108:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800710c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007110:	4689      	mov	r9, r1
 8007112:	4692      	mov	sl, r2
 8007114:	eb1b 0509 	adds.w	r5, fp, r9
 8007118:	eb4c 060a 	adc.w	r6, ip, sl
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	4619      	mov	r1, r3
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	f04f 0400 	mov.w	r4, #0
 800712e:	0094      	lsls	r4, r2, #2
 8007130:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007134:	008b      	lsls	r3, r1, #2
 8007136:	461a      	mov	r2, r3
 8007138:	4623      	mov	r3, r4
 800713a:	4628      	mov	r0, r5
 800713c:	4631      	mov	r1, r6
 800713e:	f7f9 f8bf 	bl	80002c0 <__aeabi_uldivmod>
 8007142:	4603      	mov	r3, r0
 8007144:	460c      	mov	r4, r1
 8007146:	461a      	mov	r2, r3
 8007148:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <UART_SetConfig+0x6f4>)
 800714a:	fba3 1302 	umull	r1, r3, r3, r2
 800714e:	095b      	lsrs	r3, r3, #5
 8007150:	2164      	movs	r1, #100	; 0x64
 8007152:	fb01 f303 	mul.w	r3, r1, r3
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	3332      	adds	r3, #50	; 0x32
 800715c:	4a09      	ldr	r2, [pc, #36]	; (8007184 <UART_SetConfig+0x6f4>)
 800715e:	fba2 2303 	umull	r2, r3, r2, r3
 8007162:	095b      	lsrs	r3, r3, #5
 8007164:	f003 020f 	and.w	r2, r3, #15
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4442      	add	r2, r8
 800716e:	609a      	str	r2, [r3, #8]
}
 8007170:	e7ff      	b.n	8007172 <UART_SetConfig+0x6e2>
 8007172:	bf00      	nop
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717c:	40011000 	.word	0x40011000
 8007180:	40011400 	.word	0x40011400
 8007184:	51eb851f 	.word	0x51eb851f

08007188 <__errno>:
 8007188:	4b01      	ldr	r3, [pc, #4]	; (8007190 <__errno+0x8>)
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20000020 	.word	0x20000020

08007194 <__libc_init_array>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	4e0d      	ldr	r6, [pc, #52]	; (80071cc <__libc_init_array+0x38>)
 8007198:	4c0d      	ldr	r4, [pc, #52]	; (80071d0 <__libc_init_array+0x3c>)
 800719a:	1ba4      	subs	r4, r4, r6
 800719c:	10a4      	asrs	r4, r4, #2
 800719e:	2500      	movs	r5, #0
 80071a0:	42a5      	cmp	r5, r4
 80071a2:	d109      	bne.n	80071b8 <__libc_init_array+0x24>
 80071a4:	4e0b      	ldr	r6, [pc, #44]	; (80071d4 <__libc_init_array+0x40>)
 80071a6:	4c0c      	ldr	r4, [pc, #48]	; (80071d8 <__libc_init_array+0x44>)
 80071a8:	f000 fc26 	bl	80079f8 <_init>
 80071ac:	1ba4      	subs	r4, r4, r6
 80071ae:	10a4      	asrs	r4, r4, #2
 80071b0:	2500      	movs	r5, #0
 80071b2:	42a5      	cmp	r5, r4
 80071b4:	d105      	bne.n	80071c2 <__libc_init_array+0x2e>
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071bc:	4798      	blx	r3
 80071be:	3501      	adds	r5, #1
 80071c0:	e7ee      	b.n	80071a0 <__libc_init_array+0xc>
 80071c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071c6:	4798      	blx	r3
 80071c8:	3501      	adds	r5, #1
 80071ca:	e7f2      	b.n	80071b2 <__libc_init_array+0x1e>
 80071cc:	080080b8 	.word	0x080080b8
 80071d0:	080080b8 	.word	0x080080b8
 80071d4:	080080b8 	.word	0x080080b8
 80071d8:	080080bc 	.word	0x080080bc

080071dc <memcpy>:
 80071dc:	b510      	push	{r4, lr}
 80071de:	1e43      	subs	r3, r0, #1
 80071e0:	440a      	add	r2, r1
 80071e2:	4291      	cmp	r1, r2
 80071e4:	d100      	bne.n	80071e8 <memcpy+0xc>
 80071e6:	bd10      	pop	{r4, pc}
 80071e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071f0:	e7f7      	b.n	80071e2 <memcpy+0x6>

080071f2 <memmove>:
 80071f2:	4288      	cmp	r0, r1
 80071f4:	b510      	push	{r4, lr}
 80071f6:	eb01 0302 	add.w	r3, r1, r2
 80071fa:	d807      	bhi.n	800720c <memmove+0x1a>
 80071fc:	1e42      	subs	r2, r0, #1
 80071fe:	4299      	cmp	r1, r3
 8007200:	d00a      	beq.n	8007218 <memmove+0x26>
 8007202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007206:	f802 4f01 	strb.w	r4, [r2, #1]!
 800720a:	e7f8      	b.n	80071fe <memmove+0xc>
 800720c:	4283      	cmp	r3, r0
 800720e:	d9f5      	bls.n	80071fc <memmove+0xa>
 8007210:	1881      	adds	r1, r0, r2
 8007212:	1ad2      	subs	r2, r2, r3
 8007214:	42d3      	cmn	r3, r2
 8007216:	d100      	bne.n	800721a <memmove+0x28>
 8007218:	bd10      	pop	{r4, pc}
 800721a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800721e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007222:	e7f7      	b.n	8007214 <memmove+0x22>

08007224 <memset>:
 8007224:	4402      	add	r2, r0
 8007226:	4603      	mov	r3, r0
 8007228:	4293      	cmp	r3, r2
 800722a:	d100      	bne.n	800722e <memset+0xa>
 800722c:	4770      	bx	lr
 800722e:	f803 1b01 	strb.w	r1, [r3], #1
 8007232:	e7f9      	b.n	8007228 <memset+0x4>

08007234 <siprintf>:
 8007234:	b40e      	push	{r1, r2, r3}
 8007236:	b500      	push	{lr}
 8007238:	b09c      	sub	sp, #112	; 0x70
 800723a:	ab1d      	add	r3, sp, #116	; 0x74
 800723c:	9002      	str	r0, [sp, #8]
 800723e:	9006      	str	r0, [sp, #24]
 8007240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007244:	4809      	ldr	r0, [pc, #36]	; (800726c <siprintf+0x38>)
 8007246:	9107      	str	r1, [sp, #28]
 8007248:	9104      	str	r1, [sp, #16]
 800724a:	4909      	ldr	r1, [pc, #36]	; (8007270 <siprintf+0x3c>)
 800724c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007250:	9105      	str	r1, [sp, #20]
 8007252:	6800      	ldr	r0, [r0, #0]
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	a902      	add	r1, sp, #8
 8007258:	f000 f866 	bl	8007328 <_svfiprintf_r>
 800725c:	9b02      	ldr	r3, [sp, #8]
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	b01c      	add	sp, #112	; 0x70
 8007264:	f85d eb04 	ldr.w	lr, [sp], #4
 8007268:	b003      	add	sp, #12
 800726a:	4770      	bx	lr
 800726c:	20000020 	.word	0x20000020
 8007270:	ffff0208 	.word	0xffff0208

08007274 <__ssputs_r>:
 8007274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	688e      	ldr	r6, [r1, #8]
 800727a:	429e      	cmp	r6, r3
 800727c:	4682      	mov	sl, r0
 800727e:	460c      	mov	r4, r1
 8007280:	4690      	mov	r8, r2
 8007282:	4699      	mov	r9, r3
 8007284:	d837      	bhi.n	80072f6 <__ssputs_r+0x82>
 8007286:	898a      	ldrh	r2, [r1, #12]
 8007288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800728c:	d031      	beq.n	80072f2 <__ssputs_r+0x7e>
 800728e:	6825      	ldr	r5, [r4, #0]
 8007290:	6909      	ldr	r1, [r1, #16]
 8007292:	1a6f      	subs	r7, r5, r1
 8007294:	6965      	ldr	r5, [r4, #20]
 8007296:	2302      	movs	r3, #2
 8007298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800729c:	fb95 f5f3 	sdiv	r5, r5, r3
 80072a0:	f109 0301 	add.w	r3, r9, #1
 80072a4:	443b      	add	r3, r7
 80072a6:	429d      	cmp	r5, r3
 80072a8:	bf38      	it	cc
 80072aa:	461d      	movcc	r5, r3
 80072ac:	0553      	lsls	r3, r2, #21
 80072ae:	d530      	bpl.n	8007312 <__ssputs_r+0x9e>
 80072b0:	4629      	mov	r1, r5
 80072b2:	f000 fb07 	bl	80078c4 <_malloc_r>
 80072b6:	4606      	mov	r6, r0
 80072b8:	b950      	cbnz	r0, 80072d0 <__ssputs_r+0x5c>
 80072ba:	230c      	movs	r3, #12
 80072bc:	f8ca 3000 	str.w	r3, [sl]
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d0:	463a      	mov	r2, r7
 80072d2:	6921      	ldr	r1, [r4, #16]
 80072d4:	f7ff ff82 	bl	80071dc <memcpy>
 80072d8:	89a3      	ldrh	r3, [r4, #12]
 80072da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e2:	81a3      	strh	r3, [r4, #12]
 80072e4:	6126      	str	r6, [r4, #16]
 80072e6:	6165      	str	r5, [r4, #20]
 80072e8:	443e      	add	r6, r7
 80072ea:	1bed      	subs	r5, r5, r7
 80072ec:	6026      	str	r6, [r4, #0]
 80072ee:	60a5      	str	r5, [r4, #8]
 80072f0:	464e      	mov	r6, r9
 80072f2:	454e      	cmp	r6, r9
 80072f4:	d900      	bls.n	80072f8 <__ssputs_r+0x84>
 80072f6:	464e      	mov	r6, r9
 80072f8:	4632      	mov	r2, r6
 80072fa:	4641      	mov	r1, r8
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	f7ff ff78 	bl	80071f2 <memmove>
 8007302:	68a3      	ldr	r3, [r4, #8]
 8007304:	1b9b      	subs	r3, r3, r6
 8007306:	60a3      	str	r3, [r4, #8]
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	441e      	add	r6, r3
 800730c:	6026      	str	r6, [r4, #0]
 800730e:	2000      	movs	r0, #0
 8007310:	e7dc      	b.n	80072cc <__ssputs_r+0x58>
 8007312:	462a      	mov	r2, r5
 8007314:	f000 fb30 	bl	8007978 <_realloc_r>
 8007318:	4606      	mov	r6, r0
 800731a:	2800      	cmp	r0, #0
 800731c:	d1e2      	bne.n	80072e4 <__ssputs_r+0x70>
 800731e:	6921      	ldr	r1, [r4, #16]
 8007320:	4650      	mov	r0, sl
 8007322:	f000 fa81 	bl	8007828 <_free_r>
 8007326:	e7c8      	b.n	80072ba <__ssputs_r+0x46>

08007328 <_svfiprintf_r>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	461d      	mov	r5, r3
 800732e:	898b      	ldrh	r3, [r1, #12]
 8007330:	061f      	lsls	r7, r3, #24
 8007332:	b09d      	sub	sp, #116	; 0x74
 8007334:	4680      	mov	r8, r0
 8007336:	460c      	mov	r4, r1
 8007338:	4616      	mov	r6, r2
 800733a:	d50f      	bpl.n	800735c <_svfiprintf_r+0x34>
 800733c:	690b      	ldr	r3, [r1, #16]
 800733e:	b96b      	cbnz	r3, 800735c <_svfiprintf_r+0x34>
 8007340:	2140      	movs	r1, #64	; 0x40
 8007342:	f000 fabf 	bl	80078c4 <_malloc_r>
 8007346:	6020      	str	r0, [r4, #0]
 8007348:	6120      	str	r0, [r4, #16]
 800734a:	b928      	cbnz	r0, 8007358 <_svfiprintf_r+0x30>
 800734c:	230c      	movs	r3, #12
 800734e:	f8c8 3000 	str.w	r3, [r8]
 8007352:	f04f 30ff 	mov.w	r0, #4294967295
 8007356:	e0c8      	b.n	80074ea <_svfiprintf_r+0x1c2>
 8007358:	2340      	movs	r3, #64	; 0x40
 800735a:	6163      	str	r3, [r4, #20]
 800735c:	2300      	movs	r3, #0
 800735e:	9309      	str	r3, [sp, #36]	; 0x24
 8007360:	2320      	movs	r3, #32
 8007362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007366:	2330      	movs	r3, #48	; 0x30
 8007368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800736c:	9503      	str	r5, [sp, #12]
 800736e:	f04f 0b01 	mov.w	fp, #1
 8007372:	4637      	mov	r7, r6
 8007374:	463d      	mov	r5, r7
 8007376:	f815 3b01 	ldrb.w	r3, [r5], #1
 800737a:	b10b      	cbz	r3, 8007380 <_svfiprintf_r+0x58>
 800737c:	2b25      	cmp	r3, #37	; 0x25
 800737e:	d13e      	bne.n	80073fe <_svfiprintf_r+0xd6>
 8007380:	ebb7 0a06 	subs.w	sl, r7, r6
 8007384:	d00b      	beq.n	800739e <_svfiprintf_r+0x76>
 8007386:	4653      	mov	r3, sl
 8007388:	4632      	mov	r2, r6
 800738a:	4621      	mov	r1, r4
 800738c:	4640      	mov	r0, r8
 800738e:	f7ff ff71 	bl	8007274 <__ssputs_r>
 8007392:	3001      	adds	r0, #1
 8007394:	f000 80a4 	beq.w	80074e0 <_svfiprintf_r+0x1b8>
 8007398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739a:	4453      	add	r3, sl
 800739c:	9309      	str	r3, [sp, #36]	; 0x24
 800739e:	783b      	ldrb	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 809d 	beq.w	80074e0 <_svfiprintf_r+0x1b8>
 80073a6:	2300      	movs	r3, #0
 80073a8:	f04f 32ff 	mov.w	r2, #4294967295
 80073ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073b0:	9304      	str	r3, [sp, #16]
 80073b2:	9307      	str	r3, [sp, #28]
 80073b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073b8:	931a      	str	r3, [sp, #104]	; 0x68
 80073ba:	462f      	mov	r7, r5
 80073bc:	2205      	movs	r2, #5
 80073be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80073c2:	4850      	ldr	r0, [pc, #320]	; (8007504 <_svfiprintf_r+0x1dc>)
 80073c4:	f7f8 ff2c 	bl	8000220 <memchr>
 80073c8:	9b04      	ldr	r3, [sp, #16]
 80073ca:	b9d0      	cbnz	r0, 8007402 <_svfiprintf_r+0xda>
 80073cc:	06d9      	lsls	r1, r3, #27
 80073ce:	bf44      	itt	mi
 80073d0:	2220      	movmi	r2, #32
 80073d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073d6:	071a      	lsls	r2, r3, #28
 80073d8:	bf44      	itt	mi
 80073da:	222b      	movmi	r2, #43	; 0x2b
 80073dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073e0:	782a      	ldrb	r2, [r5, #0]
 80073e2:	2a2a      	cmp	r2, #42	; 0x2a
 80073e4:	d015      	beq.n	8007412 <_svfiprintf_r+0xea>
 80073e6:	9a07      	ldr	r2, [sp, #28]
 80073e8:	462f      	mov	r7, r5
 80073ea:	2000      	movs	r0, #0
 80073ec:	250a      	movs	r5, #10
 80073ee:	4639      	mov	r1, r7
 80073f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f4:	3b30      	subs	r3, #48	; 0x30
 80073f6:	2b09      	cmp	r3, #9
 80073f8:	d94d      	bls.n	8007496 <_svfiprintf_r+0x16e>
 80073fa:	b1b8      	cbz	r0, 800742c <_svfiprintf_r+0x104>
 80073fc:	e00f      	b.n	800741e <_svfiprintf_r+0xf6>
 80073fe:	462f      	mov	r7, r5
 8007400:	e7b8      	b.n	8007374 <_svfiprintf_r+0x4c>
 8007402:	4a40      	ldr	r2, [pc, #256]	; (8007504 <_svfiprintf_r+0x1dc>)
 8007404:	1a80      	subs	r0, r0, r2
 8007406:	fa0b f000 	lsl.w	r0, fp, r0
 800740a:	4318      	orrs	r0, r3
 800740c:	9004      	str	r0, [sp, #16]
 800740e:	463d      	mov	r5, r7
 8007410:	e7d3      	b.n	80073ba <_svfiprintf_r+0x92>
 8007412:	9a03      	ldr	r2, [sp, #12]
 8007414:	1d11      	adds	r1, r2, #4
 8007416:	6812      	ldr	r2, [r2, #0]
 8007418:	9103      	str	r1, [sp, #12]
 800741a:	2a00      	cmp	r2, #0
 800741c:	db01      	blt.n	8007422 <_svfiprintf_r+0xfa>
 800741e:	9207      	str	r2, [sp, #28]
 8007420:	e004      	b.n	800742c <_svfiprintf_r+0x104>
 8007422:	4252      	negs	r2, r2
 8007424:	f043 0302 	orr.w	r3, r3, #2
 8007428:	9207      	str	r2, [sp, #28]
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	783b      	ldrb	r3, [r7, #0]
 800742e:	2b2e      	cmp	r3, #46	; 0x2e
 8007430:	d10c      	bne.n	800744c <_svfiprintf_r+0x124>
 8007432:	787b      	ldrb	r3, [r7, #1]
 8007434:	2b2a      	cmp	r3, #42	; 0x2a
 8007436:	d133      	bne.n	80074a0 <_svfiprintf_r+0x178>
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	1d1a      	adds	r2, r3, #4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	9203      	str	r2, [sp, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	bfb8      	it	lt
 8007444:	f04f 33ff 	movlt.w	r3, #4294967295
 8007448:	3702      	adds	r7, #2
 800744a:	9305      	str	r3, [sp, #20]
 800744c:	4d2e      	ldr	r5, [pc, #184]	; (8007508 <_svfiprintf_r+0x1e0>)
 800744e:	7839      	ldrb	r1, [r7, #0]
 8007450:	2203      	movs	r2, #3
 8007452:	4628      	mov	r0, r5
 8007454:	f7f8 fee4 	bl	8000220 <memchr>
 8007458:	b138      	cbz	r0, 800746a <_svfiprintf_r+0x142>
 800745a:	2340      	movs	r3, #64	; 0x40
 800745c:	1b40      	subs	r0, r0, r5
 800745e:	fa03 f000 	lsl.w	r0, r3, r0
 8007462:	9b04      	ldr	r3, [sp, #16]
 8007464:	4303      	orrs	r3, r0
 8007466:	3701      	adds	r7, #1
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	7839      	ldrb	r1, [r7, #0]
 800746c:	4827      	ldr	r0, [pc, #156]	; (800750c <_svfiprintf_r+0x1e4>)
 800746e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007472:	2206      	movs	r2, #6
 8007474:	1c7e      	adds	r6, r7, #1
 8007476:	f7f8 fed3 	bl	8000220 <memchr>
 800747a:	2800      	cmp	r0, #0
 800747c:	d038      	beq.n	80074f0 <_svfiprintf_r+0x1c8>
 800747e:	4b24      	ldr	r3, [pc, #144]	; (8007510 <_svfiprintf_r+0x1e8>)
 8007480:	bb13      	cbnz	r3, 80074c8 <_svfiprintf_r+0x1a0>
 8007482:	9b03      	ldr	r3, [sp, #12]
 8007484:	3307      	adds	r3, #7
 8007486:	f023 0307 	bic.w	r3, r3, #7
 800748a:	3308      	adds	r3, #8
 800748c:	9303      	str	r3, [sp, #12]
 800748e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007490:	444b      	add	r3, r9
 8007492:	9309      	str	r3, [sp, #36]	; 0x24
 8007494:	e76d      	b.n	8007372 <_svfiprintf_r+0x4a>
 8007496:	fb05 3202 	mla	r2, r5, r2, r3
 800749a:	2001      	movs	r0, #1
 800749c:	460f      	mov	r7, r1
 800749e:	e7a6      	b.n	80073ee <_svfiprintf_r+0xc6>
 80074a0:	2300      	movs	r3, #0
 80074a2:	3701      	adds	r7, #1
 80074a4:	9305      	str	r3, [sp, #20]
 80074a6:	4619      	mov	r1, r3
 80074a8:	250a      	movs	r5, #10
 80074aa:	4638      	mov	r0, r7
 80074ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074b0:	3a30      	subs	r2, #48	; 0x30
 80074b2:	2a09      	cmp	r2, #9
 80074b4:	d903      	bls.n	80074be <_svfiprintf_r+0x196>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0c8      	beq.n	800744c <_svfiprintf_r+0x124>
 80074ba:	9105      	str	r1, [sp, #20]
 80074bc:	e7c6      	b.n	800744c <_svfiprintf_r+0x124>
 80074be:	fb05 2101 	mla	r1, r5, r1, r2
 80074c2:	2301      	movs	r3, #1
 80074c4:	4607      	mov	r7, r0
 80074c6:	e7f0      	b.n	80074aa <_svfiprintf_r+0x182>
 80074c8:	ab03      	add	r3, sp, #12
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	4622      	mov	r2, r4
 80074ce:	4b11      	ldr	r3, [pc, #68]	; (8007514 <_svfiprintf_r+0x1ec>)
 80074d0:	a904      	add	r1, sp, #16
 80074d2:	4640      	mov	r0, r8
 80074d4:	f3af 8000 	nop.w
 80074d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80074dc:	4681      	mov	r9, r0
 80074de:	d1d6      	bne.n	800748e <_svfiprintf_r+0x166>
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	065b      	lsls	r3, r3, #25
 80074e4:	f53f af35 	bmi.w	8007352 <_svfiprintf_r+0x2a>
 80074e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ea:	b01d      	add	sp, #116	; 0x74
 80074ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f0:	ab03      	add	r3, sp, #12
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	4622      	mov	r2, r4
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <_svfiprintf_r+0x1ec>)
 80074f8:	a904      	add	r1, sp, #16
 80074fa:	4640      	mov	r0, r8
 80074fc:	f000 f882 	bl	8007604 <_printf_i>
 8007500:	e7ea      	b.n	80074d8 <_svfiprintf_r+0x1b0>
 8007502:	bf00      	nop
 8007504:	0800807c 	.word	0x0800807c
 8007508:	08008082 	.word	0x08008082
 800750c:	08008086 	.word	0x08008086
 8007510:	00000000 	.word	0x00000000
 8007514:	08007275 	.word	0x08007275

08007518 <_printf_common>:
 8007518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800751c:	4691      	mov	r9, r2
 800751e:	461f      	mov	r7, r3
 8007520:	688a      	ldr	r2, [r1, #8]
 8007522:	690b      	ldr	r3, [r1, #16]
 8007524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007528:	4293      	cmp	r3, r2
 800752a:	bfb8      	it	lt
 800752c:	4613      	movlt	r3, r2
 800752e:	f8c9 3000 	str.w	r3, [r9]
 8007532:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007536:	4606      	mov	r6, r0
 8007538:	460c      	mov	r4, r1
 800753a:	b112      	cbz	r2, 8007542 <_printf_common+0x2a>
 800753c:	3301      	adds	r3, #1
 800753e:	f8c9 3000 	str.w	r3, [r9]
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	0699      	lsls	r1, r3, #26
 8007546:	bf42      	ittt	mi
 8007548:	f8d9 3000 	ldrmi.w	r3, [r9]
 800754c:	3302      	addmi	r3, #2
 800754e:	f8c9 3000 	strmi.w	r3, [r9]
 8007552:	6825      	ldr	r5, [r4, #0]
 8007554:	f015 0506 	ands.w	r5, r5, #6
 8007558:	d107      	bne.n	800756a <_printf_common+0x52>
 800755a:	f104 0a19 	add.w	sl, r4, #25
 800755e:	68e3      	ldr	r3, [r4, #12]
 8007560:	f8d9 2000 	ldr.w	r2, [r9]
 8007564:	1a9b      	subs	r3, r3, r2
 8007566:	42ab      	cmp	r3, r5
 8007568:	dc28      	bgt.n	80075bc <_printf_common+0xa4>
 800756a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800756e:	6822      	ldr	r2, [r4, #0]
 8007570:	3300      	adds	r3, #0
 8007572:	bf18      	it	ne
 8007574:	2301      	movne	r3, #1
 8007576:	0692      	lsls	r2, r2, #26
 8007578:	d42d      	bmi.n	80075d6 <_printf_common+0xbe>
 800757a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800757e:	4639      	mov	r1, r7
 8007580:	4630      	mov	r0, r6
 8007582:	47c0      	blx	r8
 8007584:	3001      	adds	r0, #1
 8007586:	d020      	beq.n	80075ca <_printf_common+0xb2>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	68e5      	ldr	r5, [r4, #12]
 800758c:	f8d9 2000 	ldr.w	r2, [r9]
 8007590:	f003 0306 	and.w	r3, r3, #6
 8007594:	2b04      	cmp	r3, #4
 8007596:	bf08      	it	eq
 8007598:	1aad      	subeq	r5, r5, r2
 800759a:	68a3      	ldr	r3, [r4, #8]
 800759c:	6922      	ldr	r2, [r4, #16]
 800759e:	bf0c      	ite	eq
 80075a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075a4:	2500      	movne	r5, #0
 80075a6:	4293      	cmp	r3, r2
 80075a8:	bfc4      	itt	gt
 80075aa:	1a9b      	subgt	r3, r3, r2
 80075ac:	18ed      	addgt	r5, r5, r3
 80075ae:	f04f 0900 	mov.w	r9, #0
 80075b2:	341a      	adds	r4, #26
 80075b4:	454d      	cmp	r5, r9
 80075b6:	d11a      	bne.n	80075ee <_printf_common+0xd6>
 80075b8:	2000      	movs	r0, #0
 80075ba:	e008      	b.n	80075ce <_printf_common+0xb6>
 80075bc:	2301      	movs	r3, #1
 80075be:	4652      	mov	r2, sl
 80075c0:	4639      	mov	r1, r7
 80075c2:	4630      	mov	r0, r6
 80075c4:	47c0      	blx	r8
 80075c6:	3001      	adds	r0, #1
 80075c8:	d103      	bne.n	80075d2 <_printf_common+0xba>
 80075ca:	f04f 30ff 	mov.w	r0, #4294967295
 80075ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d2:	3501      	adds	r5, #1
 80075d4:	e7c3      	b.n	800755e <_printf_common+0x46>
 80075d6:	18e1      	adds	r1, r4, r3
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	2030      	movs	r0, #48	; 0x30
 80075dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075e0:	4422      	add	r2, r4
 80075e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075ea:	3302      	adds	r3, #2
 80075ec:	e7c5      	b.n	800757a <_printf_common+0x62>
 80075ee:	2301      	movs	r3, #1
 80075f0:	4622      	mov	r2, r4
 80075f2:	4639      	mov	r1, r7
 80075f4:	4630      	mov	r0, r6
 80075f6:	47c0      	blx	r8
 80075f8:	3001      	adds	r0, #1
 80075fa:	d0e6      	beq.n	80075ca <_printf_common+0xb2>
 80075fc:	f109 0901 	add.w	r9, r9, #1
 8007600:	e7d8      	b.n	80075b4 <_printf_common+0x9c>
	...

08007604 <_printf_i>:
 8007604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007608:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800760c:	460c      	mov	r4, r1
 800760e:	7e09      	ldrb	r1, [r1, #24]
 8007610:	b085      	sub	sp, #20
 8007612:	296e      	cmp	r1, #110	; 0x6e
 8007614:	4617      	mov	r7, r2
 8007616:	4606      	mov	r6, r0
 8007618:	4698      	mov	r8, r3
 800761a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800761c:	f000 80b3 	beq.w	8007786 <_printf_i+0x182>
 8007620:	d822      	bhi.n	8007668 <_printf_i+0x64>
 8007622:	2963      	cmp	r1, #99	; 0x63
 8007624:	d036      	beq.n	8007694 <_printf_i+0x90>
 8007626:	d80a      	bhi.n	800763e <_printf_i+0x3a>
 8007628:	2900      	cmp	r1, #0
 800762a:	f000 80b9 	beq.w	80077a0 <_printf_i+0x19c>
 800762e:	2958      	cmp	r1, #88	; 0x58
 8007630:	f000 8083 	beq.w	800773a <_printf_i+0x136>
 8007634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007638:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800763c:	e032      	b.n	80076a4 <_printf_i+0xa0>
 800763e:	2964      	cmp	r1, #100	; 0x64
 8007640:	d001      	beq.n	8007646 <_printf_i+0x42>
 8007642:	2969      	cmp	r1, #105	; 0x69
 8007644:	d1f6      	bne.n	8007634 <_printf_i+0x30>
 8007646:	6820      	ldr	r0, [r4, #0]
 8007648:	6813      	ldr	r3, [r2, #0]
 800764a:	0605      	lsls	r5, r0, #24
 800764c:	f103 0104 	add.w	r1, r3, #4
 8007650:	d52a      	bpl.n	80076a8 <_printf_i+0xa4>
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6011      	str	r1, [r2, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	da03      	bge.n	8007662 <_printf_i+0x5e>
 800765a:	222d      	movs	r2, #45	; 0x2d
 800765c:	425b      	negs	r3, r3
 800765e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007662:	486f      	ldr	r0, [pc, #444]	; (8007820 <_printf_i+0x21c>)
 8007664:	220a      	movs	r2, #10
 8007666:	e039      	b.n	80076dc <_printf_i+0xd8>
 8007668:	2973      	cmp	r1, #115	; 0x73
 800766a:	f000 809d 	beq.w	80077a8 <_printf_i+0x1a4>
 800766e:	d808      	bhi.n	8007682 <_printf_i+0x7e>
 8007670:	296f      	cmp	r1, #111	; 0x6f
 8007672:	d020      	beq.n	80076b6 <_printf_i+0xb2>
 8007674:	2970      	cmp	r1, #112	; 0x70
 8007676:	d1dd      	bne.n	8007634 <_printf_i+0x30>
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	f043 0320 	orr.w	r3, r3, #32
 800767e:	6023      	str	r3, [r4, #0]
 8007680:	e003      	b.n	800768a <_printf_i+0x86>
 8007682:	2975      	cmp	r1, #117	; 0x75
 8007684:	d017      	beq.n	80076b6 <_printf_i+0xb2>
 8007686:	2978      	cmp	r1, #120	; 0x78
 8007688:	d1d4      	bne.n	8007634 <_printf_i+0x30>
 800768a:	2378      	movs	r3, #120	; 0x78
 800768c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007690:	4864      	ldr	r0, [pc, #400]	; (8007824 <_printf_i+0x220>)
 8007692:	e055      	b.n	8007740 <_printf_i+0x13c>
 8007694:	6813      	ldr	r3, [r2, #0]
 8007696:	1d19      	adds	r1, r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6011      	str	r1, [r2, #0]
 800769c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076a4:	2301      	movs	r3, #1
 80076a6:	e08c      	b.n	80077c2 <_printf_i+0x1be>
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6011      	str	r1, [r2, #0]
 80076ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076b0:	bf18      	it	ne
 80076b2:	b21b      	sxthne	r3, r3
 80076b4:	e7cf      	b.n	8007656 <_printf_i+0x52>
 80076b6:	6813      	ldr	r3, [r2, #0]
 80076b8:	6825      	ldr	r5, [r4, #0]
 80076ba:	1d18      	adds	r0, r3, #4
 80076bc:	6010      	str	r0, [r2, #0]
 80076be:	0628      	lsls	r0, r5, #24
 80076c0:	d501      	bpl.n	80076c6 <_printf_i+0xc2>
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	e002      	b.n	80076cc <_printf_i+0xc8>
 80076c6:	0668      	lsls	r0, r5, #25
 80076c8:	d5fb      	bpl.n	80076c2 <_printf_i+0xbe>
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	4854      	ldr	r0, [pc, #336]	; (8007820 <_printf_i+0x21c>)
 80076ce:	296f      	cmp	r1, #111	; 0x6f
 80076d0:	bf14      	ite	ne
 80076d2:	220a      	movne	r2, #10
 80076d4:	2208      	moveq	r2, #8
 80076d6:	2100      	movs	r1, #0
 80076d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076dc:	6865      	ldr	r5, [r4, #4]
 80076de:	60a5      	str	r5, [r4, #8]
 80076e0:	2d00      	cmp	r5, #0
 80076e2:	f2c0 8095 	blt.w	8007810 <_printf_i+0x20c>
 80076e6:	6821      	ldr	r1, [r4, #0]
 80076e8:	f021 0104 	bic.w	r1, r1, #4
 80076ec:	6021      	str	r1, [r4, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d13d      	bne.n	800776e <_printf_i+0x16a>
 80076f2:	2d00      	cmp	r5, #0
 80076f4:	f040 808e 	bne.w	8007814 <_printf_i+0x210>
 80076f8:	4665      	mov	r5, ip
 80076fa:	2a08      	cmp	r2, #8
 80076fc:	d10b      	bne.n	8007716 <_printf_i+0x112>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	07db      	lsls	r3, r3, #31
 8007702:	d508      	bpl.n	8007716 <_printf_i+0x112>
 8007704:	6923      	ldr	r3, [r4, #16]
 8007706:	6862      	ldr	r2, [r4, #4]
 8007708:	429a      	cmp	r2, r3
 800770a:	bfde      	ittt	le
 800770c:	2330      	movle	r3, #48	; 0x30
 800770e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007712:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007716:	ebac 0305 	sub.w	r3, ip, r5
 800771a:	6123      	str	r3, [r4, #16]
 800771c:	f8cd 8000 	str.w	r8, [sp]
 8007720:	463b      	mov	r3, r7
 8007722:	aa03      	add	r2, sp, #12
 8007724:	4621      	mov	r1, r4
 8007726:	4630      	mov	r0, r6
 8007728:	f7ff fef6 	bl	8007518 <_printf_common>
 800772c:	3001      	adds	r0, #1
 800772e:	d14d      	bne.n	80077cc <_printf_i+0x1c8>
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	b005      	add	sp, #20
 8007736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800773a:	4839      	ldr	r0, [pc, #228]	; (8007820 <_printf_i+0x21c>)
 800773c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007740:	6813      	ldr	r3, [r2, #0]
 8007742:	6821      	ldr	r1, [r4, #0]
 8007744:	1d1d      	adds	r5, r3, #4
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6015      	str	r5, [r2, #0]
 800774a:	060a      	lsls	r2, r1, #24
 800774c:	d50b      	bpl.n	8007766 <_printf_i+0x162>
 800774e:	07ca      	lsls	r2, r1, #31
 8007750:	bf44      	itt	mi
 8007752:	f041 0120 	orrmi.w	r1, r1, #32
 8007756:	6021      	strmi	r1, [r4, #0]
 8007758:	b91b      	cbnz	r3, 8007762 <_printf_i+0x15e>
 800775a:	6822      	ldr	r2, [r4, #0]
 800775c:	f022 0220 	bic.w	r2, r2, #32
 8007760:	6022      	str	r2, [r4, #0]
 8007762:	2210      	movs	r2, #16
 8007764:	e7b7      	b.n	80076d6 <_printf_i+0xd2>
 8007766:	064d      	lsls	r5, r1, #25
 8007768:	bf48      	it	mi
 800776a:	b29b      	uxthmi	r3, r3
 800776c:	e7ef      	b.n	800774e <_printf_i+0x14a>
 800776e:	4665      	mov	r5, ip
 8007770:	fbb3 f1f2 	udiv	r1, r3, r2
 8007774:	fb02 3311 	mls	r3, r2, r1, r3
 8007778:	5cc3      	ldrb	r3, [r0, r3]
 800777a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800777e:	460b      	mov	r3, r1
 8007780:	2900      	cmp	r1, #0
 8007782:	d1f5      	bne.n	8007770 <_printf_i+0x16c>
 8007784:	e7b9      	b.n	80076fa <_printf_i+0xf6>
 8007786:	6813      	ldr	r3, [r2, #0]
 8007788:	6825      	ldr	r5, [r4, #0]
 800778a:	6961      	ldr	r1, [r4, #20]
 800778c:	1d18      	adds	r0, r3, #4
 800778e:	6010      	str	r0, [r2, #0]
 8007790:	0628      	lsls	r0, r5, #24
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	d501      	bpl.n	800779a <_printf_i+0x196>
 8007796:	6019      	str	r1, [r3, #0]
 8007798:	e002      	b.n	80077a0 <_printf_i+0x19c>
 800779a:	066a      	lsls	r2, r5, #25
 800779c:	d5fb      	bpl.n	8007796 <_printf_i+0x192>
 800779e:	8019      	strh	r1, [r3, #0]
 80077a0:	2300      	movs	r3, #0
 80077a2:	6123      	str	r3, [r4, #16]
 80077a4:	4665      	mov	r5, ip
 80077a6:	e7b9      	b.n	800771c <_printf_i+0x118>
 80077a8:	6813      	ldr	r3, [r2, #0]
 80077aa:	1d19      	adds	r1, r3, #4
 80077ac:	6011      	str	r1, [r2, #0]
 80077ae:	681d      	ldr	r5, [r3, #0]
 80077b0:	6862      	ldr	r2, [r4, #4]
 80077b2:	2100      	movs	r1, #0
 80077b4:	4628      	mov	r0, r5
 80077b6:	f7f8 fd33 	bl	8000220 <memchr>
 80077ba:	b108      	cbz	r0, 80077c0 <_printf_i+0x1bc>
 80077bc:	1b40      	subs	r0, r0, r5
 80077be:	6060      	str	r0, [r4, #4]
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	6123      	str	r3, [r4, #16]
 80077c4:	2300      	movs	r3, #0
 80077c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077ca:	e7a7      	b.n	800771c <_printf_i+0x118>
 80077cc:	6923      	ldr	r3, [r4, #16]
 80077ce:	462a      	mov	r2, r5
 80077d0:	4639      	mov	r1, r7
 80077d2:	4630      	mov	r0, r6
 80077d4:	47c0      	blx	r8
 80077d6:	3001      	adds	r0, #1
 80077d8:	d0aa      	beq.n	8007730 <_printf_i+0x12c>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	079b      	lsls	r3, r3, #30
 80077de:	d413      	bmi.n	8007808 <_printf_i+0x204>
 80077e0:	68e0      	ldr	r0, [r4, #12]
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	4298      	cmp	r0, r3
 80077e6:	bfb8      	it	lt
 80077e8:	4618      	movlt	r0, r3
 80077ea:	e7a3      	b.n	8007734 <_printf_i+0x130>
 80077ec:	2301      	movs	r3, #1
 80077ee:	464a      	mov	r2, r9
 80077f0:	4639      	mov	r1, r7
 80077f2:	4630      	mov	r0, r6
 80077f4:	47c0      	blx	r8
 80077f6:	3001      	adds	r0, #1
 80077f8:	d09a      	beq.n	8007730 <_printf_i+0x12c>
 80077fa:	3501      	adds	r5, #1
 80077fc:	68e3      	ldr	r3, [r4, #12]
 80077fe:	9a03      	ldr	r2, [sp, #12]
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	42ab      	cmp	r3, r5
 8007804:	dcf2      	bgt.n	80077ec <_printf_i+0x1e8>
 8007806:	e7eb      	b.n	80077e0 <_printf_i+0x1dc>
 8007808:	2500      	movs	r5, #0
 800780a:	f104 0919 	add.w	r9, r4, #25
 800780e:	e7f5      	b.n	80077fc <_printf_i+0x1f8>
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1ac      	bne.n	800776e <_printf_i+0x16a>
 8007814:	7803      	ldrb	r3, [r0, #0]
 8007816:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800781a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800781e:	e76c      	b.n	80076fa <_printf_i+0xf6>
 8007820:	0800808d 	.word	0x0800808d
 8007824:	0800809e 	.word	0x0800809e

08007828 <_free_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4605      	mov	r5, r0
 800782c:	2900      	cmp	r1, #0
 800782e:	d045      	beq.n	80078bc <_free_r+0x94>
 8007830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007834:	1f0c      	subs	r4, r1, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	bfb8      	it	lt
 800783a:	18e4      	addlt	r4, r4, r3
 800783c:	f000 f8d2 	bl	80079e4 <__malloc_lock>
 8007840:	4a1f      	ldr	r2, [pc, #124]	; (80078c0 <_free_r+0x98>)
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	4610      	mov	r0, r2
 8007846:	b933      	cbnz	r3, 8007856 <_free_r+0x2e>
 8007848:	6063      	str	r3, [r4, #4]
 800784a:	6014      	str	r4, [r2, #0]
 800784c:	4628      	mov	r0, r5
 800784e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007852:	f000 b8c8 	b.w	80079e6 <__malloc_unlock>
 8007856:	42a3      	cmp	r3, r4
 8007858:	d90c      	bls.n	8007874 <_free_r+0x4c>
 800785a:	6821      	ldr	r1, [r4, #0]
 800785c:	1862      	adds	r2, r4, r1
 800785e:	4293      	cmp	r3, r2
 8007860:	bf04      	itt	eq
 8007862:	681a      	ldreq	r2, [r3, #0]
 8007864:	685b      	ldreq	r3, [r3, #4]
 8007866:	6063      	str	r3, [r4, #4]
 8007868:	bf04      	itt	eq
 800786a:	1852      	addeq	r2, r2, r1
 800786c:	6022      	streq	r2, [r4, #0]
 800786e:	6004      	str	r4, [r0, #0]
 8007870:	e7ec      	b.n	800784c <_free_r+0x24>
 8007872:	4613      	mov	r3, r2
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	b10a      	cbz	r2, 800787c <_free_r+0x54>
 8007878:	42a2      	cmp	r2, r4
 800787a:	d9fa      	bls.n	8007872 <_free_r+0x4a>
 800787c:	6819      	ldr	r1, [r3, #0]
 800787e:	1858      	adds	r0, r3, r1
 8007880:	42a0      	cmp	r0, r4
 8007882:	d10b      	bne.n	800789c <_free_r+0x74>
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	4401      	add	r1, r0
 8007888:	1858      	adds	r0, r3, r1
 800788a:	4282      	cmp	r2, r0
 800788c:	6019      	str	r1, [r3, #0]
 800788e:	d1dd      	bne.n	800784c <_free_r+0x24>
 8007890:	6810      	ldr	r0, [r2, #0]
 8007892:	6852      	ldr	r2, [r2, #4]
 8007894:	605a      	str	r2, [r3, #4]
 8007896:	4401      	add	r1, r0
 8007898:	6019      	str	r1, [r3, #0]
 800789a:	e7d7      	b.n	800784c <_free_r+0x24>
 800789c:	d902      	bls.n	80078a4 <_free_r+0x7c>
 800789e:	230c      	movs	r3, #12
 80078a0:	602b      	str	r3, [r5, #0]
 80078a2:	e7d3      	b.n	800784c <_free_r+0x24>
 80078a4:	6820      	ldr	r0, [r4, #0]
 80078a6:	1821      	adds	r1, r4, r0
 80078a8:	428a      	cmp	r2, r1
 80078aa:	bf04      	itt	eq
 80078ac:	6811      	ldreq	r1, [r2, #0]
 80078ae:	6852      	ldreq	r2, [r2, #4]
 80078b0:	6062      	str	r2, [r4, #4]
 80078b2:	bf04      	itt	eq
 80078b4:	1809      	addeq	r1, r1, r0
 80078b6:	6021      	streq	r1, [r4, #0]
 80078b8:	605c      	str	r4, [r3, #4]
 80078ba:	e7c7      	b.n	800784c <_free_r+0x24>
 80078bc:	bd38      	pop	{r3, r4, r5, pc}
 80078be:	bf00      	nop
 80078c0:	200000c0 	.word	0x200000c0

080078c4 <_malloc_r>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	1ccd      	adds	r5, r1, #3
 80078c8:	f025 0503 	bic.w	r5, r5, #3
 80078cc:	3508      	adds	r5, #8
 80078ce:	2d0c      	cmp	r5, #12
 80078d0:	bf38      	it	cc
 80078d2:	250c      	movcc	r5, #12
 80078d4:	2d00      	cmp	r5, #0
 80078d6:	4606      	mov	r6, r0
 80078d8:	db01      	blt.n	80078de <_malloc_r+0x1a>
 80078da:	42a9      	cmp	r1, r5
 80078dc:	d903      	bls.n	80078e6 <_malloc_r+0x22>
 80078de:	230c      	movs	r3, #12
 80078e0:	6033      	str	r3, [r6, #0]
 80078e2:	2000      	movs	r0, #0
 80078e4:	bd70      	pop	{r4, r5, r6, pc}
 80078e6:	f000 f87d 	bl	80079e4 <__malloc_lock>
 80078ea:	4a21      	ldr	r2, [pc, #132]	; (8007970 <_malloc_r+0xac>)
 80078ec:	6814      	ldr	r4, [r2, #0]
 80078ee:	4621      	mov	r1, r4
 80078f0:	b991      	cbnz	r1, 8007918 <_malloc_r+0x54>
 80078f2:	4c20      	ldr	r4, [pc, #128]	; (8007974 <_malloc_r+0xb0>)
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	b91b      	cbnz	r3, 8007900 <_malloc_r+0x3c>
 80078f8:	4630      	mov	r0, r6
 80078fa:	f000 f863 	bl	80079c4 <_sbrk_r>
 80078fe:	6020      	str	r0, [r4, #0]
 8007900:	4629      	mov	r1, r5
 8007902:	4630      	mov	r0, r6
 8007904:	f000 f85e 	bl	80079c4 <_sbrk_r>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d124      	bne.n	8007956 <_malloc_r+0x92>
 800790c:	230c      	movs	r3, #12
 800790e:	6033      	str	r3, [r6, #0]
 8007910:	4630      	mov	r0, r6
 8007912:	f000 f868 	bl	80079e6 <__malloc_unlock>
 8007916:	e7e4      	b.n	80078e2 <_malloc_r+0x1e>
 8007918:	680b      	ldr	r3, [r1, #0]
 800791a:	1b5b      	subs	r3, r3, r5
 800791c:	d418      	bmi.n	8007950 <_malloc_r+0x8c>
 800791e:	2b0b      	cmp	r3, #11
 8007920:	d90f      	bls.n	8007942 <_malloc_r+0x7e>
 8007922:	600b      	str	r3, [r1, #0]
 8007924:	50cd      	str	r5, [r1, r3]
 8007926:	18cc      	adds	r4, r1, r3
 8007928:	4630      	mov	r0, r6
 800792a:	f000 f85c 	bl	80079e6 <__malloc_unlock>
 800792e:	f104 000b 	add.w	r0, r4, #11
 8007932:	1d23      	adds	r3, r4, #4
 8007934:	f020 0007 	bic.w	r0, r0, #7
 8007938:	1ac3      	subs	r3, r0, r3
 800793a:	d0d3      	beq.n	80078e4 <_malloc_r+0x20>
 800793c:	425a      	negs	r2, r3
 800793e:	50e2      	str	r2, [r4, r3]
 8007940:	e7d0      	b.n	80078e4 <_malloc_r+0x20>
 8007942:	428c      	cmp	r4, r1
 8007944:	684b      	ldr	r3, [r1, #4]
 8007946:	bf16      	itet	ne
 8007948:	6063      	strne	r3, [r4, #4]
 800794a:	6013      	streq	r3, [r2, #0]
 800794c:	460c      	movne	r4, r1
 800794e:	e7eb      	b.n	8007928 <_malloc_r+0x64>
 8007950:	460c      	mov	r4, r1
 8007952:	6849      	ldr	r1, [r1, #4]
 8007954:	e7cc      	b.n	80078f0 <_malloc_r+0x2c>
 8007956:	1cc4      	adds	r4, r0, #3
 8007958:	f024 0403 	bic.w	r4, r4, #3
 800795c:	42a0      	cmp	r0, r4
 800795e:	d005      	beq.n	800796c <_malloc_r+0xa8>
 8007960:	1a21      	subs	r1, r4, r0
 8007962:	4630      	mov	r0, r6
 8007964:	f000 f82e 	bl	80079c4 <_sbrk_r>
 8007968:	3001      	adds	r0, #1
 800796a:	d0cf      	beq.n	800790c <_malloc_r+0x48>
 800796c:	6025      	str	r5, [r4, #0]
 800796e:	e7db      	b.n	8007928 <_malloc_r+0x64>
 8007970:	200000c0 	.word	0x200000c0
 8007974:	200000c4 	.word	0x200000c4

08007978 <_realloc_r>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	4607      	mov	r7, r0
 800797c:	4614      	mov	r4, r2
 800797e:	460e      	mov	r6, r1
 8007980:	b921      	cbnz	r1, 800798c <_realloc_r+0x14>
 8007982:	4611      	mov	r1, r2
 8007984:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007988:	f7ff bf9c 	b.w	80078c4 <_malloc_r>
 800798c:	b922      	cbnz	r2, 8007998 <_realloc_r+0x20>
 800798e:	f7ff ff4b 	bl	8007828 <_free_r>
 8007992:	4625      	mov	r5, r4
 8007994:	4628      	mov	r0, r5
 8007996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007998:	f000 f826 	bl	80079e8 <_malloc_usable_size_r>
 800799c:	42a0      	cmp	r0, r4
 800799e:	d20f      	bcs.n	80079c0 <_realloc_r+0x48>
 80079a0:	4621      	mov	r1, r4
 80079a2:	4638      	mov	r0, r7
 80079a4:	f7ff ff8e 	bl	80078c4 <_malloc_r>
 80079a8:	4605      	mov	r5, r0
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d0f2      	beq.n	8007994 <_realloc_r+0x1c>
 80079ae:	4631      	mov	r1, r6
 80079b0:	4622      	mov	r2, r4
 80079b2:	f7ff fc13 	bl	80071dc <memcpy>
 80079b6:	4631      	mov	r1, r6
 80079b8:	4638      	mov	r0, r7
 80079ba:	f7ff ff35 	bl	8007828 <_free_r>
 80079be:	e7e9      	b.n	8007994 <_realloc_r+0x1c>
 80079c0:	4635      	mov	r5, r6
 80079c2:	e7e7      	b.n	8007994 <_realloc_r+0x1c>

080079c4 <_sbrk_r>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	4c06      	ldr	r4, [pc, #24]	; (80079e0 <_sbrk_r+0x1c>)
 80079c8:	2300      	movs	r3, #0
 80079ca:	4605      	mov	r5, r0
 80079cc:	4608      	mov	r0, r1
 80079ce:	6023      	str	r3, [r4, #0]
 80079d0:	f7fb fca2 	bl	8003318 <_sbrk>
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	d102      	bne.n	80079de <_sbrk_r+0x1a>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	b103      	cbz	r3, 80079de <_sbrk_r+0x1a>
 80079dc:	602b      	str	r3, [r5, #0]
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	20002a50 	.word	0x20002a50

080079e4 <__malloc_lock>:
 80079e4:	4770      	bx	lr

080079e6 <__malloc_unlock>:
 80079e6:	4770      	bx	lr

080079e8 <_malloc_usable_size_r>:
 80079e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ec:	1f18      	subs	r0, r3, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bfbc      	itt	lt
 80079f2:	580b      	ldrlt	r3, [r1, r0]
 80079f4:	18c0      	addlt	r0, r0, r3
 80079f6:	4770      	bx	lr

080079f8 <_init>:
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	bf00      	nop
 80079fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fe:	bc08      	pop	{r3}
 8007a00:	469e      	mov	lr, r3
 8007a02:	4770      	bx	lr

08007a04 <_fini>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	bf00      	nop
 8007a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0a:	bc08      	pop	{r3}
 8007a0c:	469e      	mov	lr, r3
 8007a0e:	4770      	bx	lr
