
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007744  08007744  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800774c  0800774c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800774c  0800774c  0001774c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d98  20000084  080077d8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e1c  080077d8  00022e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117c6  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024dc  00000000  00000000  0003187a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  00033d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  00034c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e95  00000000  00000000  000359b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bca1  00000000  00000000  00058845  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d278e  00000000  00000000  000644e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136c74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040bc  00000000  00000000  00136cf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006fb8 	.word	0x08006fb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08006fb8 	.word	0x08006fb8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	80fb      	strh	r3, [r7, #6]
 80005cc:	4613      	mov	r3, r2
 80005ce:	717b      	strb	r3, [r7, #5]
    int temp;

    sprintf(uartData, "\nSelector              = %d",select_8_16);
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	461a      	mov	r2, r3
 80005d4:	4951      	ldr	r1, [pc, #324]	; (800071c <conv_HEX_to_BIN+0x15c>)
 80005d6:	4852      	ldr	r0, [pc, #328]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005d8:	f006 f8f2 	bl	80067c0 <siprintf>
    HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80005dc:	4850      	ldr	r0, [pc, #320]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005de:	f7ff fe17 	bl	8000210 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	230a      	movs	r3, #10
 80005e8:	494d      	ldr	r1, [pc, #308]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005ea:	484e      	ldr	r0, [pc, #312]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80005ec:	f005 f9bf 	bl	800596e <HAL_UART_Transmit>

    sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	461a      	mov	r2, r3
 80005f4:	494c      	ldr	r1, [pc, #304]	; (8000728 <conv_HEX_to_BIN+0x168>)
 80005f6:	484a      	ldr	r0, [pc, #296]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005f8:	f006 f8e2 	bl	80067c0 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80005fc:	4848      	ldr	r0, [pc, #288]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005fe:	f7ff fe07 	bl	8000210 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	230a      	movs	r3, #10
 8000608:	4945      	ldr	r1, [pc, #276]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800060a:	4846      	ldr	r0, [pc, #280]	; (8000724 <conv_HEX_to_BIN+0x164>)
 800060c:	f005 f9af 	bl	800596e <HAL_UART_Transmit>

    if(select_8_16){
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01f      	beq.n	8000656 <conv_HEX_to_BIN+0x96>
		for(int i = 0; i < 8; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e018      	b.n	800064e <conv_HEX_to_BIN+0x8e>
			temp = hex_byte_in >> i;
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	fa42 f303 	asr.w	r3, r2, r3
 8000624:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	bfb8      	it	lt
 8000630:	425b      	neglt	r3, r3
 8000632:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	2a00      	cmp	r2, #0
 800063e:	bf14      	ite	ne
 8000640:	2201      	movne	r2, #1
 8000642:	2200      	moveq	r2, #0
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	2b07      	cmp	r3, #7
 8000652:	dde3      	ble.n	800061c <conv_HEX_to_BIN+0x5c>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000654:	e05e      	b.n	8000714 <conv_HEX_to_BIN+0x154>
	   sprintf(uartData, "\nByte value            = %x\nBinary value[LSB:MSB] =",hex_byte_in);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	461a      	mov	r2, r3
 800065a:	4934      	ldr	r1, [pc, #208]	; (800072c <conv_HEX_to_BIN+0x16c>)
 800065c:	4830      	ldr	r0, [pc, #192]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800065e:	f006 f8af 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000662:	482f      	ldr	r0, [pc, #188]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000664:	f7ff fdd4 	bl	8000210 <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	b29a      	uxth	r2, r3
 800066c:	230a      	movs	r3, #10
 800066e:	492c      	ldr	r1, [pc, #176]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000670:	482c      	ldr	r0, [pc, #176]	; (8000724 <conv_HEX_to_BIN+0x164>)
 8000672:	f005 f97c 	bl	800596e <HAL_UART_Transmit>
		for(int i = 0; i < 16; i++){
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	e038      	b.n	80006ee <conv_HEX_to_BIN+0x12e>
			temp = hex_byte_in >> i;
 800067c:	88fa      	ldrh	r2, [r7, #6]
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	fa42 f303 	asr.w	r3, r2, r3
 8000684:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " b=%d ",temp);
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4929      	ldr	r1, [pc, #164]	; (8000730 <conv_HEX_to_BIN+0x170>)
 800068a:	4825      	ldr	r0, [pc, #148]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800068c:	f006 f898 	bl	80067c0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000690:	4823      	ldr	r0, [pc, #140]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000692:	f7ff fdbd 	bl	8000210 <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	b29a      	uxth	r2, r3
 800069a:	230a      	movs	r3, #10
 800069c:	4920      	ldr	r1, [pc, #128]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800069e:	4821      	ldr	r0, [pc, #132]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80006a0:	f005 f965 	bl	800596e <HAL_UART_Transmit>
			temp = temp%2;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " a=%d ",temp);
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	491f      	ldr	r1, [pc, #124]	; (8000734 <conv_HEX_to_BIN+0x174>)
 80006b6:	481a      	ldr	r0, [pc, #104]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006b8:	f006 f882 	bl	80067c0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80006bc:	4818      	ldr	r0, [pc, #96]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006be:	f7ff fda7 	bl	8000210 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	230a      	movs	r3, #10
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006ca:	4816      	ldr	r0, [pc, #88]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80006cc:	f005 f94f 	bl	800596e <HAL_UART_Transmit>
			*(bin_byte_out + 16 - 1 - i) = temp; //MSB is at lowest index
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	f1c3 030f 	rsb	r3, r3, #15
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	4413      	add	r3, r2
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	2a00      	cmp	r2, #0
 80006de:	bf14      	ite	ne
 80006e0:	2201      	movne	r2, #1
 80006e2:	2200      	moveq	r2, #0
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	3301      	adds	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	ddc3      	ble.n	800067c <conv_HEX_to_BIN+0xbc>
		sprintf(uartData, "\n ");
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <conv_HEX_to_BIN+0x178>)
 80006f8:	8811      	ldrh	r1, [r2, #0]
 80006fa:	7892      	ldrb	r2, [r2, #2]
 80006fc:	8019      	strh	r1, [r3, #0]
 80006fe:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000702:	f7ff fd85 	bl	8000210 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	b29a      	uxth	r2, r3
 800070a:	230a      	movs	r3, #10
 800070c:	4904      	ldr	r1, [pc, #16]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <conv_HEX_to_BIN+0x164>)
 8000710:	f005 f92d 	bl	800596e <HAL_UART_Transmit>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	08006fd0 	.word	0x08006fd0
 8000720:	20001cd8 	.word	0x20001cd8
 8000724:	20002b94 	.word	0x20002b94
 8000728:	08006fec 	.word	0x08006fec
 800072c:	08007020 	.word	0x08007020
 8000730:	08007054 	.word	0x08007054
 8000734:	0800705c 	.word	0x0800705c
 8000738:	08007064 	.word	0x08007064

0800073c <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8000740:	2201      	movs	r2, #1
 8000742:	4909      	ldr	r1, [pc, #36]	; (8000768 <init_AX25+0x2c>)
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <init_AX25+0x30>)
 8000746:	f005 f9ab 	bl	8005aa0 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <init_AX25+0x34>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <init_AX25+0x34>)
 8000752:	2200      	movs	r2, #0
 8000754:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <init_AX25+0x34>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <init_AX25+0x34>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000144c 	.word	0x2000144c
 800076c:	20002b94 	.word	0x20002b94
 8000770:	20001440 	.word	0x20001440

08000774 <tx_rx>:

void tx_rx() {
 8000774:	b5b0      	push	{r4, r5, r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	if (changeMode) {
 800077a:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <tx_rx+0x80>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <tx_rx+0x18>
		changeMode = 0;
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <tx_rx+0x80>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
		toggleMode();
 8000788:	f001 fe56 	bl	8002438 <toggleMode>
	}

	//Transmission Mode
	if (mode) {
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <tx_rx+0x84>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d008      	beq.n	80007a6 <tx_rx+0x32>
		bool packet_received = false;
 8000794:	2300      	movs	r3, #0
 8000796:	71bb      	strb	r3, [r7, #6]
		bool packet_converted = false;
 8000798:	2300      	movs	r3, #0
 800079a:	717b      	strb	r3, [r7, #5]

		//Run receiving KISS
		packet_received = receiving_KISS();
 800079c:	f001 f9a4 	bl	8001ae8 <receiving_KISS>
 80007a0:	4603      	mov	r3, r0
 80007a2:	71bb      	strb	r3, [r7, #6]
		if(!change){
			sprintf(uartData, "Changing mode due to request\n");
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
}
 80007a4:	e022      	b.n	80007ec <tx_rx+0x78>
		bool change = receiving_AX25();
 80007a6:	f000 ff39 	bl	800161c <receiving_AX25>
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
		if(!change){
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f083 0301 	eor.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d018      	beq.n	80007ec <tx_rx+0x78>
			sprintf(uartData, "Changing mode due to request\n");
 80007ba:	4a10      	ldr	r2, [pc, #64]	; (80007fc <tx_rx+0x88>)
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <tx_rx+0x8c>)
 80007be:	4615      	mov	r5, r2
 80007c0:	461c      	mov	r4, r3
 80007c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c4:	6028      	str	r0, [r5, #0]
 80007c6:	6069      	str	r1, [r5, #4]
 80007c8:	60aa      	str	r2, [r5, #8]
 80007ca:	60eb      	str	r3, [r5, #12]
 80007cc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80007ce:	6128      	str	r0, [r5, #16]
 80007d0:	6169      	str	r1, [r5, #20]
 80007d2:	61aa      	str	r2, [r5, #24]
 80007d4:	8823      	ldrh	r3, [r4, #0]
 80007d6:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80007d8:	4808      	ldr	r0, [pc, #32]	; (80007fc <tx_rx+0x88>)
 80007da:	f7ff fd19 	bl	8000210 <strlen>
 80007de:	4603      	mov	r3, r0
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	230a      	movs	r3, #10
 80007e4:	4905      	ldr	r1, [pc, #20]	; (80007fc <tx_rx+0x88>)
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <tx_rx+0x90>)
 80007e8:	f005 f8c1 	bl	800596e <HAL_UART_Transmit>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bdb0      	pop	{r4, r5, r7, pc}
 80007f4:	200000a5 	.word	0x200000a5
 80007f8:	20002b3c 	.word	0x20002b3c
 80007fc:	20001cd8 	.word	0x20001cd8
 8000800:	08007068 	.word	0x08007068
 8000804:	20002b94 	.word	0x20002b94

08000808 <print_outAX25>:
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		output_AX25();
	}
}

void print_outAX25(){
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	b08d      	sub	sp, #52	; 0x34
 800080c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800080e:	4b9b      	ldr	r3, [pc, #620]	; (8000a7c <print_outAX25+0x274>)
 8000810:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000818:	330c      	adds	r3, #12
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET being sent to radio\n");
 800081e:	4b98      	ldr	r3, [pc, #608]	; (8000a80 <print_outAX25+0x278>)
 8000820:	4a98      	ldr	r2, [pc, #608]	; (8000a84 <print_outAX25+0x27c>)
 8000822:	4614      	mov	r4, r2
 8000824:	469c      	mov	ip, r3
 8000826:	f104 0e20 	add.w	lr, r4, #32
 800082a:	4665      	mov	r5, ip
 800082c:	4626      	mov	r6, r4
 800082e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000830:	6028      	str	r0, [r5, #0]
 8000832:	6069      	str	r1, [r5, #4]
 8000834:	60aa      	str	r2, [r5, #8]
 8000836:	60eb      	str	r3, [r5, #12]
 8000838:	3410      	adds	r4, #16
 800083a:	f10c 0c10 	add.w	ip, ip, #16
 800083e:	4574      	cmp	r4, lr
 8000840:	d1f3      	bne.n	800082a <print_outAX25+0x22>
 8000842:	4662      	mov	r2, ip
 8000844:	4623      	mov	r3, r4
 8000846:	cb03      	ldmia	r3!, {r0, r1}
 8000848:	6010      	str	r0, [r2, #0]
 800084a:	6051      	str	r1, [r2, #4]
 800084c:	8819      	ldrh	r1, [r3, #0]
 800084e:	789b      	ldrb	r3, [r3, #2]
 8000850:	8111      	strh	r1, [r2, #8]
 8000852:	7293      	strb	r3, [r2, #10]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000854:	488a      	ldr	r0, [pc, #552]	; (8000a80 <print_outAX25+0x278>)
 8000856:	f7ff fcdb 	bl	8000210 <strlen>
 800085a:	4603      	mov	r3, r0
 800085c:	b29a      	uxth	r2, r3
 800085e:	230a      	movs	r3, #10
 8000860:	4987      	ldr	r1, [pc, #540]	; (8000a80 <print_outAX25+0x278>)
 8000862:	4889      	ldr	r0, [pc, #548]	; (8000a88 <print_outAX25+0x280>)
 8000864:	f005 f883 	bl	800596e <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = local_packet->address;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800086e:	3310      	adds	r3, #16
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
 8000878:	e040      	b.n	80008fc <print_outAX25+0xf4>
		sprintf(uartData, "Address Field %d =",i+1);
 800087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087c:	3301      	adds	r3, #1
 800087e:	461a      	mov	r2, r3
 8000880:	4982      	ldr	r1, [pc, #520]	; (8000a8c <print_outAX25+0x284>)
 8000882:	487f      	ldr	r0, [pc, #508]	; (8000a80 <print_outAX25+0x278>)
 8000884:	f005 ff9c 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000888:	487d      	ldr	r0, [pc, #500]	; (8000a80 <print_outAX25+0x278>)
 800088a:	f7ff fcc1 	bl	8000210 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29a      	uxth	r2, r3
 8000892:	230a      	movs	r3, #10
 8000894:	497a      	ldr	r1, [pc, #488]	; (8000a80 <print_outAX25+0x278>)
 8000896:	487c      	ldr	r0, [pc, #496]	; (8000a88 <print_outAX25+0x280>)
 8000898:	f005 f869 	bl	800596e <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
 80008a0:	e015      	b.n	80008ce <print_outAX25+0xc6>
			sprintf(uartData, " %d ",*(curr_mem+j));
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	4978      	ldr	r1, [pc, #480]	; (8000a90 <print_outAX25+0x288>)
 80008ae:	4874      	ldr	r0, [pc, #464]	; (8000a80 <print_outAX25+0x278>)
 80008b0:	f005 ff86 	bl	80067c0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80008b4:	4872      	ldr	r0, [pc, #456]	; (8000a80 <print_outAX25+0x278>)
 80008b6:	f7ff fcab 	bl	8000210 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	230a      	movs	r3, #10
 80008c0:	496f      	ldr	r1, [pc, #444]	; (8000a80 <print_outAX25+0x278>)
 80008c2:	4871      	ldr	r0, [pc, #452]	; (8000a88 <print_outAX25+0x280>)
 80008c4:	f005 f853 	bl	800596e <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80008c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ca:	3301      	adds	r3, #1
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	2b07      	cmp	r3, #7
 80008d2:	dde6      	ble.n	80008a2 <print_outAX25+0x9a>
		}
		curr_mem += 8;
 80008d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d6:	3308      	adds	r3, #8
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80008da:	4a69      	ldr	r2, [pc, #420]	; (8000a80 <print_outAX25+0x278>)
 80008dc:	4b6d      	ldr	r3, [pc, #436]	; (8000a94 <print_outAX25+0x28c>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80008e2:	4867      	ldr	r0, [pc, #412]	; (8000a80 <print_outAX25+0x278>)
 80008e4:	f7ff fc94 	bl	8000210 <strlen>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	230a      	movs	r3, #10
 80008ee:	4964      	ldr	r1, [pc, #400]	; (8000a80 <print_outAX25+0x278>)
 80008f0:	4865      	ldr	r0, [pc, #404]	; (8000a88 <print_outAX25+0x280>)
 80008f2:	f005 f83c 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 80008f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f8:	3301      	adds	r3, #1
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80008fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fe:	2b0d      	cmp	r3, #13
 8000900:	ddbb      	ble.n	800087a <print_outAX25+0x72>
	}

	//if address was bitstuffed then print rest of address field
	sprintf(uartData, "Address Field extra = ");
 8000902:	4a5f      	ldr	r2, [pc, #380]	; (8000a80 <print_outAX25+0x278>)
 8000904:	4b64      	ldr	r3, [pc, #400]	; (8000a98 <print_outAX25+0x290>)
 8000906:	4614      	mov	r4, r2
 8000908:	461d      	mov	r5, r3
 800090a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090c:	6020      	str	r0, [r4, #0]
 800090e:	6061      	str	r1, [r4, #4]
 8000910:	60a2      	str	r2, [r4, #8]
 8000912:	60e3      	str	r3, [r4, #12]
 8000914:	6828      	ldr	r0, [r5, #0]
 8000916:	6120      	str	r0, [r4, #16]
 8000918:	88ab      	ldrh	r3, [r5, #4]
 800091a:	79aa      	ldrb	r2, [r5, #6]
 800091c:	82a3      	strh	r3, [r4, #20]
 800091e:	4613      	mov	r3, r2
 8000920:	75a3      	strb	r3, [r4, #22]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000922:	4857      	ldr	r0, [pc, #348]	; (8000a80 <print_outAX25+0x278>)
 8000924:	f7ff fc74 	bl	8000210 <strlen>
 8000928:	4603      	mov	r3, r0
 800092a:	b29a      	uxth	r2, r3
 800092c:	230a      	movs	r3, #10
 800092e:	4954      	ldr	r1, [pc, #336]	; (8000a80 <print_outAX25+0x278>)
 8000930:	4855      	ldr	r0, [pc, #340]	; (8000a88 <print_outAX25+0x280>)
 8000932:	f005 f81c 	bl	800596e <HAL_UART_Transmit>
	curr_mem += address_len;
 8000936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000938:	3370      	adds	r3, #112	; 0x70
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_address > 0){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000942:	3310      	adds	r3, #16
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	dd21      	ble.n	800098e <print_outAX25+0x186>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
 800094e:	e016      	b.n	800097e <print_outAX25+0x176>
			sprintf(uartData, " %d ",*(curr_mem-i));
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	425b      	negs	r3, r3
 8000954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	494c      	ldr	r1, [pc, #304]	; (8000a90 <print_outAX25+0x288>)
 800095e:	4848      	ldr	r0, [pc, #288]	; (8000a80 <print_outAX25+0x278>)
 8000960:	f005 ff2e 	bl	80067c0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000964:	4846      	ldr	r0, [pc, #280]	; (8000a80 <print_outAX25+0x278>)
 8000966:	f7ff fc53 	bl	8000210 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29a      	uxth	r2, r3
 800096e:	230a      	movs	r3, #10
 8000970:	4943      	ldr	r1, [pc, #268]	; (8000a80 <print_outAX25+0x278>)
 8000972:	4845      	ldr	r0, [pc, #276]	; (8000a88 <print_outAX25+0x280>)
 8000974:	f004 fffb 	bl	800596e <HAL_UART_Transmit>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	3301      	adds	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000984:	3310      	adds	r3, #16
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	6a3a      	ldr	r2, [r7, #32]
 800098a:	429a      	cmp	r2, r3
 800098c:	dbe0      	blt.n	8000950 <print_outAX25+0x148>
		}
	}
	sprintf(uartData, "\n");
 800098e:	4a3c      	ldr	r2, [pc, #240]	; (8000a80 <print_outAX25+0x278>)
 8000990:	4b40      	ldr	r3, [pc, #256]	; (8000a94 <print_outAX25+0x28c>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000996:	483a      	ldr	r0, [pc, #232]	; (8000a80 <print_outAX25+0x278>)
 8000998:	f7ff fc3a 	bl	8000210 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	b29a      	uxth	r2, r3
 80009a0:	230a      	movs	r3, #10
 80009a2:	4937      	ldr	r1, [pc, #220]	; (8000a80 <print_outAX25+0x278>)
 80009a4:	4838      	ldr	r0, [pc, #224]	; (8000a88 <print_outAX25+0x280>)
 80009a6:	f004 ffe2 	bl	800596e <HAL_UART_Transmit>

	//Print Control Field
	curr_mem = local_packet->control;//Subtract 8 to start at the flag start
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80009b0:	3314      	adds	r3, #20
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 80009b6:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <print_outAX25+0x278>)
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <print_outAX25+0x294>)
 80009ba:	4615      	mov	r5, r2
 80009bc:	461c      	mov	r4, r3
 80009be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c0:	6028      	str	r0, [r5, #0]
 80009c2:	6069      	str	r1, [r5, #4]
 80009c4:	60aa      	str	r2, [r5, #8]
 80009c6:	60eb      	str	r3, [r5, #12]
 80009c8:	8823      	ldrh	r3, [r4, #0]
 80009ca:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009cc:	482c      	ldr	r0, [pc, #176]	; (8000a80 <print_outAX25+0x278>)
 80009ce:	f7ff fc1f 	bl	8000210 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	230a      	movs	r3, #10
 80009d8:	4929      	ldr	r1, [pc, #164]	; (8000a80 <print_outAX25+0x278>)
 80009da:	482b      	ldr	r0, [pc, #172]	; (8000a88 <print_outAX25+0x280>)
 80009dc:	f004 ffc7 	bl	800596e <HAL_UART_Transmit>

	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	e015      	b.n	8000a12 <print_outAX25+0x20a>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	4927      	ldr	r1, [pc, #156]	; (8000a90 <print_outAX25+0x288>)
 80009f2:	4823      	ldr	r0, [pc, #140]	; (8000a80 <print_outAX25+0x278>)
 80009f4:	f005 fee4 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009f8:	4821      	ldr	r0, [pc, #132]	; (8000a80 <print_outAX25+0x278>)
 80009fa:	f7ff fc09 	bl	8000210 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	230a      	movs	r3, #10
 8000a04:	491e      	ldr	r1, [pc, #120]	; (8000a80 <print_outAX25+0x278>)
 8000a06:	4820      	ldr	r0, [pc, #128]	; (8000a88 <print_outAX25+0x280>)
 8000a08:	f004 ffb1 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	61fb      	str	r3, [r7, #28]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000a18:	3314      	adds	r3, #20
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	69fa      	ldr	r2, [r7, #28]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbe0      	blt.n	80009e6 <print_outAX25+0x1de>
	}
	sprintf(uartData, "\n");
 8000a24:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <print_outAX25+0x278>)
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <print_outAX25+0x28c>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a2c:	4814      	ldr	r0, [pc, #80]	; (8000a80 <print_outAX25+0x278>)
 8000a2e:	f7ff fbef 	bl	8000210 <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	230a      	movs	r3, #10
 8000a38:	4911      	ldr	r1, [pc, #68]	; (8000a80 <print_outAX25+0x278>)
 8000a3a:	4813      	ldr	r0, [pc, #76]	; (8000a88 <print_outAX25+0x280>)
 8000a3c:	f004 ff97 	bl	800596e <HAL_UART_Transmit>

	//PID
	curr_mem = local_packet->PID;//Subtract 8 to start at the flag start
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000a46:	3318      	adds	r3, #24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <print_outAX25+0x278>)
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <print_outAX25+0x298>)
 8000a50:	4615      	mov	r5, r2
 8000a52:	461c      	mov	r4, r3
 8000a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a56:	6028      	str	r0, [r5, #0]
 8000a58:	6069      	str	r1, [r5, #4]
 8000a5a:	60aa      	str	r2, [r5, #8]
 8000a5c:	60eb      	str	r3, [r5, #12]
 8000a5e:	8823      	ldrh	r3, [r4, #0]
 8000a60:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <print_outAX25+0x278>)
 8000a64:	f7ff fbd4 	bl	8000210 <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	4904      	ldr	r1, [pc, #16]	; (8000a80 <print_outAX25+0x278>)
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <print_outAX25+0x280>)
 8000a72:	f004 ff7c 	bl	800596e <HAL_UART_Transmit>

	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
 8000a7a:	e029      	b.n	8000ad0 <print_outAX25+0x2c8>
 8000a7c:	200000d4 	.word	0x200000d4
 8000a80:	20001cd8 	.word	0x20001cd8
 8000a84:	08007100 	.word	0x08007100
 8000a88:	20002b94 	.word	0x20002b94
 8000a8c:	0800712c 	.word	0x0800712c
 8000a90:	08007140 	.word	0x08007140
 8000a94:	08007148 	.word	0x08007148
 8000a98:	0800714c 	.word	0x0800714c
 8000a9c:	08007164 	.word	0x08007164
 8000aa0:	08007178 	.word	0x08007178
		sprintf(uartData, " %d ",*(curr_mem+i));
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	499d      	ldr	r1, [pc, #628]	; (8000d24 <print_outAX25+0x51c>)
 8000ab0:	489d      	ldr	r0, [pc, #628]	; (8000d28 <print_outAX25+0x520>)
 8000ab2:	f005 fe85 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ab6:	489c      	ldr	r0, [pc, #624]	; (8000d28 <print_outAX25+0x520>)
 8000ab8:	f7ff fbaa 	bl	8000210 <strlen>
 8000abc:	4603      	mov	r3, r0
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	4999      	ldr	r1, [pc, #612]	; (8000d28 <print_outAX25+0x520>)
 8000ac4:	4899      	ldr	r0, [pc, #612]	; (8000d2c <print_outAX25+0x524>)
 8000ac6:	f004 ff52 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	3301      	adds	r3, #1
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000ad6:	3318      	adds	r3, #24
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3308      	adds	r3, #8
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	dbe0      	blt.n	8000aa4 <print_outAX25+0x29c>
	}
	sprintf(uartData, "\n");
 8000ae2:	4a91      	ldr	r2, [pc, #580]	; (8000d28 <print_outAX25+0x520>)
 8000ae4:	4b92      	ldr	r3, [pc, #584]	; (8000d30 <print_outAX25+0x528>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000aea:	488f      	ldr	r0, [pc, #572]	; (8000d28 <print_outAX25+0x520>)
 8000aec:	f7ff fb90 	bl	8000210 <strlen>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	230a      	movs	r3, #10
 8000af6:	498c      	ldr	r1, [pc, #560]	; (8000d28 <print_outAX25+0x520>)
 8000af8:	488c      	ldr	r0, [pc, #560]	; (8000d2c <print_outAX25+0x524>)
 8000afa:	f004 ff38 	bl	800596e <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = local_packet->Info;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b04:	331c      	adds	r3, #28
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e040      	b.n	8000b92 <print_outAX25+0x38a>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	461a      	mov	r2, r3
 8000b16:	4987      	ldr	r1, [pc, #540]	; (8000d34 <print_outAX25+0x52c>)
 8000b18:	4883      	ldr	r0, [pc, #524]	; (8000d28 <print_outAX25+0x520>)
 8000b1a:	f005 fe51 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b1e:	4882      	ldr	r0, [pc, #520]	; (8000d28 <print_outAX25+0x520>)
 8000b20:	f7ff fb76 	bl	8000210 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	230a      	movs	r3, #10
 8000b2a:	497f      	ldr	r1, [pc, #508]	; (8000d28 <print_outAX25+0x520>)
 8000b2c:	487f      	ldr	r0, [pc, #508]	; (8000d2c <print_outAX25+0x524>)
 8000b2e:	f004 ff1e 	bl	800596e <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	e015      	b.n	8000b64 <print_outAX25+0x35c>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4978      	ldr	r1, [pc, #480]	; (8000d24 <print_outAX25+0x51c>)
 8000b44:	4878      	ldr	r0, [pc, #480]	; (8000d28 <print_outAX25+0x520>)
 8000b46:	f005 fe3b 	bl	80067c0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b4a:	4877      	ldr	r0, [pc, #476]	; (8000d28 <print_outAX25+0x520>)
 8000b4c:	f7ff fb60 	bl	8000210 <strlen>
 8000b50:	4603      	mov	r3, r0
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	230a      	movs	r3, #10
 8000b56:	4974      	ldr	r1, [pc, #464]	; (8000d28 <print_outAX25+0x520>)
 8000b58:	4874      	ldr	r0, [pc, #464]	; (8000d2c <print_outAX25+0x524>)
 8000b5a:	f004 ff08 	bl	800596e <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	3301      	adds	r3, #1
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	2b07      	cmp	r3, #7
 8000b68:	dde6      	ble.n	8000b38 <print_outAX25+0x330>
		}
		curr_mem += 8;
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	3308      	adds	r3, #8
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000b70:	4a6d      	ldr	r2, [pc, #436]	; (8000d28 <print_outAX25+0x520>)
 8000b72:	4b6f      	ldr	r3, [pc, #444]	; (8000d30 <print_outAX25+0x528>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b78:	486b      	ldr	r0, [pc, #428]	; (8000d28 <print_outAX25+0x520>)
 8000b7a:	f7ff fb49 	bl	8000210 <strlen>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	230a      	movs	r3, #10
 8000b84:	4968      	ldr	r1, [pc, #416]	; (8000d28 <print_outAX25+0x520>)
 8000b86:	4869      	ldr	r0, [pc, #420]	; (8000d2c <print_outAX25+0x524>)
 8000b88:	f004 fef1 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	da00      	bge.n	8000ba0 <print_outAX25+0x398>
 8000b9e:	3307      	adds	r3, #7
 8000ba0:	10db      	asrs	r3, r3, #3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	dbb2      	blt.n	8000b10 <print_outAX25+0x308>
	}

	//if Info was bitstuffed then print rest of address field
	sprintf(uartData, "Info Field extra = ");
 8000baa:	4a5f      	ldr	r2, [pc, #380]	; (8000d28 <print_outAX25+0x520>)
 8000bac:	4b62      	ldr	r3, [pc, #392]	; (8000d38 <print_outAX25+0x530>)
 8000bae:	4615      	mov	r5, r2
 8000bb0:	461c      	mov	r4, r3
 8000bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb4:	6028      	str	r0, [r5, #0]
 8000bb6:	6069      	str	r1, [r5, #4]
 8000bb8:	60aa      	str	r2, [r5, #8]
 8000bba:	60eb      	str	r3, [r5, #12]
 8000bbc:	6820      	ldr	r0, [r4, #0]
 8000bbe:	6128      	str	r0, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000bc0:	4859      	ldr	r0, [pc, #356]	; (8000d28 <print_outAX25+0x520>)
 8000bc2:	f7ff fb25 	bl	8000210 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	230a      	movs	r3, #10
 8000bcc:	4956      	ldr	r1, [pc, #344]	; (8000d28 <print_outAX25+0x520>)
 8000bce:	4857      	ldr	r0, [pc, #348]	; (8000d2c <print_outAX25+0x524>)
 8000bd0:	f004 fecd 	bl	800596e <HAL_UART_Transmit>
	curr_mem += local_packet->Info_Len;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be0:	4413      	add	r3, r2
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_Info > 0){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000bea:	331c      	adds	r3, #28
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dd20      	ble.n	8000c34 <print_outAX25+0x42c>
		for(int i = 0; i < local_packet->stuffed_Info; i++){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e015      	b.n	8000c24 <print_outAX25+0x41c>
			sprintf(uartData, " %d ",*(curr_mem+i));
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bfc:	4413      	add	r3, r2
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4948      	ldr	r1, [pc, #288]	; (8000d24 <print_outAX25+0x51c>)
 8000c04:	4848      	ldr	r0, [pc, #288]	; (8000d28 <print_outAX25+0x520>)
 8000c06:	f005 fddb 	bl	80067c0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c0a:	4847      	ldr	r0, [pc, #284]	; (8000d28 <print_outAX25+0x520>)
 8000c0c:	f7ff fb00 	bl	8000210 <strlen>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	230a      	movs	r3, #10
 8000c16:	4944      	ldr	r1, [pc, #272]	; (8000d28 <print_outAX25+0x520>)
 8000c18:	4844      	ldr	r0, [pc, #272]	; (8000d2c <print_outAX25+0x524>)
 8000c1a:	f004 fea8 	bl	800596e <HAL_UART_Transmit>
		for(int i = 0; i < local_packet->stuffed_Info; i++){
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000c2a:	331c      	adds	r3, #28
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbe1      	blt.n	8000bf8 <print_outAX25+0x3f0>
		}
	}
	sprintf(uartData, "\n");
 8000c34:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <print_outAX25+0x520>)
 8000c36:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <print_outAX25+0x528>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c3c:	483a      	ldr	r0, [pc, #232]	; (8000d28 <print_outAX25+0x520>)
 8000c3e:	f7ff fae7 	bl	8000210 <strlen>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	230a      	movs	r3, #10
 8000c48:	4937      	ldr	r1, [pc, #220]	; (8000d28 <print_outAX25+0x520>)
 8000c4a:	4838      	ldr	r0, [pc, #224]	; (8000d2c <print_outAX25+0x524>)
 8000c4c:	f004 fe8f 	bl	800596e <HAL_UART_Transmit>

	curr_mem = local_packet->FCS;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000c56:	3304      	adds	r3, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "FCS Field     =")	;
 8000c5c:	4a32      	ldr	r2, [pc, #200]	; (8000d28 <print_outAX25+0x520>)
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <print_outAX25+0x534>)
 8000c60:	4614      	mov	r4, r2
 8000c62:	461d      	mov	r5, r3
 8000c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c66:	6020      	str	r0, [r4, #0]
 8000c68:	6061      	str	r1, [r4, #4]
 8000c6a:	60a2      	str	r2, [r4, #8]
 8000c6c:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c6e:	482e      	ldr	r0, [pc, #184]	; (8000d28 <print_outAX25+0x520>)
 8000c70:	f7ff face 	bl	8000210 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	230a      	movs	r3, #10
 8000c7a:	492b      	ldr	r1, [pc, #172]	; (8000d28 <print_outAX25+0x520>)
 8000c7c:	482b      	ldr	r0, [pc, #172]	; (8000d2c <print_outAX25+0x524>)
 8000c7e:	f004 fe76 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	e015      	b.n	8000cb4 <print_outAX25+0x4ac>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c8c:	4413      	add	r3, r2
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4924      	ldr	r1, [pc, #144]	; (8000d24 <print_outAX25+0x51c>)
 8000c94:	4824      	ldr	r0, [pc, #144]	; (8000d28 <print_outAX25+0x520>)
 8000c96:	f005 fd93 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c9a:	4823      	ldr	r0, [pc, #140]	; (8000d28 <print_outAX25+0x520>)
 8000c9c:	f7ff fab8 	bl	8000210 <strlen>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	4920      	ldr	r1, [pc, #128]	; (8000d28 <print_outAX25+0x520>)
 8000ca8:	4820      	ldr	r0, [pc, #128]	; (8000d2c <print_outAX25+0x524>)
 8000caa:	f004 fe60 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3310      	adds	r3, #16
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbe1      	blt.n	8000c88 <print_outAX25+0x480>
	}

	sprintf(uartData, "\n");
 8000cc4:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <print_outAX25+0x520>)
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <print_outAX25+0x528>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ccc:	4816      	ldr	r0, [pc, #88]	; (8000d28 <print_outAX25+0x520>)
 8000cce:	f7ff fa9f 	bl	8000210 <strlen>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	4913      	ldr	r1, [pc, #76]	; (8000d28 <print_outAX25+0x520>)
 8000cda:	4814      	ldr	r0, [pc, #80]	; (8000d2c <print_outAX25+0x524>)
 8000cdc:	f004 fe47 	bl	800596e <HAL_UART_Transmit>

	//reset bitstuff members
	local_packet->stuffed_address = 0;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000ce6:	3310      	adds	r3, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_control = 0;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000cf2:	3314      	adds	r3, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_PID = 0;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000cfe:	3318      	adds	r3, #24
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_Info = 0;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d0a:	331c      	adds	r3, #28
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_FCS = 0;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
}
 8000d1a:	bf00      	nop
 8000d1c:	3734      	adds	r7, #52	; 0x34
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d22:	bf00      	nop
 8000d24:	08007140 	.word	0x08007140
 8000d28:	20001cd8 	.word	0x20001cd8
 8000d2c:	20002b94 	.word	0x20002b94
 8000d30:	08007148 	.word	0x08007148
 8000d34:	0800718c 	.word	0x0800718c
 8000d38:	080071a0 	.word	0x080071a0
 8000d3c:	080071b4 	.word	0x080071b4

08000d40 <print_AX25>:

void print_AX25(){
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	b08d      	sub	sp, #52	; 0x34
 8000d44:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000d46:	4b90      	ldr	r3, [pc, #576]	; (8000f88 <print_AX25+0x248>)
 8000d48:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d50:	330c      	adds	r3, #12
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 8000d56:	4b8d      	ldr	r3, [pc, #564]	; (8000f8c <print_AX25+0x24c>)
 8000d58:	4a8d      	ldr	r2, [pc, #564]	; (8000f90 <print_AX25+0x250>)
 8000d5a:	4614      	mov	r4, r2
 8000d5c:	469c      	mov	ip, r3
 8000d5e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d62:	4665      	mov	r5, ip
 8000d64:	4626      	mov	r6, r4
 8000d66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d68:	6028      	str	r0, [r5, #0]
 8000d6a:	6069      	str	r1, [r5, #4]
 8000d6c:	60aa      	str	r2, [r5, #8]
 8000d6e:	60eb      	str	r3, [r5, #12]
 8000d70:	3410      	adds	r4, #16
 8000d72:	f10c 0c10 	add.w	ip, ip, #16
 8000d76:	4574      	cmp	r4, lr
 8000d78:	d1f3      	bne.n	8000d62 <print_AX25+0x22>
 8000d7a:	4663      	mov	r3, ip
 8000d7c:	4622      	mov	r2, r4
 8000d7e:	6810      	ldr	r0, [r2, #0]
 8000d80:	6018      	str	r0, [r3, #0]
 8000d82:	8891      	ldrh	r1, [r2, #4]
 8000d84:	7992      	ldrb	r2, [r2, #6]
 8000d86:	8099      	strh	r1, [r3, #4]
 8000d88:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d8a:	4880      	ldr	r0, [pc, #512]	; (8000f8c <print_AX25+0x24c>)
 8000d8c:	f7ff fa40 	bl	8000210 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	230a      	movs	r3, #10
 8000d96:	497d      	ldr	r1, [pc, #500]	; (8000f8c <print_AX25+0x24c>)
 8000d98:	487e      	ldr	r0, [pc, #504]	; (8000f94 <print_AX25+0x254>)
 8000d9a:	f004 fde8 	bl	800596e <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->AX25_PACKET) + address_len - 1;
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	336f      	adds	r3, #111	; 0x6f
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000da8:	e041      	b.n	8000e2e <print_AX25+0xee>
		sprintf(uartData, "Address Field %d =",i+1);
 8000daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dac:	3301      	adds	r3, #1
 8000dae:	461a      	mov	r2, r3
 8000db0:	4979      	ldr	r1, [pc, #484]	; (8000f98 <print_AX25+0x258>)
 8000db2:	4876      	ldr	r0, [pc, #472]	; (8000f8c <print_AX25+0x24c>)
 8000db4:	f005 fd04 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000db8:	4874      	ldr	r0, [pc, #464]	; (8000f8c <print_AX25+0x24c>)
 8000dba:	f7ff fa29 	bl	8000210 <strlen>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	230a      	movs	r3, #10
 8000dc4:	4971      	ldr	r1, [pc, #452]	; (8000f8c <print_AX25+0x24c>)
 8000dc6:	4873      	ldr	r0, [pc, #460]	; (8000f94 <print_AX25+0x254>)
 8000dc8:	f004 fdd1 	bl	800596e <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd0:	e016      	b.n	8000e00 <print_AX25+0xc0>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	425b      	negs	r3, r3
 8000dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dd8:	4413      	add	r3, r2
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	496f      	ldr	r1, [pc, #444]	; (8000f9c <print_AX25+0x25c>)
 8000de0:	486a      	ldr	r0, [pc, #424]	; (8000f8c <print_AX25+0x24c>)
 8000de2:	f005 fced 	bl	80067c0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000de6:	4869      	ldr	r0, [pc, #420]	; (8000f8c <print_AX25+0x24c>)
 8000de8:	f7ff fa12 	bl	8000210 <strlen>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	230a      	movs	r3, #10
 8000df2:	4966      	ldr	r1, [pc, #408]	; (8000f8c <print_AX25+0x24c>)
 8000df4:	4867      	ldr	r0, [pc, #412]	; (8000f94 <print_AX25+0x254>)
 8000df6:	f004 fdba 	bl	800596e <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	2b07      	cmp	r3, #7
 8000e04:	dde5      	ble.n	8000dd2 <print_AX25+0x92>
		}
		curr_mem -= 8;
 8000e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e08:	3b08      	subs	r3, #8
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000e0c:	4a5f      	ldr	r2, [pc, #380]	; (8000f8c <print_AX25+0x24c>)
 8000e0e:	4b64      	ldr	r3, [pc, #400]	; (8000fa0 <print_AX25+0x260>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e14:	485d      	ldr	r0, [pc, #372]	; (8000f8c <print_AX25+0x24c>)
 8000e16:	f7ff f9fb 	bl	8000210 <strlen>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	230a      	movs	r3, #10
 8000e20:	495a      	ldr	r1, [pc, #360]	; (8000f8c <print_AX25+0x24c>)
 8000e22:	485c      	ldr	r0, [pc, #368]	; (8000f94 <print_AX25+0x254>)
 8000e24:	f004 fda3 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e30:	2b0d      	cmp	r3, #13
 8000e32:	ddba      	ble.n	8000daa <print_AX25+0x6a>
	}

	//Print Control Field
	curr_mem += address_len;//Subtract 8 to start at the flag start
 8000e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e36:	3370      	adds	r3, #112	; 0x70
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8000e3a:	4a54      	ldr	r2, [pc, #336]	; (8000f8c <print_AX25+0x24c>)
 8000e3c:	4b59      	ldr	r3, [pc, #356]	; (8000fa4 <print_AX25+0x264>)
 8000e3e:	4615      	mov	r5, r2
 8000e40:	461c      	mov	r4, r3
 8000e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e44:	6028      	str	r0, [r5, #0]
 8000e46:	6069      	str	r1, [r5, #4]
 8000e48:	60aa      	str	r2, [r5, #8]
 8000e4a:	60eb      	str	r3, [r5, #12]
 8000e4c:	8823      	ldrh	r3, [r4, #0]
 8000e4e:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e50:	484e      	ldr	r0, [pc, #312]	; (8000f8c <print_AX25+0x24c>)
 8000e52:	f7ff f9dd 	bl	8000210 <strlen>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	494b      	ldr	r1, [pc, #300]	; (8000f8c <print_AX25+0x24c>)
 8000e5e:	484d      	ldr	r0, [pc, #308]	; (8000f94 <print_AX25+0x254>)
 8000e60:	f004 fd85 	bl	800596e <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
 8000e68:	e017      	b.n	8000e9a <print_AX25+0x15a>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000e6a:	6a3b      	ldr	r3, [r7, #32]
 8000e6c:	f1c3 0307 	rsb	r3, r3, #7
 8000e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4948      	ldr	r1, [pc, #288]	; (8000f9c <print_AX25+0x25c>)
 8000e7a:	4844      	ldr	r0, [pc, #272]	; (8000f8c <print_AX25+0x24c>)
 8000e7c:	f005 fca0 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e80:	4842      	ldr	r0, [pc, #264]	; (8000f8c <print_AX25+0x24c>)
 8000e82:	f7ff f9c5 	bl	8000210 <strlen>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	493f      	ldr	r1, [pc, #252]	; (8000f8c <print_AX25+0x24c>)
 8000e8e:	4841      	ldr	r0, [pc, #260]	; (8000f94 <print_AX25+0x254>)
 8000e90:	f004 fd6d 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	3301      	adds	r3, #1
 8000e98:	623b      	str	r3, [r7, #32]
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
 8000e9c:	2b07      	cmp	r3, #7
 8000e9e:	dde4      	ble.n	8000e6a <print_AX25+0x12a>
	}
	sprintf(uartData, "\n");
 8000ea0:	4a3a      	ldr	r2, [pc, #232]	; (8000f8c <print_AX25+0x24c>)
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <print_AX25+0x260>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ea8:	4838      	ldr	r0, [pc, #224]	; (8000f8c <print_AX25+0x24c>)
 8000eaa:	f7ff f9b1 	bl	8000210 <strlen>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	4935      	ldr	r1, [pc, #212]	; (8000f8c <print_AX25+0x24c>)
 8000eb6:	4837      	ldr	r0, [pc, #220]	; (8000f94 <print_AX25+0x254>)
 8000eb8:	f004 fd59 	bl	800596e <HAL_UART_Transmit>

	//PID
	curr_mem += control_len;//Subtract 8 to start at the flag start
 8000ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8000ec2:	4a32      	ldr	r2, [pc, #200]	; (8000f8c <print_AX25+0x24c>)
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <print_AX25+0x268>)
 8000ec6:	4615      	mov	r5, r2
 8000ec8:	461c      	mov	r4, r3
 8000eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ecc:	6028      	str	r0, [r5, #0]
 8000ece:	6069      	str	r1, [r5, #4]
 8000ed0:	60aa      	str	r2, [r5, #8]
 8000ed2:	60eb      	str	r3, [r5, #12]
 8000ed4:	8823      	ldrh	r3, [r4, #0]
 8000ed6:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ed8:	482c      	ldr	r0, [pc, #176]	; (8000f8c <print_AX25+0x24c>)
 8000eda:	f7ff f999 	bl	8000210 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	4929      	ldr	r1, [pc, #164]	; (8000f8c <print_AX25+0x24c>)
 8000ee6:	482b      	ldr	r0, [pc, #172]	; (8000f94 <print_AX25+0x254>)
 8000ee8:	f004 fd41 	bl	800596e <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
 8000ef0:	e017      	b.n	8000f22 <print_AX25+0x1e2>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f1c3 0307 	rsb	r3, r3, #7
 8000ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4926      	ldr	r1, [pc, #152]	; (8000f9c <print_AX25+0x25c>)
 8000f02:	4822      	ldr	r0, [pc, #136]	; (8000f8c <print_AX25+0x24c>)
 8000f04:	f005 fc5c 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f08:	4820      	ldr	r0, [pc, #128]	; (8000f8c <print_AX25+0x24c>)
 8000f0a:	f7ff f981 	bl	8000210 <strlen>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	230a      	movs	r3, #10
 8000f14:	491d      	ldr	r1, [pc, #116]	; (8000f8c <print_AX25+0x24c>)
 8000f16:	481f      	ldr	r0, [pc, #124]	; (8000f94 <print_AX25+0x254>)
 8000f18:	f004 fd29 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	2b07      	cmp	r3, #7
 8000f26:	dde4      	ble.n	8000ef2 <print_AX25+0x1b2>
	}
	sprintf(uartData, "\n");
 8000f28:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <print_AX25+0x24c>)
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <print_AX25+0x260>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f30:	4816      	ldr	r0, [pc, #88]	; (8000f8c <print_AX25+0x24c>)
 8000f32:	f7ff f96d 	bl	8000210 <strlen>
 8000f36:	4603      	mov	r3, r0
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	4913      	ldr	r1, [pc, #76]	; (8000f8c <print_AX25+0x24c>)
 8000f3e:	4815      	ldr	r0, [pc, #84]	; (8000f94 <print_AX25+0x254>)
 8000f40:	f004 fd15 	bl	800596e <HAL_UART_Transmit>
	curr_mem += PID_len;
 8000f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f46:	3308      	adds	r3, #8
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Print Info Field
	curr_mem += local_packet->Info_Len - 1;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f56:	4413      	add	r3, r2
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
 8000f5e:	e055      	b.n	800100c <print_AX25+0x2cc>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	3301      	adds	r3, #1
 8000f64:	461a      	mov	r2, r3
 8000f66:	4911      	ldr	r1, [pc, #68]	; (8000fac <print_AX25+0x26c>)
 8000f68:	4808      	ldr	r0, [pc, #32]	; (8000f8c <print_AX25+0x24c>)
 8000f6a:	f005 fc29 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <print_AX25+0x24c>)
 8000f70:	f7ff f94e 	bl	8000210 <strlen>
 8000f74:	4603      	mov	r3, r0
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	230a      	movs	r3, #10
 8000f7a:	4904      	ldr	r1, [pc, #16]	; (8000f8c <print_AX25+0x24c>)
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <print_AX25+0x254>)
 8000f7e:	f004 fcf6 	bl	800596e <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e02a      	b.n	8000fde <print_AX25+0x29e>
 8000f88:	200000d4 	.word	0x200000d4
 8000f8c:	20001cd8 	.word	0x20001cd8
 8000f90:	080071c4 	.word	0x080071c4
 8000f94:	20002b94 	.word	0x20002b94
 8000f98:	0800712c 	.word	0x0800712c
 8000f9c:	08007140 	.word	0x08007140
 8000fa0:	08007148 	.word	0x08007148
 8000fa4:	08007164 	.word	0x08007164
 8000fa8:	08007178 	.word	0x08007178
 8000fac:	0800718c 	.word	0x0800718c
			sprintf(uartData, " %d ",*(curr_mem-j));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	425b      	negs	r3, r3
 8000fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4945      	ldr	r1, [pc, #276]	; (80010d4 <print_AX25+0x394>)
 8000fbe:	4846      	ldr	r0, [pc, #280]	; (80010d8 <print_AX25+0x398>)
 8000fc0:	f005 fbfe 	bl	80067c0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000fc4:	4844      	ldr	r0, [pc, #272]	; (80010d8 <print_AX25+0x398>)
 8000fc6:	f7ff f923 	bl	8000210 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	230a      	movs	r3, #10
 8000fd0:	4941      	ldr	r1, [pc, #260]	; (80010d8 <print_AX25+0x398>)
 8000fd2:	4842      	ldr	r0, [pc, #264]	; (80010dc <print_AX25+0x39c>)
 8000fd4:	f004 fccb 	bl	800596e <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b07      	cmp	r3, #7
 8000fe2:	dde5      	ble.n	8000fb0 <print_AX25+0x270>
		}
		curr_mem -= 8;
 8000fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe6:	3b08      	subs	r3, #8
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8000fea:	4a3b      	ldr	r2, [pc, #236]	; (80010d8 <print_AX25+0x398>)
 8000fec:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <print_AX25+0x3a0>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000ff2:	4839      	ldr	r0, [pc, #228]	; (80010d8 <print_AX25+0x398>)
 8000ff4:	f7ff f90c 	bl	8000210 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	4936      	ldr	r1, [pc, #216]	; (80010d8 <print_AX25+0x398>)
 8001000:	4836      	ldr	r0, [pc, #216]	; (80010dc <print_AX25+0x39c>)
 8001002:	f004 fcb4 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	3301      	adds	r3, #1
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	da00      	bge.n	800101a <print_AX25+0x2da>
 8001018:	3307      	adds	r3, #7
 800101a:	10db      	asrs	r3, r3, #3
 800101c:	461a      	mov	r2, r3
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	4293      	cmp	r3, r2
 8001022:	db9d      	blt.n	8000f60 <print_AX25+0x220>
	}
	curr_mem += local_packet->Info_Len;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001030:	4413      	add	r3, r2
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c

	curr_mem += FCS_len - 8;
 8001034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001036:	3308      	adds	r3, #8
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(FCS_len/8);i++){
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	e042      	b.n	80010c6 <print_AX25+0x386>
		sprintf(uartData, "FCS Field %d     =",i+1)	;
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	3301      	adds	r3, #1
 8001044:	461a      	mov	r2, r3
 8001046:	4927      	ldr	r1, [pc, #156]	; (80010e4 <print_AX25+0x3a4>)
 8001048:	4823      	ldr	r0, [pc, #140]	; (80010d8 <print_AX25+0x398>)
 800104a:	f005 fbb9 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800104e:	4822      	ldr	r0, [pc, #136]	; (80010d8 <print_AX25+0x398>)
 8001050:	f7ff f8de 	bl	8000210 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	230a      	movs	r3, #10
 800105a:	491f      	ldr	r1, [pc, #124]	; (80010d8 <print_AX25+0x398>)
 800105c:	481f      	ldr	r0, [pc, #124]	; (80010dc <print_AX25+0x39c>)
 800105e:	f004 fc86 	bl	800596e <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	e017      	b.n	8001098 <print_AX25+0x358>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4917      	ldr	r1, [pc, #92]	; (80010d4 <print_AX25+0x394>)
 8001078:	4817      	ldr	r0, [pc, #92]	; (80010d8 <print_AX25+0x398>)
 800107a:	f005 fba1 	bl	80067c0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800107e:	4816      	ldr	r0, [pc, #88]	; (80010d8 <print_AX25+0x398>)
 8001080:	f7ff f8c6 	bl	8000210 <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	b29a      	uxth	r2, r3
 8001088:	230a      	movs	r3, #10
 800108a:	4913      	ldr	r1, [pc, #76]	; (80010d8 <print_AX25+0x398>)
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <print_AX25+0x39c>)
 800108e:	f004 fc6e 	bl	800596e <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b07      	cmp	r3, #7
 800109c:	dde4      	ble.n	8001068 <print_AX25+0x328>
		}
		curr_mem -= 8;
 800109e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a0:	3b08      	subs	r3, #8
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <print_AX25+0x398>)
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <print_AX25+0x3a0>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010ac:	480a      	ldr	r0, [pc, #40]	; (80010d8 <print_AX25+0x398>)
 80010ae:	f7ff f8af 	bl	8000210 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	230a      	movs	r3, #10
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <print_AX25+0x398>)
 80010ba:	4808      	ldr	r0, [pc, #32]	; (80010dc <print_AX25+0x39c>)
 80010bc:	f004 fc57 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<(FCS_len/8);i++){
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	3301      	adds	r3, #1
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	ddb9      	ble.n	8001040 <print_AX25+0x300>
	}
}
 80010cc:	bf00      	nop
 80010ce:	3734      	adds	r7, #52	; 0x34
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d4:	08007140 	.word	0x08007140
 80010d8:	20001cd8 	.word	0x20001cd8
 80010dc:	20002b94 	.word	0x20002b94
 80010e0:	08007148 	.word	0x08007148
 80010e4:	080071fc 	.word	0x080071fc

080010e8 <clear_AX25>:
void clear_AX25(){
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <clear_AX25+0x5c>)
 80010f0:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 80010f2:	4a15      	ldr	r2, [pc, #84]	; (8001148 <clear_AX25+0x60>)
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <clear_AX25+0x64>)
 80010f6:	4615      	mov	r5, r2
 80010f8:	461c      	mov	r4, r3
 80010fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010fc:	6028      	str	r0, [r5, #0]
 80010fe:	6069      	str	r1, [r5, #4]
 8001100:	60aa      	str	r2, [r5, #8]
 8001102:	60eb      	str	r3, [r5, #12]
 8001104:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001106:	6128      	str	r0, [r5, #16]
 8001108:	6169      	str	r1, [r5, #20]
 800110a:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800110c:	480e      	ldr	r0, [pc, #56]	; (8001148 <clear_AX25+0x60>)
 800110e:	f7ff f87f 	bl	8000210 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	b29a      	uxth	r2, r3
 8001116:	230a      	movs	r3, #10
 8001118:	490b      	ldr	r1, [pc, #44]	; (8001148 <clear_AX25+0x60>)
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <clear_AX25+0x68>)
 800111c:	f004 fc27 	bl	800596e <HAL_UART_Transmit>

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f640 225f 	movw	r2, #2655	; 0xa5f
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f005 fb35 	bl	8006798 <memcpy>
	local_packet->got_packet = false;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001134:	3309      	adds	r3, #9
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bdb0      	pop	{r4, r5, r7, pc}
 8001142:	bf00      	nop
 8001144:	200000d4 	.word	0x200000d4
 8001148:	20001cd8 	.word	0x20001cd8
 800114c:	08007210 	.word	0x08007210
 8001150:	20002b94 	.word	0x20002b94

08001154 <print_KISS>:

void output_KISS() {
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}
void print_KISS(){
 8001154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001156:	b08d      	sub	sp, #52	; 0x34
 8001158:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800115a:	4baf      	ldr	r3, [pc, #700]	; (8001418 <print_KISS+0x2c4>)
 800115c:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001164:	330c      	adds	r3, #12
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 800116a:	4bac      	ldr	r3, [pc, #688]	; (800141c <print_KISS+0x2c8>)
 800116c:	4aac      	ldr	r2, [pc, #688]	; (8001420 <print_KISS+0x2cc>)
 800116e:	4614      	mov	r4, r2
 8001170:	469c      	mov	ip, r3
 8001172:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001176:	4665      	mov	r5, ip
 8001178:	4626      	mov	r6, r4
 800117a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800117c:	6028      	str	r0, [r5, #0]
 800117e:	6069      	str	r1, [r5, #4]
 8001180:	60aa      	str	r2, [r5, #8]
 8001182:	60eb      	str	r3, [r5, #12]
 8001184:	3410      	adds	r4, #16
 8001186:	f10c 0c10 	add.w	ip, ip, #16
 800118a:	4574      	cmp	r4, lr
 800118c:	d1f3      	bne.n	8001176 <print_KISS+0x22>
 800118e:	4663      	mov	r3, ip
 8001190:	4622      	mov	r2, r4
 8001192:	6810      	ldr	r0, [r2, #0]
 8001194:	6018      	str	r0, [r3, #0]
 8001196:	8891      	ldrh	r1, [r2, #4]
 8001198:	7992      	ldrb	r2, [r2, #6]
 800119a:	8099      	strh	r1, [r3, #4]
 800119c:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800119e:	489f      	ldr	r0, [pc, #636]	; (800141c <print_KISS+0x2c8>)
 80011a0:	f7ff f836 	bl	8000210 <strlen>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	230a      	movs	r3, #10
 80011aa:	499c      	ldr	r1, [pc, #624]	; (800141c <print_KISS+0x2c8>)
 80011ac:	489d      	ldr	r0, [pc, #628]	; (8001424 <print_KISS+0x2d0>)
 80011ae:	f004 fbde 	bl	800596e <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address + address_len + 16 - 1);//start at the flag start
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011b8:	3310      	adds	r3, #16
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	337f      	adds	r3, #127	; 0x7f
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 80011c0:	4a96      	ldr	r2, [pc, #600]	; (800141c <print_KISS+0x2c8>)
 80011c2:	4b99      	ldr	r3, [pc, #612]	; (8001428 <print_KISS+0x2d4>)
 80011c4:	4615      	mov	r5, r2
 80011c6:	461c      	mov	r4, r3
 80011c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ca:	6028      	str	r0, [r5, #0]
 80011cc:	6069      	str	r1, [r5, #4]
 80011ce:	60aa      	str	r2, [r5, #8]
 80011d0:	60eb      	str	r3, [r5, #12]
 80011d2:	8823      	ldrh	r3, [r4, #0]
 80011d4:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80011d6:	4891      	ldr	r0, [pc, #580]	; (800141c <print_KISS+0x2c8>)
 80011d8:	f7ff f81a 	bl	8000210 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	b29a      	uxth	r2, r3
 80011e0:	230a      	movs	r3, #10
 80011e2:	498e      	ldr	r1, [pc, #568]	; (800141c <print_KISS+0x2c8>)
 80011e4:	488f      	ldr	r0, [pc, #572]	; (8001424 <print_KISS+0x2d0>)
 80011e6:	f004 fbc2 	bl	800596e <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80011ea:	2300      	movs	r3, #0
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ee:	e016      	b.n	800121e <print_KISS+0xca>
		sprintf(uartData, " %d ",*(curr_mem-i));
 80011f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f2:	425b      	negs	r3, r3
 80011f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	498b      	ldr	r1, [pc, #556]	; (800142c <print_KISS+0x2d8>)
 80011fe:	4887      	ldr	r0, [pc, #540]	; (800141c <print_KISS+0x2c8>)
 8001200:	f005 fade 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001204:	4885      	ldr	r0, [pc, #532]	; (800141c <print_KISS+0x2c8>)
 8001206:	f7ff f803 	bl	8000210 <strlen>
 800120a:	4603      	mov	r3, r0
 800120c:	b29a      	uxth	r2, r3
 800120e:	230a      	movs	r3, #10
 8001210:	4982      	ldr	r1, [pc, #520]	; (800141c <print_KISS+0x2c8>)
 8001212:	4884      	ldr	r0, [pc, #528]	; (8001424 <print_KISS+0x2d0>)
 8001214:	f004 fbab 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121a:	3301      	adds	r3, #1
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
 800121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001220:	2b07      	cmp	r3, #7
 8001222:	dde5      	ble.n	80011f0 <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 8001224:	4a7d      	ldr	r2, [pc, #500]	; (800141c <print_KISS+0x2c8>)
 8001226:	4b82      	ldr	r3, [pc, #520]	; (8001430 <print_KISS+0x2dc>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800122c:	487b      	ldr	r0, [pc, #492]	; (800141c <print_KISS+0x2c8>)
 800122e:	f7fe ffef 	bl	8000210 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	b29a      	uxth	r2, r3
 8001236:	230a      	movs	r3, #10
 8001238:	4978      	ldr	r1, [pc, #480]	; (800141c <print_KISS+0x2c8>)
 800123a:	487a      	ldr	r0, [pc, #488]	; (8001424 <print_KISS+0x2d0>)
 800123c:	f004 fb97 	bl	800596e <HAL_UART_Transmit>

	curr_mem = (local_packet->address) + address_len - 1;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001246:	3310      	adds	r3, #16
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	336f      	adds	r3, #111	; 0x6f
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
 8001252:	e041      	b.n	80012d8 <print_KISS+0x184>
		sprintf(uartData, "Address Field %d =",i+1);
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	3301      	adds	r3, #1
 8001258:	461a      	mov	r2, r3
 800125a:	4976      	ldr	r1, [pc, #472]	; (8001434 <print_KISS+0x2e0>)
 800125c:	486f      	ldr	r0, [pc, #444]	; (800141c <print_KISS+0x2c8>)
 800125e:	f005 faaf 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001262:	486e      	ldr	r0, [pc, #440]	; (800141c <print_KISS+0x2c8>)
 8001264:	f7fe ffd4 	bl	8000210 <strlen>
 8001268:	4603      	mov	r3, r0
 800126a:	b29a      	uxth	r2, r3
 800126c:	230a      	movs	r3, #10
 800126e:	496b      	ldr	r1, [pc, #428]	; (800141c <print_KISS+0x2c8>)
 8001270:	486c      	ldr	r0, [pc, #432]	; (8001424 <print_KISS+0x2d0>)
 8001272:	f004 fb7c 	bl	800596e <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
 800127a:	e016      	b.n	80012aa <print_KISS+0x156>
			sprintf(uartData, " %d ",*(curr_mem-j));
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	425b      	negs	r3, r3
 8001280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4968      	ldr	r1, [pc, #416]	; (800142c <print_KISS+0x2d8>)
 800128a:	4864      	ldr	r0, [pc, #400]	; (800141c <print_KISS+0x2c8>)
 800128c:	f005 fa98 	bl	80067c0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001290:	4862      	ldr	r0, [pc, #392]	; (800141c <print_KISS+0x2c8>)
 8001292:	f7fe ffbd 	bl	8000210 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	230a      	movs	r3, #10
 800129c:	495f      	ldr	r1, [pc, #380]	; (800141c <print_KISS+0x2c8>)
 800129e:	4861      	ldr	r0, [pc, #388]	; (8001424 <print_KISS+0x2d0>)
 80012a0:	f004 fb65 	bl	800596e <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	3301      	adds	r3, #1
 80012a8:	623b      	str	r3, [r7, #32]
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	2b07      	cmp	r3, #7
 80012ae:	dde5      	ble.n	800127c <print_KISS+0x128>
		}
		curr_mem -= 8;
 80012b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b2:	3b08      	subs	r3, #8
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80012b6:	4a59      	ldr	r2, [pc, #356]	; (800141c <print_KISS+0x2c8>)
 80012b8:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <print_KISS+0x2dc>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012be:	4857      	ldr	r0, [pc, #348]	; (800141c <print_KISS+0x2c8>)
 80012c0:	f7fe ffa6 	bl	8000210 <strlen>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	230a      	movs	r3, #10
 80012ca:	4954      	ldr	r1, [pc, #336]	; (800141c <print_KISS+0x2c8>)
 80012cc:	4855      	ldr	r0, [pc, #340]	; (8001424 <print_KISS+0x2d0>)
 80012ce:	f004 fb4e 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	3301      	adds	r3, #1
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	2b0d      	cmp	r3, #13
 80012dc:	ddba      	ble.n	8001254 <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80012e4:	3314      	adds	r3, #20
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 80012ea:	4a4c      	ldr	r2, [pc, #304]	; (800141c <print_KISS+0x2c8>)
 80012ec:	4b52      	ldr	r3, [pc, #328]	; (8001438 <print_KISS+0x2e4>)
 80012ee:	4615      	mov	r5, r2
 80012f0:	461c      	mov	r4, r3
 80012f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f4:	6028      	str	r0, [r5, #0]
 80012f6:	6069      	str	r1, [r5, #4]
 80012f8:	60aa      	str	r2, [r5, #8]
 80012fa:	60eb      	str	r3, [r5, #12]
 80012fc:	8823      	ldrh	r3, [r4, #0]
 80012fe:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001300:	4846      	ldr	r0, [pc, #280]	; (800141c <print_KISS+0x2c8>)
 8001302:	f7fe ff85 	bl	8000210 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	230a      	movs	r3, #10
 800130c:	4943      	ldr	r1, [pc, #268]	; (800141c <print_KISS+0x2c8>)
 800130e:	4845      	ldr	r0, [pc, #276]	; (8001424 <print_KISS+0x2d0>)
 8001310:	f004 fb2d 	bl	800596e <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e017      	b.n	800134a <print_KISS+0x1f6>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f1c3 0307 	rsb	r3, r3, #7
 8001320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001322:	4413      	add	r3, r2
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	4940      	ldr	r1, [pc, #256]	; (800142c <print_KISS+0x2d8>)
 800132a:	483c      	ldr	r0, [pc, #240]	; (800141c <print_KISS+0x2c8>)
 800132c:	f005 fa48 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001330:	483a      	ldr	r0, [pc, #232]	; (800141c <print_KISS+0x2c8>)
 8001332:	f7fe ff6d 	bl	8000210 <strlen>
 8001336:	4603      	mov	r3, r0
 8001338:	b29a      	uxth	r2, r3
 800133a:	230a      	movs	r3, #10
 800133c:	4937      	ldr	r1, [pc, #220]	; (800141c <print_KISS+0x2c8>)
 800133e:	4839      	ldr	r0, [pc, #228]	; (8001424 <print_KISS+0x2d0>)
 8001340:	f004 fb15 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	3301      	adds	r3, #1
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	2b07      	cmp	r3, #7
 800134e:	dde4      	ble.n	800131a <print_KISS+0x1c6>
	}
	sprintf(uartData, "\n");
 8001350:	4a32      	ldr	r2, [pc, #200]	; (800141c <print_KISS+0x2c8>)
 8001352:	4b37      	ldr	r3, [pc, #220]	; (8001430 <print_KISS+0x2dc>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001358:	4830      	ldr	r0, [pc, #192]	; (800141c <print_KISS+0x2c8>)
 800135a:	f7fe ff59 	bl	8000210 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	230a      	movs	r3, #10
 8001364:	492d      	ldr	r1, [pc, #180]	; (800141c <print_KISS+0x2c8>)
 8001366:	482f      	ldr	r0, [pc, #188]	; (8001424 <print_KISS+0x2d0>)
 8001368:	f004 fb01 	bl	800596e <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001372:	3318      	adds	r3, #24
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8001378:	4a28      	ldr	r2, [pc, #160]	; (800141c <print_KISS+0x2c8>)
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <print_KISS+0x2e8>)
 800137c:	4615      	mov	r5, r2
 800137e:	461c      	mov	r4, r3
 8001380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001382:	6028      	str	r0, [r5, #0]
 8001384:	6069      	str	r1, [r5, #4]
 8001386:	60aa      	str	r2, [r5, #8]
 8001388:	60eb      	str	r3, [r5, #12]
 800138a:	8823      	ldrh	r3, [r4, #0]
 800138c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800138e:	4823      	ldr	r0, [pc, #140]	; (800141c <print_KISS+0x2c8>)
 8001390:	f7fe ff3e 	bl	8000210 <strlen>
 8001394:	4603      	mov	r3, r0
 8001396:	b29a      	uxth	r2, r3
 8001398:	230a      	movs	r3, #10
 800139a:	4920      	ldr	r1, [pc, #128]	; (800141c <print_KISS+0x2c8>)
 800139c:	4821      	ldr	r0, [pc, #132]	; (8001424 <print_KISS+0x2d0>)
 800139e:	f004 fae6 	bl	800596e <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	e017      	b.n	80013d8 <print_KISS+0x284>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	491d      	ldr	r1, [pc, #116]	; (800142c <print_KISS+0x2d8>)
 80013b8:	4818      	ldr	r0, [pc, #96]	; (800141c <print_KISS+0x2c8>)
 80013ba:	f005 fa01 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013be:	4817      	ldr	r0, [pc, #92]	; (800141c <print_KISS+0x2c8>)
 80013c0:	f7fe ff26 	bl	8000210 <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	230a      	movs	r3, #10
 80013ca:	4914      	ldr	r1, [pc, #80]	; (800141c <print_KISS+0x2c8>)
 80013cc:	4815      	ldr	r0, [pc, #84]	; (8001424 <print_KISS+0x2d0>)
 80013ce:	f004 face 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	3301      	adds	r3, #1
 80013d6:	61bb      	str	r3, [r7, #24]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b07      	cmp	r3, #7
 80013dc:	dde4      	ble.n	80013a8 <print_KISS+0x254>
	}
	sprintf(uartData, "\n");
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <print_KISS+0x2c8>)
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <print_KISS+0x2dc>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013e6:	480d      	ldr	r0, [pc, #52]	; (800141c <print_KISS+0x2c8>)
 80013e8:	f7fe ff12 	bl	8000210 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	230a      	movs	r3, #10
 80013f2:	490a      	ldr	r1, [pc, #40]	; (800141c <print_KISS+0x2c8>)
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <print_KISS+0x2d0>)
 80013f6:	f004 faba 	bl	800596e <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001400:	331c      	adds	r3, #28
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3b01      	subs	r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e055      	b.n	80014c4 <print_KISS+0x370>
 8001418:	200000d4 	.word	0x200000d4
 800141c:	20001cd8 	.word	0x20001cd8
 8001420:	0800722c 	.word	0x0800722c
 8001424:	20002b94 	.word	0x20002b94
 8001428:	08007264 	.word	0x08007264
 800142c:	08007140 	.word	0x08007140
 8001430:	08007148 	.word	0x08007148
 8001434:	0800712c 	.word	0x0800712c
 8001438:	08007164 	.word	0x08007164
 800143c:	08007178 	.word	0x08007178
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3301      	adds	r3, #1
 8001444:	461a      	mov	r2, r3
 8001446:	494a      	ldr	r1, [pc, #296]	; (8001570 <print_KISS+0x41c>)
 8001448:	484a      	ldr	r0, [pc, #296]	; (8001574 <print_KISS+0x420>)
 800144a:	f005 f9b9 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800144e:	4849      	ldr	r0, [pc, #292]	; (8001574 <print_KISS+0x420>)
 8001450:	f7fe fede 	bl	8000210 <strlen>
 8001454:	4603      	mov	r3, r0
 8001456:	b29a      	uxth	r2, r3
 8001458:	230a      	movs	r3, #10
 800145a:	4946      	ldr	r1, [pc, #280]	; (8001574 <print_KISS+0x420>)
 800145c:	4846      	ldr	r0, [pc, #280]	; (8001578 <print_KISS+0x424>)
 800145e:	f004 fa86 	bl	800596e <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e016      	b.n	8001496 <print_KISS+0x342>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	425b      	negs	r3, r3
 800146c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	4941      	ldr	r1, [pc, #260]	; (800157c <print_KISS+0x428>)
 8001476:	483f      	ldr	r0, [pc, #252]	; (8001574 <print_KISS+0x420>)
 8001478:	f005 f9a2 	bl	80067c0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800147c:	483d      	ldr	r0, [pc, #244]	; (8001574 <print_KISS+0x420>)
 800147e:	f7fe fec7 	bl	8000210 <strlen>
 8001482:	4603      	mov	r3, r0
 8001484:	b29a      	uxth	r2, r3
 8001486:	230a      	movs	r3, #10
 8001488:	493a      	ldr	r1, [pc, #232]	; (8001574 <print_KISS+0x420>)
 800148a:	483b      	ldr	r0, [pc, #236]	; (8001578 <print_KISS+0x424>)
 800148c:	f004 fa6f 	bl	800596e <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	3301      	adds	r3, #1
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	2b07      	cmp	r3, #7
 800149a:	dde5      	ble.n	8001468 <print_KISS+0x314>
		}
		curr_mem -= 8;
 800149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149e:	3b08      	subs	r3, #8
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80014a2:	4a34      	ldr	r2, [pc, #208]	; (8001574 <print_KISS+0x420>)
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <print_KISS+0x42c>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014aa:	4832      	ldr	r0, [pc, #200]	; (8001574 <print_KISS+0x420>)
 80014ac:	f7fe feb0 	bl	8000210 <strlen>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	230a      	movs	r3, #10
 80014b6:	492f      	ldr	r1, [pc, #188]	; (8001574 <print_KISS+0x420>)
 80014b8:	482f      	ldr	r0, [pc, #188]	; (8001578 <print_KISS+0x424>)
 80014ba:	f004 fa58 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	da00      	bge.n	80014d2 <print_KISS+0x37e>
 80014d0:	3307      	adds	r3, #7
 80014d2:	10db      	asrs	r3, r3, #3
 80014d4:	461a      	mov	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	4293      	cmp	r3, r2
 80014da:	dbb1      	blt.n	8001440 <print_KISS+0x2ec>
	}

	//Print Stop Flag
	curr_mem = local_packet->KISS_PACKET;
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 80014e4:	4a23      	ldr	r2, [pc, #140]	; (8001574 <print_KISS+0x420>)
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <print_KISS+0x430>)
 80014e8:	4615      	mov	r5, r2
 80014ea:	461c      	mov	r4, r3
 80014ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ee:	6028      	str	r0, [r5, #0]
 80014f0:	6069      	str	r1, [r5, #4]
 80014f2:	60aa      	str	r2, [r5, #8]
 80014f4:	60eb      	str	r3, [r5, #12]
 80014f6:	8823      	ldrh	r3, [r4, #0]
 80014f8:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014fa:	481e      	ldr	r0, [pc, #120]	; (8001574 <print_KISS+0x420>)
 80014fc:	f7fe fe88 	bl	8000210 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	230a      	movs	r3, #10
 8001506:	491b      	ldr	r1, [pc, #108]	; (8001574 <print_KISS+0x420>)
 8001508:	481b      	ldr	r0, [pc, #108]	; (8001578 <print_KISS+0x424>)
 800150a:	f004 fa30 	bl	800596e <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e017      	b.n	8001544 <print_KISS+0x3f0>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4916      	ldr	r1, [pc, #88]	; (800157c <print_KISS+0x428>)
 8001524:	4813      	ldr	r0, [pc, #76]	; (8001574 <print_KISS+0x420>)
 8001526:	f005 f94b 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800152a:	4812      	ldr	r0, [pc, #72]	; (8001574 <print_KISS+0x420>)
 800152c:	f7fe fe70 	bl	8000210 <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	b29a      	uxth	r2, r3
 8001534:	230a      	movs	r3, #10
 8001536:	490f      	ldr	r1, [pc, #60]	; (8001574 <print_KISS+0x420>)
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <print_KISS+0x424>)
 800153a:	f004 fa18 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3301      	adds	r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b07      	cmp	r3, #7
 8001548:	dde4      	ble.n	8001514 <print_KISS+0x3c0>
	}
	sprintf(uartData, "\n");
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <print_KISS+0x420>)
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <print_KISS+0x42c>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001552:	4808      	ldr	r0, [pc, #32]	; (8001574 <print_KISS+0x420>)
 8001554:	f7fe fe5c 	bl	8000210 <strlen>
 8001558:	4603      	mov	r3, r0
 800155a:	b29a      	uxth	r2, r3
 800155c:	230a      	movs	r3, #10
 800155e:	4905      	ldr	r1, [pc, #20]	; (8001574 <print_KISS+0x420>)
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <print_KISS+0x424>)
 8001562:	f004 fa04 	bl	800596e <HAL_UART_Transmit>

}
 8001566:	bf00      	nop
 8001568:	3734      	adds	r7, #52	; 0x34
 800156a:	46bd      	mov	sp, r7
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	bf00      	nop
 8001570:	0800718c 	.word	0x0800718c
 8001574:	20001cd8 	.word	0x20001cd8
 8001578:	20002b94 	.word	0x20002b94
 800157c:	08007140 	.word	0x08007140
 8001580:	08007148 	.word	0x08007148
 8001584:	08007278 	.word	0x08007278

08001588 <UART2_EXCEPTION_CALLBACK>:

//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 800158c:	2201      	movs	r2, #1
 800158e:	491d      	ldr	r1, [pc, #116]	; (8001604 <UART2_EXCEPTION_CALLBACK+0x7c>)
 8001590:	481d      	ldr	r0, [pc, #116]	; (8001608 <UART2_EXCEPTION_CALLBACK+0x80>)
 8001592:	f004 fa85 	bl	8005aa0 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 8001598:	2200      	movs	r2, #0
 800159a:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 800159e:	7b1b      	ldrb	r3, [r3, #12]
 80015a0:	2bc0      	cmp	r3, #192	; 0xc0
 80015a2:	d104      	bne.n	80015ae <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	3301      	adds	r3, #1
 80015aa:	4a18      	ldr	r2, [pc, #96]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015ac:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <UART2_EXCEPTION_CALLBACK+0x88>)
 80015b6:	4413      	add	r3, r2
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015ba:	7b12      	ldrb	r2, [r2, #12]
 80015bc:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a11      	ldr	r2, [pc, #68]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015c6:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	dd16      	ble.n	80015fe <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <UART2_EXCEPTION_CALLBACK+0x8c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	f083 0301 	eor.w	r3, r3, #1
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <UART2_EXCEPTION_CALLBACK+0x90>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a05      	ldr	r2, [pc, #20]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015f6:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <UART2_EXCEPTION_CALLBACK+0x84>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]

	  }
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000144c 	.word	0x2000144c
 8001608:	20002b94 	.word	0x20002b94
 800160c:	20001440 	.word	0x20001440
 8001610:	2000144e 	.word	0x2000144e
 8001614:	20002b3c 	.word	0x20002b3c
 8001618:	200000a5 	.word	0x200000a5

0800161c <receiving_AX25>:
//****************************************************************************************************************
//END OF UART Handling data flow

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 8001622:	4a51      	ldr	r2, [pc, #324]	; (8001768 <receiving_AX25+0x14c>)
 8001624:	4b51      	ldr	r3, [pc, #324]	; (800176c <receiving_AX25+0x150>)
 8001626:	4615      	mov	r5, r2
 8001628:	461c      	mov	r4, r3
 800162a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162c:	6028      	str	r0, [r5, #0]
 800162e:	6069      	str	r1, [r5, #4]
 8001630:	60aa      	str	r2, [r5, #8]
 8001632:	60eb      	str	r3, [r5, #12]
 8001634:	cc03      	ldmia	r4!, {r0, r1}
 8001636:	6128      	str	r0, [r5, #16]
 8001638:	6169      	str	r1, [r5, #20]
 800163a:	7823      	ldrb	r3, [r4, #0]
 800163c:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800163e:	484a      	ldr	r0, [pc, #296]	; (8001768 <receiving_AX25+0x14c>)
 8001640:	f7fe fde6 	bl	8000210 <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	230a      	movs	r3, #10
 800164a:	4947      	ldr	r1, [pc, #284]	; (8001768 <receiving_AX25+0x14c>)
 800164c:	4848      	ldr	r0, [pc, #288]	; (8001770 <receiving_AX25+0x154>)
 800164e:	f004 f98e 	bl	800596e <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001652:	4b48      	ldr	r3, [pc, #288]	; (8001774 <receiving_AX25+0x158>)
 8001654:	60fb      	str	r3, [r7, #12]

	int packet_status;
	packet_status = streamGet();
 8001656:	f001 f9ef 	bl	8002a38 <streamGet>
 800165a:	60b8      	str	r0, [r7, #8]

	//Valid packet received
	if(packet_status == 1){
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d13b      	bne.n	80016da <receiving_AX25+0xbe>
		//Remove the bit stuffed zeros from received packet and reset packet type
		//remove_bit_stuffing();
		local_packet->i_frame_packet = false;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001668:	3308      	adds	r3, #8
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]

		//Validate packet
		bool AX25_IsValid = AX25_Packet_Validate();
 800166e:	f000 f889 	bl	8001784 <AX25_Packet_Validate>
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		if(AX25_IsValid){
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00b      	beq.n	8001694 <receiving_AX25+0x78>
			//Put data into KISS format and buffer
			AX25_TO_KISS();
 800167c:	f000 f9aa 	bl	80019d4 <AX25_TO_KISS>

			//Transmit KISS Packet that has been generated
			//output_KISS();

			//Clear AX.25 buffer
			memset(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f640 225f 	movw	r2, #2655	; 0xa5f
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f005 f890 	bl	80067ae <memset>

			//Loop back and begin receiving another message
			receiving_AX25();
 800168e:	f7ff ffc5 	bl	800161c <receiving_AX25>
 8001692:	e065      	b.n	8001760 <receiving_AX25+0x144>
		}
		else{
			sprintf(uartData, "Packet was not valid, restarting\n");
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <receiving_AX25+0x14c>)
 8001696:	4a38      	ldr	r2, [pc, #224]	; (8001778 <receiving_AX25+0x15c>)
 8001698:	4614      	mov	r4, r2
 800169a:	469c      	mov	ip, r3
 800169c:	f104 0e20 	add.w	lr, r4, #32
 80016a0:	4665      	mov	r5, ip
 80016a2:	4626      	mov	r6, r4
 80016a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016a6:	6028      	str	r0, [r5, #0]
 80016a8:	6069      	str	r1, [r5, #4]
 80016aa:	60aa      	str	r2, [r5, #8]
 80016ac:	60eb      	str	r3, [r5, #12]
 80016ae:	3410      	adds	r4, #16
 80016b0:	f10c 0c10 	add.w	ip, ip, #16
 80016b4:	4574      	cmp	r4, lr
 80016b6:	d1f3      	bne.n	80016a0 <receiving_AX25+0x84>
 80016b8:	4662      	mov	r2, ip
 80016ba:	4623      	mov	r3, r4
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80016c0:	4829      	ldr	r0, [pc, #164]	; (8001768 <receiving_AX25+0x14c>)
 80016c2:	f7fe fda5 	bl	8000210 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	230a      	movs	r3, #10
 80016cc:	4926      	ldr	r1, [pc, #152]	; (8001768 <receiving_AX25+0x14c>)
 80016ce:	4828      	ldr	r0, [pc, #160]	; (8001770 <receiving_AX25+0x154>)
 80016d0:	f004 f94d 	bl	800596e <HAL_UART_Transmit>
			receiving_AX25();
 80016d4:	f7ff ffa2 	bl	800161c <receiving_AX25>
 80016d8:	e042      	b.n	8001760 <receiving_AX25+0x144>
		}
	}
	//Return code for toggleMode
	else if(packet_status == -1){
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d118      	bne.n	8001714 <receiving_AX25+0xf8>
		sprintf(uartData, "Need to change mode\n");
 80016e2:	4a21      	ldr	r2, [pc, #132]	; (8001768 <receiving_AX25+0x14c>)
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <receiving_AX25+0x160>)
 80016e6:	4615      	mov	r5, r2
 80016e8:	461c      	mov	r4, r3
 80016ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ec:	6028      	str	r0, [r5, #0]
 80016ee:	6069      	str	r1, [r5, #4]
 80016f0:	60aa      	str	r2, [r5, #8]
 80016f2:	60eb      	str	r3, [r5, #12]
 80016f4:	6820      	ldr	r0, [r4, #0]
 80016f6:	6128      	str	r0, [r5, #16]
 80016f8:	7923      	ldrb	r3, [r4, #4]
 80016fa:	752b      	strb	r3, [r5, #20]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80016fc:	481a      	ldr	r0, [pc, #104]	; (8001768 <receiving_AX25+0x14c>)
 80016fe:	f7fe fd87 	bl	8000210 <strlen>
 8001702:	4603      	mov	r3, r0
 8001704:	b29a      	uxth	r2, r3
 8001706:	230a      	movs	r3, #10
 8001708:	4917      	ldr	r1, [pc, #92]	; (8001768 <receiving_AX25+0x14c>)
 800170a:	4819      	ldr	r0, [pc, #100]	; (8001770 <receiving_AX25+0x154>)
 800170c:	f004 f92f 	bl	800596e <HAL_UART_Transmit>

		return false;
 8001710:	2300      	movs	r3, #0
 8001712:	e025      	b.n	8001760 <receiving_AX25+0x144>
	}
	//Weird case of unknown return code toggles mode
	else{
		sprintf(uartData, "Packet status was unknown, restarting\n");
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <receiving_AX25+0x14c>)
 8001716:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <receiving_AX25+0x164>)
 8001718:	4614      	mov	r4, r2
 800171a:	469c      	mov	ip, r3
 800171c:	f104 0e20 	add.w	lr, r4, #32
 8001720:	4665      	mov	r5, ip
 8001722:	4626      	mov	r6, r4
 8001724:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001726:	6028      	str	r0, [r5, #0]
 8001728:	6069      	str	r1, [r5, #4]
 800172a:	60aa      	str	r2, [r5, #8]
 800172c:	60eb      	str	r3, [r5, #12]
 800172e:	3410      	adds	r4, #16
 8001730:	f10c 0c10 	add.w	ip, ip, #16
 8001734:	4574      	cmp	r4, lr
 8001736:	d1f3      	bne.n	8001720 <receiving_AX25+0x104>
 8001738:	4663      	mov	r3, ip
 800173a:	4622      	mov	r2, r4
 800173c:	6810      	ldr	r0, [r2, #0]
 800173e:	6018      	str	r0, [r3, #0]
 8001740:	8891      	ldrh	r1, [r2, #4]
 8001742:	7992      	ldrb	r2, [r2, #6]
 8001744:	8099      	strh	r1, [r3, #4]
 8001746:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001748:	4807      	ldr	r0, [pc, #28]	; (8001768 <receiving_AX25+0x14c>)
 800174a:	f7fe fd61 	bl	8000210 <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	230a      	movs	r3, #10
 8001754:	4904      	ldr	r1, [pc, #16]	; (8001768 <receiving_AX25+0x14c>)
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <receiving_AX25+0x154>)
 8001758:	f004 f909 	bl	800596e <HAL_UART_Transmit>
		receiving_AX25();
 800175c:	f7ff ff5e 	bl	800161c <receiving_AX25>
	}
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001768:	20001cd8 	.word	0x20001cd8
 800176c:	0800728c 	.word	0x0800728c
 8001770:	20002b94 	.word	0x20002b94
 8001774:	200000d4 	.word	0x200000d4
 8001778:	080072a8 	.word	0x080072a8
 800177c:	080072cc 	.word	0x080072cc
 8001780:	080072e4 	.word	0x080072e4

08001784 <AX25_Packet_Validate>:
		}
	}
	//transmit kiss
}

bool AX25_Packet_Validate(){
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <AX25_Packet_Validate+0x5c>)
 800178c:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <AX25_Packet_Validate+0x60>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b77      	cmp	r3, #119	; 0x77
 8001798:	dc0a      	bgt.n	80017b0 <AX25_Packet_Validate+0x2c>
		sprintf(uartData,"Trash Packet");
 800179a:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <AX25_Packet_Validate+0x64>)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <AX25_Packet_Validate+0x68>)
 800179e:	4614      	mov	r4, r2
 80017a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80017a2:	6020      	str	r0, [r4, #0]
 80017a4:	6061      	str	r1, [r4, #4]
 80017a6:	60a2      	str	r2, [r4, #8]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	7323      	strb	r3, [r4, #12]
		return false;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e013      	b.n	80017d8 <AX25_Packet_Validate+0x54>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <AX25_Packet_Validate+0x60>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00a      	beq.n	80017d2 <AX25_Packet_Validate+0x4e>
		sprintf(uartData,"Trash Packet");
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <AX25_Packet_Validate+0x64>)
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <AX25_Packet_Validate+0x68>)
 80017c0:	4614      	mov	r4, r2
 80017c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80017c4:	6020      	str	r0, [r4, #0]
 80017c6:	6061      	str	r1, [r4, #4]
 80017c8:	60a2      	str	r2, [r4, #8]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	7323      	strb	r3, [r4, #12]
		return false;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e002      	b.n	80017d8 <AX25_Packet_Validate+0x54>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 80017d2:	f000 f80d 	bl	80017f0 <set_packet_pointer_AX25>
		//return crc_check();
		return true;
 80017d6:	2301      	movs	r3, #1
	}

//	return true; //valid packet
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	200000d4 	.word	0x200000d4
 80017e4:	200000a0 	.word	0x200000a0
 80017e8:	20001cd8 	.word	0x20001cd8
 80017ec:	0800730c 	.word	0x0800730c

080017f0 <set_packet_pointer_AX25>:


void set_packet_pointer_AX25(){
 80017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80017f6:	4b6e      	ldr	r3, [pc, #440]	; (80019b0 <set_packet_pointer_AX25+0x1c0>)
 80017f8:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 80017fa:	2310      	movs	r3, #16
 80017fc:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 8001800:	4a6d      	ldr	r2, [pc, #436]	; (80019b8 <set_packet_pointer_AX25+0x1c8>)
 8001802:	4614      	mov	r4, r2
 8001804:	469c      	mov	ip, r3
 8001806:	f104 0e20 	add.w	lr, r4, #32
 800180a:	4665      	mov	r5, ip
 800180c:	4626      	mov	r6, r4
 800180e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001810:	6028      	str	r0, [r5, #0]
 8001812:	6069      	str	r1, [r5, #4]
 8001814:	60aa      	str	r2, [r5, #8]
 8001816:	60eb      	str	r3, [r5, #12]
 8001818:	3410      	adds	r4, #16
 800181a:	f10c 0c10 	add.w	ip, ip, #16
 800181e:	4574      	cmp	r4, lr
 8001820:	d1f3      	bne.n	800180a <set_packet_pointer_AX25+0x1a>
 8001822:	4663      	mov	r3, ip
 8001824:	4622      	mov	r2, r4
 8001826:	7812      	ldrb	r2, [r2, #0]
 8001828:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800182a:	4862      	ldr	r0, [pc, #392]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 800182c:	f7fe fcf0 	bl	8000210 <strlen>
 8001830:	4603      	mov	r3, r0
 8001832:	b29a      	uxth	r2, r3
 8001834:	230a      	movs	r3, #10
 8001836:	495f      	ldr	r1, [pc, #380]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 8001838:	4860      	ldr	r0, [pc, #384]	; (80019bc <set_packet_pointer_AX25+0x1cc>)
 800183a:	f004 f898 	bl	800596e <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 8001842:	4a5c      	ldr	r2, [pc, #368]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 8001844:	4b5e      	ldr	r3, [pc, #376]	; (80019c0 <set_packet_pointer_AX25+0x1d0>)
 8001846:	4615      	mov	r5, r2
 8001848:	461c      	mov	r4, r3
 800184a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184c:	6028      	str	r0, [r5, #0]
 800184e:	6069      	str	r1, [r5, #4]
 8001850:	60aa      	str	r2, [r5, #8]
 8001852:	60eb      	str	r3, [r5, #12]
 8001854:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001856:	6128      	str	r0, [r5, #16]
 8001858:	6169      	str	r1, [r5, #20]
 800185a:	61aa      	str	r2, [r5, #24]
 800185c:	7823      	ldrb	r3, [r4, #0]
 800185e:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001860:	4854      	ldr	r0, [pc, #336]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 8001862:	f7fe fcd5 	bl	8000210 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	230a      	movs	r3, #10
 800186c:	4951      	ldr	r1, [pc, #324]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 800186e:	4853      	ldr	r0, [pc, #332]	; (80019bc <set_packet_pointer_AX25+0x1cc>)
 8001870:	f004 f87d 	bl	800596e <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800187a:	3310      	adds	r3, #16
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3370      	adds	r3, #112	; 0x70
 8001884:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	3370      	adds	r3, #112	; 0x70
 800188a:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 800188c:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 800188e:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <set_packet_pointer_AX25+0x1d4>)
 8001890:	4615      	mov	r5, r2
 8001892:	461c      	mov	r4, r3
 8001894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001896:	6028      	str	r0, [r5, #0]
 8001898:	6069      	str	r1, [r5, #4]
 800189a:	60aa      	str	r2, [r5, #8]
 800189c:	60eb      	str	r3, [r5, #12]
 800189e:	cc07      	ldmia	r4!, {r0, r1, r2}
 80018a0:	6128      	str	r0, [r5, #16]
 80018a2:	6169      	str	r1, [r5, #20]
 80018a4:	61aa      	str	r2, [r5, #24]
 80018a6:	7823      	ldrb	r3, [r4, #0]
 80018a8:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018aa:	4842      	ldr	r0, [pc, #264]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 80018ac:	f7fe fcb0 	bl	8000210 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	230a      	movs	r3, #10
 80018b6:	493f      	ldr	r1, [pc, #252]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 80018b8:	4840      	ldr	r0, [pc, #256]	; (80019bc <set_packet_pointer_AX25+0x1cc>)
 80018ba:	f004 f858 	bl	800596e <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80018c4:	3314      	adds	r3, #20
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3308      	adds	r3, #8
 80018ce:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	3308      	adds	r3, #8
 80018d4:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 80018d6:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 80018d8:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <set_packet_pointer_AX25+0x1d8>)
 80018da:	4615      	mov	r5, r2
 80018dc:	461c      	mov	r4, r3
 80018de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e0:	6028      	str	r0, [r5, #0]
 80018e2:	6069      	str	r1, [r5, #4]
 80018e4:	60aa      	str	r2, [r5, #8]
 80018e6:	60eb      	str	r3, [r5, #12]
 80018e8:	cc03      	ldmia	r4!, {r0, r1}
 80018ea:	6128      	str	r0, [r5, #16]
 80018ec:	6169      	str	r1, [r5, #20]
 80018ee:	7823      	ldrb	r3, [r4, #0]
 80018f0:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018f2:	4830      	ldr	r0, [pc, #192]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 80018f4:	f7fe fc8c 	bl	8000210 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	230a      	movs	r3, #10
 80018fe:	492d      	ldr	r1, [pc, #180]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 8001900:	482e      	ldr	r0, [pc, #184]	; (80019bc <set_packet_pointer_AX25+0x1cc>)
 8001902:	f004 f834 	bl	800596e <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800190c:	3318      	adds	r3, #24
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3308      	adds	r3, #8
 8001916:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3308      	adds	r3, #8
 800191c:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 800191e:	4a25      	ldr	r2, [pc, #148]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 8001920:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <set_packet_pointer_AX25+0x1dc>)
 8001922:	4615      	mov	r5, r2
 8001924:	461c      	mov	r4, r3
 8001926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001928:	6028      	str	r0, [r5, #0]
 800192a:	6069      	str	r1, [r5, #4]
 800192c:	60aa      	str	r2, [r5, #8]
 800192e:	60eb      	str	r3, [r5, #12]
 8001930:	cc03      	ldmia	r4!, {r0, r1}
 8001932:	6128      	str	r0, [r5, #16]
 8001934:	6169      	str	r1, [r5, #20]
 8001936:	8823      	ldrh	r3, [r4, #0]
 8001938:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800193a:	481e      	ldr	r0, [pc, #120]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 800193c:	f7fe fc68 	bl	8000210 <strlen>
 8001940:	4603      	mov	r3, r0
 8001942:	b29a      	uxth	r2, r3
 8001944:	230a      	movs	r3, #10
 8001946:	491b      	ldr	r1, [pc, #108]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 8001948:	481c      	ldr	r0, [pc, #112]	; (80019bc <set_packet_pointer_AX25+0x1cc>)
 800194a:	f004 f810 	bl	800596e <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001954:	331c      	adds	r3, #28
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4413      	add	r3, r2
 8001968:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <set_packet_pointer_AX25+0x1e0>)
 800196e:	4615      	mov	r5, r2
 8001970:	461c      	mov	r4, r3
 8001972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001974:	6028      	str	r0, [r5, #0]
 8001976:	6069      	str	r1, [r5, #4]
 8001978:	60aa      	str	r2, [r5, #8]
 800197a:	60eb      	str	r3, [r5, #12]
 800197c:	cc03      	ldmia	r4!, {r0, r1}
 800197e:	6128      	str	r0, [r5, #16]
 8001980:	6169      	str	r1, [r5, #20]
 8001982:	7823      	ldrb	r3, [r4, #0]
 8001984:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001986:	480b      	ldr	r0, [pc, #44]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 8001988:	f7fe fc42 	bl	8000210 <strlen>
 800198c:	4603      	mov	r3, r0
 800198e:	b29a      	uxth	r2, r3
 8001990:	230a      	movs	r3, #10
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <set_packet_pointer_AX25+0x1c4>)
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <set_packet_pointer_AX25+0x1cc>)
 8001996:	f003 ffea 	bl	800596e <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019a0:	3304      	adds	r3, #4
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	601a      	str	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200000d4 	.word	0x200000d4
 80019b4:	20001cd8 	.word	0x20001cd8
 80019b8:	0800731c 	.word	0x0800731c
 80019bc:	20002b94 	.word	0x20002b94
 80019c0:	08007340 	.word	0x08007340
 80019c4:	08007360 	.word	0x08007360
 80019c8:	08007380 	.word	0x08007380
 80019cc:	0800739c 	.word	0x0800739c
 80019d0:	080073b8 	.word	0x080073b8

080019d4 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80019da:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <AX25_TO_KISS+0x10c>)
 80019dc:	603b      	str	r3, [r7, #0]

	set_packet_pointer_AX25();
 80019de:	f7ff ff07 	bl	80017f0 <set_packet_pointer_AX25>
	print_AX25();
 80019e2:	f7ff f9ad 	bl	8000d40 <print_AX25>

	bool* cpy_from_ptr = (local_packet->AX25_PACKET+8);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	3308      	adds	r3, #8
 80019ea:	60fb      	str	r3, [r7, #12]

	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	493d      	ldr	r1, [pc, #244]	; (8001ae4 <AX25_TO_KISS+0x110>)
 80019f0:	461a      	mov	r2, r3
 80019f2:	460b      	mov	r3, r1
 80019f4:	cb03      	ldmia	r3!, {r0, r1}
 80019f6:	6010      	str	r0, [r2, #0]
 80019f8:	6051      	str	r1, [r2, #4]
	cpy_from_ptr += FLAG_SIZE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3308      	adds	r3, #8
 80019fe:	60fb      	str	r3, [r7, #12]

	//copy in each byte MSB to LSB
	for(int i = 0; i < address_len/8; i++){
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	e014      	b.n	8001a30 <AX25_TO_KISS+0x5c>
		memcpy(cpy_from_ptr,(local_packet->address + address_len - 8 - i*8),8*bool_size);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a0c:	3310      	adds	r3, #16
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8001a18:	4413      	add	r3, r2
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f004 feba 	bl	8006798 <memcpy>
		cpy_from_ptr += 8;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3308      	adds	r3, #8
 8001a28:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < address_len/8; i++){
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b0d      	cmp	r3, #13
 8001a34:	dde7      	ble.n	8001a06 <AX25_TO_KISS+0x32>
	}

	memcpy(cpy_from_ptr,local_packet->control,control_len*bool_size);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a3c:	3314      	adds	r3, #20
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2208      	movs	r2, #8
 8001a42:	4619      	mov	r1, r3
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f004 fea7 	bl	8006798 <memcpy>
	cpy_from_ptr += control_len;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	60fb      	str	r3, [r7, #12]

	memcpy(local_packet->AX25_PACKET,KISS_FLAG,FLAG_SIZE);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4924      	ldr	r1, [pc, #144]	; (8001ae4 <AX25_TO_KISS+0x110>)
 8001a54:	461a      	mov	r2, r3
 8001a56:	460b      	mov	r3, r1
 8001a58:	cb03      	ldmia	r3!, {r0, r1}
 8001a5a:	6010      	str	r0, [r2, #0]
 8001a5c:	6051      	str	r1, [r2, #4]
	//copy in each byte MSB to LSB
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	e019      	b.n	8001a98 <AX25_TO_KISS+0xc4>
		memcpy(cpy_from_ptr,(local_packet->Info + local_packet->Info_Len - 8 - i*8),8*bool_size); //copy in each byte MSB to LSB
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001a6a:	331c      	adds	r3, #28
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4619      	mov	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	1acb      	subs	r3, r1, r3
 8001a7e:	3b08      	subs	r3, #8
 8001a80:	4413      	add	r3, r2
 8001a82:	2208      	movs	r2, #8
 8001a84:	4619      	mov	r1, r3
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f004 fe86 	bl	8006798 <memcpy>
		cpy_from_ptr += 8;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3308      	adds	r3, #8
 8001a90:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3301      	adds	r3, #1
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	da00      	bge.n	8001aa6 <AX25_TO_KISS+0xd2>
 8001aa4:	3307      	adds	r3, #7
 8001aa6:	10db      	asrs	r3, r3, #3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4293      	cmp	r3, r2
 8001aae:	dbd9      	blt.n	8001a64 <AX25_TO_KISS+0x90>
	}
	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <AX25_TO_KISS+0x110>)
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	cb03      	ldmia	r3!, {r0, r1}
 8001aba:	6010      	str	r0, [r2, #0]
 8001abc:	6051      	str	r1, [r2, #4]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001ac4:	3314      	adds	r3, #20
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2208      	movs	r2, #8
 8001aca:	68f9      	ldr	r1, [r7, #12]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f004 fe63 	bl	8006798 <memcpy>
	cpy_from_ptr += control_len;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	3308      	adds	r3, #8
 8001ad6:	60fb      	str	r3, [r7, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200000d4 	.word	0x200000d4
 8001ae4:	20000000 	.word	0x20000000

08001ae8 <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <receiving_KISS+0x124>)
 8001af0:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001af2:	4b47      	ldr	r3, [pc, #284]	; (8001c10 <receiving_KISS+0x128>)
 8001af4:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	7b5b      	ldrb	r3, [r3, #13]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8081 	beq.w	8001c02 <receiving_KISS+0x11a>
		sprintf(uartData, "\nGot a packet via UART of size %d, printing now...\n",local_UART_packet->received_byte_cnt);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4943      	ldr	r1, [pc, #268]	; (8001c14 <receiving_KISS+0x12c>)
 8001b08:	4843      	ldr	r0, [pc, #268]	; (8001c18 <receiving_KISS+0x130>)
 8001b0a:	f004 fe59 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b0e:	4842      	ldr	r0, [pc, #264]	; (8001c18 <receiving_KISS+0x130>)
 8001b10:	f7fe fb7e 	bl	8000210 <strlen>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	230a      	movs	r3, #10
 8001b1a:	493f      	ldr	r1, [pc, #252]	; (8001c18 <receiving_KISS+0x130>)
 8001b1c:	483f      	ldr	r0, [pc, #252]	; (8001c1c <receiving_KISS+0x134>)
 8001b1e:	f003 ff26 	bl	800596e <HAL_UART_Transmit>
		int byte_cnt = local_UART_packet->received_byte_cnt;
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i < byte_cnt;i++){
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	e01f      	b.n	8001b6e <receiving_KISS+0x86>
			//Hex value from UART
			 //start from LS Byte = Highest index
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[byte_cnt-1-i];
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1e5a      	subs	r2, r3, #1
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4413      	add	r3, r2
 8001b3a:	7b9b      	ldrb	r3, [r3, #14]
 8001b3c:	71bb      	strb	r3, [r7, #6]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4413      	add	r3, r2
 8001b4a:	3307      	adds	r3, #7
 8001b4c:	603b      	str	r3, [r7, #0]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 8001b4e:	79bb      	ldrb	r3, [r7, #6]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2201      	movs	r2, #1
 8001b54:	6839      	ldr	r1, [r7, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fd32 	bl	80005c0 <conv_HEX_to_BIN>

//			local_UART_packet->got_packet = false;
			local_packet->got_packet = true;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b62:	3309      	adds	r3, #9
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i < byte_cnt;i++){
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dbdb      	blt.n	8001b2e <receiving_KISS+0x46>
		}

		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b80:	330c      	adds	r3, #12
 8001b82:	601a      	str	r2, [r3, #0]
		sprintf(uartData, "Byte Count = %d\n",local_packet->byte_cnt);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b8a:	330c      	adds	r3, #12
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4923      	ldr	r1, [pc, #140]	; (8001c20 <receiving_KISS+0x138>)
 8001b92:	4821      	ldr	r0, [pc, #132]	; (8001c18 <receiving_KISS+0x130>)
 8001b94:	f004 fe14 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b98:	481f      	ldr	r0, [pc, #124]	; (8001c18 <receiving_KISS+0x130>)
 8001b9a:	f7fe fb39 	bl	8000210 <strlen>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	230a      	movs	r3, #10
 8001ba4:	491c      	ldr	r1, [pc, #112]	; (8001c18 <receiving_KISS+0x130>)
 8001ba6:	481d      	ldr	r0, [pc, #116]	; (8001c1c <receiving_KISS+0x134>)
 8001ba8:	f003 fee1 	bl	800596e <HAL_UART_Transmit>
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset)*8;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001bb2:	330c      	adds	r3, #12
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3b13      	subs	r3, #19
 8001bb8:	00da      	lsls	r2, r3, #3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001bc0:	601a      	str	r2, [r3, #0]
		sprintf(uartData, "Info length = %d\n",local_packet->Info_Len);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4915      	ldr	r1, [pc, #84]	; (8001c24 <receiving_KISS+0x13c>)
 8001bce:	4812      	ldr	r0, [pc, #72]	; (8001c18 <receiving_KISS+0x130>)
 8001bd0:	f004 fdf6 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001bd4:	4810      	ldr	r0, [pc, #64]	; (8001c18 <receiving_KISS+0x130>)
 8001bd6:	f7fe fb1b 	bl	8000210 <strlen>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	230a      	movs	r3, #10
 8001be0:	490d      	ldr	r1, [pc, #52]	; (8001c18 <receiving_KISS+0x130>)
 8001be2:	480e      	ldr	r0, [pc, #56]	; (8001c1c <receiving_KISS+0x134>)
 8001be4:	f003 fec3 	bl	800596e <HAL_UART_Transmit>
		//Convert KISS packet to AX.25 packet
		bool success = KISS_TO_AX25();
 8001be8:	f000 f87c 	bl	8001ce4 <KISS_TO_AX25>
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
		//Upon exit, have a perfectly good AX.25 packet

		//Output AFSK waveform for radio
		if(success) {
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <receiving_KISS+0x112>
//			output_AX25();
			print_AX25();
 8001bf6:	f7ff f8a3 	bl	8000d40 <print_AX25>
		}
		clear_AX25();
 8001bfa:	f7ff fa75 	bl	80010e8 <clear_AX25>
		return success;
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	e000      	b.n	8001c04 <receiving_KISS+0x11c>
	}
	return false;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20001440 	.word	0x20001440
 8001c10:	200000d4 	.word	0x200000d4
 8001c14:	080073d4 	.word	0x080073d4
 8001c18:	20001cd8 	.word	0x20001cd8
 8001c1c:	20002b94 	.word	0x20002b94
 8001c20:	08007408 	.word	0x08007408
 8001c24:	0800741c 	.word	0x0800741c

08001c28 <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <set_packet_pointer_KISS+0xac>)
 8001c30:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS\n");
 8001c32:	4a29      	ldr	r2, [pc, #164]	; (8001cd8 <set_packet_pointer_KISS+0xb0>)
 8001c34:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <set_packet_pointer_KISS+0xb4>)
 8001c36:	4614      	mov	r4, r2
 8001c38:	461d      	mov	r5, r3
 8001c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3c:	6020      	str	r0, [r4, #0]
 8001c3e:	6061      	str	r1, [r4, #4]
 8001c40:	60a2      	str	r2, [r4, #8]
 8001c42:	60e3      	str	r3, [r4, #12]
 8001c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c46:	6120      	str	r0, [r4, #16]
 8001c48:	6161      	str	r1, [r4, #20]
 8001c4a:	61a2      	str	r2, [r4, #24]
 8001c4c:	61e3      	str	r3, [r4, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c4e:	4822      	ldr	r0, [pc, #136]	; (8001cd8 <set_packet_pointer_KISS+0xb0>)
 8001c50:	f7fe fade 	bl	8000210 <strlen>
 8001c54:	4603      	mov	r3, r0
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	230a      	movs	r3, #10
 8001c5a:	491f      	ldr	r1, [pc, #124]	; (8001cd8 <set_packet_pointer_KISS+0xb0>)
 8001c5c:	4820      	ldr	r0, [pc, #128]	; (8001ce0 <set_packet_pointer_KISS+0xb8>)
 8001c5e:	f003 fe86 	bl	800596e <HAL_UART_Transmit>

	bool *curr_mem = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c6e:	330c      	adds	r3, #12
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3b02      	subs	r3, #2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	603b      	str	r3, [r7, #0]

	curr_mem -= address_len;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	3b70      	subs	r3, #112	; 0x70
 8001c7e:	603b      	str	r3, [r7, #0]
	local_packet->address = curr_mem;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c86:	3310      	adds	r3, #16
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	601a      	str	r2, [r3, #0]

	curr_mem -= control_len;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	3b08      	subs	r3, #8
 8001c90:	603b      	str	r3, [r7, #0]
	local_packet->control = curr_mem;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001c98:	3314      	adds	r3, #20
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	601a      	str	r2, [r3, #0]

	curr_mem -= PID_len;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	3b08      	subs	r3, #8
 8001ca2:	603b      	str	r3, [r7, #0]
	local_packet->PID = curr_mem;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001caa:	3318      	adds	r3, #24
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	601a      	str	r2, [r3, #0]

	curr_mem -= local_packet->Info_Len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	425b      	negs	r3, r3
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	603b      	str	r3, [r7, #0]
	local_packet->Info = curr_mem;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001cc6:	331c      	adds	r3, #28
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	601a      	str	r2, [r3, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd4:	200000d4 	.word	0x200000d4
 8001cd8:	20001cd8 	.word	0x20001cd8
 8001cdc:	08007430 	.word	0x08007430
 8001ce0:	20002b94 	.word	0x20002b94

08001ce4 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 8001ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001cea:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <KISS_TO_AX25+0x234>)
 8001cec:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Before KISS -> AX.25 conversion\n");
 8001cee:	4b8b      	ldr	r3, [pc, #556]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001cf0:	4a8b      	ldr	r2, [pc, #556]	; (8001f20 <KISS_TO_AX25+0x23c>)
 8001cf2:	4614      	mov	r4, r2
 8001cf4:	469c      	mov	ip, r3
 8001cf6:	f104 0e20 	add.w	lr, r4, #32
 8001cfa:	4665      	mov	r5, ip
 8001cfc:	4626      	mov	r6, r4
 8001cfe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d00:	6028      	str	r0, [r5, #0]
 8001d02:	6069      	str	r1, [r5, #4]
 8001d04:	60aa      	str	r2, [r5, #8]
 8001d06:	60eb      	str	r3, [r5, #12]
 8001d08:	3410      	adds	r4, #16
 8001d0a:	f10c 0c10 	add.w	ip, ip, #16
 8001d0e:	4574      	cmp	r4, lr
 8001d10:	d1f3      	bne.n	8001cfa <KISS_TO_AX25+0x16>
 8001d12:	4663      	mov	r3, ip
 8001d14:	4622      	mov	r2, r4
 8001d16:	7812      	ldrb	r2, [r2, #0]
 8001d18:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001d1a:	4880      	ldr	r0, [pc, #512]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001d1c:	f7fe fa78 	bl	8000210 <strlen>
 8001d20:	4603      	mov	r3, r0
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	230a      	movs	r3, #10
 8001d26:	497d      	ldr	r1, [pc, #500]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001d28:	487e      	ldr	r0, [pc, #504]	; (8001f24 <KISS_TO_AX25+0x240>)
 8001d2a:	f003 fe20 	bl	800596e <HAL_UART_Transmit>

	set_packet_pointer_KISS();
 8001d2e:	f7ff ff7b 	bl	8001c28 <set_packet_pointer_KISS>
	print_KISS();
 8001d32:	f7ff fa0f 	bl	8001154 <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d42:	330c      	adds	r3, #12
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3b02      	subs	r3, #2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	603b      	str	r3, [r7, #0]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 8001d4e:	f7ff fd4f 	bl	80017f0 <set_packet_pointer_AX25>

	cpy_from_ptr -= address_len;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	3b70      	subs	r3, #112	; 0x70
 8001d56:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->address,cpy_from_ptr,address_len);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d5e:	3310      	adds	r3, #16
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2270      	movs	r2, #112	; 0x70
 8001d64:	6839      	ldr	r1, [r7, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f004 fd16 	bl	8006798 <memcpy>

	cpy_from_ptr -= control_len;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	3b08      	subs	r3, #8
 8001d70:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d78:	3314      	adds	r3, #20
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	6839      	ldr	r1, [r7, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f004 fd09 	bl	8006798 <memcpy>

	cpy_from_ptr -= PID_len;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	3b08      	subs	r3, #8
 8001d8a:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d92:	3318      	adds	r3, #24
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2208      	movs	r2, #8
 8001d98:	6839      	ldr	r1, [r7, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 fcfc 	bl	8006798 <memcpy>

	cpy_from_ptr -= local_packet->Info_Len;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	425b      	negs	r3, r3
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	603b      	str	r3, [r7, #0]
	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001db6:	331c      	adds	r3, #28
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	6839      	ldr	r1, [r7, #0]
 8001dc6:	f004 fce7 	bl	8006798 <memcpy>

	//USE CRC HERE TO GENERATE FCS FIELD
	rxBit_count = address_len + control_len + PID_len + local_packet->Info_Len;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3380      	adds	r3, #128	; 0x80
 8001dd4:	4a54      	ldr	r2, [pc, #336]	; (8001f28 <KISS_TO_AX25+0x244>)
 8001dd6:	6013      	str	r3, [r2, #0]
	crc_generate();
 8001dd8:	f000 fa04 	bl	80021e4 <crc_generate>
//	print_AX25();

	sprintf(uartData, "\n line Printing AX25 = \n");
 8001ddc:	4a4f      	ldr	r2, [pc, #316]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001dde:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <KISS_TO_AX25+0x248>)
 8001de0:	4615      	mov	r5, r2
 8001de2:	461c      	mov	r4, r3
 8001de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de6:	6028      	str	r0, [r5, #0]
 8001de8:	6069      	str	r1, [r5, #4]
 8001dea:	60aa      	str	r2, [r5, #8]
 8001dec:	60eb      	str	r3, [r5, #12]
 8001dee:	cc03      	ldmia	r4!, {r0, r1}
 8001df0:	6128      	str	r0, [r5, #16]
 8001df2:	6169      	str	r1, [r5, #20]
 8001df4:	7823      	ldrb	r3, [r4, #0]
 8001df6:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001df8:	4848      	ldr	r0, [pc, #288]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001dfa:	f7fe fa09 	bl	8000210 <strlen>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	230a      	movs	r3, #10
 8001e04:	4945      	ldr	r1, [pc, #276]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001e06:	4847      	ldr	r0, [pc, #284]	; (8001f24 <KISS_TO_AX25+0x240>)
 8001e08:	f003 fdb1 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	e015      	b.n	8001e3e <KISS_TO_AX25+0x15a>
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4944      	ldr	r1, [pc, #272]	; (8001f30 <KISS_TO_AX25+0x24c>)
 8001e1e:	483f      	ldr	r0, [pc, #252]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001e20:	f004 fcce 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e24:	483d      	ldr	r0, [pc, #244]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001e26:	f7fe f9f3 	bl	8000210 <strlen>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	230a      	movs	r3, #10
 8001e30:	493a      	ldr	r1, [pc, #232]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001e32:	483c      	ldr	r0, [pc, #240]	; (8001f24 <KISS_TO_AX25+0x240>)
 8001e34:	f003 fd9b 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <KISS_TO_AX25+0x244>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3310      	adds	r3, #16
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	dbe3      	blt.n	8001e12 <KISS_TO_AX25+0x12e>
	}

	sprintf(uartData, "\n");
 8001e4a:	4a34      	ldr	r2, [pc, #208]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001e4c:	4b39      	ldr	r3, [pc, #228]	; (8001f34 <KISS_TO_AX25+0x250>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e52:	4832      	ldr	r0, [pc, #200]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001e54:	f7fe f9dc 	bl	8000210 <strlen>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	492f      	ldr	r1, [pc, #188]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001e60:	4830      	ldr	r0, [pc, #192]	; (8001f24 <KISS_TO_AX25+0x240>)
 8001e62:	f003 fd84 	bl	800596e <HAL_UART_Transmit>

	//BIT STUFFING NEEDED
	bitstuffing(local_packet);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f88e 	bl	8001f88 <bitstuffing>

	sprintf(uartData, "\n line Bit stuffed AX25 = \n");
 8001e6c:	4a2b      	ldr	r2, [pc, #172]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001e6e:	4b32      	ldr	r3, [pc, #200]	; (8001f38 <KISS_TO_AX25+0x254>)
 8001e70:	4615      	mov	r5, r2
 8001e72:	461c      	mov	r4, r3
 8001e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e76:	6028      	str	r0, [r5, #0]
 8001e78:	6069      	str	r1, [r5, #4]
 8001e7a:	60aa      	str	r2, [r5, #8]
 8001e7c:	60eb      	str	r3, [r5, #12]
 8001e7e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001e80:	6128      	str	r0, [r5, #16]
 8001e82:	6169      	str	r1, [r5, #20]
 8001e84:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e86:	4825      	ldr	r0, [pc, #148]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001e88:	f7fe f9c2 	bl	8000210 <strlen>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	230a      	movs	r3, #10
 8001e92:	4922      	ldr	r1, [pc, #136]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001e94:	4823      	ldr	r0, [pc, #140]	; (8001f24 <KISS_TO_AX25+0x240>)
 8001e96:	f003 fd6a 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	e015      	b.n	8001ecc <KISS_TO_AX25+0x1e8>
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4921      	ldr	r1, [pc, #132]	; (8001f30 <KISS_TO_AX25+0x24c>)
 8001eac:	481b      	ldr	r0, [pc, #108]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001eae:	f004 fc87 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001eb2:	481a      	ldr	r0, [pc, #104]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001eb4:	f7fe f9ac 	bl	8000210 <strlen>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	230a      	movs	r3, #10
 8001ebe:	4917      	ldr	r1, [pc, #92]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001ec0:	4818      	ldr	r0, [pc, #96]	; (8001f24 <KISS_TO_AX25+0x240>)
 8001ec2:	f003 fd54 	bl	800596e <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <KISS_TO_AX25+0x244>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f103 0210 	add.w	r2, r3, #16
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001eda:	3304      	adds	r3, #4
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbdc      	blt.n	8001ea0 <KISS_TO_AX25+0x1bc>
	}

	sprintf(uartData, "\n");
 8001ee6:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <KISS_TO_AX25+0x250>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001eee:	480b      	ldr	r0, [pc, #44]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001ef0:	f7fe f98e 	bl	8000210 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	230a      	movs	r3, #10
 8001efa:	4908      	ldr	r1, [pc, #32]	; (8001f1c <KISS_TO_AX25+0x238>)
 8001efc:	4809      	ldr	r0, [pc, #36]	; (8001f24 <KISS_TO_AX25+0x240>)
 8001efe:	f003 fd36 	bl	800596e <HAL_UART_Transmit>
	rxBit_count = 0;
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <KISS_TO_AX25+0x244>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
	print_outAX25();
 8001f08:	f7fe fc7e 	bl	8000808 <print_outAX25>
	return true; //valid packet
 8001f0c:	2301      	movs	r3, #1
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200000d4 	.word	0x200000d4
 8001f1c:	20001cd8 	.word	0x20001cd8
 8001f20:	08007450 	.word	0x08007450
 8001f24:	20002b94 	.word	0x20002b94
 8001f28:	200000a0 	.word	0x200000a0
 8001f2c:	08007474 	.word	0x08007474
 8001f30:	08007140 	.word	0x08007140
 8001f34:	08007148 	.word	0x08007148
 8001f38:	08007490 	.word	0x08007490

08001f3c <bit_shift>:


void bit_shift(bool* array,int bits_left){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	memcpy(array+2,array+1,bits_left);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	1c98      	adds	r0, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f004 fc21 	bl	8006798 <memcpy>
	sprintf(uartData, "Bits left = %d\n",bits_left);
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4908      	ldr	r1, [pc, #32]	; (8001f7c <bit_shift+0x40>)
 8001f5a:	4809      	ldr	r0, [pc, #36]	; (8001f80 <bit_shift+0x44>)
 8001f5c:	f004 fc30 	bl	80067c0 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f60:	4807      	ldr	r0, [pc, #28]	; (8001f80 <bit_shift+0x44>)
 8001f62:	f7fe f955 	bl	8000210 <strlen>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	4904      	ldr	r1, [pc, #16]	; (8001f80 <bit_shift+0x44>)
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <bit_shift+0x48>)
 8001f70:	f003 fcfd 	bl	800596e <HAL_UART_Transmit>
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	080074ac 	.word	0x080074ac
 8001f80:	20001cd8 	.word	0x20001cd8
 8001f84:	20002b94 	.word	0x20002b94

08001f88 <bitstuffing>:

void bitstuffing(struct PACKET_STRUCT* packet){
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	sprintf(uartData, "\nChecking if bit stuffing is needed\n");
 8001f90:	4b52      	ldr	r3, [pc, #328]	; (80020dc <bitstuffing+0x154>)
 8001f92:	4a53      	ldr	r2, [pc, #332]	; (80020e0 <bitstuffing+0x158>)
 8001f94:	4614      	mov	r4, r2
 8001f96:	469c      	mov	ip, r3
 8001f98:	f104 0e20 	add.w	lr, r4, #32
 8001f9c:	4665      	mov	r5, ip
 8001f9e:	4626      	mov	r6, r4
 8001fa0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001fa2:	6028      	str	r0, [r5, #0]
 8001fa4:	6069      	str	r1, [r5, #4]
 8001fa6:	60aa      	str	r2, [r5, #8]
 8001fa8:	60eb      	str	r3, [r5, #12]
 8001faa:	3410      	adds	r4, #16
 8001fac:	f10c 0c10 	add.w	ip, ip, #16
 8001fb0:	4574      	cmp	r4, lr
 8001fb2:	d1f3      	bne.n	8001f9c <bitstuffing+0x14>
 8001fb4:	4663      	mov	r3, ip
 8001fb6:	4622      	mov	r2, r4
 8001fb8:	6810      	ldr	r0, [r2, #0]
 8001fba:	6018      	str	r0, [r3, #0]
 8001fbc:	7912      	ldrb	r2, [r2, #4]
 8001fbe:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001fc0:	4846      	ldr	r0, [pc, #280]	; (80020dc <bitstuffing+0x154>)
 8001fc2:	f7fe f925 	bl	8000210 <strlen>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	230a      	movs	r3, #10
 8001fcc:	4943      	ldr	r1, [pc, #268]	; (80020dc <bitstuffing+0x154>)
 8001fce:	4845      	ldr	r0, [pc, #276]	; (80020e4 <bitstuffing+0x15c>)
 8001fd0:	f003 fccd 	bl	800596e <HAL_UART_Transmit>

	packet->stuffed_address = 0;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001fda:	3310      	adds	r3, #16
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
	packet->stuffed_control = 0;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001fe6:	3314      	adds	r3, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
	packet->stuffed_PID = 0;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001ff2:	3318      	adds	r3, #24
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
	packet->stuffed_Info = 0;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001ffe:	331c      	adds	r3, #28
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
	packet->stuffed_FCS = 0;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
	packet->bit_stuffed_zeros = 0;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002014:	3304      	adds	r3, #4
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]

	int ones_count = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
	int bits_left = rxBit_count + FCS_len; 											//keeps track of how many bits have been iterated through in the AX.25 packet
 800201e:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <bitstuffing+0x160>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3310      	adds	r3, #16
 8002024:	617b      	str	r3, [r7, #20]
	int *bit_stuff = &(packet->bit_stuffed_zeros);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800202c:	3304      	adds	r3, #4
 800202e:	613b      	str	r3, [r7, #16]
	bool *curr_mem = packet->AX25_PACKET;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < bits_left+packet->bit_stuffed_zeros; i++){
 8002034:	2300      	movs	r3, #0
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	e041      	b.n	80020be <bitstuffing+0x136>
        int left = (bits_left+*bit_stuff) - i;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	441a      	add	r2, r3
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	60bb      	str	r3, [r7, #8]
        if((curr_mem[i])){
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4413      	add	r3, r2
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d02f      	beq.n	80020b4 <bitstuffing+0x12c>
            ones_count++;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
            if(ones_count == 5){
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d12b      	bne.n	80020b8 <bitstuffing+0x130>
                bit_shift(curr_mem+i,left);
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4413      	add	r3, r2
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff67 	bl	8001f3c <bit_shift>
                (curr_mem[i+1]) = false;
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	3301      	adds	r3, #1
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4413      	add	r3, r2
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
                packet->bit_stuffed_zeros++;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002080:	3304      	adds	r3, #4
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800208c:	3304      	adds	r3, #4
 800208e:	601a      	str	r2, [r3, #0]
                ones_count = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
            	sprintf(uartData, "BIT STUFFED i = %d\n",i);
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4915      	ldr	r1, [pc, #84]	; (80020ec <bitstuffing+0x164>)
 8002098:	4810      	ldr	r0, [pc, #64]	; (80020dc <bitstuffing+0x154>)
 800209a:	f004 fb91 	bl	80067c0 <siprintf>
            	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800209e:	480f      	ldr	r0, [pc, #60]	; (80020dc <bitstuffing+0x154>)
 80020a0:	f7fe f8b6 	bl	8000210 <strlen>
 80020a4:	4603      	mov	r3, r0
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	230a      	movs	r3, #10
 80020aa:	490c      	ldr	r1, [pc, #48]	; (80020dc <bitstuffing+0x154>)
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <bitstuffing+0x15c>)
 80020ae:	f003 fc5e 	bl	800596e <HAL_UART_Transmit>
 80020b2:	e001      	b.n	80020b8 <bitstuffing+0x130>
            }
        }
        else{
        	ones_count = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < bits_left+packet->bit_stuffed_zeros; i++){
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	3301      	adds	r3, #1
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80020c4:	3304      	adds	r3, #4
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	4413      	add	r3, r2
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	dbb3      	blt.n	800203a <bitstuffing+0xb2>
        }
	}

}
 80020d2:	bf00      	nop
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020da:	bf00      	nop
 80020dc:	20001cd8 	.word	0x20001cd8
 80020e0:	080074bc 	.word	0x080074bc
 80020e4:	20002b94 	.word	0x20002b94
 80020e8:	200000a0 	.word	0x200000a0
 80020ec:	080074e4 	.word	0x080074e4

080020f0 <crc_calc>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 80020fc:	4b34      	ldr	r3, [pc, #208]	; (80021d0 <crc_calc+0xe0>)
 80020fe:	61fb      	str	r3, [r7, #28]
	int out_bit;
	int roll_bit = *crc_ptr_in & 0x0001;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	61bb      	str	r3, [r7, #24]
    int poly = 0x8408;             			//reverse order of 0x1021
 800210a:	f248 4308 	movw	r3, #33800	; 0x8408
 800210e:	617b      	str	r3, [r7, #20]

    out_bit = in_bit ^ roll_bit; 		//xor lsb of current crc with input bit
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4053      	eors	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
	*crc_ptr_in >>= 1;               	//right shift by 1
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	105a      	asrs	r2, r3, #1
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0x0000;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d102      	bne.n	800212e <crc_calc+0x3e>
 8002128:	f248 4308 	movw	r3, #33800	; 0x8408
 800212c:	e000      	b.n	8002130 <crc_calc+0x40>
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
	*crc_ptr_in ^= poly;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	405a      	eors	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	601a      	str	r2, [r3, #0]

    //End condition
//	if(*crc_count_ptr_in >= rxBit_count){
	if(*crc_count_ptr_in >= rxBit_count){
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <crc_calc+0xe4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	db38      	blt.n	80021c6 <crc_calc+0xd6>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 800215c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	6013      	str	r3, [r2, #0]
  	    sprintf(uartData, "Convert CRC to FCS (hex) = %x\n",local_packet->crc);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800216a:	3308      	adds	r3, #8
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	4919      	ldr	r1, [pc, #100]	; (80021d8 <crc_calc+0xe8>)
 8002172:	481a      	ldr	r0, [pc, #104]	; (80021dc <crc_calc+0xec>)
 8002174:	f004 fb24 	bl	80067c0 <siprintf>
    	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002178:	4818      	ldr	r0, [pc, #96]	; (80021dc <crc_calc+0xec>)
 800217a:	f7fe f849 	bl	8000210 <strlen>
 800217e:	4603      	mov	r3, r0
 8002180:	b29a      	uxth	r2, r3
 8002182:	230a      	movs	r3, #10
 8002184:	4915      	ldr	r1, [pc, #84]	; (80021dc <crc_calc+0xec>)
 8002186:	4816      	ldr	r0, [pc, #88]	; (80021e0 <crc_calc+0xf0>)
 8002188:	f003 fbf1 	bl	800596e <HAL_UART_Transmit>
    	if(local_packet->check_crc == false){
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002192:	3310      	adds	r3, #16
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f083 0301 	eor.w	r3, r3, #1
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d012      	beq.n	80021c6 <crc_calc+0xd6>
    		//REMEBER TO CHECK THIS CRC conversion FOR ACCURACY LATER
    		conv_HEX_to_BIN(*crc_ptr_in,local_packet->FCS,false);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	b298      	uxth	r0, r3
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80021ac:	3304      	adds	r3, #4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7fe fa04 	bl	80005c0 <conv_HEX_to_BIN>
    		local_packet->crc = 0xFFFF;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80021be:	3308      	adds	r3, #8
 80021c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021c4:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 80021c6:	bf00      	nop
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200000d4 	.word	0x200000d4
 80021d4:	200000a0 	.word	0x200000a0
 80021d8:	080074f8 	.word	0x080074f8
 80021dc:	20001cd8 	.word	0x20001cd8
 80021e0:	20002b94 	.word	0x20002b94

080021e4 <crc_generate>:

void crc_generate(){
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80021ea:	4b73      	ldr	r3, [pc, #460]	; (80023b8 <crc_generate+0x1d4>)
 80021ec:	60bb      	str	r3, [r7, #8]
	uint16_t * crc_ptr = &(local_packet->crc);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80021f4:	3308      	adds	r3, #8
 80021f6:	607b      	str	r3, [r7, #4]
	int * crc_count_ptr = &(local_packet->crc_count);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80021fe:	330c      	adds	r3, #12
 8002200:	603b      	str	r3, [r7, #0]
	bool *curr_mem;

	*crc_ptr = 0xFFFF;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002208:	801a      	strh	r2, [r3, #0]
	*crc_count_ptr = 0;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	sprintf(uartData, "Performing CRC generation\n");
 8002210:	4a6a      	ldr	r2, [pc, #424]	; (80023bc <crc_generate+0x1d8>)
 8002212:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <crc_generate+0x1dc>)
 8002214:	4615      	mov	r5, r2
 8002216:	461c      	mov	r4, r3
 8002218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221a:	6028      	str	r0, [r5, #0]
 800221c:	6069      	str	r1, [r5, #4]
 800221e:	60aa      	str	r2, [r5, #8]
 8002220:	60eb      	str	r3, [r5, #12]
 8002222:	cc03      	ldmia	r4!, {r0, r1}
 8002224:	6128      	str	r0, [r5, #16]
 8002226:	6169      	str	r1, [r5, #20]
 8002228:	8823      	ldrh	r3, [r4, #0]
 800222a:	78a2      	ldrb	r2, [r4, #2]
 800222c:	832b      	strh	r3, [r5, #24]
 800222e:	4613      	mov	r3, r2
 8002230:	76ab      	strb	r3, [r5, #26]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002232:	4862      	ldr	r0, [pc, #392]	; (80023bc <crc_generate+0x1d8>)
 8002234:	f7fd ffec 	bl	8000210 <strlen>
 8002238:	4603      	mov	r3, r0
 800223a:	b29a      	uxth	r2, r3
 800223c:	230a      	movs	r3, #10
 800223e:	495f      	ldr	r1, [pc, #380]	; (80023bc <crc_generate+0x1d8>)
 8002240:	4860      	ldr	r0, [pc, #384]	; (80023c4 <crc_generate+0x1e0>)
 8002242:	f003 fb94 	bl	800596e <HAL_UART_Transmit>

	//Calculate CRC for address
	curr_mem = (local_packet->address) + address_len - 8;//start at MS Byte(LSB)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800224c:	3310      	adds	r3, #16
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	3368      	adds	r3, #104	; 0x68
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	e017      	b.n	800228a <crc_generate+0xa6>
		for(int j = 0;j<8;j++){
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	e00b      	b.n	8002278 <crc_generate+0x94>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	4413      	add	r3, r2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff3f 	bl	80020f0 <crc_calc>
		for(int j = 0;j<8;j++){
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2b07      	cmp	r3, #7
 800227c:	ddf0      	ble.n	8002260 <crc_generate+0x7c>
		}
		curr_mem -= 8;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	3b08      	subs	r3, #8
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	3301      	adds	r3, #1
 8002288:	623b      	str	r3, [r7, #32]
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	2b0d      	cmp	r3, #13
 800228e:	dde4      	ble.n	800225a <crc_generate+0x76>
	}

	//Calculate CRC for control
	curr_mem = local_packet->control;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002296:	3314      	adds	r3, #20
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < control_len; i++){
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e00f      	b.n	80022c2 <crc_generate+0xde>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80022a8:	3314      	adds	r3, #20
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	4413      	add	r3, r2
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff1a 	bl	80020f0 <crc_calc>
	for(int i = 0; i < control_len; i++){
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	3301      	adds	r3, #1
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b07      	cmp	r3, #7
 80022c6:	ddec      	ble.n	80022a2 <crc_generate+0xbe>
	}

//	//Calculate CRC for PID (if packet is of type i-frame)
	curr_mem = local_packet->PID;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80022ce:	3318      	adds	r3, #24
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < PID_len; i++){
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e00f      	b.n	80022fa <crc_generate+0x116>
		//Call crc_calc per bit
		crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80022e0:	3318      	adds	r3, #24
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	4413      	add	r3, r2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fefe 	bl	80020f0 <crc_calc>
	for(int i = 0; i < PID_len; i++){
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	3301      	adds	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b07      	cmp	r3, #7
 80022fe:	ddec      	ble.n	80022da <crc_generate+0xf6>
	}

	//Calculate CRC for Info field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 8;//start at MS Byte(LSB)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002306:	331c      	adds	r3, #28
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3b08      	subs	r3, #8
 8002314:	4413      	add	r3, r2
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8);i++){
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	e017      	b.n	800234e <crc_generate+0x16a>
		for(int j = 0;j<8;j++){
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e00b      	b.n	800233c <crc_generate+0x158>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002328:	4413      	add	r3, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fedd 	bl	80020f0 <crc_calc>
		for(int j = 0;j<8;j++){
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3301      	adds	r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b07      	cmp	r3, #7
 8002340:	ddf0      	ble.n	8002324 <crc_generate+0x140>
		}
		curr_mem -= 8;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	3b08      	subs	r3, #8
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8);i++){
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	3301      	adds	r3, #1
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	da00      	bge.n	800235c <crc_generate+0x178>
 800235a:	3307      	adds	r3, #7
 800235c:	10db      	asrs	r3, r3, #3
 800235e:	461a      	mov	r2, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4293      	cmp	r3, r2
 8002364:	dbdb      	blt.n	800231e <crc_generate+0x13a>
	}

	sprintf(uartData, "rx_bitcnt = %d\n", rxBit_count);
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <crc_generate+0x1e4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	4917      	ldr	r1, [pc, #92]	; (80023cc <crc_generate+0x1e8>)
 800236e:	4813      	ldr	r0, [pc, #76]	; (80023bc <crc_generate+0x1d8>)
 8002370:	f004 fa26 	bl	80067c0 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002374:	4811      	ldr	r0, [pc, #68]	; (80023bc <crc_generate+0x1d8>)
 8002376:	f7fd ff4b 	bl	8000210 <strlen>
 800237a:	4603      	mov	r3, r0
 800237c:	b29a      	uxth	r2, r3
 800237e:	230a      	movs	r3, #10
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <crc_generate+0x1d8>)
 8002382:	4810      	ldr	r0, [pc, #64]	; (80023c4 <crc_generate+0x1e0>)
 8002384:	f003 faf3 	bl	800596e <HAL_UART_Transmit>

	sprintf(uartData, "bitcnt_ptr = %d\n", *crc_count_ptr);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4910      	ldr	r1, [pc, #64]	; (80023d0 <crc_generate+0x1ec>)
 8002390:	480a      	ldr	r0, [pc, #40]	; (80023bc <crc_generate+0x1d8>)
 8002392:	f004 fa15 	bl	80067c0 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002396:	4809      	ldr	r0, [pc, #36]	; (80023bc <crc_generate+0x1d8>)
 8002398:	f7fd ff3a 	bl	8000210 <strlen>
 800239c:	4603      	mov	r3, r0
 800239e:	b29a      	uxth	r2, r3
 80023a0:	230a      	movs	r3, #10
 80023a2:	4906      	ldr	r1, [pc, #24]	; (80023bc <crc_generate+0x1d8>)
 80023a4:	4807      	ldr	r0, [pc, #28]	; (80023c4 <crc_generate+0x1e0>)
 80023a6:	f003 fae2 	bl	800596e <HAL_UART_Transmit>
	*crc_count_ptr = 0;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
}
 80023b0:	bf00      	nop
 80023b2:	3728      	adds	r7, #40	; 0x28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bdb0      	pop	{r4, r5, r7, pc}
 80023b8:	200000d4 	.word	0x200000d4
 80023bc:	20001cd8 	.word	0x20001cd8
 80023c0:	08007518 	.word	0x08007518
 80023c4:	20002b94 	.word	0x20002b94
 80023c8:	200000a0 	.word	0x200000a0
 80023cc:	08007534 	.word	0x08007534
 80023d0:	08007544 	.word	0x08007544

080023d4 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 80023de:	f000 f999 	bl	8002714 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <initProgram+0x58>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	7013      	strb	r3, [r2, #0]
	toggleMode();
 80023e8:	f000 f826 	bl	8002438 <toggleMode>
	toggleMode();
 80023ec:	f000 f824 	bl	8002438 <toggleMode>

	if (mode) {
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <initProgram+0x58>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d009      	beq.n	800240c <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <initProgram+0x5c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2264      	movs	r2, #100	; 0x64
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <initProgram+0x60>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
 800240a:	e008      	b.n	800241e <initProgram+0x4a>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <initProgram+0x5c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f242 7210 	movw	r2, #10000	; 0x2710
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <initProgram+0x60>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2268      	movs	r2, #104	; 0x68
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 800241e:	f7fe f98d 	bl	800073c <init_AX25>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20002b3c 	.word	0x20002b3c
 8002430:	20002b54 	.word	0x20002b54
 8002434:	2000289c 	.word	0x2000289c

08002438 <toggleMode>:



void toggleMode() {
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800243c:	2006      	movs	r0, #6
 800243e:	f001 fadc 	bl	80039fa <HAL_NVIC_DisableIRQ>

	//Toggle mode
	mode = !mode;
 8002442:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <toggleMode+0xa8>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f083 0301 	eor.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <toggleMode+0xa8>)
 800245e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8002460:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <toggleMode+0xa8>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	2120      	movs	r1, #32
 8002468:	481e      	ldr	r0, [pc, #120]	; (80024e4 <toggleMode+0xac>)
 800246a:	f002 f89d 	bl	80045a8 <HAL_GPIO_WritePin>
	midbit = false;
 800246e:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <toggleMode+0xb0>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 8002474:	481d      	ldr	r0, [pc, #116]	; (80024ec <toggleMode+0xb4>)
 8002476:	f002 fe2c 	bl	80050d2 <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 800247a:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <toggleMode+0xb4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2200      	movs	r2, #0
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop(&htim4);
 8002482:	481b      	ldr	r0, [pc, #108]	; (80024f0 <toggleMode+0xb8>)
 8002484:	f002 fe25 	bl	80050d2 <HAL_TIM_Base_Stop>
	htim4.Instance->CNT = 0;
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <toggleMode+0xb8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 8002490:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <toggleMode+0xa8>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <toggleMode+0x6c>
		//Set Timer periods
		//htim2.Instance->ARR = TIM2_AUTORELOAD_TX; This is no longer used
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <toggleMode+0xb4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f44f 724f 	mov.w	r2, #828	; 0x33c
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80024a2:	e015      	b.n	80024d0 <toggleMode+0x98>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <toggleMode+0xbc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <toggleMode+0xb4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2268      	movs	r2, #104	; 0x68
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start(&htim4);
 80024b6:	480e      	ldr	r0, [pc, #56]	; (80024f0 <toggleMode+0xb8>)
 80024b8:	f002 fde7 	bl	800508a <HAL_TIM_Base_Start>

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <toggleMode+0xb4>)
 80024be:	f002 fe33 	bl	8005128 <HAL_TIM_Base_Start_IT>

		//Stop DAC
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80024c2:	2100      	movs	r1, #0
 80024c4:	480c      	ldr	r0, [pc, #48]	; (80024f8 <toggleMode+0xc0>)
 80024c6:	f001 fad4 	bl	8003a72 <HAL_DAC_Stop_DMA>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80024ca:	2006      	movs	r0, #6
 80024cc:	f001 fa87 	bl	80039de <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024d6:	4803      	ldr	r0, [pc, #12]	; (80024e4 <toggleMode+0xac>)
 80024d8:	f002 f866 	bl	80045a8 <HAL_GPIO_WritePin>
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20002b3c 	.word	0x20002b3c
 80024e4:	40020000 	.word	0x40020000
 80024e8:	200000a4 	.word	0x200000a4
 80024ec:	2000289c 	.word	0x2000289c
 80024f0:	20002dd4 	.word	0x20002dd4
 80024f4:	20002b54 	.word	0x20002b54
 80024f8:	20002b40 	.word	0x20002b40

080024fc <loadPeriodBuffer>:
bool bufffull = false;
void loadPeriodBuffer(int timerCnt) {
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	if(canWrite){
 8002504:	4b16      	ldr	r3, [pc, #88]	; (8002560 <loadPeriodBuffer+0x64>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01d      	beq.n	8002548 <loadPeriodBuffer+0x4c>
		periodBuffer[periodSaveCount] = timerCnt;
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <loadPeriodBuffer+0x68>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a14      	ldr	r2, [pc, #80]	; (8002568 <loadPeriodBuffer+0x6c>)
 8002516:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		periodSaveCount++;
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <loadPeriodBuffer+0x68>)
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	3301      	adds	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <loadPeriodBuffer+0x68>)
 8002524:	801a      	strh	r2, [r3, #0]
		if (periodSaveCount >= RX_BUFFERSIZE) {
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <loadPeriodBuffer+0x68>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	2b7f      	cmp	r3, #127	; 0x7f
 800252c:	d902      	bls.n	8002534 <loadPeriodBuffer+0x38>
			periodSaveCount = 0;
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <loadPeriodBuffer+0x68>)
 8002530:	2200      	movs	r2, #0
 8002532:	801a      	strh	r2, [r3, #0]
		}

		//Buffer is full
		if(periodSaveCount == periodReadCount){
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <loadPeriodBuffer+0x68>)
 8002536:	881a      	ldrh	r2, [r3, #0]
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <loadPeriodBuffer+0x70>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d106      	bne.n	800254e <loadPeriodBuffer+0x52>
			canWrite = false;
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <loadPeriodBuffer+0x64>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e002      	b.n	800254e <loadPeriodBuffer+0x52>
		}
	} else {
		bufffull = true;
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <loadPeriodBuffer+0x74>)
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <loadPeriodBuffer+0x78>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	20000010 	.word	0x20000010
 8002564:	200000ba 	.word	0x200000ba
 8002568:	2000293c 	.word	0x2000293c
 800256c:	200000bc 	.word	0x200000bc
 8002570:	200000a6 	.word	0x200000a6
 8002574:	200000b8 	.word	0x200000b8

08002578 <Tim3IT>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void Tim3IT() {
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
	if (mode) {
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <Tim3IT+0x54>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <Tim3IT+0x14>
		midbit = false;
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <Tim3IT+0x58>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]

		else {
			signal_detect_decay--;
		}
	}
}
 800258a:	e01c      	b.n	80025c6 <Tim3IT+0x4e>
		if(signal_detect_decay <= 0){
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <Tim3IT+0x5c>)
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d112      	bne.n	80025ba <Tim3IT+0x42>
			if(signal_valid){
 8002594:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <Tim3IT+0x60>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <Tim3IT+0x3a>
				loadPeriodBuffer(-1);
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f7ff ffac 	bl	80024fc <loadPeriodBuffer>
				HAL_TIM_Base_Stop(&htim4);
 80025a4:	480d      	ldr	r0, [pc, #52]	; (80025dc <Tim3IT+0x64>)
 80025a6:	f002 fd94 	bl	80050d2 <HAL_TIM_Base_Stop>
				htim4.Instance->CNT = 0;
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <Tim3IT+0x64>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24
			signal_valid = false;
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <Tim3IT+0x60>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
}
 80025b8:	e005      	b.n	80025c6 <Tim3IT+0x4e>
			signal_detect_decay--;
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <Tim3IT+0x5c>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <Tim3IT+0x5c>)
 80025c4:	801a      	strh	r2, [r3, #0]
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20002b3c 	.word	0x20002b3c
 80025d0:	200000a4 	.word	0x200000a4
 80025d4:	200000be 	.word	0x200000be
 80025d8:	200000c0 	.word	0x200000c0
 80025dc:	20002dd4 	.word	0x20002dd4

080025e0 <FreqCounterPinEXTI>:
int edges = 0;
int gotVal = 0;
int last_carrier_tone = 0;
int carrier_tone = 0;

void FreqCounterPinEXTI() {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
	//Measure time since last measurement
	gotVal = htim2.Instance->CNT;
 80025e6:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <FreqCounterPinEXTI+0xc0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <FreqCounterPinEXTI+0xc4>)
 80025f0:	601a      	str	r2, [r3, #0]
	int freq = PCONVERT / (gotVal);
 80025f2:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <FreqCounterPinEXTI+0xc4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2c      	ldr	r2, [pc, #176]	; (80026a8 <FreqCounterPinEXTI+0xc8>)
 80025f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80025fc:	607b      	str	r3, [r7, #4]
	loadPeriodBuffer(gotVal);
 80025fe:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <FreqCounterPinEXTI+0xc4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff7a 	bl	80024fc <loadPeriodBuffer>

	last_carrier_tone = carrier_tone;
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <FreqCounterPinEXTI+0xcc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <FreqCounterPinEXTI+0xd0>)
 800260e:	6013      	str	r3, [r2, #0]

	//2200Hz detected
	if ( ((HIGHFREQ - FREQDEV) < freq) && (freq < (HIGHFREQ + FREQDEV)) ){
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f240 726c 	movw	r2, #1900	; 0x76c
 8002616:	4293      	cmp	r3, r2
 8002618:	dd09      	ble.n	800262e <FreqCounterPinEXTI+0x4e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002620:	4293      	cmp	r3, r2
 8002622:	dc04      	bgt.n	800262e <FreqCounterPinEXTI+0x4e>
		carrier_tone = HIGHFREQ;
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <FreqCounterPinEXTI+0xcc>)
 8002626:	f640 0298 	movw	r2, #2200	; 0x898
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e011      	b.n	8002652 <FreqCounterPinEXTI+0x72>
	}
	//1200Hz detected
	else if ( ((LOWFREQ - FREQDEV) < freq) && (freq < (LOWFREQ + FREQDEV)) ){
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002634:	dd09      	ble.n	800264a <FreqCounterPinEXTI+0x6a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f240 52db 	movw	r2, #1499	; 0x5db
 800263c:	4293      	cmp	r3, r2
 800263e:	dc04      	bgt.n	800264a <FreqCounterPinEXTI+0x6a>
		carrier_tone = LOWFREQ;
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <FreqCounterPinEXTI+0xcc>)
 8002642:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e003      	b.n	8002652 <FreqCounterPinEXTI+0x72>
	}
	//Invalid freq
	else{
		carrier_tone = -1;
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <FreqCounterPinEXTI+0xcc>)
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	601a      	str	r2, [r3, #0]
//		sprintf(uartData, "bad frequency detected, frequency was %d\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}

	if(carrier_tone!=last_carrier_tone || carrier_tone == -1){
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <FreqCounterPinEXTI+0xcc>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <FreqCounterPinEXTI+0xd0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d104      	bne.n	8002668 <FreqCounterPinEXTI+0x88>
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <FreqCounterPinEXTI+0xcc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002666:	d107      	bne.n	8002678 <FreqCounterPinEXTI+0x98>
		edges = 0;
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <FreqCounterPinEXTI+0xd4>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
		htim4.Instance->CNT = 0;
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <FreqCounterPinEXTI+0xd8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	625a      	str	r2, [r3, #36]	; 0x24
 8002676:	e004      	b.n	8002682 <FreqCounterPinEXTI+0xa2>
	} else {
		edges++;
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <FreqCounterPinEXTI+0xd4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <FreqCounterPinEXTI+0xd4>)
 8002680:	6013      	str	r3, [r2, #0]
	}

	signal_valid = true;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <FreqCounterPinEXTI+0xdc>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
	signal_detect_decay = DECAY_TIME;
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <FreqCounterPinEXTI+0xe0>)
 800268a:	2208      	movs	r2, #8
 800268c:	801a      	strh	r2, [r3, #0]
	htim2.Instance->CNT = 0;
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <FreqCounterPinEXTI+0xc0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2200      	movs	r2, #0
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20002b54 	.word	0x20002b54
 80026a4:	200000ac 	.word	0x200000ac
 80026a8:	00989680 	.word	0x00989680
 80026ac:	200000b4 	.word	0x200000b4
 80026b0:	200000b0 	.word	0x200000b0
 80026b4:	200000a8 	.word	0x200000a8
 80026b8:	20002dd4 	.word	0x20002dd4
 80026bc:	200000c0 	.word	0x200000c0
 80026c0:	200000be 	.word	0x200000be

080026c4 <generateBitstream>:
	}

	HAL_TIM_Base_Stop(&htim3);
	return wave_start;
}
void generateBitstream() {
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <generateBitstream+0x4c>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <generateBitstream+0x4c>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <generateBitstream+0x4c>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <generateBitstream+0x4c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <generateBitstream+0x4c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <generateBitstream+0x4c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <generateBitstream+0x4c>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <generateBitstream+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <generateBitstream+0x4c>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <generateBitstream+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	725a      	strb	r2, [r3, #9]

}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20002890 	.word	0x20002890

08002714 <initOUTData>:
void initOUTData() {
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	//edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
	//edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
	generateBitstream();
 8002718:	f7ff ffd4 	bl	80026c4 <generateBitstream>
}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}

08002720 <pertobit>:
uint16_t	signal_detect_decay = 0;			//Pseudo timer to detect if value is valid
bool		signal_valid = false;					//Determines if frequency being read is a valid bit
uint16_t trackBit = 0;
uint16_t bitSaveCount = 0;

int pertobit(uint32_t inputPeriod) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / inputPeriod;
 8002728:	4a1f      	ldr	r2, [pc, #124]	; (80027a8 <pertobit+0x88>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	60fb      	str	r3, [r7, #12]

//	sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	//return freq;
	if ((HIGHFREQ - FREQDEV < freq) && (freq < HIGHFREQ + FREQDEV)){
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f240 726c 	movw	r2, #1900	; 0x76c
 8002738:	4293      	cmp	r3, r2
 800273a:	dd15      	ble.n	8002768 <pertobit+0x48>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002742:	4293      	cmp	r3, r2
 8002744:	dc10      	bgt.n	8002768 <pertobit+0x48>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4918      	ldr	r1, [pc, #96]	; (80027ac <pertobit+0x8c>)
 800274a:	4819      	ldr	r0, [pc, #100]	; (80027b0 <pertobit+0x90>)
 800274c:	f004 f838 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002750:	4817      	ldr	r0, [pc, #92]	; (80027b0 <pertobit+0x90>)
 8002752:	f7fd fd5d 	bl	8000210 <strlen>
 8002756:	4603      	mov	r3, r0
 8002758:	b29a      	uxth	r2, r3
 800275a:	230a      	movs	r3, #10
 800275c:	4914      	ldr	r1, [pc, #80]	; (80027b0 <pertobit+0x90>)
 800275e:	4815      	ldr	r0, [pc, #84]	; (80027b4 <pertobit+0x94>)
 8002760:	f003 f905 	bl	800596e <HAL_UART_Transmit>
		return 1;
 8002764:	2301      	movs	r3, #1
 8002766:	e01b      	b.n	80027a0 <pertobit+0x80>
	}
	else if ((LOWFREQ - FREQDEV < freq) && (freq < LOWFREQ + FREQDEV)){
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800276e:	dd15      	ble.n	800279c <pertobit+0x7c>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f240 52db 	movw	r2, #1499	; 0x5db
 8002776:	4293      	cmp	r3, r2
 8002778:	dc10      	bgt.n	800279c <pertobit+0x7c>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	490b      	ldr	r1, [pc, #44]	; (80027ac <pertobit+0x8c>)
 800277e:	480c      	ldr	r0, [pc, #48]	; (80027b0 <pertobit+0x90>)
 8002780:	f004 f81e 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002784:	480a      	ldr	r0, [pc, #40]	; (80027b0 <pertobit+0x90>)
 8002786:	f7fd fd43 	bl	8000210 <strlen>
 800278a:	4603      	mov	r3, r0
 800278c:	b29a      	uxth	r2, r3
 800278e:	230a      	movs	r3, #10
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <pertobit+0x90>)
 8002792:	4808      	ldr	r0, [pc, #32]	; (80027b4 <pertobit+0x94>)
 8002794:	f003 f8eb 	bl	800596e <HAL_UART_Transmit>
		return 0;
 8002798:	2300      	movs	r3, #0
 800279a:	e001      	b.n	80027a0 <pertobit+0x80>
	}
	else
//		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		return -1;
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	00989680 	.word	0x00989680
 80027ac:	080075b0 	.word	0x080075b0
 80027b0:	20001cd8 	.word	0x20001cd8
 80027b4:	20002b94 	.word	0x20002b94

080027b8 <loadBit>:
int loadBit(){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
	int startbit;
	int currbit = -1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	617b      	str	r3, [r7, #20]
	int loopCount = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]
	int checkCount;
	bool goodbit = false;
 80027c8:	2300      	movs	r3, #0
 80027ca:	72fb      	strb	r3, [r7, #11]

	startbit = pertobit(periodBuffer[trackBit]);
 80027cc:	4b31      	ldr	r3, [pc, #196]	; (8002894 <loadBit+0xdc>)
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b31      	ldr	r3, [pc, #196]	; (8002898 <loadBit+0xe0>)
 80027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ffa1 	bl	8002720 <pertobit>
 80027de:	6078      	str	r0, [r7, #4]
//	sprintf(uartData, "startbit = %d\n",startbit);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	//Increment trackBit
	trackBit++;
 80027e0:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <loadBit+0xdc>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <loadBit+0xdc>)
 80027ea:	801a      	strh	r2, [r3, #0]
	if (trackBit >= RX_BUFFERSIZE)
 80027ec:	4b29      	ldr	r3, [pc, #164]	; (8002894 <loadBit+0xdc>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	2b7f      	cmp	r3, #127	; 0x7f
 80027f2:	d902      	bls.n	80027fa <loadBit+0x42>
		trackBit = 0;
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <loadBit+0xdc>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	801a      	strh	r2, [r3, #0]

	if(startbit==1){
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d102      	bne.n	8002806 <loadBit+0x4e>
		checkCount = 3;
 8002800:	2303      	movs	r3, #3
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	e02f      	b.n	8002866 <loadBit+0xae>
	}
	else if(startbit==0){
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <loadBit+0x5a>
		checkCount = 1;
 800280c:	2301      	movs	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	e029      	b.n	8002866 <loadBit+0xae>
	}
	else {
		checkCount = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
	}

	//Valiate startbit value
	while(loopCount<checkCount){
 8002816:	e026      	b.n	8002866 <loadBit+0xae>
		currbit = pertobit(periodBuffer[trackBit]);
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <loadBit+0xdc>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <loadBit+0xe0>)
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff7b 	bl	8002720 <pertobit>
 800282a:	6178      	str	r0, [r7, #20]

		//Good bit
		if(startbit==currbit){
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	d10c      	bne.n	800284e <loadBit+0x96>
			goodbit = true;
 8002834:	2301      	movs	r3, #1
 8002836:	72fb      	strb	r3, [r7, #11]
			goodbit = false;
			break;
		}

		//Increment trackBit
		trackBit++;
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <loadBit+0xdc>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <loadBit+0xdc>)
 8002842:	801a      	strh	r2, [r3, #0]
		if (trackBit >= RX_BUFFERSIZE)
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <loadBit+0xdc>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	2b7f      	cmp	r3, #127	; 0x7f
 800284a:	d909      	bls.n	8002860 <loadBit+0xa8>
 800284c:	e005      	b.n	800285a <loadBit+0xa2>
			currbit = -1;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
 8002852:	617b      	str	r3, [r7, #20]
			goodbit = false;
 8002854:	2300      	movs	r3, #0
 8002856:	72fb      	strb	r3, [r7, #11]
			break;
 8002858:	e009      	b.n	800286e <loadBit+0xb6>
			trackBit = 0;
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <loadBit+0xdc>)
 800285c:	2200      	movs	r2, #0
 800285e:	801a      	strh	r2, [r3, #0]
		loopCount++;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	3301      	adds	r3, #1
 8002864:	613b      	str	r3, [r7, #16]
	while(loopCount<checkCount){
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	429a      	cmp	r2, r3
 800286c:	dbd4      	blt.n	8002818 <loadBit+0x60>
	}

	//Increment bitSaveCount
	bitSaveCount++;
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <loadBit+0xe4>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	3301      	adds	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <loadBit+0xe4>)
 8002878:	801a      	strh	r2, [r3, #0]
	if (bitSaveCount >= RX_BUFFERSIZE)
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <loadBit+0xe4>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	2b7f      	cmp	r3, #127	; 0x7f
 8002880:	d902      	bls.n	8002888 <loadBit+0xd0>
		bitSaveCount = 0;
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <loadBit+0xe4>)
 8002884:	2200      	movs	r2, #0
 8002886:	801a      	strh	r2, [r3, #0]

	return currbit;
 8002888:	697b      	ldr	r3, [r7, #20]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200000c2 	.word	0x200000c2
 8002898:	2000293c 	.word	0x2000293c
 800289c:	200000c4 	.word	0x200000c4

080028a0 <loadOctet>:
int loadOctet(bool* bufferptr) {
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	int bit;
	bool myPtr[8];
	bool isFlag = true;
 80028a8:	2301      	movs	r3, #1
 80028aa:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < 8; i++) {
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	e043      	b.n	800293a <loadOctet+0x9a>
		bit = loadBit();
 80028b2:	f7ff ff81 	bl	80027b8 <loadBit>
 80028b6:	6138      	str	r0, [r7, #16]

		sprintf(uartData, "bit[%d] = %d \n",i,bit);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4955      	ldr	r1, [pc, #340]	; (8002a14 <loadOctet+0x174>)
 80028be:	4856      	ldr	r0, [pc, #344]	; (8002a18 <loadOctet+0x178>)
 80028c0:	f003 ff7e 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80028c4:	4854      	ldr	r0, [pc, #336]	; (8002a18 <loadOctet+0x178>)
 80028c6:	f7fd fca3 	bl	8000210 <strlen>
 80028ca:	4603      	mov	r3, r0
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	230a      	movs	r3, #10
 80028d0:	4951      	ldr	r1, [pc, #324]	; (8002a18 <loadOctet+0x178>)
 80028d2:	4852      	ldr	r0, [pc, #328]	; (8002a1c <loadOctet+0x17c>)
 80028d4:	f003 f84b 	bl	800596e <HAL_UART_Transmit>

        if(bit < 0){
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	da11      	bge.n	8002902 <loadOctet+0x62>
    		sprintf(uartData, "bit %d was bad\n",i);
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	494f      	ldr	r1, [pc, #316]	; (8002a20 <loadOctet+0x180>)
 80028e2:	484d      	ldr	r0, [pc, #308]	; (8002a18 <loadOctet+0x178>)
 80028e4:	f003 ff6c 	bl	80067c0 <siprintf>
    		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80028e8:	484b      	ldr	r0, [pc, #300]	; (8002a18 <loadOctet+0x178>)
 80028ea:	f7fd fc91 	bl	8000210 <strlen>
 80028ee:	4603      	mov	r3, r0
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	230a      	movs	r3, #10
 80028f4:	4948      	ldr	r1, [pc, #288]	; (8002a18 <loadOctet+0x178>)
 80028f6:	4849      	ldr	r0, [pc, #292]	; (8002a1c <loadOctet+0x17c>)
 80028f8:	f003 f839 	bl	800596e <HAL_UART_Transmit>
        	return -1;
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002900:	e083      	b.n	8002a0a <loadOctet+0x16a>
        }
		myPtr[i] = bit;
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2d9      	uxtb	r1, r3
 800290e:	f107 0208 	add.w	r2, r7, #8
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4413      	add	r3, r2
 8002916:	460a      	mov	r2, r1
 8002918:	701a      	strb	r2, [r3, #0]
        if(myPtr[i] != AX25TBYTE[i]){
 800291a:	f107 0208 	add.w	r2, r7, #8
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4413      	add	r3, r2
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	493f      	ldr	r1, [pc, #252]	; (8002a24 <loadOctet+0x184>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	440b      	add	r3, r1
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <loadOctet+0x94>
        	isFlag = false;
 8002930:	2300      	movs	r3, #0
 8002932:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) {
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	3301      	adds	r3, #1
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b07      	cmp	r3, #7
 800293e:	ddb8      	ble.n	80028b2 <loadOctet+0x12>
        }
    }
	//If this is not a flag, copy the values into the buffer pointer
	if(!isFlag){
 8002940:	7ffb      	ldrb	r3, [r7, #31]
 8002942:	f083 0301 	eor.w	r3, r3, #1
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d05d      	beq.n	8002a08 <loadOctet+0x168>
		sprintf(uartData, "Printing octet [MSB:LSB]= ");
 800294c:	4a32      	ldr	r2, [pc, #200]	; (8002a18 <loadOctet+0x178>)
 800294e:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <loadOctet+0x188>)
 8002950:	4615      	mov	r5, r2
 8002952:	461c      	mov	r4, r3
 8002954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002956:	6028      	str	r0, [r5, #0]
 8002958:	6069      	str	r1, [r5, #4]
 800295a:	60aa      	str	r2, [r5, #8]
 800295c:	60eb      	str	r3, [r5, #12]
 800295e:	cc03      	ldmia	r4!, {r0, r1}
 8002960:	6128      	str	r0, [r5, #16]
 8002962:	6169      	str	r1, [r5, #20]
 8002964:	8823      	ldrh	r3, [r4, #0]
 8002966:	78a2      	ldrb	r2, [r4, #2]
 8002968:	832b      	strh	r3, [r5, #24]
 800296a:	4613      	mov	r3, r2
 800296c:	76ab      	strb	r3, [r5, #26]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800296e:	482a      	ldr	r0, [pc, #168]	; (8002a18 <loadOctet+0x178>)
 8002970:	f7fd fc4e 	bl	8000210 <strlen>
 8002974:	4603      	mov	r3, r0
 8002976:	b29a      	uxth	r2, r3
 8002978:	230a      	movs	r3, #10
 800297a:	4927      	ldr	r1, [pc, #156]	; (8002a18 <loadOctet+0x178>)
 800297c:	4827      	ldr	r0, [pc, #156]	; (8002a1c <loadOctet+0x17c>)
 800297e:	f002 fff6 	bl	800596e <HAL_UART_Transmit>

		for(int i = 0;i<8;i++){
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	e02c      	b.n	80029e2 <loadOctet+0x142>
			bufferptr[7-i] = (myPtr[7-i]==1)?true:false;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f1c3 0307 	rsb	r3, r3, #7
 800298e:	f107 0220 	add.w	r2, r7, #32
 8002992:	4413      	add	r3, r2
 8002994:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	4619      	mov	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	440b      	add	r3, r1
 80029a4:	701a      	strb	r2, [r3, #0]
			rxBit_count++;
 80029a6:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <loadOctet+0x18c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <loadOctet+0x18c>)
 80029ae:	6013      	str	r3, [r2, #0]
			sprintf(uartData, " %d ",bufferptr[7-i]);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	491b      	ldr	r1, [pc, #108]	; (8002a30 <loadOctet+0x190>)
 80029c2:	4815      	ldr	r0, [pc, #84]	; (8002a18 <loadOctet+0x178>)
 80029c4:	f003 fefc 	bl	80067c0 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80029c8:	4813      	ldr	r0, [pc, #76]	; (8002a18 <loadOctet+0x178>)
 80029ca:	f7fd fc21 	bl	8000210 <strlen>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	230a      	movs	r3, #10
 80029d4:	4910      	ldr	r1, [pc, #64]	; (8002a18 <loadOctet+0x178>)
 80029d6:	4811      	ldr	r0, [pc, #68]	; (8002a1c <loadOctet+0x17c>)
 80029d8:	f002 ffc9 	bl	800596e <HAL_UART_Transmit>
		for(int i = 0;i<8;i++){
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3301      	adds	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b07      	cmp	r3, #7
 80029e6:	ddcf      	ble.n	8002988 <loadOctet+0xe8>
		}
		sprintf(uartData, "\r\n");
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <loadOctet+0x178>)
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <loadOctet+0x194>)
 80029ec:	8811      	ldrh	r1, [r2, #0]
 80029ee:	7892      	ldrb	r2, [r2, #2]
 80029f0:	8019      	strh	r1, [r3, #0]
 80029f2:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80029f4:	4808      	ldr	r0, [pc, #32]	; (8002a18 <loadOctet+0x178>)
 80029f6:	f7fd fc0b 	bl	8000210 <strlen>
 80029fa:	4603      	mov	r3, r0
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	230a      	movs	r3, #10
 8002a00:	4905      	ldr	r1, [pc, #20]	; (8002a18 <loadOctet+0x178>)
 8002a02:	4806      	ldr	r0, [pc, #24]	; (8002a1c <loadOctet+0x17c>)
 8002a04:	f002 ffb3 	bl	800596e <HAL_UART_Transmit>
	}
	return isFlag;
 8002a08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bdb0      	pop	{r4, r5, r7, pc}
 8002a12:	bf00      	nop
 8002a14:	080075cc 	.word	0x080075cc
 8002a18:	20001cd8 	.word	0x20001cd8
 8002a1c:	20002b94 	.word	0x20002b94
 8002a20:	080075dc 	.word	0x080075dc
 8002a24:	20000008 	.word	0x20000008
 8002a28:	080075ec 	.word	0x080075ec
 8002a2c:	200000a0 	.word	0x200000a0
 8002a30:	08007608 	.word	0x08007608
 8002a34:	08007610 	.word	0x08007610

08002a38 <streamGet>:
int streamGet() {
 8002a38:	b5b0      	push	{r4, r5, r7, lr}
 8002a3a:	b090      	sub	sp, #64	; 0x40
 8002a3c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002a3e:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <streamGet+0x228>)
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28

	int byteArray[8];
	int max_octets = (int)(AX25_PACKET_MAX)/8;
 8002a42:	f240 134b 	movw	r3, #331	; 0x14b
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
	int octet_count,good_octet;
	bool gotflag;

	//Just do this unless we need to toggle
	while(!changeMode){
 8002a48:	e0fb      	b.n	8002c42 <streamGet+0x20a>
		gotflag = false;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//Slide bits
		for(int i = 0; i < 7; i++){
 8002a50:	2300      	movs	r3, #0
 8002a52:	633b      	str	r3, [r7, #48]	; 0x30
 8002a54:	e011      	b.n	8002a7a <streamGet+0x42>
			byteArray[i] = byteArray[i+1];
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	3301      	adds	r3, #1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002a60:	4413      	add	r3, r2
 8002a62:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002a6e:	440b      	add	r3, r1
 8002a70:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 7; i++){
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	3301      	adds	r3, #1
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	2b06      	cmp	r3, #6
 8002a7e:	ddea      	ble.n	8002a56 <streamGet+0x1e>
		}
		byteArray[7] = loadBit();
 8002a80:	f7ff fe9a 	bl	80027b8 <loadBit>
 8002a84:	4603      	mov	r3, r0
 8002a86:	623b      	str	r3, [r7, #32]
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
//		}
//		sprintf(uartData, "Current octet:");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		//Detect AX25 flag bytes
		for(int i = 0;i < 8; i++){
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a8c:	e019      	b.n	8002ac2 <streamGet+0x8a>
//			sprintf(uartData, " %d ",byteArray[i]);
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			//If the byte isn't lined up, break loop
			if(byteArray[i]!=AX25TBYTE[i]) {
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002a96:	4413      	add	r3, r2
 8002a98:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a9c:	4971      	ldr	r1, [pc, #452]	; (8002c64 <streamGet+0x22c>)
 8002a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa0:	440a      	add	r2, r1
 8002aa2:	7812      	ldrb	r2, [r2, #0]
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d003      	beq.n	8002ab0 <streamGet+0x78>
				gotflag = false;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002aae:	e00b      	b.n	8002ac8 <streamGet+0x90>
			}
			//If the loop makes it to the lowest bit, the flag should be lined up
			else if(i==7){
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	2b07      	cmp	r3, #7
 8002ab4:	d102      	bne.n	8002abc <streamGet+0x84>
				gotflag = true;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0;i < 8; i++){
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	3301      	adds	r3, #1
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	2b07      	cmp	r3, #7
 8002ac6:	dde2      	ble.n	8002a8e <streamGet+0x56>
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);


		//Got flag
		if(gotflag){
 8002ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80b8 	beq.w	8002c42 <streamGet+0x20a>
			sprintf(uartData, "Start AX.25 Flag Detected\r\n");
 8002ad2:	4a65      	ldr	r2, [pc, #404]	; (8002c68 <streamGet+0x230>)
 8002ad4:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <streamGet+0x234>)
 8002ad6:	4615      	mov	r5, r2
 8002ad8:	461c      	mov	r4, r3
 8002ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002adc:	6028      	str	r0, [r5, #0]
 8002ade:	6069      	str	r1, [r5, #4]
 8002ae0:	60aa      	str	r2, [r5, #8]
 8002ae2:	60eb      	str	r3, [r5, #12]
 8002ae4:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002ae6:	6128      	str	r0, [r5, #16]
 8002ae8:	6169      	str	r1, [r5, #20]
 8002aea:	61aa      	str	r2, [r5, #24]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002aec:	485e      	ldr	r0, [pc, #376]	; (8002c68 <streamGet+0x230>)
 8002aee:	f7fd fb8f 	bl	8000210 <strlen>
 8002af2:	4603      	mov	r3, r0
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	230a      	movs	r3, #10
 8002af8:	495b      	ldr	r1, [pc, #364]	; (8002c68 <streamGet+0x230>)
 8002afa:	485d      	ldr	r0, [pc, #372]	; (8002c70 <streamGet+0x238>)
 8002afc:	f002 ff37 	bl	800596e <HAL_UART_Transmit>
			octet_count  = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c

			//Until AX.25 buffer overflows, continue reading octets
			good_octet = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
			while( (good_octet==0) && (octet_count < max_octets) ){
 8002b08:	e01a      	b.n	8002b40 <streamGet+0x108>
				good_octet = loadOctet(&local_packet->AX25_PACKET[octet_count*8]);
 8002b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b10:	4413      	add	r3, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fec4 	bl	80028a0 <loadOctet>
 8002b18:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(uartData, "Loaded octet %d out of %d\r\n",octet_count,max_octets);
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b1e:	4955      	ldr	r1, [pc, #340]	; (8002c74 <streamGet+0x23c>)
 8002b20:	4851      	ldr	r0, [pc, #324]	; (8002c68 <streamGet+0x230>)
 8002b22:	f003 fe4d 	bl	80067c0 <siprintf>
				//sprintf(uartData, "good_octet: %d\r\n",good_octet);
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b26:	4850      	ldr	r0, [pc, #320]	; (8002c68 <streamGet+0x230>)
 8002b28:	f7fd fb72 	bl	8000210 <strlen>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	230a      	movs	r3, #10
 8002b32:	494d      	ldr	r1, [pc, #308]	; (8002c68 <streamGet+0x230>)
 8002b34:	484e      	ldr	r0, [pc, #312]	; (8002c70 <streamGet+0x238>)
 8002b36:	f002 ff1a 	bl	800596e <HAL_UART_Transmit>

				octet_count+=1;
 8002b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
			while( (good_octet==0) && (octet_count < max_octets) ){
 8002b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <streamGet+0x116>
 8002b46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	dbdd      	blt.n	8002b0a <streamGet+0xd2>
			}
			//If an octet was bad, this was a bad packet
			if(good_octet!=1){
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d012      	beq.n	8002b7a <streamGet+0x142>
				sprintf(uartData, "Bad packet! Detected bad signal.\n\n",octet_count);
 8002b54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b56:	4948      	ldr	r1, [pc, #288]	; (8002c78 <streamGet+0x240>)
 8002b58:	4843      	ldr	r0, [pc, #268]	; (8002c68 <streamGet+0x230>)
 8002b5a:	f003 fe31 	bl	80067c0 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b5e:	4842      	ldr	r0, [pc, #264]	; (8002c68 <streamGet+0x230>)
 8002b60:	f7fd fb56 	bl	8000210 <strlen>
 8002b64:	4603      	mov	r3, r0
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	230a      	movs	r3, #10
 8002b6a:	493f      	ldr	r1, [pc, #252]	; (8002c68 <streamGet+0x230>)
 8002b6c:	4840      	ldr	r0, [pc, #256]	; (8002c70 <streamGet+0x238>)
 8002b6e:	f002 fefe 	bl	800596e <HAL_UART_Transmit>
				//for(int i = 0;i<)
				gotflag = false;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002b78:	e063      	b.n	8002c42 <streamGet+0x20a>
			}
			//If ax.25 buffer overflows
			else if(octet_count >= max_octets){
 8002b7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	db12      	blt.n	8002ba8 <streamGet+0x170>
				sprintf(uartData, "Bad packet! Not enough octets\r\n\n",octet_count);
 8002b82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b84:	493d      	ldr	r1, [pc, #244]	; (8002c7c <streamGet+0x244>)
 8002b86:	4838      	ldr	r0, [pc, #224]	; (8002c68 <streamGet+0x230>)
 8002b88:	f003 fe1a 	bl	80067c0 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b8c:	4836      	ldr	r0, [pc, #216]	; (8002c68 <streamGet+0x230>)
 8002b8e:	f7fd fb3f 	bl	8000210 <strlen>
 8002b92:	4603      	mov	r3, r0
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	230a      	movs	r3, #10
 8002b98:	4933      	ldr	r1, [pc, #204]	; (8002c68 <streamGet+0x230>)
 8002b9a:	4835      	ldr	r0, [pc, #212]	; (8002c70 <streamGet+0x238>)
 8002b9c:	f002 fee7 	bl	800596e <HAL_UART_Transmit>
				gotflag = false;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002ba6:	e04c      	b.n	8002c42 <streamGet+0x20a>
			}
			//
			else if(octet_count == 1){
 8002ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d12d      	bne.n	8002c0a <streamGet+0x1d2>
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n");
 8002bae:	4a2e      	ldr	r2, [pc, #184]	; (8002c68 <streamGet+0x230>)
 8002bb0:	4b33      	ldr	r3, [pc, #204]	; (8002c80 <streamGet+0x248>)
 8002bb2:	4615      	mov	r5, r2
 8002bb4:	461c      	mov	r4, r3
 8002bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb8:	6028      	str	r0, [r5, #0]
 8002bba:	6069      	str	r1, [r5, #4]
 8002bbc:	60aa      	str	r2, [r5, #8]
 8002bbe:	60eb      	str	r3, [r5, #12]
 8002bc0:	cc03      	ldmia	r4!, {r0, r1}
 8002bc2:	6128      	str	r0, [r5, #16]
 8002bc4:	6169      	str	r1, [r5, #20]
 8002bc6:	8823      	ldrh	r3, [r4, #0]
 8002bc8:	78a2      	ldrb	r2, [r4, #2]
 8002bca:	832b      	strh	r3, [r5, #24]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002bd0:	4825      	ldr	r0, [pc, #148]	; (8002c68 <streamGet+0x230>)
 8002bd2:	f7fd fb1d 	bl	8000210 <strlen>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	230a      	movs	r3, #10
 8002bdc:	4922      	ldr	r1, [pc, #136]	; (8002c68 <streamGet+0x230>)
 8002bde:	4824      	ldr	r0, [pc, #144]	; (8002c70 <streamGet+0x238>)
 8002be0:	f002 fec5 	bl	800596e <HAL_UART_Transmit>
				sprintf(uartData, "Bad packet! Not enough octetes.\r\n\n",octet_count);
 8002be4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002be6:	4927      	ldr	r1, [pc, #156]	; (8002c84 <streamGet+0x24c>)
 8002be8:	481f      	ldr	r0, [pc, #124]	; (8002c68 <streamGet+0x230>)
 8002bea:	f003 fde9 	bl	80067c0 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002bee:	481e      	ldr	r0, [pc, #120]	; (8002c68 <streamGet+0x230>)
 8002bf0:	f7fd fb0e 	bl	8000210 <strlen>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	230a      	movs	r3, #10
 8002bfa:	491b      	ldr	r1, [pc, #108]	; (8002c68 <streamGet+0x230>)
 8002bfc:	481c      	ldr	r0, [pc, #112]	; (8002c70 <streamGet+0x238>)
 8002bfe:	f002 feb6 	bl	800596e <HAL_UART_Transmit>
				gotflag = false;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c08:	e01b      	b.n	8002c42 <streamGet+0x20a>
			}
			//If ax.25 buffer does not overflow, this was a good packet
			else {
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n\n");
 8002c0a:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <streamGet+0x230>)
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <streamGet+0x250>)
 8002c0e:	4615      	mov	r5, r2
 8002c10:	461c      	mov	r4, r3
 8002c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c14:	6028      	str	r0, [r5, #0]
 8002c16:	6069      	str	r1, [r5, #4]
 8002c18:	60aa      	str	r2, [r5, #8]
 8002c1a:	60eb      	str	r3, [r5, #12]
 8002c1c:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002c1e:	6128      	str	r0, [r5, #16]
 8002c20:	6169      	str	r1, [r5, #20]
 8002c22:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c24:	4810      	ldr	r0, [pc, #64]	; (8002c68 <streamGet+0x230>)
 8002c26:	f7fd faf3 	bl	8000210 <strlen>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	230a      	movs	r3, #10
 8002c30:	490d      	ldr	r1, [pc, #52]	; (8002c68 <streamGet+0x230>)
 8002c32:	480f      	ldr	r0, [pc, #60]	; (8002c70 <streamGet+0x238>)
 8002c34:	f002 fe9b 	bl	800596e <HAL_UART_Transmit>
				gotflag = false;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return 1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e009      	b.n	8002c56 <streamGet+0x21e>
	while(!changeMode){
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <streamGet+0x254>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	f083 0301 	eor.w	r3, r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f47f aefc 	bne.w	8002a4a <streamGet+0x12>
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
	//Break if mode needs to change
	if(toggleMode)
		return -1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3740      	adds	r7, #64	; 0x40
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200000d4 	.word	0x200000d4
 8002c64:	20000008 	.word	0x20000008
 8002c68:	20001cd8 	.word	0x20001cd8
 8002c6c:	08007614 	.word	0x08007614
 8002c70:	20002b94 	.word	0x20002b94
 8002c74:	08007630 	.word	0x08007630
 8002c78:	0800764c 	.word	0x0800764c
 8002c7c:	08007670 	.word	0x08007670
 8002c80:	08007694 	.word	0x08007694
 8002c84:	080076b0 	.word	0x080076b0
 8002c88:	080076d4 	.word	0x080076d4
 8002c8c:	200000a5 	.word	0x200000a5

08002c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c94:	f000 fd18 	bl	80036c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c98:	f000 f820 	bl	8002cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c9c:	f000 f9f0 	bl	8003080 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ca0:	f000 f9ce 	bl	8003040 <MX_DMA_Init>
  MX_DAC_Init();
 8002ca4:	f000 f888 	bl	8002db8 <MX_DAC_Init>
  MX_TIM2_Init();
 8002ca8:	f000 f8b0 	bl	8002e0c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002cac:	f000 f8fa 	bl	8002ea4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002cb0:	f000 f994 	bl	8002fdc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002cb4:	f000 f944 	bl	8002f40 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8002cb8:	4806      	ldr	r0, [pc, #24]	; (8002cd4 <main+0x44>)
 8002cba:	f002 f9e6 	bl	800508a <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002cbe:	4806      	ldr	r0, [pc, #24]	; (8002cd8 <main+0x48>)
 8002cc0:	f002 fa32 	bl	8005128 <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 8002cc4:	f000 fabc 	bl	8003240 <uart_gpio_init>

	initProgram(false);
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f7ff fb83 	bl	80023d4 <initProgram>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tx_rx();
 8002cce:	f7fd fd51 	bl	8000774 <tx_rx>
 8002cd2:	e7fc      	b.n	8002cce <main+0x3e>
 8002cd4:	20002b54 	.word	0x20002b54
 8002cd8:	2000289c 	.word	0x2000289c

08002cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b094      	sub	sp, #80	; 0x50
 8002ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ce2:	f107 031c 	add.w	r3, r7, #28
 8002ce6:	2234      	movs	r2, #52	; 0x34
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 fd5f 	bl	80067ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	2300      	movs	r3, #0
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	4b2a      	ldr	r3, [pc, #168]	; (8002db0 <SystemClock_Config+0xd4>)
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <SystemClock_Config+0xd4>)
 8002d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d10:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <SystemClock_Config+0xd4>)
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <SystemClock_Config+0xd8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d28:	4a22      	ldr	r2, [pc, #136]	; (8002db4 <SystemClock_Config+0xd8>)
 8002d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <SystemClock_Config+0xd8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d46:	2302      	movs	r3, #2
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d50:	2304      	movs	r3, #4
 8002d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002d54:	235a      	movs	r3, #90	; 0x5a
 8002d56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d60:	2302      	movs	r3, #2
 8002d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d64:	f107 031c 	add.w	r3, r7, #28
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 ff09 	bl	8004b80 <HAL_RCC_OscConfig>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002d74:	f000 fa8c 	bl	8003290 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d78:	230f      	movs	r3, #15
 8002d7a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d90:	f107 0308 	add.w	r3, r7, #8
 8002d94:	2102      	movs	r1, #2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 fc38 	bl	800460c <HAL_RCC_ClockConfig>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002da2:	f000 fa75 	bl	8003290 <Error_Handler>
  }
}
 8002da6:	bf00      	nop
 8002da8:	3750      	adds	r7, #80	; 0x50
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40007000 	.word	0x40007000

08002db8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <MX_DAC_Init+0x4c>)
 8002dc8:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <MX_DAC_Init+0x50>)
 8002dca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002dcc:	480d      	ldr	r0, [pc, #52]	; (8002e04 <MX_DAC_Init+0x4c>)
 8002dce:	f000 fe2e 	bl	8003a2e <HAL_DAC_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002dd8:	f000 fa5a 	bl	8003290 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002ddc:	2324      	movs	r3, #36	; 0x24
 8002dde:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002de4:	463b      	mov	r3, r7
 8002de6:	2200      	movs	r2, #0
 8002de8:	4619      	mov	r1, r3
 8002dea:	4806      	ldr	r0, [pc, #24]	; (8002e04 <MX_DAC_Init+0x4c>)
 8002dec:	f000 fe82 	bl	8003af4 <HAL_DAC_ConfigChannel>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002df6:	f000 fa4b 	bl	8003290 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20002b40 	.word	0x20002b40
 8002e08:	40007400 	.word	0x40007400

08002e0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e12:	f107 0308 	add.w	r3, r7, #8
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e20:	463b      	mov	r3, r7
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8002e30:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e32:	2208      	movs	r2, #8
 8002e34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e36:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e3e:	2263      	movs	r2, #99	; 0x63
 8002e40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e42:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e4e:	4814      	ldr	r0, [pc, #80]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e50:	f002 f8f0 	bl	8005034 <HAL_TIM_Base_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002e5a:	f000 fa19 	bl	8003290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e64:	f107 0308 	add.w	r3, r7, #8
 8002e68:	4619      	mov	r1, r3
 8002e6a:	480d      	ldr	r0, [pc, #52]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e6c:	f002 fa88 	bl	8005380 <HAL_TIM_ConfigClockSource>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002e76:	f000 fa0b 	bl	8003290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e82:	463b      	mov	r3, r7
 8002e84:	4619      	mov	r1, r3
 8002e86:	4806      	ldr	r0, [pc, #24]	; (8002ea0 <MX_TIM2_Init+0x94>)
 8002e88:	f002 fc94 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002e92:	f000 f9fd 	bl	8003290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20002b54 	.word	0x20002b54

08002ea4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eaa:	f107 0308 	add.w	r3, r7, #8
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb8:	463b      	mov	r3, r7
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002ec2:	4a1e      	ldr	r2, [pc, #120]	; (8002f3c <MX_TIM3_Init+0x98>)
 8002ec4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002ec8:	2259      	movs	r2, #89	; 0x59
 8002eca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 8002ed2:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002ed4:	f240 3241 	movw	r2, #833	; 0x341
 8002ed8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ee0:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ee6:	4814      	ldr	r0, [pc, #80]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002ee8:	f002 f8a4 	bl	8005034 <HAL_TIM_Base_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002ef2:	f000 f9cd 	bl	8003290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002efa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002efc:	f107 0308 	add.w	r3, r7, #8
 8002f00:	4619      	mov	r1, r3
 8002f02:	480d      	ldr	r0, [pc, #52]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002f04:	f002 fa3c 	bl	8005380 <HAL_TIM_ConfigClockSource>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002f0e:	f000 f9bf 	bl	8003290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f1a:	463b      	mov	r3, r7
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4806      	ldr	r0, [pc, #24]	; (8002f38 <MX_TIM3_Init+0x94>)
 8002f20:	f002 fc48 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002f2a:	f000 f9b1 	bl	8003290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	2000289c 	.word	0x2000289c
 8002f3c:	40000400 	.word	0x40000400

08002f40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f46:	f107 0308 	add.w	r3, r7, #8
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f54:	463b      	mov	r3, r7
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <MX_TIM4_Init+0x94>)
 8002f5e:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <MX_TIM4_Init+0x98>)
 8002f60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8002f62:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <MX_TIM4_Init+0x94>)
 8002f64:	2259      	movs	r2, #89	; 0x59
 8002f66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <MX_TIM4_Init+0x94>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002f6e:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <MX_TIM4_Init+0x94>)
 8002f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f76:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <MX_TIM4_Init+0x94>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7c:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <MX_TIM4_Init+0x94>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f82:	4814      	ldr	r0, [pc, #80]	; (8002fd4 <MX_TIM4_Init+0x94>)
 8002f84:	f002 f856 	bl	8005034 <HAL_TIM_Base_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002f8e:	f000 f97f 	bl	8003290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	480d      	ldr	r0, [pc, #52]	; (8002fd4 <MX_TIM4_Init+0x94>)
 8002fa0:	f002 f9ee 	bl	8005380 <HAL_TIM_ConfigClockSource>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002faa:	f000 f971 	bl	8003290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fb6:	463b      	mov	r3, r7
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <MX_TIM4_Init+0x94>)
 8002fbc:	f002 fbfa 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002fc6:	f000 f963 	bl	8003290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20002dd4 	.word	0x20002dd4
 8002fd8:	40000800 	.word	0x40000800

08002fdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fe0:	4b15      	ldr	r3, [pc, #84]	; (8003038 <MX_USART2_UART_Init+0x5c>)
 8002fe2:	4a16      	ldr	r2, [pc, #88]	; (800303c <MX_USART2_UART_Init+0x60>)
 8002fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <MX_USART2_UART_Init+0x5c>)
 8002fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <MX_USART2_UART_Init+0x5c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <MX_USART2_UART_Init+0x5c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ffa:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <MX_USART2_UART_Init+0x5c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <MX_USART2_UART_Init+0x5c>)
 8003002:	220c      	movs	r2, #12
 8003004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003006:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <MX_USART2_UART_Init+0x5c>)
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <MX_USART2_UART_Init+0x5c>)
 800300e:	2200      	movs	r2, #0
 8003010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003012:	4809      	ldr	r0, [pc, #36]	; (8003038 <MX_USART2_UART_Init+0x5c>)
 8003014:	f002 fc5e 	bl	80058d4 <HAL_UART_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800301e:	f000 f937 	bl	8003290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	2100      	movs	r1, #0
 8003026:	2026      	movs	r0, #38	; 0x26
 8003028:	f000 fcbd 	bl	80039a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800302c:	2026      	movs	r0, #38	; 0x26
 800302e:	f000 fcd6 	bl	80039de <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20002b94 	.word	0x20002b94
 800303c:	40004400 	.word	0x40004400

08003040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	4b0c      	ldr	r3, [pc, #48]	; (800307c <MX_DMA_Init+0x3c>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a0b      	ldr	r2, [pc, #44]	; (800307c <MX_DMA_Init+0x3c>)
 8003050:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <MX_DMA_Init+0x3c>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	2010      	movs	r0, #16
 8003068:	f000 fc9d 	bl	80039a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800306c:	2010      	movs	r0, #16
 800306e:	f000 fcb6 	bl	80039de <HAL_NVIC_EnableIRQ>

}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800

08003080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	609a      	str	r2, [r3, #8]
 8003092:	60da      	str	r2, [r3, #12]
 8003094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	4b45      	ldr	r3, [pc, #276]	; (80031b0 <MX_GPIO_Init+0x130>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4a44      	ldr	r2, [pc, #272]	; (80031b0 <MX_GPIO_Init+0x130>)
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	6313      	str	r3, [r2, #48]	; 0x30
 80030a6:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <MX_GPIO_Init+0x130>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b3e      	ldr	r3, [pc, #248]	; (80031b0 <MX_GPIO_Init+0x130>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a3d      	ldr	r2, [pc, #244]	; (80031b0 <MX_GPIO_Init+0x130>)
 80030bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <MX_GPIO_Init+0x130>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <MX_GPIO_Init+0x130>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a36      	ldr	r2, [pc, #216]	; (80031b0 <MX_GPIO_Init+0x130>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <MX_GPIO_Init+0x130>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <MX_GPIO_Init+0x130>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4a2f      	ldr	r2, [pc, #188]	; (80031b0 <MX_GPIO_Init+0x130>)
 80030f4:	f043 0302 	orr.w	r3, r3, #2
 80030f8:	6313      	str	r3, [r2, #48]	; 0x30
 80030fa:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <MX_GPIO_Init+0x130>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003106:	2200      	movs	r2, #0
 8003108:	f44f 7148 	mov.w	r1, #800	; 0x320
 800310c:	4829      	ldr	r0, [pc, #164]	; (80031b4 <MX_GPIO_Init+0x134>)
 800310e:	f001 fa4b 	bl	80045a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8003112:	2200      	movs	r2, #0
 8003114:	2110      	movs	r1, #16
 8003116:	4828      	ldr	r0, [pc, #160]	; (80031b8 <MX_GPIO_Init+0x138>)
 8003118:	f001 fa46 	bl	80045a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800311c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003122:	4b26      	ldr	r3, [pc, #152]	; (80031bc <MX_GPIO_Init+0x13c>)
 8003124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	4619      	mov	r1, r3
 8003130:	4821      	ldr	r0, [pc, #132]	; (80031b8 <MX_GPIO_Init+0x138>)
 8003132:	f001 f8a7 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003136:	2301      	movs	r3, #1
 8003138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800313a:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <MX_GPIO_Init+0x140>)
 800313c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003142:	f107 0314 	add.w	r3, r7, #20
 8003146:	4619      	mov	r1, r3
 8003148:	481a      	ldr	r0, [pc, #104]	; (80031b4 <MX_GPIO_Init+0x134>)
 800314a:	f001 f89b 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 800314e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003154:	2301      	movs	r3, #1
 8003156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315c:	2300      	movs	r3, #0
 800315e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	4619      	mov	r1, r3
 8003166:	4813      	ldr	r0, [pc, #76]	; (80031b4 <MX_GPIO_Init+0x134>)
 8003168:	f001 f88c 	bl	8004284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 800316c:	2310      	movs	r3, #16
 800316e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003170:	2301      	movs	r3, #1
 8003172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	4619      	mov	r1, r3
 8003182:	480d      	ldr	r0, [pc, #52]	; (80031b8 <MX_GPIO_Init+0x138>)
 8003184:	f001 f87e 	bl	8004284 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003188:	2200      	movs	r2, #0
 800318a:	2100      	movs	r1, #0
 800318c:	2006      	movs	r0, #6
 800318e:	f000 fc0a 	bl	80039a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003192:	2006      	movs	r0, #6
 8003194:	f000 fc23 	bl	80039de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003198:	2200      	movs	r2, #0
 800319a:	2100      	movs	r1, #0
 800319c:	2028      	movs	r0, #40	; 0x28
 800319e:	f000 fc02 	bl	80039a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031a2:	2028      	movs	r0, #40	; 0x28
 80031a4:	f000 fc1b 	bl	80039de <HAL_NVIC_EnableIRQ>

}
 80031a8:	bf00      	nop
 80031aa:	3728      	adds	r7, #40	; 0x28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40020000 	.word	0x40020000
 80031b8:	40020800 	.word	0x40020800
 80031bc:	10210000 	.word	0x10210000
 80031c0:	10110000 	.word	0x10110000

080031c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a05      	ldr	r2, [pc, #20]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d102      	bne.n	80031da <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 80031d4:	f7ff f9d0 	bl	8002578 <Tim3IT>
	else
		__NOP();
}
 80031d8:	e000      	b.n	80031dc <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 80031da:	bf00      	nop
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	2000289c 	.word	0x2000289c

080031e8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 80031f8:	f7ff f9f2 	bl	80025e0 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003202:	d103      	bne.n	800320c <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <HAL_GPIO_EXTI_Callback+0x30>)
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 800320a:	e000      	b.n	800320e <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 800320c:	bf00      	nop
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	200000a5 	.word	0x200000a5

0800321c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_UART_RxCpltCallback+0x20>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 800322e:	f7fe f9ab 	bl	8001588 <UART2_EXCEPTION_CALLBACK>
  }
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40004400 	.word	0x40004400

08003240 <uart_gpio_init>:

void uart_gpio_init()
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <uart_gpio_init+0x48>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a0e      	ldr	r2, [pc, #56]	; (8003288 <uart_gpio_init+0x48>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <uart_gpio_init+0x48>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8003262:	230c      	movs	r3, #12
 8003264:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800326a:	2301      	movs	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003272:	2307      	movs	r3, #7
 8003274:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	4619      	mov	r1, r3
 800327a:	4804      	ldr	r0, [pc, #16]	; (800328c <uart_gpio_init+0x4c>)
 800327c:	f001 f802 	bl	8004284 <HAL_GPIO_Init>
}
 8003280:	bf00      	nop
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40023800 	.word	0x40023800
 800328c:	40020000 	.word	0x40020000

08003290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_MspInit+0x4c>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	4a0f      	ldr	r2, [pc, #60]	; (80032ec <HAL_MspInit+0x4c>)
 80032b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b4:	6453      	str	r3, [r2, #68]	; 0x44
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <HAL_MspInit+0x4c>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_MspInit+0x4c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a08      	ldr	r2, [pc, #32]	; (80032ec <HAL_MspInit+0x4c>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_MspInit+0x4c>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80032de:	2007      	movs	r0, #7
 80032e0:	f000 fb56 	bl	8003990 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40023800 	.word	0x40023800

080032f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2f      	ldr	r2, [pc, #188]	; (80033cc <HAL_DAC_MspInit+0xdc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d158      	bne.n	80033c4 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	4b2e      	ldr	r3, [pc, #184]	; (80033d0 <HAL_DAC_MspInit+0xe0>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a2d      	ldr	r2, [pc, #180]	; (80033d0 <HAL_DAC_MspInit+0xe0>)
 800331c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b2b      	ldr	r3, [pc, #172]	; (80033d0 <HAL_DAC_MspInit+0xe0>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <HAL_DAC_MspInit+0xe0>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <HAL_DAC_MspInit+0xe0>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_DAC_MspInit+0xe0>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800334a:	2310      	movs	r3, #16
 800334c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800334e:	2303      	movs	r3, #3
 8003350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	4619      	mov	r1, r3
 800335c:	481d      	ldr	r0, [pc, #116]	; (80033d4 <HAL_DAC_MspInit+0xe4>)
 800335e:	f000 ff91 	bl	8004284 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_DAC_MspInit+0xec>)
 8003366:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 800336a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800336e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 8003372:	2240      	movs	r2, #64	; 0x40
 8003374:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003376:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 8003378:	2200      	movs	r2, #0
 800337a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800337c:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 800337e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003382:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 8003386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800338a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 800338e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003392:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8003394:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 8003396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800339a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 800339e:	2200      	movs	r2, #0
 80033a0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80033a8:	480b      	ldr	r0, [pc, #44]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 80033aa:	f000 fbf1 	bl	8003b90 <HAL_DMA_Init>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80033b4:	f7ff ff6c 	bl	8003290 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	4a06      	ldr	r2, [pc, #24]	; (80033d8 <HAL_DAC_MspInit+0xe8>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80033c4:	bf00      	nop
 80033c6:	3728      	adds	r7, #40	; 0x28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40007400 	.word	0x40007400
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40020000 	.word	0x40020000
 80033d8:	200028dc 	.word	0x200028dc
 80033dc:	40026088 	.word	0x40026088

080033e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f0:	d10e      	bne.n	8003410 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_TIM_Base_MspInit+0x98>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <HAL_TIM_Base_MspInit+0x98>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_TIM_Base_MspInit+0x98>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800340e:	e02e      	b.n	800346e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a19      	ldr	r2, [pc, #100]	; (800347c <HAL_TIM_Base_MspInit+0x9c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d116      	bne.n	8003448 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <HAL_TIM_Base_MspInit+0x98>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a15      	ldr	r2, [pc, #84]	; (8003478 <HAL_TIM_Base_MspInit+0x98>)
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_TIM_Base_MspInit+0x98>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2100      	movs	r1, #0
 800343a:	201d      	movs	r0, #29
 800343c:	f000 fab3 	bl	80039a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003440:	201d      	movs	r0, #29
 8003442:	f000 facc 	bl	80039de <HAL_NVIC_EnableIRQ>
}
 8003446:	e012      	b.n	800346e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <HAL_TIM_Base_MspInit+0xa0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10d      	bne.n	800346e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_TIM_Base_MspInit+0x98>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4a07      	ldr	r2, [pc, #28]	; (8003478 <HAL_TIM_Base_MspInit+0x98>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6413      	str	r3, [r2, #64]	; 0x40
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_TIM_Base_MspInit+0x98>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
}
 800346e:	bf00      	nop
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800

08003484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1d      	ldr	r2, [pc, #116]	; (8003518 <HAL_UART_MspInit+0x94>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d133      	bne.n	800350e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	4b1c      	ldr	r3, [pc, #112]	; (800351c <HAL_UART_MspInit+0x98>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	4a1b      	ldr	r2, [pc, #108]	; (800351c <HAL_UART_MspInit+0x98>)
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	6413      	str	r3, [r2, #64]	; 0x40
 80034b6:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_UART_MspInit+0x98>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	4b15      	ldr	r3, [pc, #84]	; (800351c <HAL_UART_MspInit+0x98>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	4a14      	ldr	r2, [pc, #80]	; (800351c <HAL_UART_MspInit+0x98>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	6313      	str	r3, [r2, #48]	; 0x30
 80034d2:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_UART_MspInit+0x98>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034de:	230c      	movs	r3, #12
 80034e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ea:	2303      	movs	r3, #3
 80034ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034ee:	2307      	movs	r3, #7
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	4619      	mov	r1, r3
 80034f8:	4809      	ldr	r0, [pc, #36]	; (8003520 <HAL_UART_MspInit+0x9c>)
 80034fa:	f000 fec3 	bl	8004284 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2100      	movs	r1, #0
 8003502:	2026      	movs	r0, #38	; 0x26
 8003504:	f000 fa4f 	bl	80039a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003508:	2026      	movs	r0, #38	; 0x26
 800350a:	f000 fa68 	bl	80039de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800350e:	bf00      	nop
 8003510:	3728      	adds	r7, #40	; 0x28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40004400 	.word	0x40004400
 800351c:	40023800 	.word	0x40023800
 8003520:	40020000 	.word	0x40020000

08003524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003532:	b480      	push	{r7}
 8003534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003536:	e7fe      	b.n	8003536 <HardFault_Handler+0x4>

08003538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800353c:	e7fe      	b.n	800353c <MemManage_Handler+0x4>

0800353e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003542:	e7fe      	b.n	8003542 <BusFault_Handler+0x4>

08003544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003548:	e7fe      	b.n	8003548 <UsageFault_Handler+0x4>

0800354a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003578:	f000 f8f8 	bl	800376c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}

08003580 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003584:	2001      	movs	r0, #1
 8003586:	f001 f829 	bl	80045dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <DMA1_Stream5_IRQHandler+0x10>)
 8003596:	f000 fc3b 	bl	8003e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200028dc 	.word	0x200028dc

080035a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035a8:	4802      	ldr	r0, [pc, #8]	; (80035b4 <TIM3_IRQHandler+0x10>)
 80035aa:	f001 fde1 	bl	8005170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	2000289c 	.word	0x2000289c

080035b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035bc:	4802      	ldr	r0, [pc, #8]	; (80035c8 <USART2_IRQHandler+0x10>)
 80035be:	f002 fac5 	bl	8005b4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20002b94 	.word	0x20002b94

080035cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80035d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80035d4:	f001 f802 	bl	80045dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	bd80      	pop	{r7, pc}

080035dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <_sbrk+0x5c>)
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <_sbrk+0x60>)
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <_sbrk+0x64>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <_sbrk+0x64>)
 80035fa:	4a12      	ldr	r2, [pc, #72]	; (8003644 <_sbrk+0x68>)
 80035fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <_sbrk+0x64>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	429a      	cmp	r2, r3
 800360a:	d207      	bcs.n	800361c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800360c:	f003 f89a 	bl	8006744 <__errno>
 8003610:	4602      	mov	r2, r0
 8003612:	230c      	movs	r3, #12
 8003614:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	e009      	b.n	8003630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <_sbrk+0x64>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <_sbrk+0x64>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	4a05      	ldr	r2, [pc, #20]	; (8003640 <_sbrk+0x64>)
 800362c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20020000 	.word	0x20020000
 800363c:	00000400 	.word	0x00000400
 8003640:	200000c8 	.word	0x200000c8
 8003644:	20002e20 	.word	0x20002e20

08003648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <SystemInit+0x28>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	4a07      	ldr	r2, [pc, #28]	; (8003670 <SystemInit+0x28>)
 8003654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <SystemInit+0x28>)
 800365e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003662:	609a      	str	r2, [r3, #8]
#endif
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003678:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800367a:	e003      	b.n	8003684 <LoopCopyDataInit>

0800367c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800367e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003680:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003682:	3104      	adds	r1, #4

08003684 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003684:	480b      	ldr	r0, [pc, #44]	; (80036b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003688:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800368a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800368c:	d3f6      	bcc.n	800367c <CopyDataInit>
  ldr  r2, =_sbss
 800368e:	4a0b      	ldr	r2, [pc, #44]	; (80036bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003690:	e002      	b.n	8003698 <LoopFillZerobss>

08003692 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003692:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003694:	f842 3b04 	str.w	r3, [r2], #4

08003698 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800369a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800369c:	d3f9      	bcc.n	8003692 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800369e:	f7ff ffd3 	bl	8003648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036a2:	f003 f855 	bl	8006750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036a6:	f7ff faf3 	bl	8002c90 <main>
  bx  lr    
 80036aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80036b0:	08007754 	.word	0x08007754
  ldr  r0, =_sdata
 80036b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036b8:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80036bc:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80036c0:	20002e1c 	.word	0x20002e1c

080036c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036c4:	e7fe      	b.n	80036c4 <ADC_IRQHandler>
	...

080036c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036cc:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <HAL_Init+0x40>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0d      	ldr	r2, [pc, #52]	; (8003708 <HAL_Init+0x40>)
 80036d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_Init+0x40>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <HAL_Init+0x40>)
 80036de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <HAL_Init+0x40>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a07      	ldr	r2, [pc, #28]	; (8003708 <HAL_Init+0x40>)
 80036ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f0:	2003      	movs	r0, #3
 80036f2:	f000 f94d 	bl	8003990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036f6:	2000      	movs	r0, #0
 80036f8:	f000 f808 	bl	800370c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036fc:	f7ff fdd0 	bl	80032a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023c00 	.word	0x40023c00

0800370c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_InitTick+0x54>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_InitTick+0x58>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4619      	mov	r1, r3
 800371e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003722:	fbb3 f3f1 	udiv	r3, r3, r1
 8003726:	fbb2 f3f3 	udiv	r3, r2, r3
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f973 	bl	8003a16 <HAL_SYSTICK_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e00e      	b.n	8003758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b0f      	cmp	r3, #15
 800373e:	d80a      	bhi.n	8003756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003740:	2200      	movs	r2, #0
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	f000 f92d 	bl	80039a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800374c:	4a06      	ldr	r2, [pc, #24]	; (8003768 <HAL_InitTick+0x5c>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000014 	.word	0x20000014
 8003764:	2000001c 	.word	0x2000001c
 8003768:	20000018 	.word	0x20000018

0800376c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_IncTick+0x20>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_IncTick+0x24>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4413      	add	r3, r2
 800377c:	4a04      	ldr	r2, [pc, #16]	; (8003790 <HAL_IncTick+0x24>)
 800377e:	6013      	str	r3, [r2, #0]
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	2000001c 	.word	0x2000001c
 8003790:	20002e14 	.word	0x20002e14

08003794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return uwTick;
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_GetTick+0x14>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20002e14 	.word	0x20002e14

080037ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c8:	4013      	ands	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60d3      	str	r3, [r2, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <__NVIC_GetPriorityGrouping+0x18>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0307 	and.w	r3, r3, #7
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	db0b      	blt.n	800383a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	4907      	ldr	r1, [pc, #28]	; (8003848 <__NVIC_EnableIRQ+0x38>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2001      	movs	r0, #1
 8003832:	fa00 f202 	lsl.w	r2, r0, r2
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000e100 	.word	0xe000e100

0800384c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	2b00      	cmp	r3, #0
 800385c:	db10      	blt.n	8003880 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	4909      	ldr	r1, [pc, #36]	; (800388c <__NVIC_DisableIRQ+0x40>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2001      	movs	r0, #1
 800386e:	fa00 f202 	lsl.w	r2, r0, r2
 8003872:	3320      	adds	r3, #32
 8003874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003878:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800387c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000e100 	.word	0xe000e100

08003890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	6039      	str	r1, [r7, #0]
 800389a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	db0a      	blt.n	80038ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	490c      	ldr	r1, [pc, #48]	; (80038dc <__NVIC_SetPriority+0x4c>)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	0112      	lsls	r2, r2, #4
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	440b      	add	r3, r1
 80038b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b8:	e00a      	b.n	80038d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	4908      	ldr	r1, [pc, #32]	; (80038e0 <__NVIC_SetPriority+0x50>)
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	3b04      	subs	r3, #4
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	440b      	add	r3, r1
 80038ce:	761a      	strb	r2, [r3, #24]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000e100 	.word	0xe000e100
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f1c3 0307 	rsb	r3, r3, #7
 80038fe:	2b04      	cmp	r3, #4
 8003900:	bf28      	it	cs
 8003902:	2304      	movcs	r3, #4
 8003904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3304      	adds	r3, #4
 800390a:	2b06      	cmp	r3, #6
 800390c:	d902      	bls.n	8003914 <NVIC_EncodePriority+0x30>
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3b03      	subs	r3, #3
 8003912:	e000      	b.n	8003916 <NVIC_EncodePriority+0x32>
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	f04f 32ff 	mov.w	r2, #4294967295
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43da      	mvns	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	401a      	ands	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800392c:	f04f 31ff 	mov.w	r1, #4294967295
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	43d9      	mvns	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	4313      	orrs	r3, r2
         );
}
 800393e:	4618      	mov	r0, r3
 8003940:	3724      	adds	r7, #36	; 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800395c:	d301      	bcc.n	8003962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800395e:	2301      	movs	r3, #1
 8003960:	e00f      	b.n	8003982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <SysTick_Config+0x40>)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3b01      	subs	r3, #1
 8003968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800396a:	210f      	movs	r1, #15
 800396c:	f04f 30ff 	mov.w	r0, #4294967295
 8003970:	f7ff ff8e 	bl	8003890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <SysTick_Config+0x40>)
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800397a:	4b04      	ldr	r3, [pc, #16]	; (800398c <SysTick_Config+0x40>)
 800397c:	2207      	movs	r2, #7
 800397e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	e000e010 	.word	0xe000e010

08003990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff07 	bl	80037ac <__NVIC_SetPriorityGrouping>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b086      	sub	sp, #24
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039b8:	f7ff ff1c 	bl	80037f4 <__NVIC_GetPriorityGrouping>
 80039bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	6978      	ldr	r0, [r7, #20]
 80039c4:	f7ff ff8e 	bl	80038e4 <NVIC_EncodePriority>
 80039c8:	4602      	mov	r2, r0
 80039ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff5d 	bl	8003890 <__NVIC_SetPriority>
}
 80039d6:	bf00      	nop
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	4603      	mov	r3, r0
 80039e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ff0f 	bl	8003810 <__NVIC_EnableIRQ>
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	4603      	mov	r3, r0
 8003a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff ff1f 	bl	800384c <__NVIC_DisableIRQ>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ff94 	bl	800394c <SysTick_Config>
 8003a24:	4603      	mov	r3, r0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e014      	b.n	8003a6a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	791b      	ldrb	r3, [r3, #4]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d105      	bne.n	8003a56 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff fc4d 	bl	80032f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6819      	ldr	r1, [r3, #0]
 8003a86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43da      	mvns	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	400a      	ands	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6819      	ldr	r1, [r3, #0]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	400a      	ands	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 f915 	bl	8003cec <HAL_DMA_Abort>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	e006      	b.n	8003ad6 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 f90d 	bl	8003cec <HAL_DMA_Abort>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	711a      	strb	r2, [r3, #4]
 8003ae2:	e002      	b.n	8003aea <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	795b      	ldrb	r3, [r3, #5]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_DAC_ConfigChannel+0x20>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e036      	b.n	8003b82 <HAL_DAC_ConfigChannel+0x8e>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2201      	movs	r2, #1
 8003b18:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003b28:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4013      	ands	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	22c0      	movs	r2, #192	; 0xc0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	400a      	ands	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b9c:	f7ff fdfa 	bl	8003794 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e099      	b.n	8003ce0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bcc:	e00f      	b.n	8003bee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bce:	f7ff fde1 	bl	8003794 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	d908      	bls.n	8003bee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2203      	movs	r2, #3
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e078      	b.n	8003ce0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e8      	bne.n	8003bce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4b38      	ldr	r3, [pc, #224]	; (8003ce8 <HAL_DMA_Init+0x158>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d107      	bne.n	8003c58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	4313      	orrs	r3, r2
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f023 0307 	bic.w	r3, r3, #7
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d117      	bne.n	8003cb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00e      	beq.n	8003cb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fa7b 	bl	8004190 <DMA_CheckFifoParam>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2240      	movs	r2, #64	; 0x40
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e016      	b.n	8003ce0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fa32 	bl	8004124 <DMA_CalcBaseAndBitshift>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc8:	223f      	movs	r2, #63	; 0x3f
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	f010803f 	.word	0xf010803f

08003cec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cfa:	f7ff fd4b 	bl	8003794 <HAL_GetTick>
 8003cfe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d008      	beq.n	8003d1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2280      	movs	r2, #128	; 0x80
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e052      	b.n	8003dc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0216 	bic.w	r2, r2, #22
 8003d2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d103      	bne.n	8003d4e <HAL_DMA_Abort+0x62>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0208 	bic.w	r2, r2, #8
 8003d5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d6e:	e013      	b.n	8003d98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d70:	f7ff fd10 	bl	8003794 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d90c      	bls.n	8003d98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2203      	movs	r2, #3
 8003d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e015      	b.n	8003dc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e4      	bne.n	8003d70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003daa:	223f      	movs	r2, #63	; 0x3f
 8003dac:	409a      	lsls	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d004      	beq.n	8003dea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e00c      	b.n	8003e04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2205      	movs	r2, #5
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e1c:	4b92      	ldr	r3, [pc, #584]	; (8004068 <HAL_DMA_IRQHandler+0x258>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a92      	ldr	r2, [pc, #584]	; (800406c <HAL_DMA_IRQHandler+0x25c>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0a9b      	lsrs	r3, r3, #10
 8003e28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01a      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0204 	bic.w	r2, r2, #4
 8003e62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e68:	2208      	movs	r2, #8
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	f043 0201 	orr.w	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	2201      	movs	r2, #1
 8003e82:	409a      	lsls	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d012      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00b      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f043 0202 	orr.w	r2, r3, #2
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d012      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00b      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f043 0204 	orr.w	r2, r3, #4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2210      	movs	r2, #16
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d043      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d03c      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d018      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d108      	bne.n	8003f40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d024      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4798      	blx	r3
 8003f3e:	e01f      	b.n	8003f80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01b      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	4798      	blx	r3
 8003f50:	e016      	b.n	8003f80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d107      	bne.n	8003f70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0208 	bic.w	r2, r2, #8
 8003f6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f84:	2220      	movs	r2, #32
 8003f86:	409a      	lsls	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 808e 	beq.w	80040ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8086 	beq.w	80040ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b05      	cmp	r3, #5
 8003fb8:	d136      	bne.n	8004028 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0216 	bic.w	r2, r2, #22
 8003fc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <HAL_DMA_IRQHandler+0x1da>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0208 	bic.w	r2, r2, #8
 8003ff8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	223f      	movs	r2, #63	; 0x3f
 8004000:	409a      	lsls	r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401a:	2b00      	cmp	r3, #0
 800401c:	d07d      	beq.n	800411a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
        }
        return;
 8004026:	e078      	b.n	800411a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01c      	beq.n	8004070 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d108      	bne.n	8004056 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	2b00      	cmp	r3, #0
 800404a:	d030      	beq.n	80040ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
 8004054:	e02b      	b.n	80040ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d027      	beq.n	80040ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
 8004066:	e022      	b.n	80040ae <HAL_DMA_IRQHandler+0x29e>
 8004068:	20000014 	.word	0x20000014
 800406c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10f      	bne.n	800409e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0210 	bic.w	r2, r2, #16
 800408c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d032      	beq.n	800411c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d022      	beq.n	8004108 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2205      	movs	r2, #5
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3301      	adds	r3, #1
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d307      	bcc.n	80040f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f2      	bne.n	80040da <HAL_DMA_IRQHandler+0x2ca>
 80040f4:	e000      	b.n	80040f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80040f6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4798      	blx	r3
 8004118:	e000      	b.n	800411c <HAL_DMA_IRQHandler+0x30c>
        return;
 800411a:	bf00      	nop
    }
  }
}
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop

08004124 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	3b10      	subs	r3, #16
 8004134:	4a14      	ldr	r2, [pc, #80]	; (8004188 <DMA_CalcBaseAndBitshift+0x64>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	091b      	lsrs	r3, r3, #4
 800413c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800413e:	4a13      	ldr	r2, [pc, #76]	; (800418c <DMA_CalcBaseAndBitshift+0x68>)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d909      	bls.n	8004166 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800415a:	f023 0303 	bic.w	r3, r3, #3
 800415e:	1d1a      	adds	r2, r3, #4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	659a      	str	r2, [r3, #88]	; 0x58
 8004164:	e007      	b.n	8004176 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	aaaaaaab 	.word	0xaaaaaaab
 800418c:	08007708 	.word	0x08007708

08004190 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d11f      	bne.n	80041ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d855      	bhi.n	800425c <DMA_CheckFifoParam+0xcc>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <DMA_CheckFifoParam+0x28>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041db 	.word	0x080041db
 80041c0:	080041c9 	.word	0x080041c9
 80041c4:	0800425d 	.word	0x0800425d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d045      	beq.n	8004260 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d8:	e042      	b.n	8004260 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041e2:	d13f      	bne.n	8004264 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e8:	e03c      	b.n	8004264 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f2:	d121      	bne.n	8004238 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d836      	bhi.n	8004268 <DMA_CheckFifoParam+0xd8>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <DMA_CheckFifoParam+0x70>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004211 	.word	0x08004211
 8004204:	08004217 	.word	0x08004217
 8004208:	08004211 	.word	0x08004211
 800420c:	08004229 	.word	0x08004229
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	e02f      	b.n	8004276 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d024      	beq.n	800426c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004226:	e021      	b.n	800426c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004230:	d11e      	bne.n	8004270 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004236:	e01b      	b.n	8004270 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d902      	bls.n	8004244 <DMA_CheckFifoParam+0xb4>
 800423e:	2b03      	cmp	r3, #3
 8004240:	d003      	beq.n	800424a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004242:	e018      	b.n	8004276 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      break;
 8004248:	e015      	b.n	8004276 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00e      	beq.n	8004274 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
      break;
 800425a:	e00b      	b.n	8004274 <DMA_CheckFifoParam+0xe4>
      break;
 800425c:	bf00      	nop
 800425e:	e00a      	b.n	8004276 <DMA_CheckFifoParam+0xe6>
      break;
 8004260:	bf00      	nop
 8004262:	e008      	b.n	8004276 <DMA_CheckFifoParam+0xe6>
      break;
 8004264:	bf00      	nop
 8004266:	e006      	b.n	8004276 <DMA_CheckFifoParam+0xe6>
      break;
 8004268:	bf00      	nop
 800426a:	e004      	b.n	8004276 <DMA_CheckFifoParam+0xe6>
      break;
 800426c:	bf00      	nop
 800426e:	e002      	b.n	8004276 <DMA_CheckFifoParam+0xe6>
      break;   
 8004270:	bf00      	nop
 8004272:	e000      	b.n	8004276 <DMA_CheckFifoParam+0xe6>
      break;
 8004274:	bf00      	nop
    }
  } 
  
  return status; 
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	; 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004296:	2300      	movs	r3, #0
 8004298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e165      	b.n	800456c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042a0:	2201      	movs	r2, #1
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4013      	ands	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	f040 8154 	bne.w	8004566 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d00b      	beq.n	80042de <HAL_GPIO_Init+0x5a>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d007      	beq.n	80042de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042d2:	2b11      	cmp	r3, #17
 80042d4:	d003      	beq.n	80042de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b12      	cmp	r3, #18
 80042dc:	d130      	bne.n	8004340 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	2203      	movs	r2, #3
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	43db      	mvns	r3, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4013      	ands	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004314:	2201      	movs	r2, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 0201 	and.w	r2, r3, #1
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	2203      	movs	r2, #3
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4313      	orrs	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0xfc>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b12      	cmp	r3, #18
 800437e:	d123      	bne.n	80043c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	08da      	lsrs	r2, r3, #3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3208      	adds	r2, #8
 8004388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800438c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	220f      	movs	r2, #15
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	08da      	lsrs	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3208      	adds	r2, #8
 80043c2:	69b9      	ldr	r1, [r7, #24]
 80043c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	2203      	movs	r2, #3
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 0203 	and.w	r2, r3, #3
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80ae 	beq.w	8004566 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	4b5c      	ldr	r3, [pc, #368]	; (8004580 <HAL_GPIO_Init+0x2fc>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	4a5b      	ldr	r2, [pc, #364]	; (8004580 <HAL_GPIO_Init+0x2fc>)
 8004414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004418:	6453      	str	r3, [r2, #68]	; 0x44
 800441a:	4b59      	ldr	r3, [pc, #356]	; (8004580 <HAL_GPIO_Init+0x2fc>)
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004426:	4a57      	ldr	r2, [pc, #348]	; (8004584 <HAL_GPIO_Init+0x300>)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	089b      	lsrs	r3, r3, #2
 800442c:	3302      	adds	r3, #2
 800442e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	220f      	movs	r2, #15
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a4e      	ldr	r2, [pc, #312]	; (8004588 <HAL_GPIO_Init+0x304>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d025      	beq.n	800449e <HAL_GPIO_Init+0x21a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a4d      	ldr	r2, [pc, #308]	; (800458c <HAL_GPIO_Init+0x308>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01f      	beq.n	800449a <HAL_GPIO_Init+0x216>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a4c      	ldr	r2, [pc, #304]	; (8004590 <HAL_GPIO_Init+0x30c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d019      	beq.n	8004496 <HAL_GPIO_Init+0x212>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a4b      	ldr	r2, [pc, #300]	; (8004594 <HAL_GPIO_Init+0x310>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_GPIO_Init+0x20e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a4a      	ldr	r2, [pc, #296]	; (8004598 <HAL_GPIO_Init+0x314>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00d      	beq.n	800448e <HAL_GPIO_Init+0x20a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a49      	ldr	r2, [pc, #292]	; (800459c <HAL_GPIO_Init+0x318>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d007      	beq.n	800448a <HAL_GPIO_Init+0x206>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a48      	ldr	r2, [pc, #288]	; (80045a0 <HAL_GPIO_Init+0x31c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_GPIO_Init+0x202>
 8004482:	2306      	movs	r3, #6
 8004484:	e00c      	b.n	80044a0 <HAL_GPIO_Init+0x21c>
 8004486:	2307      	movs	r3, #7
 8004488:	e00a      	b.n	80044a0 <HAL_GPIO_Init+0x21c>
 800448a:	2305      	movs	r3, #5
 800448c:	e008      	b.n	80044a0 <HAL_GPIO_Init+0x21c>
 800448e:	2304      	movs	r3, #4
 8004490:	e006      	b.n	80044a0 <HAL_GPIO_Init+0x21c>
 8004492:	2303      	movs	r3, #3
 8004494:	e004      	b.n	80044a0 <HAL_GPIO_Init+0x21c>
 8004496:	2302      	movs	r3, #2
 8004498:	e002      	b.n	80044a0 <HAL_GPIO_Init+0x21c>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_GPIO_Init+0x21c>
 800449e:	2300      	movs	r3, #0
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	f002 0203 	and.w	r2, r2, #3
 80044a6:	0092      	lsls	r2, r2, #2
 80044a8:	4093      	lsls	r3, r2
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044b0:	4934      	ldr	r1, [pc, #208]	; (8004584 <HAL_GPIO_Init+0x300>)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	089b      	lsrs	r3, r3, #2
 80044b6:	3302      	adds	r3, #2
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044be:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <HAL_GPIO_Init+0x320>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	43db      	mvns	r3, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4013      	ands	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044e2:	4a30      	ldr	r2, [pc, #192]	; (80045a4 <HAL_GPIO_Init+0x320>)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044e8:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <HAL_GPIO_Init+0x320>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	43db      	mvns	r3, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4013      	ands	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800450c:	4a25      	ldr	r2, [pc, #148]	; (80045a4 <HAL_GPIO_Init+0x320>)
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004512:	4b24      	ldr	r3, [pc, #144]	; (80045a4 <HAL_GPIO_Init+0x320>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	43db      	mvns	r3, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4013      	ands	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004536:	4a1b      	ldr	r2, [pc, #108]	; (80045a4 <HAL_GPIO_Init+0x320>)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800453c:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <HAL_GPIO_Init+0x320>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004560:	4a10      	ldr	r2, [pc, #64]	; (80045a4 <HAL_GPIO_Init+0x320>)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3301      	adds	r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	2b0f      	cmp	r3, #15
 8004570:	f67f ae96 	bls.w	80042a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004574:	bf00      	nop
 8004576:	3724      	adds	r7, #36	; 0x24
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	40023800 	.word	0x40023800
 8004584:	40013800 	.word	0x40013800
 8004588:	40020000 	.word	0x40020000
 800458c:	40020400 	.word	0x40020400
 8004590:	40020800 	.word	0x40020800
 8004594:	40020c00 	.word	0x40020c00
 8004598:	40021000 	.word	0x40021000
 800459c:	40021400 	.word	0x40021400
 80045a0:	40021800 	.word	0x40021800
 80045a4:	40013c00 	.word	0x40013c00

080045a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	807b      	strh	r3, [r7, #2]
 80045b4:	4613      	mov	r3, r2
 80045b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045b8:	787b      	ldrb	r3, [r7, #1]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045c4:	e003      	b.n	80045ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045c6:	887b      	ldrh	r3, [r7, #2]
 80045c8:	041a      	lsls	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	619a      	str	r2, [r3, #24]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045e6:	4b08      	ldr	r3, [pc, #32]	; (8004608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d006      	beq.n	8004600 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045f2:	4a05      	ldr	r2, [pc, #20]	; (8004608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045f4:	88fb      	ldrh	r3, [r7, #6]
 80045f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fdf4 	bl	80031e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40013c00 	.word	0x40013c00

0800460c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0cc      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004620:	4b68      	ldr	r3, [pc, #416]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d90c      	bls.n	8004648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462e:	4b65      	ldr	r3, [pc, #404]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004636:	4b63      	ldr	r3, [pc, #396]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d001      	beq.n	8004648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0b8      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004660:	4b59      	ldr	r3, [pc, #356]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4a58      	ldr	r2, [pc, #352]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800466a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004678:	4b53      	ldr	r3, [pc, #332]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4a52      	ldr	r2, [pc, #328]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004684:	4b50      	ldr	r3, [pc, #320]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	494d      	ldr	r1, [pc, #308]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d044      	beq.n	800472c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d107      	bne.n	80046ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d119      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e07f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d003      	beq.n	80046ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ca:	4b3f      	ldr	r3, [pc, #252]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e06f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046da:	4b3b      	ldr	r3, [pc, #236]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e067      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ea:	4b37      	ldr	r3, [pc, #220]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f023 0203 	bic.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4934      	ldr	r1, [pc, #208]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046fc:	f7ff f84a 	bl	8003794 <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004702:	e00a      	b.n	800471a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004704:	f7ff f846 	bl	8003794 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e04f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471a:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 020c 	and.w	r2, r3, #12
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	429a      	cmp	r2, r3
 800472a:	d1eb      	bne.n	8004704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d20c      	bcs.n	8004754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e032      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004760:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4916      	ldr	r1, [pc, #88]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	490e      	ldr	r1, [pc, #56]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004792:	f000 f855 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 8004796:	4601      	mov	r1, r0
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <HAL_RCC_ClockConfig+0x1c0>)
 80047a4:	5cd3      	ldrb	r3, [r2, r3]
 80047a6:	fa21 f303 	lsr.w	r3, r1, r3
 80047aa:	4a09      	ldr	r2, [pc, #36]	; (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe ffaa 	bl	800370c <HAL_InitTick>

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40023c00 	.word	0x40023c00
 80047c8:	40023800 	.word	0x40023800
 80047cc:	080076f0 	.word	0x080076f0
 80047d0:	20000014 	.word	0x20000014
 80047d4:	20000018 	.word	0x20000018

080047d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <HAL_RCC_GetHCLKFreq+0x14>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000014 	.word	0x20000014

080047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f4:	f7ff fff0 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047f8:	4601      	mov	r1, r0
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	0a9b      	lsrs	r3, r3, #10
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4a03      	ldr	r2, [pc, #12]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004806:	5cd3      	ldrb	r3, [r2, r3]
 8004808:	fa21 f303 	lsr.w	r3, r1, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40023800 	.word	0x40023800
 8004814:	08007700 	.word	0x08007700

08004818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800481c:	f7ff ffdc 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 8004820:	4601      	mov	r1, r0
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0b5b      	lsrs	r3, r3, #13
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4a03      	ldr	r2, [pc, #12]	; (800483c <HAL_RCC_GetPCLK2Freq+0x24>)
 800482e:	5cd3      	ldrb	r3, [r2, r3]
 8004830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40023800 	.word	0x40023800
 800483c:	08007700 	.word	0x08007700

08004840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800485a:	4bc6      	ldr	r3, [pc, #792]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x334>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b0c      	cmp	r3, #12
 8004864:	f200 817e 	bhi.w	8004b64 <HAL_RCC_GetSysClockFreq+0x324>
 8004868:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <HAL_RCC_GetSysClockFreq+0x30>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	080048a5 	.word	0x080048a5
 8004874:	08004b65 	.word	0x08004b65
 8004878:	08004b65 	.word	0x08004b65
 800487c:	08004b65 	.word	0x08004b65
 8004880:	080048ab 	.word	0x080048ab
 8004884:	08004b65 	.word	0x08004b65
 8004888:	08004b65 	.word	0x08004b65
 800488c:	08004b65 	.word	0x08004b65
 8004890:	080048b1 	.word	0x080048b1
 8004894:	08004b65 	.word	0x08004b65
 8004898:	08004b65 	.word	0x08004b65
 800489c:	08004b65 	.word	0x08004b65
 80048a0:	08004a0d 	.word	0x08004a0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048a4:	4bb4      	ldr	r3, [pc, #720]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x338>)
 80048a6:	613b      	str	r3, [r7, #16]
       break;
 80048a8:	e15f      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048aa:	4bb4      	ldr	r3, [pc, #720]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x33c>)
 80048ac:	613b      	str	r3, [r7, #16]
      break;
 80048ae:	e15c      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048b0:	4bb0      	ldr	r3, [pc, #704]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x334>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ba:	4bae      	ldr	r3, [pc, #696]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x334>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d04a      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c6:	4bab      	ldr	r3, [pc, #684]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x334>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	099b      	lsrs	r3, r3, #6
 80048cc:	f04f 0400 	mov.w	r4, #0
 80048d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	ea03 0501 	and.w	r5, r3, r1
 80048dc:	ea04 0602 	and.w	r6, r4, r2
 80048e0:	4629      	mov	r1, r5
 80048e2:	4632      	mov	r2, r6
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	f04f 0400 	mov.w	r4, #0
 80048ec:	0154      	lsls	r4, r2, #5
 80048ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048f2:	014b      	lsls	r3, r1, #5
 80048f4:	4619      	mov	r1, r3
 80048f6:	4622      	mov	r2, r4
 80048f8:	1b49      	subs	r1, r1, r5
 80048fa:	eb62 0206 	sbc.w	r2, r2, r6
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	f04f 0400 	mov.w	r4, #0
 8004906:	0194      	lsls	r4, r2, #6
 8004908:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800490c:	018b      	lsls	r3, r1, #6
 800490e:	1a5b      	subs	r3, r3, r1
 8004910:	eb64 0402 	sbc.w	r4, r4, r2
 8004914:	f04f 0100 	mov.w	r1, #0
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	00e2      	lsls	r2, r4, #3
 800491e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004922:	00d9      	lsls	r1, r3, #3
 8004924:	460b      	mov	r3, r1
 8004926:	4614      	mov	r4, r2
 8004928:	195b      	adds	r3, r3, r5
 800492a:	eb44 0406 	adc.w	r4, r4, r6
 800492e:	f04f 0100 	mov.w	r1, #0
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	0262      	lsls	r2, r4, #9
 8004938:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800493c:	0259      	lsls	r1, r3, #9
 800493e:	460b      	mov	r3, r1
 8004940:	4614      	mov	r4, r2
 8004942:	4618      	mov	r0, r3
 8004944:	4621      	mov	r1, r4
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f04f 0400 	mov.w	r4, #0
 800494c:	461a      	mov	r2, r3
 800494e:	4623      	mov	r3, r4
 8004950:	f7fb fcb6 	bl	80002c0 <__aeabi_uldivmod>
 8004954:	4603      	mov	r3, r0
 8004956:	460c      	mov	r4, r1
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e049      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495c:	4b85      	ldr	r3, [pc, #532]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x334>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	099b      	lsrs	r3, r3, #6
 8004962:	f04f 0400 	mov.w	r4, #0
 8004966:	f240 11ff 	movw	r1, #511	; 0x1ff
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	ea03 0501 	and.w	r5, r3, r1
 8004972:	ea04 0602 	and.w	r6, r4, r2
 8004976:	4629      	mov	r1, r5
 8004978:	4632      	mov	r2, r6
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	f04f 0400 	mov.w	r4, #0
 8004982:	0154      	lsls	r4, r2, #5
 8004984:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004988:	014b      	lsls	r3, r1, #5
 800498a:	4619      	mov	r1, r3
 800498c:	4622      	mov	r2, r4
 800498e:	1b49      	subs	r1, r1, r5
 8004990:	eb62 0206 	sbc.w	r2, r2, r6
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	f04f 0400 	mov.w	r4, #0
 800499c:	0194      	lsls	r4, r2, #6
 800499e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049a2:	018b      	lsls	r3, r1, #6
 80049a4:	1a5b      	subs	r3, r3, r1
 80049a6:	eb64 0402 	sbc.w	r4, r4, r2
 80049aa:	f04f 0100 	mov.w	r1, #0
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	00e2      	lsls	r2, r4, #3
 80049b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049b8:	00d9      	lsls	r1, r3, #3
 80049ba:	460b      	mov	r3, r1
 80049bc:	4614      	mov	r4, r2
 80049be:	195b      	adds	r3, r3, r5
 80049c0:	eb44 0406 	adc.w	r4, r4, r6
 80049c4:	f04f 0100 	mov.w	r1, #0
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	02a2      	lsls	r2, r4, #10
 80049ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049d2:	0299      	lsls	r1, r3, #10
 80049d4:	460b      	mov	r3, r1
 80049d6:	4614      	mov	r4, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	4621      	mov	r1, r4
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f04f 0400 	mov.w	r4, #0
 80049e2:	461a      	mov	r2, r3
 80049e4:	4623      	mov	r3, r4
 80049e6:	f7fb fc6b 	bl	80002c0 <__aeabi_uldivmod>
 80049ea:	4603      	mov	r3, r0
 80049ec:	460c      	mov	r4, r1
 80049ee:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049f0:	4b60      	ldr	r3, [pc, #384]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x334>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	3301      	adds	r3, #1
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	613b      	str	r3, [r7, #16]
      break;
 8004a0a:	e0ae      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a0c:	4b59      	ldr	r3, [pc, #356]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a14:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a16:	4b57      	ldr	r3, [pc, #348]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d04a      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a22:	4b54      	ldr	r3, [pc, #336]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	f04f 0400 	mov.w	r4, #0
 8004a2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	ea03 0501 	and.w	r5, r3, r1
 8004a38:	ea04 0602 	and.w	r6, r4, r2
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	4632      	mov	r2, r6
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	f04f 0400 	mov.w	r4, #0
 8004a48:	0154      	lsls	r4, r2, #5
 8004a4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a4e:	014b      	lsls	r3, r1, #5
 8004a50:	4619      	mov	r1, r3
 8004a52:	4622      	mov	r2, r4
 8004a54:	1b49      	subs	r1, r1, r5
 8004a56:	eb62 0206 	sbc.w	r2, r2, r6
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	f04f 0400 	mov.w	r4, #0
 8004a62:	0194      	lsls	r4, r2, #6
 8004a64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a68:	018b      	lsls	r3, r1, #6
 8004a6a:	1a5b      	subs	r3, r3, r1
 8004a6c:	eb64 0402 	sbc.w	r4, r4, r2
 8004a70:	f04f 0100 	mov.w	r1, #0
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	00e2      	lsls	r2, r4, #3
 8004a7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a7e:	00d9      	lsls	r1, r3, #3
 8004a80:	460b      	mov	r3, r1
 8004a82:	4614      	mov	r4, r2
 8004a84:	195b      	adds	r3, r3, r5
 8004a86:	eb44 0406 	adc.w	r4, r4, r6
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	0262      	lsls	r2, r4, #9
 8004a94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a98:	0259      	lsls	r1, r3, #9
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f04f 0400 	mov.w	r4, #0
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4623      	mov	r3, r4
 8004aac:	f7fb fc08 	bl	80002c0 <__aeabi_uldivmod>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e049      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab8:	4b2e      	ldr	r3, [pc, #184]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x334>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	099b      	lsrs	r3, r3, #6
 8004abe:	f04f 0400 	mov.w	r4, #0
 8004ac2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	ea03 0501 	and.w	r5, r3, r1
 8004ace:	ea04 0602 	and.w	r6, r4, r2
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	4632      	mov	r2, r6
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	f04f 0400 	mov.w	r4, #0
 8004ade:	0154      	lsls	r4, r2, #5
 8004ae0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ae4:	014b      	lsls	r3, r1, #5
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4622      	mov	r2, r4
 8004aea:	1b49      	subs	r1, r1, r5
 8004aec:	eb62 0206 	sbc.w	r2, r2, r6
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	f04f 0400 	mov.w	r4, #0
 8004af8:	0194      	lsls	r4, r2, #6
 8004afa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004afe:	018b      	lsls	r3, r1, #6
 8004b00:	1a5b      	subs	r3, r3, r1
 8004b02:	eb64 0402 	sbc.w	r4, r4, r2
 8004b06:	f04f 0100 	mov.w	r1, #0
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	00e2      	lsls	r2, r4, #3
 8004b10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b14:	00d9      	lsls	r1, r3, #3
 8004b16:	460b      	mov	r3, r1
 8004b18:	4614      	mov	r4, r2
 8004b1a:	195b      	adds	r3, r3, r5
 8004b1c:	eb44 0406 	adc.w	r4, r4, r6
 8004b20:	f04f 0100 	mov.w	r1, #0
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	02a2      	lsls	r2, r4, #10
 8004b2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b2e:	0299      	lsls	r1, r3, #10
 8004b30:	460b      	mov	r3, r1
 8004b32:	4614      	mov	r4, r2
 8004b34:	4618      	mov	r0, r3
 8004b36:	4621      	mov	r1, r4
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f04f 0400 	mov.w	r4, #0
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4623      	mov	r3, r4
 8004b42:	f7fb fbbd 	bl	80002c0 <__aeabi_uldivmod>
 8004b46:	4603      	mov	r3, r0
 8004b48:	460c      	mov	r4, r1
 8004b4a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	0f1b      	lsrs	r3, r3, #28
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	613b      	str	r3, [r7, #16]
      break;
 8004b62:	e002      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x338>)
 8004b66:	613b      	str	r3, [r7, #16]
      break;
 8004b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b6a:	693b      	ldr	r3, [r7, #16]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b74:	40023800 	.word	0x40023800
 8004b78:	00f42400 	.word	0x00f42400
 8004b7c:	007a1200 	.word	0x007a1200

08004b80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8083 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b9a:	4b95      	ldr	r3, [pc, #596]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d019      	beq.n	8004bda <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ba6:	4b92      	ldr	r3, [pc, #584]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d106      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bb2:	4b8f      	ldr	r3, [pc, #572]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bbe:	d00c      	beq.n	8004bda <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc0:	4b8b      	ldr	r3, [pc, #556]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bc8:	2b0c      	cmp	r3, #12
 8004bca:	d112      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bcc:	4b88      	ldr	r3, [pc, #544]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd8:	d10b      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bda:	4b85      	ldr	r3, [pc, #532]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d05b      	beq.n	8004c9e <HAL_RCC_OscConfig+0x11e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d157      	bne.n	8004c9e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e216      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfa:	d106      	bne.n	8004c0a <HAL_RCC_OscConfig+0x8a>
 8004bfc:	4b7c      	ldr	r3, [pc, #496]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a7b      	ldr	r2, [pc, #492]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	e01d      	b.n	8004c46 <HAL_RCC_OscConfig+0xc6>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c12:	d10c      	bne.n	8004c2e <HAL_RCC_OscConfig+0xae>
 8004c14:	4b76      	ldr	r3, [pc, #472]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a75      	ldr	r2, [pc, #468]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	4b73      	ldr	r3, [pc, #460]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a72      	ldr	r2, [pc, #456]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	e00b      	b.n	8004c46 <HAL_RCC_OscConfig+0xc6>
 8004c2e:	4b70      	ldr	r3, [pc, #448]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a6f      	ldr	r2, [pc, #444]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	4b6d      	ldr	r3, [pc, #436]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6c      	ldr	r2, [pc, #432]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d013      	beq.n	8004c76 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4e:	f7fe fda1 	bl	8003794 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c56:	f7fe fd9d 	bl	8003794 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b64      	cmp	r3, #100	; 0x64
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e1db      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c68:	4b61      	ldr	r3, [pc, #388]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0xd6>
 8004c74:	e014      	b.n	8004ca0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fe fd8d 	bl	8003794 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7e:	f7fe fd89 	bl	8003794 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b64      	cmp	r3, #100	; 0x64
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1c7      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c90:	4b57      	ldr	r3, [pc, #348]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f0      	bne.n	8004c7e <HAL_RCC_OscConfig+0xfe>
 8004c9c:	e000      	b.n	8004ca0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d06f      	beq.n	8004d8c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cac:	4b50      	ldr	r3, [pc, #320]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d017      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cb8:	4b4d      	ldr	r3, [pc, #308]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cc4:	4b4a      	ldr	r3, [pc, #296]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00b      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cd0:	4b47      	ldr	r3, [pc, #284]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cd8:	2b0c      	cmp	r3, #12
 8004cda:	d11c      	bne.n	8004d16 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cdc:	4b44      	ldr	r3, [pc, #272]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d116      	bne.n	8004d16 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce8:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_RCC_OscConfig+0x180>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e18f      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d00:	4b3b      	ldr	r3, [pc, #236]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	4938      	ldr	r1, [pc, #224]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d14:	e03a      	b.n	8004d8c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d020      	beq.n	8004d60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d1e:	4b35      	ldr	r3, [pc, #212]	; (8004df4 <HAL_RCC_OscConfig+0x274>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fe fd36 	bl	8003794 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2c:	f7fe fd32 	bl	8003794 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e170      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3e:	4b2c      	ldr	r3, [pc, #176]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4a:	4b29      	ldr	r3, [pc, #164]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	4925      	ldr	r1, [pc, #148]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	600b      	str	r3, [r1, #0]
 8004d5e:	e015      	b.n	8004d8c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d60:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <HAL_RCC_OscConfig+0x274>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fe fd15 	bl	8003794 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d6e:	f7fe fd11 	bl	8003794 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e14f      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d80:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f0      	bne.n	8004d6e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d037      	beq.n	8004e08 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d016      	beq.n	8004dce <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004da0:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <HAL_RCC_OscConfig+0x278>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da6:	f7fe fcf5 	bl	8003794 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dae:	f7fe fcf1 	bl	8003794 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e12f      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <HAL_RCC_OscConfig+0x270>)
 8004dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <HAL_RCC_OscConfig+0x22e>
 8004dcc:	e01c      	b.n	8004e08 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <HAL_RCC_OscConfig+0x278>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd4:	f7fe fcde 	bl	8003794 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dda:	e00f      	b.n	8004dfc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ddc:	f7fe fcda 	bl	8003794 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d908      	bls.n	8004dfc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e118      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
 8004dee:	bf00      	nop
 8004df0:	40023800 	.word	0x40023800
 8004df4:	42470000 	.word	0x42470000
 8004df8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dfc:	4b8a      	ldr	r3, [pc, #552]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e9      	bne.n	8004ddc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8097 	beq.w	8004f44 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e16:	2300      	movs	r3, #0
 8004e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1a:	4b83      	ldr	r3, [pc, #524]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10f      	bne.n	8004e46 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	4b7f      	ldr	r3, [pc, #508]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	4a7e      	ldr	r2, [pc, #504]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e34:	6413      	str	r3, [r2, #64]	; 0x40
 8004e36:	4b7c      	ldr	r3, [pc, #496]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e42:	2301      	movs	r3, #1
 8004e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e46:	4b79      	ldr	r3, [pc, #484]	; (800502c <HAL_RCC_OscConfig+0x4ac>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d118      	bne.n	8004e84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e52:	4b76      	ldr	r3, [pc, #472]	; (800502c <HAL_RCC_OscConfig+0x4ac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a75      	ldr	r2, [pc, #468]	; (800502c <HAL_RCC_OscConfig+0x4ac>)
 8004e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e5e:	f7fe fc99 	bl	8003794 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e66:	f7fe fc95 	bl	8003794 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e0d3      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e78:	4b6c      	ldr	r3, [pc, #432]	; (800502c <HAL_RCC_OscConfig+0x4ac>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCC_OscConfig+0x31a>
 8004e8c:	4b66      	ldr	r3, [pc, #408]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	4a65      	ldr	r2, [pc, #404]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6713      	str	r3, [r2, #112]	; 0x70
 8004e98:	e01c      	b.n	8004ed4 <HAL_RCC_OscConfig+0x354>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x33c>
 8004ea2:	4b61      	ldr	r3, [pc, #388]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	4a60      	ldr	r2, [pc, #384]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004ea8:	f043 0304 	orr.w	r3, r3, #4
 8004eac:	6713      	str	r3, [r2, #112]	; 0x70
 8004eae:	4b5e      	ldr	r3, [pc, #376]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	4a5d      	ldr	r2, [pc, #372]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eba:	e00b      	b.n	8004ed4 <HAL_RCC_OscConfig+0x354>
 8004ebc:	4b5a      	ldr	r3, [pc, #360]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec0:	4a59      	ldr	r2, [pc, #356]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec8:	4b57      	ldr	r3, [pc, #348]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	4a56      	ldr	r2, [pc, #344]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004ece:	f023 0304 	bic.w	r3, r3, #4
 8004ed2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d015      	beq.n	8004f08 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004edc:	f7fe fc5a 	bl	8003794 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee4:	f7fe fc56 	bl	8003794 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e092      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efa:	4b4b      	ldr	r3, [pc, #300]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ee      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x364>
 8004f06:	e014      	b.n	8004f32 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f08:	f7fe fc44 	bl	8003794 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f10:	f7fe fc40 	bl	8003794 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e07c      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f26:	4b40      	ldr	r3, [pc, #256]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ee      	bne.n	8004f10 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d105      	bne.n	8004f44 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f38:	4b3b      	ldr	r3, [pc, #236]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	4a3a      	ldr	r2, [pc, #232]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d068      	beq.n	800501e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f4c:	4b36      	ldr	r3, [pc, #216]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 030c 	and.w	r3, r3, #12
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d060      	beq.n	800501a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d145      	bne.n	8004fec <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f60:	4b33      	ldr	r3, [pc, #204]	; (8005030 <HAL_RCC_OscConfig+0x4b0>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7fe fc15 	bl	8003794 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f6e:	f7fe fc11 	bl	8003794 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e04f      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f80:	4b29      	ldr	r3, [pc, #164]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f0      	bne.n	8004f6e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	019b      	lsls	r3, r3, #6
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	071b      	lsls	r3, r3, #28
 8004fb8:	491b      	ldr	r1, [pc, #108]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fbe:	4b1c      	ldr	r3, [pc, #112]	; (8005030 <HAL_RCC_OscConfig+0x4b0>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fe fbe6 	bl	8003794 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fe fbe2 	bl	8003794 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e020      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0x44c>
 8004fea:	e018      	b.n	800501e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <HAL_RCC_OscConfig+0x4b0>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff2:	f7fe fbcf 	bl	8003794 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffa:	f7fe fbcb 	bl	8003794 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e009      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <HAL_RCC_OscConfig+0x4a8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1f0      	bne.n	8004ffa <HAL_RCC_OscConfig+0x47a>
 8005018:	e001      	b.n	800501e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40023800 	.word	0x40023800
 800502c:	40007000 	.word	0x40007000
 8005030:	42470060 	.word	0x42470060

08005034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e01d      	b.n	8005082 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fe f9c0 	bl	80033e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f000 fa64 	bl	8005540 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b06      	cmp	r3, #6
 80050aa:	d007      	beq.n	80050bc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0201 	orr.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a1a      	ldr	r2, [r3, #32]
 80050e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10f      	bne.n	8005112 <HAL_TIM_Base_Stop+0x40>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a1a      	ldr	r2, [r3, #32]
 80050f8:	f240 4344 	movw	r3, #1092	; 0x444
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d107      	bne.n	8005112 <HAL_TIM_Base_Stop+0x40>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0201 	bic.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b06      	cmp	r3, #6
 8005150:	d007      	beq.n	8005162 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0201 	orr.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d122      	bne.n	80051cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b02      	cmp	r3, #2
 8005192:	d11b      	bne.n	80051cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0202 	mvn.w	r2, #2
 800519c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f9a5 	bl	8005502 <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f997 	bl	80054ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f9a8 	bl	8005516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d122      	bne.n	8005220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d11b      	bne.n	8005220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0204 	mvn.w	r2, #4
 80051f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f97b 	bl	8005502 <HAL_TIM_IC_CaptureCallback>
 800520c:	e005      	b.n	800521a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f96d 	bl	80054ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f97e 	bl	8005516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b08      	cmp	r3, #8
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b08      	cmp	r3, #8
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0208 	mvn.w	r2, #8
 8005244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2204      	movs	r2, #4
 800524a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f951 	bl	8005502 <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f943 	bl	80054ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f954 	bl	8005516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b10      	cmp	r3, #16
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b10      	cmp	r3, #16
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0210 	mvn.w	r2, #16
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2208      	movs	r2, #8
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f927 	bl	8005502 <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f919 	bl	80054ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f92a 	bl	8005516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d10e      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d107      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0201 	mvn.w	r2, #1
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fd ff68 	bl	80031c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d10e      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530c:	2b80      	cmp	r3, #128	; 0x80
 800530e:	d107      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fad0 	bl	80058c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d10e      	bne.n	800534c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d107      	bne.n	800534c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f8ef 	bl	800552a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b20      	cmp	r3, #32
 8005358:	d10e      	bne.n	8005378 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b20      	cmp	r3, #32
 8005366:	d107      	bne.n	8005378 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0220 	mvn.w	r2, #32
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa9a 	bl	80058ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_TIM_ConfigClockSource+0x18>
 8005394:	2302      	movs	r3, #2
 8005396:	e0a6      	b.n	80054e6 <HAL_TIM_ConfigClockSource+0x166>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	d067      	beq.n	80054a0 <HAL_TIM_ConfigClockSource+0x120>
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d80b      	bhi.n	80053ec <HAL_TIM_ConfigClockSource+0x6c>
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d073      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0x140>
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d802      	bhi.n	80053e2 <HAL_TIM_ConfigClockSource+0x62>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d06f      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053e0:	e078      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d06c      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0x140>
 80053e6:	2b30      	cmp	r3, #48	; 0x30
 80053e8:	d06a      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053ea:	e073      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053ec:	2b70      	cmp	r3, #112	; 0x70
 80053ee:	d00d      	beq.n	800540c <HAL_TIM_ConfigClockSource+0x8c>
 80053f0:	2b70      	cmp	r3, #112	; 0x70
 80053f2:	d804      	bhi.n	80053fe <HAL_TIM_ConfigClockSource+0x7e>
 80053f4:	2b50      	cmp	r3, #80	; 0x50
 80053f6:	d033      	beq.n	8005460 <HAL_TIM_ConfigClockSource+0xe0>
 80053f8:	2b60      	cmp	r3, #96	; 0x60
 80053fa:	d041      	beq.n	8005480 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80053fc:	e06a      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005402:	d066      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0x152>
 8005404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005408:	d017      	beq.n	800543a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800540a:	e063      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	6899      	ldr	r1, [r3, #8]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f000 f9aa 	bl	8005774 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800542e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	609a      	str	r2, [r3, #8]
      break;
 8005438:	e04c      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6899      	ldr	r1, [r3, #8]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f000 f993 	bl	8005774 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800545c:	609a      	str	r2, [r3, #8]
      break;
 800545e:	e039      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	6859      	ldr	r1, [r3, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	461a      	mov	r2, r3
 800546e:	f000 f907 	bl	8005680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2150      	movs	r1, #80	; 0x50
 8005478:	4618      	mov	r0, r3
 800547a:	f000 f960 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 800547e:	e029      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	6859      	ldr	r1, [r3, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	461a      	mov	r2, r3
 800548e:	f000 f926 	bl	80056de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2160      	movs	r1, #96	; 0x60
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f950 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 800549e:	e019      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	6859      	ldr	r1, [r3, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	461a      	mov	r2, r3
 80054ae:	f000 f8e7 	bl	8005680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2140      	movs	r1, #64	; 0x40
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 f940 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 80054be:	e009      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f000 f937 	bl	800573e <TIM_ITRx_SetConfig>
      break;
 80054d0:	e000      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80054d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a40      	ldr	r2, [pc, #256]	; (8005654 <TIM_Base_SetConfig+0x114>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d013      	beq.n	8005580 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555e:	d00f      	beq.n	8005580 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a3d      	ldr	r2, [pc, #244]	; (8005658 <TIM_Base_SetConfig+0x118>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00b      	beq.n	8005580 <TIM_Base_SetConfig+0x40>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a3c      	ldr	r2, [pc, #240]	; (800565c <TIM_Base_SetConfig+0x11c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d007      	beq.n	8005580 <TIM_Base_SetConfig+0x40>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a3b      	ldr	r2, [pc, #236]	; (8005660 <TIM_Base_SetConfig+0x120>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d003      	beq.n	8005580 <TIM_Base_SetConfig+0x40>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a3a      	ldr	r2, [pc, #232]	; (8005664 <TIM_Base_SetConfig+0x124>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d108      	bne.n	8005592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <TIM_Base_SetConfig+0x114>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d02b      	beq.n	80055f2 <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a0:	d027      	beq.n	80055f2 <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2c      	ldr	r2, [pc, #176]	; (8005658 <TIM_Base_SetConfig+0x118>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d023      	beq.n	80055f2 <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a2b      	ldr	r2, [pc, #172]	; (800565c <TIM_Base_SetConfig+0x11c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01f      	beq.n	80055f2 <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2a      	ldr	r2, [pc, #168]	; (8005660 <TIM_Base_SetConfig+0x120>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01b      	beq.n	80055f2 <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a29      	ldr	r2, [pc, #164]	; (8005664 <TIM_Base_SetConfig+0x124>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d017      	beq.n	80055f2 <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a28      	ldr	r2, [pc, #160]	; (8005668 <TIM_Base_SetConfig+0x128>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a27      	ldr	r2, [pc, #156]	; (800566c <TIM_Base_SetConfig+0x12c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00f      	beq.n	80055f2 <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a26      	ldr	r2, [pc, #152]	; (8005670 <TIM_Base_SetConfig+0x130>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00b      	beq.n	80055f2 <TIM_Base_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a25      	ldr	r2, [pc, #148]	; (8005674 <TIM_Base_SetConfig+0x134>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d007      	beq.n	80055f2 <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a24      	ldr	r2, [pc, #144]	; (8005678 <TIM_Base_SetConfig+0x138>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a23      	ldr	r2, [pc, #140]	; (800567c <TIM_Base_SetConfig+0x13c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d108      	bne.n	8005604 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a0a      	ldr	r2, [pc, #40]	; (8005654 <TIM_Base_SetConfig+0x114>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_Base_SetConfig+0xf8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <TIM_Base_SetConfig+0x124>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d103      	bne.n	8005640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	615a      	str	r2, [r3, #20]
}
 8005646:	bf00      	nop
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40010000 	.word	0x40010000
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40010400 	.word	0x40010400
 8005668:	40014000 	.word	0x40014000
 800566c:	40014400 	.word	0x40014400
 8005670:	40014800 	.word	0x40014800
 8005674:	40001800 	.word	0x40001800
 8005678:	40001c00 	.word	0x40001c00
 800567c:	40002000 	.word	0x40002000

08005680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f023 0201 	bic.w	r2, r3, #1
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f023 030a 	bic.w	r3, r3, #10
 80056bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056de:	b480      	push	{r7}
 80056e0:	b087      	sub	sp, #28
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f023 0210 	bic.w	r2, r3, #16
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	031b      	lsls	r3, r3, #12
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800571a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	f043 0307 	orr.w	r3, r3, #7
 8005760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	609a      	str	r2, [r3, #8]
}
 8005768:	bf00      	nop
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800578e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	021a      	lsls	r2, r3, #8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	431a      	orrs	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4313      	orrs	r3, r2
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	609a      	str	r2, [r3, #8]
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e05a      	b.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a21      	ldr	r2, [pc, #132]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d022      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005818:	d01d      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1a      	ldr	r2, [pc, #104]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a18      	ldr	r2, [pc, #96]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10c      	bne.n	8005870 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800585c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	4313      	orrs	r3, r2
 8005866:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40010400 	.word	0x40010400
 80058a4:	40014000 	.word	0x40014000
 80058a8:	40001800 	.word	0x40001800

080058ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e03f      	b.n	8005966 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fd fdc2 	bl	8003484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2224      	movs	r2, #36	; 0x24
 8005904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fb97 	bl	800604c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800592c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695a      	ldr	r2, [r3, #20]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800593c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800594c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2220      	movs	r2, #32
 8005960:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b088      	sub	sp, #32
 8005972:	af02      	add	r7, sp, #8
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	603b      	str	r3, [r7, #0]
 800597a:	4613      	mov	r3, r2
 800597c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b20      	cmp	r3, #32
 800598c:	f040 8083 	bne.w	8005a96 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <HAL_UART_Transmit+0x2e>
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e07b      	b.n	8005a98 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Transmit+0x40>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e074      	b.n	8005a98 <HAL_UART_Transmit+0x12a>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2221      	movs	r2, #33	; 0x21
 80059c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80059c4:	f7fd fee6 	bl	8003794 <HAL_GetTick>
 80059c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	88fa      	ldrh	r2, [r7, #6]
 80059ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	88fa      	ldrh	r2, [r7, #6]
 80059d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80059de:	e042      	b.n	8005a66 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f6:	d122      	bne.n	8005a3e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2200      	movs	r2, #0
 8005a00:	2180      	movs	r1, #128	; 0x80
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f9b6 	bl	8005d74 <UART_WaitOnFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e042      	b.n	8005a98 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a24:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	3302      	adds	r3, #2
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	e017      	b.n	8005a66 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	60bb      	str	r3, [r7, #8]
 8005a3c:	e013      	b.n	8005a66 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2200      	movs	r2, #0
 8005a46:	2180      	movs	r1, #128	; 0x80
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f993 	bl	8005d74 <UART_WaitOnFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e01f      	b.n	8005a98 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	60ba      	str	r2, [r7, #8]
 8005a5e:	781a      	ldrb	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1b7      	bne.n	80059e0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2200      	movs	r2, #0
 8005a78:	2140      	movs	r1, #64	; 0x40
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f97a 	bl	8005d74 <UART_WaitOnFlagUntilTimeout>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e006      	b.n	8005a98 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
  }
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d140      	bne.n	8005b3c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_UART_Receive_IT+0x26>
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e039      	b.n	8005b3e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_UART_Receive_IT+0x38>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e032      	b.n	8005b3e <HAL_UART_Receive_IT+0x9e>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	88fa      	ldrh	r2, [r7, #6]
 8005aea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2222      	movs	r2, #34	; 0x22
 8005afc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b16:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0220 	orr.w	r2, r2, #32
 8005b36:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e000      	b.n	8005b3e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005b3c:	2302      	movs	r3, #2
  }
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
	...

08005b4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10d      	bne.n	8005b9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_UART_IRQHandler+0x52>
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f9d6 	bl	8005f48 <UART_Receive_IT>
      return;
 8005b9c:	e0d1      	b.n	8005d42 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 80b0 	beq.w	8005d06 <HAL_UART_IRQHandler+0x1ba>
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d105      	bne.n	8005bbc <HAL_UART_IRQHandler+0x70>
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 80a5 	beq.w	8005d06 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <HAL_UART_IRQHandler+0x90>
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd4:	f043 0201 	orr.w	r2, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <HAL_UART_IRQHandler+0xb0>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf4:	f043 0202 	orr.w	r2, r3, #2
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <HAL_UART_IRQHandler+0xd0>
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d005      	beq.n	8005c1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c14:	f043 0204 	orr.w	r2, r3, #4
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00f      	beq.n	8005c46 <HAL_UART_IRQHandler+0xfa>
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d104      	bne.n	8005c3a <HAL_UART_IRQHandler+0xee>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3e:	f043 0208 	orr.w	r2, r3, #8
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d078      	beq.n	8005d40 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <HAL_UART_IRQHandler+0x11c>
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f970 	bl	8005f48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c72:	2b40      	cmp	r3, #64	; 0x40
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c82:	f003 0308 	and.w	r3, r3, #8
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <HAL_UART_IRQHandler+0x144>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d031      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f8b9 	bl	8005e08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca0:	2b40      	cmp	r3, #64	; 0x40
 8005ca2:	d123      	bne.n	8005cec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695a      	ldr	r2, [r3, #20]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d013      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc0:	4a21      	ldr	r2, [pc, #132]	; (8005d48 <HAL_UART_IRQHandler+0x1fc>)
 8005cc2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fe f87f 	bl	8003dcc <HAL_DMA_Abort_IT>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d016      	beq.n	8005d02 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cde:	4610      	mov	r0, r2
 8005ce0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce2:	e00e      	b.n	8005d02 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f83b 	bl	8005d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cea:	e00a      	b.n	8005d02 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f837 	bl	8005d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf2:	e006      	b.n	8005d02 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f833 	bl	8005d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d00:	e01e      	b.n	8005d40 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d02:	bf00      	nop
    return;
 8005d04:	e01c      	b.n	8005d40 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d008      	beq.n	8005d22 <HAL_UART_IRQHandler+0x1d6>
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f8a6 	bl	8005e6c <UART_Transmit_IT>
    return;
 8005d20:	e00f      	b.n	8005d42 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <HAL_UART_IRQHandler+0x1f6>
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f8ee 	bl	8005f18 <UART_EndTransmit_IT>
    return;
 8005d3c:	bf00      	nop
 8005d3e:	e000      	b.n	8005d42 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005d40:	bf00      	nop
  }
}
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	08005e45 	.word	0x08005e45

08005d4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d84:	e02c      	b.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d028      	beq.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d94:	f7fd fcfe 	bl	8003794 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d21d      	bcs.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005db2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e00f      	b.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4013      	ands	r3, r2
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	bf0c      	ite	eq
 8005df0:	2301      	moveq	r3, #1
 8005df2:	2300      	movne	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d0c3      	beq.n	8005d86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695a      	ldr	r2, [r3, #20]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0201 	bic.w	r2, r2, #1
 8005e2e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7ff ff7e 	bl	8005d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e64:	bf00      	nop
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b21      	cmp	r3, #33	; 0x21
 8005e7e:	d144      	bne.n	8005f0a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e88:	d11a      	bne.n	8005ec0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e9e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d105      	bne.n	8005eb4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	1c9a      	adds	r2, r3, #2
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	621a      	str	r2, [r3, #32]
 8005eb2:	e00e      	b.n	8005ed2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]
 8005ebe:	e008      	b.n	8005ed2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6211      	str	r1, [r2, #32]
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10f      	bne.n	8005f06 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ef4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e000      	b.n	8005f0c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005f0a:	2302      	movs	r3, #2
  }
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ff07 	bl	8005d4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b22      	cmp	r3, #34	; 0x22
 8005f5a:	d171      	bne.n	8006040 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f64:	d123      	bne.n	8005fae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10e      	bne.n	8005f92 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	1c9a      	adds	r2, r3, #2
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f90:	e029      	b.n	8005fe6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	629a      	str	r2, [r3, #40]	; 0x28
 8005fac:	e01b      	b.n	8005fe6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6858      	ldr	r0, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc0:	1c59      	adds	r1, r3, #1
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6291      	str	r1, [r2, #40]	; 0x28
 8005fc6:	b2c2      	uxtb	r2, r0
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	e00c      	b.n	8005fe6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	1c58      	adds	r0, r3, #1
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	6288      	str	r0, [r1, #40]	; 0x28
 8005fde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d120      	bne.n	800603c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0220 	bic.w	r2, r2, #32
 8006008:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006018:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0201 	bic.w	r2, r2, #1
 8006028:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fd f8f2 	bl	800321c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e002      	b.n	8006042 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	e000      	b.n	8006042 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006040:	2302      	movs	r3, #2
  }
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800608e:	f023 030c 	bic.w	r3, r3, #12
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6812      	ldr	r2, [r2, #0]
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	430b      	orrs	r3, r1
 800609a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ba:	f040 818b 	bne.w	80063d4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4ac1      	ldr	r2, [pc, #772]	; (80063c8 <UART_SetConfig+0x37c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d005      	beq.n	80060d4 <UART_SetConfig+0x88>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4abf      	ldr	r2, [pc, #764]	; (80063cc <UART_SetConfig+0x380>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	f040 80bd 	bne.w	800624e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060d4:	f7fe fba0 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 80060d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	461d      	mov	r5, r3
 80060de:	f04f 0600 	mov.w	r6, #0
 80060e2:	46a8      	mov	r8, r5
 80060e4:	46b1      	mov	r9, r6
 80060e6:	eb18 0308 	adds.w	r3, r8, r8
 80060ea:	eb49 0409 	adc.w	r4, r9, r9
 80060ee:	4698      	mov	r8, r3
 80060f0:	46a1      	mov	r9, r4
 80060f2:	eb18 0805 	adds.w	r8, r8, r5
 80060f6:	eb49 0906 	adc.w	r9, r9, r6
 80060fa:	f04f 0100 	mov.w	r1, #0
 80060fe:	f04f 0200 	mov.w	r2, #0
 8006102:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006106:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800610a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800610e:	4688      	mov	r8, r1
 8006110:	4691      	mov	r9, r2
 8006112:	eb18 0005 	adds.w	r0, r8, r5
 8006116:	eb49 0106 	adc.w	r1, r9, r6
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	461d      	mov	r5, r3
 8006120:	f04f 0600 	mov.w	r6, #0
 8006124:	196b      	adds	r3, r5, r5
 8006126:	eb46 0406 	adc.w	r4, r6, r6
 800612a:	461a      	mov	r2, r3
 800612c:	4623      	mov	r3, r4
 800612e:	f7fa f8c7 	bl	80002c0 <__aeabi_uldivmod>
 8006132:	4603      	mov	r3, r0
 8006134:	460c      	mov	r4, r1
 8006136:	461a      	mov	r2, r3
 8006138:	4ba5      	ldr	r3, [pc, #660]	; (80063d0 <UART_SetConfig+0x384>)
 800613a:	fba3 2302 	umull	r2, r3, r3, r2
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	461d      	mov	r5, r3
 8006148:	f04f 0600 	mov.w	r6, #0
 800614c:	46a9      	mov	r9, r5
 800614e:	46b2      	mov	sl, r6
 8006150:	eb19 0309 	adds.w	r3, r9, r9
 8006154:	eb4a 040a 	adc.w	r4, sl, sl
 8006158:	4699      	mov	r9, r3
 800615a:	46a2      	mov	sl, r4
 800615c:	eb19 0905 	adds.w	r9, r9, r5
 8006160:	eb4a 0a06 	adc.w	sl, sl, r6
 8006164:	f04f 0100 	mov.w	r1, #0
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006170:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006174:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006178:	4689      	mov	r9, r1
 800617a:	4692      	mov	sl, r2
 800617c:	eb19 0005 	adds.w	r0, r9, r5
 8006180:	eb4a 0106 	adc.w	r1, sl, r6
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	461d      	mov	r5, r3
 800618a:	f04f 0600 	mov.w	r6, #0
 800618e:	196b      	adds	r3, r5, r5
 8006190:	eb46 0406 	adc.w	r4, r6, r6
 8006194:	461a      	mov	r2, r3
 8006196:	4623      	mov	r3, r4
 8006198:	f7fa f892 	bl	80002c0 <__aeabi_uldivmod>
 800619c:	4603      	mov	r3, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	461a      	mov	r2, r3
 80061a2:	4b8b      	ldr	r3, [pc, #556]	; (80063d0 <UART_SetConfig+0x384>)
 80061a4:	fba3 1302 	umull	r1, r3, r3, r2
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	2164      	movs	r1, #100	; 0x64
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	3332      	adds	r3, #50	; 0x32
 80061b6:	4a86      	ldr	r2, [pc, #536]	; (80063d0 <UART_SetConfig+0x384>)
 80061b8:	fba2 2303 	umull	r2, r3, r2, r3
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061c4:	4498      	add	r8, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	461d      	mov	r5, r3
 80061ca:	f04f 0600 	mov.w	r6, #0
 80061ce:	46a9      	mov	r9, r5
 80061d0:	46b2      	mov	sl, r6
 80061d2:	eb19 0309 	adds.w	r3, r9, r9
 80061d6:	eb4a 040a 	adc.w	r4, sl, sl
 80061da:	4699      	mov	r9, r3
 80061dc:	46a2      	mov	sl, r4
 80061de:	eb19 0905 	adds.w	r9, r9, r5
 80061e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80061e6:	f04f 0100 	mov.w	r1, #0
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061fa:	4689      	mov	r9, r1
 80061fc:	4692      	mov	sl, r2
 80061fe:	eb19 0005 	adds.w	r0, r9, r5
 8006202:	eb4a 0106 	adc.w	r1, sl, r6
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	461d      	mov	r5, r3
 800620c:	f04f 0600 	mov.w	r6, #0
 8006210:	196b      	adds	r3, r5, r5
 8006212:	eb46 0406 	adc.w	r4, r6, r6
 8006216:	461a      	mov	r2, r3
 8006218:	4623      	mov	r3, r4
 800621a:	f7fa f851 	bl	80002c0 <__aeabi_uldivmod>
 800621e:	4603      	mov	r3, r0
 8006220:	460c      	mov	r4, r1
 8006222:	461a      	mov	r2, r3
 8006224:	4b6a      	ldr	r3, [pc, #424]	; (80063d0 <UART_SetConfig+0x384>)
 8006226:	fba3 1302 	umull	r1, r3, r3, r2
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	2164      	movs	r1, #100	; 0x64
 800622e:	fb01 f303 	mul.w	r3, r1, r3
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	3332      	adds	r3, #50	; 0x32
 8006238:	4a65      	ldr	r2, [pc, #404]	; (80063d0 <UART_SetConfig+0x384>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	f003 0207 	and.w	r2, r3, #7
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4442      	add	r2, r8
 800624a:	609a      	str	r2, [r3, #8]
 800624c:	e26f      	b.n	800672e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800624e:	f7fe facf 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8006252:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	461d      	mov	r5, r3
 8006258:	f04f 0600 	mov.w	r6, #0
 800625c:	46a8      	mov	r8, r5
 800625e:	46b1      	mov	r9, r6
 8006260:	eb18 0308 	adds.w	r3, r8, r8
 8006264:	eb49 0409 	adc.w	r4, r9, r9
 8006268:	4698      	mov	r8, r3
 800626a:	46a1      	mov	r9, r4
 800626c:	eb18 0805 	adds.w	r8, r8, r5
 8006270:	eb49 0906 	adc.w	r9, r9, r6
 8006274:	f04f 0100 	mov.w	r1, #0
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006280:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006284:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006288:	4688      	mov	r8, r1
 800628a:	4691      	mov	r9, r2
 800628c:	eb18 0005 	adds.w	r0, r8, r5
 8006290:	eb49 0106 	adc.w	r1, r9, r6
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	461d      	mov	r5, r3
 800629a:	f04f 0600 	mov.w	r6, #0
 800629e:	196b      	adds	r3, r5, r5
 80062a0:	eb46 0406 	adc.w	r4, r6, r6
 80062a4:	461a      	mov	r2, r3
 80062a6:	4623      	mov	r3, r4
 80062a8:	f7fa f80a 	bl	80002c0 <__aeabi_uldivmod>
 80062ac:	4603      	mov	r3, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b47      	ldr	r3, [pc, #284]	; (80063d0 <UART_SetConfig+0x384>)
 80062b4:	fba3 2302 	umull	r2, r3, r3, r2
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	461d      	mov	r5, r3
 80062c2:	f04f 0600 	mov.w	r6, #0
 80062c6:	46a9      	mov	r9, r5
 80062c8:	46b2      	mov	sl, r6
 80062ca:	eb19 0309 	adds.w	r3, r9, r9
 80062ce:	eb4a 040a 	adc.w	r4, sl, sl
 80062d2:	4699      	mov	r9, r3
 80062d4:	46a2      	mov	sl, r4
 80062d6:	eb19 0905 	adds.w	r9, r9, r5
 80062da:	eb4a 0a06 	adc.w	sl, sl, r6
 80062de:	f04f 0100 	mov.w	r1, #0
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062f2:	4689      	mov	r9, r1
 80062f4:	4692      	mov	sl, r2
 80062f6:	eb19 0005 	adds.w	r0, r9, r5
 80062fa:	eb4a 0106 	adc.w	r1, sl, r6
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	461d      	mov	r5, r3
 8006304:	f04f 0600 	mov.w	r6, #0
 8006308:	196b      	adds	r3, r5, r5
 800630a:	eb46 0406 	adc.w	r4, r6, r6
 800630e:	461a      	mov	r2, r3
 8006310:	4623      	mov	r3, r4
 8006312:	f7f9 ffd5 	bl	80002c0 <__aeabi_uldivmod>
 8006316:	4603      	mov	r3, r0
 8006318:	460c      	mov	r4, r1
 800631a:	461a      	mov	r2, r3
 800631c:	4b2c      	ldr	r3, [pc, #176]	; (80063d0 <UART_SetConfig+0x384>)
 800631e:	fba3 1302 	umull	r1, r3, r3, r2
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	2164      	movs	r1, #100	; 0x64
 8006326:	fb01 f303 	mul.w	r3, r1, r3
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	3332      	adds	r3, #50	; 0x32
 8006330:	4a27      	ldr	r2, [pc, #156]	; (80063d0 <UART_SetConfig+0x384>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800633e:	4498      	add	r8, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	461d      	mov	r5, r3
 8006344:	f04f 0600 	mov.w	r6, #0
 8006348:	46a9      	mov	r9, r5
 800634a:	46b2      	mov	sl, r6
 800634c:	eb19 0309 	adds.w	r3, r9, r9
 8006350:	eb4a 040a 	adc.w	r4, sl, sl
 8006354:	4699      	mov	r9, r3
 8006356:	46a2      	mov	sl, r4
 8006358:	eb19 0905 	adds.w	r9, r9, r5
 800635c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006360:	f04f 0100 	mov.w	r1, #0
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800636c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006370:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006374:	4689      	mov	r9, r1
 8006376:	4692      	mov	sl, r2
 8006378:	eb19 0005 	adds.w	r0, r9, r5
 800637c:	eb4a 0106 	adc.w	r1, sl, r6
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	461d      	mov	r5, r3
 8006386:	f04f 0600 	mov.w	r6, #0
 800638a:	196b      	adds	r3, r5, r5
 800638c:	eb46 0406 	adc.w	r4, r6, r6
 8006390:	461a      	mov	r2, r3
 8006392:	4623      	mov	r3, r4
 8006394:	f7f9 ff94 	bl	80002c0 <__aeabi_uldivmod>
 8006398:	4603      	mov	r3, r0
 800639a:	460c      	mov	r4, r1
 800639c:	461a      	mov	r2, r3
 800639e:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <UART_SetConfig+0x384>)
 80063a0:	fba3 1302 	umull	r1, r3, r3, r2
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	2164      	movs	r1, #100	; 0x64
 80063a8:	fb01 f303 	mul.w	r3, r1, r3
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	3332      	adds	r3, #50	; 0x32
 80063b2:	4a07      	ldr	r2, [pc, #28]	; (80063d0 <UART_SetConfig+0x384>)
 80063b4:	fba2 2303 	umull	r2, r3, r2, r3
 80063b8:	095b      	lsrs	r3, r3, #5
 80063ba:	f003 0207 	and.w	r2, r3, #7
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4442      	add	r2, r8
 80063c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80063c6:	e1b2      	b.n	800672e <UART_SetConfig+0x6e2>
 80063c8:	40011000 	.word	0x40011000
 80063cc:	40011400 	.word	0x40011400
 80063d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4ad7      	ldr	r2, [pc, #860]	; (8006738 <UART_SetConfig+0x6ec>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d005      	beq.n	80063ea <UART_SetConfig+0x39e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4ad6      	ldr	r2, [pc, #856]	; (800673c <UART_SetConfig+0x6f0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	f040 80d1 	bne.w	800658c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80063ea:	f7fe fa15 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 80063ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	469a      	mov	sl, r3
 80063f4:	f04f 0b00 	mov.w	fp, #0
 80063f8:	46d0      	mov	r8, sl
 80063fa:	46d9      	mov	r9, fp
 80063fc:	eb18 0308 	adds.w	r3, r8, r8
 8006400:	eb49 0409 	adc.w	r4, r9, r9
 8006404:	4698      	mov	r8, r3
 8006406:	46a1      	mov	r9, r4
 8006408:	eb18 080a 	adds.w	r8, r8, sl
 800640c:	eb49 090b 	adc.w	r9, r9, fp
 8006410:	f04f 0100 	mov.w	r1, #0
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800641c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006420:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006424:	4688      	mov	r8, r1
 8006426:	4691      	mov	r9, r2
 8006428:	eb1a 0508 	adds.w	r5, sl, r8
 800642c:	eb4b 0609 	adc.w	r6, fp, r9
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	4619      	mov	r1, r3
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	f04f 0300 	mov.w	r3, #0
 800643e:	f04f 0400 	mov.w	r4, #0
 8006442:	0094      	lsls	r4, r2, #2
 8006444:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006448:	008b      	lsls	r3, r1, #2
 800644a:	461a      	mov	r2, r3
 800644c:	4623      	mov	r3, r4
 800644e:	4628      	mov	r0, r5
 8006450:	4631      	mov	r1, r6
 8006452:	f7f9 ff35 	bl	80002c0 <__aeabi_uldivmod>
 8006456:	4603      	mov	r3, r0
 8006458:	460c      	mov	r4, r1
 800645a:	461a      	mov	r2, r3
 800645c:	4bb8      	ldr	r3, [pc, #736]	; (8006740 <UART_SetConfig+0x6f4>)
 800645e:	fba3 2302 	umull	r2, r3, r3, r2
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	469b      	mov	fp, r3
 800646c:	f04f 0c00 	mov.w	ip, #0
 8006470:	46d9      	mov	r9, fp
 8006472:	46e2      	mov	sl, ip
 8006474:	eb19 0309 	adds.w	r3, r9, r9
 8006478:	eb4a 040a 	adc.w	r4, sl, sl
 800647c:	4699      	mov	r9, r3
 800647e:	46a2      	mov	sl, r4
 8006480:	eb19 090b 	adds.w	r9, r9, fp
 8006484:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006488:	f04f 0100 	mov.w	r1, #0
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006494:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006498:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800649c:	4689      	mov	r9, r1
 800649e:	4692      	mov	sl, r2
 80064a0:	eb1b 0509 	adds.w	r5, fp, r9
 80064a4:	eb4c 060a 	adc.w	r6, ip, sl
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	4619      	mov	r1, r3
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	f04f 0400 	mov.w	r4, #0
 80064ba:	0094      	lsls	r4, r2, #2
 80064bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064c0:	008b      	lsls	r3, r1, #2
 80064c2:	461a      	mov	r2, r3
 80064c4:	4623      	mov	r3, r4
 80064c6:	4628      	mov	r0, r5
 80064c8:	4631      	mov	r1, r6
 80064ca:	f7f9 fef9 	bl	80002c0 <__aeabi_uldivmod>
 80064ce:	4603      	mov	r3, r0
 80064d0:	460c      	mov	r4, r1
 80064d2:	461a      	mov	r2, r3
 80064d4:	4b9a      	ldr	r3, [pc, #616]	; (8006740 <UART_SetConfig+0x6f4>)
 80064d6:	fba3 1302 	umull	r1, r3, r3, r2
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	2164      	movs	r1, #100	; 0x64
 80064de:	fb01 f303 	mul.w	r3, r1, r3
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	011b      	lsls	r3, r3, #4
 80064e6:	3332      	adds	r3, #50	; 0x32
 80064e8:	4a95      	ldr	r2, [pc, #596]	; (8006740 <UART_SetConfig+0x6f4>)
 80064ea:	fba2 2303 	umull	r2, r3, r2, r3
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064f4:	4498      	add	r8, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	469b      	mov	fp, r3
 80064fa:	f04f 0c00 	mov.w	ip, #0
 80064fe:	46d9      	mov	r9, fp
 8006500:	46e2      	mov	sl, ip
 8006502:	eb19 0309 	adds.w	r3, r9, r9
 8006506:	eb4a 040a 	adc.w	r4, sl, sl
 800650a:	4699      	mov	r9, r3
 800650c:	46a2      	mov	sl, r4
 800650e:	eb19 090b 	adds.w	r9, r9, fp
 8006512:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006516:	f04f 0100 	mov.w	r1, #0
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006522:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006526:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800652a:	4689      	mov	r9, r1
 800652c:	4692      	mov	sl, r2
 800652e:	eb1b 0509 	adds.w	r5, fp, r9
 8006532:	eb4c 060a 	adc.w	r6, ip, sl
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	4619      	mov	r1, r3
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	f04f 0400 	mov.w	r4, #0
 8006548:	0094      	lsls	r4, r2, #2
 800654a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800654e:	008b      	lsls	r3, r1, #2
 8006550:	461a      	mov	r2, r3
 8006552:	4623      	mov	r3, r4
 8006554:	4628      	mov	r0, r5
 8006556:	4631      	mov	r1, r6
 8006558:	f7f9 feb2 	bl	80002c0 <__aeabi_uldivmod>
 800655c:	4603      	mov	r3, r0
 800655e:	460c      	mov	r4, r1
 8006560:	461a      	mov	r2, r3
 8006562:	4b77      	ldr	r3, [pc, #476]	; (8006740 <UART_SetConfig+0x6f4>)
 8006564:	fba3 1302 	umull	r1, r3, r3, r2
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	2164      	movs	r1, #100	; 0x64
 800656c:	fb01 f303 	mul.w	r3, r1, r3
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	3332      	adds	r3, #50	; 0x32
 8006576:	4a72      	ldr	r2, [pc, #456]	; (8006740 <UART_SetConfig+0x6f4>)
 8006578:	fba2 2303 	umull	r2, r3, r2, r3
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	f003 020f 	and.w	r2, r3, #15
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4442      	add	r2, r8
 8006588:	609a      	str	r2, [r3, #8]
 800658a:	e0d0      	b.n	800672e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800658c:	f7fe f930 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 8006590:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	469a      	mov	sl, r3
 8006596:	f04f 0b00 	mov.w	fp, #0
 800659a:	46d0      	mov	r8, sl
 800659c:	46d9      	mov	r9, fp
 800659e:	eb18 0308 	adds.w	r3, r8, r8
 80065a2:	eb49 0409 	adc.w	r4, r9, r9
 80065a6:	4698      	mov	r8, r3
 80065a8:	46a1      	mov	r9, r4
 80065aa:	eb18 080a 	adds.w	r8, r8, sl
 80065ae:	eb49 090b 	adc.w	r9, r9, fp
 80065b2:	f04f 0100 	mov.w	r1, #0
 80065b6:	f04f 0200 	mov.w	r2, #0
 80065ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065c6:	4688      	mov	r8, r1
 80065c8:	4691      	mov	r9, r2
 80065ca:	eb1a 0508 	adds.w	r5, sl, r8
 80065ce:	eb4b 0609 	adc.w	r6, fp, r9
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	4619      	mov	r1, r3
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	f04f 0400 	mov.w	r4, #0
 80065e4:	0094      	lsls	r4, r2, #2
 80065e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065ea:	008b      	lsls	r3, r1, #2
 80065ec:	461a      	mov	r2, r3
 80065ee:	4623      	mov	r3, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	4631      	mov	r1, r6
 80065f4:	f7f9 fe64 	bl	80002c0 <__aeabi_uldivmod>
 80065f8:	4603      	mov	r3, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	461a      	mov	r2, r3
 80065fe:	4b50      	ldr	r3, [pc, #320]	; (8006740 <UART_SetConfig+0x6f4>)
 8006600:	fba3 2302 	umull	r2, r3, r3, r2
 8006604:	095b      	lsrs	r3, r3, #5
 8006606:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	469b      	mov	fp, r3
 800660e:	f04f 0c00 	mov.w	ip, #0
 8006612:	46d9      	mov	r9, fp
 8006614:	46e2      	mov	sl, ip
 8006616:	eb19 0309 	adds.w	r3, r9, r9
 800661a:	eb4a 040a 	adc.w	r4, sl, sl
 800661e:	4699      	mov	r9, r3
 8006620:	46a2      	mov	sl, r4
 8006622:	eb19 090b 	adds.w	r9, r9, fp
 8006626:	eb4a 0a0c 	adc.w	sl, sl, ip
 800662a:	f04f 0100 	mov.w	r1, #0
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006636:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800663a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800663e:	4689      	mov	r9, r1
 8006640:	4692      	mov	sl, r2
 8006642:	eb1b 0509 	adds.w	r5, fp, r9
 8006646:	eb4c 060a 	adc.w	r6, ip, sl
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	4619      	mov	r1, r3
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	f04f 0400 	mov.w	r4, #0
 800665c:	0094      	lsls	r4, r2, #2
 800665e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006662:	008b      	lsls	r3, r1, #2
 8006664:	461a      	mov	r2, r3
 8006666:	4623      	mov	r3, r4
 8006668:	4628      	mov	r0, r5
 800666a:	4631      	mov	r1, r6
 800666c:	f7f9 fe28 	bl	80002c0 <__aeabi_uldivmod>
 8006670:	4603      	mov	r3, r0
 8006672:	460c      	mov	r4, r1
 8006674:	461a      	mov	r2, r3
 8006676:	4b32      	ldr	r3, [pc, #200]	; (8006740 <UART_SetConfig+0x6f4>)
 8006678:	fba3 1302 	umull	r1, r3, r3, r2
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	2164      	movs	r1, #100	; 0x64
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	3332      	adds	r3, #50	; 0x32
 800668a:	4a2d      	ldr	r2, [pc, #180]	; (8006740 <UART_SetConfig+0x6f4>)
 800668c:	fba2 2303 	umull	r2, r3, r2, r3
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006696:	4498      	add	r8, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	469b      	mov	fp, r3
 800669c:	f04f 0c00 	mov.w	ip, #0
 80066a0:	46d9      	mov	r9, fp
 80066a2:	46e2      	mov	sl, ip
 80066a4:	eb19 0309 	adds.w	r3, r9, r9
 80066a8:	eb4a 040a 	adc.w	r4, sl, sl
 80066ac:	4699      	mov	r9, r3
 80066ae:	46a2      	mov	sl, r4
 80066b0:	eb19 090b 	adds.w	r9, r9, fp
 80066b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066b8:	f04f 0100 	mov.w	r1, #0
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066cc:	4689      	mov	r9, r1
 80066ce:	4692      	mov	sl, r2
 80066d0:	eb1b 0509 	adds.w	r5, fp, r9
 80066d4:	eb4c 060a 	adc.w	r6, ip, sl
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4619      	mov	r1, r3
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	f04f 0400 	mov.w	r4, #0
 80066ea:	0094      	lsls	r4, r2, #2
 80066ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066f0:	008b      	lsls	r3, r1, #2
 80066f2:	461a      	mov	r2, r3
 80066f4:	4623      	mov	r3, r4
 80066f6:	4628      	mov	r0, r5
 80066f8:	4631      	mov	r1, r6
 80066fa:	f7f9 fde1 	bl	80002c0 <__aeabi_uldivmod>
 80066fe:	4603      	mov	r3, r0
 8006700:	460c      	mov	r4, r1
 8006702:	461a      	mov	r2, r3
 8006704:	4b0e      	ldr	r3, [pc, #56]	; (8006740 <UART_SetConfig+0x6f4>)
 8006706:	fba3 1302 	umull	r1, r3, r3, r2
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	2164      	movs	r1, #100	; 0x64
 800670e:	fb01 f303 	mul.w	r3, r1, r3
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	3332      	adds	r3, #50	; 0x32
 8006718:	4a09      	ldr	r2, [pc, #36]	; (8006740 <UART_SetConfig+0x6f4>)
 800671a:	fba2 2303 	umull	r2, r3, r2, r3
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	f003 020f 	and.w	r2, r3, #15
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4442      	add	r2, r8
 800672a:	609a      	str	r2, [r3, #8]
}
 800672c:	e7ff      	b.n	800672e <UART_SetConfig+0x6e2>
 800672e:	bf00      	nop
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006738:	40011000 	.word	0x40011000
 800673c:	40011400 	.word	0x40011400
 8006740:	51eb851f 	.word	0x51eb851f

08006744 <__errno>:
 8006744:	4b01      	ldr	r3, [pc, #4]	; (800674c <__errno+0x8>)
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	20000020 	.word	0x20000020

08006750 <__libc_init_array>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	4e0d      	ldr	r6, [pc, #52]	; (8006788 <__libc_init_array+0x38>)
 8006754:	4c0d      	ldr	r4, [pc, #52]	; (800678c <__libc_init_array+0x3c>)
 8006756:	1ba4      	subs	r4, r4, r6
 8006758:	10a4      	asrs	r4, r4, #2
 800675a:	2500      	movs	r5, #0
 800675c:	42a5      	cmp	r5, r4
 800675e:	d109      	bne.n	8006774 <__libc_init_array+0x24>
 8006760:	4e0b      	ldr	r6, [pc, #44]	; (8006790 <__libc_init_array+0x40>)
 8006762:	4c0c      	ldr	r4, [pc, #48]	; (8006794 <__libc_init_array+0x44>)
 8006764:	f000 fc28 	bl	8006fb8 <_init>
 8006768:	1ba4      	subs	r4, r4, r6
 800676a:	10a4      	asrs	r4, r4, #2
 800676c:	2500      	movs	r5, #0
 800676e:	42a5      	cmp	r5, r4
 8006770:	d105      	bne.n	800677e <__libc_init_array+0x2e>
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006778:	4798      	blx	r3
 800677a:	3501      	adds	r5, #1
 800677c:	e7ee      	b.n	800675c <__libc_init_array+0xc>
 800677e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006782:	4798      	blx	r3
 8006784:	3501      	adds	r5, #1
 8006786:	e7f2      	b.n	800676e <__libc_init_array+0x1e>
 8006788:	0800774c 	.word	0x0800774c
 800678c:	0800774c 	.word	0x0800774c
 8006790:	0800774c 	.word	0x0800774c
 8006794:	08007750 	.word	0x08007750

08006798 <memcpy>:
 8006798:	b510      	push	{r4, lr}
 800679a:	1e43      	subs	r3, r0, #1
 800679c:	440a      	add	r2, r1
 800679e:	4291      	cmp	r1, r2
 80067a0:	d100      	bne.n	80067a4 <memcpy+0xc>
 80067a2:	bd10      	pop	{r4, pc}
 80067a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ac:	e7f7      	b.n	800679e <memcpy+0x6>

080067ae <memset>:
 80067ae:	4402      	add	r2, r0
 80067b0:	4603      	mov	r3, r0
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d100      	bne.n	80067b8 <memset+0xa>
 80067b6:	4770      	bx	lr
 80067b8:	f803 1b01 	strb.w	r1, [r3], #1
 80067bc:	e7f9      	b.n	80067b2 <memset+0x4>
	...

080067c0 <siprintf>:
 80067c0:	b40e      	push	{r1, r2, r3}
 80067c2:	b500      	push	{lr}
 80067c4:	b09c      	sub	sp, #112	; 0x70
 80067c6:	ab1d      	add	r3, sp, #116	; 0x74
 80067c8:	9002      	str	r0, [sp, #8]
 80067ca:	9006      	str	r0, [sp, #24]
 80067cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067d0:	4809      	ldr	r0, [pc, #36]	; (80067f8 <siprintf+0x38>)
 80067d2:	9107      	str	r1, [sp, #28]
 80067d4:	9104      	str	r1, [sp, #16]
 80067d6:	4909      	ldr	r1, [pc, #36]	; (80067fc <siprintf+0x3c>)
 80067d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067dc:	9105      	str	r1, [sp, #20]
 80067de:	6800      	ldr	r0, [r0, #0]
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	a902      	add	r1, sp, #8
 80067e4:	f000 f866 	bl	80068b4 <_svfiprintf_r>
 80067e8:	9b02      	ldr	r3, [sp, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	b01c      	add	sp, #112	; 0x70
 80067f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f4:	b003      	add	sp, #12
 80067f6:	4770      	bx	lr
 80067f8:	20000020 	.word	0x20000020
 80067fc:	ffff0208 	.word	0xffff0208

08006800 <__ssputs_r>:
 8006800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006804:	688e      	ldr	r6, [r1, #8]
 8006806:	429e      	cmp	r6, r3
 8006808:	4682      	mov	sl, r0
 800680a:	460c      	mov	r4, r1
 800680c:	4690      	mov	r8, r2
 800680e:	4699      	mov	r9, r3
 8006810:	d837      	bhi.n	8006882 <__ssputs_r+0x82>
 8006812:	898a      	ldrh	r2, [r1, #12]
 8006814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006818:	d031      	beq.n	800687e <__ssputs_r+0x7e>
 800681a:	6825      	ldr	r5, [r4, #0]
 800681c:	6909      	ldr	r1, [r1, #16]
 800681e:	1a6f      	subs	r7, r5, r1
 8006820:	6965      	ldr	r5, [r4, #20]
 8006822:	2302      	movs	r3, #2
 8006824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006828:	fb95 f5f3 	sdiv	r5, r5, r3
 800682c:	f109 0301 	add.w	r3, r9, #1
 8006830:	443b      	add	r3, r7
 8006832:	429d      	cmp	r5, r3
 8006834:	bf38      	it	cc
 8006836:	461d      	movcc	r5, r3
 8006838:	0553      	lsls	r3, r2, #21
 800683a:	d530      	bpl.n	800689e <__ssputs_r+0x9e>
 800683c:	4629      	mov	r1, r5
 800683e:	f000 fb21 	bl	8006e84 <_malloc_r>
 8006842:	4606      	mov	r6, r0
 8006844:	b950      	cbnz	r0, 800685c <__ssputs_r+0x5c>
 8006846:	230c      	movs	r3, #12
 8006848:	f8ca 3000 	str.w	r3, [sl]
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006852:	81a3      	strh	r3, [r4, #12]
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685c:	463a      	mov	r2, r7
 800685e:	6921      	ldr	r1, [r4, #16]
 8006860:	f7ff ff9a 	bl	8006798 <memcpy>
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800686a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686e:	81a3      	strh	r3, [r4, #12]
 8006870:	6126      	str	r6, [r4, #16]
 8006872:	6165      	str	r5, [r4, #20]
 8006874:	443e      	add	r6, r7
 8006876:	1bed      	subs	r5, r5, r7
 8006878:	6026      	str	r6, [r4, #0]
 800687a:	60a5      	str	r5, [r4, #8]
 800687c:	464e      	mov	r6, r9
 800687e:	454e      	cmp	r6, r9
 8006880:	d900      	bls.n	8006884 <__ssputs_r+0x84>
 8006882:	464e      	mov	r6, r9
 8006884:	4632      	mov	r2, r6
 8006886:	4641      	mov	r1, r8
 8006888:	6820      	ldr	r0, [r4, #0]
 800688a:	f000 fa93 	bl	8006db4 <memmove>
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	1b9b      	subs	r3, r3, r6
 8006892:	60a3      	str	r3, [r4, #8]
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	441e      	add	r6, r3
 8006898:	6026      	str	r6, [r4, #0]
 800689a:	2000      	movs	r0, #0
 800689c:	e7dc      	b.n	8006858 <__ssputs_r+0x58>
 800689e:	462a      	mov	r2, r5
 80068a0:	f000 fb4a 	bl	8006f38 <_realloc_r>
 80068a4:	4606      	mov	r6, r0
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d1e2      	bne.n	8006870 <__ssputs_r+0x70>
 80068aa:	6921      	ldr	r1, [r4, #16]
 80068ac:	4650      	mov	r0, sl
 80068ae:	f000 fa9b 	bl	8006de8 <_free_r>
 80068b2:	e7c8      	b.n	8006846 <__ssputs_r+0x46>

080068b4 <_svfiprintf_r>:
 80068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	461d      	mov	r5, r3
 80068ba:	898b      	ldrh	r3, [r1, #12]
 80068bc:	061f      	lsls	r7, r3, #24
 80068be:	b09d      	sub	sp, #116	; 0x74
 80068c0:	4680      	mov	r8, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	4616      	mov	r6, r2
 80068c6:	d50f      	bpl.n	80068e8 <_svfiprintf_r+0x34>
 80068c8:	690b      	ldr	r3, [r1, #16]
 80068ca:	b96b      	cbnz	r3, 80068e8 <_svfiprintf_r+0x34>
 80068cc:	2140      	movs	r1, #64	; 0x40
 80068ce:	f000 fad9 	bl	8006e84 <_malloc_r>
 80068d2:	6020      	str	r0, [r4, #0]
 80068d4:	6120      	str	r0, [r4, #16]
 80068d6:	b928      	cbnz	r0, 80068e4 <_svfiprintf_r+0x30>
 80068d8:	230c      	movs	r3, #12
 80068da:	f8c8 3000 	str.w	r3, [r8]
 80068de:	f04f 30ff 	mov.w	r0, #4294967295
 80068e2:	e0c8      	b.n	8006a76 <_svfiprintf_r+0x1c2>
 80068e4:	2340      	movs	r3, #64	; 0x40
 80068e6:	6163      	str	r3, [r4, #20]
 80068e8:	2300      	movs	r3, #0
 80068ea:	9309      	str	r3, [sp, #36]	; 0x24
 80068ec:	2320      	movs	r3, #32
 80068ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068f2:	2330      	movs	r3, #48	; 0x30
 80068f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068f8:	9503      	str	r5, [sp, #12]
 80068fa:	f04f 0b01 	mov.w	fp, #1
 80068fe:	4637      	mov	r7, r6
 8006900:	463d      	mov	r5, r7
 8006902:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006906:	b10b      	cbz	r3, 800690c <_svfiprintf_r+0x58>
 8006908:	2b25      	cmp	r3, #37	; 0x25
 800690a:	d13e      	bne.n	800698a <_svfiprintf_r+0xd6>
 800690c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006910:	d00b      	beq.n	800692a <_svfiprintf_r+0x76>
 8006912:	4653      	mov	r3, sl
 8006914:	4632      	mov	r2, r6
 8006916:	4621      	mov	r1, r4
 8006918:	4640      	mov	r0, r8
 800691a:	f7ff ff71 	bl	8006800 <__ssputs_r>
 800691e:	3001      	adds	r0, #1
 8006920:	f000 80a4 	beq.w	8006a6c <_svfiprintf_r+0x1b8>
 8006924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006926:	4453      	add	r3, sl
 8006928:	9309      	str	r3, [sp, #36]	; 0x24
 800692a:	783b      	ldrb	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 809d 	beq.w	8006a6c <_svfiprintf_r+0x1b8>
 8006932:	2300      	movs	r3, #0
 8006934:	f04f 32ff 	mov.w	r2, #4294967295
 8006938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800693c:	9304      	str	r3, [sp, #16]
 800693e:	9307      	str	r3, [sp, #28]
 8006940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006944:	931a      	str	r3, [sp, #104]	; 0x68
 8006946:	462f      	mov	r7, r5
 8006948:	2205      	movs	r2, #5
 800694a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800694e:	4850      	ldr	r0, [pc, #320]	; (8006a90 <_svfiprintf_r+0x1dc>)
 8006950:	f7f9 fc66 	bl	8000220 <memchr>
 8006954:	9b04      	ldr	r3, [sp, #16]
 8006956:	b9d0      	cbnz	r0, 800698e <_svfiprintf_r+0xda>
 8006958:	06d9      	lsls	r1, r3, #27
 800695a:	bf44      	itt	mi
 800695c:	2220      	movmi	r2, #32
 800695e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006962:	071a      	lsls	r2, r3, #28
 8006964:	bf44      	itt	mi
 8006966:	222b      	movmi	r2, #43	; 0x2b
 8006968:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800696c:	782a      	ldrb	r2, [r5, #0]
 800696e:	2a2a      	cmp	r2, #42	; 0x2a
 8006970:	d015      	beq.n	800699e <_svfiprintf_r+0xea>
 8006972:	9a07      	ldr	r2, [sp, #28]
 8006974:	462f      	mov	r7, r5
 8006976:	2000      	movs	r0, #0
 8006978:	250a      	movs	r5, #10
 800697a:	4639      	mov	r1, r7
 800697c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006980:	3b30      	subs	r3, #48	; 0x30
 8006982:	2b09      	cmp	r3, #9
 8006984:	d94d      	bls.n	8006a22 <_svfiprintf_r+0x16e>
 8006986:	b1b8      	cbz	r0, 80069b8 <_svfiprintf_r+0x104>
 8006988:	e00f      	b.n	80069aa <_svfiprintf_r+0xf6>
 800698a:	462f      	mov	r7, r5
 800698c:	e7b8      	b.n	8006900 <_svfiprintf_r+0x4c>
 800698e:	4a40      	ldr	r2, [pc, #256]	; (8006a90 <_svfiprintf_r+0x1dc>)
 8006990:	1a80      	subs	r0, r0, r2
 8006992:	fa0b f000 	lsl.w	r0, fp, r0
 8006996:	4318      	orrs	r0, r3
 8006998:	9004      	str	r0, [sp, #16]
 800699a:	463d      	mov	r5, r7
 800699c:	e7d3      	b.n	8006946 <_svfiprintf_r+0x92>
 800699e:	9a03      	ldr	r2, [sp, #12]
 80069a0:	1d11      	adds	r1, r2, #4
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	9103      	str	r1, [sp, #12]
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	db01      	blt.n	80069ae <_svfiprintf_r+0xfa>
 80069aa:	9207      	str	r2, [sp, #28]
 80069ac:	e004      	b.n	80069b8 <_svfiprintf_r+0x104>
 80069ae:	4252      	negs	r2, r2
 80069b0:	f043 0302 	orr.w	r3, r3, #2
 80069b4:	9207      	str	r2, [sp, #28]
 80069b6:	9304      	str	r3, [sp, #16]
 80069b8:	783b      	ldrb	r3, [r7, #0]
 80069ba:	2b2e      	cmp	r3, #46	; 0x2e
 80069bc:	d10c      	bne.n	80069d8 <_svfiprintf_r+0x124>
 80069be:	787b      	ldrb	r3, [r7, #1]
 80069c0:	2b2a      	cmp	r3, #42	; 0x2a
 80069c2:	d133      	bne.n	8006a2c <_svfiprintf_r+0x178>
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	1d1a      	adds	r2, r3, #4
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	9203      	str	r2, [sp, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bfb8      	it	lt
 80069d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80069d4:	3702      	adds	r7, #2
 80069d6:	9305      	str	r3, [sp, #20]
 80069d8:	4d2e      	ldr	r5, [pc, #184]	; (8006a94 <_svfiprintf_r+0x1e0>)
 80069da:	7839      	ldrb	r1, [r7, #0]
 80069dc:	2203      	movs	r2, #3
 80069de:	4628      	mov	r0, r5
 80069e0:	f7f9 fc1e 	bl	8000220 <memchr>
 80069e4:	b138      	cbz	r0, 80069f6 <_svfiprintf_r+0x142>
 80069e6:	2340      	movs	r3, #64	; 0x40
 80069e8:	1b40      	subs	r0, r0, r5
 80069ea:	fa03 f000 	lsl.w	r0, r3, r0
 80069ee:	9b04      	ldr	r3, [sp, #16]
 80069f0:	4303      	orrs	r3, r0
 80069f2:	3701      	adds	r7, #1
 80069f4:	9304      	str	r3, [sp, #16]
 80069f6:	7839      	ldrb	r1, [r7, #0]
 80069f8:	4827      	ldr	r0, [pc, #156]	; (8006a98 <_svfiprintf_r+0x1e4>)
 80069fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069fe:	2206      	movs	r2, #6
 8006a00:	1c7e      	adds	r6, r7, #1
 8006a02:	f7f9 fc0d 	bl	8000220 <memchr>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d038      	beq.n	8006a7c <_svfiprintf_r+0x1c8>
 8006a0a:	4b24      	ldr	r3, [pc, #144]	; (8006a9c <_svfiprintf_r+0x1e8>)
 8006a0c:	bb13      	cbnz	r3, 8006a54 <_svfiprintf_r+0x1a0>
 8006a0e:	9b03      	ldr	r3, [sp, #12]
 8006a10:	3307      	adds	r3, #7
 8006a12:	f023 0307 	bic.w	r3, r3, #7
 8006a16:	3308      	adds	r3, #8
 8006a18:	9303      	str	r3, [sp, #12]
 8006a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1c:	444b      	add	r3, r9
 8006a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a20:	e76d      	b.n	80068fe <_svfiprintf_r+0x4a>
 8006a22:	fb05 3202 	mla	r2, r5, r2, r3
 8006a26:	2001      	movs	r0, #1
 8006a28:	460f      	mov	r7, r1
 8006a2a:	e7a6      	b.n	800697a <_svfiprintf_r+0xc6>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	3701      	adds	r7, #1
 8006a30:	9305      	str	r3, [sp, #20]
 8006a32:	4619      	mov	r1, r3
 8006a34:	250a      	movs	r5, #10
 8006a36:	4638      	mov	r0, r7
 8006a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a3c:	3a30      	subs	r2, #48	; 0x30
 8006a3e:	2a09      	cmp	r2, #9
 8006a40:	d903      	bls.n	8006a4a <_svfiprintf_r+0x196>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0c8      	beq.n	80069d8 <_svfiprintf_r+0x124>
 8006a46:	9105      	str	r1, [sp, #20]
 8006a48:	e7c6      	b.n	80069d8 <_svfiprintf_r+0x124>
 8006a4a:	fb05 2101 	mla	r1, r5, r1, r2
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4607      	mov	r7, r0
 8006a52:	e7f0      	b.n	8006a36 <_svfiprintf_r+0x182>
 8006a54:	ab03      	add	r3, sp, #12
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	4622      	mov	r2, r4
 8006a5a:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <_svfiprintf_r+0x1ec>)
 8006a5c:	a904      	add	r1, sp, #16
 8006a5e:	4640      	mov	r0, r8
 8006a60:	f3af 8000 	nop.w
 8006a64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006a68:	4681      	mov	r9, r0
 8006a6a:	d1d6      	bne.n	8006a1a <_svfiprintf_r+0x166>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	065b      	lsls	r3, r3, #25
 8006a70:	f53f af35 	bmi.w	80068de <_svfiprintf_r+0x2a>
 8006a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a76:	b01d      	add	sp, #116	; 0x74
 8006a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7c:	ab03      	add	r3, sp, #12
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	4622      	mov	r2, r4
 8006a82:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <_svfiprintf_r+0x1ec>)
 8006a84:	a904      	add	r1, sp, #16
 8006a86:	4640      	mov	r0, r8
 8006a88:	f000 f882 	bl	8006b90 <_printf_i>
 8006a8c:	e7ea      	b.n	8006a64 <_svfiprintf_r+0x1b0>
 8006a8e:	bf00      	nop
 8006a90:	08007710 	.word	0x08007710
 8006a94:	08007716 	.word	0x08007716
 8006a98:	0800771a 	.word	0x0800771a
 8006a9c:	00000000 	.word	0x00000000
 8006aa0:	08006801 	.word	0x08006801

08006aa4 <_printf_common>:
 8006aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa8:	4691      	mov	r9, r2
 8006aaa:	461f      	mov	r7, r3
 8006aac:	688a      	ldr	r2, [r1, #8]
 8006aae:	690b      	ldr	r3, [r1, #16]
 8006ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	bfb8      	it	lt
 8006ab8:	4613      	movlt	r3, r2
 8006aba:	f8c9 3000 	str.w	r3, [r9]
 8006abe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	b112      	cbz	r2, 8006ace <_printf_common+0x2a>
 8006ac8:	3301      	adds	r3, #1
 8006aca:	f8c9 3000 	str.w	r3, [r9]
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	0699      	lsls	r1, r3, #26
 8006ad2:	bf42      	ittt	mi
 8006ad4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ad8:	3302      	addmi	r3, #2
 8006ada:	f8c9 3000 	strmi.w	r3, [r9]
 8006ade:	6825      	ldr	r5, [r4, #0]
 8006ae0:	f015 0506 	ands.w	r5, r5, #6
 8006ae4:	d107      	bne.n	8006af6 <_printf_common+0x52>
 8006ae6:	f104 0a19 	add.w	sl, r4, #25
 8006aea:	68e3      	ldr	r3, [r4, #12]
 8006aec:	f8d9 2000 	ldr.w	r2, [r9]
 8006af0:	1a9b      	subs	r3, r3, r2
 8006af2:	42ab      	cmp	r3, r5
 8006af4:	dc28      	bgt.n	8006b48 <_printf_common+0xa4>
 8006af6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006afa:	6822      	ldr	r2, [r4, #0]
 8006afc:	3300      	adds	r3, #0
 8006afe:	bf18      	it	ne
 8006b00:	2301      	movne	r3, #1
 8006b02:	0692      	lsls	r2, r2, #26
 8006b04:	d42d      	bmi.n	8006b62 <_printf_common+0xbe>
 8006b06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b0a:	4639      	mov	r1, r7
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	47c0      	blx	r8
 8006b10:	3001      	adds	r0, #1
 8006b12:	d020      	beq.n	8006b56 <_printf_common+0xb2>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	68e5      	ldr	r5, [r4, #12]
 8006b18:	f8d9 2000 	ldr.w	r2, [r9]
 8006b1c:	f003 0306 	and.w	r3, r3, #6
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	bf08      	it	eq
 8006b24:	1aad      	subeq	r5, r5, r2
 8006b26:	68a3      	ldr	r3, [r4, #8]
 8006b28:	6922      	ldr	r2, [r4, #16]
 8006b2a:	bf0c      	ite	eq
 8006b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b30:	2500      	movne	r5, #0
 8006b32:	4293      	cmp	r3, r2
 8006b34:	bfc4      	itt	gt
 8006b36:	1a9b      	subgt	r3, r3, r2
 8006b38:	18ed      	addgt	r5, r5, r3
 8006b3a:	f04f 0900 	mov.w	r9, #0
 8006b3e:	341a      	adds	r4, #26
 8006b40:	454d      	cmp	r5, r9
 8006b42:	d11a      	bne.n	8006b7a <_printf_common+0xd6>
 8006b44:	2000      	movs	r0, #0
 8006b46:	e008      	b.n	8006b5a <_printf_common+0xb6>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	4652      	mov	r2, sl
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	4630      	mov	r0, r6
 8006b50:	47c0      	blx	r8
 8006b52:	3001      	adds	r0, #1
 8006b54:	d103      	bne.n	8006b5e <_printf_common+0xba>
 8006b56:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5e:	3501      	adds	r5, #1
 8006b60:	e7c3      	b.n	8006aea <_printf_common+0x46>
 8006b62:	18e1      	adds	r1, r4, r3
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	2030      	movs	r0, #48	; 0x30
 8006b68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b6c:	4422      	add	r2, r4
 8006b6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b76:	3302      	adds	r3, #2
 8006b78:	e7c5      	b.n	8006b06 <_printf_common+0x62>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	4639      	mov	r1, r7
 8006b80:	4630      	mov	r0, r6
 8006b82:	47c0      	blx	r8
 8006b84:	3001      	adds	r0, #1
 8006b86:	d0e6      	beq.n	8006b56 <_printf_common+0xb2>
 8006b88:	f109 0901 	add.w	r9, r9, #1
 8006b8c:	e7d8      	b.n	8006b40 <_printf_common+0x9c>
	...

08006b90 <_printf_i>:
 8006b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b98:	460c      	mov	r4, r1
 8006b9a:	7e09      	ldrb	r1, [r1, #24]
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	296e      	cmp	r1, #110	; 0x6e
 8006ba0:	4617      	mov	r7, r2
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	4698      	mov	r8, r3
 8006ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ba8:	f000 80b3 	beq.w	8006d12 <_printf_i+0x182>
 8006bac:	d822      	bhi.n	8006bf4 <_printf_i+0x64>
 8006bae:	2963      	cmp	r1, #99	; 0x63
 8006bb0:	d036      	beq.n	8006c20 <_printf_i+0x90>
 8006bb2:	d80a      	bhi.n	8006bca <_printf_i+0x3a>
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	f000 80b9 	beq.w	8006d2c <_printf_i+0x19c>
 8006bba:	2958      	cmp	r1, #88	; 0x58
 8006bbc:	f000 8083 	beq.w	8006cc6 <_printf_i+0x136>
 8006bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006bc8:	e032      	b.n	8006c30 <_printf_i+0xa0>
 8006bca:	2964      	cmp	r1, #100	; 0x64
 8006bcc:	d001      	beq.n	8006bd2 <_printf_i+0x42>
 8006bce:	2969      	cmp	r1, #105	; 0x69
 8006bd0:	d1f6      	bne.n	8006bc0 <_printf_i+0x30>
 8006bd2:	6820      	ldr	r0, [r4, #0]
 8006bd4:	6813      	ldr	r3, [r2, #0]
 8006bd6:	0605      	lsls	r5, r0, #24
 8006bd8:	f103 0104 	add.w	r1, r3, #4
 8006bdc:	d52a      	bpl.n	8006c34 <_printf_i+0xa4>
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6011      	str	r1, [r2, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	da03      	bge.n	8006bee <_printf_i+0x5e>
 8006be6:	222d      	movs	r2, #45	; 0x2d
 8006be8:	425b      	negs	r3, r3
 8006bea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006bee:	486f      	ldr	r0, [pc, #444]	; (8006dac <_printf_i+0x21c>)
 8006bf0:	220a      	movs	r2, #10
 8006bf2:	e039      	b.n	8006c68 <_printf_i+0xd8>
 8006bf4:	2973      	cmp	r1, #115	; 0x73
 8006bf6:	f000 809d 	beq.w	8006d34 <_printf_i+0x1a4>
 8006bfa:	d808      	bhi.n	8006c0e <_printf_i+0x7e>
 8006bfc:	296f      	cmp	r1, #111	; 0x6f
 8006bfe:	d020      	beq.n	8006c42 <_printf_i+0xb2>
 8006c00:	2970      	cmp	r1, #112	; 0x70
 8006c02:	d1dd      	bne.n	8006bc0 <_printf_i+0x30>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	f043 0320 	orr.w	r3, r3, #32
 8006c0a:	6023      	str	r3, [r4, #0]
 8006c0c:	e003      	b.n	8006c16 <_printf_i+0x86>
 8006c0e:	2975      	cmp	r1, #117	; 0x75
 8006c10:	d017      	beq.n	8006c42 <_printf_i+0xb2>
 8006c12:	2978      	cmp	r1, #120	; 0x78
 8006c14:	d1d4      	bne.n	8006bc0 <_printf_i+0x30>
 8006c16:	2378      	movs	r3, #120	; 0x78
 8006c18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c1c:	4864      	ldr	r0, [pc, #400]	; (8006db0 <_printf_i+0x220>)
 8006c1e:	e055      	b.n	8006ccc <_printf_i+0x13c>
 8006c20:	6813      	ldr	r3, [r2, #0]
 8006c22:	1d19      	adds	r1, r3, #4
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6011      	str	r1, [r2, #0]
 8006c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c30:	2301      	movs	r3, #1
 8006c32:	e08c      	b.n	8006d4e <_printf_i+0x1be>
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6011      	str	r1, [r2, #0]
 8006c38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c3c:	bf18      	it	ne
 8006c3e:	b21b      	sxthne	r3, r3
 8006c40:	e7cf      	b.n	8006be2 <_printf_i+0x52>
 8006c42:	6813      	ldr	r3, [r2, #0]
 8006c44:	6825      	ldr	r5, [r4, #0]
 8006c46:	1d18      	adds	r0, r3, #4
 8006c48:	6010      	str	r0, [r2, #0]
 8006c4a:	0628      	lsls	r0, r5, #24
 8006c4c:	d501      	bpl.n	8006c52 <_printf_i+0xc2>
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	e002      	b.n	8006c58 <_printf_i+0xc8>
 8006c52:	0668      	lsls	r0, r5, #25
 8006c54:	d5fb      	bpl.n	8006c4e <_printf_i+0xbe>
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	4854      	ldr	r0, [pc, #336]	; (8006dac <_printf_i+0x21c>)
 8006c5a:	296f      	cmp	r1, #111	; 0x6f
 8006c5c:	bf14      	ite	ne
 8006c5e:	220a      	movne	r2, #10
 8006c60:	2208      	moveq	r2, #8
 8006c62:	2100      	movs	r1, #0
 8006c64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c68:	6865      	ldr	r5, [r4, #4]
 8006c6a:	60a5      	str	r5, [r4, #8]
 8006c6c:	2d00      	cmp	r5, #0
 8006c6e:	f2c0 8095 	blt.w	8006d9c <_printf_i+0x20c>
 8006c72:	6821      	ldr	r1, [r4, #0]
 8006c74:	f021 0104 	bic.w	r1, r1, #4
 8006c78:	6021      	str	r1, [r4, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d13d      	bne.n	8006cfa <_printf_i+0x16a>
 8006c7e:	2d00      	cmp	r5, #0
 8006c80:	f040 808e 	bne.w	8006da0 <_printf_i+0x210>
 8006c84:	4665      	mov	r5, ip
 8006c86:	2a08      	cmp	r2, #8
 8006c88:	d10b      	bne.n	8006ca2 <_printf_i+0x112>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	07db      	lsls	r3, r3, #31
 8006c8e:	d508      	bpl.n	8006ca2 <_printf_i+0x112>
 8006c90:	6923      	ldr	r3, [r4, #16]
 8006c92:	6862      	ldr	r2, [r4, #4]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	bfde      	ittt	le
 8006c98:	2330      	movle	r3, #48	; 0x30
 8006c9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ca2:	ebac 0305 	sub.w	r3, ip, r5
 8006ca6:	6123      	str	r3, [r4, #16]
 8006ca8:	f8cd 8000 	str.w	r8, [sp]
 8006cac:	463b      	mov	r3, r7
 8006cae:	aa03      	add	r2, sp, #12
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f7ff fef6 	bl	8006aa4 <_printf_common>
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d14d      	bne.n	8006d58 <_printf_i+0x1c8>
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	b005      	add	sp, #20
 8006cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cc6:	4839      	ldr	r0, [pc, #228]	; (8006dac <_printf_i+0x21c>)
 8006cc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ccc:	6813      	ldr	r3, [r2, #0]
 8006cce:	6821      	ldr	r1, [r4, #0]
 8006cd0:	1d1d      	adds	r5, r3, #4
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6015      	str	r5, [r2, #0]
 8006cd6:	060a      	lsls	r2, r1, #24
 8006cd8:	d50b      	bpl.n	8006cf2 <_printf_i+0x162>
 8006cda:	07ca      	lsls	r2, r1, #31
 8006cdc:	bf44      	itt	mi
 8006cde:	f041 0120 	orrmi.w	r1, r1, #32
 8006ce2:	6021      	strmi	r1, [r4, #0]
 8006ce4:	b91b      	cbnz	r3, 8006cee <_printf_i+0x15e>
 8006ce6:	6822      	ldr	r2, [r4, #0]
 8006ce8:	f022 0220 	bic.w	r2, r2, #32
 8006cec:	6022      	str	r2, [r4, #0]
 8006cee:	2210      	movs	r2, #16
 8006cf0:	e7b7      	b.n	8006c62 <_printf_i+0xd2>
 8006cf2:	064d      	lsls	r5, r1, #25
 8006cf4:	bf48      	it	mi
 8006cf6:	b29b      	uxthmi	r3, r3
 8006cf8:	e7ef      	b.n	8006cda <_printf_i+0x14a>
 8006cfa:	4665      	mov	r5, ip
 8006cfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d00:	fb02 3311 	mls	r3, r2, r1, r3
 8006d04:	5cc3      	ldrb	r3, [r0, r3]
 8006d06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	d1f5      	bne.n	8006cfc <_printf_i+0x16c>
 8006d10:	e7b9      	b.n	8006c86 <_printf_i+0xf6>
 8006d12:	6813      	ldr	r3, [r2, #0]
 8006d14:	6825      	ldr	r5, [r4, #0]
 8006d16:	6961      	ldr	r1, [r4, #20]
 8006d18:	1d18      	adds	r0, r3, #4
 8006d1a:	6010      	str	r0, [r2, #0]
 8006d1c:	0628      	lsls	r0, r5, #24
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	d501      	bpl.n	8006d26 <_printf_i+0x196>
 8006d22:	6019      	str	r1, [r3, #0]
 8006d24:	e002      	b.n	8006d2c <_printf_i+0x19c>
 8006d26:	066a      	lsls	r2, r5, #25
 8006d28:	d5fb      	bpl.n	8006d22 <_printf_i+0x192>
 8006d2a:	8019      	strh	r1, [r3, #0]
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	6123      	str	r3, [r4, #16]
 8006d30:	4665      	mov	r5, ip
 8006d32:	e7b9      	b.n	8006ca8 <_printf_i+0x118>
 8006d34:	6813      	ldr	r3, [r2, #0]
 8006d36:	1d19      	adds	r1, r3, #4
 8006d38:	6011      	str	r1, [r2, #0]
 8006d3a:	681d      	ldr	r5, [r3, #0]
 8006d3c:	6862      	ldr	r2, [r4, #4]
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4628      	mov	r0, r5
 8006d42:	f7f9 fa6d 	bl	8000220 <memchr>
 8006d46:	b108      	cbz	r0, 8006d4c <_printf_i+0x1bc>
 8006d48:	1b40      	subs	r0, r0, r5
 8006d4a:	6060      	str	r0, [r4, #4]
 8006d4c:	6863      	ldr	r3, [r4, #4]
 8006d4e:	6123      	str	r3, [r4, #16]
 8006d50:	2300      	movs	r3, #0
 8006d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d56:	e7a7      	b.n	8006ca8 <_printf_i+0x118>
 8006d58:	6923      	ldr	r3, [r4, #16]
 8006d5a:	462a      	mov	r2, r5
 8006d5c:	4639      	mov	r1, r7
 8006d5e:	4630      	mov	r0, r6
 8006d60:	47c0      	blx	r8
 8006d62:	3001      	adds	r0, #1
 8006d64:	d0aa      	beq.n	8006cbc <_printf_i+0x12c>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	079b      	lsls	r3, r3, #30
 8006d6a:	d413      	bmi.n	8006d94 <_printf_i+0x204>
 8006d6c:	68e0      	ldr	r0, [r4, #12]
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	4298      	cmp	r0, r3
 8006d72:	bfb8      	it	lt
 8006d74:	4618      	movlt	r0, r3
 8006d76:	e7a3      	b.n	8006cc0 <_printf_i+0x130>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	464a      	mov	r2, r9
 8006d7c:	4639      	mov	r1, r7
 8006d7e:	4630      	mov	r0, r6
 8006d80:	47c0      	blx	r8
 8006d82:	3001      	adds	r0, #1
 8006d84:	d09a      	beq.n	8006cbc <_printf_i+0x12c>
 8006d86:	3501      	adds	r5, #1
 8006d88:	68e3      	ldr	r3, [r4, #12]
 8006d8a:	9a03      	ldr	r2, [sp, #12]
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	42ab      	cmp	r3, r5
 8006d90:	dcf2      	bgt.n	8006d78 <_printf_i+0x1e8>
 8006d92:	e7eb      	b.n	8006d6c <_printf_i+0x1dc>
 8006d94:	2500      	movs	r5, #0
 8006d96:	f104 0919 	add.w	r9, r4, #25
 8006d9a:	e7f5      	b.n	8006d88 <_printf_i+0x1f8>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1ac      	bne.n	8006cfa <_printf_i+0x16a>
 8006da0:	7803      	ldrb	r3, [r0, #0]
 8006da2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006da6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006daa:	e76c      	b.n	8006c86 <_printf_i+0xf6>
 8006dac:	08007721 	.word	0x08007721
 8006db0:	08007732 	.word	0x08007732

08006db4 <memmove>:
 8006db4:	4288      	cmp	r0, r1
 8006db6:	b510      	push	{r4, lr}
 8006db8:	eb01 0302 	add.w	r3, r1, r2
 8006dbc:	d807      	bhi.n	8006dce <memmove+0x1a>
 8006dbe:	1e42      	subs	r2, r0, #1
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	d00a      	beq.n	8006dda <memmove+0x26>
 8006dc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dc8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006dcc:	e7f8      	b.n	8006dc0 <memmove+0xc>
 8006dce:	4283      	cmp	r3, r0
 8006dd0:	d9f5      	bls.n	8006dbe <memmove+0xa>
 8006dd2:	1881      	adds	r1, r0, r2
 8006dd4:	1ad2      	subs	r2, r2, r3
 8006dd6:	42d3      	cmn	r3, r2
 8006dd8:	d100      	bne.n	8006ddc <memmove+0x28>
 8006dda:	bd10      	pop	{r4, pc}
 8006ddc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006de0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006de4:	e7f7      	b.n	8006dd6 <memmove+0x22>
	...

08006de8 <_free_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	4605      	mov	r5, r0
 8006dec:	2900      	cmp	r1, #0
 8006dee:	d045      	beq.n	8006e7c <_free_r+0x94>
 8006df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006df4:	1f0c      	subs	r4, r1, #4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	bfb8      	it	lt
 8006dfa:	18e4      	addlt	r4, r4, r3
 8006dfc:	f000 f8d2 	bl	8006fa4 <__malloc_lock>
 8006e00:	4a1f      	ldr	r2, [pc, #124]	; (8006e80 <_free_r+0x98>)
 8006e02:	6813      	ldr	r3, [r2, #0]
 8006e04:	4610      	mov	r0, r2
 8006e06:	b933      	cbnz	r3, 8006e16 <_free_r+0x2e>
 8006e08:	6063      	str	r3, [r4, #4]
 8006e0a:	6014      	str	r4, [r2, #0]
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e12:	f000 b8c8 	b.w	8006fa6 <__malloc_unlock>
 8006e16:	42a3      	cmp	r3, r4
 8006e18:	d90c      	bls.n	8006e34 <_free_r+0x4c>
 8006e1a:	6821      	ldr	r1, [r4, #0]
 8006e1c:	1862      	adds	r2, r4, r1
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	bf04      	itt	eq
 8006e22:	681a      	ldreq	r2, [r3, #0]
 8006e24:	685b      	ldreq	r3, [r3, #4]
 8006e26:	6063      	str	r3, [r4, #4]
 8006e28:	bf04      	itt	eq
 8006e2a:	1852      	addeq	r2, r2, r1
 8006e2c:	6022      	streq	r2, [r4, #0]
 8006e2e:	6004      	str	r4, [r0, #0]
 8006e30:	e7ec      	b.n	8006e0c <_free_r+0x24>
 8006e32:	4613      	mov	r3, r2
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	b10a      	cbz	r2, 8006e3c <_free_r+0x54>
 8006e38:	42a2      	cmp	r2, r4
 8006e3a:	d9fa      	bls.n	8006e32 <_free_r+0x4a>
 8006e3c:	6819      	ldr	r1, [r3, #0]
 8006e3e:	1858      	adds	r0, r3, r1
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d10b      	bne.n	8006e5c <_free_r+0x74>
 8006e44:	6820      	ldr	r0, [r4, #0]
 8006e46:	4401      	add	r1, r0
 8006e48:	1858      	adds	r0, r3, r1
 8006e4a:	4282      	cmp	r2, r0
 8006e4c:	6019      	str	r1, [r3, #0]
 8006e4e:	d1dd      	bne.n	8006e0c <_free_r+0x24>
 8006e50:	6810      	ldr	r0, [r2, #0]
 8006e52:	6852      	ldr	r2, [r2, #4]
 8006e54:	605a      	str	r2, [r3, #4]
 8006e56:	4401      	add	r1, r0
 8006e58:	6019      	str	r1, [r3, #0]
 8006e5a:	e7d7      	b.n	8006e0c <_free_r+0x24>
 8006e5c:	d902      	bls.n	8006e64 <_free_r+0x7c>
 8006e5e:	230c      	movs	r3, #12
 8006e60:	602b      	str	r3, [r5, #0]
 8006e62:	e7d3      	b.n	8006e0c <_free_r+0x24>
 8006e64:	6820      	ldr	r0, [r4, #0]
 8006e66:	1821      	adds	r1, r4, r0
 8006e68:	428a      	cmp	r2, r1
 8006e6a:	bf04      	itt	eq
 8006e6c:	6811      	ldreq	r1, [r2, #0]
 8006e6e:	6852      	ldreq	r2, [r2, #4]
 8006e70:	6062      	str	r2, [r4, #4]
 8006e72:	bf04      	itt	eq
 8006e74:	1809      	addeq	r1, r1, r0
 8006e76:	6021      	streq	r1, [r4, #0]
 8006e78:	605c      	str	r4, [r3, #4]
 8006e7a:	e7c7      	b.n	8006e0c <_free_r+0x24>
 8006e7c:	bd38      	pop	{r3, r4, r5, pc}
 8006e7e:	bf00      	nop
 8006e80:	200000cc 	.word	0x200000cc

08006e84 <_malloc_r>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	1ccd      	adds	r5, r1, #3
 8006e88:	f025 0503 	bic.w	r5, r5, #3
 8006e8c:	3508      	adds	r5, #8
 8006e8e:	2d0c      	cmp	r5, #12
 8006e90:	bf38      	it	cc
 8006e92:	250c      	movcc	r5, #12
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	4606      	mov	r6, r0
 8006e98:	db01      	blt.n	8006e9e <_malloc_r+0x1a>
 8006e9a:	42a9      	cmp	r1, r5
 8006e9c:	d903      	bls.n	8006ea6 <_malloc_r+0x22>
 8006e9e:	230c      	movs	r3, #12
 8006ea0:	6033      	str	r3, [r6, #0]
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	bd70      	pop	{r4, r5, r6, pc}
 8006ea6:	f000 f87d 	bl	8006fa4 <__malloc_lock>
 8006eaa:	4a21      	ldr	r2, [pc, #132]	; (8006f30 <_malloc_r+0xac>)
 8006eac:	6814      	ldr	r4, [r2, #0]
 8006eae:	4621      	mov	r1, r4
 8006eb0:	b991      	cbnz	r1, 8006ed8 <_malloc_r+0x54>
 8006eb2:	4c20      	ldr	r4, [pc, #128]	; (8006f34 <_malloc_r+0xb0>)
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	b91b      	cbnz	r3, 8006ec0 <_malloc_r+0x3c>
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f000 f863 	bl	8006f84 <_sbrk_r>
 8006ebe:	6020      	str	r0, [r4, #0]
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f000 f85e 	bl	8006f84 <_sbrk_r>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d124      	bne.n	8006f16 <_malloc_r+0x92>
 8006ecc:	230c      	movs	r3, #12
 8006ece:	6033      	str	r3, [r6, #0]
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f000 f868 	bl	8006fa6 <__malloc_unlock>
 8006ed6:	e7e4      	b.n	8006ea2 <_malloc_r+0x1e>
 8006ed8:	680b      	ldr	r3, [r1, #0]
 8006eda:	1b5b      	subs	r3, r3, r5
 8006edc:	d418      	bmi.n	8006f10 <_malloc_r+0x8c>
 8006ede:	2b0b      	cmp	r3, #11
 8006ee0:	d90f      	bls.n	8006f02 <_malloc_r+0x7e>
 8006ee2:	600b      	str	r3, [r1, #0]
 8006ee4:	50cd      	str	r5, [r1, r3]
 8006ee6:	18cc      	adds	r4, r1, r3
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f000 f85c 	bl	8006fa6 <__malloc_unlock>
 8006eee:	f104 000b 	add.w	r0, r4, #11
 8006ef2:	1d23      	adds	r3, r4, #4
 8006ef4:	f020 0007 	bic.w	r0, r0, #7
 8006ef8:	1ac3      	subs	r3, r0, r3
 8006efa:	d0d3      	beq.n	8006ea4 <_malloc_r+0x20>
 8006efc:	425a      	negs	r2, r3
 8006efe:	50e2      	str	r2, [r4, r3]
 8006f00:	e7d0      	b.n	8006ea4 <_malloc_r+0x20>
 8006f02:	428c      	cmp	r4, r1
 8006f04:	684b      	ldr	r3, [r1, #4]
 8006f06:	bf16      	itet	ne
 8006f08:	6063      	strne	r3, [r4, #4]
 8006f0a:	6013      	streq	r3, [r2, #0]
 8006f0c:	460c      	movne	r4, r1
 8006f0e:	e7eb      	b.n	8006ee8 <_malloc_r+0x64>
 8006f10:	460c      	mov	r4, r1
 8006f12:	6849      	ldr	r1, [r1, #4]
 8006f14:	e7cc      	b.n	8006eb0 <_malloc_r+0x2c>
 8006f16:	1cc4      	adds	r4, r0, #3
 8006f18:	f024 0403 	bic.w	r4, r4, #3
 8006f1c:	42a0      	cmp	r0, r4
 8006f1e:	d005      	beq.n	8006f2c <_malloc_r+0xa8>
 8006f20:	1a21      	subs	r1, r4, r0
 8006f22:	4630      	mov	r0, r6
 8006f24:	f000 f82e 	bl	8006f84 <_sbrk_r>
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d0cf      	beq.n	8006ecc <_malloc_r+0x48>
 8006f2c:	6025      	str	r5, [r4, #0]
 8006f2e:	e7db      	b.n	8006ee8 <_malloc_r+0x64>
 8006f30:	200000cc 	.word	0x200000cc
 8006f34:	200000d0 	.word	0x200000d0

08006f38 <_realloc_r>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	460e      	mov	r6, r1
 8006f40:	b921      	cbnz	r1, 8006f4c <_realloc_r+0x14>
 8006f42:	4611      	mov	r1, r2
 8006f44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f48:	f7ff bf9c 	b.w	8006e84 <_malloc_r>
 8006f4c:	b922      	cbnz	r2, 8006f58 <_realloc_r+0x20>
 8006f4e:	f7ff ff4b 	bl	8006de8 <_free_r>
 8006f52:	4625      	mov	r5, r4
 8006f54:	4628      	mov	r0, r5
 8006f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f58:	f000 f826 	bl	8006fa8 <_malloc_usable_size_r>
 8006f5c:	42a0      	cmp	r0, r4
 8006f5e:	d20f      	bcs.n	8006f80 <_realloc_r+0x48>
 8006f60:	4621      	mov	r1, r4
 8006f62:	4638      	mov	r0, r7
 8006f64:	f7ff ff8e 	bl	8006e84 <_malloc_r>
 8006f68:	4605      	mov	r5, r0
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d0f2      	beq.n	8006f54 <_realloc_r+0x1c>
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4622      	mov	r2, r4
 8006f72:	f7ff fc11 	bl	8006798 <memcpy>
 8006f76:	4631      	mov	r1, r6
 8006f78:	4638      	mov	r0, r7
 8006f7a:	f7ff ff35 	bl	8006de8 <_free_r>
 8006f7e:	e7e9      	b.n	8006f54 <_realloc_r+0x1c>
 8006f80:	4635      	mov	r5, r6
 8006f82:	e7e7      	b.n	8006f54 <_realloc_r+0x1c>

08006f84 <_sbrk_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4c06      	ldr	r4, [pc, #24]	; (8006fa0 <_sbrk_r+0x1c>)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	f7fc fb24 	bl	80035dc <_sbrk>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_sbrk_r+0x1a>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_sbrk_r+0x1a>
 8006f9c:	602b      	str	r3, [r5, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	20002e18 	.word	0x20002e18

08006fa4 <__malloc_lock>:
 8006fa4:	4770      	bx	lr

08006fa6 <__malloc_unlock>:
 8006fa6:	4770      	bx	lr

08006fa8 <_malloc_usable_size_r>:
 8006fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fac:	1f18      	subs	r0, r3, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bfbc      	itt	lt
 8006fb2:	580b      	ldrlt	r3, [r1, r0]
 8006fb4:	18c0      	addlt	r0, r0, r3
 8006fb6:	4770      	bx	lr

08006fb8 <_init>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	bf00      	nop
 8006fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	4770      	bx	lr

08006fc4 <_fini>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr
