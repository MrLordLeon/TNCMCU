
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005acc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08005ca0  08005ca0  00015ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed8  08005ed8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee0  08005ee0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001190  20000074  08005f5c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001204  08005f5c  00021204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e811  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002091  00000000  00000000  0002e8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  00030948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c80  00000000  00000000  000316d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022a02  00000000  00000000  00032350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa5e  00000000  00000000  00054d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1a25  00000000  00000000  0005f7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001311d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  00131250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c84 	.word	0x08005c84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005c84 	.word	0x08005c84

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b972 	b.w	8000ef8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	4688      	mov	r8, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14b      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	d967      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0720 	rsb	r7, r2, #32
 8000c4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c52:	4095      	lsls	r5, r2
 8000c54:	ea47 0803 	orr.w	r8, r7, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c64:	fa1f fc85 	uxth.w	ip, r5
 8000c68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c70:	fb07 f10c 	mul.w	r1, r7, ip
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18eb      	adds	r3, r5, r3
 8000c7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7e:	f080 811b 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8118 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000c88:	3f02      	subs	r7, #2
 8000c8a:	442b      	add	r3, r5
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca0:	45a4      	cmp	ip, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	192c      	adds	r4, r5, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	442c      	add	r4, r5
 8000cb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cbc:	eba4 040c 	sub.w	r4, r4, ip
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	b11e      	cbz	r6, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xbe>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80eb 	beq.w	8000eb2 <__udivmoddi4+0x286>
 8000cdc:	2700      	movs	r7, #0
 8000cde:	e9c6 0100 	strd	r0, r1, [r6]
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f783 	clz	r7, r3
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d147      	bne.n	8000d82 <__udivmoddi4+0x156>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd0>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80fa 	bhi.w	8000ef0 <__udivmoddi4+0x2c4>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	4698      	mov	r8, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xe8>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 808f 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1e:	1b49      	subs	r1, r1, r5
 8000d20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d24:	fa1f f885 	uxth.w	r8, r5
 8000d28:	2701      	movs	r7, #1
 8000d2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb08 f10c 	mul.w	r1, r8, ip
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d40:	18eb      	adds	r3, r5, r3
 8000d42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	f200 80cd 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d4e:	4684      	mov	ip, r0
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	b2a3      	uxth	r3, r4
 8000d54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d60:	fb08 f800 	mul.w	r8, r8, r0
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x14c>
 8000d68:	192c      	adds	r4, r5, r4
 8000d6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x14a>
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	f200 80b6 	bhi.w	8000ee2 <__udivmoddi4+0x2b6>
 8000d76:	4618      	mov	r0, r3
 8000d78:	eba4 0408 	sub.w	r4, r4, r8
 8000d7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d80:	e79f      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d82:	f1c7 0c20 	rsb	ip, r7, #32
 8000d86:	40bb      	lsls	r3, r7
 8000d88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d90:	fa01 f407 	lsl.w	r4, r1, r7
 8000d94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000da0:	4325      	orrs	r5, r4
 8000da2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da6:	0c2c      	lsrs	r4, r5, #16
 8000da8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dac:	fa1f fa8e 	uxth.w	sl, lr
 8000db0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db4:	fb09 f40a 	mul.w	r4, r9, sl
 8000db8:	429c      	cmp	r4, r3
 8000dba:	fa02 f207 	lsl.w	r2, r2, r7
 8000dbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	f080 8087 	bcs.w	8000ede <__udivmoddi4+0x2b2>
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	f240 8084 	bls.w	8000ede <__udivmoddi4+0x2b2>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4473      	add	r3, lr
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	b2ad      	uxth	r5, r5
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000df0:	45a2      	cmp	sl, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1e 0404 	adds.w	r4, lr, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfc:	d26b      	bcs.n	8000ed6 <__udivmoddi4+0x2aa>
 8000dfe:	45a2      	cmp	sl, r4
 8000e00:	d969      	bls.n	8000ed6 <__udivmoddi4+0x2aa>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4474      	add	r4, lr
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	eba4 040a 	sub.w	r4, r4, sl
 8000e12:	454c      	cmp	r4, r9
 8000e14:	46c2      	mov	sl, r8
 8000e16:	464b      	mov	r3, r9
 8000e18:	d354      	bcc.n	8000ec4 <__udivmoddi4+0x298>
 8000e1a:	d051      	beq.n	8000ec0 <__udivmoddi4+0x294>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d069      	beq.n	8000ef4 <__udivmoddi4+0x2c8>
 8000e20:	ebb1 050a 	subs.w	r5, r1, sl
 8000e24:	eb64 0403 	sbc.w	r4, r4, r3
 8000e28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e2c:	40fd      	lsrs	r5, r7
 8000e2e:	40fc      	lsrs	r4, r7
 8000e30:	ea4c 0505 	orr.w	r5, ip, r5
 8000e34:	e9c6 5400 	strd	r5, r4, [r6]
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e747      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f703 	lsr.w	r7, r0, r3
 8000e44:	4095      	lsls	r5, r2
 8000e46:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e52:	4338      	orrs	r0, r7
 8000e54:	0c01      	lsrs	r1, r0, #16
 8000e56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e5a:	fa1f f885 	uxth.w	r8, r5
 8000e5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb07 f308 	mul.w	r3, r7, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x256>
 8000e72:	1869      	adds	r1, r5, r1
 8000e74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e78:	d22f      	bcs.n	8000eda <__udivmoddi4+0x2ae>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d92d      	bls.n	8000eda <__udivmoddi4+0x2ae>
 8000e7e:	3f02      	subs	r7, #2
 8000e80:	4429      	add	r1, r5
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	b281      	uxth	r1, r0
 8000e86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb00 f308 	mul.w	r3, r0, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x27e>
 8000e9a:	1869      	adds	r1, r5, r1
 8000e9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ea0:	d217      	bcs.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d915      	bls.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4429      	add	r1, r5
 8000eaa:	1ac9      	subs	r1, r1, r3
 8000eac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eb0:	e73b      	b.n	8000d2a <__udivmoddi4+0xfe>
 8000eb2:	4637      	mov	r7, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e709      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb8:	4607      	mov	r7, r0
 8000eba:	e6e7      	b.n	8000c8c <__udivmoddi4+0x60>
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ec0:	4541      	cmp	r1, r8
 8000ec2:	d2ab      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ecc:	3801      	subs	r0, #1
 8000ece:	4613      	mov	r3, r2
 8000ed0:	e7a4      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	e7e9      	b.n	8000eaa <__udivmoddi4+0x27e>
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	e795      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000eda:	4667      	mov	r7, ip
 8000edc:	e7d1      	b.n	8000e82 <__udivmoddi4+0x256>
 8000ede:	4681      	mov	r9, r0
 8000ee0:	e77c      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	442c      	add	r4, r5
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0x14c>
 8000ee8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eec:	442b      	add	r3, r5
 8000eee:	e72f      	b.n	8000d50 <__udivmoddi4+0x124>
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	e708      	b.n	8000d06 <__udivmoddi4+0xda>
 8000ef4:	4637      	mov	r7, r6
 8000ef6:	e6e9      	b.n	8000ccc <__udivmoddi4+0xa0>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <toggleMode>:

//General Program
//****************************************************************************************************************
bool mode = true;

void toggleMode() {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	mode = !mode;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <toggleMode+0x4c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bf14      	ite	ne
 8000f08:	2301      	movne	r3, #1
 8000f0a:	2300      	moveq	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f083 0301 	eor.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <toggleMode+0x4c>)
 8000f1c:	701a      	strb	r2, [r3, #0]
	if (mode) {
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <toggleMode+0x4c>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d004      	beq.n	8000f30 <toggleMode+0x34>
		htim2.Instance->ARR = AUTORELOAD_TX;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <toggleMode+0x50>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2263      	movs	r2, #99	; 0x63
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f2e:	e004      	b.n	8000f3a <toggleMode+0x3e>
	} else {
		htim2.Instance->ARR = AUTORELOAD_RX;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <toggleMode+0x50>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <toggleMode+0x54>)
 8000f3e:	f001 fc40 	bl	80027c2 <HAL_GPIO_TogglePin>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	200010dc 	.word	0x200010dc
 8000f50:	40020000 	.word	0x40020000
 8000f54:	00000000 	.word	0x00000000

08000f58 <get_sineval>:

uint32_t sine_val[100];
uint32_t lowFrequency[LOWF];
uint32_t highFrequency[HIGHF];

void get_sineval() {
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	e03a      	b.n	8000fda <get_sineval+0x82>
		//formula in DAC Document
		sine_val[i] = ((sin(i * 2 * PI / 100) + 1) * (4096 / 2));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fafb 	bl	8000564 <__aeabi_i2d>
 8000f6e:	a322      	add	r3, pc, #136	; (adr r3, 8000ff8 <get_sineval+0xa0>)
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f7ff fb60 	bl	8000638 <__aeabi_dmul>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	4621      	mov	r1, r4
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <get_sineval+0x90>)
 8000f86:	f7ff fc81 	bl	800088c <__aeabi_ddiv>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460c      	mov	r4, r1
 8000f8e:	ec44 3b17 	vmov	d7, r3, r4
 8000f92:	eeb0 0a47 	vmov.f32	s0, s14
 8000f96:	eef0 0a67 	vmov.f32	s1, s15
 8000f9a:	f003 fe61 	bl	8004c60 <sin>
 8000f9e:	ec51 0b10 	vmov	r0, r1, d0
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <get_sineval+0x94>)
 8000fa8:	f7ff f990 	bl	80002cc <__adddf3>
 8000fac:	4603      	mov	r3, r0
 8000fae:	460c      	mov	r4, r1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <get_sineval+0x98>)
 8000fba:	f7ff fb3d 	bl	8000638 <__aeabi_dmul>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460c      	mov	r4, r1
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	f7ff fdf9 	bl	8000bbc <__aeabi_d2uiz>
 8000fca:	4601      	mov	r1, r0
 8000fcc:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <get_sineval+0x9c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 100; i++) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b63      	cmp	r3, #99	; 0x63
 8000fde:	ddc1      	ble.n	8000f64 <get_sineval+0xc>
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd90      	pop	{r4, r7, pc}
 8000fe8:	40590000 	.word	0x40590000
 8000fec:	3ff00000 	.word	0x3ff00000
 8000ff0:	40a00000 	.word	0x40a00000
 8000ff4:	20000db4 	.word	0x20000db4
 8000ff8:	4d12d84a 	.word	0x4d12d84a
 8000ffc:	400921fb 	.word	0x400921fb

08001000 <edit_sineval>:
void edit_sineval(uint32_t *sinArray, int arraySize) {
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < arraySize; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e040      	b.n	8001092 <edit_sineval+0x92>
		//formula in DAC Document
		sinArray[i] = ((sin((i - 45) * 2 * PI / arraySize) + 1.1) * (4096 / 4));
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3b2d      	subs	r3, #45	; 0x2d
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff faa4 	bl	8000564 <__aeabi_i2d>
 800101c:	a323      	add	r3, pc, #140	; (adr r3, 80010ac <edit_sineval+0xac>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fb09 	bl	8000638 <__aeabi_dmul>
 8001026:	4603      	mov	r3, r0
 8001028:	460c      	mov	r4, r1
 800102a:	4625      	mov	r5, r4
 800102c:	461c      	mov	r4, r3
 800102e:	6838      	ldr	r0, [r7, #0]
 8001030:	f7ff fa98 	bl	8000564 <__aeabi_i2d>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4620      	mov	r0, r4
 800103a:	4629      	mov	r1, r5
 800103c:	f7ff fc26 	bl	800088c <__aeabi_ddiv>
 8001040:	4603      	mov	r3, r0
 8001042:	460c      	mov	r4, r1
 8001044:	ec44 3b17 	vmov	d7, r3, r4
 8001048:	eeb0 0a47 	vmov.f32	s0, s14
 800104c:	eef0 0a67 	vmov.f32	s1, s15
 8001050:	f003 fe06 	bl	8004c60 <sin>
 8001054:	ec51 0b10 	vmov	r0, r1, d0
 8001058:	a316      	add	r3, pc, #88	; (adr r3, 80010b4 <edit_sineval+0xb4>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff f935 	bl	80002cc <__adddf3>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	4618      	mov	r0, r3
 8001068:	4621      	mov	r1, r4
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <edit_sineval+0xa8>)
 8001070:	f7ff fae2 	bl	8000638 <__aeabi_dmul>
 8001074:	4603      	mov	r3, r0
 8001076:	460c      	mov	r4, r1
 8001078:	4618      	mov	r0, r3
 800107a:	4621      	mov	r1, r4
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	18d4      	adds	r4, r2, r3
 8001084:	f7ff fd9a 	bl	8000bbc <__aeabi_d2uiz>
 8001088:	4603      	mov	r3, r0
 800108a:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < arraySize; i++) {
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbba      	blt.n	8001010 <edit_sineval+0x10>
	}
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdb0      	pop	{r4, r5, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	f3af 8000 	nop.w
 80010a8:	40900000 	.word	0x40900000
 80010ac:	4d12d84a 	.word	0x4d12d84a
 80010b0:	400921fb 	.word	0x400921fb
 80010b4:	9999999a 	.word	0x9999999a
 80010b8:	3ff19999 	.word	0x3ff19999

080010bc <generateBitstream>:
			DAC_ALIGN_12B_R);
		HAL_Delay(0.5);
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
	}
}
void generateBitstream() {
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <generateBitstream+0x4c>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <generateBitstream+0x4c>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <generateBitstream+0x4c>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <generateBitstream+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <generateBitstream+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <generateBitstream+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <generateBitstream+0x4c>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <generateBitstream+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 0;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <generateBitstream+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <generateBitstream+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	725a      	strb	r2, [r3, #9]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000da8 	.word	0x20000da8

0800110c <initOUTData>:
void initOUTData() {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	get_sineval();
 8001110:	f7ff ff22 	bl	8000f58 <get_sineval>
	edit_sineval(lowFrequency, LOWF);
 8001114:	2154      	movs	r1, #84	; 0x54
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <initOUTData+0x20>)
 8001118:	f7ff ff72 	bl	8001000 <edit_sineval>
	edit_sineval(highFrequency, HIGHF);
 800111c:	212e      	movs	r1, #46	; 0x2e
 800111e:	4804      	ldr	r0, [pc, #16]	; (8001130 <initOUTData+0x24>)
 8001120:	f7ff ff6e 	bl	8001000 <edit_sineval>
	generateBitstream();
 8001124:	f7ff ffca 	bl	80010bc <generateBitstream>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200000a0 	.word	0x200000a0
 8001130:	20000f44 	.word	0x20000f44

08001134 <FreqCounterPinEXTI>:
		return 0;
	else
		return -1;
}

void FreqCounterPinEXTI() {
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
	if (!first) {
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <FreqCounterPinEXTI+0x3c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	f083 0301 	eor.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d007      	beq.n	8001156 <FreqCounterPinEXTI+0x22>
		htim2.Instance->CNT = 0;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <FreqCounterPinEXTI+0x40>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
		first = true;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <FreqCounterPinEXTI+0x3c>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
	} else {
		period = htim2.Instance->CNT;
		first = false;
	}
}
 8001154:	e007      	b.n	8001166 <FreqCounterPinEXTI+0x32>
		period = htim2.Instance->CNT;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <FreqCounterPinEXTI+0x40>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <FreqCounterPinEXTI+0x44>)
 800115e:	6013      	str	r3, [r2, #0]
		first = false;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <FreqCounterPinEXTI+0x3c>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	20000092 	.word	0x20000092
 8001174:	200010dc 	.word	0x200010dc
 8001178:	200010d8 	.word	0x200010d8

0800117c <Tim3IT>:

void Tim3IT() {
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
	periodBuffer[buffLoadCount] = period;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <Tim3IT+0x38>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <Tim3IT+0x3c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <Tim3IT+0x40>)
 800118c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffLoadCount++;
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <Tim3IT+0x38>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <Tim3IT+0x38>)
 800119a:	801a      	strh	r2, [r3, #0]
	if (buffLoadCount >= BUFFERSIZE)
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <Tim3IT+0x38>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	2b31      	cmp	r3, #49	; 0x31
 80011a2:	d902      	bls.n	80011aa <Tim3IT+0x2e>
		buffLoadCount = 0;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <Tim3IT+0x38>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	801a      	strh	r2, [r3, #0]
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	20000090 	.word	0x20000090
 80011b8:	200010d8 	.word	0x200010d8
 80011bc:	20000ffc 	.word	0x20000ffc

080011c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011c4:	f000 fc56 	bl	8001a74 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011c8:	f000 f836 	bl	8001238 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011cc:	f000 f9b0 	bl	8001530 <MX_GPIO_Init>
	MX_DMA_Init();
 80011d0:	f000 f98e 	bl	80014f0 <MX_DMA_Init>
	MX_DAC_Init();
 80011d4:	f000 f89e 	bl	8001314 <MX_DAC_Init>
	MX_TIM2_Init();
 80011d8:	f000 f8c6 	bl	8001368 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 80011dc:	f000 f95e 	bl	800149c <MX_USART2_UART_Init>
	MX_TIM3_Init();
 80011e0:	f000 f90e 	bl	8001400 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 80011e4:	480e      	ldr	r0, [pc, #56]	; (8001220 <main+0x60>)
 80011e6:	f002 f85e 	bl	80032a6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 80011ea:	480e      	ldr	r0, [pc, #56]	; (8001224 <main+0x64>)
 80011ec:	f002 f87f 	bl	80032ee <HAL_TIM_Base_Start_IT>
	initOUTData();
 80011f0:	f7ff ff8c 	bl	800110c <initOUTData>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		sprintf(uartData, "Mode %d\r\n",mode);
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <main+0x68>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	490c      	ldr	r1, [pc, #48]	; (800122c <main+0x6c>)
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <main+0x70>)
 80011fe:	f003 f929 	bl	8004454 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001202:	480b      	ldr	r0, [pc, #44]	; (8001230 <main+0x70>)
 8001204:	f7ff f804 	bl	8000210 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	230a      	movs	r3, #10
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <main+0x70>)
 8001210:	4808      	ldr	r0, [pc, #32]	; (8001234 <main+0x74>)
 8001212:	f002 fc8e 	bl	8003b32 <HAL_UART_Transmit>
		HAL_Delay(500);
 8001216:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121a:	f000 fc9d 	bl	8001b58 <HAL_Delay>
		sprintf(uartData, "Mode %d\r\n",mode);
 800121e:	e7e9      	b.n	80011f4 <main+0x34>
 8001220:	200010dc 	.word	0x200010dc
 8001224:	2000115c 	.word	0x2000115c
 8001228:	20000000 	.word	0x20000000
 800122c:	08005ca0 	.word	0x08005ca0
 8001230:	200001f0 	.word	0x200001f0
 8001234:	2000111c 	.word	0x2000111c

08001238 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	; 0x50
 800123c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	2234      	movs	r2, #52	; 0x34
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f003 f8fc 	bl	8004444 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <SystemClock_Config+0xd4>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	4a29      	ldr	r2, [pc, #164]	; (800130c <SystemClock_Config+0xd4>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <SystemClock_Config+0xd4>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001278:	2300      	movs	r3, #0
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <SystemClock_Config+0xd8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001284:	4a22      	ldr	r2, [pc, #136]	; (8001310 <SystemClock_Config+0xd8>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b20      	ldr	r3, [pc, #128]	; (8001310 <SystemClock_Config+0xd8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001298:	2301      	movs	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 90;
 80012b0:	235a      	movs	r3, #90	; 0x5a
 80012b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80012bc:	2302      	movs	r3, #2
 80012be:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fd69 	bl	8002d9c <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x9c>
		Error_Handler();
 80012d0:	f000 f9e6 	bl	80016a0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012d4:	230f      	movs	r3, #15
 80012d6:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d8:	2302      	movs	r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2102      	movs	r1, #2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 fa98 	bl	8002828 <HAL_RCC_ClockConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0xca>
		Error_Handler();
 80012fe:	f000 f9cf 	bl	80016a0 <Error_Handler>
	}
}
 8001302:	bf00      	nop
 8001304:	3750      	adds	r7, #80	; 0x50
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40007000 	.word	0x40007000

08001314 <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_DAC_Init+0x4c>)
 8001324:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <MX_DAC_Init+0x50>)
 8001326:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_DAC_Init+0x4c>)
 800132a:	f000 fd48 	bl	8001dbe <HAL_DAC_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_DAC_Init+0x24>
		Error_Handler();
 8001334:	f000 f9b4 	bl	80016a0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001338:	2324      	movs	r3, #36	; 0x24
 800133a:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001340:	463b      	mov	r3, r7
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_DAC_Init+0x4c>)
 8001348:	f000 fd5b 	bl	8001e02 <HAL_DAC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_DAC_Init+0x42>
		Error_Handler();
 8001352:	f000 f9a5 	bl	80016a0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200010c4 	.word	0x200010c4
 8001364:	40007400 	.word	0x40007400

08001368 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_TIM2_Init+0x94>)
 8001386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9 - 1;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_TIM2_Init+0x94>)
 800138e:	2208      	movs	r2, #8
 8001390:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_TIM2_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = AUTORELOAD_TX;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_TIM2_Init+0x94>)
 800139a:	2263      	movs	r2, #99	; 0x63
 800139c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_TIM2_Init+0x94>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_TIM2_Init+0x94>)
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80013aa:	4814      	ldr	r0, [pc, #80]	; (80013fc <MX_TIM2_Init+0x94>)
 80013ac:	f001 ff50 	bl	8003250 <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x52>
		Error_Handler();
 80013b6:	f000 f973 	bl	80016a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4619      	mov	r1, r3
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_TIM2_Init+0x94>)
 80013c8:	f002 f8bd 	bl	8003546 <HAL_TIM_ConfigClockSource>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0x6e>
		Error_Handler();
 80013d2:	f000 f965 	bl	80016a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013d6:	2320      	movs	r3, #32
 80013d8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_TIM2_Init+0x94>)
 80013e4:	f002 fac8 	bl	8003978 <HAL_TIMEx_MasterConfigSynchronization>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80013ee:	f000 f957 	bl	80016a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200010dc 	.word	0x200010dc

08001400 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_TIM3_Init+0x94>)
 800141e:	4a1e      	ldr	r2, [pc, #120]	; (8001498 <MX_TIM3_Init+0x98>)
 8001420:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 45 - 1;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_TIM3_Init+0x94>)
 8001424:	222c      	movs	r2, #44	; 0x2c
 8001426:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_TIM3_Init+0x94>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xffff;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_TIM3_Init+0x94>)
 8001430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001434:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_TIM3_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_TIM3_Init+0x94>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001442:	4814      	ldr	r0, [pc, #80]	; (8001494 <MX_TIM3_Init+0x94>)
 8001444:	f001 ff04 	bl	8003250 <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0x52>
		Error_Handler();
 800144e:	f000 f927 	bl	80016a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4619      	mov	r1, r3
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_TIM3_Init+0x94>)
 8001460:	f002 f871 	bl	8003546 <HAL_TIM_ConfigClockSource>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0x6e>
		Error_Handler();
 800146a:	f000 f919 	bl	80016a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001476:	463b      	mov	r3, r7
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_TIM3_Init+0x94>)
 800147c:	f002 fa7c 	bl	8003978 <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001486:	f000 f90b 	bl	80016a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000115c 	.word	0x2000115c
 8001498:	40000400 	.word	0x40000400

0800149c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_USART2_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014d4:	f002 fae0 	bl	8003a98 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80014de:	f000 f8df 	bl	80016a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000111c 	.word	0x2000111c
 80014ec:	40004400 	.word	0x40004400

080014f0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_DMA_Init+0x3c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <MX_DMA_Init+0x3c>)
 8001500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_DMA_Init+0x3c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	2010      	movs	r0, #16
 8001518:	f000 fc1b 	bl	8001d52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800151c:	2010      	movs	r0, #16
 800151e:	f000 fc34 	bl	8001d8a <HAL_NVIC_EnableIRQ>

}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800

08001530 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b3c      	ldr	r3, [pc, #240]	; (800163c <MX_GPIO_Init+0x10c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a3b      	ldr	r2, [pc, #236]	; (800163c <MX_GPIO_Init+0x10c>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <MX_GPIO_Init+0x10c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b35      	ldr	r3, [pc, #212]	; (800163c <MX_GPIO_Init+0x10c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a34      	ldr	r2, [pc, #208]	; (800163c <MX_GPIO_Init+0x10c>)
 800156c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b32      	ldr	r3, [pc, #200]	; (800163c <MX_GPIO_Init+0x10c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <MX_GPIO_Init+0x10c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a2d      	ldr	r2, [pc, #180]	; (800163c <MX_GPIO_Init+0x10c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <MX_GPIO_Init+0x10c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b27      	ldr	r3, [pc, #156]	; (800163c <MX_GPIO_Init+0x10c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a26      	ldr	r2, [pc, #152]	; (800163c <MX_GPIO_Init+0x10c>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <MX_GPIO_Init+0x10c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_8, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 7190 	mov.w	r1, #288	; 0x120
 80015bc:	4820      	ldr	r0, [pc, #128]	; (8001640 <MX_GPIO_Init+0x110>)
 80015be:	f001 f8e7 	bl	8002790 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80015c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_GPIO_Init+0x114>)
 80015ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	481c      	ldr	r0, [pc, #112]	; (8001648 <MX_GPIO_Init+0x118>)
 80015d8:	f000 ff48 	bl	800246c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015dc:	2301      	movs	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_GPIO_Init+0x11c>)
 80015e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4814      	ldr	r0, [pc, #80]	; (8001640 <MX_GPIO_Init+0x110>)
 80015f0:	f000 ff3c 	bl	800246c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA8 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_8;
 80015f4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80015f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <MX_GPIO_Init+0x110>)
 800160e:	f000 ff2d 	bl	800246c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2006      	movs	r0, #6
 8001618:	f000 fb9b 	bl	8001d52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800161c:	2006      	movs	r0, #6
 800161e:	f000 fbb4 	bl	8001d8a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2028      	movs	r0, #40	; 0x28
 8001628:	f000 fb93 	bl	8001d52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800162c:	2028      	movs	r0, #40	; 0x28
 800162e:	f000 fbac 	bl	8001d8a <HAL_NVIC_EnableIRQ>

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000
 8001644:	10210000 	.word	0x10210000
 8001648:	40020800 	.word	0x40020800
 800164c:	10110000 	.word	0x10110000

08001650 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d102      	bne.n	8001666 <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 8001660:	f7ff fd8c 	bl	800117c <Tim3IT>
	else
		__NOP();
}
 8001664:	e000      	b.n	8001668 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 8001666:	bf00      	nop
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2000115c 	.word	0x2000115c

08001674 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 8001684:	f7ff fd56 	bl	8001134 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800168e:	d102      	bne.n	8001696 <HAL_GPIO_EXTI_Callback+0x22>
		toggleMode();
 8001690:	f7ff fc34 	bl	8000efc <toggleMode>
	} else
		__NOP();
}
 8001694:	e000      	b.n	8001698 <HAL_GPIO_EXTI_Callback+0x24>
		__NOP();
 8001696:	bf00      	nop
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_MspInit+0x4c>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	4a0f      	ldr	r2, [pc, #60]	; (80016fc <HAL_MspInit+0x4c>)
 80016c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c4:	6453      	str	r3, [r2, #68]	; 0x44
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_MspInit+0x4c>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_MspInit+0x4c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <HAL_MspInit+0x4c>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_MspInit+0x4c>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016ee:	2007      	movs	r0, #7
 80016f0:	f000 fb24 	bl	8001d3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800

08001700 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <HAL_DAC_MspInit+0xdc>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d158      	bne.n	80017d4 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_DAC_MspInit+0xe0>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a2d      	ldr	r2, [pc, #180]	; (80017e0 <HAL_DAC_MspInit+0xe0>)
 800172c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_DAC_MspInit+0xe0>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_DAC_MspInit+0xe0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a26      	ldr	r2, [pc, #152]	; (80017e0 <HAL_DAC_MspInit+0xe0>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_DAC_MspInit+0xe0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800175a:	2310      	movs	r3, #16
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175e:	2303      	movs	r3, #3
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	481d      	ldr	r0, [pc, #116]	; (80017e4 <HAL_DAC_MspInit+0xe4>)
 800176e:	f000 fe7d 	bl	800246c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_DAC_MspInit+0xec>)
 8001776:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 800177a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800177e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 8001782:	2240      	movs	r2, #64	; 0x40
 8001784:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 800178e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001792:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 8001796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800179a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 800179e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 80017a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017aa:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 80017ba:	f000 fb6f 	bl	8001e9c <HAL_DMA_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80017c4:	f7ff ff6c 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_DAC_MspInit+0xe8>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40007400 	.word	0x40007400
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	2000119c 	.word	0x2000119c
 80017ec:	40026088 	.word	0x40026088

080017f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001800:	d10e      	bne.n	8001820 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_TIM_Base_MspInit+0x70>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a15      	ldr	r2, [pc, #84]	; (8001860 <HAL_TIM_Base_MspInit+0x70>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_TIM_Base_MspInit+0x70>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800181e:	e01a      	b.n	8001856 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <HAL_TIM_Base_MspInit+0x74>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d115      	bne.n	8001856 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_TIM_Base_MspInit+0x70>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <HAL_TIM_Base_MspInit+0x70>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_TIM_Base_MspInit+0x70>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	201d      	movs	r0, #29
 800184c:	f000 fa81 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001850:	201d      	movs	r0, #29
 8001852:	f000 fa9a 	bl	8001d8a <HAL_NVIC_EnableIRQ>
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40000400 	.word	0x40000400

08001868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	; (80018ec <HAL_UART_MspInit+0x84>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d12b      	bne.n	80018e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_UART_MspInit+0x88>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_UART_MspInit+0x88>)
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_UART_MspInit+0x88>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_UART_MspInit+0x88>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_UART_MspInit+0x88>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_UART_MspInit+0x88>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018c2:	230c      	movs	r3, #12
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018d2:	2307      	movs	r3, #7
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <HAL_UART_MspInit+0x8c>)
 80018de:	f000 fdc5 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40004400 	.word	0x40004400
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194c:	f000 f8e4 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001958:	2001      	movs	r0, #1
 800195a:	f000 ff4d 	bl	80027f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <DMA1_Stream5_IRQHandler+0x10>)
 800196a:	f000 fb45 	bl	8001ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000119c 	.word	0x2000119c

08001978 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <TIM3_IRQHandler+0x10>)
 800197e:	f001 fcda 	bl	8003336 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000115c 	.word	0x2000115c

0800198c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001990:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001994:	f000 ff30 	bl	80027f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <_sbrk+0x50>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x16>
		heap_end = &end;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <_sbrk+0x50>)
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <_sbrk+0x54>)
 80019b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <_sbrk+0x50>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <_sbrk+0x50>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	466a      	mov	r2, sp
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d907      	bls.n	80019d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019c6:	f002 fd13 	bl	80043f0 <__errno>
 80019ca:	4602      	mov	r2, r0
 80019cc:	230c      	movs	r3, #12
 80019ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
 80019d4:	e006      	b.n	80019e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <_sbrk+0x50>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a03      	ldr	r2, [pc, #12]	; (80019ec <_sbrk+0x50>)
 80019e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000094 	.word	0x20000094
 80019f0:	20001208 	.word	0x20001208

080019f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <SystemInit+0x28>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <SystemInit+0x28>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SystemInit+0x28>)
 8001a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a26:	e003      	b.n	8001a30 <LoopCopyDataInit>

08001a28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a2e:	3104      	adds	r1, #4

08001a30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a30:	480b      	ldr	r0, [pc, #44]	; (8001a60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a38:	d3f6      	bcc.n	8001a28 <CopyDataInit>
  ldr  r2, =_sbss
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a3c:	e002      	b.n	8001a44 <LoopFillZerobss>

08001a3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a40:	f842 3b04 	str.w	r3, [r2], #4

08001a44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a48:	d3f9      	bcc.n	8001a3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a4a:	f7ff ffd3 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f002 fcd5 	bl	80043fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a52:	f7ff fbb5 	bl	80011c0 <main>
  bx  lr    
 8001a56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a5c:	08005ee8 	.word	0x08005ee8
  ldr  r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a64:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001a68:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001a6c:	20001204 	.word	0x20001204

08001a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC_IRQHandler>
	...

08001a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a78:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <HAL_Init+0x40>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_Init+0x40>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_Init+0x40>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 f94d 	bl	8001d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff fe02 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f965 	bl	8001da6 <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 f92d 	bl	8001d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000004 	.word	0x20000004
 8001b10:	2000000c 	.word	0x2000000c
 8001b14:	20000008 	.word	0x20000008

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	200011fc 	.word	0x200011fc

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200011fc 	.word	0x200011fc

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_Delay+0x40>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000000c 	.word	0x2000000c

08001b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	60d3      	str	r3, [r2, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <__NVIC_GetPriorityGrouping+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	f003 0307 	and.w	r3, r3, #7
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db0b      	blt.n	8001c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4907      	ldr	r1, [pc, #28]	; (8001c38 <__NVIC_EnableIRQ+0x38>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2001      	movs	r0, #1
 8001c22:	fa00 f202 	lsl.w	r2, r0, r2
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d08:	d301      	bcc.n	8001d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00f      	b.n	8001d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <SysTick_Config+0x40>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d16:	210f      	movs	r1, #15
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f7ff ff8e 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <SysTick_Config+0x40>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SysTick_Config+0x40>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000e010 	.word	0xe000e010

08001d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff29 	bl	8001b9c <__NVIC_SetPriorityGrouping>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d64:	f7ff ff3e 	bl	8001be4 <__NVIC_GetPriorityGrouping>
 8001d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	6978      	ldr	r0, [r7, #20]
 8001d70:	f7ff ff8e 	bl	8001c90 <NVIC_EncodePriority>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff5d 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff31 	bl	8001c00 <__NVIC_EnableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffa2 	bl	8001cf8 <SysTick_Config>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e014      	b.n	8001dfa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	791b      	ldrb	r3, [r3, #4]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d105      	bne.n	8001de6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff fc8d 	bl	8001700 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b087      	sub	sp, #28
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	795b      	ldrb	r3, [r3, #5]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_DAC_ConfigChannel+0x20>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e036      	b.n	8001e90 <HAL_DAC_ConfigChannel+0x8e>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001e36:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4013      	ands	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	22c0      	movs	r2, #192	; 0xc0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	400a      	ands	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2201      	movs	r2, #1
 8001e86:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff fe4a 	bl	8001b40 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e099      	b.n	8001fec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed8:	e00f      	b.n	8001efa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eda:	f7ff fe31 	bl	8001b40 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d908      	bls.n	8001efa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e078      	b.n	8001fec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e8      	bne.n	8001eda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <HAL_DMA_Init+0x158>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d107      	bne.n	8001f64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f023 0307 	bic.w	r3, r3, #7
 8001f7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d117      	bne.n	8001fbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00e      	beq.n	8001fbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f9e9 	bl	8002378 <DMA_CheckFifoParam>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e016      	b.n	8001fec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f9a0 	bl	800230c <DMA_CalcBaseAndBitshift>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	223f      	movs	r2, #63	; 0x3f
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	f010803f 	.word	0xf010803f

08001ff8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002004:	4b92      	ldr	r3, [pc, #584]	; (8002250 <HAL_DMA_IRQHandler+0x258>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a92      	ldr	r2, [pc, #584]	; (8002254 <HAL_DMA_IRQHandler+0x25c>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0a9b      	lsrs	r3, r3, #10
 8002010:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	2208      	movs	r2, #8
 8002024:	409a      	lsls	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d01a      	beq.n	8002064 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0204 	bic.w	r2, r2, #4
 800204a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	2208      	movs	r2, #8
 8002052:	409a      	lsls	r2, r3
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	2201      	movs	r2, #1
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d012      	beq.n	800209a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002086:	2201      	movs	r2, #1
 8002088:	409a      	lsls	r2, r3
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f043 0202 	orr.w	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	2204      	movs	r2, #4
 80020a0:	409a      	lsls	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d012      	beq.n	80020d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00b      	beq.n	80020d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2204      	movs	r2, #4
 80020be:	409a      	lsls	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c8:	f043 0204 	orr.w	r2, r3, #4
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	2210      	movs	r2, #16
 80020d6:	409a      	lsls	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d043      	beq.n	8002168 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d03c      	beq.n	8002168 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	2210      	movs	r2, #16
 80020f4:	409a      	lsls	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d018      	beq.n	800213a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d108      	bne.n	8002128 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d024      	beq.n	8002168 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
 8002126:	e01f      	b.n	8002168 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
 8002138:	e016      	b.n	8002168 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d107      	bne.n	8002158 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0208 	bic.w	r2, r2, #8
 8002156:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	2220      	movs	r2, #32
 800216e:	409a      	lsls	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 808e 	beq.w	8002296 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 8086 	beq.w	8002296 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	2220      	movs	r2, #32
 8002190:	409a      	lsls	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b05      	cmp	r3, #5
 80021a0:	d136      	bne.n	8002210 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0216 	bic.w	r2, r2, #22
 80021b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <HAL_DMA_IRQHandler+0x1da>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0208 	bic.w	r2, r2, #8
 80021e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	223f      	movs	r2, #63	; 0x3f
 80021e8:	409a      	lsls	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002202:	2b00      	cmp	r3, #0
 8002204:	d07d      	beq.n	8002302 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
        }
        return;
 800220e:	e078      	b.n	8002302 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d01c      	beq.n	8002258 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d108      	bne.n	800223e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	2b00      	cmp	r3, #0
 8002232:	d030      	beq.n	8002296 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
 800223c:	e02b      	b.n	8002296 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	2b00      	cmp	r3, #0
 8002244:	d027      	beq.n	8002296 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
 800224e:	e022      	b.n	8002296 <HAL_DMA_IRQHandler+0x29e>
 8002250:	20000004 	.word	0x20000004
 8002254:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10f      	bne.n	8002286 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0210 	bic.w	r2, r2, #16
 8002274:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	2b00      	cmp	r3, #0
 800229c:	d032      	beq.n	8002304 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d022      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2205      	movs	r2, #5
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0201 	bic.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3301      	adds	r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d307      	bcc.n	80022de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f2      	bne.n	80022c2 <HAL_DMA_IRQHandler+0x2ca>
 80022dc:	e000      	b.n	80022e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
 8002300:	e000      	b.n	8002304 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002302:	bf00      	nop
    }
  }
}
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop

0800230c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	3b10      	subs	r3, #16
 800231c:	4a14      	ldr	r2, [pc, #80]	; (8002370 <DMA_CalcBaseAndBitshift+0x64>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002326:	4a13      	ldr	r2, [pc, #76]	; (8002374 <DMA_CalcBaseAndBitshift+0x68>)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d909      	bls.n	800234e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002342:	f023 0303 	bic.w	r3, r3, #3
 8002346:	1d1a      	adds	r2, r3, #4
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	659a      	str	r2, [r3, #88]	; 0x58
 800234c:	e007      	b.n	800235e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002356:	f023 0303 	bic.w	r3, r3, #3
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	aaaaaaab 	.word	0xaaaaaaab
 8002374:	08005cc4 	.word	0x08005cc4

08002378 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d11f      	bne.n	80023d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d855      	bhi.n	8002444 <DMA_CheckFifoParam+0xcc>
 8002398:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <DMA_CheckFifoParam+0x28>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080023b1 	.word	0x080023b1
 80023a4:	080023c3 	.word	0x080023c3
 80023a8:	080023b1 	.word	0x080023b1
 80023ac:	08002445 	.word	0x08002445
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d045      	beq.n	8002448 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c0:	e042      	b.n	8002448 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023ca:	d13f      	bne.n	800244c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d0:	e03c      	b.n	800244c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023da:	d121      	bne.n	8002420 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d836      	bhi.n	8002450 <DMA_CheckFifoParam+0xd8>
 80023e2:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <DMA_CheckFifoParam+0x70>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	080023ff 	.word	0x080023ff
 80023f0:	080023f9 	.word	0x080023f9
 80023f4:	08002411 	.word	0x08002411
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      break;
 80023fc:	e02f      	b.n	800245e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d024      	beq.n	8002454 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800240e:	e021      	b.n	8002454 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002418:	d11e      	bne.n	8002458 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800241e:	e01b      	b.n	8002458 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d902      	bls.n	800242c <DMA_CheckFifoParam+0xb4>
 8002426:	2b03      	cmp	r3, #3
 8002428:	d003      	beq.n	8002432 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800242a:	e018      	b.n	800245e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
      break;
 8002430:	e015      	b.n	800245e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00e      	beq.n	800245c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
      break;
 8002442:	e00b      	b.n	800245c <DMA_CheckFifoParam+0xe4>
      break;
 8002444:	bf00      	nop
 8002446:	e00a      	b.n	800245e <DMA_CheckFifoParam+0xe6>
      break;
 8002448:	bf00      	nop
 800244a:	e008      	b.n	800245e <DMA_CheckFifoParam+0xe6>
      break;
 800244c:	bf00      	nop
 800244e:	e006      	b.n	800245e <DMA_CheckFifoParam+0xe6>
      break;
 8002450:	bf00      	nop
 8002452:	e004      	b.n	800245e <DMA_CheckFifoParam+0xe6>
      break;
 8002454:	bf00      	nop
 8002456:	e002      	b.n	800245e <DMA_CheckFifoParam+0xe6>
      break;   
 8002458:	bf00      	nop
 800245a:	e000      	b.n	800245e <DMA_CheckFifoParam+0xe6>
      break;
 800245c:	bf00      	nop
    }
  } 
  
  return status; 
 800245e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	e165      	b.n	8002754 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002488:	2201      	movs	r2, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	f040 8154 	bne.w	800274e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d00b      	beq.n	80024c6 <HAL_GPIO_Init+0x5a>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ba:	2b11      	cmp	r3, #17
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b12      	cmp	r3, #18
 80024c4:	d130      	bne.n	8002528 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	2203      	movs	r2, #3
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024fc:	2201      	movs	r2, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 0201 	and.w	r2, r3, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0xfc>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b12      	cmp	r3, #18
 8002566:	d123      	bne.n	80025b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	08da      	lsrs	r2, r3, #3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3208      	adds	r2, #8
 8002570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	220f      	movs	r2, #15
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	08da      	lsrs	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3208      	adds	r2, #8
 80025aa:	69b9      	ldr	r1, [r7, #24]
 80025ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0203 	and.w	r2, r3, #3
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80ae 	beq.w	800274e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b5c      	ldr	r3, [pc, #368]	; (8002768 <HAL_GPIO_Init+0x2fc>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a5b      	ldr	r2, [pc, #364]	; (8002768 <HAL_GPIO_Init+0x2fc>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_GPIO_Init+0x2fc>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260e:	4a57      	ldr	r2, [pc, #348]	; (800276c <HAL_GPIO_Init+0x300>)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	220f      	movs	r2, #15
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4e      	ldr	r2, [pc, #312]	; (8002770 <HAL_GPIO_Init+0x304>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d025      	beq.n	8002686 <HAL_GPIO_Init+0x21a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4d      	ldr	r2, [pc, #308]	; (8002774 <HAL_GPIO_Init+0x308>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01f      	beq.n	8002682 <HAL_GPIO_Init+0x216>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4c      	ldr	r2, [pc, #304]	; (8002778 <HAL_GPIO_Init+0x30c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d019      	beq.n	800267e <HAL_GPIO_Init+0x212>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4b      	ldr	r2, [pc, #300]	; (800277c <HAL_GPIO_Init+0x310>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0x20e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4a      	ldr	r2, [pc, #296]	; (8002780 <HAL_GPIO_Init+0x314>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00d      	beq.n	8002676 <HAL_GPIO_Init+0x20a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a49      	ldr	r2, [pc, #292]	; (8002784 <HAL_GPIO_Init+0x318>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <HAL_GPIO_Init+0x206>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a48      	ldr	r2, [pc, #288]	; (8002788 <HAL_GPIO_Init+0x31c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_GPIO_Init+0x202>
 800266a:	2306      	movs	r3, #6
 800266c:	e00c      	b.n	8002688 <HAL_GPIO_Init+0x21c>
 800266e:	2307      	movs	r3, #7
 8002670:	e00a      	b.n	8002688 <HAL_GPIO_Init+0x21c>
 8002672:	2305      	movs	r3, #5
 8002674:	e008      	b.n	8002688 <HAL_GPIO_Init+0x21c>
 8002676:	2304      	movs	r3, #4
 8002678:	e006      	b.n	8002688 <HAL_GPIO_Init+0x21c>
 800267a:	2303      	movs	r3, #3
 800267c:	e004      	b.n	8002688 <HAL_GPIO_Init+0x21c>
 800267e:	2302      	movs	r3, #2
 8002680:	e002      	b.n	8002688 <HAL_GPIO_Init+0x21c>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_GPIO_Init+0x21c>
 8002686:	2300      	movs	r3, #0
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	f002 0203 	and.w	r2, r2, #3
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	4093      	lsls	r3, r2
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002698:	4934      	ldr	r1, [pc, #208]	; (800276c <HAL_GPIO_Init+0x300>)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	3302      	adds	r3, #2
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a6:	4b39      	ldr	r3, [pc, #228]	; (800278c <HAL_GPIO_Init+0x320>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ca:	4a30      	ldr	r2, [pc, #192]	; (800278c <HAL_GPIO_Init+0x320>)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026d0:	4b2e      	ldr	r3, [pc, #184]	; (800278c <HAL_GPIO_Init+0x320>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f4:	4a25      	ldr	r2, [pc, #148]	; (800278c <HAL_GPIO_Init+0x320>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fa:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_GPIO_Init+0x320>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271e:	4a1b      	ldr	r2, [pc, #108]	; (800278c <HAL_GPIO_Init+0x320>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_GPIO_Init+0x320>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002748:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_GPIO_Init+0x320>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3301      	adds	r3, #1
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b0f      	cmp	r3, #15
 8002758:	f67f ae96 	bls.w	8002488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800275c:	bf00      	nop
 800275e:	3724      	adds	r7, #36	; 0x24
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	40023800 	.word	0x40023800
 800276c:	40013800 	.word	0x40013800
 8002770:	40020000 	.word	0x40020000
 8002774:	40020400 	.word	0x40020400
 8002778:	40020800 	.word	0x40020800
 800277c:	40020c00 	.word	0x40020c00
 8002780:	40021000 	.word	0x40021000
 8002784:	40021400 	.word	0x40021400
 8002788:	40021800 	.word	0x40021800
 800278c:	40013c00 	.word	0x40013c00

08002790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
 800279c:	4613      	mov	r3, r2
 800279e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a0:	787b      	ldrb	r3, [r7, #1]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027ac:	e003      	b.n	80027b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ae:	887b      	ldrh	r3, [r7, #2]
 80027b0:	041a      	lsls	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	619a      	str	r2, [r3, #24]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	887b      	ldrh	r3, [r7, #2]
 80027d4:	401a      	ands	r2, r3
 80027d6:	887b      	ldrh	r3, [r7, #2]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d104      	bne.n	80027e6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	041a      	lsls	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80027e4:	e002      	b.n	80027ec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	619a      	str	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800280e:	4a05      	ldr	r2, [pc, #20]	; (8002824 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe ff2c 	bl	8001674 <HAL_GPIO_EXTI_Callback>
  }
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40013c00 	.word	0x40013c00

08002828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0cc      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d90c      	bls.n	8002864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d044      	beq.n	8002948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e067      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4934      	ldr	r1, [pc, #208]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7ff f912 	bl	8001b40 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7ff f90e 	bl	8001b40 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e04f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d20c      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f855 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 80029b2:	4601      	mov	r1, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	fa21 f303 	lsr.w	r3, r1, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f872 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08005cac 	.word	0x08005cac
 80029ec:	20000004 	.word	0x20000004
 80029f0:	20000008 	.word	0x20000008

080029f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000004 	.word	0x20000004

08002a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a10:	f7ff fff0 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a14:	4601      	mov	r1, r0
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0a9b      	lsrs	r3, r3, #10
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4a03      	ldr	r2, [pc, #12]	; (8002a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a22:	5cd3      	ldrb	r3, [r2, r3]
 8002a24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	08005cbc 	.word	0x08005cbc

08002a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a38:	f7ff ffdc 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a3c:	4601      	mov	r1, r0
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	0b5b      	lsrs	r3, r3, #13
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	4a03      	ldr	r2, [pc, #12]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40023800 	.word	0x40023800
 8002a58:	08005cbc 	.word	0x08005cbc

08002a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a76:	4bc6      	ldr	r3, [pc, #792]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	f200 817e 	bhi.w	8002d80 <HAL_RCC_GetSysClockFreq+0x324>
 8002a84:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <HAL_RCC_GetSysClockFreq+0x30>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002ac1 	.word	0x08002ac1
 8002a90:	08002d81 	.word	0x08002d81
 8002a94:	08002d81 	.word	0x08002d81
 8002a98:	08002d81 	.word	0x08002d81
 8002a9c:	08002ac7 	.word	0x08002ac7
 8002aa0:	08002d81 	.word	0x08002d81
 8002aa4:	08002d81 	.word	0x08002d81
 8002aa8:	08002d81 	.word	0x08002d81
 8002aac:	08002acd 	.word	0x08002acd
 8002ab0:	08002d81 	.word	0x08002d81
 8002ab4:	08002d81 	.word	0x08002d81
 8002ab8:	08002d81 	.word	0x08002d81
 8002abc:	08002c29 	.word	0x08002c29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4bb4      	ldr	r3, [pc, #720]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x338>)
 8002ac2:	613b      	str	r3, [r7, #16]
       break;
 8002ac4:	e15f      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac6:	4bb4      	ldr	r3, [pc, #720]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002ac8:	613b      	str	r3, [r7, #16]
      break;
 8002aca:	e15c      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002acc:	4bb0      	ldr	r3, [pc, #704]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ad6:	4bae      	ldr	r3, [pc, #696]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d04a      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae2:	4bab      	ldr	r3, [pc, #684]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	f04f 0400 	mov.w	r4, #0
 8002aec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	ea03 0501 	and.w	r5, r3, r1
 8002af8:	ea04 0602 	and.w	r6, r4, r2
 8002afc:	4629      	mov	r1, r5
 8002afe:	4632      	mov	r2, r6
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	f04f 0400 	mov.w	r4, #0
 8002b08:	0154      	lsls	r4, r2, #5
 8002b0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b0e:	014b      	lsls	r3, r1, #5
 8002b10:	4619      	mov	r1, r3
 8002b12:	4622      	mov	r2, r4
 8002b14:	1b49      	subs	r1, r1, r5
 8002b16:	eb62 0206 	sbc.w	r2, r2, r6
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	f04f 0400 	mov.w	r4, #0
 8002b22:	0194      	lsls	r4, r2, #6
 8002b24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b28:	018b      	lsls	r3, r1, #6
 8002b2a:	1a5b      	subs	r3, r3, r1
 8002b2c:	eb64 0402 	sbc.w	r4, r4, r2
 8002b30:	f04f 0100 	mov.w	r1, #0
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	00e2      	lsls	r2, r4, #3
 8002b3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b3e:	00d9      	lsls	r1, r3, #3
 8002b40:	460b      	mov	r3, r1
 8002b42:	4614      	mov	r4, r2
 8002b44:	195b      	adds	r3, r3, r5
 8002b46:	eb44 0406 	adc.w	r4, r4, r6
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	0262      	lsls	r2, r4, #9
 8002b54:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b58:	0259      	lsls	r1, r3, #9
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	4621      	mov	r1, r4
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f04f 0400 	mov.w	r4, #0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4623      	mov	r3, r4
 8002b6c:	f7fe f846 	bl	8000bfc <__aeabi_uldivmod>
 8002b70:	4603      	mov	r3, r0
 8002b72:	460c      	mov	r4, r1
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	e049      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b78:	4b85      	ldr	r3, [pc, #532]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	099b      	lsrs	r3, r3, #6
 8002b7e:	f04f 0400 	mov.w	r4, #0
 8002b82:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	ea03 0501 	and.w	r5, r3, r1
 8002b8e:	ea04 0602 	and.w	r6, r4, r2
 8002b92:	4629      	mov	r1, r5
 8002b94:	4632      	mov	r2, r6
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f04f 0400 	mov.w	r4, #0
 8002b9e:	0154      	lsls	r4, r2, #5
 8002ba0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ba4:	014b      	lsls	r3, r1, #5
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4622      	mov	r2, r4
 8002baa:	1b49      	subs	r1, r1, r5
 8002bac:	eb62 0206 	sbc.w	r2, r2, r6
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	f04f 0400 	mov.w	r4, #0
 8002bb8:	0194      	lsls	r4, r2, #6
 8002bba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bbe:	018b      	lsls	r3, r1, #6
 8002bc0:	1a5b      	subs	r3, r3, r1
 8002bc2:	eb64 0402 	sbc.w	r4, r4, r2
 8002bc6:	f04f 0100 	mov.w	r1, #0
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	00e2      	lsls	r2, r4, #3
 8002bd0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bd4:	00d9      	lsls	r1, r3, #3
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4614      	mov	r4, r2
 8002bda:	195b      	adds	r3, r3, r5
 8002bdc:	eb44 0406 	adc.w	r4, r4, r6
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	02a2      	lsls	r2, r4, #10
 8002bea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bee:	0299      	lsls	r1, r3, #10
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4614      	mov	r4, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f04f 0400 	mov.w	r4, #0
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4623      	mov	r3, r4
 8002c02:	f7fd fffb 	bl	8000bfc <__aeabi_uldivmod>
 8002c06:	4603      	mov	r3, r0
 8002c08:	460c      	mov	r4, r1
 8002c0a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c0c:	4b60      	ldr	r3, [pc, #384]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	3301      	adds	r3, #1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	613b      	str	r3, [r7, #16]
      break;
 8002c26:	e0ae      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c28:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c30:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c32:	4b57      	ldr	r3, [pc, #348]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d04a      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3e:	4b54      	ldr	r3, [pc, #336]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	f04f 0400 	mov.w	r4, #0
 8002c48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	ea03 0501 	and.w	r5, r3, r1
 8002c54:	ea04 0602 	and.w	r6, r4, r2
 8002c58:	4629      	mov	r1, r5
 8002c5a:	4632      	mov	r2, r6
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	f04f 0400 	mov.w	r4, #0
 8002c64:	0154      	lsls	r4, r2, #5
 8002c66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c6a:	014b      	lsls	r3, r1, #5
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4622      	mov	r2, r4
 8002c70:	1b49      	subs	r1, r1, r5
 8002c72:	eb62 0206 	sbc.w	r2, r2, r6
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	f04f 0400 	mov.w	r4, #0
 8002c7e:	0194      	lsls	r4, r2, #6
 8002c80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c84:	018b      	lsls	r3, r1, #6
 8002c86:	1a5b      	subs	r3, r3, r1
 8002c88:	eb64 0402 	sbc.w	r4, r4, r2
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	00e2      	lsls	r2, r4, #3
 8002c96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c9a:	00d9      	lsls	r1, r3, #3
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4614      	mov	r4, r2
 8002ca0:	195b      	adds	r3, r3, r5
 8002ca2:	eb44 0406 	adc.w	r4, r4, r6
 8002ca6:	f04f 0100 	mov.w	r1, #0
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	0262      	lsls	r2, r4, #9
 8002cb0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002cb4:	0259      	lsls	r1, r3, #9
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4614      	mov	r4, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f04f 0400 	mov.w	r4, #0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	f7fd ff98 	bl	8000bfc <__aeabi_uldivmod>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e049      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd4:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	f04f 0400 	mov.w	r4, #0
 8002cde:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	ea03 0501 	and.w	r5, r3, r1
 8002cea:	ea04 0602 	and.w	r6, r4, r2
 8002cee:	4629      	mov	r1, r5
 8002cf0:	4632      	mov	r2, r6
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	f04f 0400 	mov.w	r4, #0
 8002cfa:	0154      	lsls	r4, r2, #5
 8002cfc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d00:	014b      	lsls	r3, r1, #5
 8002d02:	4619      	mov	r1, r3
 8002d04:	4622      	mov	r2, r4
 8002d06:	1b49      	subs	r1, r1, r5
 8002d08:	eb62 0206 	sbc.w	r2, r2, r6
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	f04f 0400 	mov.w	r4, #0
 8002d14:	0194      	lsls	r4, r2, #6
 8002d16:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d1a:	018b      	lsls	r3, r1, #6
 8002d1c:	1a5b      	subs	r3, r3, r1
 8002d1e:	eb64 0402 	sbc.w	r4, r4, r2
 8002d22:	f04f 0100 	mov.w	r1, #0
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	00e2      	lsls	r2, r4, #3
 8002d2c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d30:	00d9      	lsls	r1, r3, #3
 8002d32:	460b      	mov	r3, r1
 8002d34:	4614      	mov	r4, r2
 8002d36:	195b      	adds	r3, r3, r5
 8002d38:	eb44 0406 	adc.w	r4, r4, r6
 8002d3c:	f04f 0100 	mov.w	r1, #0
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	02a2      	lsls	r2, r4, #10
 8002d46:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d4a:	0299      	lsls	r1, r3, #10
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4614      	mov	r4, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	4621      	mov	r1, r4
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f04f 0400 	mov.w	r4, #0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4623      	mov	r3, r4
 8002d5e:	f7fd ff4d 	bl	8000bfc <__aeabi_uldivmod>
 8002d62:	4603      	mov	r3, r0
 8002d64:	460c      	mov	r4, r1
 8002d66:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	0f1b      	lsrs	r3, r3, #28
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	613b      	str	r3, [r7, #16]
      break;
 8002d7e:	e002      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x338>)
 8002d82:	613b      	str	r3, [r7, #16]
      break;
 8002d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d86:	693b      	ldr	r3, [r7, #16]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	007a1200 	.word	0x007a1200

08002d9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8083 	beq.w	8002ebc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002db6:	4b95      	ldr	r3, [pc, #596]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d019      	beq.n	8002df6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dc2:	4b92      	ldr	r3, [pc, #584]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dce:	4b8f      	ldr	r3, [pc, #572]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dda:	d00c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ddc:	4b8b      	ldr	r3, [pc, #556]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002de4:	2b0c      	cmp	r3, #12
 8002de6:	d112      	bne.n	8002e0e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de8:	4b88      	ldr	r3, [pc, #544]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df4:	d10b      	bne.n	8002e0e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df6:	4b85      	ldr	r3, [pc, #532]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d05b      	beq.n	8002eba <HAL_RCC_OscConfig+0x11e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d157      	bne.n	8002eba <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e216      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e16:	d106      	bne.n	8002e26 <HAL_RCC_OscConfig+0x8a>
 8002e18:	4b7c      	ldr	r3, [pc, #496]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a7b      	ldr	r2, [pc, #492]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	e01d      	b.n	8002e62 <HAL_RCC_OscConfig+0xc6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e2e:	d10c      	bne.n	8002e4a <HAL_RCC_OscConfig+0xae>
 8002e30:	4b76      	ldr	r3, [pc, #472]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a75      	ldr	r2, [pc, #468]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b73      	ldr	r3, [pc, #460]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a72      	ldr	r2, [pc, #456]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e00b      	b.n	8002e62 <HAL_RCC_OscConfig+0xc6>
 8002e4a:	4b70      	ldr	r3, [pc, #448]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a6f      	ldr	r2, [pc, #444]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6c      	ldr	r2, [pc, #432]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d013      	beq.n	8002e92 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fe69 	bl	8001b40 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e72:	f7fe fe65 	bl	8001b40 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b64      	cmp	r3, #100	; 0x64
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e1db      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e84:	4b61      	ldr	r3, [pc, #388]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0xd6>
 8002e90:	e014      	b.n	8002ebc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fe fe55 	bl	8001b40 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9a:	f7fe fe51 	bl	8001b40 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b64      	cmp	r3, #100	; 0x64
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e1c7      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eac:	4b57      	ldr	r3, [pc, #348]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f0      	bne.n	8002e9a <HAL_RCC_OscConfig+0xfe>
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d06f      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ec8:	4b50      	ldr	r3, [pc, #320]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d017      	beq.n	8002f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ed4:	4b4d      	ldr	r3, [pc, #308]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d105      	bne.n	8002eec <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ee0:	4b4a      	ldr	r3, [pc, #296]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eec:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d11c      	bne.n	8002f32 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef8:	4b44      	ldr	r3, [pc, #272]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d116      	bne.n	8002f32 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f04:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_OscConfig+0x180>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e18f      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	4b3b      	ldr	r3, [pc, #236]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4938      	ldr	r1, [pc, #224]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f30:	e03a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d020      	beq.n	8002f7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3a:	4b35      	ldr	r3, [pc, #212]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fdfe 	bl	8001b40 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f48:	f7fe fdfa 	bl	8001b40 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e170      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5a:	4b2c      	ldr	r3, [pc, #176]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4925      	ldr	r1, [pc, #148]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
 8002f7a:	e015      	b.n	8002fa8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7c:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe fddd 	bl	8001b40 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fdd9 	bl	8001b40 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e14f      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d037      	beq.n	8003024 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d016      	beq.n	8002fea <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbc:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_RCC_OscConfig+0x278>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fe fdbd 	bl	8001b40 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fca:	f7fe fdb9 	bl	8001b40 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e12f      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_OscConfig+0x270>)
 8002fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x22e>
 8002fe8:	e01c      	b.n	8003024 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_RCC_OscConfig+0x278>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe fda6 	bl	8001b40 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff6:	e00f      	b.n	8003018 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fe fda2 	bl	8001b40 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d908      	bls.n	8003018 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e118      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	42470000 	.word	0x42470000
 8003014:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003018:	4b8a      	ldr	r3, [pc, #552]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 800301a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e9      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8097 	beq.w	8003160 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003036:	4b83      	ldr	r3, [pc, #524]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10f      	bne.n	8003062 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	4b7f      	ldr	r3, [pc, #508]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	4a7e      	ldr	r2, [pc, #504]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003050:	6413      	str	r3, [r2, #64]	; 0x40
 8003052:	4b7c      	ldr	r3, [pc, #496]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800305e:	2301      	movs	r3, #1
 8003060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003062:	4b79      	ldr	r3, [pc, #484]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d118      	bne.n	80030a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306e:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307a:	f7fe fd61 	bl	8001b40 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003082:	f7fe fd5d 	bl	8001b40 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e0d3      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	4b6c      	ldr	r3, [pc, #432]	; (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x31a>
 80030a8:	4b66      	ldr	r3, [pc, #408]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	4a65      	ldr	r2, [pc, #404]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6713      	str	r3, [r2, #112]	; 0x70
 80030b4:	e01c      	b.n	80030f0 <HAL_RCC_OscConfig+0x354>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b05      	cmp	r3, #5
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x33c>
 80030be:	4b61      	ldr	r3, [pc, #388]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c2:	4a60      	ldr	r2, [pc, #384]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 80030c4:	f043 0304 	orr.w	r3, r3, #4
 80030c8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ca:	4b5e      	ldr	r3, [pc, #376]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	4a5d      	ldr	r2, [pc, #372]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6713      	str	r3, [r2, #112]	; 0x70
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0x354>
 80030d8:	4b5a      	ldr	r3, [pc, #360]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	4a59      	ldr	r2, [pc, #356]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6713      	str	r3, [r2, #112]	; 0x70
 80030e4:	4b57      	ldr	r3, [pc, #348]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e8:	4a56      	ldr	r2, [pc, #344]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 80030ea:	f023 0304 	bic.w	r3, r3, #4
 80030ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d015      	beq.n	8003124 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7fe fd22 	bl	8001b40 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003100:	f7fe fd1e 	bl	8001b40 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e092      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003116:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0ee      	beq.n	8003100 <HAL_RCC_OscConfig+0x364>
 8003122:	e014      	b.n	800314e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe fd0c 	bl	8001b40 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312a:	e00a      	b.n	8003142 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800312c:	f7fe fd08 	bl	8001b40 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e07c      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003142:	4b40      	ldr	r3, [pc, #256]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1ee      	bne.n	800312c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d105      	bne.n	8003160 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003154:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	4a3a      	ldr	r2, [pc, #232]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 800315a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d068      	beq.n	800323a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003168:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b08      	cmp	r3, #8
 8003172:	d060      	beq.n	8003236 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d145      	bne.n	8003208 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317c:	4b33      	ldr	r3, [pc, #204]	; (800324c <HAL_RCC_OscConfig+0x4b0>)
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fe fcdd 	bl	8001b40 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318a:	f7fe fcd9 	bl	8001b40 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e04f      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319c:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f0      	bne.n	800318a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69da      	ldr	r2, [r3, #28]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	019b      	lsls	r3, r3, #6
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	3b01      	subs	r3, #1
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	071b      	lsls	r3, r3, #28
 80031d4:	491b      	ldr	r1, [pc, #108]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <HAL_RCC_OscConfig+0x4b0>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fcae 	bl	8001b40 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe fcaa 	bl	8001b40 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e020      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fa:	4b12      	ldr	r3, [pc, #72]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x44c>
 8003206:	e018      	b.n	800323a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003208:	4b10      	ldr	r3, [pc, #64]	; (800324c <HAL_RCC_OscConfig+0x4b0>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe fc97 	bl	8001b40 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe fc93 	bl	8001b40 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e009      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_RCC_OscConfig+0x4a8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x47a>
 8003234:	e001      	b.n	800323a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	40007000 	.word	0x40007000
 800324c:	42470060 	.word	0x42470060

08003250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e01d      	b.n	800329e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fe faba 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3304      	adds	r3, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f000 fa38 	bl	8003704 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d007      	beq.n	80032d8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b06      	cmp	r3, #6
 8003316:	d007      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b02      	cmp	r3, #2
 800334a:	d122      	bne.n	8003392 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b02      	cmp	r3, #2
 8003358:	d11b      	bne.n	8003392 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f06f 0202 	mvn.w	r2, #2
 8003362:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f9a5 	bl	80036c8 <HAL_TIM_IC_CaptureCallback>
 800337e:	e005      	b.n	800338c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f997 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f9a8 	bl	80036dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b04      	cmp	r3, #4
 800339e:	d122      	bne.n	80033e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d11b      	bne.n	80033e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f06f 0204 	mvn.w	r2, #4
 80033b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f97b 	bl	80036c8 <HAL_TIM_IC_CaptureCallback>
 80033d2:	e005      	b.n	80033e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f96d 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f97e 	bl	80036dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d122      	bne.n	800343a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d11b      	bne.n	800343a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f06f 0208 	mvn.w	r2, #8
 800340a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2204      	movs	r2, #4
 8003410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f951 	bl	80036c8 <HAL_TIM_IC_CaptureCallback>
 8003426:	e005      	b.n	8003434 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f943 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f954 	bl	80036dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b10      	cmp	r3, #16
 8003446:	d122      	bne.n	800348e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b10      	cmp	r3, #16
 8003454:	d11b      	bne.n	800348e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f06f 0210 	mvn.w	r2, #16
 800345e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2208      	movs	r2, #8
 8003464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f927 	bl	80036c8 <HAL_TIM_IC_CaptureCallback>
 800347a:	e005      	b.n	8003488 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f919 	bl	80036b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f92a 	bl	80036dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d10e      	bne.n	80034ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d107      	bne.n	80034ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f06f 0201 	mvn.w	r2, #1
 80034b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7fe f8cb 	bl	8001650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d10e      	bne.n	80034e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d2:	2b80      	cmp	r3, #128	; 0x80
 80034d4:	d107      	bne.n	80034e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 facf 	bl	8003a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d10e      	bne.n	8003512 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d107      	bne.n	8003512 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800350a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f8ef 	bl	80036f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b20      	cmp	r3, #32
 800351e:	d10e      	bne.n	800353e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b20      	cmp	r3, #32
 800352c:	d107      	bne.n	800353e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0220 	mvn.w	r2, #32
 8003536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fa99 	bl	8003a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_TIM_ConfigClockSource+0x18>
 800355a:	2302      	movs	r3, #2
 800355c:	e0a6      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x166>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800357c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003584:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b40      	cmp	r3, #64	; 0x40
 8003594:	d067      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x120>
 8003596:	2b40      	cmp	r3, #64	; 0x40
 8003598:	d80b      	bhi.n	80035b2 <HAL_TIM_ConfigClockSource+0x6c>
 800359a:	2b10      	cmp	r3, #16
 800359c:	d073      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0x140>
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d802      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x62>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d06f      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80035a6:	e078      	b.n	800369a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d06c      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0x140>
 80035ac:	2b30      	cmp	r3, #48	; 0x30
 80035ae:	d06a      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80035b0:	e073      	b.n	800369a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035b2:	2b70      	cmp	r3, #112	; 0x70
 80035b4:	d00d      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x8c>
 80035b6:	2b70      	cmp	r3, #112	; 0x70
 80035b8:	d804      	bhi.n	80035c4 <HAL_TIM_ConfigClockSource+0x7e>
 80035ba:	2b50      	cmp	r3, #80	; 0x50
 80035bc:	d033      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0xe0>
 80035be:	2b60      	cmp	r3, #96	; 0x60
 80035c0:	d041      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80035c2:	e06a      	b.n	800369a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c8:	d066      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0x152>
 80035ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ce:	d017      	beq.n	8003600 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80035d0:	e063      	b.n	800369a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6899      	ldr	r1, [r3, #8]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f000 f9a9 	bl	8003938 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	609a      	str	r2, [r3, #8]
      break;
 80035fe:	e04c      	b.n	800369a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6899      	ldr	r1, [r3, #8]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f000 f992 	bl	8003938 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003622:	609a      	str	r2, [r3, #8]
      break;
 8003624:	e039      	b.n	800369a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	461a      	mov	r2, r3
 8003634:	f000 f906 	bl	8003844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2150      	movs	r1, #80	; 0x50
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f95f 	bl	8003902 <TIM_ITRx_SetConfig>
      break;
 8003644:	e029      	b.n	800369a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6859      	ldr	r1, [r3, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	461a      	mov	r2, r3
 8003654:	f000 f925 	bl	80038a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2160      	movs	r1, #96	; 0x60
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f94f 	bl	8003902 <TIM_ITRx_SetConfig>
      break;
 8003664:	e019      	b.n	800369a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	461a      	mov	r2, r3
 8003674:	f000 f8e6 	bl	8003844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2140      	movs	r1, #64	; 0x40
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f93f 	bl	8003902 <TIM_ITRx_SetConfig>
      break;
 8003684:	e009      	b.n	800369a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4619      	mov	r1, r3
 8003690:	4610      	mov	r0, r2
 8003692:	f000 f936 	bl	8003902 <TIM_ITRx_SetConfig>
      break;
 8003696:	e000      	b.n	800369a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003698:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a40      	ldr	r2, [pc, #256]	; (8003818 <TIM_Base_SetConfig+0x114>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d013      	beq.n	8003744 <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003722:	d00f      	beq.n	8003744 <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a3d      	ldr	r2, [pc, #244]	; (800381c <TIM_Base_SetConfig+0x118>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00b      	beq.n	8003744 <TIM_Base_SetConfig+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <TIM_Base_SetConfig+0x11c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d007      	beq.n	8003744 <TIM_Base_SetConfig+0x40>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a3b      	ldr	r2, [pc, #236]	; (8003824 <TIM_Base_SetConfig+0x120>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <TIM_Base_SetConfig+0x40>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a3a      	ldr	r2, [pc, #232]	; (8003828 <TIM_Base_SetConfig+0x124>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d108      	bne.n	8003756 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <TIM_Base_SetConfig+0x114>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d02b      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d027      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2c      	ldr	r2, [pc, #176]	; (800381c <TIM_Base_SetConfig+0x118>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d023      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a2b      	ldr	r2, [pc, #172]	; (8003820 <TIM_Base_SetConfig+0x11c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d01f      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <TIM_Base_SetConfig+0x120>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d01b      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a29      	ldr	r2, [pc, #164]	; (8003828 <TIM_Base_SetConfig+0x124>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d017      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a28      	ldr	r2, [pc, #160]	; (800382c <TIM_Base_SetConfig+0x128>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a27      	ldr	r2, [pc, #156]	; (8003830 <TIM_Base_SetConfig+0x12c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00f      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a26      	ldr	r2, [pc, #152]	; (8003834 <TIM_Base_SetConfig+0x130>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00b      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a25      	ldr	r2, [pc, #148]	; (8003838 <TIM_Base_SetConfig+0x134>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a24      	ldr	r2, [pc, #144]	; (800383c <TIM_Base_SetConfig+0x138>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d003      	beq.n	80037b6 <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a23      	ldr	r2, [pc, #140]	; (8003840 <TIM_Base_SetConfig+0x13c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d108      	bne.n	80037c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <TIM_Base_SetConfig+0x114>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <TIM_Base_SetConfig+0xf8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a0c      	ldr	r2, [pc, #48]	; (8003828 <TIM_Base_SetConfig+0x124>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d103      	bne.n	8003804 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	615a      	str	r2, [r3, #20]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40010000 	.word	0x40010000
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800
 8003824:	40000c00 	.word	0x40000c00
 8003828:	40010400 	.word	0x40010400
 800382c:	40014000 	.word	0x40014000
 8003830:	40014400 	.word	0x40014400
 8003834:	40014800 	.word	0x40014800
 8003838:	40001800 	.word	0x40001800
 800383c:	40001c00 	.word	0x40001c00
 8003840:	40002000 	.word	0x40002000

08003844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f023 030a 	bic.w	r3, r3, #10
 8003880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b087      	sub	sp, #28
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f023 0210 	bic.w	r2, r3, #16
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	031b      	lsls	r3, r3, #12
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	621a      	str	r2, [r3, #32]
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	f043 0307 	orr.w	r3, r3, #7
 8003924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	609a      	str	r2, [r3, #8]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	021a      	lsls	r2, r3, #8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	431a      	orrs	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4313      	orrs	r3, r2
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	609a      	str	r2, [r3, #8]
}
 800396c:	bf00      	nop
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800398c:	2302      	movs	r3, #2
 800398e:	e05a      	b.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a21      	ldr	r2, [pc, #132]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d022      	beq.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d01d      	beq.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a1d      	ldr	r2, [pc, #116]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d018      	beq.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00e      	beq.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10c      	bne.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40000c00 	.word	0x40000c00
 8003a64:	40010400 	.word	0x40010400
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40001800 	.word	0x40001800

08003a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e03f      	b.n	8003b2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd fed2 	bl	8001868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2224      	movs	r2, #36	; 0x24
 8003ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f90b 	bl	8003cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b088      	sub	sp, #32
 8003b36:	af02      	add	r7, sp, #8
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	f040 8083 	bne.w	8003c5a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_UART_Transmit+0x2e>
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e07b      	b.n	8003c5c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_UART_Transmit+0x40>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e074      	b.n	8003c5c <HAL_UART_Transmit+0x12a>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2221      	movs	r2, #33	; 0x21
 8003b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b88:	f7fd ffda 	bl	8001b40 <HAL_GetTick>
 8003b8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	88fa      	ldrh	r2, [r7, #6]
 8003b98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003ba2:	e042      	b.n	8003c2a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bba:	d122      	bne.n	8003c02 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f84c 	bl	8003c64 <UART_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e042      	b.n	8003c5c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003be8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	e017      	b.n	8003c2a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	e013      	b.n	8003c2a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2180      	movs	r1, #128	; 0x80
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f829 	bl	8003c64 <UART_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e01f      	b.n	8003c5c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	60ba      	str	r2, [r7, #8]
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1b7      	bne.n	8003ba4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2140      	movs	r1, #64	; 0x40
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f810 	bl	8003c64 <UART_WaitOnFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e006      	b.n	8003c5c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e000      	b.n	8003c5c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
  }
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c74:	e02c      	b.n	8003cd0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d028      	beq.n	8003cd0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c84:	f7fd ff5c 	bl	8001b40 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d21d      	bcs.n	8003cd0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ca2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e00f      	b.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d0c3      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d3a:	f023 030c 	bic.w	r3, r3, #12
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d66:	f040 818b 	bne.w	8004080 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4ac1      	ldr	r2, [pc, #772]	; (8004074 <UART_SetConfig+0x37c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d005      	beq.n	8003d80 <UART_SetConfig+0x88>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4abf      	ldr	r2, [pc, #764]	; (8004078 <UART_SetConfig+0x380>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	f040 80bd 	bne.w	8003efa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d80:	f7fe fe58 	bl	8002a34 <HAL_RCC_GetPCLK2Freq>
 8003d84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	461d      	mov	r5, r3
 8003d8a:	f04f 0600 	mov.w	r6, #0
 8003d8e:	46a8      	mov	r8, r5
 8003d90:	46b1      	mov	r9, r6
 8003d92:	eb18 0308 	adds.w	r3, r8, r8
 8003d96:	eb49 0409 	adc.w	r4, r9, r9
 8003d9a:	4698      	mov	r8, r3
 8003d9c:	46a1      	mov	r9, r4
 8003d9e:	eb18 0805 	adds.w	r8, r8, r5
 8003da2:	eb49 0906 	adc.w	r9, r9, r6
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003db2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003db6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dba:	4688      	mov	r8, r1
 8003dbc:	4691      	mov	r9, r2
 8003dbe:	eb18 0005 	adds.w	r0, r8, r5
 8003dc2:	eb49 0106 	adc.w	r1, r9, r6
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	461d      	mov	r5, r3
 8003dcc:	f04f 0600 	mov.w	r6, #0
 8003dd0:	196b      	adds	r3, r5, r5
 8003dd2:	eb46 0406 	adc.w	r4, r6, r6
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4623      	mov	r3, r4
 8003dda:	f7fc ff0f 	bl	8000bfc <__aeabi_uldivmod>
 8003dde:	4603      	mov	r3, r0
 8003de0:	460c      	mov	r4, r1
 8003de2:	461a      	mov	r2, r3
 8003de4:	4ba5      	ldr	r3, [pc, #660]	; (800407c <UART_SetConfig+0x384>)
 8003de6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	461d      	mov	r5, r3
 8003df4:	f04f 0600 	mov.w	r6, #0
 8003df8:	46a9      	mov	r9, r5
 8003dfa:	46b2      	mov	sl, r6
 8003dfc:	eb19 0309 	adds.w	r3, r9, r9
 8003e00:	eb4a 040a 	adc.w	r4, sl, sl
 8003e04:	4699      	mov	r9, r3
 8003e06:	46a2      	mov	sl, r4
 8003e08:	eb19 0905 	adds.w	r9, r9, r5
 8003e0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e10:	f04f 0100 	mov.w	r1, #0
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e24:	4689      	mov	r9, r1
 8003e26:	4692      	mov	sl, r2
 8003e28:	eb19 0005 	adds.w	r0, r9, r5
 8003e2c:	eb4a 0106 	adc.w	r1, sl, r6
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	461d      	mov	r5, r3
 8003e36:	f04f 0600 	mov.w	r6, #0
 8003e3a:	196b      	adds	r3, r5, r5
 8003e3c:	eb46 0406 	adc.w	r4, r6, r6
 8003e40:	461a      	mov	r2, r3
 8003e42:	4623      	mov	r3, r4
 8003e44:	f7fc feda 	bl	8000bfc <__aeabi_uldivmod>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b8b      	ldr	r3, [pc, #556]	; (800407c <UART_SetConfig+0x384>)
 8003e50:	fba3 1302 	umull	r1, r3, r3, r2
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	2164      	movs	r1, #100	; 0x64
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	3332      	adds	r3, #50	; 0x32
 8003e62:	4a86      	ldr	r2, [pc, #536]	; (800407c <UART_SetConfig+0x384>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e70:	4498      	add	r8, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	461d      	mov	r5, r3
 8003e76:	f04f 0600 	mov.w	r6, #0
 8003e7a:	46a9      	mov	r9, r5
 8003e7c:	46b2      	mov	sl, r6
 8003e7e:	eb19 0309 	adds.w	r3, r9, r9
 8003e82:	eb4a 040a 	adc.w	r4, sl, sl
 8003e86:	4699      	mov	r9, r3
 8003e88:	46a2      	mov	sl, r4
 8003e8a:	eb19 0905 	adds.w	r9, r9, r5
 8003e8e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e92:	f04f 0100 	mov.w	r1, #0
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ea2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ea6:	4689      	mov	r9, r1
 8003ea8:	4692      	mov	sl, r2
 8003eaa:	eb19 0005 	adds.w	r0, r9, r5
 8003eae:	eb4a 0106 	adc.w	r1, sl, r6
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	461d      	mov	r5, r3
 8003eb8:	f04f 0600 	mov.w	r6, #0
 8003ebc:	196b      	adds	r3, r5, r5
 8003ebe:	eb46 0406 	adc.w	r4, r6, r6
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	f7fc fe99 	bl	8000bfc <__aeabi_uldivmod>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	460c      	mov	r4, r1
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b6a      	ldr	r3, [pc, #424]	; (800407c <UART_SetConfig+0x384>)
 8003ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	2164      	movs	r1, #100	; 0x64
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	3332      	adds	r3, #50	; 0x32
 8003ee4:	4a65      	ldr	r2, [pc, #404]	; (800407c <UART_SetConfig+0x384>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	f003 0207 	and.w	r2, r3, #7
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4442      	add	r2, r8
 8003ef6:	609a      	str	r2, [r3, #8]
 8003ef8:	e26f      	b.n	80043da <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003efa:	f7fe fd87 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 8003efe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	461d      	mov	r5, r3
 8003f04:	f04f 0600 	mov.w	r6, #0
 8003f08:	46a8      	mov	r8, r5
 8003f0a:	46b1      	mov	r9, r6
 8003f0c:	eb18 0308 	adds.w	r3, r8, r8
 8003f10:	eb49 0409 	adc.w	r4, r9, r9
 8003f14:	4698      	mov	r8, r3
 8003f16:	46a1      	mov	r9, r4
 8003f18:	eb18 0805 	adds.w	r8, r8, r5
 8003f1c:	eb49 0906 	adc.w	r9, r9, r6
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f34:	4688      	mov	r8, r1
 8003f36:	4691      	mov	r9, r2
 8003f38:	eb18 0005 	adds.w	r0, r8, r5
 8003f3c:	eb49 0106 	adc.w	r1, r9, r6
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	461d      	mov	r5, r3
 8003f46:	f04f 0600 	mov.w	r6, #0
 8003f4a:	196b      	adds	r3, r5, r5
 8003f4c:	eb46 0406 	adc.w	r4, r6, r6
 8003f50:	461a      	mov	r2, r3
 8003f52:	4623      	mov	r3, r4
 8003f54:	f7fc fe52 	bl	8000bfc <__aeabi_uldivmod>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <UART_SetConfig+0x384>)
 8003f60:	fba3 2302 	umull	r2, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	461d      	mov	r5, r3
 8003f6e:	f04f 0600 	mov.w	r6, #0
 8003f72:	46a9      	mov	r9, r5
 8003f74:	46b2      	mov	sl, r6
 8003f76:	eb19 0309 	adds.w	r3, r9, r9
 8003f7a:	eb4a 040a 	adc.w	r4, sl, sl
 8003f7e:	4699      	mov	r9, r3
 8003f80:	46a2      	mov	sl, r4
 8003f82:	eb19 0905 	adds.w	r9, r9, r5
 8003f86:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f8a:	f04f 0100 	mov.w	r1, #0
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f9e:	4689      	mov	r9, r1
 8003fa0:	4692      	mov	sl, r2
 8003fa2:	eb19 0005 	adds.w	r0, r9, r5
 8003fa6:	eb4a 0106 	adc.w	r1, sl, r6
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	461d      	mov	r5, r3
 8003fb0:	f04f 0600 	mov.w	r6, #0
 8003fb4:	196b      	adds	r3, r5, r5
 8003fb6:	eb46 0406 	adc.w	r4, r6, r6
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4623      	mov	r3, r4
 8003fbe:	f7fc fe1d 	bl	8000bfc <__aeabi_uldivmod>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b2c      	ldr	r3, [pc, #176]	; (800407c <UART_SetConfig+0x384>)
 8003fca:	fba3 1302 	umull	r1, r3, r3, r2
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2164      	movs	r1, #100	; 0x64
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	3332      	adds	r3, #50	; 0x32
 8003fdc:	4a27      	ldr	r2, [pc, #156]	; (800407c <UART_SetConfig+0x384>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fea:	4498      	add	r8, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	461d      	mov	r5, r3
 8003ff0:	f04f 0600 	mov.w	r6, #0
 8003ff4:	46a9      	mov	r9, r5
 8003ff6:	46b2      	mov	sl, r6
 8003ff8:	eb19 0309 	adds.w	r3, r9, r9
 8003ffc:	eb4a 040a 	adc.w	r4, sl, sl
 8004000:	4699      	mov	r9, r3
 8004002:	46a2      	mov	sl, r4
 8004004:	eb19 0905 	adds.w	r9, r9, r5
 8004008:	eb4a 0a06 	adc.w	sl, sl, r6
 800400c:	f04f 0100 	mov.w	r1, #0
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004018:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800401c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004020:	4689      	mov	r9, r1
 8004022:	4692      	mov	sl, r2
 8004024:	eb19 0005 	adds.w	r0, r9, r5
 8004028:	eb4a 0106 	adc.w	r1, sl, r6
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	461d      	mov	r5, r3
 8004032:	f04f 0600 	mov.w	r6, #0
 8004036:	196b      	adds	r3, r5, r5
 8004038:	eb46 0406 	adc.w	r4, r6, r6
 800403c:	461a      	mov	r2, r3
 800403e:	4623      	mov	r3, r4
 8004040:	f7fc fddc 	bl	8000bfc <__aeabi_uldivmod>
 8004044:	4603      	mov	r3, r0
 8004046:	460c      	mov	r4, r1
 8004048:	461a      	mov	r2, r3
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <UART_SetConfig+0x384>)
 800404c:	fba3 1302 	umull	r1, r3, r3, r2
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	2164      	movs	r1, #100	; 0x64
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	3332      	adds	r3, #50	; 0x32
 800405e:	4a07      	ldr	r2, [pc, #28]	; (800407c <UART_SetConfig+0x384>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	f003 0207 	and.w	r2, r3, #7
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4442      	add	r2, r8
 8004070:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004072:	e1b2      	b.n	80043da <UART_SetConfig+0x6e2>
 8004074:	40011000 	.word	0x40011000
 8004078:	40011400 	.word	0x40011400
 800407c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4ad7      	ldr	r2, [pc, #860]	; (80043e4 <UART_SetConfig+0x6ec>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d005      	beq.n	8004096 <UART_SetConfig+0x39e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4ad6      	ldr	r2, [pc, #856]	; (80043e8 <UART_SetConfig+0x6f0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	f040 80d1 	bne.w	8004238 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004096:	f7fe fccd 	bl	8002a34 <HAL_RCC_GetPCLK2Freq>
 800409a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	469a      	mov	sl, r3
 80040a0:	f04f 0b00 	mov.w	fp, #0
 80040a4:	46d0      	mov	r8, sl
 80040a6:	46d9      	mov	r9, fp
 80040a8:	eb18 0308 	adds.w	r3, r8, r8
 80040ac:	eb49 0409 	adc.w	r4, r9, r9
 80040b0:	4698      	mov	r8, r3
 80040b2:	46a1      	mov	r9, r4
 80040b4:	eb18 080a 	adds.w	r8, r8, sl
 80040b8:	eb49 090b 	adc.w	r9, r9, fp
 80040bc:	f04f 0100 	mov.w	r1, #0
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040d0:	4688      	mov	r8, r1
 80040d2:	4691      	mov	r9, r2
 80040d4:	eb1a 0508 	adds.w	r5, sl, r8
 80040d8:	eb4b 0609 	adc.w	r6, fp, r9
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4619      	mov	r1, r3
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	f04f 0400 	mov.w	r4, #0
 80040ee:	0094      	lsls	r4, r2, #2
 80040f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040f4:	008b      	lsls	r3, r1, #2
 80040f6:	461a      	mov	r2, r3
 80040f8:	4623      	mov	r3, r4
 80040fa:	4628      	mov	r0, r5
 80040fc:	4631      	mov	r1, r6
 80040fe:	f7fc fd7d 	bl	8000bfc <__aeabi_uldivmod>
 8004102:	4603      	mov	r3, r0
 8004104:	460c      	mov	r4, r1
 8004106:	461a      	mov	r2, r3
 8004108:	4bb8      	ldr	r3, [pc, #736]	; (80043ec <UART_SetConfig+0x6f4>)
 800410a:	fba3 2302 	umull	r2, r3, r3, r2
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	469b      	mov	fp, r3
 8004118:	f04f 0c00 	mov.w	ip, #0
 800411c:	46d9      	mov	r9, fp
 800411e:	46e2      	mov	sl, ip
 8004120:	eb19 0309 	adds.w	r3, r9, r9
 8004124:	eb4a 040a 	adc.w	r4, sl, sl
 8004128:	4699      	mov	r9, r3
 800412a:	46a2      	mov	sl, r4
 800412c:	eb19 090b 	adds.w	r9, r9, fp
 8004130:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004140:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004144:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004148:	4689      	mov	r9, r1
 800414a:	4692      	mov	sl, r2
 800414c:	eb1b 0509 	adds.w	r5, fp, r9
 8004150:	eb4c 060a 	adc.w	r6, ip, sl
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4619      	mov	r1, r3
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	f04f 0400 	mov.w	r4, #0
 8004166:	0094      	lsls	r4, r2, #2
 8004168:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800416c:	008b      	lsls	r3, r1, #2
 800416e:	461a      	mov	r2, r3
 8004170:	4623      	mov	r3, r4
 8004172:	4628      	mov	r0, r5
 8004174:	4631      	mov	r1, r6
 8004176:	f7fc fd41 	bl	8000bfc <__aeabi_uldivmod>
 800417a:	4603      	mov	r3, r0
 800417c:	460c      	mov	r4, r1
 800417e:	461a      	mov	r2, r3
 8004180:	4b9a      	ldr	r3, [pc, #616]	; (80043ec <UART_SetConfig+0x6f4>)
 8004182:	fba3 1302 	umull	r1, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2164      	movs	r1, #100	; 0x64
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	; 0x32
 8004194:	4a95      	ldr	r2, [pc, #596]	; (80043ec <UART_SetConfig+0x6f4>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a0:	4498      	add	r8, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	469b      	mov	fp, r3
 80041a6:	f04f 0c00 	mov.w	ip, #0
 80041aa:	46d9      	mov	r9, fp
 80041ac:	46e2      	mov	sl, ip
 80041ae:	eb19 0309 	adds.w	r3, r9, r9
 80041b2:	eb4a 040a 	adc.w	r4, sl, sl
 80041b6:	4699      	mov	r9, r3
 80041b8:	46a2      	mov	sl, r4
 80041ba:	eb19 090b 	adds.w	r9, r9, fp
 80041be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041d6:	4689      	mov	r9, r1
 80041d8:	4692      	mov	sl, r2
 80041da:	eb1b 0509 	adds.w	r5, fp, r9
 80041de:	eb4c 060a 	adc.w	r6, ip, sl
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4619      	mov	r1, r3
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	f04f 0400 	mov.w	r4, #0
 80041f4:	0094      	lsls	r4, r2, #2
 80041f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041fa:	008b      	lsls	r3, r1, #2
 80041fc:	461a      	mov	r2, r3
 80041fe:	4623      	mov	r3, r4
 8004200:	4628      	mov	r0, r5
 8004202:	4631      	mov	r1, r6
 8004204:	f7fc fcfa 	bl	8000bfc <__aeabi_uldivmod>
 8004208:	4603      	mov	r3, r0
 800420a:	460c      	mov	r4, r1
 800420c:	461a      	mov	r2, r3
 800420e:	4b77      	ldr	r3, [pc, #476]	; (80043ec <UART_SetConfig+0x6f4>)
 8004210:	fba3 1302 	umull	r1, r3, r3, r2
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	2164      	movs	r1, #100	; 0x64
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	3332      	adds	r3, #50	; 0x32
 8004222:	4a72      	ldr	r2, [pc, #456]	; (80043ec <UART_SetConfig+0x6f4>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	f003 020f 	and.w	r2, r3, #15
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4442      	add	r2, r8
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	e0d0      	b.n	80043da <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe fbe8 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 800423c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	469a      	mov	sl, r3
 8004242:	f04f 0b00 	mov.w	fp, #0
 8004246:	46d0      	mov	r8, sl
 8004248:	46d9      	mov	r9, fp
 800424a:	eb18 0308 	adds.w	r3, r8, r8
 800424e:	eb49 0409 	adc.w	r4, r9, r9
 8004252:	4698      	mov	r8, r3
 8004254:	46a1      	mov	r9, r4
 8004256:	eb18 080a 	adds.w	r8, r8, sl
 800425a:	eb49 090b 	adc.w	r9, r9, fp
 800425e:	f04f 0100 	mov.w	r1, #0
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800426a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800426e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004272:	4688      	mov	r8, r1
 8004274:	4691      	mov	r9, r2
 8004276:	eb1a 0508 	adds.w	r5, sl, r8
 800427a:	eb4b 0609 	adc.w	r6, fp, r9
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4619      	mov	r1, r3
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	f04f 0400 	mov.w	r4, #0
 8004290:	0094      	lsls	r4, r2, #2
 8004292:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004296:	008b      	lsls	r3, r1, #2
 8004298:	461a      	mov	r2, r3
 800429a:	4623      	mov	r3, r4
 800429c:	4628      	mov	r0, r5
 800429e:	4631      	mov	r1, r6
 80042a0:	f7fc fcac 	bl	8000bfc <__aeabi_uldivmod>
 80042a4:	4603      	mov	r3, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b50      	ldr	r3, [pc, #320]	; (80043ec <UART_SetConfig+0x6f4>)
 80042ac:	fba3 2302 	umull	r2, r3, r3, r2
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	469b      	mov	fp, r3
 80042ba:	f04f 0c00 	mov.w	ip, #0
 80042be:	46d9      	mov	r9, fp
 80042c0:	46e2      	mov	sl, ip
 80042c2:	eb19 0309 	adds.w	r3, r9, r9
 80042c6:	eb4a 040a 	adc.w	r4, sl, sl
 80042ca:	4699      	mov	r9, r3
 80042cc:	46a2      	mov	sl, r4
 80042ce:	eb19 090b 	adds.w	r9, r9, fp
 80042d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042d6:	f04f 0100 	mov.w	r1, #0
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042ea:	4689      	mov	r9, r1
 80042ec:	4692      	mov	sl, r2
 80042ee:	eb1b 0509 	adds.w	r5, fp, r9
 80042f2:	eb4c 060a 	adc.w	r6, ip, sl
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4619      	mov	r1, r3
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	f04f 0400 	mov.w	r4, #0
 8004308:	0094      	lsls	r4, r2, #2
 800430a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800430e:	008b      	lsls	r3, r1, #2
 8004310:	461a      	mov	r2, r3
 8004312:	4623      	mov	r3, r4
 8004314:	4628      	mov	r0, r5
 8004316:	4631      	mov	r1, r6
 8004318:	f7fc fc70 	bl	8000bfc <__aeabi_uldivmod>
 800431c:	4603      	mov	r3, r0
 800431e:	460c      	mov	r4, r1
 8004320:	461a      	mov	r2, r3
 8004322:	4b32      	ldr	r3, [pc, #200]	; (80043ec <UART_SetConfig+0x6f4>)
 8004324:	fba3 1302 	umull	r1, r3, r3, r2
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	2164      	movs	r1, #100	; 0x64
 800432c:	fb01 f303 	mul.w	r3, r1, r3
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	3332      	adds	r3, #50	; 0x32
 8004336:	4a2d      	ldr	r2, [pc, #180]	; (80043ec <UART_SetConfig+0x6f4>)
 8004338:	fba2 2303 	umull	r2, r3, r2, r3
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004342:	4498      	add	r8, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	469b      	mov	fp, r3
 8004348:	f04f 0c00 	mov.w	ip, #0
 800434c:	46d9      	mov	r9, fp
 800434e:	46e2      	mov	sl, ip
 8004350:	eb19 0309 	adds.w	r3, r9, r9
 8004354:	eb4a 040a 	adc.w	r4, sl, sl
 8004358:	4699      	mov	r9, r3
 800435a:	46a2      	mov	sl, r4
 800435c:	eb19 090b 	adds.w	r9, r9, fp
 8004360:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004364:	f04f 0100 	mov.w	r1, #0
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004370:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004374:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004378:	4689      	mov	r9, r1
 800437a:	4692      	mov	sl, r2
 800437c:	eb1b 0509 	adds.w	r5, fp, r9
 8004380:	eb4c 060a 	adc.w	r6, ip, sl
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4619      	mov	r1, r3
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	f04f 0400 	mov.w	r4, #0
 8004396:	0094      	lsls	r4, r2, #2
 8004398:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800439c:	008b      	lsls	r3, r1, #2
 800439e:	461a      	mov	r2, r3
 80043a0:	4623      	mov	r3, r4
 80043a2:	4628      	mov	r0, r5
 80043a4:	4631      	mov	r1, r6
 80043a6:	f7fc fc29 	bl	8000bfc <__aeabi_uldivmod>
 80043aa:	4603      	mov	r3, r0
 80043ac:	460c      	mov	r4, r1
 80043ae:	461a      	mov	r2, r3
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <UART_SetConfig+0x6f4>)
 80043b2:	fba3 1302 	umull	r1, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2164      	movs	r1, #100	; 0x64
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	3332      	adds	r3, #50	; 0x32
 80043c4:	4a09      	ldr	r2, [pc, #36]	; (80043ec <UART_SetConfig+0x6f4>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	f003 020f 	and.w	r2, r3, #15
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4442      	add	r2, r8
 80043d6:	609a      	str	r2, [r3, #8]
}
 80043d8:	e7ff      	b.n	80043da <UART_SetConfig+0x6e2>
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e4:	40011000 	.word	0x40011000
 80043e8:	40011400 	.word	0x40011400
 80043ec:	51eb851f 	.word	0x51eb851f

080043f0 <__errno>:
 80043f0:	4b01      	ldr	r3, [pc, #4]	; (80043f8 <__errno+0x8>)
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000010 	.word	0x20000010

080043fc <__libc_init_array>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	4e0d      	ldr	r6, [pc, #52]	; (8004434 <__libc_init_array+0x38>)
 8004400:	4c0d      	ldr	r4, [pc, #52]	; (8004438 <__libc_init_array+0x3c>)
 8004402:	1ba4      	subs	r4, r4, r6
 8004404:	10a4      	asrs	r4, r4, #2
 8004406:	2500      	movs	r5, #0
 8004408:	42a5      	cmp	r5, r4
 800440a:	d109      	bne.n	8004420 <__libc_init_array+0x24>
 800440c:	4e0b      	ldr	r6, [pc, #44]	; (800443c <__libc_init_array+0x40>)
 800440e:	4c0c      	ldr	r4, [pc, #48]	; (8004440 <__libc_init_array+0x44>)
 8004410:	f001 fc38 	bl	8005c84 <_init>
 8004414:	1ba4      	subs	r4, r4, r6
 8004416:	10a4      	asrs	r4, r4, #2
 8004418:	2500      	movs	r5, #0
 800441a:	42a5      	cmp	r5, r4
 800441c:	d105      	bne.n	800442a <__libc_init_array+0x2e>
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004424:	4798      	blx	r3
 8004426:	3501      	adds	r5, #1
 8004428:	e7ee      	b.n	8004408 <__libc_init_array+0xc>
 800442a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800442e:	4798      	blx	r3
 8004430:	3501      	adds	r5, #1
 8004432:	e7f2      	b.n	800441a <__libc_init_array+0x1e>
 8004434:	08005ee0 	.word	0x08005ee0
 8004438:	08005ee0 	.word	0x08005ee0
 800443c:	08005ee0 	.word	0x08005ee0
 8004440:	08005ee4 	.word	0x08005ee4

08004444 <memset>:
 8004444:	4402      	add	r2, r0
 8004446:	4603      	mov	r3, r0
 8004448:	4293      	cmp	r3, r2
 800444a:	d100      	bne.n	800444e <memset+0xa>
 800444c:	4770      	bx	lr
 800444e:	f803 1b01 	strb.w	r1, [r3], #1
 8004452:	e7f9      	b.n	8004448 <memset+0x4>

08004454 <siprintf>:
 8004454:	b40e      	push	{r1, r2, r3}
 8004456:	b500      	push	{lr}
 8004458:	b09c      	sub	sp, #112	; 0x70
 800445a:	ab1d      	add	r3, sp, #116	; 0x74
 800445c:	9002      	str	r0, [sp, #8]
 800445e:	9006      	str	r0, [sp, #24]
 8004460:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004464:	4809      	ldr	r0, [pc, #36]	; (800448c <siprintf+0x38>)
 8004466:	9107      	str	r1, [sp, #28]
 8004468:	9104      	str	r1, [sp, #16]
 800446a:	4909      	ldr	r1, [pc, #36]	; (8004490 <siprintf+0x3c>)
 800446c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004470:	9105      	str	r1, [sp, #20]
 8004472:	6800      	ldr	r0, [r0, #0]
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	a902      	add	r1, sp, #8
 8004478:	f000 f866 	bl	8004548 <_svfiprintf_r>
 800447c:	9b02      	ldr	r3, [sp, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	b01c      	add	sp, #112	; 0x70
 8004484:	f85d eb04 	ldr.w	lr, [sp], #4
 8004488:	b003      	add	sp, #12
 800448a:	4770      	bx	lr
 800448c:	20000010 	.word	0x20000010
 8004490:	ffff0208 	.word	0xffff0208

08004494 <__ssputs_r>:
 8004494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004498:	688e      	ldr	r6, [r1, #8]
 800449a:	429e      	cmp	r6, r3
 800449c:	4682      	mov	sl, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	4690      	mov	r8, r2
 80044a2:	4699      	mov	r9, r3
 80044a4:	d837      	bhi.n	8004516 <__ssputs_r+0x82>
 80044a6:	898a      	ldrh	r2, [r1, #12]
 80044a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044ac:	d031      	beq.n	8004512 <__ssputs_r+0x7e>
 80044ae:	6825      	ldr	r5, [r4, #0]
 80044b0:	6909      	ldr	r1, [r1, #16]
 80044b2:	1a6f      	subs	r7, r5, r1
 80044b4:	6965      	ldr	r5, [r4, #20]
 80044b6:	2302      	movs	r3, #2
 80044b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80044c0:	f109 0301 	add.w	r3, r9, #1
 80044c4:	443b      	add	r3, r7
 80044c6:	429d      	cmp	r5, r3
 80044c8:	bf38      	it	cc
 80044ca:	461d      	movcc	r5, r3
 80044cc:	0553      	lsls	r3, r2, #21
 80044ce:	d530      	bpl.n	8004532 <__ssputs_r+0x9e>
 80044d0:	4629      	mov	r1, r5
 80044d2:	f000 fb2b 	bl	8004b2c <_malloc_r>
 80044d6:	4606      	mov	r6, r0
 80044d8:	b950      	cbnz	r0, 80044f0 <__ssputs_r+0x5c>
 80044da:	230c      	movs	r3, #12
 80044dc:	f8ca 3000 	str.w	r3, [sl]
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e6:	81a3      	strh	r3, [r4, #12]
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f0:	463a      	mov	r2, r7
 80044f2:	6921      	ldr	r1, [r4, #16]
 80044f4:	f000 faa8 	bl	8004a48 <memcpy>
 80044f8:	89a3      	ldrh	r3, [r4, #12]
 80044fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004502:	81a3      	strh	r3, [r4, #12]
 8004504:	6126      	str	r6, [r4, #16]
 8004506:	6165      	str	r5, [r4, #20]
 8004508:	443e      	add	r6, r7
 800450a:	1bed      	subs	r5, r5, r7
 800450c:	6026      	str	r6, [r4, #0]
 800450e:	60a5      	str	r5, [r4, #8]
 8004510:	464e      	mov	r6, r9
 8004512:	454e      	cmp	r6, r9
 8004514:	d900      	bls.n	8004518 <__ssputs_r+0x84>
 8004516:	464e      	mov	r6, r9
 8004518:	4632      	mov	r2, r6
 800451a:	4641      	mov	r1, r8
 800451c:	6820      	ldr	r0, [r4, #0]
 800451e:	f000 fa9e 	bl	8004a5e <memmove>
 8004522:	68a3      	ldr	r3, [r4, #8]
 8004524:	1b9b      	subs	r3, r3, r6
 8004526:	60a3      	str	r3, [r4, #8]
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	441e      	add	r6, r3
 800452c:	6026      	str	r6, [r4, #0]
 800452e:	2000      	movs	r0, #0
 8004530:	e7dc      	b.n	80044ec <__ssputs_r+0x58>
 8004532:	462a      	mov	r2, r5
 8004534:	f000 fb54 	bl	8004be0 <_realloc_r>
 8004538:	4606      	mov	r6, r0
 800453a:	2800      	cmp	r0, #0
 800453c:	d1e2      	bne.n	8004504 <__ssputs_r+0x70>
 800453e:	6921      	ldr	r1, [r4, #16]
 8004540:	4650      	mov	r0, sl
 8004542:	f000 faa5 	bl	8004a90 <_free_r>
 8004546:	e7c8      	b.n	80044da <__ssputs_r+0x46>

08004548 <_svfiprintf_r>:
 8004548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454c:	461d      	mov	r5, r3
 800454e:	898b      	ldrh	r3, [r1, #12]
 8004550:	061f      	lsls	r7, r3, #24
 8004552:	b09d      	sub	sp, #116	; 0x74
 8004554:	4680      	mov	r8, r0
 8004556:	460c      	mov	r4, r1
 8004558:	4616      	mov	r6, r2
 800455a:	d50f      	bpl.n	800457c <_svfiprintf_r+0x34>
 800455c:	690b      	ldr	r3, [r1, #16]
 800455e:	b96b      	cbnz	r3, 800457c <_svfiprintf_r+0x34>
 8004560:	2140      	movs	r1, #64	; 0x40
 8004562:	f000 fae3 	bl	8004b2c <_malloc_r>
 8004566:	6020      	str	r0, [r4, #0]
 8004568:	6120      	str	r0, [r4, #16]
 800456a:	b928      	cbnz	r0, 8004578 <_svfiprintf_r+0x30>
 800456c:	230c      	movs	r3, #12
 800456e:	f8c8 3000 	str.w	r3, [r8]
 8004572:	f04f 30ff 	mov.w	r0, #4294967295
 8004576:	e0c8      	b.n	800470a <_svfiprintf_r+0x1c2>
 8004578:	2340      	movs	r3, #64	; 0x40
 800457a:	6163      	str	r3, [r4, #20]
 800457c:	2300      	movs	r3, #0
 800457e:	9309      	str	r3, [sp, #36]	; 0x24
 8004580:	2320      	movs	r3, #32
 8004582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004586:	2330      	movs	r3, #48	; 0x30
 8004588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800458c:	9503      	str	r5, [sp, #12]
 800458e:	f04f 0b01 	mov.w	fp, #1
 8004592:	4637      	mov	r7, r6
 8004594:	463d      	mov	r5, r7
 8004596:	f815 3b01 	ldrb.w	r3, [r5], #1
 800459a:	b10b      	cbz	r3, 80045a0 <_svfiprintf_r+0x58>
 800459c:	2b25      	cmp	r3, #37	; 0x25
 800459e:	d13e      	bne.n	800461e <_svfiprintf_r+0xd6>
 80045a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80045a4:	d00b      	beq.n	80045be <_svfiprintf_r+0x76>
 80045a6:	4653      	mov	r3, sl
 80045a8:	4632      	mov	r2, r6
 80045aa:	4621      	mov	r1, r4
 80045ac:	4640      	mov	r0, r8
 80045ae:	f7ff ff71 	bl	8004494 <__ssputs_r>
 80045b2:	3001      	adds	r0, #1
 80045b4:	f000 80a4 	beq.w	8004700 <_svfiprintf_r+0x1b8>
 80045b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ba:	4453      	add	r3, sl
 80045bc:	9309      	str	r3, [sp, #36]	; 0x24
 80045be:	783b      	ldrb	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 809d 	beq.w	8004700 <_svfiprintf_r+0x1b8>
 80045c6:	2300      	movs	r3, #0
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045d0:	9304      	str	r3, [sp, #16]
 80045d2:	9307      	str	r3, [sp, #28]
 80045d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045d8:	931a      	str	r3, [sp, #104]	; 0x68
 80045da:	462f      	mov	r7, r5
 80045dc:	2205      	movs	r2, #5
 80045de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80045e2:	4850      	ldr	r0, [pc, #320]	; (8004724 <_svfiprintf_r+0x1dc>)
 80045e4:	f7fb fe1c 	bl	8000220 <memchr>
 80045e8:	9b04      	ldr	r3, [sp, #16]
 80045ea:	b9d0      	cbnz	r0, 8004622 <_svfiprintf_r+0xda>
 80045ec:	06d9      	lsls	r1, r3, #27
 80045ee:	bf44      	itt	mi
 80045f0:	2220      	movmi	r2, #32
 80045f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045f6:	071a      	lsls	r2, r3, #28
 80045f8:	bf44      	itt	mi
 80045fa:	222b      	movmi	r2, #43	; 0x2b
 80045fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004600:	782a      	ldrb	r2, [r5, #0]
 8004602:	2a2a      	cmp	r2, #42	; 0x2a
 8004604:	d015      	beq.n	8004632 <_svfiprintf_r+0xea>
 8004606:	9a07      	ldr	r2, [sp, #28]
 8004608:	462f      	mov	r7, r5
 800460a:	2000      	movs	r0, #0
 800460c:	250a      	movs	r5, #10
 800460e:	4639      	mov	r1, r7
 8004610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004614:	3b30      	subs	r3, #48	; 0x30
 8004616:	2b09      	cmp	r3, #9
 8004618:	d94d      	bls.n	80046b6 <_svfiprintf_r+0x16e>
 800461a:	b1b8      	cbz	r0, 800464c <_svfiprintf_r+0x104>
 800461c:	e00f      	b.n	800463e <_svfiprintf_r+0xf6>
 800461e:	462f      	mov	r7, r5
 8004620:	e7b8      	b.n	8004594 <_svfiprintf_r+0x4c>
 8004622:	4a40      	ldr	r2, [pc, #256]	; (8004724 <_svfiprintf_r+0x1dc>)
 8004624:	1a80      	subs	r0, r0, r2
 8004626:	fa0b f000 	lsl.w	r0, fp, r0
 800462a:	4318      	orrs	r0, r3
 800462c:	9004      	str	r0, [sp, #16]
 800462e:	463d      	mov	r5, r7
 8004630:	e7d3      	b.n	80045da <_svfiprintf_r+0x92>
 8004632:	9a03      	ldr	r2, [sp, #12]
 8004634:	1d11      	adds	r1, r2, #4
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	9103      	str	r1, [sp, #12]
 800463a:	2a00      	cmp	r2, #0
 800463c:	db01      	blt.n	8004642 <_svfiprintf_r+0xfa>
 800463e:	9207      	str	r2, [sp, #28]
 8004640:	e004      	b.n	800464c <_svfiprintf_r+0x104>
 8004642:	4252      	negs	r2, r2
 8004644:	f043 0302 	orr.w	r3, r3, #2
 8004648:	9207      	str	r2, [sp, #28]
 800464a:	9304      	str	r3, [sp, #16]
 800464c:	783b      	ldrb	r3, [r7, #0]
 800464e:	2b2e      	cmp	r3, #46	; 0x2e
 8004650:	d10c      	bne.n	800466c <_svfiprintf_r+0x124>
 8004652:	787b      	ldrb	r3, [r7, #1]
 8004654:	2b2a      	cmp	r3, #42	; 0x2a
 8004656:	d133      	bne.n	80046c0 <_svfiprintf_r+0x178>
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	1d1a      	adds	r2, r3, #4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	9203      	str	r2, [sp, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	bfb8      	it	lt
 8004664:	f04f 33ff 	movlt.w	r3, #4294967295
 8004668:	3702      	adds	r7, #2
 800466a:	9305      	str	r3, [sp, #20]
 800466c:	4d2e      	ldr	r5, [pc, #184]	; (8004728 <_svfiprintf_r+0x1e0>)
 800466e:	7839      	ldrb	r1, [r7, #0]
 8004670:	2203      	movs	r2, #3
 8004672:	4628      	mov	r0, r5
 8004674:	f7fb fdd4 	bl	8000220 <memchr>
 8004678:	b138      	cbz	r0, 800468a <_svfiprintf_r+0x142>
 800467a:	2340      	movs	r3, #64	; 0x40
 800467c:	1b40      	subs	r0, r0, r5
 800467e:	fa03 f000 	lsl.w	r0, r3, r0
 8004682:	9b04      	ldr	r3, [sp, #16]
 8004684:	4303      	orrs	r3, r0
 8004686:	3701      	adds	r7, #1
 8004688:	9304      	str	r3, [sp, #16]
 800468a:	7839      	ldrb	r1, [r7, #0]
 800468c:	4827      	ldr	r0, [pc, #156]	; (800472c <_svfiprintf_r+0x1e4>)
 800468e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004692:	2206      	movs	r2, #6
 8004694:	1c7e      	adds	r6, r7, #1
 8004696:	f7fb fdc3 	bl	8000220 <memchr>
 800469a:	2800      	cmp	r0, #0
 800469c:	d038      	beq.n	8004710 <_svfiprintf_r+0x1c8>
 800469e:	4b24      	ldr	r3, [pc, #144]	; (8004730 <_svfiprintf_r+0x1e8>)
 80046a0:	bb13      	cbnz	r3, 80046e8 <_svfiprintf_r+0x1a0>
 80046a2:	9b03      	ldr	r3, [sp, #12]
 80046a4:	3307      	adds	r3, #7
 80046a6:	f023 0307 	bic.w	r3, r3, #7
 80046aa:	3308      	adds	r3, #8
 80046ac:	9303      	str	r3, [sp, #12]
 80046ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046b0:	444b      	add	r3, r9
 80046b2:	9309      	str	r3, [sp, #36]	; 0x24
 80046b4:	e76d      	b.n	8004592 <_svfiprintf_r+0x4a>
 80046b6:	fb05 3202 	mla	r2, r5, r2, r3
 80046ba:	2001      	movs	r0, #1
 80046bc:	460f      	mov	r7, r1
 80046be:	e7a6      	b.n	800460e <_svfiprintf_r+0xc6>
 80046c0:	2300      	movs	r3, #0
 80046c2:	3701      	adds	r7, #1
 80046c4:	9305      	str	r3, [sp, #20]
 80046c6:	4619      	mov	r1, r3
 80046c8:	250a      	movs	r5, #10
 80046ca:	4638      	mov	r0, r7
 80046cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046d0:	3a30      	subs	r2, #48	; 0x30
 80046d2:	2a09      	cmp	r2, #9
 80046d4:	d903      	bls.n	80046de <_svfiprintf_r+0x196>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0c8      	beq.n	800466c <_svfiprintf_r+0x124>
 80046da:	9105      	str	r1, [sp, #20]
 80046dc:	e7c6      	b.n	800466c <_svfiprintf_r+0x124>
 80046de:	fb05 2101 	mla	r1, r5, r1, r2
 80046e2:	2301      	movs	r3, #1
 80046e4:	4607      	mov	r7, r0
 80046e6:	e7f0      	b.n	80046ca <_svfiprintf_r+0x182>
 80046e8:	ab03      	add	r3, sp, #12
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	4622      	mov	r2, r4
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <_svfiprintf_r+0x1ec>)
 80046f0:	a904      	add	r1, sp, #16
 80046f2:	4640      	mov	r0, r8
 80046f4:	f3af 8000 	nop.w
 80046f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80046fc:	4681      	mov	r9, r0
 80046fe:	d1d6      	bne.n	80046ae <_svfiprintf_r+0x166>
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	065b      	lsls	r3, r3, #25
 8004704:	f53f af35 	bmi.w	8004572 <_svfiprintf_r+0x2a>
 8004708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800470a:	b01d      	add	sp, #116	; 0x74
 800470c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004710:	ab03      	add	r3, sp, #12
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	4622      	mov	r2, r4
 8004716:	4b07      	ldr	r3, [pc, #28]	; (8004734 <_svfiprintf_r+0x1ec>)
 8004718:	a904      	add	r1, sp, #16
 800471a:	4640      	mov	r0, r8
 800471c:	f000 f882 	bl	8004824 <_printf_i>
 8004720:	e7ea      	b.n	80046f8 <_svfiprintf_r+0x1b0>
 8004722:	bf00      	nop
 8004724:	08005ccc 	.word	0x08005ccc
 8004728:	08005cd2 	.word	0x08005cd2
 800472c:	08005cd6 	.word	0x08005cd6
 8004730:	00000000 	.word	0x00000000
 8004734:	08004495 	.word	0x08004495

08004738 <_printf_common>:
 8004738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800473c:	4691      	mov	r9, r2
 800473e:	461f      	mov	r7, r3
 8004740:	688a      	ldr	r2, [r1, #8]
 8004742:	690b      	ldr	r3, [r1, #16]
 8004744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004748:	4293      	cmp	r3, r2
 800474a:	bfb8      	it	lt
 800474c:	4613      	movlt	r3, r2
 800474e:	f8c9 3000 	str.w	r3, [r9]
 8004752:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004756:	4606      	mov	r6, r0
 8004758:	460c      	mov	r4, r1
 800475a:	b112      	cbz	r2, 8004762 <_printf_common+0x2a>
 800475c:	3301      	adds	r3, #1
 800475e:	f8c9 3000 	str.w	r3, [r9]
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	0699      	lsls	r1, r3, #26
 8004766:	bf42      	ittt	mi
 8004768:	f8d9 3000 	ldrmi.w	r3, [r9]
 800476c:	3302      	addmi	r3, #2
 800476e:	f8c9 3000 	strmi.w	r3, [r9]
 8004772:	6825      	ldr	r5, [r4, #0]
 8004774:	f015 0506 	ands.w	r5, r5, #6
 8004778:	d107      	bne.n	800478a <_printf_common+0x52>
 800477a:	f104 0a19 	add.w	sl, r4, #25
 800477e:	68e3      	ldr	r3, [r4, #12]
 8004780:	f8d9 2000 	ldr.w	r2, [r9]
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	42ab      	cmp	r3, r5
 8004788:	dc28      	bgt.n	80047dc <_printf_common+0xa4>
 800478a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	3300      	adds	r3, #0
 8004792:	bf18      	it	ne
 8004794:	2301      	movne	r3, #1
 8004796:	0692      	lsls	r2, r2, #26
 8004798:	d42d      	bmi.n	80047f6 <_printf_common+0xbe>
 800479a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800479e:	4639      	mov	r1, r7
 80047a0:	4630      	mov	r0, r6
 80047a2:	47c0      	blx	r8
 80047a4:	3001      	adds	r0, #1
 80047a6:	d020      	beq.n	80047ea <_printf_common+0xb2>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	68e5      	ldr	r5, [r4, #12]
 80047ac:	f8d9 2000 	ldr.w	r2, [r9]
 80047b0:	f003 0306 	and.w	r3, r3, #6
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	bf08      	it	eq
 80047b8:	1aad      	subeq	r5, r5, r2
 80047ba:	68a3      	ldr	r3, [r4, #8]
 80047bc:	6922      	ldr	r2, [r4, #16]
 80047be:	bf0c      	ite	eq
 80047c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047c4:	2500      	movne	r5, #0
 80047c6:	4293      	cmp	r3, r2
 80047c8:	bfc4      	itt	gt
 80047ca:	1a9b      	subgt	r3, r3, r2
 80047cc:	18ed      	addgt	r5, r5, r3
 80047ce:	f04f 0900 	mov.w	r9, #0
 80047d2:	341a      	adds	r4, #26
 80047d4:	454d      	cmp	r5, r9
 80047d6:	d11a      	bne.n	800480e <_printf_common+0xd6>
 80047d8:	2000      	movs	r0, #0
 80047da:	e008      	b.n	80047ee <_printf_common+0xb6>
 80047dc:	2301      	movs	r3, #1
 80047de:	4652      	mov	r2, sl
 80047e0:	4639      	mov	r1, r7
 80047e2:	4630      	mov	r0, r6
 80047e4:	47c0      	blx	r8
 80047e6:	3001      	adds	r0, #1
 80047e8:	d103      	bne.n	80047f2 <_printf_common+0xba>
 80047ea:	f04f 30ff 	mov.w	r0, #4294967295
 80047ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f2:	3501      	adds	r5, #1
 80047f4:	e7c3      	b.n	800477e <_printf_common+0x46>
 80047f6:	18e1      	adds	r1, r4, r3
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	2030      	movs	r0, #48	; 0x30
 80047fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004800:	4422      	add	r2, r4
 8004802:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004806:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800480a:	3302      	adds	r3, #2
 800480c:	e7c5      	b.n	800479a <_printf_common+0x62>
 800480e:	2301      	movs	r3, #1
 8004810:	4622      	mov	r2, r4
 8004812:	4639      	mov	r1, r7
 8004814:	4630      	mov	r0, r6
 8004816:	47c0      	blx	r8
 8004818:	3001      	adds	r0, #1
 800481a:	d0e6      	beq.n	80047ea <_printf_common+0xb2>
 800481c:	f109 0901 	add.w	r9, r9, #1
 8004820:	e7d8      	b.n	80047d4 <_printf_common+0x9c>
	...

08004824 <_printf_i>:
 8004824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004828:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800482c:	460c      	mov	r4, r1
 800482e:	7e09      	ldrb	r1, [r1, #24]
 8004830:	b085      	sub	sp, #20
 8004832:	296e      	cmp	r1, #110	; 0x6e
 8004834:	4617      	mov	r7, r2
 8004836:	4606      	mov	r6, r0
 8004838:	4698      	mov	r8, r3
 800483a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800483c:	f000 80b3 	beq.w	80049a6 <_printf_i+0x182>
 8004840:	d822      	bhi.n	8004888 <_printf_i+0x64>
 8004842:	2963      	cmp	r1, #99	; 0x63
 8004844:	d036      	beq.n	80048b4 <_printf_i+0x90>
 8004846:	d80a      	bhi.n	800485e <_printf_i+0x3a>
 8004848:	2900      	cmp	r1, #0
 800484a:	f000 80b9 	beq.w	80049c0 <_printf_i+0x19c>
 800484e:	2958      	cmp	r1, #88	; 0x58
 8004850:	f000 8083 	beq.w	800495a <_printf_i+0x136>
 8004854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004858:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800485c:	e032      	b.n	80048c4 <_printf_i+0xa0>
 800485e:	2964      	cmp	r1, #100	; 0x64
 8004860:	d001      	beq.n	8004866 <_printf_i+0x42>
 8004862:	2969      	cmp	r1, #105	; 0x69
 8004864:	d1f6      	bne.n	8004854 <_printf_i+0x30>
 8004866:	6820      	ldr	r0, [r4, #0]
 8004868:	6813      	ldr	r3, [r2, #0]
 800486a:	0605      	lsls	r5, r0, #24
 800486c:	f103 0104 	add.w	r1, r3, #4
 8004870:	d52a      	bpl.n	80048c8 <_printf_i+0xa4>
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6011      	str	r1, [r2, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	da03      	bge.n	8004882 <_printf_i+0x5e>
 800487a:	222d      	movs	r2, #45	; 0x2d
 800487c:	425b      	negs	r3, r3
 800487e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004882:	486f      	ldr	r0, [pc, #444]	; (8004a40 <_printf_i+0x21c>)
 8004884:	220a      	movs	r2, #10
 8004886:	e039      	b.n	80048fc <_printf_i+0xd8>
 8004888:	2973      	cmp	r1, #115	; 0x73
 800488a:	f000 809d 	beq.w	80049c8 <_printf_i+0x1a4>
 800488e:	d808      	bhi.n	80048a2 <_printf_i+0x7e>
 8004890:	296f      	cmp	r1, #111	; 0x6f
 8004892:	d020      	beq.n	80048d6 <_printf_i+0xb2>
 8004894:	2970      	cmp	r1, #112	; 0x70
 8004896:	d1dd      	bne.n	8004854 <_printf_i+0x30>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	f043 0320 	orr.w	r3, r3, #32
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	e003      	b.n	80048aa <_printf_i+0x86>
 80048a2:	2975      	cmp	r1, #117	; 0x75
 80048a4:	d017      	beq.n	80048d6 <_printf_i+0xb2>
 80048a6:	2978      	cmp	r1, #120	; 0x78
 80048a8:	d1d4      	bne.n	8004854 <_printf_i+0x30>
 80048aa:	2378      	movs	r3, #120	; 0x78
 80048ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048b0:	4864      	ldr	r0, [pc, #400]	; (8004a44 <_printf_i+0x220>)
 80048b2:	e055      	b.n	8004960 <_printf_i+0x13c>
 80048b4:	6813      	ldr	r3, [r2, #0]
 80048b6:	1d19      	adds	r1, r3, #4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6011      	str	r1, [r2, #0]
 80048bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048c4:	2301      	movs	r3, #1
 80048c6:	e08c      	b.n	80049e2 <_printf_i+0x1be>
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6011      	str	r1, [r2, #0]
 80048cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048d0:	bf18      	it	ne
 80048d2:	b21b      	sxthne	r3, r3
 80048d4:	e7cf      	b.n	8004876 <_printf_i+0x52>
 80048d6:	6813      	ldr	r3, [r2, #0]
 80048d8:	6825      	ldr	r5, [r4, #0]
 80048da:	1d18      	adds	r0, r3, #4
 80048dc:	6010      	str	r0, [r2, #0]
 80048de:	0628      	lsls	r0, r5, #24
 80048e0:	d501      	bpl.n	80048e6 <_printf_i+0xc2>
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	e002      	b.n	80048ec <_printf_i+0xc8>
 80048e6:	0668      	lsls	r0, r5, #25
 80048e8:	d5fb      	bpl.n	80048e2 <_printf_i+0xbe>
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	4854      	ldr	r0, [pc, #336]	; (8004a40 <_printf_i+0x21c>)
 80048ee:	296f      	cmp	r1, #111	; 0x6f
 80048f0:	bf14      	ite	ne
 80048f2:	220a      	movne	r2, #10
 80048f4:	2208      	moveq	r2, #8
 80048f6:	2100      	movs	r1, #0
 80048f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048fc:	6865      	ldr	r5, [r4, #4]
 80048fe:	60a5      	str	r5, [r4, #8]
 8004900:	2d00      	cmp	r5, #0
 8004902:	f2c0 8095 	blt.w	8004a30 <_printf_i+0x20c>
 8004906:	6821      	ldr	r1, [r4, #0]
 8004908:	f021 0104 	bic.w	r1, r1, #4
 800490c:	6021      	str	r1, [r4, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d13d      	bne.n	800498e <_printf_i+0x16a>
 8004912:	2d00      	cmp	r5, #0
 8004914:	f040 808e 	bne.w	8004a34 <_printf_i+0x210>
 8004918:	4665      	mov	r5, ip
 800491a:	2a08      	cmp	r2, #8
 800491c:	d10b      	bne.n	8004936 <_printf_i+0x112>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	07db      	lsls	r3, r3, #31
 8004922:	d508      	bpl.n	8004936 <_printf_i+0x112>
 8004924:	6923      	ldr	r3, [r4, #16]
 8004926:	6862      	ldr	r2, [r4, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	bfde      	ittt	le
 800492c:	2330      	movle	r3, #48	; 0x30
 800492e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004932:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004936:	ebac 0305 	sub.w	r3, ip, r5
 800493a:	6123      	str	r3, [r4, #16]
 800493c:	f8cd 8000 	str.w	r8, [sp]
 8004940:	463b      	mov	r3, r7
 8004942:	aa03      	add	r2, sp, #12
 8004944:	4621      	mov	r1, r4
 8004946:	4630      	mov	r0, r6
 8004948:	f7ff fef6 	bl	8004738 <_printf_common>
 800494c:	3001      	adds	r0, #1
 800494e:	d14d      	bne.n	80049ec <_printf_i+0x1c8>
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	b005      	add	sp, #20
 8004956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800495a:	4839      	ldr	r0, [pc, #228]	; (8004a40 <_printf_i+0x21c>)
 800495c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004960:	6813      	ldr	r3, [r2, #0]
 8004962:	6821      	ldr	r1, [r4, #0]
 8004964:	1d1d      	adds	r5, r3, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6015      	str	r5, [r2, #0]
 800496a:	060a      	lsls	r2, r1, #24
 800496c:	d50b      	bpl.n	8004986 <_printf_i+0x162>
 800496e:	07ca      	lsls	r2, r1, #31
 8004970:	bf44      	itt	mi
 8004972:	f041 0120 	orrmi.w	r1, r1, #32
 8004976:	6021      	strmi	r1, [r4, #0]
 8004978:	b91b      	cbnz	r3, 8004982 <_printf_i+0x15e>
 800497a:	6822      	ldr	r2, [r4, #0]
 800497c:	f022 0220 	bic.w	r2, r2, #32
 8004980:	6022      	str	r2, [r4, #0]
 8004982:	2210      	movs	r2, #16
 8004984:	e7b7      	b.n	80048f6 <_printf_i+0xd2>
 8004986:	064d      	lsls	r5, r1, #25
 8004988:	bf48      	it	mi
 800498a:	b29b      	uxthmi	r3, r3
 800498c:	e7ef      	b.n	800496e <_printf_i+0x14a>
 800498e:	4665      	mov	r5, ip
 8004990:	fbb3 f1f2 	udiv	r1, r3, r2
 8004994:	fb02 3311 	mls	r3, r2, r1, r3
 8004998:	5cc3      	ldrb	r3, [r0, r3]
 800499a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800499e:	460b      	mov	r3, r1
 80049a0:	2900      	cmp	r1, #0
 80049a2:	d1f5      	bne.n	8004990 <_printf_i+0x16c>
 80049a4:	e7b9      	b.n	800491a <_printf_i+0xf6>
 80049a6:	6813      	ldr	r3, [r2, #0]
 80049a8:	6825      	ldr	r5, [r4, #0]
 80049aa:	6961      	ldr	r1, [r4, #20]
 80049ac:	1d18      	adds	r0, r3, #4
 80049ae:	6010      	str	r0, [r2, #0]
 80049b0:	0628      	lsls	r0, r5, #24
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	d501      	bpl.n	80049ba <_printf_i+0x196>
 80049b6:	6019      	str	r1, [r3, #0]
 80049b8:	e002      	b.n	80049c0 <_printf_i+0x19c>
 80049ba:	066a      	lsls	r2, r5, #25
 80049bc:	d5fb      	bpl.n	80049b6 <_printf_i+0x192>
 80049be:	8019      	strh	r1, [r3, #0]
 80049c0:	2300      	movs	r3, #0
 80049c2:	6123      	str	r3, [r4, #16]
 80049c4:	4665      	mov	r5, ip
 80049c6:	e7b9      	b.n	800493c <_printf_i+0x118>
 80049c8:	6813      	ldr	r3, [r2, #0]
 80049ca:	1d19      	adds	r1, r3, #4
 80049cc:	6011      	str	r1, [r2, #0]
 80049ce:	681d      	ldr	r5, [r3, #0]
 80049d0:	6862      	ldr	r2, [r4, #4]
 80049d2:	2100      	movs	r1, #0
 80049d4:	4628      	mov	r0, r5
 80049d6:	f7fb fc23 	bl	8000220 <memchr>
 80049da:	b108      	cbz	r0, 80049e0 <_printf_i+0x1bc>
 80049dc:	1b40      	subs	r0, r0, r5
 80049de:	6060      	str	r0, [r4, #4]
 80049e0:	6863      	ldr	r3, [r4, #4]
 80049e2:	6123      	str	r3, [r4, #16]
 80049e4:	2300      	movs	r3, #0
 80049e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ea:	e7a7      	b.n	800493c <_printf_i+0x118>
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	462a      	mov	r2, r5
 80049f0:	4639      	mov	r1, r7
 80049f2:	4630      	mov	r0, r6
 80049f4:	47c0      	blx	r8
 80049f6:	3001      	adds	r0, #1
 80049f8:	d0aa      	beq.n	8004950 <_printf_i+0x12c>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	079b      	lsls	r3, r3, #30
 80049fe:	d413      	bmi.n	8004a28 <_printf_i+0x204>
 8004a00:	68e0      	ldr	r0, [r4, #12]
 8004a02:	9b03      	ldr	r3, [sp, #12]
 8004a04:	4298      	cmp	r0, r3
 8004a06:	bfb8      	it	lt
 8004a08:	4618      	movlt	r0, r3
 8004a0a:	e7a3      	b.n	8004954 <_printf_i+0x130>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	464a      	mov	r2, r9
 8004a10:	4639      	mov	r1, r7
 8004a12:	4630      	mov	r0, r6
 8004a14:	47c0      	blx	r8
 8004a16:	3001      	adds	r0, #1
 8004a18:	d09a      	beq.n	8004950 <_printf_i+0x12c>
 8004a1a:	3501      	adds	r5, #1
 8004a1c:	68e3      	ldr	r3, [r4, #12]
 8004a1e:	9a03      	ldr	r2, [sp, #12]
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	42ab      	cmp	r3, r5
 8004a24:	dcf2      	bgt.n	8004a0c <_printf_i+0x1e8>
 8004a26:	e7eb      	b.n	8004a00 <_printf_i+0x1dc>
 8004a28:	2500      	movs	r5, #0
 8004a2a:	f104 0919 	add.w	r9, r4, #25
 8004a2e:	e7f5      	b.n	8004a1c <_printf_i+0x1f8>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1ac      	bne.n	800498e <_printf_i+0x16a>
 8004a34:	7803      	ldrb	r3, [r0, #0]
 8004a36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a3e:	e76c      	b.n	800491a <_printf_i+0xf6>
 8004a40:	08005cdd 	.word	0x08005cdd
 8004a44:	08005cee 	.word	0x08005cee

08004a48 <memcpy>:
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	1e43      	subs	r3, r0, #1
 8004a4c:	440a      	add	r2, r1
 8004a4e:	4291      	cmp	r1, r2
 8004a50:	d100      	bne.n	8004a54 <memcpy+0xc>
 8004a52:	bd10      	pop	{r4, pc}
 8004a54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a5c:	e7f7      	b.n	8004a4e <memcpy+0x6>

08004a5e <memmove>:
 8004a5e:	4288      	cmp	r0, r1
 8004a60:	b510      	push	{r4, lr}
 8004a62:	eb01 0302 	add.w	r3, r1, r2
 8004a66:	d807      	bhi.n	8004a78 <memmove+0x1a>
 8004a68:	1e42      	subs	r2, r0, #1
 8004a6a:	4299      	cmp	r1, r3
 8004a6c:	d00a      	beq.n	8004a84 <memmove+0x26>
 8004a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a72:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004a76:	e7f8      	b.n	8004a6a <memmove+0xc>
 8004a78:	4283      	cmp	r3, r0
 8004a7a:	d9f5      	bls.n	8004a68 <memmove+0xa>
 8004a7c:	1881      	adds	r1, r0, r2
 8004a7e:	1ad2      	subs	r2, r2, r3
 8004a80:	42d3      	cmn	r3, r2
 8004a82:	d100      	bne.n	8004a86 <memmove+0x28>
 8004a84:	bd10      	pop	{r4, pc}
 8004a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a8a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004a8e:	e7f7      	b.n	8004a80 <memmove+0x22>

08004a90 <_free_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4605      	mov	r5, r0
 8004a94:	2900      	cmp	r1, #0
 8004a96:	d045      	beq.n	8004b24 <_free_r+0x94>
 8004a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a9c:	1f0c      	subs	r4, r1, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bfb8      	it	lt
 8004aa2:	18e4      	addlt	r4, r4, r3
 8004aa4:	f000 f8d2 	bl	8004c4c <__malloc_lock>
 8004aa8:	4a1f      	ldr	r2, [pc, #124]	; (8004b28 <_free_r+0x98>)
 8004aaa:	6813      	ldr	r3, [r2, #0]
 8004aac:	4610      	mov	r0, r2
 8004aae:	b933      	cbnz	r3, 8004abe <_free_r+0x2e>
 8004ab0:	6063      	str	r3, [r4, #4]
 8004ab2:	6014      	str	r4, [r2, #0]
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aba:	f000 b8c8 	b.w	8004c4e <__malloc_unlock>
 8004abe:	42a3      	cmp	r3, r4
 8004ac0:	d90c      	bls.n	8004adc <_free_r+0x4c>
 8004ac2:	6821      	ldr	r1, [r4, #0]
 8004ac4:	1862      	adds	r2, r4, r1
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	bf04      	itt	eq
 8004aca:	681a      	ldreq	r2, [r3, #0]
 8004acc:	685b      	ldreq	r3, [r3, #4]
 8004ace:	6063      	str	r3, [r4, #4]
 8004ad0:	bf04      	itt	eq
 8004ad2:	1852      	addeq	r2, r2, r1
 8004ad4:	6022      	streq	r2, [r4, #0]
 8004ad6:	6004      	str	r4, [r0, #0]
 8004ad8:	e7ec      	b.n	8004ab4 <_free_r+0x24>
 8004ada:	4613      	mov	r3, r2
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	b10a      	cbz	r2, 8004ae4 <_free_r+0x54>
 8004ae0:	42a2      	cmp	r2, r4
 8004ae2:	d9fa      	bls.n	8004ada <_free_r+0x4a>
 8004ae4:	6819      	ldr	r1, [r3, #0]
 8004ae6:	1858      	adds	r0, r3, r1
 8004ae8:	42a0      	cmp	r0, r4
 8004aea:	d10b      	bne.n	8004b04 <_free_r+0x74>
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	4401      	add	r1, r0
 8004af0:	1858      	adds	r0, r3, r1
 8004af2:	4282      	cmp	r2, r0
 8004af4:	6019      	str	r1, [r3, #0]
 8004af6:	d1dd      	bne.n	8004ab4 <_free_r+0x24>
 8004af8:	6810      	ldr	r0, [r2, #0]
 8004afa:	6852      	ldr	r2, [r2, #4]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	4401      	add	r1, r0
 8004b00:	6019      	str	r1, [r3, #0]
 8004b02:	e7d7      	b.n	8004ab4 <_free_r+0x24>
 8004b04:	d902      	bls.n	8004b0c <_free_r+0x7c>
 8004b06:	230c      	movs	r3, #12
 8004b08:	602b      	str	r3, [r5, #0]
 8004b0a:	e7d3      	b.n	8004ab4 <_free_r+0x24>
 8004b0c:	6820      	ldr	r0, [r4, #0]
 8004b0e:	1821      	adds	r1, r4, r0
 8004b10:	428a      	cmp	r2, r1
 8004b12:	bf04      	itt	eq
 8004b14:	6811      	ldreq	r1, [r2, #0]
 8004b16:	6852      	ldreq	r2, [r2, #4]
 8004b18:	6062      	str	r2, [r4, #4]
 8004b1a:	bf04      	itt	eq
 8004b1c:	1809      	addeq	r1, r1, r0
 8004b1e:	6021      	streq	r1, [r4, #0]
 8004b20:	605c      	str	r4, [r3, #4]
 8004b22:	e7c7      	b.n	8004ab4 <_free_r+0x24>
 8004b24:	bd38      	pop	{r3, r4, r5, pc}
 8004b26:	bf00      	nop
 8004b28:	20000098 	.word	0x20000098

08004b2c <_malloc_r>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	1ccd      	adds	r5, r1, #3
 8004b30:	f025 0503 	bic.w	r5, r5, #3
 8004b34:	3508      	adds	r5, #8
 8004b36:	2d0c      	cmp	r5, #12
 8004b38:	bf38      	it	cc
 8004b3a:	250c      	movcc	r5, #12
 8004b3c:	2d00      	cmp	r5, #0
 8004b3e:	4606      	mov	r6, r0
 8004b40:	db01      	blt.n	8004b46 <_malloc_r+0x1a>
 8004b42:	42a9      	cmp	r1, r5
 8004b44:	d903      	bls.n	8004b4e <_malloc_r+0x22>
 8004b46:	230c      	movs	r3, #12
 8004b48:	6033      	str	r3, [r6, #0]
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	bd70      	pop	{r4, r5, r6, pc}
 8004b4e:	f000 f87d 	bl	8004c4c <__malloc_lock>
 8004b52:	4a21      	ldr	r2, [pc, #132]	; (8004bd8 <_malloc_r+0xac>)
 8004b54:	6814      	ldr	r4, [r2, #0]
 8004b56:	4621      	mov	r1, r4
 8004b58:	b991      	cbnz	r1, 8004b80 <_malloc_r+0x54>
 8004b5a:	4c20      	ldr	r4, [pc, #128]	; (8004bdc <_malloc_r+0xb0>)
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	b91b      	cbnz	r3, 8004b68 <_malloc_r+0x3c>
 8004b60:	4630      	mov	r0, r6
 8004b62:	f000 f863 	bl	8004c2c <_sbrk_r>
 8004b66:	6020      	str	r0, [r4, #0]
 8004b68:	4629      	mov	r1, r5
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f000 f85e 	bl	8004c2c <_sbrk_r>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d124      	bne.n	8004bbe <_malloc_r+0x92>
 8004b74:	230c      	movs	r3, #12
 8004b76:	6033      	str	r3, [r6, #0]
 8004b78:	4630      	mov	r0, r6
 8004b7a:	f000 f868 	bl	8004c4e <__malloc_unlock>
 8004b7e:	e7e4      	b.n	8004b4a <_malloc_r+0x1e>
 8004b80:	680b      	ldr	r3, [r1, #0]
 8004b82:	1b5b      	subs	r3, r3, r5
 8004b84:	d418      	bmi.n	8004bb8 <_malloc_r+0x8c>
 8004b86:	2b0b      	cmp	r3, #11
 8004b88:	d90f      	bls.n	8004baa <_malloc_r+0x7e>
 8004b8a:	600b      	str	r3, [r1, #0]
 8004b8c:	50cd      	str	r5, [r1, r3]
 8004b8e:	18cc      	adds	r4, r1, r3
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 f85c 	bl	8004c4e <__malloc_unlock>
 8004b96:	f104 000b 	add.w	r0, r4, #11
 8004b9a:	1d23      	adds	r3, r4, #4
 8004b9c:	f020 0007 	bic.w	r0, r0, #7
 8004ba0:	1ac3      	subs	r3, r0, r3
 8004ba2:	d0d3      	beq.n	8004b4c <_malloc_r+0x20>
 8004ba4:	425a      	negs	r2, r3
 8004ba6:	50e2      	str	r2, [r4, r3]
 8004ba8:	e7d0      	b.n	8004b4c <_malloc_r+0x20>
 8004baa:	428c      	cmp	r4, r1
 8004bac:	684b      	ldr	r3, [r1, #4]
 8004bae:	bf16      	itet	ne
 8004bb0:	6063      	strne	r3, [r4, #4]
 8004bb2:	6013      	streq	r3, [r2, #0]
 8004bb4:	460c      	movne	r4, r1
 8004bb6:	e7eb      	b.n	8004b90 <_malloc_r+0x64>
 8004bb8:	460c      	mov	r4, r1
 8004bba:	6849      	ldr	r1, [r1, #4]
 8004bbc:	e7cc      	b.n	8004b58 <_malloc_r+0x2c>
 8004bbe:	1cc4      	adds	r4, r0, #3
 8004bc0:	f024 0403 	bic.w	r4, r4, #3
 8004bc4:	42a0      	cmp	r0, r4
 8004bc6:	d005      	beq.n	8004bd4 <_malloc_r+0xa8>
 8004bc8:	1a21      	subs	r1, r4, r0
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f000 f82e 	bl	8004c2c <_sbrk_r>
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d0cf      	beq.n	8004b74 <_malloc_r+0x48>
 8004bd4:	6025      	str	r5, [r4, #0]
 8004bd6:	e7db      	b.n	8004b90 <_malloc_r+0x64>
 8004bd8:	20000098 	.word	0x20000098
 8004bdc:	2000009c 	.word	0x2000009c

08004be0 <_realloc_r>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	4607      	mov	r7, r0
 8004be4:	4614      	mov	r4, r2
 8004be6:	460e      	mov	r6, r1
 8004be8:	b921      	cbnz	r1, 8004bf4 <_realloc_r+0x14>
 8004bea:	4611      	mov	r1, r2
 8004bec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bf0:	f7ff bf9c 	b.w	8004b2c <_malloc_r>
 8004bf4:	b922      	cbnz	r2, 8004c00 <_realloc_r+0x20>
 8004bf6:	f7ff ff4b 	bl	8004a90 <_free_r>
 8004bfa:	4625      	mov	r5, r4
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c00:	f000 f826 	bl	8004c50 <_malloc_usable_size_r>
 8004c04:	42a0      	cmp	r0, r4
 8004c06:	d20f      	bcs.n	8004c28 <_realloc_r+0x48>
 8004c08:	4621      	mov	r1, r4
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	f7ff ff8e 	bl	8004b2c <_malloc_r>
 8004c10:	4605      	mov	r5, r0
 8004c12:	2800      	cmp	r0, #0
 8004c14:	d0f2      	beq.n	8004bfc <_realloc_r+0x1c>
 8004c16:	4631      	mov	r1, r6
 8004c18:	4622      	mov	r2, r4
 8004c1a:	f7ff ff15 	bl	8004a48 <memcpy>
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4638      	mov	r0, r7
 8004c22:	f7ff ff35 	bl	8004a90 <_free_r>
 8004c26:	e7e9      	b.n	8004bfc <_realloc_r+0x1c>
 8004c28:	4635      	mov	r5, r6
 8004c2a:	e7e7      	b.n	8004bfc <_realloc_r+0x1c>

08004c2c <_sbrk_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4c06      	ldr	r4, [pc, #24]	; (8004c48 <_sbrk_r+0x1c>)
 8004c30:	2300      	movs	r3, #0
 8004c32:	4605      	mov	r5, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	f7fc feb0 	bl	800199c <_sbrk>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_sbrk_r+0x1a>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_sbrk_r+0x1a>
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	20001200 	.word	0x20001200

08004c4c <__malloc_lock>:
 8004c4c:	4770      	bx	lr

08004c4e <__malloc_unlock>:
 8004c4e:	4770      	bx	lr

08004c50 <_malloc_usable_size_r>:
 8004c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c54:	1f18      	subs	r0, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bfbc      	itt	lt
 8004c5a:	580b      	ldrlt	r3, [r1, r0]
 8004c5c:	18c0      	addlt	r0, r0, r3
 8004c5e:	4770      	bx	lr

08004c60 <sin>:
 8004c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c62:	ec51 0b10 	vmov	r0, r1, d0
 8004c66:	4a20      	ldr	r2, [pc, #128]	; (8004ce8 <sin+0x88>)
 8004c68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	dc07      	bgt.n	8004c80 <sin+0x20>
 8004c70:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004ce0 <sin+0x80>
 8004c74:	2000      	movs	r0, #0
 8004c76:	f000 fe37 	bl	80058e8 <__kernel_sin>
 8004c7a:	ec51 0b10 	vmov	r0, r1, d0
 8004c7e:	e007      	b.n	8004c90 <sin+0x30>
 8004c80:	4a1a      	ldr	r2, [pc, #104]	; (8004cec <sin+0x8c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	dd09      	ble.n	8004c9a <sin+0x3a>
 8004c86:	ee10 2a10 	vmov	r2, s0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	f7fb fb1c 	bl	80002c8 <__aeabi_dsub>
 8004c90:	ec41 0b10 	vmov	d0, r0, r1
 8004c94:	b005      	add	sp, #20
 8004c96:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c9a:	4668      	mov	r0, sp
 8004c9c:	f000 f828 	bl	8004cf0 <__ieee754_rem_pio2>
 8004ca0:	f000 0003 	and.w	r0, r0, #3
 8004ca4:	2801      	cmp	r0, #1
 8004ca6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004caa:	ed9d 0b00 	vldr	d0, [sp]
 8004cae:	d004      	beq.n	8004cba <sin+0x5a>
 8004cb0:	2802      	cmp	r0, #2
 8004cb2:	d005      	beq.n	8004cc0 <sin+0x60>
 8004cb4:	b970      	cbnz	r0, 8004cd4 <sin+0x74>
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	e7dd      	b.n	8004c76 <sin+0x16>
 8004cba:	f000 fa0d 	bl	80050d8 <__kernel_cos>
 8004cbe:	e7dc      	b.n	8004c7a <sin+0x1a>
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	f000 fe11 	bl	80058e8 <__kernel_sin>
 8004cc6:	ec53 2b10 	vmov	r2, r3, d0
 8004cca:	ee10 0a10 	vmov	r0, s0
 8004cce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004cd2:	e7dd      	b.n	8004c90 <sin+0x30>
 8004cd4:	f000 fa00 	bl	80050d8 <__kernel_cos>
 8004cd8:	e7f5      	b.n	8004cc6 <sin+0x66>
 8004cda:	bf00      	nop
 8004cdc:	f3af 8000 	nop.w
	...
 8004ce8:	3fe921fb 	.word	0x3fe921fb
 8004cec:	7fefffff 	.word	0x7fefffff

08004cf0 <__ieee754_rem_pio2>:
 8004cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf4:	ec57 6b10 	vmov	r6, r7, d0
 8004cf8:	4bc3      	ldr	r3, [pc, #780]	; (8005008 <__ieee754_rem_pio2+0x318>)
 8004cfa:	b08d      	sub	sp, #52	; 0x34
 8004cfc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004d00:	4598      	cmp	r8, r3
 8004d02:	4604      	mov	r4, r0
 8004d04:	9704      	str	r7, [sp, #16]
 8004d06:	dc07      	bgt.n	8004d18 <__ieee754_rem_pio2+0x28>
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	ed84 0b00 	vstr	d0, [r4]
 8004d10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d14:	2500      	movs	r5, #0
 8004d16:	e027      	b.n	8004d68 <__ieee754_rem_pio2+0x78>
 8004d18:	4bbc      	ldr	r3, [pc, #752]	; (800500c <__ieee754_rem_pio2+0x31c>)
 8004d1a:	4598      	cmp	r8, r3
 8004d1c:	dc75      	bgt.n	8004e0a <__ieee754_rem_pio2+0x11a>
 8004d1e:	9b04      	ldr	r3, [sp, #16]
 8004d20:	4dbb      	ldr	r5, [pc, #748]	; (8005010 <__ieee754_rem_pio2+0x320>)
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	ee10 0a10 	vmov	r0, s0
 8004d28:	a3a9      	add	r3, pc, #676	; (adr r3, 8004fd0 <__ieee754_rem_pio2+0x2e0>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	4639      	mov	r1, r7
 8004d30:	dd36      	ble.n	8004da0 <__ieee754_rem_pio2+0xb0>
 8004d32:	f7fb fac9 	bl	80002c8 <__aeabi_dsub>
 8004d36:	45a8      	cmp	r8, r5
 8004d38:	4606      	mov	r6, r0
 8004d3a:	460f      	mov	r7, r1
 8004d3c:	d018      	beq.n	8004d70 <__ieee754_rem_pio2+0x80>
 8004d3e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004fd8 <__ieee754_rem_pio2+0x2e8>)
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	f7fb fac0 	bl	80002c8 <__aeabi_dsub>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	e9c4 2300 	strd	r2, r3, [r4]
 8004d50:	4630      	mov	r0, r6
 8004d52:	4639      	mov	r1, r7
 8004d54:	f7fb fab8 	bl	80002c8 <__aeabi_dsub>
 8004d58:	a39f      	add	r3, pc, #636	; (adr r3, 8004fd8 <__ieee754_rem_pio2+0x2e8>)
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	f7fb fab3 	bl	80002c8 <__aeabi_dsub>
 8004d62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d66:	2501      	movs	r5, #1
 8004d68:	4628      	mov	r0, r5
 8004d6a:	b00d      	add	sp, #52	; 0x34
 8004d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d70:	a39b      	add	r3, pc, #620	; (adr r3, 8004fe0 <__ieee754_rem_pio2+0x2f0>)
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f7fb faa7 	bl	80002c8 <__aeabi_dsub>
 8004d7a:	a39b      	add	r3, pc, #620	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x2f8>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	4606      	mov	r6, r0
 8004d82:	460f      	mov	r7, r1
 8004d84:	f7fb faa0 	bl	80002c8 <__aeabi_dsub>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	e9c4 2300 	strd	r2, r3, [r4]
 8004d90:	4630      	mov	r0, r6
 8004d92:	4639      	mov	r1, r7
 8004d94:	f7fb fa98 	bl	80002c8 <__aeabi_dsub>
 8004d98:	a393      	add	r3, pc, #588	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x2f8>)
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	e7de      	b.n	8004d5e <__ieee754_rem_pio2+0x6e>
 8004da0:	f7fb fa94 	bl	80002cc <__adddf3>
 8004da4:	45a8      	cmp	r8, r5
 8004da6:	4606      	mov	r6, r0
 8004da8:	460f      	mov	r7, r1
 8004daa:	d016      	beq.n	8004dda <__ieee754_rem_pio2+0xea>
 8004dac:	a38a      	add	r3, pc, #552	; (adr r3, 8004fd8 <__ieee754_rem_pio2+0x2e8>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f7fb fa8b 	bl	80002cc <__adddf3>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	e9c4 2300 	strd	r2, r3, [r4]
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	f7fb fa81 	bl	80002c8 <__aeabi_dsub>
 8004dc6:	a384      	add	r3, pc, #528	; (adr r3, 8004fd8 <__ieee754_rem_pio2+0x2e8>)
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f7fb fa7e 	bl	80002cc <__adddf3>
 8004dd0:	f04f 35ff 	mov.w	r5, #4294967295
 8004dd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004dd8:	e7c6      	b.n	8004d68 <__ieee754_rem_pio2+0x78>
 8004dda:	a381      	add	r3, pc, #516	; (adr r3, 8004fe0 <__ieee754_rem_pio2+0x2f0>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f7fb fa74 	bl	80002cc <__adddf3>
 8004de4:	a380      	add	r3, pc, #512	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x2f8>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	4606      	mov	r6, r0
 8004dec:	460f      	mov	r7, r1
 8004dee:	f7fb fa6d 	bl	80002cc <__adddf3>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	e9c4 2300 	strd	r2, r3, [r4]
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	4639      	mov	r1, r7
 8004dfe:	f7fb fa63 	bl	80002c8 <__aeabi_dsub>
 8004e02:	a379      	add	r3, pc, #484	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x2f8>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	e7e0      	b.n	8004dcc <__ieee754_rem_pio2+0xdc>
 8004e0a:	4b82      	ldr	r3, [pc, #520]	; (8005014 <__ieee754_rem_pio2+0x324>)
 8004e0c:	4598      	cmp	r8, r3
 8004e0e:	f300 80d0 	bgt.w	8004fb2 <__ieee754_rem_pio2+0x2c2>
 8004e12:	f000 fe23 	bl	8005a5c <fabs>
 8004e16:	ec57 6b10 	vmov	r6, r7, d0
 8004e1a:	ee10 0a10 	vmov	r0, s0
 8004e1e:	a374      	add	r3, pc, #464	; (adr r3, 8004ff0 <__ieee754_rem_pio2+0x300>)
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	4639      	mov	r1, r7
 8004e26:	f7fb fc07 	bl	8000638 <__aeabi_dmul>
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	4b7a      	ldr	r3, [pc, #488]	; (8005018 <__ieee754_rem_pio2+0x328>)
 8004e2e:	f7fb fa4d 	bl	80002cc <__adddf3>
 8004e32:	f7fb fe9b 	bl	8000b6c <__aeabi_d2iz>
 8004e36:	4605      	mov	r5, r0
 8004e38:	f7fb fb94 	bl	8000564 <__aeabi_i2d>
 8004e3c:	a364      	add	r3, pc, #400	; (adr r3, 8004fd0 <__ieee754_rem_pio2+0x2e0>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e46:	f7fb fbf7 	bl	8000638 <__aeabi_dmul>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4630      	mov	r0, r6
 8004e50:	4639      	mov	r1, r7
 8004e52:	f7fb fa39 	bl	80002c8 <__aeabi_dsub>
 8004e56:	a360      	add	r3, pc, #384	; (adr r3, 8004fd8 <__ieee754_rem_pio2+0x2e8>)
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	4682      	mov	sl, r0
 8004e5e:	468b      	mov	fp, r1
 8004e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e64:	f7fb fbe8 	bl	8000638 <__aeabi_dmul>
 8004e68:	2d1f      	cmp	r5, #31
 8004e6a:	4606      	mov	r6, r0
 8004e6c:	460f      	mov	r7, r1
 8004e6e:	dc0c      	bgt.n	8004e8a <__ieee754_rem_pio2+0x19a>
 8004e70:	1e6a      	subs	r2, r5, #1
 8004e72:	4b6a      	ldr	r3, [pc, #424]	; (800501c <__ieee754_rem_pio2+0x32c>)
 8004e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e78:	4543      	cmp	r3, r8
 8004e7a:	d006      	beq.n	8004e8a <__ieee754_rem_pio2+0x19a>
 8004e7c:	4632      	mov	r2, r6
 8004e7e:	463b      	mov	r3, r7
 8004e80:	4650      	mov	r0, sl
 8004e82:	4659      	mov	r1, fp
 8004e84:	f7fb fa20 	bl	80002c8 <__aeabi_dsub>
 8004e88:	e00e      	b.n	8004ea8 <__ieee754_rem_pio2+0x1b8>
 8004e8a:	4632      	mov	r2, r6
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	4650      	mov	r0, sl
 8004e90:	4659      	mov	r1, fp
 8004e92:	f7fb fa19 	bl	80002c8 <__aeabi_dsub>
 8004e96:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e9a:	9305      	str	r3, [sp, #20]
 8004e9c:	9a05      	ldr	r2, [sp, #20]
 8004e9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	dc02      	bgt.n	8004eae <__ieee754_rem_pio2+0x1be>
 8004ea8:	e9c4 0100 	strd	r0, r1, [r4]
 8004eac:	e039      	b.n	8004f22 <__ieee754_rem_pio2+0x232>
 8004eae:	a34c      	add	r3, pc, #304	; (adr r3, 8004fe0 <__ieee754_rem_pio2+0x2f0>)
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eb8:	f7fb fbbe 	bl	8000638 <__aeabi_dmul>
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	460f      	mov	r7, r1
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	4659      	mov	r1, fp
 8004ec8:	f7fb f9fe 	bl	80002c8 <__aeabi_dsub>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4680      	mov	r8, r0
 8004ed2:	4689      	mov	r9, r1
 8004ed4:	4650      	mov	r0, sl
 8004ed6:	4659      	mov	r1, fp
 8004ed8:	f7fb f9f6 	bl	80002c8 <__aeabi_dsub>
 8004edc:	4632      	mov	r2, r6
 8004ede:	463b      	mov	r3, r7
 8004ee0:	f7fb f9f2 	bl	80002c8 <__aeabi_dsub>
 8004ee4:	a340      	add	r3, pc, #256	; (adr r3, 8004fe8 <__ieee754_rem_pio2+0x2f8>)
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	4606      	mov	r6, r0
 8004eec:	460f      	mov	r7, r1
 8004eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef2:	f7fb fba1 	bl	8000638 <__aeabi_dmul>
 8004ef6:	4632      	mov	r2, r6
 8004ef8:	463b      	mov	r3, r7
 8004efa:	f7fb f9e5 	bl	80002c8 <__aeabi_dsub>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4606      	mov	r6, r0
 8004f04:	460f      	mov	r7, r1
 8004f06:	4640      	mov	r0, r8
 8004f08:	4649      	mov	r1, r9
 8004f0a:	f7fb f9dd 	bl	80002c8 <__aeabi_dsub>
 8004f0e:	9a05      	ldr	r2, [sp, #20]
 8004f10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b31      	cmp	r3, #49	; 0x31
 8004f18:	dc20      	bgt.n	8004f5c <__ieee754_rem_pio2+0x26c>
 8004f1a:	e9c4 0100 	strd	r0, r1, [r4]
 8004f1e:	46c2      	mov	sl, r8
 8004f20:	46cb      	mov	fp, r9
 8004f22:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004f26:	4650      	mov	r0, sl
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	f7fb f9cb 	bl	80002c8 <__aeabi_dsub>
 8004f32:	463b      	mov	r3, r7
 8004f34:	4632      	mov	r2, r6
 8004f36:	f7fb f9c7 	bl	80002c8 <__aeabi_dsub>
 8004f3a:	9b04      	ldr	r3, [sp, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f42:	f6bf af11 	bge.w	8004d68 <__ieee754_rem_pio2+0x78>
 8004f46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f4a:	6063      	str	r3, [r4, #4]
 8004f4c:	f8c4 8000 	str.w	r8, [r4]
 8004f50:	60a0      	str	r0, [r4, #8]
 8004f52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f56:	60e3      	str	r3, [r4, #12]
 8004f58:	426d      	negs	r5, r5
 8004f5a:	e705      	b.n	8004d68 <__ieee754_rem_pio2+0x78>
 8004f5c:	a326      	add	r3, pc, #152	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x308>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f66:	f7fb fb67 	bl	8000638 <__aeabi_dmul>
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	460f      	mov	r7, r1
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4640      	mov	r0, r8
 8004f74:	4649      	mov	r1, r9
 8004f76:	f7fb f9a7 	bl	80002c8 <__aeabi_dsub>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4682      	mov	sl, r0
 8004f80:	468b      	mov	fp, r1
 8004f82:	4640      	mov	r0, r8
 8004f84:	4649      	mov	r1, r9
 8004f86:	f7fb f99f 	bl	80002c8 <__aeabi_dsub>
 8004f8a:	4632      	mov	r2, r6
 8004f8c:	463b      	mov	r3, r7
 8004f8e:	f7fb f99b 	bl	80002c8 <__aeabi_dsub>
 8004f92:	a31b      	add	r3, pc, #108	; (adr r3, 8005000 <__ieee754_rem_pio2+0x310>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	4606      	mov	r6, r0
 8004f9a:	460f      	mov	r7, r1
 8004f9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fa0:	f7fb fb4a 	bl	8000638 <__aeabi_dmul>
 8004fa4:	4632      	mov	r2, r6
 8004fa6:	463b      	mov	r3, r7
 8004fa8:	f7fb f98e 	bl	80002c8 <__aeabi_dsub>
 8004fac:	4606      	mov	r6, r0
 8004fae:	460f      	mov	r7, r1
 8004fb0:	e764      	b.n	8004e7c <__ieee754_rem_pio2+0x18c>
 8004fb2:	4b1b      	ldr	r3, [pc, #108]	; (8005020 <__ieee754_rem_pio2+0x330>)
 8004fb4:	4598      	cmp	r8, r3
 8004fb6:	dd35      	ble.n	8005024 <__ieee754_rem_pio2+0x334>
 8004fb8:	ee10 2a10 	vmov	r2, s0
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	f7fb f981 	bl	80002c8 <__aeabi_dsub>
 8004fc6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004fca:	e9c4 0100 	strd	r0, r1, [r4]
 8004fce:	e6a1      	b.n	8004d14 <__ieee754_rem_pio2+0x24>
 8004fd0:	54400000 	.word	0x54400000
 8004fd4:	3ff921fb 	.word	0x3ff921fb
 8004fd8:	1a626331 	.word	0x1a626331
 8004fdc:	3dd0b461 	.word	0x3dd0b461
 8004fe0:	1a600000 	.word	0x1a600000
 8004fe4:	3dd0b461 	.word	0x3dd0b461
 8004fe8:	2e037073 	.word	0x2e037073
 8004fec:	3ba3198a 	.word	0x3ba3198a
 8004ff0:	6dc9c883 	.word	0x6dc9c883
 8004ff4:	3fe45f30 	.word	0x3fe45f30
 8004ff8:	2e000000 	.word	0x2e000000
 8004ffc:	3ba3198a 	.word	0x3ba3198a
 8005000:	252049c1 	.word	0x252049c1
 8005004:	397b839a 	.word	0x397b839a
 8005008:	3fe921fb 	.word	0x3fe921fb
 800500c:	4002d97b 	.word	0x4002d97b
 8005010:	3ff921fb 	.word	0x3ff921fb
 8005014:	413921fb 	.word	0x413921fb
 8005018:	3fe00000 	.word	0x3fe00000
 800501c:	08005d00 	.word	0x08005d00
 8005020:	7fefffff 	.word	0x7fefffff
 8005024:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005028:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800502c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005030:	4630      	mov	r0, r6
 8005032:	460f      	mov	r7, r1
 8005034:	f7fb fd9a 	bl	8000b6c <__aeabi_d2iz>
 8005038:	f7fb fa94 	bl	8000564 <__aeabi_i2d>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4630      	mov	r0, r6
 8005042:	4639      	mov	r1, r7
 8005044:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005048:	f7fb f93e 	bl	80002c8 <__aeabi_dsub>
 800504c:	2200      	movs	r2, #0
 800504e:	4b1f      	ldr	r3, [pc, #124]	; (80050cc <__ieee754_rem_pio2+0x3dc>)
 8005050:	f7fb faf2 	bl	8000638 <__aeabi_dmul>
 8005054:	460f      	mov	r7, r1
 8005056:	4606      	mov	r6, r0
 8005058:	f7fb fd88 	bl	8000b6c <__aeabi_d2iz>
 800505c:	f7fb fa82 	bl	8000564 <__aeabi_i2d>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4630      	mov	r0, r6
 8005066:	4639      	mov	r1, r7
 8005068:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800506c:	f7fb f92c 	bl	80002c8 <__aeabi_dsub>
 8005070:	2200      	movs	r2, #0
 8005072:	4b16      	ldr	r3, [pc, #88]	; (80050cc <__ieee754_rem_pio2+0x3dc>)
 8005074:	f7fb fae0 	bl	8000638 <__aeabi_dmul>
 8005078:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800507c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005080:	f04f 0803 	mov.w	r8, #3
 8005084:	2600      	movs	r6, #0
 8005086:	2700      	movs	r7, #0
 8005088:	4632      	mov	r2, r6
 800508a:	463b      	mov	r3, r7
 800508c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005090:	f108 3aff 	add.w	sl, r8, #4294967295
 8005094:	f7fb fd38 	bl	8000b08 <__aeabi_dcmpeq>
 8005098:	b9b0      	cbnz	r0, 80050c8 <__ieee754_rem_pio2+0x3d8>
 800509a:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <__ieee754_rem_pio2+0x3e0>)
 800509c:	9301      	str	r3, [sp, #4]
 800509e:	2302      	movs	r3, #2
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	462a      	mov	r2, r5
 80050a4:	4643      	mov	r3, r8
 80050a6:	4621      	mov	r1, r4
 80050a8:	a806      	add	r0, sp, #24
 80050aa:	f000 f8dd 	bl	8005268 <__kernel_rem_pio2>
 80050ae:	9b04      	ldr	r3, [sp, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	4605      	mov	r5, r0
 80050b4:	f6bf ae58 	bge.w	8004d68 <__ieee754_rem_pio2+0x78>
 80050b8:	6863      	ldr	r3, [r4, #4]
 80050ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050be:	6063      	str	r3, [r4, #4]
 80050c0:	68e3      	ldr	r3, [r4, #12]
 80050c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050c6:	e746      	b.n	8004f56 <__ieee754_rem_pio2+0x266>
 80050c8:	46d0      	mov	r8, sl
 80050ca:	e7dd      	b.n	8005088 <__ieee754_rem_pio2+0x398>
 80050cc:	41700000 	.word	0x41700000
 80050d0:	08005d80 	.word	0x08005d80
 80050d4:	00000000 	.word	0x00000000

080050d8 <__kernel_cos>:
 80050d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	ec59 8b10 	vmov	r8, r9, d0
 80050e0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80050e4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80050e8:	ed2d 8b02 	vpush	{d8}
 80050ec:	eeb0 8a41 	vmov.f32	s16, s2
 80050f0:	eef0 8a61 	vmov.f32	s17, s3
 80050f4:	da07      	bge.n	8005106 <__kernel_cos+0x2e>
 80050f6:	ee10 0a10 	vmov	r0, s0
 80050fa:	4649      	mov	r1, r9
 80050fc:	f7fb fd36 	bl	8000b6c <__aeabi_d2iz>
 8005100:	2800      	cmp	r0, #0
 8005102:	f000 8089 	beq.w	8005218 <__kernel_cos+0x140>
 8005106:	4642      	mov	r2, r8
 8005108:	464b      	mov	r3, r9
 800510a:	4640      	mov	r0, r8
 800510c:	4649      	mov	r1, r9
 800510e:	f7fb fa93 	bl	8000638 <__aeabi_dmul>
 8005112:	2200      	movs	r2, #0
 8005114:	4b4e      	ldr	r3, [pc, #312]	; (8005250 <__kernel_cos+0x178>)
 8005116:	4604      	mov	r4, r0
 8005118:	460d      	mov	r5, r1
 800511a:	f7fb fa8d 	bl	8000638 <__aeabi_dmul>
 800511e:	a340      	add	r3, pc, #256	; (adr r3, 8005220 <__kernel_cos+0x148>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	4682      	mov	sl, r0
 8005126:	468b      	mov	fp, r1
 8005128:	4620      	mov	r0, r4
 800512a:	4629      	mov	r1, r5
 800512c:	f7fb fa84 	bl	8000638 <__aeabi_dmul>
 8005130:	a33d      	add	r3, pc, #244	; (adr r3, 8005228 <__kernel_cos+0x150>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f7fb f8c9 	bl	80002cc <__adddf3>
 800513a:	4622      	mov	r2, r4
 800513c:	462b      	mov	r3, r5
 800513e:	f7fb fa7b 	bl	8000638 <__aeabi_dmul>
 8005142:	a33b      	add	r3, pc, #236	; (adr r3, 8005230 <__kernel_cos+0x158>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb f8be 	bl	80002c8 <__aeabi_dsub>
 800514c:	4622      	mov	r2, r4
 800514e:	462b      	mov	r3, r5
 8005150:	f7fb fa72 	bl	8000638 <__aeabi_dmul>
 8005154:	a338      	add	r3, pc, #224	; (adr r3, 8005238 <__kernel_cos+0x160>)
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f7fb f8b7 	bl	80002cc <__adddf3>
 800515e:	4622      	mov	r2, r4
 8005160:	462b      	mov	r3, r5
 8005162:	f7fb fa69 	bl	8000638 <__aeabi_dmul>
 8005166:	a336      	add	r3, pc, #216	; (adr r3, 8005240 <__kernel_cos+0x168>)
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	f7fb f8ac 	bl	80002c8 <__aeabi_dsub>
 8005170:	4622      	mov	r2, r4
 8005172:	462b      	mov	r3, r5
 8005174:	f7fb fa60 	bl	8000638 <__aeabi_dmul>
 8005178:	a333      	add	r3, pc, #204	; (adr r3, 8005248 <__kernel_cos+0x170>)
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f7fb f8a5 	bl	80002cc <__adddf3>
 8005182:	4622      	mov	r2, r4
 8005184:	462b      	mov	r3, r5
 8005186:	f7fb fa57 	bl	8000638 <__aeabi_dmul>
 800518a:	4622      	mov	r2, r4
 800518c:	462b      	mov	r3, r5
 800518e:	f7fb fa53 	bl	8000638 <__aeabi_dmul>
 8005192:	ec53 2b18 	vmov	r2, r3, d8
 8005196:	4604      	mov	r4, r0
 8005198:	460d      	mov	r5, r1
 800519a:	4640      	mov	r0, r8
 800519c:	4649      	mov	r1, r9
 800519e:	f7fb fa4b 	bl	8000638 <__aeabi_dmul>
 80051a2:	460b      	mov	r3, r1
 80051a4:	4602      	mov	r2, r0
 80051a6:	4629      	mov	r1, r5
 80051a8:	4620      	mov	r0, r4
 80051aa:	f7fb f88d 	bl	80002c8 <__aeabi_dsub>
 80051ae:	4b29      	ldr	r3, [pc, #164]	; (8005254 <__kernel_cos+0x17c>)
 80051b0:	429e      	cmp	r6, r3
 80051b2:	4680      	mov	r8, r0
 80051b4:	4689      	mov	r9, r1
 80051b6:	dc11      	bgt.n	80051dc <__kernel_cos+0x104>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4650      	mov	r0, sl
 80051be:	4659      	mov	r1, fp
 80051c0:	f7fb f882 	bl	80002c8 <__aeabi_dsub>
 80051c4:	460b      	mov	r3, r1
 80051c6:	4924      	ldr	r1, [pc, #144]	; (8005258 <__kernel_cos+0x180>)
 80051c8:	4602      	mov	r2, r0
 80051ca:	2000      	movs	r0, #0
 80051cc:	f7fb f87c 	bl	80002c8 <__aeabi_dsub>
 80051d0:	ecbd 8b02 	vpop	{d8}
 80051d4:	ec41 0b10 	vmov	d0, r0, r1
 80051d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051dc:	4b1f      	ldr	r3, [pc, #124]	; (800525c <__kernel_cos+0x184>)
 80051de:	491e      	ldr	r1, [pc, #120]	; (8005258 <__kernel_cos+0x180>)
 80051e0:	429e      	cmp	r6, r3
 80051e2:	bfcc      	ite	gt
 80051e4:	4d1e      	ldrgt	r5, [pc, #120]	; (8005260 <__kernel_cos+0x188>)
 80051e6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80051ea:	2400      	movs	r4, #0
 80051ec:	4622      	mov	r2, r4
 80051ee:	462b      	mov	r3, r5
 80051f0:	2000      	movs	r0, #0
 80051f2:	f7fb f869 	bl	80002c8 <__aeabi_dsub>
 80051f6:	4622      	mov	r2, r4
 80051f8:	4606      	mov	r6, r0
 80051fa:	460f      	mov	r7, r1
 80051fc:	462b      	mov	r3, r5
 80051fe:	4650      	mov	r0, sl
 8005200:	4659      	mov	r1, fp
 8005202:	f7fb f861 	bl	80002c8 <__aeabi_dsub>
 8005206:	4642      	mov	r2, r8
 8005208:	464b      	mov	r3, r9
 800520a:	f7fb f85d 	bl	80002c8 <__aeabi_dsub>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4630      	mov	r0, r6
 8005214:	4639      	mov	r1, r7
 8005216:	e7d9      	b.n	80051cc <__kernel_cos+0xf4>
 8005218:	2000      	movs	r0, #0
 800521a:	490f      	ldr	r1, [pc, #60]	; (8005258 <__kernel_cos+0x180>)
 800521c:	e7d8      	b.n	80051d0 <__kernel_cos+0xf8>
 800521e:	bf00      	nop
 8005220:	be8838d4 	.word	0xbe8838d4
 8005224:	bda8fae9 	.word	0xbda8fae9
 8005228:	bdb4b1c4 	.word	0xbdb4b1c4
 800522c:	3e21ee9e 	.word	0x3e21ee9e
 8005230:	809c52ad 	.word	0x809c52ad
 8005234:	3e927e4f 	.word	0x3e927e4f
 8005238:	19cb1590 	.word	0x19cb1590
 800523c:	3efa01a0 	.word	0x3efa01a0
 8005240:	16c15177 	.word	0x16c15177
 8005244:	3f56c16c 	.word	0x3f56c16c
 8005248:	5555554c 	.word	0x5555554c
 800524c:	3fa55555 	.word	0x3fa55555
 8005250:	3fe00000 	.word	0x3fe00000
 8005254:	3fd33332 	.word	0x3fd33332
 8005258:	3ff00000 	.word	0x3ff00000
 800525c:	3fe90000 	.word	0x3fe90000
 8005260:	3fd20000 	.word	0x3fd20000
 8005264:	00000000 	.word	0x00000000

08005268 <__kernel_rem_pio2>:
 8005268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526c:	ed2d 8b02 	vpush	{d8}
 8005270:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005274:	1ed4      	subs	r4, r2, #3
 8005276:	9308      	str	r3, [sp, #32]
 8005278:	9101      	str	r1, [sp, #4]
 800527a:	4bc5      	ldr	r3, [pc, #788]	; (8005590 <__kernel_rem_pio2+0x328>)
 800527c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800527e:	9009      	str	r0, [sp, #36]	; 0x24
 8005280:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005284:	9304      	str	r3, [sp, #16]
 8005286:	9b08      	ldr	r3, [sp, #32]
 8005288:	3b01      	subs	r3, #1
 800528a:	9307      	str	r3, [sp, #28]
 800528c:	2318      	movs	r3, #24
 800528e:	fb94 f4f3 	sdiv	r4, r4, r3
 8005292:	f06f 0317 	mvn.w	r3, #23
 8005296:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800529a:	fb04 3303 	mla	r3, r4, r3, r3
 800529e:	eb03 0a02 	add.w	sl, r3, r2
 80052a2:	9b04      	ldr	r3, [sp, #16]
 80052a4:	9a07      	ldr	r2, [sp, #28]
 80052a6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005580 <__kernel_rem_pio2+0x318>
 80052aa:	eb03 0802 	add.w	r8, r3, r2
 80052ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80052b0:	1aa7      	subs	r7, r4, r2
 80052b2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80052b6:	ae22      	add	r6, sp, #136	; 0x88
 80052b8:	2500      	movs	r5, #0
 80052ba:	4545      	cmp	r5, r8
 80052bc:	dd13      	ble.n	80052e6 <__kernel_rem_pio2+0x7e>
 80052be:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005580 <__kernel_rem_pio2+0x318>
 80052c2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80052c6:	2600      	movs	r6, #0
 80052c8:	9b04      	ldr	r3, [sp, #16]
 80052ca:	429e      	cmp	r6, r3
 80052cc:	dc32      	bgt.n	8005334 <__kernel_rem_pio2+0xcc>
 80052ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d0:	9302      	str	r3, [sp, #8]
 80052d2:	9b08      	ldr	r3, [sp, #32]
 80052d4:	199d      	adds	r5, r3, r6
 80052d6:	ab22      	add	r3, sp, #136	; 0x88
 80052d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80052dc:	9306      	str	r3, [sp, #24]
 80052de:	ec59 8b18 	vmov	r8, r9, d8
 80052e2:	2700      	movs	r7, #0
 80052e4:	e01f      	b.n	8005326 <__kernel_rem_pio2+0xbe>
 80052e6:	42ef      	cmn	r7, r5
 80052e8:	d407      	bmi.n	80052fa <__kernel_rem_pio2+0x92>
 80052ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80052ee:	f7fb f939 	bl	8000564 <__aeabi_i2d>
 80052f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80052f6:	3501      	adds	r5, #1
 80052f8:	e7df      	b.n	80052ba <__kernel_rem_pio2+0x52>
 80052fa:	ec51 0b18 	vmov	r0, r1, d8
 80052fe:	e7f8      	b.n	80052f2 <__kernel_rem_pio2+0x8a>
 8005300:	9906      	ldr	r1, [sp, #24]
 8005302:	9d02      	ldr	r5, [sp, #8]
 8005304:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005308:	9106      	str	r1, [sp, #24]
 800530a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800530e:	9502      	str	r5, [sp, #8]
 8005310:	f7fb f992 	bl	8000638 <__aeabi_dmul>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4640      	mov	r0, r8
 800531a:	4649      	mov	r1, r9
 800531c:	f7fa ffd6 	bl	80002cc <__adddf3>
 8005320:	3701      	adds	r7, #1
 8005322:	4680      	mov	r8, r0
 8005324:	4689      	mov	r9, r1
 8005326:	9b07      	ldr	r3, [sp, #28]
 8005328:	429f      	cmp	r7, r3
 800532a:	dde9      	ble.n	8005300 <__kernel_rem_pio2+0x98>
 800532c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005330:	3601      	adds	r6, #1
 8005332:	e7c9      	b.n	80052c8 <__kernel_rem_pio2+0x60>
 8005334:	9b04      	ldr	r3, [sp, #16]
 8005336:	aa0e      	add	r2, sp, #56	; 0x38
 8005338:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800533c:	930c      	str	r3, [sp, #48]	; 0x30
 800533e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005340:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005344:	9c04      	ldr	r4, [sp, #16]
 8005346:	930b      	str	r3, [sp, #44]	; 0x2c
 8005348:	ab9a      	add	r3, sp, #616	; 0x268
 800534a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800534e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005352:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005356:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800535a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800535e:	ab9a      	add	r3, sp, #616	; 0x268
 8005360:	445b      	add	r3, fp
 8005362:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005366:	2500      	movs	r5, #0
 8005368:	1b63      	subs	r3, r4, r5
 800536a:	2b00      	cmp	r3, #0
 800536c:	dc78      	bgt.n	8005460 <__kernel_rem_pio2+0x1f8>
 800536e:	4650      	mov	r0, sl
 8005370:	ec49 8b10 	vmov	d0, r8, r9
 8005374:	f000 fc00 	bl	8005b78 <scalbn>
 8005378:	ec57 6b10 	vmov	r6, r7, d0
 800537c:	2200      	movs	r2, #0
 800537e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005382:	ee10 0a10 	vmov	r0, s0
 8005386:	4639      	mov	r1, r7
 8005388:	f7fb f956 	bl	8000638 <__aeabi_dmul>
 800538c:	ec41 0b10 	vmov	d0, r0, r1
 8005390:	f000 fb6e 	bl	8005a70 <floor>
 8005394:	2200      	movs	r2, #0
 8005396:	ec51 0b10 	vmov	r0, r1, d0
 800539a:	4b7e      	ldr	r3, [pc, #504]	; (8005594 <__kernel_rem_pio2+0x32c>)
 800539c:	f7fb f94c 	bl	8000638 <__aeabi_dmul>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4630      	mov	r0, r6
 80053a6:	4639      	mov	r1, r7
 80053a8:	f7fa ff8e 	bl	80002c8 <__aeabi_dsub>
 80053ac:	460f      	mov	r7, r1
 80053ae:	4606      	mov	r6, r0
 80053b0:	f7fb fbdc 	bl	8000b6c <__aeabi_d2iz>
 80053b4:	9006      	str	r0, [sp, #24]
 80053b6:	f7fb f8d5 	bl	8000564 <__aeabi_i2d>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4630      	mov	r0, r6
 80053c0:	4639      	mov	r1, r7
 80053c2:	f7fa ff81 	bl	80002c8 <__aeabi_dsub>
 80053c6:	f1ba 0f00 	cmp.w	sl, #0
 80053ca:	4606      	mov	r6, r0
 80053cc:	460f      	mov	r7, r1
 80053ce:	dd6c      	ble.n	80054aa <__kernel_rem_pio2+0x242>
 80053d0:	1e62      	subs	r2, r4, #1
 80053d2:	ab0e      	add	r3, sp, #56	; 0x38
 80053d4:	f1ca 0118 	rsb	r1, sl, #24
 80053d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80053dc:	9d06      	ldr	r5, [sp, #24]
 80053de:	fa40 f301 	asr.w	r3, r0, r1
 80053e2:	441d      	add	r5, r3
 80053e4:	408b      	lsls	r3, r1
 80053e6:	1ac0      	subs	r0, r0, r3
 80053e8:	ab0e      	add	r3, sp, #56	; 0x38
 80053ea:	9506      	str	r5, [sp, #24]
 80053ec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80053f0:	f1ca 0317 	rsb	r3, sl, #23
 80053f4:	fa40 f303 	asr.w	r3, r0, r3
 80053f8:	9302      	str	r3, [sp, #8]
 80053fa:	9b02      	ldr	r3, [sp, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	dd62      	ble.n	80054c6 <__kernel_rem_pio2+0x25e>
 8005400:	9b06      	ldr	r3, [sp, #24]
 8005402:	2200      	movs	r2, #0
 8005404:	3301      	adds	r3, #1
 8005406:	9306      	str	r3, [sp, #24]
 8005408:	4615      	mov	r5, r2
 800540a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800540e:	4294      	cmp	r4, r2
 8005410:	f300 8095 	bgt.w	800553e <__kernel_rem_pio2+0x2d6>
 8005414:	f1ba 0f00 	cmp.w	sl, #0
 8005418:	dd07      	ble.n	800542a <__kernel_rem_pio2+0x1c2>
 800541a:	f1ba 0f01 	cmp.w	sl, #1
 800541e:	f000 80a2 	beq.w	8005566 <__kernel_rem_pio2+0x2fe>
 8005422:	f1ba 0f02 	cmp.w	sl, #2
 8005426:	f000 80c1 	beq.w	80055ac <__kernel_rem_pio2+0x344>
 800542a:	9b02      	ldr	r3, [sp, #8]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d14a      	bne.n	80054c6 <__kernel_rem_pio2+0x25e>
 8005430:	4632      	mov	r2, r6
 8005432:	463b      	mov	r3, r7
 8005434:	2000      	movs	r0, #0
 8005436:	4958      	ldr	r1, [pc, #352]	; (8005598 <__kernel_rem_pio2+0x330>)
 8005438:	f7fa ff46 	bl	80002c8 <__aeabi_dsub>
 800543c:	4606      	mov	r6, r0
 800543e:	460f      	mov	r7, r1
 8005440:	2d00      	cmp	r5, #0
 8005442:	d040      	beq.n	80054c6 <__kernel_rem_pio2+0x25e>
 8005444:	4650      	mov	r0, sl
 8005446:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005588 <__kernel_rem_pio2+0x320>
 800544a:	f000 fb95 	bl	8005b78 <scalbn>
 800544e:	4630      	mov	r0, r6
 8005450:	4639      	mov	r1, r7
 8005452:	ec53 2b10 	vmov	r2, r3, d0
 8005456:	f7fa ff37 	bl	80002c8 <__aeabi_dsub>
 800545a:	4606      	mov	r6, r0
 800545c:	460f      	mov	r7, r1
 800545e:	e032      	b.n	80054c6 <__kernel_rem_pio2+0x25e>
 8005460:	2200      	movs	r2, #0
 8005462:	4b4e      	ldr	r3, [pc, #312]	; (800559c <__kernel_rem_pio2+0x334>)
 8005464:	4640      	mov	r0, r8
 8005466:	4649      	mov	r1, r9
 8005468:	f7fb f8e6 	bl	8000638 <__aeabi_dmul>
 800546c:	f7fb fb7e 	bl	8000b6c <__aeabi_d2iz>
 8005470:	f7fb f878 	bl	8000564 <__aeabi_i2d>
 8005474:	2200      	movs	r2, #0
 8005476:	4b4a      	ldr	r3, [pc, #296]	; (80055a0 <__kernel_rem_pio2+0x338>)
 8005478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800547c:	f7fb f8dc 	bl	8000638 <__aeabi_dmul>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4640      	mov	r0, r8
 8005486:	4649      	mov	r1, r9
 8005488:	f7fa ff1e 	bl	80002c8 <__aeabi_dsub>
 800548c:	f7fb fb6e 	bl	8000b6c <__aeabi_d2iz>
 8005490:	ab0e      	add	r3, sp, #56	; 0x38
 8005492:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005496:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800549a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800549e:	f7fa ff15 	bl	80002cc <__adddf3>
 80054a2:	3501      	adds	r5, #1
 80054a4:	4680      	mov	r8, r0
 80054a6:	4689      	mov	r9, r1
 80054a8:	e75e      	b.n	8005368 <__kernel_rem_pio2+0x100>
 80054aa:	d105      	bne.n	80054b8 <__kernel_rem_pio2+0x250>
 80054ac:	1e63      	subs	r3, r4, #1
 80054ae:	aa0e      	add	r2, sp, #56	; 0x38
 80054b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80054b4:	15c3      	asrs	r3, r0, #23
 80054b6:	e79f      	b.n	80053f8 <__kernel_rem_pio2+0x190>
 80054b8:	2200      	movs	r2, #0
 80054ba:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <__kernel_rem_pio2+0x33c>)
 80054bc:	f7fb fb42 	bl	8000b44 <__aeabi_dcmpge>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d139      	bne.n	8005538 <__kernel_rem_pio2+0x2d0>
 80054c4:	9002      	str	r0, [sp, #8]
 80054c6:	2200      	movs	r2, #0
 80054c8:	2300      	movs	r3, #0
 80054ca:	4630      	mov	r0, r6
 80054cc:	4639      	mov	r1, r7
 80054ce:	f7fb fb1b 	bl	8000b08 <__aeabi_dcmpeq>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	f000 80c7 	beq.w	8005666 <__kernel_rem_pio2+0x3fe>
 80054d8:	1e65      	subs	r5, r4, #1
 80054da:	462b      	mov	r3, r5
 80054dc:	2200      	movs	r2, #0
 80054de:	9904      	ldr	r1, [sp, #16]
 80054e0:	428b      	cmp	r3, r1
 80054e2:	da6a      	bge.n	80055ba <__kernel_rem_pio2+0x352>
 80054e4:	2a00      	cmp	r2, #0
 80054e6:	f000 8088 	beq.w	80055fa <__kernel_rem_pio2+0x392>
 80054ea:	ab0e      	add	r3, sp, #56	; 0x38
 80054ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80054f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80b4 	beq.w	8005662 <__kernel_rem_pio2+0x3fa>
 80054fa:	4650      	mov	r0, sl
 80054fc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005588 <__kernel_rem_pio2+0x320>
 8005500:	f000 fb3a 	bl	8005b78 <scalbn>
 8005504:	00ec      	lsls	r4, r5, #3
 8005506:	ab72      	add	r3, sp, #456	; 0x1c8
 8005508:	191e      	adds	r6, r3, r4
 800550a:	ec59 8b10 	vmov	r8, r9, d0
 800550e:	f106 0a08 	add.w	sl, r6, #8
 8005512:	462f      	mov	r7, r5
 8005514:	2f00      	cmp	r7, #0
 8005516:	f280 80df 	bge.w	80056d8 <__kernel_rem_pio2+0x470>
 800551a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005580 <__kernel_rem_pio2+0x318>
 800551e:	f04f 0a00 	mov.w	sl, #0
 8005522:	eba5 030a 	sub.w	r3, r5, sl
 8005526:	2b00      	cmp	r3, #0
 8005528:	f2c0 810a 	blt.w	8005740 <__kernel_rem_pio2+0x4d8>
 800552c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80055a8 <__kernel_rem_pio2+0x340>
 8005530:	ec59 8b18 	vmov	r8, r9, d8
 8005534:	2700      	movs	r7, #0
 8005536:	e0f5      	b.n	8005724 <__kernel_rem_pio2+0x4bc>
 8005538:	2302      	movs	r3, #2
 800553a:	9302      	str	r3, [sp, #8]
 800553c:	e760      	b.n	8005400 <__kernel_rem_pio2+0x198>
 800553e:	ab0e      	add	r3, sp, #56	; 0x38
 8005540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005544:	b94d      	cbnz	r5, 800555a <__kernel_rem_pio2+0x2f2>
 8005546:	b12b      	cbz	r3, 8005554 <__kernel_rem_pio2+0x2ec>
 8005548:	a80e      	add	r0, sp, #56	; 0x38
 800554a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800554e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005552:	2301      	movs	r3, #1
 8005554:	3201      	adds	r2, #1
 8005556:	461d      	mov	r5, r3
 8005558:	e759      	b.n	800540e <__kernel_rem_pio2+0x1a6>
 800555a:	a80e      	add	r0, sp, #56	; 0x38
 800555c:	1acb      	subs	r3, r1, r3
 800555e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005562:	462b      	mov	r3, r5
 8005564:	e7f6      	b.n	8005554 <__kernel_rem_pio2+0x2ec>
 8005566:	1e62      	subs	r2, r4, #1
 8005568:	ab0e      	add	r3, sp, #56	; 0x38
 800556a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005572:	a90e      	add	r1, sp, #56	; 0x38
 8005574:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005578:	e757      	b.n	800542a <__kernel_rem_pio2+0x1c2>
 800557a:	bf00      	nop
 800557c:	f3af 8000 	nop.w
	...
 800558c:	3ff00000 	.word	0x3ff00000
 8005590:	08005ec8 	.word	0x08005ec8
 8005594:	40200000 	.word	0x40200000
 8005598:	3ff00000 	.word	0x3ff00000
 800559c:	3e700000 	.word	0x3e700000
 80055a0:	41700000 	.word	0x41700000
 80055a4:	3fe00000 	.word	0x3fe00000
 80055a8:	08005e88 	.word	0x08005e88
 80055ac:	1e62      	subs	r2, r4, #1
 80055ae:	ab0e      	add	r3, sp, #56	; 0x38
 80055b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80055b8:	e7db      	b.n	8005572 <__kernel_rem_pio2+0x30a>
 80055ba:	a90e      	add	r1, sp, #56	; 0x38
 80055bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	430a      	orrs	r2, r1
 80055c4:	e78b      	b.n	80054de <__kernel_rem_pio2+0x276>
 80055c6:	3301      	adds	r3, #1
 80055c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80055cc:	2900      	cmp	r1, #0
 80055ce:	d0fa      	beq.n	80055c6 <__kernel_rem_pio2+0x35e>
 80055d0:	9a08      	ldr	r2, [sp, #32]
 80055d2:	4422      	add	r2, r4
 80055d4:	00d2      	lsls	r2, r2, #3
 80055d6:	a922      	add	r1, sp, #136	; 0x88
 80055d8:	18e3      	adds	r3, r4, r3
 80055da:	9206      	str	r2, [sp, #24]
 80055dc:	440a      	add	r2, r1
 80055de:	9302      	str	r3, [sp, #8]
 80055e0:	f10b 0108 	add.w	r1, fp, #8
 80055e4:	f102 0308 	add.w	r3, r2, #8
 80055e8:	1c66      	adds	r6, r4, #1
 80055ea:	910a      	str	r1, [sp, #40]	; 0x28
 80055ec:	2500      	movs	r5, #0
 80055ee:	930d      	str	r3, [sp, #52]	; 0x34
 80055f0:	9b02      	ldr	r3, [sp, #8]
 80055f2:	42b3      	cmp	r3, r6
 80055f4:	da04      	bge.n	8005600 <__kernel_rem_pio2+0x398>
 80055f6:	461c      	mov	r4, r3
 80055f8:	e6a6      	b.n	8005348 <__kernel_rem_pio2+0xe0>
 80055fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055fc:	2301      	movs	r3, #1
 80055fe:	e7e3      	b.n	80055c8 <__kernel_rem_pio2+0x360>
 8005600:	9b06      	ldr	r3, [sp, #24]
 8005602:	18ef      	adds	r7, r5, r3
 8005604:	ab22      	add	r3, sp, #136	; 0x88
 8005606:	441f      	add	r7, r3
 8005608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800560a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800560e:	f7fa ffa9 	bl	8000564 <__aeabi_i2d>
 8005612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005614:	461c      	mov	r4, r3
 8005616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005618:	e9c7 0100 	strd	r0, r1, [r7]
 800561c:	eb03 0b05 	add.w	fp, r3, r5
 8005620:	2700      	movs	r7, #0
 8005622:	f04f 0800 	mov.w	r8, #0
 8005626:	f04f 0900 	mov.w	r9, #0
 800562a:	9b07      	ldr	r3, [sp, #28]
 800562c:	429f      	cmp	r7, r3
 800562e:	dd08      	ble.n	8005642 <__kernel_rem_pio2+0x3da>
 8005630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005632:	aa72      	add	r2, sp, #456	; 0x1c8
 8005634:	18eb      	adds	r3, r5, r3
 8005636:	4413      	add	r3, r2
 8005638:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800563c:	3601      	adds	r6, #1
 800563e:	3508      	adds	r5, #8
 8005640:	e7d6      	b.n	80055f0 <__kernel_rem_pio2+0x388>
 8005642:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005646:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800564a:	f7fa fff5 	bl	8000638 <__aeabi_dmul>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4640      	mov	r0, r8
 8005654:	4649      	mov	r1, r9
 8005656:	f7fa fe39 	bl	80002cc <__adddf3>
 800565a:	3701      	adds	r7, #1
 800565c:	4680      	mov	r8, r0
 800565e:	4689      	mov	r9, r1
 8005660:	e7e3      	b.n	800562a <__kernel_rem_pio2+0x3c2>
 8005662:	3d01      	subs	r5, #1
 8005664:	e741      	b.n	80054ea <__kernel_rem_pio2+0x282>
 8005666:	f1ca 0000 	rsb	r0, sl, #0
 800566a:	ec47 6b10 	vmov	d0, r6, r7
 800566e:	f000 fa83 	bl	8005b78 <scalbn>
 8005672:	ec57 6b10 	vmov	r6, r7, d0
 8005676:	2200      	movs	r2, #0
 8005678:	4b99      	ldr	r3, [pc, #612]	; (80058e0 <__kernel_rem_pio2+0x678>)
 800567a:	ee10 0a10 	vmov	r0, s0
 800567e:	4639      	mov	r1, r7
 8005680:	f7fb fa60 	bl	8000b44 <__aeabi_dcmpge>
 8005684:	b1f8      	cbz	r0, 80056c6 <__kernel_rem_pio2+0x45e>
 8005686:	2200      	movs	r2, #0
 8005688:	4b96      	ldr	r3, [pc, #600]	; (80058e4 <__kernel_rem_pio2+0x67c>)
 800568a:	4630      	mov	r0, r6
 800568c:	4639      	mov	r1, r7
 800568e:	f7fa ffd3 	bl	8000638 <__aeabi_dmul>
 8005692:	f7fb fa6b 	bl	8000b6c <__aeabi_d2iz>
 8005696:	4680      	mov	r8, r0
 8005698:	f7fa ff64 	bl	8000564 <__aeabi_i2d>
 800569c:	2200      	movs	r2, #0
 800569e:	4b90      	ldr	r3, [pc, #576]	; (80058e0 <__kernel_rem_pio2+0x678>)
 80056a0:	f7fa ffca 	bl	8000638 <__aeabi_dmul>
 80056a4:	460b      	mov	r3, r1
 80056a6:	4602      	mov	r2, r0
 80056a8:	4639      	mov	r1, r7
 80056aa:	4630      	mov	r0, r6
 80056ac:	f7fa fe0c 	bl	80002c8 <__aeabi_dsub>
 80056b0:	f7fb fa5c 	bl	8000b6c <__aeabi_d2iz>
 80056b4:	1c65      	adds	r5, r4, #1
 80056b6:	ab0e      	add	r3, sp, #56	; 0x38
 80056b8:	f10a 0a18 	add.w	sl, sl, #24
 80056bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80056c0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80056c4:	e719      	b.n	80054fa <__kernel_rem_pio2+0x292>
 80056c6:	4630      	mov	r0, r6
 80056c8:	4639      	mov	r1, r7
 80056ca:	f7fb fa4f 	bl	8000b6c <__aeabi_d2iz>
 80056ce:	ab0e      	add	r3, sp, #56	; 0x38
 80056d0:	4625      	mov	r5, r4
 80056d2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80056d6:	e710      	b.n	80054fa <__kernel_rem_pio2+0x292>
 80056d8:	ab0e      	add	r3, sp, #56	; 0x38
 80056da:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80056de:	f7fa ff41 	bl	8000564 <__aeabi_i2d>
 80056e2:	4642      	mov	r2, r8
 80056e4:	464b      	mov	r3, r9
 80056e6:	f7fa ffa7 	bl	8000638 <__aeabi_dmul>
 80056ea:	2200      	movs	r2, #0
 80056ec:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80056f0:	4b7c      	ldr	r3, [pc, #496]	; (80058e4 <__kernel_rem_pio2+0x67c>)
 80056f2:	4640      	mov	r0, r8
 80056f4:	4649      	mov	r1, r9
 80056f6:	f7fa ff9f 	bl	8000638 <__aeabi_dmul>
 80056fa:	3f01      	subs	r7, #1
 80056fc:	4680      	mov	r8, r0
 80056fe:	4689      	mov	r9, r1
 8005700:	e708      	b.n	8005514 <__kernel_rem_pio2+0x2ac>
 8005702:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800570e:	f7fa ff93 	bl	8000638 <__aeabi_dmul>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4640      	mov	r0, r8
 8005718:	4649      	mov	r1, r9
 800571a:	f7fa fdd7 	bl	80002cc <__adddf3>
 800571e:	3701      	adds	r7, #1
 8005720:	4680      	mov	r8, r0
 8005722:	4689      	mov	r9, r1
 8005724:	9b04      	ldr	r3, [sp, #16]
 8005726:	429f      	cmp	r7, r3
 8005728:	dc01      	bgt.n	800572e <__kernel_rem_pio2+0x4c6>
 800572a:	45ba      	cmp	sl, r7
 800572c:	dae9      	bge.n	8005702 <__kernel_rem_pio2+0x49a>
 800572e:	ab4a      	add	r3, sp, #296	; 0x128
 8005730:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005734:	e9c3 8900 	strd	r8, r9, [r3]
 8005738:	f10a 0a01 	add.w	sl, sl, #1
 800573c:	3e08      	subs	r6, #8
 800573e:	e6f0      	b.n	8005522 <__kernel_rem_pio2+0x2ba>
 8005740:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005742:	2b03      	cmp	r3, #3
 8005744:	d85b      	bhi.n	80057fe <__kernel_rem_pio2+0x596>
 8005746:	e8df f003 	tbb	[pc, r3]
 800574a:	264a      	.short	0x264a
 800574c:	0226      	.short	0x0226
 800574e:	ab9a      	add	r3, sp, #616	; 0x268
 8005750:	441c      	add	r4, r3
 8005752:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005756:	46a2      	mov	sl, r4
 8005758:	46ab      	mov	fp, r5
 800575a:	f1bb 0f00 	cmp.w	fp, #0
 800575e:	dc6c      	bgt.n	800583a <__kernel_rem_pio2+0x5d2>
 8005760:	46a2      	mov	sl, r4
 8005762:	46ab      	mov	fp, r5
 8005764:	f1bb 0f01 	cmp.w	fp, #1
 8005768:	f300 8086 	bgt.w	8005878 <__kernel_rem_pio2+0x610>
 800576c:	2000      	movs	r0, #0
 800576e:	2100      	movs	r1, #0
 8005770:	2d01      	cmp	r5, #1
 8005772:	f300 80a0 	bgt.w	80058b6 <__kernel_rem_pio2+0x64e>
 8005776:	9b02      	ldr	r3, [sp, #8]
 8005778:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800577c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005780:	2b00      	cmp	r3, #0
 8005782:	f040 809e 	bne.w	80058c2 <__kernel_rem_pio2+0x65a>
 8005786:	9b01      	ldr	r3, [sp, #4]
 8005788:	e9c3 7800 	strd	r7, r8, [r3]
 800578c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005790:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005794:	e033      	b.n	80057fe <__kernel_rem_pio2+0x596>
 8005796:	3408      	adds	r4, #8
 8005798:	ab4a      	add	r3, sp, #296	; 0x128
 800579a:	441c      	add	r4, r3
 800579c:	462e      	mov	r6, r5
 800579e:	2000      	movs	r0, #0
 80057a0:	2100      	movs	r1, #0
 80057a2:	2e00      	cmp	r6, #0
 80057a4:	da3a      	bge.n	800581c <__kernel_rem_pio2+0x5b4>
 80057a6:	9b02      	ldr	r3, [sp, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d03d      	beq.n	8005828 <__kernel_rem_pio2+0x5c0>
 80057ac:	4602      	mov	r2, r0
 80057ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057b2:	9c01      	ldr	r4, [sp, #4]
 80057b4:	e9c4 2300 	strd	r2, r3, [r4]
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80057c0:	f7fa fd82 	bl	80002c8 <__aeabi_dsub>
 80057c4:	ae4c      	add	r6, sp, #304	; 0x130
 80057c6:	2401      	movs	r4, #1
 80057c8:	42a5      	cmp	r5, r4
 80057ca:	da30      	bge.n	800582e <__kernel_rem_pio2+0x5c6>
 80057cc:	9b02      	ldr	r3, [sp, #8]
 80057ce:	b113      	cbz	r3, 80057d6 <__kernel_rem_pio2+0x56e>
 80057d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057d4:	4619      	mov	r1, r3
 80057d6:	9b01      	ldr	r3, [sp, #4]
 80057d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80057dc:	e00f      	b.n	80057fe <__kernel_rem_pio2+0x596>
 80057de:	ab9a      	add	r3, sp, #616	; 0x268
 80057e0:	441c      	add	r4, r3
 80057e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80057e6:	2000      	movs	r0, #0
 80057e8:	2100      	movs	r1, #0
 80057ea:	2d00      	cmp	r5, #0
 80057ec:	da10      	bge.n	8005810 <__kernel_rem_pio2+0x5a8>
 80057ee:	9b02      	ldr	r3, [sp, #8]
 80057f0:	b113      	cbz	r3, 80057f8 <__kernel_rem_pio2+0x590>
 80057f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057f6:	4619      	mov	r1, r3
 80057f8:	9b01      	ldr	r3, [sp, #4]
 80057fa:	e9c3 0100 	strd	r0, r1, [r3]
 80057fe:	9b06      	ldr	r3, [sp, #24]
 8005800:	f003 0007 	and.w	r0, r3, #7
 8005804:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005808:	ecbd 8b02 	vpop	{d8}
 800580c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005810:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005814:	f7fa fd5a 	bl	80002cc <__adddf3>
 8005818:	3d01      	subs	r5, #1
 800581a:	e7e6      	b.n	80057ea <__kernel_rem_pio2+0x582>
 800581c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005820:	f7fa fd54 	bl	80002cc <__adddf3>
 8005824:	3e01      	subs	r6, #1
 8005826:	e7bc      	b.n	80057a2 <__kernel_rem_pio2+0x53a>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	e7c1      	b.n	80057b2 <__kernel_rem_pio2+0x54a>
 800582e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005832:	f7fa fd4b 	bl	80002cc <__adddf3>
 8005836:	3401      	adds	r4, #1
 8005838:	e7c6      	b.n	80057c8 <__kernel_rem_pio2+0x560>
 800583a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800583e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005842:	4640      	mov	r0, r8
 8005844:	ec53 2b17 	vmov	r2, r3, d7
 8005848:	4649      	mov	r1, r9
 800584a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800584e:	f7fa fd3d 	bl	80002cc <__adddf3>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4606      	mov	r6, r0
 8005858:	460f      	mov	r7, r1
 800585a:	4640      	mov	r0, r8
 800585c:	4649      	mov	r1, r9
 800585e:	f7fa fd33 	bl	80002c8 <__aeabi_dsub>
 8005862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005866:	f7fa fd31 	bl	80002cc <__adddf3>
 800586a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800586e:	e9ca 0100 	strd	r0, r1, [sl]
 8005872:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005876:	e770      	b.n	800575a <__kernel_rem_pio2+0x4f2>
 8005878:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800587c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005880:	4630      	mov	r0, r6
 8005882:	ec53 2b17 	vmov	r2, r3, d7
 8005886:	4639      	mov	r1, r7
 8005888:	ed8d 7b04 	vstr	d7, [sp, #16]
 800588c:	f7fa fd1e 	bl	80002cc <__adddf3>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4680      	mov	r8, r0
 8005896:	4689      	mov	r9, r1
 8005898:	4630      	mov	r0, r6
 800589a:	4639      	mov	r1, r7
 800589c:	f7fa fd14 	bl	80002c8 <__aeabi_dsub>
 80058a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058a4:	f7fa fd12 	bl	80002cc <__adddf3>
 80058a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058ac:	e9ca 0100 	strd	r0, r1, [sl]
 80058b0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80058b4:	e756      	b.n	8005764 <__kernel_rem_pio2+0x4fc>
 80058b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80058ba:	f7fa fd07 	bl	80002cc <__adddf3>
 80058be:	3d01      	subs	r5, #1
 80058c0:	e756      	b.n	8005770 <__kernel_rem_pio2+0x508>
 80058c2:	9b01      	ldr	r3, [sp, #4]
 80058c4:	9a01      	ldr	r2, [sp, #4]
 80058c6:	601f      	str	r7, [r3, #0]
 80058c8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80058cc:	605c      	str	r4, [r3, #4]
 80058ce:	609d      	str	r5, [r3, #8]
 80058d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80058d4:	60d3      	str	r3, [r2, #12]
 80058d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058da:	6110      	str	r0, [r2, #16]
 80058dc:	6153      	str	r3, [r2, #20]
 80058de:	e78e      	b.n	80057fe <__kernel_rem_pio2+0x596>
 80058e0:	41700000 	.word	0x41700000
 80058e4:	3e700000 	.word	0x3e700000

080058e8 <__kernel_sin>:
 80058e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ec:	ec55 4b10 	vmov	r4, r5, d0
 80058f0:	b085      	sub	sp, #20
 80058f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80058f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80058fa:	ed8d 1b00 	vstr	d1, [sp]
 80058fe:	9002      	str	r0, [sp, #8]
 8005900:	da06      	bge.n	8005910 <__kernel_sin+0x28>
 8005902:	ee10 0a10 	vmov	r0, s0
 8005906:	4629      	mov	r1, r5
 8005908:	f7fb f930 	bl	8000b6c <__aeabi_d2iz>
 800590c:	2800      	cmp	r0, #0
 800590e:	d051      	beq.n	80059b4 <__kernel_sin+0xcc>
 8005910:	4622      	mov	r2, r4
 8005912:	462b      	mov	r3, r5
 8005914:	4620      	mov	r0, r4
 8005916:	4629      	mov	r1, r5
 8005918:	f7fa fe8e 	bl	8000638 <__aeabi_dmul>
 800591c:	4682      	mov	sl, r0
 800591e:	468b      	mov	fp, r1
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4620      	mov	r0, r4
 8005926:	4629      	mov	r1, r5
 8005928:	f7fa fe86 	bl	8000638 <__aeabi_dmul>
 800592c:	a341      	add	r3, pc, #260	; (adr r3, 8005a34 <__kernel_sin+0x14c>)
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	4680      	mov	r8, r0
 8005934:	4689      	mov	r9, r1
 8005936:	4650      	mov	r0, sl
 8005938:	4659      	mov	r1, fp
 800593a:	f7fa fe7d 	bl	8000638 <__aeabi_dmul>
 800593e:	a33f      	add	r3, pc, #252	; (adr r3, 8005a3c <__kernel_sin+0x154>)
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f7fa fcc0 	bl	80002c8 <__aeabi_dsub>
 8005948:	4652      	mov	r2, sl
 800594a:	465b      	mov	r3, fp
 800594c:	f7fa fe74 	bl	8000638 <__aeabi_dmul>
 8005950:	a33c      	add	r3, pc, #240	; (adr r3, 8005a44 <__kernel_sin+0x15c>)
 8005952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005956:	f7fa fcb9 	bl	80002cc <__adddf3>
 800595a:	4652      	mov	r2, sl
 800595c:	465b      	mov	r3, fp
 800595e:	f7fa fe6b 	bl	8000638 <__aeabi_dmul>
 8005962:	a33a      	add	r3, pc, #232	; (adr r3, 8005a4c <__kernel_sin+0x164>)
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	f7fa fcae 	bl	80002c8 <__aeabi_dsub>
 800596c:	4652      	mov	r2, sl
 800596e:	465b      	mov	r3, fp
 8005970:	f7fa fe62 	bl	8000638 <__aeabi_dmul>
 8005974:	a337      	add	r3, pc, #220	; (adr r3, 8005a54 <__kernel_sin+0x16c>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f7fa fca7 	bl	80002cc <__adddf3>
 800597e:	9b02      	ldr	r3, [sp, #8]
 8005980:	4606      	mov	r6, r0
 8005982:	460f      	mov	r7, r1
 8005984:	b9db      	cbnz	r3, 80059be <__kernel_sin+0xd6>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4650      	mov	r0, sl
 800598c:	4659      	mov	r1, fp
 800598e:	f7fa fe53 	bl	8000638 <__aeabi_dmul>
 8005992:	a325      	add	r3, pc, #148	; (adr r3, 8005a28 <__kernel_sin+0x140>)
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f7fa fc96 	bl	80002c8 <__aeabi_dsub>
 800599c:	4642      	mov	r2, r8
 800599e:	464b      	mov	r3, r9
 80059a0:	f7fa fe4a 	bl	8000638 <__aeabi_dmul>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4620      	mov	r0, r4
 80059aa:	4629      	mov	r1, r5
 80059ac:	f7fa fc8e 	bl	80002cc <__adddf3>
 80059b0:	4604      	mov	r4, r0
 80059b2:	460d      	mov	r5, r1
 80059b4:	ec45 4b10 	vmov	d0, r4, r5
 80059b8:	b005      	add	sp, #20
 80059ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059be:	2200      	movs	r2, #0
 80059c0:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <__kernel_sin+0x148>)
 80059c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059c6:	f7fa fe37 	bl	8000638 <__aeabi_dmul>
 80059ca:	4632      	mov	r2, r6
 80059cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059d0:	463b      	mov	r3, r7
 80059d2:	4640      	mov	r0, r8
 80059d4:	4649      	mov	r1, r9
 80059d6:	f7fa fe2f 	bl	8000638 <__aeabi_dmul>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e2:	f7fa fc71 	bl	80002c8 <__aeabi_dsub>
 80059e6:	4652      	mov	r2, sl
 80059e8:	465b      	mov	r3, fp
 80059ea:	f7fa fe25 	bl	8000638 <__aeabi_dmul>
 80059ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059f2:	f7fa fc69 	bl	80002c8 <__aeabi_dsub>
 80059f6:	a30c      	add	r3, pc, #48	; (adr r3, 8005a28 <__kernel_sin+0x140>)
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	4606      	mov	r6, r0
 80059fe:	460f      	mov	r7, r1
 8005a00:	4640      	mov	r0, r8
 8005a02:	4649      	mov	r1, r9
 8005a04:	f7fa fe18 	bl	8000638 <__aeabi_dmul>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	4639      	mov	r1, r7
 8005a10:	f7fa fc5c 	bl	80002cc <__adddf3>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4620      	mov	r0, r4
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	f7fa fc54 	bl	80002c8 <__aeabi_dsub>
 8005a20:	e7c6      	b.n	80059b0 <__kernel_sin+0xc8>
 8005a22:	bf00      	nop
 8005a24:	f3af 8000 	nop.w
 8005a28:	55555549 	.word	0x55555549
 8005a2c:	3fc55555 	.word	0x3fc55555
 8005a30:	3fe00000 	.word	0x3fe00000
 8005a34:	5acfd57c 	.word	0x5acfd57c
 8005a38:	3de5d93a 	.word	0x3de5d93a
 8005a3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005a40:	3e5ae5e6 	.word	0x3e5ae5e6
 8005a44:	57b1fe7d 	.word	0x57b1fe7d
 8005a48:	3ec71de3 	.word	0x3ec71de3
 8005a4c:	19c161d5 	.word	0x19c161d5
 8005a50:	3f2a01a0 	.word	0x3f2a01a0
 8005a54:	1110f8a6 	.word	0x1110f8a6
 8005a58:	3f811111 	.word	0x3f811111

08005a5c <fabs>:
 8005a5c:	ec51 0b10 	vmov	r0, r1, d0
 8005a60:	ee10 2a10 	vmov	r2, s0
 8005a64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a68:	ec43 2b10 	vmov	d0, r2, r3
 8005a6c:	4770      	bx	lr
	...

08005a70 <floor>:
 8005a70:	ec51 0b10 	vmov	r0, r1, d0
 8005a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005a7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005a80:	2e13      	cmp	r6, #19
 8005a82:	460c      	mov	r4, r1
 8005a84:	ee10 5a10 	vmov	r5, s0
 8005a88:	4680      	mov	r8, r0
 8005a8a:	dc34      	bgt.n	8005af6 <floor+0x86>
 8005a8c:	2e00      	cmp	r6, #0
 8005a8e:	da16      	bge.n	8005abe <floor+0x4e>
 8005a90:	a335      	add	r3, pc, #212	; (adr r3, 8005b68 <floor+0xf8>)
 8005a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a96:	f7fa fc19 	bl	80002cc <__adddf3>
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f7fb f85b 	bl	8000b58 <__aeabi_dcmpgt>
 8005aa2:	b148      	cbz	r0, 8005ab8 <floor+0x48>
 8005aa4:	2c00      	cmp	r4, #0
 8005aa6:	da59      	bge.n	8005b5c <floor+0xec>
 8005aa8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005aac:	4a30      	ldr	r2, [pc, #192]	; (8005b70 <floor+0x100>)
 8005aae:	432b      	orrs	r3, r5
 8005ab0:	2500      	movs	r5, #0
 8005ab2:	42ab      	cmp	r3, r5
 8005ab4:	bf18      	it	ne
 8005ab6:	4614      	movne	r4, r2
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4628      	mov	r0, r5
 8005abc:	e025      	b.n	8005b0a <floor+0x9a>
 8005abe:	4f2d      	ldr	r7, [pc, #180]	; (8005b74 <floor+0x104>)
 8005ac0:	4137      	asrs	r7, r6
 8005ac2:	ea01 0307 	and.w	r3, r1, r7
 8005ac6:	4303      	orrs	r3, r0
 8005ac8:	d01f      	beq.n	8005b0a <floor+0x9a>
 8005aca:	a327      	add	r3, pc, #156	; (adr r3, 8005b68 <floor+0xf8>)
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	f7fa fbfc 	bl	80002cc <__adddf3>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f7fb f83e 	bl	8000b58 <__aeabi_dcmpgt>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d0eb      	beq.n	8005ab8 <floor+0x48>
 8005ae0:	2c00      	cmp	r4, #0
 8005ae2:	bfbe      	ittt	lt
 8005ae4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005ae8:	fa43 f606 	asrlt.w	r6, r3, r6
 8005aec:	19a4      	addlt	r4, r4, r6
 8005aee:	ea24 0407 	bic.w	r4, r4, r7
 8005af2:	2500      	movs	r5, #0
 8005af4:	e7e0      	b.n	8005ab8 <floor+0x48>
 8005af6:	2e33      	cmp	r6, #51	; 0x33
 8005af8:	dd0b      	ble.n	8005b12 <floor+0xa2>
 8005afa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005afe:	d104      	bne.n	8005b0a <floor+0x9a>
 8005b00:	ee10 2a10 	vmov	r2, s0
 8005b04:	460b      	mov	r3, r1
 8005b06:	f7fa fbe1 	bl	80002cc <__adddf3>
 8005b0a:	ec41 0b10 	vmov	d0, r0, r1
 8005b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b12:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005b16:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1a:	fa23 f707 	lsr.w	r7, r3, r7
 8005b1e:	4207      	tst	r7, r0
 8005b20:	d0f3      	beq.n	8005b0a <floor+0x9a>
 8005b22:	a311      	add	r3, pc, #68	; (adr r3, 8005b68 <floor+0xf8>)
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f7fa fbd0 	bl	80002cc <__adddf3>
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f7fb f812 	bl	8000b58 <__aeabi_dcmpgt>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d0bf      	beq.n	8005ab8 <floor+0x48>
 8005b38:	2c00      	cmp	r4, #0
 8005b3a:	da02      	bge.n	8005b42 <floor+0xd2>
 8005b3c:	2e14      	cmp	r6, #20
 8005b3e:	d103      	bne.n	8005b48 <floor+0xd8>
 8005b40:	3401      	adds	r4, #1
 8005b42:	ea25 0507 	bic.w	r5, r5, r7
 8005b46:	e7b7      	b.n	8005ab8 <floor+0x48>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005b4e:	fa03 f606 	lsl.w	r6, r3, r6
 8005b52:	4435      	add	r5, r6
 8005b54:	4545      	cmp	r5, r8
 8005b56:	bf38      	it	cc
 8005b58:	18e4      	addcc	r4, r4, r3
 8005b5a:	e7f2      	b.n	8005b42 <floor+0xd2>
 8005b5c:	2500      	movs	r5, #0
 8005b5e:	462c      	mov	r4, r5
 8005b60:	e7aa      	b.n	8005ab8 <floor+0x48>
 8005b62:	bf00      	nop
 8005b64:	f3af 8000 	nop.w
 8005b68:	8800759c 	.word	0x8800759c
 8005b6c:	7e37e43c 	.word	0x7e37e43c
 8005b70:	bff00000 	.word	0xbff00000
 8005b74:	000fffff 	.word	0x000fffff

08005b78 <scalbn>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	ec55 4b10 	vmov	r4, r5, d0
 8005b7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005b82:	4606      	mov	r6, r0
 8005b84:	462b      	mov	r3, r5
 8005b86:	b9aa      	cbnz	r2, 8005bb4 <scalbn+0x3c>
 8005b88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005b8c:	4323      	orrs	r3, r4
 8005b8e:	d03b      	beq.n	8005c08 <scalbn+0x90>
 8005b90:	4b31      	ldr	r3, [pc, #196]	; (8005c58 <scalbn+0xe0>)
 8005b92:	4629      	mov	r1, r5
 8005b94:	2200      	movs	r2, #0
 8005b96:	ee10 0a10 	vmov	r0, s0
 8005b9a:	f7fa fd4d 	bl	8000638 <__aeabi_dmul>
 8005b9e:	4b2f      	ldr	r3, [pc, #188]	; (8005c5c <scalbn+0xe4>)
 8005ba0:	429e      	cmp	r6, r3
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	da12      	bge.n	8005bce <scalbn+0x56>
 8005ba8:	a327      	add	r3, pc, #156	; (adr r3, 8005c48 <scalbn+0xd0>)
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	f7fa fd43 	bl	8000638 <__aeabi_dmul>
 8005bb2:	e009      	b.n	8005bc8 <scalbn+0x50>
 8005bb4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005bb8:	428a      	cmp	r2, r1
 8005bba:	d10c      	bne.n	8005bd6 <scalbn+0x5e>
 8005bbc:	ee10 2a10 	vmov	r2, s0
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	f7fa fb82 	bl	80002cc <__adddf3>
 8005bc8:	4604      	mov	r4, r0
 8005bca:	460d      	mov	r5, r1
 8005bcc:	e01c      	b.n	8005c08 <scalbn+0x90>
 8005bce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	3a36      	subs	r2, #54	; 0x36
 8005bd6:	4432      	add	r2, r6
 8005bd8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005bdc:	428a      	cmp	r2, r1
 8005bde:	dd0b      	ble.n	8005bf8 <scalbn+0x80>
 8005be0:	ec45 4b11 	vmov	d1, r4, r5
 8005be4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005c50 <scalbn+0xd8>
 8005be8:	f000 f83c 	bl	8005c64 <copysign>
 8005bec:	a318      	add	r3, pc, #96	; (adr r3, 8005c50 <scalbn+0xd8>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	ec51 0b10 	vmov	r0, r1, d0
 8005bf6:	e7da      	b.n	8005bae <scalbn+0x36>
 8005bf8:	2a00      	cmp	r2, #0
 8005bfa:	dd08      	ble.n	8005c0e <scalbn+0x96>
 8005bfc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c08:	ec45 4b10 	vmov	d0, r4, r5
 8005c0c:	bd70      	pop	{r4, r5, r6, pc}
 8005c0e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005c12:	da0d      	bge.n	8005c30 <scalbn+0xb8>
 8005c14:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005c18:	429e      	cmp	r6, r3
 8005c1a:	ec45 4b11 	vmov	d1, r4, r5
 8005c1e:	dce1      	bgt.n	8005be4 <scalbn+0x6c>
 8005c20:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005c48 <scalbn+0xd0>
 8005c24:	f000 f81e 	bl	8005c64 <copysign>
 8005c28:	a307      	add	r3, pc, #28	; (adr r3, 8005c48 <scalbn+0xd0>)
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	e7e0      	b.n	8005bf2 <scalbn+0x7a>
 8005c30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c34:	3236      	adds	r2, #54	; 0x36
 8005c36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c3e:	4620      	mov	r0, r4
 8005c40:	4629      	mov	r1, r5
 8005c42:	2200      	movs	r2, #0
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <scalbn+0xe8>)
 8005c46:	e7b2      	b.n	8005bae <scalbn+0x36>
 8005c48:	c2f8f359 	.word	0xc2f8f359
 8005c4c:	01a56e1f 	.word	0x01a56e1f
 8005c50:	8800759c 	.word	0x8800759c
 8005c54:	7e37e43c 	.word	0x7e37e43c
 8005c58:	43500000 	.word	0x43500000
 8005c5c:	ffff3cb0 	.word	0xffff3cb0
 8005c60:	3c900000 	.word	0x3c900000

08005c64 <copysign>:
 8005c64:	ec51 0b10 	vmov	r0, r1, d0
 8005c68:	ee11 0a90 	vmov	r0, s3
 8005c6c:	ee10 2a10 	vmov	r2, s0
 8005c70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005c74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005c78:	ea41 0300 	orr.w	r3, r1, r0
 8005c7c:	ec43 2b10 	vmov	d0, r2, r3
 8005c80:	4770      	bx	lr
	...

08005c84 <_init>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	bf00      	nop
 8005c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8a:	bc08      	pop	{r3}
 8005c8c:	469e      	mov	lr, r3
 8005c8e:	4770      	bx	lr

08005c90 <_fini>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	bf00      	nop
 8005c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c96:	bc08      	pop	{r3}
 8005c98:	469e      	mov	lr, r3
 8005c9a:	4770      	bx	lr
