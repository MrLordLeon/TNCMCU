
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000477c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004948  08004948  00014948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b38  08004b38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b40  08004b40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  20000070  08004bb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  08004bb8  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c59c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f51  00000000  00000000  0002c63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf8  00000000  00000000  0002e590  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002f188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021f29  00000000  00000000  0002fc78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d5e  00000000  00000000  00051ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf5d5  00000000  00000000  0005b8ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012aed4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003678  00000000  00000000  0012af50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800492c 	.word	0x0800492c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	0800492c 	.word	0x0800492c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b972 	b.w	8000e40 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9e08      	ldr	r6, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	4688      	mov	r8, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d14b      	bne.n	8000c1a <__udivmoddi4+0xa6>
 8000b82:	428a      	cmp	r2, r1
 8000b84:	4615      	mov	r5, r2
 8000b86:	d967      	bls.n	8000c58 <__udivmoddi4+0xe4>
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	b14a      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b8e:	f1c2 0720 	rsb	r7, r2, #32
 8000b92:	fa01 f302 	lsl.w	r3, r1, r2
 8000b96:	fa20 f707 	lsr.w	r7, r0, r7
 8000b9a:	4095      	lsls	r5, r2
 8000b9c:	ea47 0803 	orr.w	r8, r7, r3
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bac:	fa1f fc85 	uxth.w	ip, r5
 8000bb0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x60>
 8000bc0:	18eb      	adds	r3, r5, r3
 8000bc2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc6:	f080 811b 	bcs.w	8000e00 <__udivmoddi4+0x28c>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 8118 	bls.w	8000e00 <__udivmoddi4+0x28c>
 8000bd0:	3f02      	subs	r7, #2
 8000bd2:	442b      	add	r3, r5
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bdc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be8:	45a4      	cmp	ip, r4
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x8c>
 8000bec:	192c      	adds	r4, r5, r4
 8000bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf2:	f080 8107 	bcs.w	8000e04 <__udivmoddi4+0x290>
 8000bf6:	45a4      	cmp	ip, r4
 8000bf8:	f240 8104 	bls.w	8000e04 <__udivmoddi4+0x290>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	442c      	add	r4, r5
 8000c00:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c04:	eba4 040c 	sub.w	r4, r4, ip
 8000c08:	2700      	movs	r7, #0
 8000c0a:	b11e      	cbz	r6, 8000c14 <__udivmoddi4+0xa0>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c6 4300 	strd	r4, r3, [r6]
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0xbe>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80eb 	beq.w	8000dfa <__udivmoddi4+0x286>
 8000c24:	2700      	movs	r7, #0
 8000c26:	e9c6 0100 	strd	r0, r1, [r6]
 8000c2a:	4638      	mov	r0, r7
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	fab3 f783 	clz	r7, r3
 8000c36:	2f00      	cmp	r7, #0
 8000c38:	d147      	bne.n	8000cca <__udivmoddi4+0x156>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d302      	bcc.n	8000c44 <__udivmoddi4+0xd0>
 8000c3e:	4282      	cmp	r2, r0
 8000c40:	f200 80fa 	bhi.w	8000e38 <__udivmoddi4+0x2c4>
 8000c44:	1a84      	subs	r4, r0, r2
 8000c46:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	4698      	mov	r8, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d0e0      	beq.n	8000c14 <__udivmoddi4+0xa0>
 8000c52:	e9c6 4800 	strd	r4, r8, [r6]
 8000c56:	e7dd      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000c58:	b902      	cbnz	r2, 8000c5c <__udivmoddi4+0xe8>
 8000c5a:	deff      	udf	#255	; 0xff
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	f040 808f 	bne.w	8000d84 <__udivmoddi4+0x210>
 8000c66:	1b49      	subs	r1, r1, r5
 8000c68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6c:	fa1f f885 	uxth.w	r8, r5
 8000c70:	2701      	movs	r7, #1
 8000c72:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c76:	0c23      	lsrs	r3, r4, #16
 8000c78:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c80:	fb08 f10c 	mul.w	r1, r8, ip
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x124>
 8000c88:	18eb      	adds	r3, r5, r3
 8000c8a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x122>
 8000c90:	4299      	cmp	r1, r3
 8000c92:	f200 80cd 	bhi.w	8000e30 <__udivmoddi4+0x2bc>
 8000c96:	4684      	mov	ip, r0
 8000c98:	1a59      	subs	r1, r3, r1
 8000c9a:	b2a3      	uxth	r3, r4
 8000c9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca8:	fb08 f800 	mul.w	r8, r8, r0
 8000cac:	45a0      	cmp	r8, r4
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x14c>
 8000cb0:	192c      	adds	r4, r5, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x14a>
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	f200 80b6 	bhi.w	8000e2a <__udivmoddi4+0x2b6>
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	eba4 0408 	sub.w	r4, r4, r8
 8000cc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc8:	e79f      	b.n	8000c0a <__udivmoddi4+0x96>
 8000cca:	f1c7 0c20 	rsb	ip, r7, #32
 8000cce:	40bb      	lsls	r3, r7
 8000cd0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cdc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ce0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce8:	4325      	orrs	r5, r4
 8000cea:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cee:	0c2c      	lsrs	r4, r5, #16
 8000cf0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf4:	fa1f fa8e 	uxth.w	sl, lr
 8000cf8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cfc:	fb09 f40a 	mul.w	r4, r9, sl
 8000d00:	429c      	cmp	r4, r3
 8000d02:	fa02 f207 	lsl.w	r2, r2, r7
 8000d06:	fa00 f107 	lsl.w	r1, r0, r7
 8000d0a:	d90b      	bls.n	8000d24 <__udivmoddi4+0x1b0>
 8000d0c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d14:	f080 8087 	bcs.w	8000e26 <__udivmoddi4+0x2b2>
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	f240 8084 	bls.w	8000e26 <__udivmoddi4+0x2b2>
 8000d1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d22:	4473      	add	r3, lr
 8000d24:	1b1b      	subs	r3, r3, r4
 8000d26:	b2ad      	uxth	r5, r5
 8000d28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d30:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d34:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d38:	45a2      	cmp	sl, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x1da>
 8000d3c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d44:	d26b      	bcs.n	8000e1e <__udivmoddi4+0x2aa>
 8000d46:	45a2      	cmp	sl, r4
 8000d48:	d969      	bls.n	8000e1e <__udivmoddi4+0x2aa>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	4474      	add	r4, lr
 8000d4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d52:	fba0 8902 	umull	r8, r9, r0, r2
 8000d56:	eba4 040a 	sub.w	r4, r4, sl
 8000d5a:	454c      	cmp	r4, r9
 8000d5c:	46c2      	mov	sl, r8
 8000d5e:	464b      	mov	r3, r9
 8000d60:	d354      	bcc.n	8000e0c <__udivmoddi4+0x298>
 8000d62:	d051      	beq.n	8000e08 <__udivmoddi4+0x294>
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d069      	beq.n	8000e3c <__udivmoddi4+0x2c8>
 8000d68:	ebb1 050a 	subs.w	r5, r1, sl
 8000d6c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d70:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d74:	40fd      	lsrs	r5, r7
 8000d76:	40fc      	lsrs	r4, r7
 8000d78:	ea4c 0505 	orr.w	r5, ip, r5
 8000d7c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d80:	2700      	movs	r7, #0
 8000d82:	e747      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000d84:	f1c2 0320 	rsb	r3, r2, #32
 8000d88:	fa20 f703 	lsr.w	r7, r0, r3
 8000d8c:	4095      	lsls	r5, r2
 8000d8e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d92:	fa21 f303 	lsr.w	r3, r1, r3
 8000d96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d9a:	4338      	orrs	r0, r7
 8000d9c:	0c01      	lsrs	r1, r0, #16
 8000d9e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000da2:	fa1f f885 	uxth.w	r8, r5
 8000da6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000daa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dae:	fb07 f308 	mul.w	r3, r7, r8
 8000db2:	428b      	cmp	r3, r1
 8000db4:	fa04 f402 	lsl.w	r4, r4, r2
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x256>
 8000dba:	1869      	adds	r1, r5, r1
 8000dbc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dc0:	d22f      	bcs.n	8000e22 <__udivmoddi4+0x2ae>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d92d      	bls.n	8000e22 <__udivmoddi4+0x2ae>
 8000dc6:	3f02      	subs	r7, #2
 8000dc8:	4429      	add	r1, r5
 8000dca:	1acb      	subs	r3, r1, r3
 8000dcc:	b281      	uxth	r1, r0
 8000dce:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dda:	fb00 f308 	mul.w	r3, r0, r8
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x27e>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de8:	d217      	bcs.n	8000e1a <__udivmoddi4+0x2a6>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d915      	bls.n	8000e1a <__udivmoddi4+0x2a6>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1ac9      	subs	r1, r1, r3
 8000df4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df8:	e73b      	b.n	8000c72 <__udivmoddi4+0xfe>
 8000dfa:	4637      	mov	r7, r6
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e709      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000e00:	4607      	mov	r7, r0
 8000e02:	e6e7      	b.n	8000bd4 <__udivmoddi4+0x60>
 8000e04:	4618      	mov	r0, r3
 8000e06:	e6fb      	b.n	8000c00 <__udivmoddi4+0x8c>
 8000e08:	4541      	cmp	r1, r8
 8000e0a:	d2ab      	bcs.n	8000d64 <__udivmoddi4+0x1f0>
 8000e0c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e10:	eb69 020e 	sbc.w	r2, r9, lr
 8000e14:	3801      	subs	r0, #1
 8000e16:	4613      	mov	r3, r2
 8000e18:	e7a4      	b.n	8000d64 <__udivmoddi4+0x1f0>
 8000e1a:	4660      	mov	r0, ip
 8000e1c:	e7e9      	b.n	8000df2 <__udivmoddi4+0x27e>
 8000e1e:	4618      	mov	r0, r3
 8000e20:	e795      	b.n	8000d4e <__udivmoddi4+0x1da>
 8000e22:	4667      	mov	r7, ip
 8000e24:	e7d1      	b.n	8000dca <__udivmoddi4+0x256>
 8000e26:	4681      	mov	r9, r0
 8000e28:	e77c      	b.n	8000d24 <__udivmoddi4+0x1b0>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	442c      	add	r4, r5
 8000e2e:	e747      	b.n	8000cc0 <__udivmoddi4+0x14c>
 8000e30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e34:	442b      	add	r3, r5
 8000e36:	e72f      	b.n	8000c98 <__udivmoddi4+0x124>
 8000e38:	4638      	mov	r0, r7
 8000e3a:	e708      	b.n	8000c4e <__udivmoddi4+0xda>
 8000e3c:	4637      	mov	r7, r6
 8000e3e:	e6e9      	b.n	8000c14 <__udivmoddi4+0xa0>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	0000      	movs	r0, r0
	...

08000e48 <get_sineval>:

uint32_t lowFrequency[LOWF];
uint32_t highFrequency[HIGHF];

//does conversion
void get_sineval(){
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
	for (int i=0;i<100;i++){
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	e03a      	b.n	8000eca <get_sineval+0x82>
		//formula in DAC Document
		sine_val[i] = ((sin(i*2*PI/100)+1)*(4096/2));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb27 	bl	80004ac <__aeabi_i2d>
 8000e5e:	a322      	add	r3, pc, #136	; (adr r3, 8000ee8 <get_sineval+0xa0>)
 8000e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e64:	f7ff fb8c 	bl	8000580 <__aeabi_dmul>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	460c      	mov	r4, r1
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	4621      	mov	r1, r4
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <get_sineval+0x90>)
 8000e76:	f7ff fcad 	bl	80007d4 <__aeabi_ddiv>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	ec44 3b17 	vmov	d7, r3, r4
 8000e82:	eeb0 0a47 	vmov.f32	s0, s14
 8000e86:	eef0 0a67 	vmov.f32	s1, s15
 8000e8a:	f002 fd3d 	bl	8003908 <sin>
 8000e8e:	ec51 0b10 	vmov	r0, r1, d0
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <get_sineval+0x94>)
 8000e98:	f7ff f9bc 	bl	8000214 <__adddf3>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	460c      	mov	r4, r1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <get_sineval+0x98>)
 8000eaa:	f7ff fb69 	bl	8000580 <__aeabi_dmul>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460c      	mov	r4, r1
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	4621      	mov	r1, r4
 8000eb6:	f7ff fe25 	bl	8000b04 <__aeabi_d2uiz>
 8000eba:	4601      	mov	r1, r0
 8000ebc:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <get_sineval+0x9c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0;i<100;i++){
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b63      	cmp	r3, #99	; 0x63
 8000ece:	ddc1      	ble.n	8000e54 <get_sineval+0xc>
	}
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}
 8000ed8:	40590000 	.word	0x40590000
 8000edc:	3ff00000 	.word	0x3ff00000
 8000ee0:	40a00000 	.word	0x40a00000
 8000ee4:	20000330 	.word	0x20000330
 8000ee8:	4d12d84a 	.word	0x4d12d84a
 8000eec:	400921fb 	.word	0x400921fb

08000ef0 <edit_sineval>:

void edit_sineval(uint32_t *sinArray,int arraySize){
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	for (int i=0;i<arraySize;i++){
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	e03f      	b.n	8000f80 <edit_sineval+0x90>
		//formula in DAC Document
		sinArray[i] = ((sin(i*2*PI/arraySize)+1.1)*(4096/4));
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fad1 	bl	80004ac <__aeabi_i2d>
 8000f0a:	a322      	add	r3, pc, #136	; (adr r3, 8000f94 <edit_sineval+0xa4>)
 8000f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f10:	f7ff fb36 	bl	8000580 <__aeabi_dmul>
 8000f14:	4603      	mov	r3, r0
 8000f16:	460c      	mov	r4, r1
 8000f18:	4625      	mov	r5, r4
 8000f1a:	461c      	mov	r4, r3
 8000f1c:	6838      	ldr	r0, [r7, #0]
 8000f1e:	f7ff fac5 	bl	80004ac <__aeabi_i2d>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4620      	mov	r0, r4
 8000f28:	4629      	mov	r1, r5
 8000f2a:	f7ff fc53 	bl	80007d4 <__aeabi_ddiv>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460c      	mov	r4, r1
 8000f32:	ec44 3b17 	vmov	d7, r3, r4
 8000f36:	eeb0 0a47 	vmov.f32	s0, s14
 8000f3a:	eef0 0a67 	vmov.f32	s1, s15
 8000f3e:	f002 fce3 	bl	8003908 <sin>
 8000f42:	ec51 0b10 	vmov	r0, r1, d0
 8000f46:	a315      	add	r3, pc, #84	; (adr r3, 8000f9c <edit_sineval+0xac>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff f962 	bl	8000214 <__adddf3>
 8000f50:	4603      	mov	r3, r0
 8000f52:	460c      	mov	r4, r1
 8000f54:	4618      	mov	r0, r3
 8000f56:	4621      	mov	r1, r4
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <edit_sineval+0xa0>)
 8000f5e:	f7ff fb0f 	bl	8000580 <__aeabi_dmul>
 8000f62:	4603      	mov	r3, r0
 8000f64:	460c      	mov	r4, r1
 8000f66:	4618      	mov	r0, r3
 8000f68:	4621      	mov	r1, r4
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	18d4      	adds	r4, r2, r3
 8000f72:	f7ff fdc7 	bl	8000b04 <__aeabi_d2uiz>
 8000f76:	4603      	mov	r3, r0
 8000f78:	6023      	str	r3, [r4, #0]
	for (int i=0;i<arraySize;i++){
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbbb      	blt.n	8000f00 <edit_sineval+0x10>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f90:	40900000 	.word	0x40900000
 8000f94:	4d12d84a 	.word	0x4d12d84a
 8000f98:	400921fb 	.word	0x400921fb
 8000f9c:	9999999a 	.word	0x9999999a
 8000fa0:	3ff19999 	.word	0x3ff19999

08000fa4 <bitToAudio>:
//HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_1,highFrequency,HIGHF,DAC_ALIGN_12B_R);
void bitToAudio(uint32_t *bitStream, int arraySize){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	for (int i=0;i<arraySize;i++){
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	e01d      	b.n	8000ff0 <bitToAudio+0x4c>
		if(bitStream[i]==1) HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_1,lowFrequency,LOWF,DAC_ALIGN_12B_R);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d108      	bne.n	8000fd4 <bitToAudio+0x30>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	23a6      	movs	r3, #166	; 0xa6
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <bitToAudio+0x5c>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <bitToAudio+0x60>)
 8000fce:	f000 fd17 	bl	8001a00 <HAL_DAC_Start_DMA>
 8000fd2:	e007      	b.n	8000fe4 <bitToAudio+0x40>

		else HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_1,highFrequency,HIGHF,DAC_ALIGN_12B_R);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	235a      	movs	r3, #90	; 0x5a
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <bitToAudio+0x64>)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <bitToAudio+0x60>)
 8000fe0:	f000 fd0e 	bl	8001a00 <HAL_DAC_Start_DMA>
		HAL_Delay(100);
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f000 fbb5 	bl	8001754 <HAL_Delay>
	for (int i=0;i<arraySize;i++){
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3301      	adds	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbdd      	blt.n	8000fb4 <bitToAudio+0x10>
	}
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000098 	.word	0x20000098
 8001004:	20000688 	.word	0x20000688
 8001008:	200004c0 	.word	0x200004c0

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f000 fb2d 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f837 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101a:	f000 f93d 	bl	8001298 <MX_GPIO_Init>
  MX_DMA_Init();
 800101e:	f000 f91b 	bl	8001258 <MX_DMA_Init>
  MX_DAC_Init();
 8001022:	f000 f8a3 	bl	800116c <MX_DAC_Init>
  MX_TIM2_Init();
 8001026:	f000 f8cb 	bl	80011c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_DAC_Start(&hdac,DAC_CHANNEL_1);

  HAL_TIM_Base_Start(&htim2);
 800102a:	4814      	ldr	r0, [pc, #80]	; (800107c <main+0x70>)
 800102c:	f002 f901 	bl	8003232 <HAL_TIM_Base_Start>

  get_sineval();
 8001030:	f7ff ff0a 	bl	8000e48 <get_sineval>
  edit_sineval(lowFrequency,LOWF);
 8001034:	21a6      	movs	r1, #166	; 0xa6
 8001036:	4812      	ldr	r0, [pc, #72]	; (8001080 <main+0x74>)
 8001038:	f7ff ff5a 	bl	8000ef0 <edit_sineval>
  edit_sineval(highFrequency,HIGHF);
 800103c:	215a      	movs	r1, #90	; 0x5a
 800103e:	4811      	ldr	r0, [pc, #68]	; (8001084 <main+0x78>)
 8001040:	f7ff ff56 	bl	8000ef0 <edit_sineval>
  uint32_t bitStream[10];
  for(int i = 0;i<=10;i++){
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001048:	e00e      	b.n	8001068 <main+0x5c>
	  bitStream[i] = rand(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f002 fbb4 	bl	80037b8 <rand>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800105c:	440b      	add	r3, r1
 800105e:	f843 2c2c 	str.w	r2, [r3, #-44]
  for(int i = 0;i<=10;i++){
 8001062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001064:	3301      	adds	r3, #1
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106a:	2b0a      	cmp	r3, #10
 800106c:	dded      	ble.n	800104a <main+0x3e>
  }
  while (1)
  {
	  bitToAudio(&bitStream,10);
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	210a      	movs	r1, #10
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff96 	bl	8000fa4 <bitToAudio>
 8001078:	e7f9      	b.n	800106e <main+0x62>
 800107a:	bf00      	nop
 800107c:	200006a0 	.word	0x200006a0
 8001080:	20000098 	.word	0x20000098
 8001084:	200004c0 	.word	0x200004c0

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b094      	sub	sp, #80	; 0x50
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	2234      	movs	r2, #52	; 0x34
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fb86 	bl	80037a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <SystemClock_Config+0xdc>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	4a2b      	ldr	r2, [pc, #172]	; (8001164 <SystemClock_Config+0xdc>)
 80010b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ba:	6413      	str	r3, [r2, #64]	; 0x40
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <SystemClock_Config+0xdc>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c8:	2300      	movs	r3, #0
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <SystemClock_Config+0xe0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a25      	ldr	r2, [pc, #148]	; (8001168 <SystemClock_Config+0xe0>)
 80010d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <SystemClock_Config+0xe0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010fc:	23b4      	movs	r3, #180	; 0xb4
 80010fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001100:	2302      	movs	r3, #2
 8001102:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001104:	2302      	movs	r3, #2
 8001106:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001108:	2302      	movs	r3, #2
 800110a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4618      	mov	r0, r3
 8001112:	f001 fe09 	bl	8002d28 <HAL_RCC_OscConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800111c:	f000 f93c 	bl	8001398 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001120:	f001 fb2c 	bl	800277c <HAL_PWREx_EnableOverDrive>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800112a:	f000 f935 	bl	8001398 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2302      	movs	r3, #2
 8001134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800113a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800113e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001144:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	2105      	movs	r1, #5
 800114c:	4618      	mov	r0, r3
 800114e:	f001 fb65 	bl	800281c <HAL_RCC_ClockConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001158:	f000 f91e 	bl	8001398 <Error_Handler>
  }
}
 800115c:	bf00      	nop
 800115e:	3750      	adds	r7, #80	; 0x50
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_DAC_Init+0x4c>)
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <MX_DAC_Init+0x50>)
 800117e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_DAC_Init+0x4c>)
 8001182:	f000 fc1a 	bl	80019ba <HAL_DAC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800118c:	f000 f904 	bl	8001398 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001190:	2324      	movs	r3, #36	; 0x24
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_DAC_Init+0x4c>)
 80011a0:	f000 fcfa 	bl	8001b98 <HAL_DAC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011aa:	f000 f8f5 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000688 	.word	0x20000688
 80011bc:	40007400 	.word	0x40007400

080011c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_TIM2_Init+0x94>)
 80011de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_TIM2_Init+0x94>)
 80011e6:	2259      	movs	r2, #89	; 0x59
 80011e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_TIM2_Init+0x94>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5-1;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_TIM2_Init+0x94>)
 80011f2:	2204      	movs	r2, #4
 80011f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_TIM2_Init+0x94>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_TIM2_Init+0x94>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001202:	4814      	ldr	r0, [pc, #80]	; (8001254 <MX_TIM2_Init+0x94>)
 8001204:	f001 ffea 	bl	80031dc <HAL_TIM_Base_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800120e:	f000 f8c3 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001216:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	4619      	mov	r1, r3
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_TIM2_Init+0x94>)
 8001220:	f002 f82b 	bl	800327a <HAL_TIM_ConfigClockSource>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800122a:	f000 f8b5 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800122e:	2320      	movs	r3, #32
 8001230:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_TIM2_Init+0x94>)
 800123c:	f002 fa0e 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001246:	f000 f8a7 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200006a0 	.word	0x200006a0

08001258 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_DMA_Init+0x3c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <MX_DMA_Init+0x3c>)
 8001268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_DMA_Init+0x3c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2010      	movs	r0, #16
 8001280:	f000 fb65 	bl	800194e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001284:	2010      	movs	r0, #16
 8001286:	f000 fb7e 	bl	8001986 <HAL_NVIC_EnableIRQ>

}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <MX_GPIO_Init+0xf0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a34      	ldr	r2, [pc, #208]	; (8001388 <MX_GPIO_Init+0xf0>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <MX_GPIO_Init+0xf0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <MX_GPIO_Init+0xf0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <MX_GPIO_Init+0xf0>)
 80012d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <MX_GPIO_Init+0xf0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <MX_GPIO_Init+0xf0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a26      	ldr	r2, [pc, #152]	; (8001388 <MX_GPIO_Init+0xf0>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <MX_GPIO_Init+0xf0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <MX_GPIO_Init+0xf0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <MX_GPIO_Init+0xf0>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_GPIO_Init+0xf0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2120      	movs	r1, #32
 8001322:	481a      	ldr	r0, [pc, #104]	; (800138c <MX_GPIO_Init+0xf4>)
 8001324:	f001 fa10 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_GPIO_Init+0xf8>)
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4815      	ldr	r0, [pc, #84]	; (8001394 <MX_GPIO_Init+0xfc>)
 800133e:	f001 f871 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001342:	230c      	movs	r3, #12
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001352:	2307      	movs	r3, #7
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <MX_GPIO_Init+0xf4>)
 800135e:	f001 f861 	bl	8002424 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001362:	2320      	movs	r3, #32
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <MX_GPIO_Init+0xf4>)
 800137a:	f001 f853 	bl	8002424 <HAL_GPIO_Init>

}
 800137e:	bf00      	nop
 8001380:	3728      	adds	r7, #40	; 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40020000 	.word	0x40020000
 8001390:	10210000 	.word	0x10210000
 8001394:	40020800 	.word	0x40020800

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <HAL_MspInit+0x4c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_MspInit+0x4c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013e6:	2007      	movs	r0, #7
 80013e8:	f000 faa6 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800

080013f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a2f      	ldr	r2, [pc, #188]	; (80014d4 <HAL_DAC_MspInit+0xdc>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d158      	bne.n	80014cc <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <HAL_DAC_MspInit+0xe0>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <HAL_DAC_MspInit+0xe0>)
 8001424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <HAL_DAC_MspInit+0xe0>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <HAL_DAC_MspInit+0xe0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <HAL_DAC_MspInit+0xe0>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <HAL_DAC_MspInit+0xe0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001452:	2310      	movs	r3, #16
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001456:	2303      	movs	r3, #3
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	481d      	ldr	r0, [pc, #116]	; (80014dc <HAL_DAC_MspInit+0xe4>)
 8001466:	f000 ffdd 	bl	8002424 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_DAC_MspInit+0xec>)
 800146e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 8001472:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001476:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 800147a:	2240      	movs	r2, #64	; 0x40
 800147c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 8001486:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800148a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 800148e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001492:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 8001496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 800149e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80014b0:	480b      	ldr	r0, [pc, #44]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 80014b2:	f000 fc49 	bl	8001d48 <HAL_DMA_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80014bc:	f7ff ff6c 	bl	8001398 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_DAC_MspInit+0xe8>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40007400 	.word	0x40007400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	20000628 	.word	0x20000628
 80014e4:	40026088 	.word	0x40026088

080014e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f8:	d10d      	bne.n	8001516 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_TIM_Base_MspInit+0x3c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_TIM_Base_MspInit+0x3c>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_TIM_Base_MspInit+0x3c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 f8ca 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <DMA1_Stream5_IRQHandler+0x10>)
 800158a:	f000 fce3 	bl	8001f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000628 	.word	0x20000628

08001598 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x50>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x16>
		heap_end = &end;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <_sbrk+0x50>)
 80015aa:	4a10      	ldr	r2, [pc, #64]	; (80015ec <_sbrk+0x54>)
 80015ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <_sbrk+0x50>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <_sbrk+0x50>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	466a      	mov	r2, sp
 80015be:	4293      	cmp	r3, r2
 80015c0:	d907      	bls.n	80015d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80015c2:	f002 f8c7 	bl	8003754 <__errno>
 80015c6:	4602      	mov	r2, r0
 80015c8:	230c      	movs	r3, #12
 80015ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
 80015d0:	e006      	b.n	80015e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <_sbrk+0x50>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <_sbrk+0x50>)
 80015dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000008c 	.word	0x2000008c
 80015ec:	200006e8 	.word	0x200006e8

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <SystemInit+0x28>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a07      	ldr	r2, [pc, #28]	; (8001618 <SystemInit+0x28>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SystemInit+0x28>)
 8001606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800160a:	609a      	str	r2, [r3, #8]
#endif
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800161c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001654 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001620:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001622:	e003      	b.n	800162c <LoopCopyDataInit>

08001624 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001626:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001628:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800162a:	3104      	adds	r1, #4

0800162c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800162c:	480b      	ldr	r0, [pc, #44]	; (800165c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001630:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001632:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001634:	d3f6      	bcc.n	8001624 <CopyDataInit>
  ldr  r2, =_sbss
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001638:	e002      	b.n	8001640 <LoopFillZerobss>

0800163a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800163a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800163c:	f842 3b04 	str.w	r3, [r2], #4

08001640 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001642:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001644:	d3f9      	bcc.n	800163a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001646:	f7ff ffd3 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164a:	f002 f889 	bl	8003760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164e:	f7ff fcdd 	bl	800100c <main>
  bx  lr    
 8001652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001658:	08004b48 	.word	0x08004b48
  ldr  r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001660:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001664:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001668:	200006e8 	.word	0x200006e8

0800166c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_Init+0x40>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_Init+0x40>)
 8001686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_Init+0x40>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 f94d 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	2000      	movs	r0, #0
 80016a0:	f000 f808 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a4:	f7ff fe80 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x54>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x58>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f965 	bl	80019a2 <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 f92d 	bl	800194e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_InitTick+0x5c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000000 	.word	0x20000000
 800170c:	20000008 	.word	0x20000008
 8001710:	20000004 	.word	0x20000004

08001714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x20>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x24>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_IncTick+0x24>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000008 	.word	0x20000008
 8001738:	200006e0 	.word	0x200006e0

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200006e0 	.word	0x200006e0

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff ffee 	bl	800173c <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d005      	beq.n	800177a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_Delay+0x40>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177a:	bf00      	nop
 800177c:	f7ff ffde 	bl	800173c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d8f7      	bhi.n	800177c <HAL_Delay+0x28>
  {
  }
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000008 	.word	0x20000008

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db0b      	blt.n	8001826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4907      	ldr	r1, [pc, #28]	; (8001834 <__NVIC_EnableIRQ+0x38>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000e100 	.word	0xe000e100

08001838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db0a      	blt.n	8001862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	490c      	ldr	r1, [pc, #48]	; (8001884 <__NVIC_SetPriority+0x4c>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001860:	e00a      	b.n	8001878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4908      	ldr	r1, [pc, #32]	; (8001888 <__NVIC_SetPriority+0x50>)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3b04      	subs	r3, #4
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	440b      	add	r3, r1
 8001876:	761a      	strb	r2, [r3, #24]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000e100 	.word	0xe000e100
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	bf28      	it	cs
 80018aa:	2304      	movcs	r3, #4
 80018ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3304      	adds	r3, #4
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d902      	bls.n	80018bc <NVIC_EncodePriority+0x30>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b03      	subs	r3, #3
 80018ba:	e000      	b.n	80018be <NVIC_EncodePriority+0x32>
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43d9      	mvns	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	4313      	orrs	r3, r2
         );
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3724      	adds	r7, #36	; 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001904:	d301      	bcc.n	800190a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001906:	2301      	movs	r3, #1
 8001908:	e00f      	b.n	800192a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <SysTick_Config+0x40>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001912:	210f      	movs	r1, #15
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f7ff ff8e 	bl	8001838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <SysTick_Config+0x40>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <SysTick_Config+0x40>)
 8001924:	2207      	movs	r2, #7
 8001926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	e000e010 	.word	0xe000e010

08001938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff29 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001960:	f7ff ff3e 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 8001964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f7ff ff8e 	bl	800188c <NVIC_EncodePriority>
 8001970:	4602      	mov	r2, r0
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff5d 	bl	8001838 <__NVIC_SetPriority>
}
 800197e:	bf00      	nop
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff31 	bl	80017fc <__NVIC_EnableIRQ>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffa2 	bl	80018f4 <SysTick_Config>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e014      	b.n	80019f6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	791b      	ldrb	r3, [r3, #4]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d105      	bne.n	80019e2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fd0b 	bl	80013f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2202      	movs	r2, #2
 80019e6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	795b      	ldrb	r3, [r3, #5]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_DAC_Start_DMA+0x1e>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e08e      	b.n	8001b3c <HAL_DAC_Start_DMA+0x13c>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2202      	movs	r2, #2
 8001a28:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d12a      	bne.n	8001a86 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a43      	ldr	r2, [pc, #268]	; (8001b44 <HAL_DAC_Start_DMA+0x144>)
 8001a36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a42      	ldr	r2, [pc, #264]	; (8001b48 <HAL_DAC_Start_DMA+0x148>)
 8001a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a41      	ldr	r2, [pc, #260]	; (8001b4c <HAL_DAC_Start_DMA+0x14c>)
 8001a46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a56:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d009      	beq.n	8001a72 <HAL_DAC_Start_DMA+0x72>
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d00c      	beq.n	8001a7c <HAL_DAC_Start_DMA+0x7c>
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d000      	beq.n	8001a68 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001a66:	e039      	b.n	8001adc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	617b      	str	r3, [r7, #20]
        break;
 8001a70:	e034      	b.n	8001adc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	330c      	adds	r3, #12
 8001a78:	617b      	str	r3, [r7, #20]
        break;
 8001a7a:	e02f      	b.n	8001adc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3310      	adds	r3, #16
 8001a82:	617b      	str	r3, [r7, #20]
        break;
 8001a84:	e02a      	b.n	8001adc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <HAL_DAC_Start_DMA+0x150>)
 8001a8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	4a30      	ldr	r2, [pc, #192]	; (8001b54 <HAL_DAC_Start_DMA+0x154>)
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	4a2f      	ldr	r2, [pc, #188]	; (8001b58 <HAL_DAC_Start_DMA+0x158>)
 8001a9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d009      	beq.n	8001ac8 <HAL_DAC_Start_DMA+0xc8>
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_DAC_Start_DMA+0xd2>
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d000      	beq.n	8001abe <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001abc:	e00e      	b.n	8001adc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3314      	adds	r3, #20
 8001ac4:	617b      	str	r3, [r7, #20]
        break;
 8001ac6:	e009      	b.n	8001adc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3318      	adds	r3, #24
 8001ace:	617b      	str	r3, [r7, #20]
        break;
 8001ad0:	e004      	b.n	8001adc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	331c      	adds	r3, #28
 8001ad8:	617b      	str	r3, [r7, #20]
        break;
 8001ada:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6898      	ldr	r0, [r3, #8]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	f000 f9d2 	bl	8001ea4 <HAL_DMA_Start_IT>
 8001b00:	e00e      	b.n	8001b20 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b10:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	68d8      	ldr	r0, [r3, #12]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	f000 f9c2 	bl	8001ea4 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	2201      	movs	r2, #1
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	08001c33 	.word	0x08001c33
 8001b48:	08001c55 	.word	0x08001c55
 8001b4c:	08001c71 	.word	0x08001c71
 8001b50:	08001cdb 	.word	0x08001cdb
 8001b54:	08001cfd 	.word	0x08001cfd
 8001b58:	08001d19 	.word	0x08001d19

08001b5c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	795b      	ldrb	r3, [r3, #5]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_DAC_ConfigChannel+0x20>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e036      	b.n	8001c26 <HAL_DAC_ConfigChannel+0x8e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001bcc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6819      	ldr	r1, [r3, #0]
 8001c06:	22c0      	movs	r2, #192	; 0xc0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	400a      	ands	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	371c      	adds	r7, #28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f7ff ff8b 	bl	8001b5c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	711a      	strb	r2, [r3, #4]
}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c60:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7ff ff84 	bl	8001b70 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f043 0204 	orr.w	r2, r3, #4
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f7ff ff7a 	bl	8001b84 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	711a      	strb	r2, [r3, #4]
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff ffd8 	bl	8001c9e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	711a      	strb	r2, [r3, #4]
}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d08:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff ffd1 	bl	8001cb2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f043 0204 	orr.w	r2, r3, #4
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7ff ffc7 	bl	8001cc6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	711a      	strb	r2, [r3, #4]
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff fcf2 	bl	800173c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e099      	b.n	8001e98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d84:	e00f      	b.n	8001da6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d86:	f7ff fcd9 	bl	800173c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d908      	bls.n	8001da6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2220      	movs	r2, #32
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e078      	b.n	8001e98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e8      	bne.n	8001d86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <HAL_DMA_Init+0x158>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d107      	bne.n	8001e10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f023 0307 	bic.w	r3, r3, #7
 8001e26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d117      	bne.n	8001e6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00e      	beq.n	8001e6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fa6f 	bl	8002330 <DMA_CheckFifoParam>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2240      	movs	r2, #64	; 0x40
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e66:	2301      	movs	r3, #1
 8001e68:	e016      	b.n	8001e98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fa26 	bl	80022c4 <DMA_CalcBaseAndBitshift>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	223f      	movs	r2, #63	; 0x3f
 8001e82:	409a      	lsls	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	f010803f 	.word	0xf010803f

08001ea4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_DMA_Start_IT+0x26>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e040      	b.n	8001f4c <HAL_DMA_Start_IT+0xa8>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d12f      	bne.n	8001f3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f9b8 	bl	8002268 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efc:	223f      	movs	r2, #63	; 0x3f
 8001efe:	409a      	lsls	r2, r3
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0216 	orr.w	r2, r2, #22
 8001f12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0208 	orr.w	r2, r2, #8
 8001f2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e005      	b.n	8001f4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f46:	2302      	movs	r3, #2
 8001f48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f60:	4b92      	ldr	r3, [pc, #584]	; (80021ac <HAL_DMA_IRQHandler+0x258>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a92      	ldr	r2, [pc, #584]	; (80021b0 <HAL_DMA_IRQHandler+0x25c>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0a9b      	lsrs	r3, r3, #10
 8001f6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	2208      	movs	r2, #8
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d01a      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d013      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0204 	bic.w	r2, r2, #4
 8001fa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	2208      	movs	r2, #8
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d012      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	f043 0202 	orr.w	r2, r3, #2
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d012      	beq.n	800202c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00b      	beq.n	800202c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	2204      	movs	r2, #4
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	f043 0204 	orr.w	r2, r3, #4
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	2210      	movs	r2, #16
 8002032:	409a      	lsls	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d043      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d03c      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	2210      	movs	r2, #16
 8002050:	409a      	lsls	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d018      	beq.n	8002096 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d108      	bne.n	8002084 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d024      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
 8002082:	e01f      	b.n	80020c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01b      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
 8002094:	e016      	b.n	80020c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d107      	bne.n	80020b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0208 	bic.w	r2, r2, #8
 80020b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2220      	movs	r2, #32
 80020ca:	409a      	lsls	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 808e 	beq.w	80021f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8086 	beq.w	80021f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ea:	2220      	movs	r2, #32
 80020ec:	409a      	lsls	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d136      	bne.n	800216c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0216 	bic.w	r2, r2, #22
 800210c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800211c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <HAL_DMA_IRQHandler+0x1da>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0208 	bic.w	r2, r2, #8
 800213c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	223f      	movs	r2, #63	; 0x3f
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215e:	2b00      	cmp	r3, #0
 8002160:	d07d      	beq.n	800225e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
        }
        return;
 800216a:	e078      	b.n	800225e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01c      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d108      	bne.n	800219a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	2b00      	cmp	r3, #0
 800218e:	d030      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
 8002198:	e02b      	b.n	80021f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d027      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	4798      	blx	r3
 80021aa:	e022      	b.n	80021f2 <HAL_DMA_IRQHandler+0x29e>
 80021ac:	20000000 	.word	0x20000000
 80021b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10f      	bne.n	80021e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0210 	bic.w	r2, r2, #16
 80021d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d032      	beq.n	8002260 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d022      	beq.n	800224c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2205      	movs	r2, #5
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0201 	bic.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3301      	adds	r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	429a      	cmp	r2, r3
 8002228:	d307      	bcc.n	800223a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f2      	bne.n	800221e <HAL_DMA_IRQHandler+0x2ca>
 8002238:	e000      	b.n	800223c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800223a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
 800225c:	e000      	b.n	8002260 <HAL_DMA_IRQHandler+0x30c>
        return;
 800225e:	bf00      	nop
    }
  }
}
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop

08002268 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002284:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b40      	cmp	r3, #64	; 0x40
 8002294:	d108      	bne.n	80022a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022a6:	e007      	b.n	80022b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	60da      	str	r2, [r3, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	3b10      	subs	r3, #16
 80022d4:	4a14      	ldr	r2, [pc, #80]	; (8002328 <DMA_CalcBaseAndBitshift+0x64>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022de:	4a13      	ldr	r2, [pc, #76]	; (800232c <DMA_CalcBaseAndBitshift+0x68>)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4413      	add	r3, r2
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d909      	bls.n	8002306 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	1d1a      	adds	r2, r3, #4
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	659a      	str	r2, [r3, #88]	; 0x58
 8002304:	e007      	b.n	8002316 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	aaaaaaab 	.word	0xaaaaaaab
 800232c:	08004958 	.word	0x08004958

08002330 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d11f      	bne.n	800238a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d855      	bhi.n	80023fc <DMA_CheckFifoParam+0xcc>
 8002350:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <DMA_CheckFifoParam+0x28>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	08002369 	.word	0x08002369
 800235c:	0800237b 	.word	0x0800237b
 8002360:	08002369 	.word	0x08002369
 8002364:	080023fd 	.word	0x080023fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d045      	beq.n	8002400 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002378:	e042      	b.n	8002400 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002382:	d13f      	bne.n	8002404 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002388:	e03c      	b.n	8002404 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002392:	d121      	bne.n	80023d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d836      	bhi.n	8002408 <DMA_CheckFifoParam+0xd8>
 800239a:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <DMA_CheckFifoParam+0x70>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	080023b1 	.word	0x080023b1
 80023a4:	080023b7 	.word	0x080023b7
 80023a8:	080023b1 	.word	0x080023b1
 80023ac:	080023c9 	.word	0x080023c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      break;
 80023b4:	e02f      	b.n	8002416 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d024      	beq.n	800240c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c6:	e021      	b.n	800240c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023d0:	d11e      	bne.n	8002410 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023d6:	e01b      	b.n	8002410 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d902      	bls.n	80023e4 <DMA_CheckFifoParam+0xb4>
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d003      	beq.n	80023ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023e2:	e018      	b.n	8002416 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      break;
 80023e8:	e015      	b.n	8002416 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00e      	beq.n	8002414 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
      break;
 80023fa:	e00b      	b.n	8002414 <DMA_CheckFifoParam+0xe4>
      break;
 80023fc:	bf00      	nop
 80023fe:	e00a      	b.n	8002416 <DMA_CheckFifoParam+0xe6>
      break;
 8002400:	bf00      	nop
 8002402:	e008      	b.n	8002416 <DMA_CheckFifoParam+0xe6>
      break;
 8002404:	bf00      	nop
 8002406:	e006      	b.n	8002416 <DMA_CheckFifoParam+0xe6>
      break;
 8002408:	bf00      	nop
 800240a:	e004      	b.n	8002416 <DMA_CheckFifoParam+0xe6>
      break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <DMA_CheckFifoParam+0xe6>
      break;   
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <DMA_CheckFifoParam+0xe6>
      break;
 8002414:	bf00      	nop
    }
  } 
  
  return status; 
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e165      	b.n	800270c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	429a      	cmp	r2, r3
 800245a:	f040 8154 	bne.w	8002706 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d00b      	beq.n	800247e <HAL_GPIO_Init+0x5a>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002472:	2b11      	cmp	r3, #17
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b12      	cmp	r3, #18
 800247c:	d130      	bne.n	80024e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 0201 	and.w	r2, r3, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0xfc>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b12      	cmp	r3, #18
 800251e:	d123      	bne.n	8002568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	220f      	movs	r2, #15
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0203 	and.w	r2, r3, #3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80ae 	beq.w	8002706 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b5c      	ldr	r3, [pc, #368]	; (8002720 <HAL_GPIO_Init+0x2fc>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a5b      	ldr	r2, [pc, #364]	; (8002720 <HAL_GPIO_Init+0x2fc>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b59      	ldr	r3, [pc, #356]	; (8002720 <HAL_GPIO_Init+0x2fc>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c6:	4a57      	ldr	r2, [pc, #348]	; (8002724 <HAL_GPIO_Init+0x300>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	220f      	movs	r2, #15
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4e      	ldr	r2, [pc, #312]	; (8002728 <HAL_GPIO_Init+0x304>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d025      	beq.n	800263e <HAL_GPIO_Init+0x21a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4d      	ldr	r2, [pc, #308]	; (800272c <HAL_GPIO_Init+0x308>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01f      	beq.n	800263a <HAL_GPIO_Init+0x216>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4c      	ldr	r2, [pc, #304]	; (8002730 <HAL_GPIO_Init+0x30c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_GPIO_Init+0x212>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4b      	ldr	r2, [pc, #300]	; (8002734 <HAL_GPIO_Init+0x310>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x20e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4a      	ldr	r2, [pc, #296]	; (8002738 <HAL_GPIO_Init+0x314>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x20a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a49      	ldr	r2, [pc, #292]	; (800273c <HAL_GPIO_Init+0x318>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x206>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a48      	ldr	r2, [pc, #288]	; (8002740 <HAL_GPIO_Init+0x31c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x202>
 8002622:	2306      	movs	r3, #6
 8002624:	e00c      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 8002626:	2307      	movs	r3, #7
 8002628:	e00a      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 800262a:	2305      	movs	r3, #5
 800262c:	e008      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 800262e:	2304      	movs	r3, #4
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 8002632:	2303      	movs	r3, #3
 8002634:	e004      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 8002636:	2302      	movs	r3, #2
 8002638:	e002      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_GPIO_Init+0x21c>
 800263e:	2300      	movs	r3, #0
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	f002 0203 	and.w	r2, r2, #3
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	4093      	lsls	r3, r2
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002650:	4934      	ldr	r1, [pc, #208]	; (8002724 <HAL_GPIO_Init+0x300>)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800265e:	4b39      	ldr	r3, [pc, #228]	; (8002744 <HAL_GPIO_Init+0x320>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002682:	4a30      	ldr	r2, [pc, #192]	; (8002744 <HAL_GPIO_Init+0x320>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002688:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <HAL_GPIO_Init+0x320>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ac:	4a25      	ldr	r2, [pc, #148]	; (8002744 <HAL_GPIO_Init+0x320>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_GPIO_Init+0x320>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d6:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_GPIO_Init+0x320>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_GPIO_Init+0x320>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002700:	4a10      	ldr	r2, [pc, #64]	; (8002744 <HAL_GPIO_Init+0x320>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3301      	adds	r3, #1
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b0f      	cmp	r3, #15
 8002710:	f67f ae96 	bls.w	8002440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002714:	bf00      	nop
 8002716:	3724      	adds	r7, #36	; 0x24
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40023800 	.word	0x40023800
 8002724:	40013800 	.word	0x40013800
 8002728:	40020000 	.word	0x40020000
 800272c:	40020400 	.word	0x40020400
 8002730:	40020800 	.word	0x40020800
 8002734:	40020c00 	.word	0x40020c00
 8002738:	40021000 	.word	0x40021000
 800273c:	40021400 	.word	0x40021400
 8002740:	40021800 	.word	0x40021800
 8002744:	40013c00 	.word	0x40013c00

08002748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
 8002754:	4613      	mov	r3, r2
 8002756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002764:	e003      	b.n	800276e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002766:	887b      	ldrh	r3, [r7, #2]
 8002768:	041a      	lsls	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_PWREx_EnableOverDrive+0x90>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	4a1f      	ldr	r2, [pc, #124]	; (800280c <HAL_PWREx_EnableOverDrive+0x90>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002794:	6413      	str	r3, [r2, #64]	; 0x40
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_PWREx_EnableOverDrive+0x90>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_PWREx_EnableOverDrive+0x94>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a8:	f7fe ffc8 	bl	800173c <HAL_GetTick>
 80027ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027ae:	e009      	b.n	80027c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027b0:	f7fe ffc4 	bl	800173c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027be:	d901      	bls.n	80027c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e01f      	b.n	8002804 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <HAL_PWREx_EnableOverDrive+0x98>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d0:	d1ee      	bne.n	80027b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027d8:	f7fe ffb0 	bl	800173c <HAL_GetTick>
 80027dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027de:	e009      	b.n	80027f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027e0:	f7fe ffac 	bl	800173c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ee:	d901      	bls.n	80027f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e007      	b.n	8002804 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027f4:	4b07      	ldr	r3, [pc, #28]	; (8002814 <HAL_PWREx_EnableOverDrive+0x98>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002800:	d1ee      	bne.n	80027e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	420e0040 	.word	0x420e0040
 8002814:	40007000 	.word	0x40007000
 8002818:	420e0044 	.word	0x420e0044

0800281c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0cc      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b68      	ldr	r3, [pc, #416]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d90c      	bls.n	8002858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b8      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002870:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800287a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002888:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a52      	ldr	r2, [pc, #328]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	494d      	ldr	r1, [pc, #308]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d044      	beq.n	800293c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d119      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e07f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d003      	beq.n	80028da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e067      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4934      	ldr	r1, [pc, #208]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800290c:	f7fe ff16 	bl	800173c <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7fe ff12 	bl	800173c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e04f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d20c      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e032      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4916      	ldr	r1, [pc, #88]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	490e      	ldr	r1, [pc, #56]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029a2:	f000 f821 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 80029a6:	4601      	mov	r1, r0
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	5cd3      	ldrb	r3, [r2, r3]
 80029b6:	fa21 f303 	lsr.w	r3, r1, r3
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fe76 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023c00 	.word	0x40023c00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	08004948 	.word	0x08004948
 80029e0:	20000000 	.word	0x20000000
 80029e4:	20000004 	.word	0x20000004

080029e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a02:	4bc6      	ldr	r3, [pc, #792]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b0c      	cmp	r3, #12
 8002a0c:	f200 817e 	bhi.w	8002d0c <HAL_RCC_GetSysClockFreq+0x324>
 8002a10:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <HAL_RCC_GetSysClockFreq+0x30>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002a4d 	.word	0x08002a4d
 8002a1c:	08002d0d 	.word	0x08002d0d
 8002a20:	08002d0d 	.word	0x08002d0d
 8002a24:	08002d0d 	.word	0x08002d0d
 8002a28:	08002a53 	.word	0x08002a53
 8002a2c:	08002d0d 	.word	0x08002d0d
 8002a30:	08002d0d 	.word	0x08002d0d
 8002a34:	08002d0d 	.word	0x08002d0d
 8002a38:	08002a59 	.word	0x08002a59
 8002a3c:	08002d0d 	.word	0x08002d0d
 8002a40:	08002d0d 	.word	0x08002d0d
 8002a44:	08002d0d 	.word	0x08002d0d
 8002a48:	08002bb5 	.word	0x08002bb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a4c:	4bb4      	ldr	r3, [pc, #720]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x338>)
 8002a4e:	613b      	str	r3, [r7, #16]
       break;
 8002a50:	e15f      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a52:	4bb4      	ldr	r3, [pc, #720]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002a54:	613b      	str	r3, [r7, #16]
      break;
 8002a56:	e15c      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a58:	4bb0      	ldr	r3, [pc, #704]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a60:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a62:	4bae      	ldr	r3, [pc, #696]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d04a      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6e:	4bab      	ldr	r3, [pc, #684]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	099b      	lsrs	r3, r3, #6
 8002a74:	f04f 0400 	mov.w	r4, #0
 8002a78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	ea03 0501 	and.w	r5, r3, r1
 8002a84:	ea04 0602 	and.w	r6, r4, r2
 8002a88:	4629      	mov	r1, r5
 8002a8a:	4632      	mov	r2, r6
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	f04f 0400 	mov.w	r4, #0
 8002a94:	0154      	lsls	r4, r2, #5
 8002a96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a9a:	014b      	lsls	r3, r1, #5
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	1b49      	subs	r1, r1, r5
 8002aa2:	eb62 0206 	sbc.w	r2, r2, r6
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	f04f 0400 	mov.w	r4, #0
 8002aae:	0194      	lsls	r4, r2, #6
 8002ab0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ab4:	018b      	lsls	r3, r1, #6
 8002ab6:	1a5b      	subs	r3, r3, r1
 8002ab8:	eb64 0402 	sbc.w	r4, r4, r2
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	00e2      	lsls	r2, r4, #3
 8002ac6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002aca:	00d9      	lsls	r1, r3, #3
 8002acc:	460b      	mov	r3, r1
 8002ace:	4614      	mov	r4, r2
 8002ad0:	195b      	adds	r3, r3, r5
 8002ad2:	eb44 0406 	adc.w	r4, r4, r6
 8002ad6:	f04f 0100 	mov.w	r1, #0
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	0262      	lsls	r2, r4, #9
 8002ae0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ae4:	0259      	lsls	r1, r3, #9
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4614      	mov	r4, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	4621      	mov	r1, r4
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f04f 0400 	mov.w	r4, #0
 8002af4:	461a      	mov	r2, r3
 8002af6:	4623      	mov	r3, r4
 8002af8:	f7fe f824 	bl	8000b44 <__aeabi_uldivmod>
 8002afc:	4603      	mov	r3, r0
 8002afe:	460c      	mov	r4, r1
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e049      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b04:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	f04f 0400 	mov.w	r4, #0
 8002b0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	ea03 0501 	and.w	r5, r3, r1
 8002b1a:	ea04 0602 	and.w	r6, r4, r2
 8002b1e:	4629      	mov	r1, r5
 8002b20:	4632      	mov	r2, r6
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	f04f 0400 	mov.w	r4, #0
 8002b2a:	0154      	lsls	r4, r2, #5
 8002b2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b30:	014b      	lsls	r3, r1, #5
 8002b32:	4619      	mov	r1, r3
 8002b34:	4622      	mov	r2, r4
 8002b36:	1b49      	subs	r1, r1, r5
 8002b38:	eb62 0206 	sbc.w	r2, r2, r6
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	f04f 0400 	mov.w	r4, #0
 8002b44:	0194      	lsls	r4, r2, #6
 8002b46:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b4a:	018b      	lsls	r3, r1, #6
 8002b4c:	1a5b      	subs	r3, r3, r1
 8002b4e:	eb64 0402 	sbc.w	r4, r4, r2
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	00e2      	lsls	r2, r4, #3
 8002b5c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b60:	00d9      	lsls	r1, r3, #3
 8002b62:	460b      	mov	r3, r1
 8002b64:	4614      	mov	r4, r2
 8002b66:	195b      	adds	r3, r3, r5
 8002b68:	eb44 0406 	adc.w	r4, r4, r6
 8002b6c:	f04f 0100 	mov.w	r1, #0
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	02a2      	lsls	r2, r4, #10
 8002b76:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b7a:	0299      	lsls	r1, r3, #10
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4614      	mov	r4, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	4621      	mov	r1, r4
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f04f 0400 	mov.w	r4, #0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4623      	mov	r3, r4
 8002b8e:	f7fd ffd9 	bl	8000b44 <__aeabi_uldivmod>
 8002b92:	4603      	mov	r3, r0
 8002b94:	460c      	mov	r4, r1
 8002b96:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b98:	4b60      	ldr	r3, [pc, #384]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	613b      	str	r3, [r7, #16]
      break;
 8002bb2:	e0ae      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb4:	4b59      	ldr	r3, [pc, #356]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bbc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bbe:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d04a      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bca:	4b54      	ldr	r3, [pc, #336]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	099b      	lsrs	r3, r3, #6
 8002bd0:	f04f 0400 	mov.w	r4, #0
 8002bd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	ea03 0501 	and.w	r5, r3, r1
 8002be0:	ea04 0602 	and.w	r6, r4, r2
 8002be4:	4629      	mov	r1, r5
 8002be6:	4632      	mov	r2, r6
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	f04f 0400 	mov.w	r4, #0
 8002bf0:	0154      	lsls	r4, r2, #5
 8002bf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bf6:	014b      	lsls	r3, r1, #5
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4622      	mov	r2, r4
 8002bfc:	1b49      	subs	r1, r1, r5
 8002bfe:	eb62 0206 	sbc.w	r2, r2, r6
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f04f 0400 	mov.w	r4, #0
 8002c0a:	0194      	lsls	r4, r2, #6
 8002c0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c10:	018b      	lsls	r3, r1, #6
 8002c12:	1a5b      	subs	r3, r3, r1
 8002c14:	eb64 0402 	sbc.w	r4, r4, r2
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	00e2      	lsls	r2, r4, #3
 8002c22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c26:	00d9      	lsls	r1, r3, #3
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4614      	mov	r4, r2
 8002c2c:	195b      	adds	r3, r3, r5
 8002c2e:	eb44 0406 	adc.w	r4, r4, r6
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	0262      	lsls	r2, r4, #9
 8002c3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c40:	0259      	lsls	r1, r3, #9
 8002c42:	460b      	mov	r3, r1
 8002c44:	4614      	mov	r4, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	4621      	mov	r1, r4
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f04f 0400 	mov.w	r4, #0
 8002c50:	461a      	mov	r2, r3
 8002c52:	4623      	mov	r3, r4
 8002c54:	f7fd ff76 	bl	8000b44 <__aeabi_uldivmod>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	e049      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c60:	4b2e      	ldr	r3, [pc, #184]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	f04f 0400 	mov.w	r4, #0
 8002c6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	ea03 0501 	and.w	r5, r3, r1
 8002c76:	ea04 0602 	and.w	r6, r4, r2
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	4632      	mov	r2, r6
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	f04f 0400 	mov.w	r4, #0
 8002c86:	0154      	lsls	r4, r2, #5
 8002c88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c8c:	014b      	lsls	r3, r1, #5
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4622      	mov	r2, r4
 8002c92:	1b49      	subs	r1, r1, r5
 8002c94:	eb62 0206 	sbc.w	r2, r2, r6
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	f04f 0400 	mov.w	r4, #0
 8002ca0:	0194      	lsls	r4, r2, #6
 8002ca2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ca6:	018b      	lsls	r3, r1, #6
 8002ca8:	1a5b      	subs	r3, r3, r1
 8002caa:	eb64 0402 	sbc.w	r4, r4, r2
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	00e2      	lsls	r2, r4, #3
 8002cb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cbc:	00d9      	lsls	r1, r3, #3
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4614      	mov	r4, r2
 8002cc2:	195b      	adds	r3, r3, r5
 8002cc4:	eb44 0406 	adc.w	r4, r4, r6
 8002cc8:	f04f 0100 	mov.w	r1, #0
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	02a2      	lsls	r2, r4, #10
 8002cd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cd6:	0299      	lsls	r1, r3, #10
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4614      	mov	r4, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	4621      	mov	r1, r4
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f04f 0400 	mov.w	r4, #0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4623      	mov	r3, r4
 8002cea:	f7fd ff2b 	bl	8000b44 <__aeabi_uldivmod>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	460c      	mov	r4, r1
 8002cf2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	0f1b      	lsrs	r3, r3, #28
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	613b      	str	r3, [r7, #16]
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x338>)
 8002d0e:	613b      	str	r3, [r7, #16]
      break;
 8002d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d12:	693b      	ldr	r3, [r7, #16]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	007a1200 	.word	0x007a1200

08002d28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8083 	beq.w	8002e48 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d42:	4b95      	ldr	r3, [pc, #596]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d4e:	4b92      	ldr	r3, [pc, #584]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d106      	bne.n	8002d68 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d5a:	4b8f      	ldr	r3, [pc, #572]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d66:	d00c      	beq.n	8002d82 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d68:	4b8b      	ldr	r3, [pc, #556]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	d112      	bne.n	8002d9a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d74:	4b88      	ldr	r3, [pc, #544]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d80:	d10b      	bne.n	8002d9a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d82:	4b85      	ldr	r3, [pc, #532]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d05b      	beq.n	8002e46 <HAL_RCC_OscConfig+0x11e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d157      	bne.n	8002e46 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e216      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x8a>
 8002da4:	4b7c      	ldr	r3, [pc, #496]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a7b      	ldr	r2, [pc, #492]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	e01d      	b.n	8002dee <HAL_RCC_OscConfig+0xc6>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dba:	d10c      	bne.n	8002dd6 <HAL_RCC_OscConfig+0xae>
 8002dbc:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a75      	ldr	r2, [pc, #468]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b73      	ldr	r3, [pc, #460]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a72      	ldr	r2, [pc, #456]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	e00b      	b.n	8002dee <HAL_RCC_OscConfig+0xc6>
 8002dd6:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6f      	ldr	r2, [pc, #444]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b6d      	ldr	r3, [pc, #436]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6c      	ldr	r2, [pc, #432]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d013      	beq.n	8002e1e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe fca1 	bl	800173c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dfe:	f7fe fc9d 	bl	800173c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b64      	cmp	r3, #100	; 0x64
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1db      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e10:	4b61      	ldr	r3, [pc, #388]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0xd6>
 8002e1c:	e014      	b.n	8002e48 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fc8d 	bl	800173c <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e26:	f7fe fc89 	bl	800173c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b64      	cmp	r3, #100	; 0x64
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1c7      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e38:	4b57      	ldr	r3, [pc, #348]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0xfe>
 8002e44:	e000      	b.n	8002e48 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d06f      	beq.n	8002f34 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e54:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d017      	beq.n	8002e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e60:	4b4d      	ldr	r3, [pc, #308]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d105      	bne.n	8002e78 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e6c:	4b4a      	ldr	r3, [pc, #296]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e78:	4b47      	ldr	r3, [pc, #284]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	d11c      	bne.n	8002ebe <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e84:	4b44      	ldr	r3, [pc, #272]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d116      	bne.n	8002ebe <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e90:	4b41      	ldr	r3, [pc, #260]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x180>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e18f      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea8:	4b3b      	ldr	r3, [pc, #236]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4938      	ldr	r1, [pc, #224]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebc:	e03a      	b.n	8002f34 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d020      	beq.n	8002f08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec6:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fc36 	bl	800173c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fc32 	bl	800173c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e170      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4925      	ldr	r1, [pc, #148]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
 8002f06:	e015      	b.n	8002f34 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f08:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <HAL_RCC_OscConfig+0x274>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fe fc15 	bl	800173c <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f16:	f7fe fc11 	bl	800173c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e14f      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d037      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d016      	beq.n	8002f76 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f48:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <HAL_RCC_OscConfig+0x278>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fe fbf5 	bl	800173c <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f56:	f7fe fbf1 	bl	800173c <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e12f      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCC_OscConfig+0x270>)
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x22e>
 8002f74:	e01c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_RCC_OscConfig+0x278>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fbde 	bl	800173c <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f82:	e00f      	b.n	8002fa4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f84:	f7fe fbda 	bl	800173c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d908      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e118      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	42470000 	.word	0x42470000
 8002fa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	4b8a      	ldr	r3, [pc, #552]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e9      	bne.n	8002f84 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8097 	beq.w	80030ec <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc2:	4b83      	ldr	r3, [pc, #524]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10f      	bne.n	8002fee <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	4b7f      	ldr	r3, [pc, #508]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4a7e      	ldr	r2, [pc, #504]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8002fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fde:	4b7c      	ldr	r3, [pc, #496]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	4b79      	ldr	r3, [pc, #484]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d118      	bne.n	800302c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffa:	4b76      	ldr	r3, [pc, #472]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a75      	ldr	r2, [pc, #468]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003006:	f7fe fb99 	bl	800173c <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300e:	f7fe fb95 	bl	800173c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0d3      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	4b6c      	ldr	r3, [pc, #432]	; (80031d4 <HAL_RCC_OscConfig+0x4ac>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d106      	bne.n	8003042 <HAL_RCC_OscConfig+0x31a>
 8003034:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	4a65      	ldr	r2, [pc, #404]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6713      	str	r3, [r2, #112]	; 0x70
 8003040:	e01c      	b.n	800307c <HAL_RCC_OscConfig+0x354>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b05      	cmp	r3, #5
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x33c>
 800304a:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	4a60      	ldr	r2, [pc, #384]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	6713      	str	r3, [r2, #112]	; 0x70
 8003056:	4b5e      	ldr	r3, [pc, #376]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	4a5d      	ldr	r2, [pc, #372]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6713      	str	r3, [r2, #112]	; 0x70
 8003062:	e00b      	b.n	800307c <HAL_RCC_OscConfig+0x354>
 8003064:	4b5a      	ldr	r3, [pc, #360]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	4a59      	ldr	r2, [pc, #356]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	6713      	str	r3, [r2, #112]	; 0x70
 8003070:	4b57      	ldr	r3, [pc, #348]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	4a56      	ldr	r2, [pc, #344]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8003076:	f023 0304 	bic.w	r3, r3, #4
 800307a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d015      	beq.n	80030b0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7fe fb5a 	bl	800173c <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7fe fb56 	bl	800173c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e092      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a2:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0ee      	beq.n	800308c <HAL_RCC_OscConfig+0x364>
 80030ae:	e014      	b.n	80030da <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe fb44 	bl	800173c <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7fe fb40 	bl	800173c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e07c      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ce:	4b40      	ldr	r3, [pc, #256]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ee      	bne.n	80030b8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e0:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	4a3a      	ldr	r2, [pc, #232]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 80030e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d068      	beq.n	80031c6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030f4:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d060      	beq.n	80031c2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d145      	bne.n	8003194 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003108:	4b33      	ldr	r3, [pc, #204]	; (80031d8 <HAL_RCC_OscConfig+0x4b0>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe fb15 	bl	800173c <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe fb11 	bl	800173c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e04f      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003128:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	019b      	lsls	r3, r3, #6
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	3b01      	subs	r3, #1
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	061b      	lsls	r3, r3, #24
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	071b      	lsls	r3, r3, #28
 8003160:	491b      	ldr	r1, [pc, #108]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003166:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_RCC_OscConfig+0x4b0>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe fae6 	bl	800173c <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe fae2 	bl	800173c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e020      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x44c>
 8003192:	e018      	b.n	80031c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003194:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_RCC_OscConfig+0x4b0>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7fe facf 	bl	800173c <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a2:	f7fe facb 	bl	800173c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e009      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_OscConfig+0x4a8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f0      	bne.n	80031a2 <HAL_RCC_OscConfig+0x47a>
 80031c0:	e001      	b.n	80031c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40007000 	.word	0x40007000
 80031d8:	42470060 	.word	0x42470060

080031dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e01d      	b.n	800322a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fe f970 	bl	80014e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f000 f8e4 	bl	80033e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b06      	cmp	r3, #6
 8003252:	d007      	beq.n	8003264 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_TIM_ConfigClockSource+0x18>
 800328e:	2302      	movs	r3, #2
 8003290:	e0a6      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x166>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032b8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d067      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x120>
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d80b      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x6c>
 80032ce:	2b10      	cmp	r3, #16
 80032d0:	d073      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x140>
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d802      	bhi.n	80032dc <HAL_TIM_ConfigClockSource+0x62>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d06f      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80032da:	e078      	b.n	80033ce <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d06c      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x140>
 80032e0:	2b30      	cmp	r3, #48	; 0x30
 80032e2:	d06a      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x140>
      break;
 80032e4:	e073      	b.n	80033ce <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032e6:	2b70      	cmp	r3, #112	; 0x70
 80032e8:	d00d      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x8c>
 80032ea:	2b70      	cmp	r3, #112	; 0x70
 80032ec:	d804      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x7e>
 80032ee:	2b50      	cmp	r3, #80	; 0x50
 80032f0:	d033      	beq.n	800335a <HAL_TIM_ConfigClockSource+0xe0>
 80032f2:	2b60      	cmp	r3, #96	; 0x60
 80032f4:	d041      	beq.n	800337a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80032f6:	e06a      	b.n	80033ce <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fc:	d066      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x152>
 80032fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003302:	d017      	beq.n	8003334 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003304:	e063      	b.n	80033ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6899      	ldr	r1, [r3, #8]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f000 f981 	bl	800361c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003328:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	609a      	str	r2, [r3, #8]
      break;
 8003332:	e04c      	b.n	80033ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6899      	ldr	r1, [r3, #8]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f000 f96a 	bl	800361c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003356:	609a      	str	r2, [r3, #8]
      break;
 8003358:	e039      	b.n	80033ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	461a      	mov	r2, r3
 8003368:	f000 f8de 	bl	8003528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2150      	movs	r1, #80	; 0x50
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f937 	bl	80035e6 <TIM_ITRx_SetConfig>
      break;
 8003378:	e029      	b.n	80033ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	461a      	mov	r2, r3
 8003388:	f000 f8fd 	bl	8003586 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2160      	movs	r1, #96	; 0x60
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f927 	bl	80035e6 <TIM_ITRx_SetConfig>
      break;
 8003398:	e019      	b.n	80033ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6859      	ldr	r1, [r3, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f000 f8be 	bl	8003528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2140      	movs	r1, #64	; 0x40
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f917 	bl	80035e6 <TIM_ITRx_SetConfig>
      break;
 80033b8:	e009      	b.n	80033ce <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4619      	mov	r1, r3
 80033c4:	4610      	mov	r0, r2
 80033c6:	f000 f90e 	bl	80035e6 <TIM_ITRx_SetConfig>
      break;
 80033ca:	e000      	b.n	80033ce <HAL_TIM_ConfigClockSource+0x154>
      break;
 80033cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a40      	ldr	r2, [pc, #256]	; (80034fc <TIM_Base_SetConfig+0x114>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d013      	beq.n	8003428 <TIM_Base_SetConfig+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003406:	d00f      	beq.n	8003428 <TIM_Base_SetConfig+0x40>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a3d      	ldr	r2, [pc, #244]	; (8003500 <TIM_Base_SetConfig+0x118>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00b      	beq.n	8003428 <TIM_Base_SetConfig+0x40>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a3c      	ldr	r2, [pc, #240]	; (8003504 <TIM_Base_SetConfig+0x11c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d007      	beq.n	8003428 <TIM_Base_SetConfig+0x40>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a3b      	ldr	r2, [pc, #236]	; (8003508 <TIM_Base_SetConfig+0x120>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <TIM_Base_SetConfig+0x40>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a3a      	ldr	r2, [pc, #232]	; (800350c <TIM_Base_SetConfig+0x124>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d108      	bne.n	800343a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a2f      	ldr	r2, [pc, #188]	; (80034fc <TIM_Base_SetConfig+0x114>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d02b      	beq.n	800349a <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003448:	d027      	beq.n	800349a <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a2c      	ldr	r2, [pc, #176]	; (8003500 <TIM_Base_SetConfig+0x118>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d023      	beq.n	800349a <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <TIM_Base_SetConfig+0x11c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01f      	beq.n	800349a <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2a      	ldr	r2, [pc, #168]	; (8003508 <TIM_Base_SetConfig+0x120>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01b      	beq.n	800349a <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a29      	ldr	r2, [pc, #164]	; (800350c <TIM_Base_SetConfig+0x124>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d017      	beq.n	800349a <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a28      	ldr	r2, [pc, #160]	; (8003510 <TIM_Base_SetConfig+0x128>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a27      	ldr	r2, [pc, #156]	; (8003514 <TIM_Base_SetConfig+0x12c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00f      	beq.n	800349a <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a26      	ldr	r2, [pc, #152]	; (8003518 <TIM_Base_SetConfig+0x130>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00b      	beq.n	800349a <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a25      	ldr	r2, [pc, #148]	; (800351c <TIM_Base_SetConfig+0x134>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d007      	beq.n	800349a <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a24      	ldr	r2, [pc, #144]	; (8003520 <TIM_Base_SetConfig+0x138>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d003      	beq.n	800349a <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a23      	ldr	r2, [pc, #140]	; (8003524 <TIM_Base_SetConfig+0x13c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d108      	bne.n	80034ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <TIM_Base_SetConfig+0x114>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_Base_SetConfig+0xf8>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a0c      	ldr	r2, [pc, #48]	; (800350c <TIM_Base_SetConfig+0x124>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d103      	bne.n	80034e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	615a      	str	r2, [r3, #20]
}
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40010000 	.word	0x40010000
 8003500:	40000400 	.word	0x40000400
 8003504:	40000800 	.word	0x40000800
 8003508:	40000c00 	.word	0x40000c00
 800350c:	40010400 	.word	0x40010400
 8003510:	40014000 	.word	0x40014000
 8003514:	40014400 	.word	0x40014400
 8003518:	40014800 	.word	0x40014800
 800351c:	40001800 	.word	0x40001800
 8003520:	40001c00 	.word	0x40001c00
 8003524:	40002000 	.word	0x40002000

08003528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f023 0201 	bic.w	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f023 030a 	bic.w	r3, r3, #10
 8003564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	621a      	str	r2, [r3, #32]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003586:	b480      	push	{r7}
 8003588:	b087      	sub	sp, #28
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f023 0210 	bic.w	r2, r3, #16
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	031b      	lsls	r3, r3, #12
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b085      	sub	sp, #20
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	f043 0307 	orr.w	r3, r3, #7
 8003608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	609a      	str	r2, [r3, #8]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	021a      	lsls	r2, r3, #8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	431a      	orrs	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4313      	orrs	r3, r2
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003670:	2302      	movs	r3, #2
 8003672:	e05a      	b.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a21      	ldr	r2, [pc, #132]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d022      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d01d      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d018      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1a      	ldr	r2, [pc, #104]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00e      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a18      	ldr	r2, [pc, #96]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a17      	ldr	r2, [pc, #92]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a15      	ldr	r2, [pc, #84]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d10c      	bne.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	4313      	orrs	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40010000 	.word	0x40010000
 800373c:	40000400 	.word	0x40000400
 8003740:	40000800 	.word	0x40000800
 8003744:	40000c00 	.word	0x40000c00
 8003748:	40010400 	.word	0x40010400
 800374c:	40014000 	.word	0x40014000
 8003750:	40001800 	.word	0x40001800

08003754 <__errno>:
 8003754:	4b01      	ldr	r3, [pc, #4]	; (800375c <__errno+0x8>)
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	2000000c 	.word	0x2000000c

08003760 <__libc_init_array>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	4e0d      	ldr	r6, [pc, #52]	; (8003798 <__libc_init_array+0x38>)
 8003764:	4c0d      	ldr	r4, [pc, #52]	; (800379c <__libc_init_array+0x3c>)
 8003766:	1ba4      	subs	r4, r4, r6
 8003768:	10a4      	asrs	r4, r4, #2
 800376a:	2500      	movs	r5, #0
 800376c:	42a5      	cmp	r5, r4
 800376e:	d109      	bne.n	8003784 <__libc_init_array+0x24>
 8003770:	4e0b      	ldr	r6, [pc, #44]	; (80037a0 <__libc_init_array+0x40>)
 8003772:	4c0c      	ldr	r4, [pc, #48]	; (80037a4 <__libc_init_array+0x44>)
 8003774:	f001 f8da 	bl	800492c <_init>
 8003778:	1ba4      	subs	r4, r4, r6
 800377a:	10a4      	asrs	r4, r4, #2
 800377c:	2500      	movs	r5, #0
 800377e:	42a5      	cmp	r5, r4
 8003780:	d105      	bne.n	800378e <__libc_init_array+0x2e>
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003788:	4798      	blx	r3
 800378a:	3501      	adds	r5, #1
 800378c:	e7ee      	b.n	800376c <__libc_init_array+0xc>
 800378e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003792:	4798      	blx	r3
 8003794:	3501      	adds	r5, #1
 8003796:	e7f2      	b.n	800377e <__libc_init_array+0x1e>
 8003798:	08004b40 	.word	0x08004b40
 800379c:	08004b40 	.word	0x08004b40
 80037a0:	08004b40 	.word	0x08004b40
 80037a4:	08004b44 	.word	0x08004b44

080037a8 <memset>:
 80037a8:	4402      	add	r2, r0
 80037aa:	4603      	mov	r3, r0
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d100      	bne.n	80037b2 <memset+0xa>
 80037b0:	4770      	bx	lr
 80037b2:	f803 1b01 	strb.w	r1, [r3], #1
 80037b6:	e7f9      	b.n	80037ac <memset+0x4>

080037b8 <rand>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4b13      	ldr	r3, [pc, #76]	; (8003808 <rand+0x50>)
 80037bc:	681c      	ldr	r4, [r3, #0]
 80037be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037c0:	b97b      	cbnz	r3, 80037e2 <rand+0x2a>
 80037c2:	2018      	movs	r0, #24
 80037c4:	f000 f82c 	bl	8003820 <malloc>
 80037c8:	4a10      	ldr	r2, [pc, #64]	; (800380c <rand+0x54>)
 80037ca:	4b11      	ldr	r3, [pc, #68]	; (8003810 <rand+0x58>)
 80037cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80037ce:	e9c0 2300 	strd	r2, r3, [r0]
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <rand+0x5c>)
 80037d4:	6083      	str	r3, [r0, #8]
 80037d6:	230b      	movs	r3, #11
 80037d8:	8183      	strh	r3, [r0, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	2300      	movs	r3, #0
 80037de:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80037e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80037e4:	480c      	ldr	r0, [pc, #48]	; (8003818 <rand+0x60>)
 80037e6:	690a      	ldr	r2, [r1, #16]
 80037e8:	694b      	ldr	r3, [r1, #20]
 80037ea:	4c0c      	ldr	r4, [pc, #48]	; (800381c <rand+0x64>)
 80037ec:	4350      	muls	r0, r2
 80037ee:	fb04 0003 	mla	r0, r4, r3, r0
 80037f2:	fba2 2304 	umull	r2, r3, r2, r4
 80037f6:	4403      	add	r3, r0
 80037f8:	1c54      	adds	r4, r2, #1
 80037fa:	f143 0500 	adc.w	r5, r3, #0
 80037fe:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003802:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003806:	bd38      	pop	{r3, r4, r5, pc}
 8003808:	2000000c 	.word	0x2000000c
 800380c:	abcd330e 	.word	0xabcd330e
 8003810:	e66d1234 	.word	0xe66d1234
 8003814:	0005deec 	.word	0x0005deec
 8003818:	5851f42d 	.word	0x5851f42d
 800381c:	4c957f2d 	.word	0x4c957f2d

08003820 <malloc>:
 8003820:	4b02      	ldr	r3, [pc, #8]	; (800382c <malloc+0xc>)
 8003822:	4601      	mov	r1, r0
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	f000 b803 	b.w	8003830 <_malloc_r>
 800382a:	bf00      	nop
 800382c:	2000000c 	.word	0x2000000c

08003830 <_malloc_r>:
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	1ccd      	adds	r5, r1, #3
 8003834:	f025 0503 	bic.w	r5, r5, #3
 8003838:	3508      	adds	r5, #8
 800383a:	2d0c      	cmp	r5, #12
 800383c:	bf38      	it	cc
 800383e:	250c      	movcc	r5, #12
 8003840:	2d00      	cmp	r5, #0
 8003842:	4606      	mov	r6, r0
 8003844:	db01      	blt.n	800384a <_malloc_r+0x1a>
 8003846:	42a9      	cmp	r1, r5
 8003848:	d903      	bls.n	8003852 <_malloc_r+0x22>
 800384a:	230c      	movs	r3, #12
 800384c:	6033      	str	r3, [r6, #0]
 800384e:	2000      	movs	r0, #0
 8003850:	bd70      	pop	{r4, r5, r6, pc}
 8003852:	f000 f857 	bl	8003904 <__malloc_lock>
 8003856:	4a21      	ldr	r2, [pc, #132]	; (80038dc <_malloc_r+0xac>)
 8003858:	6814      	ldr	r4, [r2, #0]
 800385a:	4621      	mov	r1, r4
 800385c:	b991      	cbnz	r1, 8003884 <_malloc_r+0x54>
 800385e:	4c20      	ldr	r4, [pc, #128]	; (80038e0 <_malloc_r+0xb0>)
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	b91b      	cbnz	r3, 800386c <_malloc_r+0x3c>
 8003864:	4630      	mov	r0, r6
 8003866:	f000 f83d 	bl	80038e4 <_sbrk_r>
 800386a:	6020      	str	r0, [r4, #0]
 800386c:	4629      	mov	r1, r5
 800386e:	4630      	mov	r0, r6
 8003870:	f000 f838 	bl	80038e4 <_sbrk_r>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d124      	bne.n	80038c2 <_malloc_r+0x92>
 8003878:	230c      	movs	r3, #12
 800387a:	6033      	str	r3, [r6, #0]
 800387c:	4630      	mov	r0, r6
 800387e:	f000 f842 	bl	8003906 <__malloc_unlock>
 8003882:	e7e4      	b.n	800384e <_malloc_r+0x1e>
 8003884:	680b      	ldr	r3, [r1, #0]
 8003886:	1b5b      	subs	r3, r3, r5
 8003888:	d418      	bmi.n	80038bc <_malloc_r+0x8c>
 800388a:	2b0b      	cmp	r3, #11
 800388c:	d90f      	bls.n	80038ae <_malloc_r+0x7e>
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	50cd      	str	r5, [r1, r3]
 8003892:	18cc      	adds	r4, r1, r3
 8003894:	4630      	mov	r0, r6
 8003896:	f000 f836 	bl	8003906 <__malloc_unlock>
 800389a:	f104 000b 	add.w	r0, r4, #11
 800389e:	1d23      	adds	r3, r4, #4
 80038a0:	f020 0007 	bic.w	r0, r0, #7
 80038a4:	1ac3      	subs	r3, r0, r3
 80038a6:	d0d3      	beq.n	8003850 <_malloc_r+0x20>
 80038a8:	425a      	negs	r2, r3
 80038aa:	50e2      	str	r2, [r4, r3]
 80038ac:	e7d0      	b.n	8003850 <_malloc_r+0x20>
 80038ae:	428c      	cmp	r4, r1
 80038b0:	684b      	ldr	r3, [r1, #4]
 80038b2:	bf16      	itet	ne
 80038b4:	6063      	strne	r3, [r4, #4]
 80038b6:	6013      	streq	r3, [r2, #0]
 80038b8:	460c      	movne	r4, r1
 80038ba:	e7eb      	b.n	8003894 <_malloc_r+0x64>
 80038bc:	460c      	mov	r4, r1
 80038be:	6849      	ldr	r1, [r1, #4]
 80038c0:	e7cc      	b.n	800385c <_malloc_r+0x2c>
 80038c2:	1cc4      	adds	r4, r0, #3
 80038c4:	f024 0403 	bic.w	r4, r4, #3
 80038c8:	42a0      	cmp	r0, r4
 80038ca:	d005      	beq.n	80038d8 <_malloc_r+0xa8>
 80038cc:	1a21      	subs	r1, r4, r0
 80038ce:	4630      	mov	r0, r6
 80038d0:	f000 f808 	bl	80038e4 <_sbrk_r>
 80038d4:	3001      	adds	r0, #1
 80038d6:	d0cf      	beq.n	8003878 <_malloc_r+0x48>
 80038d8:	6025      	str	r5, [r4, #0]
 80038da:	e7db      	b.n	8003894 <_malloc_r+0x64>
 80038dc:	20000090 	.word	0x20000090
 80038e0:	20000094 	.word	0x20000094

080038e4 <_sbrk_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4c06      	ldr	r4, [pc, #24]	; (8003900 <_sbrk_r+0x1c>)
 80038e8:	2300      	movs	r3, #0
 80038ea:	4605      	mov	r5, r0
 80038ec:	4608      	mov	r0, r1
 80038ee:	6023      	str	r3, [r4, #0]
 80038f0:	f7fd fe52 	bl	8001598 <_sbrk>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d102      	bne.n	80038fe <_sbrk_r+0x1a>
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	b103      	cbz	r3, 80038fe <_sbrk_r+0x1a>
 80038fc:	602b      	str	r3, [r5, #0]
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	200006e4 	.word	0x200006e4

08003904 <__malloc_lock>:
 8003904:	4770      	bx	lr

08003906 <__malloc_unlock>:
 8003906:	4770      	bx	lr

08003908 <sin>:
 8003908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800390a:	ec51 0b10 	vmov	r0, r1, d0
 800390e:	4a20      	ldr	r2, [pc, #128]	; (8003990 <sin+0x88>)
 8003910:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003914:	4293      	cmp	r3, r2
 8003916:	dc07      	bgt.n	8003928 <sin+0x20>
 8003918:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003988 <sin+0x80>
 800391c:	2000      	movs	r0, #0
 800391e:	f000 fe37 	bl	8004590 <__kernel_sin>
 8003922:	ec51 0b10 	vmov	r0, r1, d0
 8003926:	e007      	b.n	8003938 <sin+0x30>
 8003928:	4a1a      	ldr	r2, [pc, #104]	; (8003994 <sin+0x8c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	dd09      	ble.n	8003942 <sin+0x3a>
 800392e:	ee10 2a10 	vmov	r2, s0
 8003932:	460b      	mov	r3, r1
 8003934:	f7fc fc6c 	bl	8000210 <__aeabi_dsub>
 8003938:	ec41 0b10 	vmov	d0, r0, r1
 800393c:	b005      	add	sp, #20
 800393e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003942:	4668      	mov	r0, sp
 8003944:	f000 f828 	bl	8003998 <__ieee754_rem_pio2>
 8003948:	f000 0003 	and.w	r0, r0, #3
 800394c:	2801      	cmp	r0, #1
 800394e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003952:	ed9d 0b00 	vldr	d0, [sp]
 8003956:	d004      	beq.n	8003962 <sin+0x5a>
 8003958:	2802      	cmp	r0, #2
 800395a:	d005      	beq.n	8003968 <sin+0x60>
 800395c:	b970      	cbnz	r0, 800397c <sin+0x74>
 800395e:	2001      	movs	r0, #1
 8003960:	e7dd      	b.n	800391e <sin+0x16>
 8003962:	f000 fa0d 	bl	8003d80 <__kernel_cos>
 8003966:	e7dc      	b.n	8003922 <sin+0x1a>
 8003968:	2001      	movs	r0, #1
 800396a:	f000 fe11 	bl	8004590 <__kernel_sin>
 800396e:	ec53 2b10 	vmov	r2, r3, d0
 8003972:	ee10 0a10 	vmov	r0, s0
 8003976:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800397a:	e7dd      	b.n	8003938 <sin+0x30>
 800397c:	f000 fa00 	bl	8003d80 <__kernel_cos>
 8003980:	e7f5      	b.n	800396e <sin+0x66>
 8003982:	bf00      	nop
 8003984:	f3af 8000 	nop.w
	...
 8003990:	3fe921fb 	.word	0x3fe921fb
 8003994:	7fefffff 	.word	0x7fefffff

08003998 <__ieee754_rem_pio2>:
 8003998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800399c:	ec57 6b10 	vmov	r6, r7, d0
 80039a0:	4bc3      	ldr	r3, [pc, #780]	; (8003cb0 <__ieee754_rem_pio2+0x318>)
 80039a2:	b08d      	sub	sp, #52	; 0x34
 80039a4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80039a8:	4598      	cmp	r8, r3
 80039aa:	4604      	mov	r4, r0
 80039ac:	9704      	str	r7, [sp, #16]
 80039ae:	dc07      	bgt.n	80039c0 <__ieee754_rem_pio2+0x28>
 80039b0:	2200      	movs	r2, #0
 80039b2:	2300      	movs	r3, #0
 80039b4:	ed84 0b00 	vstr	d0, [r4]
 80039b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80039bc:	2500      	movs	r5, #0
 80039be:	e027      	b.n	8003a10 <__ieee754_rem_pio2+0x78>
 80039c0:	4bbc      	ldr	r3, [pc, #752]	; (8003cb4 <__ieee754_rem_pio2+0x31c>)
 80039c2:	4598      	cmp	r8, r3
 80039c4:	dc75      	bgt.n	8003ab2 <__ieee754_rem_pio2+0x11a>
 80039c6:	9b04      	ldr	r3, [sp, #16]
 80039c8:	4dbb      	ldr	r5, [pc, #748]	; (8003cb8 <__ieee754_rem_pio2+0x320>)
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	ee10 0a10 	vmov	r0, s0
 80039d0:	a3a9      	add	r3, pc, #676	; (adr r3, 8003c78 <__ieee754_rem_pio2+0x2e0>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	4639      	mov	r1, r7
 80039d8:	dd36      	ble.n	8003a48 <__ieee754_rem_pio2+0xb0>
 80039da:	f7fc fc19 	bl	8000210 <__aeabi_dsub>
 80039de:	45a8      	cmp	r8, r5
 80039e0:	4606      	mov	r6, r0
 80039e2:	460f      	mov	r7, r1
 80039e4:	d018      	beq.n	8003a18 <__ieee754_rem_pio2+0x80>
 80039e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8003c80 <__ieee754_rem_pio2+0x2e8>)
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	f7fc fc10 	bl	8000210 <__aeabi_dsub>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	e9c4 2300 	strd	r2, r3, [r4]
 80039f8:	4630      	mov	r0, r6
 80039fa:	4639      	mov	r1, r7
 80039fc:	f7fc fc08 	bl	8000210 <__aeabi_dsub>
 8003a00:	a39f      	add	r3, pc, #636	; (adr r3, 8003c80 <__ieee754_rem_pio2+0x2e8>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fc03 	bl	8000210 <__aeabi_dsub>
 8003a0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a0e:	2501      	movs	r5, #1
 8003a10:	4628      	mov	r0, r5
 8003a12:	b00d      	add	sp, #52	; 0x34
 8003a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a18:	a39b      	add	r3, pc, #620	; (adr r3, 8003c88 <__ieee754_rem_pio2+0x2f0>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f7fc fbf7 	bl	8000210 <__aeabi_dsub>
 8003a22:	a39b      	add	r3, pc, #620	; (adr r3, 8003c90 <__ieee754_rem_pio2+0x2f8>)
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	4606      	mov	r6, r0
 8003a2a:	460f      	mov	r7, r1
 8003a2c:	f7fc fbf0 	bl	8000210 <__aeabi_dsub>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	e9c4 2300 	strd	r2, r3, [r4]
 8003a38:	4630      	mov	r0, r6
 8003a3a:	4639      	mov	r1, r7
 8003a3c:	f7fc fbe8 	bl	8000210 <__aeabi_dsub>
 8003a40:	a393      	add	r3, pc, #588	; (adr r3, 8003c90 <__ieee754_rem_pio2+0x2f8>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	e7de      	b.n	8003a06 <__ieee754_rem_pio2+0x6e>
 8003a48:	f7fc fbe4 	bl	8000214 <__adddf3>
 8003a4c:	45a8      	cmp	r8, r5
 8003a4e:	4606      	mov	r6, r0
 8003a50:	460f      	mov	r7, r1
 8003a52:	d016      	beq.n	8003a82 <__ieee754_rem_pio2+0xea>
 8003a54:	a38a      	add	r3, pc, #552	; (adr r3, 8003c80 <__ieee754_rem_pio2+0x2e8>)
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f7fc fbdb 	bl	8000214 <__adddf3>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	e9c4 2300 	strd	r2, r3, [r4]
 8003a66:	4630      	mov	r0, r6
 8003a68:	4639      	mov	r1, r7
 8003a6a:	f7fc fbd1 	bl	8000210 <__aeabi_dsub>
 8003a6e:	a384      	add	r3, pc, #528	; (adr r3, 8003c80 <__ieee754_rem_pio2+0x2e8>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fbce 	bl	8000214 <__adddf3>
 8003a78:	f04f 35ff 	mov.w	r5, #4294967295
 8003a7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a80:	e7c6      	b.n	8003a10 <__ieee754_rem_pio2+0x78>
 8003a82:	a381      	add	r3, pc, #516	; (adr r3, 8003c88 <__ieee754_rem_pio2+0x2f0>)
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f7fc fbc4 	bl	8000214 <__adddf3>
 8003a8c:	a380      	add	r3, pc, #512	; (adr r3, 8003c90 <__ieee754_rem_pio2+0x2f8>)
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	4606      	mov	r6, r0
 8003a94:	460f      	mov	r7, r1
 8003a96:	f7fc fbbd 	bl	8000214 <__adddf3>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	e9c4 2300 	strd	r2, r3, [r4]
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	4639      	mov	r1, r7
 8003aa6:	f7fc fbb3 	bl	8000210 <__aeabi_dsub>
 8003aaa:	a379      	add	r3, pc, #484	; (adr r3, 8003c90 <__ieee754_rem_pio2+0x2f8>)
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	e7e0      	b.n	8003a74 <__ieee754_rem_pio2+0xdc>
 8003ab2:	4b82      	ldr	r3, [pc, #520]	; (8003cbc <__ieee754_rem_pio2+0x324>)
 8003ab4:	4598      	cmp	r8, r3
 8003ab6:	f300 80d0 	bgt.w	8003c5a <__ieee754_rem_pio2+0x2c2>
 8003aba:	f000 fe23 	bl	8004704 <fabs>
 8003abe:	ec57 6b10 	vmov	r6, r7, d0
 8003ac2:	ee10 0a10 	vmov	r0, s0
 8003ac6:	a374      	add	r3, pc, #464	; (adr r3, 8003c98 <__ieee754_rem_pio2+0x300>)
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	4639      	mov	r1, r7
 8003ace:	f7fc fd57 	bl	8000580 <__aeabi_dmul>
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	4b7a      	ldr	r3, [pc, #488]	; (8003cc0 <__ieee754_rem_pio2+0x328>)
 8003ad6:	f7fc fb9d 	bl	8000214 <__adddf3>
 8003ada:	f7fc ffeb 	bl	8000ab4 <__aeabi_d2iz>
 8003ade:	4605      	mov	r5, r0
 8003ae0:	f7fc fce4 	bl	80004ac <__aeabi_i2d>
 8003ae4:	a364      	add	r3, pc, #400	; (adr r3, 8003c78 <__ieee754_rem_pio2+0x2e0>)
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003aee:	f7fc fd47 	bl	8000580 <__aeabi_dmul>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4630      	mov	r0, r6
 8003af8:	4639      	mov	r1, r7
 8003afa:	f7fc fb89 	bl	8000210 <__aeabi_dsub>
 8003afe:	a360      	add	r3, pc, #384	; (adr r3, 8003c80 <__ieee754_rem_pio2+0x2e8>)
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	4682      	mov	sl, r0
 8003b06:	468b      	mov	fp, r1
 8003b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b0c:	f7fc fd38 	bl	8000580 <__aeabi_dmul>
 8003b10:	2d1f      	cmp	r5, #31
 8003b12:	4606      	mov	r6, r0
 8003b14:	460f      	mov	r7, r1
 8003b16:	dc0c      	bgt.n	8003b32 <__ieee754_rem_pio2+0x19a>
 8003b18:	1e6a      	subs	r2, r5, #1
 8003b1a:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <__ieee754_rem_pio2+0x32c>)
 8003b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b20:	4543      	cmp	r3, r8
 8003b22:	d006      	beq.n	8003b32 <__ieee754_rem_pio2+0x19a>
 8003b24:	4632      	mov	r2, r6
 8003b26:	463b      	mov	r3, r7
 8003b28:	4650      	mov	r0, sl
 8003b2a:	4659      	mov	r1, fp
 8003b2c:	f7fc fb70 	bl	8000210 <__aeabi_dsub>
 8003b30:	e00e      	b.n	8003b50 <__ieee754_rem_pio2+0x1b8>
 8003b32:	4632      	mov	r2, r6
 8003b34:	463b      	mov	r3, r7
 8003b36:	4650      	mov	r0, sl
 8003b38:	4659      	mov	r1, fp
 8003b3a:	f7fc fb69 	bl	8000210 <__aeabi_dsub>
 8003b3e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003b42:	9305      	str	r3, [sp, #20]
 8003b44:	9a05      	ldr	r2, [sp, #20]
 8003b46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	dc02      	bgt.n	8003b56 <__ieee754_rem_pio2+0x1be>
 8003b50:	e9c4 0100 	strd	r0, r1, [r4]
 8003b54:	e039      	b.n	8003bca <__ieee754_rem_pio2+0x232>
 8003b56:	a34c      	add	r3, pc, #304	; (adr r3, 8003c88 <__ieee754_rem_pio2+0x2f0>)
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b60:	f7fc fd0e 	bl	8000580 <__aeabi_dmul>
 8003b64:	4606      	mov	r6, r0
 8003b66:	460f      	mov	r7, r1
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4650      	mov	r0, sl
 8003b6e:	4659      	mov	r1, fp
 8003b70:	f7fc fb4e 	bl	8000210 <__aeabi_dsub>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4680      	mov	r8, r0
 8003b7a:	4689      	mov	r9, r1
 8003b7c:	4650      	mov	r0, sl
 8003b7e:	4659      	mov	r1, fp
 8003b80:	f7fc fb46 	bl	8000210 <__aeabi_dsub>
 8003b84:	4632      	mov	r2, r6
 8003b86:	463b      	mov	r3, r7
 8003b88:	f7fc fb42 	bl	8000210 <__aeabi_dsub>
 8003b8c:	a340      	add	r3, pc, #256	; (adr r3, 8003c90 <__ieee754_rem_pio2+0x2f8>)
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	4606      	mov	r6, r0
 8003b94:	460f      	mov	r7, r1
 8003b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b9a:	f7fc fcf1 	bl	8000580 <__aeabi_dmul>
 8003b9e:	4632      	mov	r2, r6
 8003ba0:	463b      	mov	r3, r7
 8003ba2:	f7fc fb35 	bl	8000210 <__aeabi_dsub>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4606      	mov	r6, r0
 8003bac:	460f      	mov	r7, r1
 8003bae:	4640      	mov	r0, r8
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	f7fc fb2d 	bl	8000210 <__aeabi_dsub>
 8003bb6:	9a05      	ldr	r2, [sp, #20]
 8003bb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b31      	cmp	r3, #49	; 0x31
 8003bc0:	dc20      	bgt.n	8003c04 <__ieee754_rem_pio2+0x26c>
 8003bc2:	e9c4 0100 	strd	r0, r1, [r4]
 8003bc6:	46c2      	mov	sl, r8
 8003bc8:	46cb      	mov	fp, r9
 8003bca:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003bce:	4650      	mov	r0, sl
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	4659      	mov	r1, fp
 8003bd6:	f7fc fb1b 	bl	8000210 <__aeabi_dsub>
 8003bda:	463b      	mov	r3, r7
 8003bdc:	4632      	mov	r2, r6
 8003bde:	f7fc fb17 	bl	8000210 <__aeabi_dsub>
 8003be2:	9b04      	ldr	r3, [sp, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003bea:	f6bf af11 	bge.w	8003a10 <__ieee754_rem_pio2+0x78>
 8003bee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003bf2:	6063      	str	r3, [r4, #4]
 8003bf4:	f8c4 8000 	str.w	r8, [r4]
 8003bf8:	60a0      	str	r0, [r4, #8]
 8003bfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003bfe:	60e3      	str	r3, [r4, #12]
 8003c00:	426d      	negs	r5, r5
 8003c02:	e705      	b.n	8003a10 <__ieee754_rem_pio2+0x78>
 8003c04:	a326      	add	r3, pc, #152	; (adr r3, 8003ca0 <__ieee754_rem_pio2+0x308>)
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c0e:	f7fc fcb7 	bl	8000580 <__aeabi_dmul>
 8003c12:	4606      	mov	r6, r0
 8003c14:	460f      	mov	r7, r1
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4640      	mov	r0, r8
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	f7fc faf7 	bl	8000210 <__aeabi_dsub>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4682      	mov	sl, r0
 8003c28:	468b      	mov	fp, r1
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	f7fc faef 	bl	8000210 <__aeabi_dsub>
 8003c32:	4632      	mov	r2, r6
 8003c34:	463b      	mov	r3, r7
 8003c36:	f7fc faeb 	bl	8000210 <__aeabi_dsub>
 8003c3a:	a31b      	add	r3, pc, #108	; (adr r3, 8003ca8 <__ieee754_rem_pio2+0x310>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	4606      	mov	r6, r0
 8003c42:	460f      	mov	r7, r1
 8003c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c48:	f7fc fc9a 	bl	8000580 <__aeabi_dmul>
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	463b      	mov	r3, r7
 8003c50:	f7fc fade 	bl	8000210 <__aeabi_dsub>
 8003c54:	4606      	mov	r6, r0
 8003c56:	460f      	mov	r7, r1
 8003c58:	e764      	b.n	8003b24 <__ieee754_rem_pio2+0x18c>
 8003c5a:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <__ieee754_rem_pio2+0x330>)
 8003c5c:	4598      	cmp	r8, r3
 8003c5e:	dd35      	ble.n	8003ccc <__ieee754_rem_pio2+0x334>
 8003c60:	ee10 2a10 	vmov	r2, s0
 8003c64:	463b      	mov	r3, r7
 8003c66:	4630      	mov	r0, r6
 8003c68:	4639      	mov	r1, r7
 8003c6a:	f7fc fad1 	bl	8000210 <__aeabi_dsub>
 8003c6e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003c72:	e9c4 0100 	strd	r0, r1, [r4]
 8003c76:	e6a1      	b.n	80039bc <__ieee754_rem_pio2+0x24>
 8003c78:	54400000 	.word	0x54400000
 8003c7c:	3ff921fb 	.word	0x3ff921fb
 8003c80:	1a626331 	.word	0x1a626331
 8003c84:	3dd0b461 	.word	0x3dd0b461
 8003c88:	1a600000 	.word	0x1a600000
 8003c8c:	3dd0b461 	.word	0x3dd0b461
 8003c90:	2e037073 	.word	0x2e037073
 8003c94:	3ba3198a 	.word	0x3ba3198a
 8003c98:	6dc9c883 	.word	0x6dc9c883
 8003c9c:	3fe45f30 	.word	0x3fe45f30
 8003ca0:	2e000000 	.word	0x2e000000
 8003ca4:	3ba3198a 	.word	0x3ba3198a
 8003ca8:	252049c1 	.word	0x252049c1
 8003cac:	397b839a 	.word	0x397b839a
 8003cb0:	3fe921fb 	.word	0x3fe921fb
 8003cb4:	4002d97b 	.word	0x4002d97b
 8003cb8:	3ff921fb 	.word	0x3ff921fb
 8003cbc:	413921fb 	.word	0x413921fb
 8003cc0:	3fe00000 	.word	0x3fe00000
 8003cc4:	08004960 	.word	0x08004960
 8003cc8:	7fefffff 	.word	0x7fefffff
 8003ccc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003cd0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003cd4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003cd8:	4630      	mov	r0, r6
 8003cda:	460f      	mov	r7, r1
 8003cdc:	f7fc feea 	bl	8000ab4 <__aeabi_d2iz>
 8003ce0:	f7fc fbe4 	bl	80004ac <__aeabi_i2d>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4630      	mov	r0, r6
 8003cea:	4639      	mov	r1, r7
 8003cec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003cf0:	f7fc fa8e 	bl	8000210 <__aeabi_dsub>
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <__ieee754_rem_pio2+0x3dc>)
 8003cf8:	f7fc fc42 	bl	8000580 <__aeabi_dmul>
 8003cfc:	460f      	mov	r7, r1
 8003cfe:	4606      	mov	r6, r0
 8003d00:	f7fc fed8 	bl	8000ab4 <__aeabi_d2iz>
 8003d04:	f7fc fbd2 	bl	80004ac <__aeabi_i2d>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	4639      	mov	r1, r7
 8003d10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003d14:	f7fc fa7c 	bl	8000210 <__aeabi_dsub>
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <__ieee754_rem_pio2+0x3dc>)
 8003d1c:	f7fc fc30 	bl	8000580 <__aeabi_dmul>
 8003d20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003d24:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003d28:	f04f 0803 	mov.w	r8, #3
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	2700      	movs	r7, #0
 8003d30:	4632      	mov	r2, r6
 8003d32:	463b      	mov	r3, r7
 8003d34:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8003d3c:	f7fc fe88 	bl	8000a50 <__aeabi_dcmpeq>
 8003d40:	b9b0      	cbnz	r0, 8003d70 <__ieee754_rem_pio2+0x3d8>
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <__ieee754_rem_pio2+0x3e0>)
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	2302      	movs	r3, #2
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	462a      	mov	r2, r5
 8003d4c:	4643      	mov	r3, r8
 8003d4e:	4621      	mov	r1, r4
 8003d50:	a806      	add	r0, sp, #24
 8003d52:	f000 f8dd 	bl	8003f10 <__kernel_rem_pio2>
 8003d56:	9b04      	ldr	r3, [sp, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	4605      	mov	r5, r0
 8003d5c:	f6bf ae58 	bge.w	8003a10 <__ieee754_rem_pio2+0x78>
 8003d60:	6863      	ldr	r3, [r4, #4]
 8003d62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d66:	6063      	str	r3, [r4, #4]
 8003d68:	68e3      	ldr	r3, [r4, #12]
 8003d6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d6e:	e746      	b.n	8003bfe <__ieee754_rem_pio2+0x266>
 8003d70:	46d0      	mov	r8, sl
 8003d72:	e7dd      	b.n	8003d30 <__ieee754_rem_pio2+0x398>
 8003d74:	41700000 	.word	0x41700000
 8003d78:	080049e0 	.word	0x080049e0
 8003d7c:	00000000 	.word	0x00000000

08003d80 <__kernel_cos>:
 8003d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d84:	ec59 8b10 	vmov	r8, r9, d0
 8003d88:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8003d8c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003d90:	ed2d 8b02 	vpush	{d8}
 8003d94:	eeb0 8a41 	vmov.f32	s16, s2
 8003d98:	eef0 8a61 	vmov.f32	s17, s3
 8003d9c:	da07      	bge.n	8003dae <__kernel_cos+0x2e>
 8003d9e:	ee10 0a10 	vmov	r0, s0
 8003da2:	4649      	mov	r1, r9
 8003da4:	f7fc fe86 	bl	8000ab4 <__aeabi_d2iz>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	f000 8089 	beq.w	8003ec0 <__kernel_cos+0x140>
 8003dae:	4642      	mov	r2, r8
 8003db0:	464b      	mov	r3, r9
 8003db2:	4640      	mov	r0, r8
 8003db4:	4649      	mov	r1, r9
 8003db6:	f7fc fbe3 	bl	8000580 <__aeabi_dmul>
 8003dba:	2200      	movs	r2, #0
 8003dbc:	4b4e      	ldr	r3, [pc, #312]	; (8003ef8 <__kernel_cos+0x178>)
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	460d      	mov	r5, r1
 8003dc2:	f7fc fbdd 	bl	8000580 <__aeabi_dmul>
 8003dc6:	a340      	add	r3, pc, #256	; (adr r3, 8003ec8 <__kernel_cos+0x148>)
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	4682      	mov	sl, r0
 8003dce:	468b      	mov	fp, r1
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	f7fc fbd4 	bl	8000580 <__aeabi_dmul>
 8003dd8:	a33d      	add	r3, pc, #244	; (adr r3, 8003ed0 <__kernel_cos+0x150>)
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	f7fc fa19 	bl	8000214 <__adddf3>
 8003de2:	4622      	mov	r2, r4
 8003de4:	462b      	mov	r3, r5
 8003de6:	f7fc fbcb 	bl	8000580 <__aeabi_dmul>
 8003dea:	a33b      	add	r3, pc, #236	; (adr r3, 8003ed8 <__kernel_cos+0x158>)
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f7fc fa0e 	bl	8000210 <__aeabi_dsub>
 8003df4:	4622      	mov	r2, r4
 8003df6:	462b      	mov	r3, r5
 8003df8:	f7fc fbc2 	bl	8000580 <__aeabi_dmul>
 8003dfc:	a338      	add	r3, pc, #224	; (adr r3, 8003ee0 <__kernel_cos+0x160>)
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f7fc fa07 	bl	8000214 <__adddf3>
 8003e06:	4622      	mov	r2, r4
 8003e08:	462b      	mov	r3, r5
 8003e0a:	f7fc fbb9 	bl	8000580 <__aeabi_dmul>
 8003e0e:	a336      	add	r3, pc, #216	; (adr r3, 8003ee8 <__kernel_cos+0x168>)
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f7fc f9fc 	bl	8000210 <__aeabi_dsub>
 8003e18:	4622      	mov	r2, r4
 8003e1a:	462b      	mov	r3, r5
 8003e1c:	f7fc fbb0 	bl	8000580 <__aeabi_dmul>
 8003e20:	a333      	add	r3, pc, #204	; (adr r3, 8003ef0 <__kernel_cos+0x170>)
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f7fc f9f5 	bl	8000214 <__adddf3>
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	462b      	mov	r3, r5
 8003e2e:	f7fc fba7 	bl	8000580 <__aeabi_dmul>
 8003e32:	4622      	mov	r2, r4
 8003e34:	462b      	mov	r3, r5
 8003e36:	f7fc fba3 	bl	8000580 <__aeabi_dmul>
 8003e3a:	ec53 2b18 	vmov	r2, r3, d8
 8003e3e:	4604      	mov	r4, r0
 8003e40:	460d      	mov	r5, r1
 8003e42:	4640      	mov	r0, r8
 8003e44:	4649      	mov	r1, r9
 8003e46:	f7fc fb9b 	bl	8000580 <__aeabi_dmul>
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4629      	mov	r1, r5
 8003e50:	4620      	mov	r0, r4
 8003e52:	f7fc f9dd 	bl	8000210 <__aeabi_dsub>
 8003e56:	4b29      	ldr	r3, [pc, #164]	; (8003efc <__kernel_cos+0x17c>)
 8003e58:	429e      	cmp	r6, r3
 8003e5a:	4680      	mov	r8, r0
 8003e5c:	4689      	mov	r9, r1
 8003e5e:	dc11      	bgt.n	8003e84 <__kernel_cos+0x104>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4650      	mov	r0, sl
 8003e66:	4659      	mov	r1, fp
 8003e68:	f7fc f9d2 	bl	8000210 <__aeabi_dsub>
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4924      	ldr	r1, [pc, #144]	; (8003f00 <__kernel_cos+0x180>)
 8003e70:	4602      	mov	r2, r0
 8003e72:	2000      	movs	r0, #0
 8003e74:	f7fc f9cc 	bl	8000210 <__aeabi_dsub>
 8003e78:	ecbd 8b02 	vpop	{d8}
 8003e7c:	ec41 0b10 	vmov	d0, r0, r1
 8003e80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e84:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <__kernel_cos+0x184>)
 8003e86:	491e      	ldr	r1, [pc, #120]	; (8003f00 <__kernel_cos+0x180>)
 8003e88:	429e      	cmp	r6, r3
 8003e8a:	bfcc      	ite	gt
 8003e8c:	4d1e      	ldrgt	r5, [pc, #120]	; (8003f08 <__kernel_cos+0x188>)
 8003e8e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003e92:	2400      	movs	r4, #0
 8003e94:	4622      	mov	r2, r4
 8003e96:	462b      	mov	r3, r5
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f7fc f9b9 	bl	8000210 <__aeabi_dsub>
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	4606      	mov	r6, r0
 8003ea2:	460f      	mov	r7, r1
 8003ea4:	462b      	mov	r3, r5
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	f7fc f9b1 	bl	8000210 <__aeabi_dsub>
 8003eae:	4642      	mov	r2, r8
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	f7fc f9ad 	bl	8000210 <__aeabi_dsub>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4630      	mov	r0, r6
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	e7d9      	b.n	8003e74 <__kernel_cos+0xf4>
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	490f      	ldr	r1, [pc, #60]	; (8003f00 <__kernel_cos+0x180>)
 8003ec4:	e7d8      	b.n	8003e78 <__kernel_cos+0xf8>
 8003ec6:	bf00      	nop
 8003ec8:	be8838d4 	.word	0xbe8838d4
 8003ecc:	bda8fae9 	.word	0xbda8fae9
 8003ed0:	bdb4b1c4 	.word	0xbdb4b1c4
 8003ed4:	3e21ee9e 	.word	0x3e21ee9e
 8003ed8:	809c52ad 	.word	0x809c52ad
 8003edc:	3e927e4f 	.word	0x3e927e4f
 8003ee0:	19cb1590 	.word	0x19cb1590
 8003ee4:	3efa01a0 	.word	0x3efa01a0
 8003ee8:	16c15177 	.word	0x16c15177
 8003eec:	3f56c16c 	.word	0x3f56c16c
 8003ef0:	5555554c 	.word	0x5555554c
 8003ef4:	3fa55555 	.word	0x3fa55555
 8003ef8:	3fe00000 	.word	0x3fe00000
 8003efc:	3fd33332 	.word	0x3fd33332
 8003f00:	3ff00000 	.word	0x3ff00000
 8003f04:	3fe90000 	.word	0x3fe90000
 8003f08:	3fd20000 	.word	0x3fd20000
 8003f0c:	00000000 	.word	0x00000000

08003f10 <__kernel_rem_pio2>:
 8003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	ed2d 8b02 	vpush	{d8}
 8003f18:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8003f1c:	1ed4      	subs	r4, r2, #3
 8003f1e:	9308      	str	r3, [sp, #32]
 8003f20:	9101      	str	r1, [sp, #4]
 8003f22:	4bc5      	ldr	r3, [pc, #788]	; (8004238 <__kernel_rem_pio2+0x328>)
 8003f24:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8003f26:	9009      	str	r0, [sp, #36]	; 0x24
 8003f28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f2c:	9304      	str	r3, [sp, #16]
 8003f2e:	9b08      	ldr	r3, [sp, #32]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	9307      	str	r3, [sp, #28]
 8003f34:	2318      	movs	r3, #24
 8003f36:	fb94 f4f3 	sdiv	r4, r4, r3
 8003f3a:	f06f 0317 	mvn.w	r3, #23
 8003f3e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003f42:	fb04 3303 	mla	r3, r4, r3, r3
 8003f46:	eb03 0a02 	add.w	sl, r3, r2
 8003f4a:	9b04      	ldr	r3, [sp, #16]
 8003f4c:	9a07      	ldr	r2, [sp, #28]
 8003f4e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004228 <__kernel_rem_pio2+0x318>
 8003f52:	eb03 0802 	add.w	r8, r3, r2
 8003f56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003f58:	1aa7      	subs	r7, r4, r2
 8003f5a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003f5e:	ae22      	add	r6, sp, #136	; 0x88
 8003f60:	2500      	movs	r5, #0
 8003f62:	4545      	cmp	r5, r8
 8003f64:	dd13      	ble.n	8003f8e <__kernel_rem_pio2+0x7e>
 8003f66:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8004228 <__kernel_rem_pio2+0x318>
 8003f6a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8003f6e:	2600      	movs	r6, #0
 8003f70:	9b04      	ldr	r3, [sp, #16]
 8003f72:	429e      	cmp	r6, r3
 8003f74:	dc32      	bgt.n	8003fdc <__kernel_rem_pio2+0xcc>
 8003f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f78:	9302      	str	r3, [sp, #8]
 8003f7a:	9b08      	ldr	r3, [sp, #32]
 8003f7c:	199d      	adds	r5, r3, r6
 8003f7e:	ab22      	add	r3, sp, #136	; 0x88
 8003f80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003f84:	9306      	str	r3, [sp, #24]
 8003f86:	ec59 8b18 	vmov	r8, r9, d8
 8003f8a:	2700      	movs	r7, #0
 8003f8c:	e01f      	b.n	8003fce <__kernel_rem_pio2+0xbe>
 8003f8e:	42ef      	cmn	r7, r5
 8003f90:	d407      	bmi.n	8003fa2 <__kernel_rem_pio2+0x92>
 8003f92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003f96:	f7fc fa89 	bl	80004ac <__aeabi_i2d>
 8003f9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003f9e:	3501      	adds	r5, #1
 8003fa0:	e7df      	b.n	8003f62 <__kernel_rem_pio2+0x52>
 8003fa2:	ec51 0b18 	vmov	r0, r1, d8
 8003fa6:	e7f8      	b.n	8003f9a <__kernel_rem_pio2+0x8a>
 8003fa8:	9906      	ldr	r1, [sp, #24]
 8003faa:	9d02      	ldr	r5, [sp, #8]
 8003fac:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003fb0:	9106      	str	r1, [sp, #24]
 8003fb2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003fb6:	9502      	str	r5, [sp, #8]
 8003fb8:	f7fc fae2 	bl	8000580 <__aeabi_dmul>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4640      	mov	r0, r8
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	f7fc f926 	bl	8000214 <__adddf3>
 8003fc8:	3701      	adds	r7, #1
 8003fca:	4680      	mov	r8, r0
 8003fcc:	4689      	mov	r9, r1
 8003fce:	9b07      	ldr	r3, [sp, #28]
 8003fd0:	429f      	cmp	r7, r3
 8003fd2:	dde9      	ble.n	8003fa8 <__kernel_rem_pio2+0x98>
 8003fd4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003fd8:	3601      	adds	r6, #1
 8003fda:	e7c9      	b.n	8003f70 <__kernel_rem_pio2+0x60>
 8003fdc:	9b04      	ldr	r3, [sp, #16]
 8003fde:	aa0e      	add	r2, sp, #56	; 0x38
 8003fe0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003fe4:	930c      	str	r3, [sp, #48]	; 0x30
 8003fe6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003fe8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003fec:	9c04      	ldr	r4, [sp, #16]
 8003fee:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ff0:	ab9a      	add	r3, sp, #616	; 0x268
 8003ff2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8003ff6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ffa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ffe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004002:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8004006:	ab9a      	add	r3, sp, #616	; 0x268
 8004008:	445b      	add	r3, fp
 800400a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800400e:	2500      	movs	r5, #0
 8004010:	1b63      	subs	r3, r4, r5
 8004012:	2b00      	cmp	r3, #0
 8004014:	dc78      	bgt.n	8004108 <__kernel_rem_pio2+0x1f8>
 8004016:	4650      	mov	r0, sl
 8004018:	ec49 8b10 	vmov	d0, r8, r9
 800401c:	f000 fc00 	bl	8004820 <scalbn>
 8004020:	ec57 6b10 	vmov	r6, r7, d0
 8004024:	2200      	movs	r2, #0
 8004026:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800402a:	ee10 0a10 	vmov	r0, s0
 800402e:	4639      	mov	r1, r7
 8004030:	f7fc faa6 	bl	8000580 <__aeabi_dmul>
 8004034:	ec41 0b10 	vmov	d0, r0, r1
 8004038:	f000 fb6e 	bl	8004718 <floor>
 800403c:	2200      	movs	r2, #0
 800403e:	ec51 0b10 	vmov	r0, r1, d0
 8004042:	4b7e      	ldr	r3, [pc, #504]	; (800423c <__kernel_rem_pio2+0x32c>)
 8004044:	f7fc fa9c 	bl	8000580 <__aeabi_dmul>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4630      	mov	r0, r6
 800404e:	4639      	mov	r1, r7
 8004050:	f7fc f8de 	bl	8000210 <__aeabi_dsub>
 8004054:	460f      	mov	r7, r1
 8004056:	4606      	mov	r6, r0
 8004058:	f7fc fd2c 	bl	8000ab4 <__aeabi_d2iz>
 800405c:	9006      	str	r0, [sp, #24]
 800405e:	f7fc fa25 	bl	80004ac <__aeabi_i2d>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4630      	mov	r0, r6
 8004068:	4639      	mov	r1, r7
 800406a:	f7fc f8d1 	bl	8000210 <__aeabi_dsub>
 800406e:	f1ba 0f00 	cmp.w	sl, #0
 8004072:	4606      	mov	r6, r0
 8004074:	460f      	mov	r7, r1
 8004076:	dd6c      	ble.n	8004152 <__kernel_rem_pio2+0x242>
 8004078:	1e62      	subs	r2, r4, #1
 800407a:	ab0e      	add	r3, sp, #56	; 0x38
 800407c:	f1ca 0118 	rsb	r1, sl, #24
 8004080:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004084:	9d06      	ldr	r5, [sp, #24]
 8004086:	fa40 f301 	asr.w	r3, r0, r1
 800408a:	441d      	add	r5, r3
 800408c:	408b      	lsls	r3, r1
 800408e:	1ac0      	subs	r0, r0, r3
 8004090:	ab0e      	add	r3, sp, #56	; 0x38
 8004092:	9506      	str	r5, [sp, #24]
 8004094:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004098:	f1ca 0317 	rsb	r3, sl, #23
 800409c:	fa40 f303 	asr.w	r3, r0, r3
 80040a0:	9302      	str	r3, [sp, #8]
 80040a2:	9b02      	ldr	r3, [sp, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	dd62      	ble.n	800416e <__kernel_rem_pio2+0x25e>
 80040a8:	9b06      	ldr	r3, [sp, #24]
 80040aa:	2200      	movs	r2, #0
 80040ac:	3301      	adds	r3, #1
 80040ae:	9306      	str	r3, [sp, #24]
 80040b0:	4615      	mov	r5, r2
 80040b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80040b6:	4294      	cmp	r4, r2
 80040b8:	f300 8095 	bgt.w	80041e6 <__kernel_rem_pio2+0x2d6>
 80040bc:	f1ba 0f00 	cmp.w	sl, #0
 80040c0:	dd07      	ble.n	80040d2 <__kernel_rem_pio2+0x1c2>
 80040c2:	f1ba 0f01 	cmp.w	sl, #1
 80040c6:	f000 80a2 	beq.w	800420e <__kernel_rem_pio2+0x2fe>
 80040ca:	f1ba 0f02 	cmp.w	sl, #2
 80040ce:	f000 80c1 	beq.w	8004254 <__kernel_rem_pio2+0x344>
 80040d2:	9b02      	ldr	r3, [sp, #8]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d14a      	bne.n	800416e <__kernel_rem_pio2+0x25e>
 80040d8:	4632      	mov	r2, r6
 80040da:	463b      	mov	r3, r7
 80040dc:	2000      	movs	r0, #0
 80040de:	4958      	ldr	r1, [pc, #352]	; (8004240 <__kernel_rem_pio2+0x330>)
 80040e0:	f7fc f896 	bl	8000210 <__aeabi_dsub>
 80040e4:	4606      	mov	r6, r0
 80040e6:	460f      	mov	r7, r1
 80040e8:	2d00      	cmp	r5, #0
 80040ea:	d040      	beq.n	800416e <__kernel_rem_pio2+0x25e>
 80040ec:	4650      	mov	r0, sl
 80040ee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004230 <__kernel_rem_pio2+0x320>
 80040f2:	f000 fb95 	bl	8004820 <scalbn>
 80040f6:	4630      	mov	r0, r6
 80040f8:	4639      	mov	r1, r7
 80040fa:	ec53 2b10 	vmov	r2, r3, d0
 80040fe:	f7fc f887 	bl	8000210 <__aeabi_dsub>
 8004102:	4606      	mov	r6, r0
 8004104:	460f      	mov	r7, r1
 8004106:	e032      	b.n	800416e <__kernel_rem_pio2+0x25e>
 8004108:	2200      	movs	r2, #0
 800410a:	4b4e      	ldr	r3, [pc, #312]	; (8004244 <__kernel_rem_pio2+0x334>)
 800410c:	4640      	mov	r0, r8
 800410e:	4649      	mov	r1, r9
 8004110:	f7fc fa36 	bl	8000580 <__aeabi_dmul>
 8004114:	f7fc fcce 	bl	8000ab4 <__aeabi_d2iz>
 8004118:	f7fc f9c8 	bl	80004ac <__aeabi_i2d>
 800411c:	2200      	movs	r2, #0
 800411e:	4b4a      	ldr	r3, [pc, #296]	; (8004248 <__kernel_rem_pio2+0x338>)
 8004120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004124:	f7fc fa2c 	bl	8000580 <__aeabi_dmul>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4640      	mov	r0, r8
 800412e:	4649      	mov	r1, r9
 8004130:	f7fc f86e 	bl	8000210 <__aeabi_dsub>
 8004134:	f7fc fcbe 	bl	8000ab4 <__aeabi_d2iz>
 8004138:	ab0e      	add	r3, sp, #56	; 0x38
 800413a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800413e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004146:	f7fc f865 	bl	8000214 <__adddf3>
 800414a:	3501      	adds	r5, #1
 800414c:	4680      	mov	r8, r0
 800414e:	4689      	mov	r9, r1
 8004150:	e75e      	b.n	8004010 <__kernel_rem_pio2+0x100>
 8004152:	d105      	bne.n	8004160 <__kernel_rem_pio2+0x250>
 8004154:	1e63      	subs	r3, r4, #1
 8004156:	aa0e      	add	r2, sp, #56	; 0x38
 8004158:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800415c:	15c3      	asrs	r3, r0, #23
 800415e:	e79f      	b.n	80040a0 <__kernel_rem_pio2+0x190>
 8004160:	2200      	movs	r2, #0
 8004162:	4b3a      	ldr	r3, [pc, #232]	; (800424c <__kernel_rem_pio2+0x33c>)
 8004164:	f7fc fc92 	bl	8000a8c <__aeabi_dcmpge>
 8004168:	2800      	cmp	r0, #0
 800416a:	d139      	bne.n	80041e0 <__kernel_rem_pio2+0x2d0>
 800416c:	9002      	str	r0, [sp, #8]
 800416e:	2200      	movs	r2, #0
 8004170:	2300      	movs	r3, #0
 8004172:	4630      	mov	r0, r6
 8004174:	4639      	mov	r1, r7
 8004176:	f7fc fc6b 	bl	8000a50 <__aeabi_dcmpeq>
 800417a:	2800      	cmp	r0, #0
 800417c:	f000 80c7 	beq.w	800430e <__kernel_rem_pio2+0x3fe>
 8004180:	1e65      	subs	r5, r4, #1
 8004182:	462b      	mov	r3, r5
 8004184:	2200      	movs	r2, #0
 8004186:	9904      	ldr	r1, [sp, #16]
 8004188:	428b      	cmp	r3, r1
 800418a:	da6a      	bge.n	8004262 <__kernel_rem_pio2+0x352>
 800418c:	2a00      	cmp	r2, #0
 800418e:	f000 8088 	beq.w	80042a2 <__kernel_rem_pio2+0x392>
 8004192:	ab0e      	add	r3, sp, #56	; 0x38
 8004194:	f1aa 0a18 	sub.w	sl, sl, #24
 8004198:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80b4 	beq.w	800430a <__kernel_rem_pio2+0x3fa>
 80041a2:	4650      	mov	r0, sl
 80041a4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8004230 <__kernel_rem_pio2+0x320>
 80041a8:	f000 fb3a 	bl	8004820 <scalbn>
 80041ac:	00ec      	lsls	r4, r5, #3
 80041ae:	ab72      	add	r3, sp, #456	; 0x1c8
 80041b0:	191e      	adds	r6, r3, r4
 80041b2:	ec59 8b10 	vmov	r8, r9, d0
 80041b6:	f106 0a08 	add.w	sl, r6, #8
 80041ba:	462f      	mov	r7, r5
 80041bc:	2f00      	cmp	r7, #0
 80041be:	f280 80df 	bge.w	8004380 <__kernel_rem_pio2+0x470>
 80041c2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8004228 <__kernel_rem_pio2+0x318>
 80041c6:	f04f 0a00 	mov.w	sl, #0
 80041ca:	eba5 030a 	sub.w	r3, r5, sl
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f2c0 810a 	blt.w	80043e8 <__kernel_rem_pio2+0x4d8>
 80041d4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8004250 <__kernel_rem_pio2+0x340>
 80041d8:	ec59 8b18 	vmov	r8, r9, d8
 80041dc:	2700      	movs	r7, #0
 80041de:	e0f5      	b.n	80043cc <__kernel_rem_pio2+0x4bc>
 80041e0:	2302      	movs	r3, #2
 80041e2:	9302      	str	r3, [sp, #8]
 80041e4:	e760      	b.n	80040a8 <__kernel_rem_pio2+0x198>
 80041e6:	ab0e      	add	r3, sp, #56	; 0x38
 80041e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ec:	b94d      	cbnz	r5, 8004202 <__kernel_rem_pio2+0x2f2>
 80041ee:	b12b      	cbz	r3, 80041fc <__kernel_rem_pio2+0x2ec>
 80041f0:	a80e      	add	r0, sp, #56	; 0x38
 80041f2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80041f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80041fa:	2301      	movs	r3, #1
 80041fc:	3201      	adds	r2, #1
 80041fe:	461d      	mov	r5, r3
 8004200:	e759      	b.n	80040b6 <__kernel_rem_pio2+0x1a6>
 8004202:	a80e      	add	r0, sp, #56	; 0x38
 8004204:	1acb      	subs	r3, r1, r3
 8004206:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800420a:	462b      	mov	r3, r5
 800420c:	e7f6      	b.n	80041fc <__kernel_rem_pio2+0x2ec>
 800420e:	1e62      	subs	r2, r4, #1
 8004210:	ab0e      	add	r3, sp, #56	; 0x38
 8004212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004216:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800421a:	a90e      	add	r1, sp, #56	; 0x38
 800421c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004220:	e757      	b.n	80040d2 <__kernel_rem_pio2+0x1c2>
 8004222:	bf00      	nop
 8004224:	f3af 8000 	nop.w
	...
 8004234:	3ff00000 	.word	0x3ff00000
 8004238:	08004b28 	.word	0x08004b28
 800423c:	40200000 	.word	0x40200000
 8004240:	3ff00000 	.word	0x3ff00000
 8004244:	3e700000 	.word	0x3e700000
 8004248:	41700000 	.word	0x41700000
 800424c:	3fe00000 	.word	0x3fe00000
 8004250:	08004ae8 	.word	0x08004ae8
 8004254:	1e62      	subs	r2, r4, #1
 8004256:	ab0e      	add	r3, sp, #56	; 0x38
 8004258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004260:	e7db      	b.n	800421a <__kernel_rem_pio2+0x30a>
 8004262:	a90e      	add	r1, sp, #56	; 0x38
 8004264:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004268:	3b01      	subs	r3, #1
 800426a:	430a      	orrs	r2, r1
 800426c:	e78b      	b.n	8004186 <__kernel_rem_pio2+0x276>
 800426e:	3301      	adds	r3, #1
 8004270:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004274:	2900      	cmp	r1, #0
 8004276:	d0fa      	beq.n	800426e <__kernel_rem_pio2+0x35e>
 8004278:	9a08      	ldr	r2, [sp, #32]
 800427a:	4422      	add	r2, r4
 800427c:	00d2      	lsls	r2, r2, #3
 800427e:	a922      	add	r1, sp, #136	; 0x88
 8004280:	18e3      	adds	r3, r4, r3
 8004282:	9206      	str	r2, [sp, #24]
 8004284:	440a      	add	r2, r1
 8004286:	9302      	str	r3, [sp, #8]
 8004288:	f10b 0108 	add.w	r1, fp, #8
 800428c:	f102 0308 	add.w	r3, r2, #8
 8004290:	1c66      	adds	r6, r4, #1
 8004292:	910a      	str	r1, [sp, #40]	; 0x28
 8004294:	2500      	movs	r5, #0
 8004296:	930d      	str	r3, [sp, #52]	; 0x34
 8004298:	9b02      	ldr	r3, [sp, #8]
 800429a:	42b3      	cmp	r3, r6
 800429c:	da04      	bge.n	80042a8 <__kernel_rem_pio2+0x398>
 800429e:	461c      	mov	r4, r3
 80042a0:	e6a6      	b.n	8003ff0 <__kernel_rem_pio2+0xe0>
 80042a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042a4:	2301      	movs	r3, #1
 80042a6:	e7e3      	b.n	8004270 <__kernel_rem_pio2+0x360>
 80042a8:	9b06      	ldr	r3, [sp, #24]
 80042aa:	18ef      	adds	r7, r5, r3
 80042ac:	ab22      	add	r3, sp, #136	; 0x88
 80042ae:	441f      	add	r7, r3
 80042b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80042b6:	f7fc f8f9 	bl	80004ac <__aeabi_i2d>
 80042ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042bc:	461c      	mov	r4, r3
 80042be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042c0:	e9c7 0100 	strd	r0, r1, [r7]
 80042c4:	eb03 0b05 	add.w	fp, r3, r5
 80042c8:	2700      	movs	r7, #0
 80042ca:	f04f 0800 	mov.w	r8, #0
 80042ce:	f04f 0900 	mov.w	r9, #0
 80042d2:	9b07      	ldr	r3, [sp, #28]
 80042d4:	429f      	cmp	r7, r3
 80042d6:	dd08      	ble.n	80042ea <__kernel_rem_pio2+0x3da>
 80042d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042da:	aa72      	add	r2, sp, #456	; 0x1c8
 80042dc:	18eb      	adds	r3, r5, r3
 80042de:	4413      	add	r3, r2
 80042e0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80042e4:	3601      	adds	r6, #1
 80042e6:	3508      	adds	r5, #8
 80042e8:	e7d6      	b.n	8004298 <__kernel_rem_pio2+0x388>
 80042ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80042ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80042f2:	f7fc f945 	bl	8000580 <__aeabi_dmul>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4640      	mov	r0, r8
 80042fc:	4649      	mov	r1, r9
 80042fe:	f7fb ff89 	bl	8000214 <__adddf3>
 8004302:	3701      	adds	r7, #1
 8004304:	4680      	mov	r8, r0
 8004306:	4689      	mov	r9, r1
 8004308:	e7e3      	b.n	80042d2 <__kernel_rem_pio2+0x3c2>
 800430a:	3d01      	subs	r5, #1
 800430c:	e741      	b.n	8004192 <__kernel_rem_pio2+0x282>
 800430e:	f1ca 0000 	rsb	r0, sl, #0
 8004312:	ec47 6b10 	vmov	d0, r6, r7
 8004316:	f000 fa83 	bl	8004820 <scalbn>
 800431a:	ec57 6b10 	vmov	r6, r7, d0
 800431e:	2200      	movs	r2, #0
 8004320:	4b99      	ldr	r3, [pc, #612]	; (8004588 <__kernel_rem_pio2+0x678>)
 8004322:	ee10 0a10 	vmov	r0, s0
 8004326:	4639      	mov	r1, r7
 8004328:	f7fc fbb0 	bl	8000a8c <__aeabi_dcmpge>
 800432c:	b1f8      	cbz	r0, 800436e <__kernel_rem_pio2+0x45e>
 800432e:	2200      	movs	r2, #0
 8004330:	4b96      	ldr	r3, [pc, #600]	; (800458c <__kernel_rem_pio2+0x67c>)
 8004332:	4630      	mov	r0, r6
 8004334:	4639      	mov	r1, r7
 8004336:	f7fc f923 	bl	8000580 <__aeabi_dmul>
 800433a:	f7fc fbbb 	bl	8000ab4 <__aeabi_d2iz>
 800433e:	4680      	mov	r8, r0
 8004340:	f7fc f8b4 	bl	80004ac <__aeabi_i2d>
 8004344:	2200      	movs	r2, #0
 8004346:	4b90      	ldr	r3, [pc, #576]	; (8004588 <__kernel_rem_pio2+0x678>)
 8004348:	f7fc f91a 	bl	8000580 <__aeabi_dmul>
 800434c:	460b      	mov	r3, r1
 800434e:	4602      	mov	r2, r0
 8004350:	4639      	mov	r1, r7
 8004352:	4630      	mov	r0, r6
 8004354:	f7fb ff5c 	bl	8000210 <__aeabi_dsub>
 8004358:	f7fc fbac 	bl	8000ab4 <__aeabi_d2iz>
 800435c:	1c65      	adds	r5, r4, #1
 800435e:	ab0e      	add	r3, sp, #56	; 0x38
 8004360:	f10a 0a18 	add.w	sl, sl, #24
 8004364:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004368:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800436c:	e719      	b.n	80041a2 <__kernel_rem_pio2+0x292>
 800436e:	4630      	mov	r0, r6
 8004370:	4639      	mov	r1, r7
 8004372:	f7fc fb9f 	bl	8000ab4 <__aeabi_d2iz>
 8004376:	ab0e      	add	r3, sp, #56	; 0x38
 8004378:	4625      	mov	r5, r4
 800437a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800437e:	e710      	b.n	80041a2 <__kernel_rem_pio2+0x292>
 8004380:	ab0e      	add	r3, sp, #56	; 0x38
 8004382:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004386:	f7fc f891 	bl	80004ac <__aeabi_i2d>
 800438a:	4642      	mov	r2, r8
 800438c:	464b      	mov	r3, r9
 800438e:	f7fc f8f7 	bl	8000580 <__aeabi_dmul>
 8004392:	2200      	movs	r2, #0
 8004394:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004398:	4b7c      	ldr	r3, [pc, #496]	; (800458c <__kernel_rem_pio2+0x67c>)
 800439a:	4640      	mov	r0, r8
 800439c:	4649      	mov	r1, r9
 800439e:	f7fc f8ef 	bl	8000580 <__aeabi_dmul>
 80043a2:	3f01      	subs	r7, #1
 80043a4:	4680      	mov	r8, r0
 80043a6:	4689      	mov	r9, r1
 80043a8:	e708      	b.n	80041bc <__kernel_rem_pio2+0x2ac>
 80043aa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80043b6:	f7fc f8e3 	bl	8000580 <__aeabi_dmul>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4640      	mov	r0, r8
 80043c0:	4649      	mov	r1, r9
 80043c2:	f7fb ff27 	bl	8000214 <__adddf3>
 80043c6:	3701      	adds	r7, #1
 80043c8:	4680      	mov	r8, r0
 80043ca:	4689      	mov	r9, r1
 80043cc:	9b04      	ldr	r3, [sp, #16]
 80043ce:	429f      	cmp	r7, r3
 80043d0:	dc01      	bgt.n	80043d6 <__kernel_rem_pio2+0x4c6>
 80043d2:	45ba      	cmp	sl, r7
 80043d4:	dae9      	bge.n	80043aa <__kernel_rem_pio2+0x49a>
 80043d6:	ab4a      	add	r3, sp, #296	; 0x128
 80043d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80043dc:	e9c3 8900 	strd	r8, r9, [r3]
 80043e0:	f10a 0a01 	add.w	sl, sl, #1
 80043e4:	3e08      	subs	r6, #8
 80043e6:	e6f0      	b.n	80041ca <__kernel_rem_pio2+0x2ba>
 80043e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d85b      	bhi.n	80044a6 <__kernel_rem_pio2+0x596>
 80043ee:	e8df f003 	tbb	[pc, r3]
 80043f2:	264a      	.short	0x264a
 80043f4:	0226      	.short	0x0226
 80043f6:	ab9a      	add	r3, sp, #616	; 0x268
 80043f8:	441c      	add	r4, r3
 80043fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80043fe:	46a2      	mov	sl, r4
 8004400:	46ab      	mov	fp, r5
 8004402:	f1bb 0f00 	cmp.w	fp, #0
 8004406:	dc6c      	bgt.n	80044e2 <__kernel_rem_pio2+0x5d2>
 8004408:	46a2      	mov	sl, r4
 800440a:	46ab      	mov	fp, r5
 800440c:	f1bb 0f01 	cmp.w	fp, #1
 8004410:	f300 8086 	bgt.w	8004520 <__kernel_rem_pio2+0x610>
 8004414:	2000      	movs	r0, #0
 8004416:	2100      	movs	r1, #0
 8004418:	2d01      	cmp	r5, #1
 800441a:	f300 80a0 	bgt.w	800455e <__kernel_rem_pio2+0x64e>
 800441e:	9b02      	ldr	r3, [sp, #8]
 8004420:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8004424:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8004428:	2b00      	cmp	r3, #0
 800442a:	f040 809e 	bne.w	800456a <__kernel_rem_pio2+0x65a>
 800442e:	9b01      	ldr	r3, [sp, #4]
 8004430:	e9c3 7800 	strd	r7, r8, [r3]
 8004434:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004438:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800443c:	e033      	b.n	80044a6 <__kernel_rem_pio2+0x596>
 800443e:	3408      	adds	r4, #8
 8004440:	ab4a      	add	r3, sp, #296	; 0x128
 8004442:	441c      	add	r4, r3
 8004444:	462e      	mov	r6, r5
 8004446:	2000      	movs	r0, #0
 8004448:	2100      	movs	r1, #0
 800444a:	2e00      	cmp	r6, #0
 800444c:	da3a      	bge.n	80044c4 <__kernel_rem_pio2+0x5b4>
 800444e:	9b02      	ldr	r3, [sp, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d03d      	beq.n	80044d0 <__kernel_rem_pio2+0x5c0>
 8004454:	4602      	mov	r2, r0
 8004456:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800445a:	9c01      	ldr	r4, [sp, #4]
 800445c:	e9c4 2300 	strd	r2, r3, [r4]
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004468:	f7fb fed2 	bl	8000210 <__aeabi_dsub>
 800446c:	ae4c      	add	r6, sp, #304	; 0x130
 800446e:	2401      	movs	r4, #1
 8004470:	42a5      	cmp	r5, r4
 8004472:	da30      	bge.n	80044d6 <__kernel_rem_pio2+0x5c6>
 8004474:	9b02      	ldr	r3, [sp, #8]
 8004476:	b113      	cbz	r3, 800447e <__kernel_rem_pio2+0x56e>
 8004478:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800447c:	4619      	mov	r1, r3
 800447e:	9b01      	ldr	r3, [sp, #4]
 8004480:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004484:	e00f      	b.n	80044a6 <__kernel_rem_pio2+0x596>
 8004486:	ab9a      	add	r3, sp, #616	; 0x268
 8004488:	441c      	add	r4, r3
 800448a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800448e:	2000      	movs	r0, #0
 8004490:	2100      	movs	r1, #0
 8004492:	2d00      	cmp	r5, #0
 8004494:	da10      	bge.n	80044b8 <__kernel_rem_pio2+0x5a8>
 8004496:	9b02      	ldr	r3, [sp, #8]
 8004498:	b113      	cbz	r3, 80044a0 <__kernel_rem_pio2+0x590>
 800449a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800449e:	4619      	mov	r1, r3
 80044a0:	9b01      	ldr	r3, [sp, #4]
 80044a2:	e9c3 0100 	strd	r0, r1, [r3]
 80044a6:	9b06      	ldr	r3, [sp, #24]
 80044a8:	f003 0007 	and.w	r0, r3, #7
 80044ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80044b0:	ecbd 8b02 	vpop	{d8}
 80044b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80044bc:	f7fb feaa 	bl	8000214 <__adddf3>
 80044c0:	3d01      	subs	r5, #1
 80044c2:	e7e6      	b.n	8004492 <__kernel_rem_pio2+0x582>
 80044c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80044c8:	f7fb fea4 	bl	8000214 <__adddf3>
 80044cc:	3e01      	subs	r6, #1
 80044ce:	e7bc      	b.n	800444a <__kernel_rem_pio2+0x53a>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	e7c1      	b.n	800445a <__kernel_rem_pio2+0x54a>
 80044d6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80044da:	f7fb fe9b 	bl	8000214 <__adddf3>
 80044de:	3401      	adds	r4, #1
 80044e0:	e7c6      	b.n	8004470 <__kernel_rem_pio2+0x560>
 80044e2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80044e6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80044ea:	4640      	mov	r0, r8
 80044ec:	ec53 2b17 	vmov	r2, r3, d7
 80044f0:	4649      	mov	r1, r9
 80044f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80044f6:	f7fb fe8d 	bl	8000214 <__adddf3>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4606      	mov	r6, r0
 8004500:	460f      	mov	r7, r1
 8004502:	4640      	mov	r0, r8
 8004504:	4649      	mov	r1, r9
 8004506:	f7fb fe83 	bl	8000210 <__aeabi_dsub>
 800450a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800450e:	f7fb fe81 	bl	8000214 <__adddf3>
 8004512:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004516:	e9ca 0100 	strd	r0, r1, [sl]
 800451a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800451e:	e770      	b.n	8004402 <__kernel_rem_pio2+0x4f2>
 8004520:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8004524:	ed3a 7b02 	vldmdb	sl!, {d7}
 8004528:	4630      	mov	r0, r6
 800452a:	ec53 2b17 	vmov	r2, r3, d7
 800452e:	4639      	mov	r1, r7
 8004530:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004534:	f7fb fe6e 	bl	8000214 <__adddf3>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4680      	mov	r8, r0
 800453e:	4689      	mov	r9, r1
 8004540:	4630      	mov	r0, r6
 8004542:	4639      	mov	r1, r7
 8004544:	f7fb fe64 	bl	8000210 <__aeabi_dsub>
 8004548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800454c:	f7fb fe62 	bl	8000214 <__adddf3>
 8004550:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004554:	e9ca 0100 	strd	r0, r1, [sl]
 8004558:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800455c:	e756      	b.n	800440c <__kernel_rem_pio2+0x4fc>
 800455e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004562:	f7fb fe57 	bl	8000214 <__adddf3>
 8004566:	3d01      	subs	r5, #1
 8004568:	e756      	b.n	8004418 <__kernel_rem_pio2+0x508>
 800456a:	9b01      	ldr	r3, [sp, #4]
 800456c:	9a01      	ldr	r2, [sp, #4]
 800456e:	601f      	str	r7, [r3, #0]
 8004570:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004574:	605c      	str	r4, [r3, #4]
 8004576:	609d      	str	r5, [r3, #8]
 8004578:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800457c:	60d3      	str	r3, [r2, #12]
 800457e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004582:	6110      	str	r0, [r2, #16]
 8004584:	6153      	str	r3, [r2, #20]
 8004586:	e78e      	b.n	80044a6 <__kernel_rem_pio2+0x596>
 8004588:	41700000 	.word	0x41700000
 800458c:	3e700000 	.word	0x3e700000

08004590 <__kernel_sin>:
 8004590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	ec55 4b10 	vmov	r4, r5, d0
 8004598:	b085      	sub	sp, #20
 800459a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800459e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80045a2:	ed8d 1b00 	vstr	d1, [sp]
 80045a6:	9002      	str	r0, [sp, #8]
 80045a8:	da06      	bge.n	80045b8 <__kernel_sin+0x28>
 80045aa:	ee10 0a10 	vmov	r0, s0
 80045ae:	4629      	mov	r1, r5
 80045b0:	f7fc fa80 	bl	8000ab4 <__aeabi_d2iz>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d051      	beq.n	800465c <__kernel_sin+0xcc>
 80045b8:	4622      	mov	r2, r4
 80045ba:	462b      	mov	r3, r5
 80045bc:	4620      	mov	r0, r4
 80045be:	4629      	mov	r1, r5
 80045c0:	f7fb ffde 	bl	8000580 <__aeabi_dmul>
 80045c4:	4682      	mov	sl, r0
 80045c6:	468b      	mov	fp, r1
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4620      	mov	r0, r4
 80045ce:	4629      	mov	r1, r5
 80045d0:	f7fb ffd6 	bl	8000580 <__aeabi_dmul>
 80045d4:	a341      	add	r3, pc, #260	; (adr r3, 80046dc <__kernel_sin+0x14c>)
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	4680      	mov	r8, r0
 80045dc:	4689      	mov	r9, r1
 80045de:	4650      	mov	r0, sl
 80045e0:	4659      	mov	r1, fp
 80045e2:	f7fb ffcd 	bl	8000580 <__aeabi_dmul>
 80045e6:	a33f      	add	r3, pc, #252	; (adr r3, 80046e4 <__kernel_sin+0x154>)
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f7fb fe10 	bl	8000210 <__aeabi_dsub>
 80045f0:	4652      	mov	r2, sl
 80045f2:	465b      	mov	r3, fp
 80045f4:	f7fb ffc4 	bl	8000580 <__aeabi_dmul>
 80045f8:	a33c      	add	r3, pc, #240	; (adr r3, 80046ec <__kernel_sin+0x15c>)
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	f7fb fe09 	bl	8000214 <__adddf3>
 8004602:	4652      	mov	r2, sl
 8004604:	465b      	mov	r3, fp
 8004606:	f7fb ffbb 	bl	8000580 <__aeabi_dmul>
 800460a:	a33a      	add	r3, pc, #232	; (adr r3, 80046f4 <__kernel_sin+0x164>)
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	f7fb fdfe 	bl	8000210 <__aeabi_dsub>
 8004614:	4652      	mov	r2, sl
 8004616:	465b      	mov	r3, fp
 8004618:	f7fb ffb2 	bl	8000580 <__aeabi_dmul>
 800461c:	a337      	add	r3, pc, #220	; (adr r3, 80046fc <__kernel_sin+0x16c>)
 800461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004622:	f7fb fdf7 	bl	8000214 <__adddf3>
 8004626:	9b02      	ldr	r3, [sp, #8]
 8004628:	4606      	mov	r6, r0
 800462a:	460f      	mov	r7, r1
 800462c:	b9db      	cbnz	r3, 8004666 <__kernel_sin+0xd6>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4650      	mov	r0, sl
 8004634:	4659      	mov	r1, fp
 8004636:	f7fb ffa3 	bl	8000580 <__aeabi_dmul>
 800463a:	a325      	add	r3, pc, #148	; (adr r3, 80046d0 <__kernel_sin+0x140>)
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f7fb fde6 	bl	8000210 <__aeabi_dsub>
 8004644:	4642      	mov	r2, r8
 8004646:	464b      	mov	r3, r9
 8004648:	f7fb ff9a 	bl	8000580 <__aeabi_dmul>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4620      	mov	r0, r4
 8004652:	4629      	mov	r1, r5
 8004654:	f7fb fdde 	bl	8000214 <__adddf3>
 8004658:	4604      	mov	r4, r0
 800465a:	460d      	mov	r5, r1
 800465c:	ec45 4b10 	vmov	d0, r4, r5
 8004660:	b005      	add	sp, #20
 8004662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004666:	2200      	movs	r2, #0
 8004668:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <__kernel_sin+0x148>)
 800466a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800466e:	f7fb ff87 	bl	8000580 <__aeabi_dmul>
 8004672:	4632      	mov	r2, r6
 8004674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004678:	463b      	mov	r3, r7
 800467a:	4640      	mov	r0, r8
 800467c:	4649      	mov	r1, r9
 800467e:	f7fb ff7f 	bl	8000580 <__aeabi_dmul>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800468a:	f7fb fdc1 	bl	8000210 <__aeabi_dsub>
 800468e:	4652      	mov	r2, sl
 8004690:	465b      	mov	r3, fp
 8004692:	f7fb ff75 	bl	8000580 <__aeabi_dmul>
 8004696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800469a:	f7fb fdb9 	bl	8000210 <__aeabi_dsub>
 800469e:	a30c      	add	r3, pc, #48	; (adr r3, 80046d0 <__kernel_sin+0x140>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	4606      	mov	r6, r0
 80046a6:	460f      	mov	r7, r1
 80046a8:	4640      	mov	r0, r8
 80046aa:	4649      	mov	r1, r9
 80046ac:	f7fb ff68 	bl	8000580 <__aeabi_dmul>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4630      	mov	r0, r6
 80046b6:	4639      	mov	r1, r7
 80046b8:	f7fb fdac 	bl	8000214 <__adddf3>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4620      	mov	r0, r4
 80046c2:	4629      	mov	r1, r5
 80046c4:	f7fb fda4 	bl	8000210 <__aeabi_dsub>
 80046c8:	e7c6      	b.n	8004658 <__kernel_sin+0xc8>
 80046ca:	bf00      	nop
 80046cc:	f3af 8000 	nop.w
 80046d0:	55555549 	.word	0x55555549
 80046d4:	3fc55555 	.word	0x3fc55555
 80046d8:	3fe00000 	.word	0x3fe00000
 80046dc:	5acfd57c 	.word	0x5acfd57c
 80046e0:	3de5d93a 	.word	0x3de5d93a
 80046e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80046e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80046ec:	57b1fe7d 	.word	0x57b1fe7d
 80046f0:	3ec71de3 	.word	0x3ec71de3
 80046f4:	19c161d5 	.word	0x19c161d5
 80046f8:	3f2a01a0 	.word	0x3f2a01a0
 80046fc:	1110f8a6 	.word	0x1110f8a6
 8004700:	3f811111 	.word	0x3f811111

08004704 <fabs>:
 8004704:	ec51 0b10 	vmov	r0, r1, d0
 8004708:	ee10 2a10 	vmov	r2, s0
 800470c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004710:	ec43 2b10 	vmov	d0, r2, r3
 8004714:	4770      	bx	lr
	...

08004718 <floor>:
 8004718:	ec51 0b10 	vmov	r0, r1, d0
 800471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004720:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004724:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004728:	2e13      	cmp	r6, #19
 800472a:	460c      	mov	r4, r1
 800472c:	ee10 5a10 	vmov	r5, s0
 8004730:	4680      	mov	r8, r0
 8004732:	dc34      	bgt.n	800479e <floor+0x86>
 8004734:	2e00      	cmp	r6, #0
 8004736:	da16      	bge.n	8004766 <floor+0x4e>
 8004738:	a335      	add	r3, pc, #212	; (adr r3, 8004810 <floor+0xf8>)
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f7fb fd69 	bl	8000214 <__adddf3>
 8004742:	2200      	movs	r2, #0
 8004744:	2300      	movs	r3, #0
 8004746:	f7fc f9ab 	bl	8000aa0 <__aeabi_dcmpgt>
 800474a:	b148      	cbz	r0, 8004760 <floor+0x48>
 800474c:	2c00      	cmp	r4, #0
 800474e:	da59      	bge.n	8004804 <floor+0xec>
 8004750:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004754:	4a30      	ldr	r2, [pc, #192]	; (8004818 <floor+0x100>)
 8004756:	432b      	orrs	r3, r5
 8004758:	2500      	movs	r5, #0
 800475a:	42ab      	cmp	r3, r5
 800475c:	bf18      	it	ne
 800475e:	4614      	movne	r4, r2
 8004760:	4621      	mov	r1, r4
 8004762:	4628      	mov	r0, r5
 8004764:	e025      	b.n	80047b2 <floor+0x9a>
 8004766:	4f2d      	ldr	r7, [pc, #180]	; (800481c <floor+0x104>)
 8004768:	4137      	asrs	r7, r6
 800476a:	ea01 0307 	and.w	r3, r1, r7
 800476e:	4303      	orrs	r3, r0
 8004770:	d01f      	beq.n	80047b2 <floor+0x9a>
 8004772:	a327      	add	r3, pc, #156	; (adr r3, 8004810 <floor+0xf8>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f7fb fd4c 	bl	8000214 <__adddf3>
 800477c:	2200      	movs	r2, #0
 800477e:	2300      	movs	r3, #0
 8004780:	f7fc f98e 	bl	8000aa0 <__aeabi_dcmpgt>
 8004784:	2800      	cmp	r0, #0
 8004786:	d0eb      	beq.n	8004760 <floor+0x48>
 8004788:	2c00      	cmp	r4, #0
 800478a:	bfbe      	ittt	lt
 800478c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004790:	fa43 f606 	asrlt.w	r6, r3, r6
 8004794:	19a4      	addlt	r4, r4, r6
 8004796:	ea24 0407 	bic.w	r4, r4, r7
 800479a:	2500      	movs	r5, #0
 800479c:	e7e0      	b.n	8004760 <floor+0x48>
 800479e:	2e33      	cmp	r6, #51	; 0x33
 80047a0:	dd0b      	ble.n	80047ba <floor+0xa2>
 80047a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80047a6:	d104      	bne.n	80047b2 <floor+0x9a>
 80047a8:	ee10 2a10 	vmov	r2, s0
 80047ac:	460b      	mov	r3, r1
 80047ae:	f7fb fd31 	bl	8000214 <__adddf3>
 80047b2:	ec41 0b10 	vmov	d0, r0, r1
 80047b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80047be:	f04f 33ff 	mov.w	r3, #4294967295
 80047c2:	fa23 f707 	lsr.w	r7, r3, r7
 80047c6:	4207      	tst	r7, r0
 80047c8:	d0f3      	beq.n	80047b2 <floor+0x9a>
 80047ca:	a311      	add	r3, pc, #68	; (adr r3, 8004810 <floor+0xf8>)
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	f7fb fd20 	bl	8000214 <__adddf3>
 80047d4:	2200      	movs	r2, #0
 80047d6:	2300      	movs	r3, #0
 80047d8:	f7fc f962 	bl	8000aa0 <__aeabi_dcmpgt>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d0bf      	beq.n	8004760 <floor+0x48>
 80047e0:	2c00      	cmp	r4, #0
 80047e2:	da02      	bge.n	80047ea <floor+0xd2>
 80047e4:	2e14      	cmp	r6, #20
 80047e6:	d103      	bne.n	80047f0 <floor+0xd8>
 80047e8:	3401      	adds	r4, #1
 80047ea:	ea25 0507 	bic.w	r5, r5, r7
 80047ee:	e7b7      	b.n	8004760 <floor+0x48>
 80047f0:	2301      	movs	r3, #1
 80047f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80047f6:	fa03 f606 	lsl.w	r6, r3, r6
 80047fa:	4435      	add	r5, r6
 80047fc:	4545      	cmp	r5, r8
 80047fe:	bf38      	it	cc
 8004800:	18e4      	addcc	r4, r4, r3
 8004802:	e7f2      	b.n	80047ea <floor+0xd2>
 8004804:	2500      	movs	r5, #0
 8004806:	462c      	mov	r4, r5
 8004808:	e7aa      	b.n	8004760 <floor+0x48>
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w
 8004810:	8800759c 	.word	0x8800759c
 8004814:	7e37e43c 	.word	0x7e37e43c
 8004818:	bff00000 	.word	0xbff00000
 800481c:	000fffff 	.word	0x000fffff

08004820 <scalbn>:
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	ec55 4b10 	vmov	r4, r5, d0
 8004826:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800482a:	4606      	mov	r6, r0
 800482c:	462b      	mov	r3, r5
 800482e:	b9aa      	cbnz	r2, 800485c <scalbn+0x3c>
 8004830:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004834:	4323      	orrs	r3, r4
 8004836:	d03b      	beq.n	80048b0 <scalbn+0x90>
 8004838:	4b31      	ldr	r3, [pc, #196]	; (8004900 <scalbn+0xe0>)
 800483a:	4629      	mov	r1, r5
 800483c:	2200      	movs	r2, #0
 800483e:	ee10 0a10 	vmov	r0, s0
 8004842:	f7fb fe9d 	bl	8000580 <__aeabi_dmul>
 8004846:	4b2f      	ldr	r3, [pc, #188]	; (8004904 <scalbn+0xe4>)
 8004848:	429e      	cmp	r6, r3
 800484a:	4604      	mov	r4, r0
 800484c:	460d      	mov	r5, r1
 800484e:	da12      	bge.n	8004876 <scalbn+0x56>
 8004850:	a327      	add	r3, pc, #156	; (adr r3, 80048f0 <scalbn+0xd0>)
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	f7fb fe93 	bl	8000580 <__aeabi_dmul>
 800485a:	e009      	b.n	8004870 <scalbn+0x50>
 800485c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004860:	428a      	cmp	r2, r1
 8004862:	d10c      	bne.n	800487e <scalbn+0x5e>
 8004864:	ee10 2a10 	vmov	r2, s0
 8004868:	4620      	mov	r0, r4
 800486a:	4629      	mov	r1, r5
 800486c:	f7fb fcd2 	bl	8000214 <__adddf3>
 8004870:	4604      	mov	r4, r0
 8004872:	460d      	mov	r5, r1
 8004874:	e01c      	b.n	80048b0 <scalbn+0x90>
 8004876:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800487a:	460b      	mov	r3, r1
 800487c:	3a36      	subs	r2, #54	; 0x36
 800487e:	4432      	add	r2, r6
 8004880:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004884:	428a      	cmp	r2, r1
 8004886:	dd0b      	ble.n	80048a0 <scalbn+0x80>
 8004888:	ec45 4b11 	vmov	d1, r4, r5
 800488c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80048f8 <scalbn+0xd8>
 8004890:	f000 f83c 	bl	800490c <copysign>
 8004894:	a318      	add	r3, pc, #96	; (adr r3, 80048f8 <scalbn+0xd8>)
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	ec51 0b10 	vmov	r0, r1, d0
 800489e:	e7da      	b.n	8004856 <scalbn+0x36>
 80048a0:	2a00      	cmp	r2, #0
 80048a2:	dd08      	ble.n	80048b6 <scalbn+0x96>
 80048a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80048a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80048ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80048b0:	ec45 4b10 	vmov	d0, r4, r5
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80048ba:	da0d      	bge.n	80048d8 <scalbn+0xb8>
 80048bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80048c0:	429e      	cmp	r6, r3
 80048c2:	ec45 4b11 	vmov	d1, r4, r5
 80048c6:	dce1      	bgt.n	800488c <scalbn+0x6c>
 80048c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80048f0 <scalbn+0xd0>
 80048cc:	f000 f81e 	bl	800490c <copysign>
 80048d0:	a307      	add	r3, pc, #28	; (adr r3, 80048f0 <scalbn+0xd0>)
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	e7e0      	b.n	800489a <scalbn+0x7a>
 80048d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80048dc:	3236      	adds	r2, #54	; 0x36
 80048de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80048e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80048e6:	4620      	mov	r0, r4
 80048e8:	4629      	mov	r1, r5
 80048ea:	2200      	movs	r2, #0
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <scalbn+0xe8>)
 80048ee:	e7b2      	b.n	8004856 <scalbn+0x36>
 80048f0:	c2f8f359 	.word	0xc2f8f359
 80048f4:	01a56e1f 	.word	0x01a56e1f
 80048f8:	8800759c 	.word	0x8800759c
 80048fc:	7e37e43c 	.word	0x7e37e43c
 8004900:	43500000 	.word	0x43500000
 8004904:	ffff3cb0 	.word	0xffff3cb0
 8004908:	3c900000 	.word	0x3c900000

0800490c <copysign>:
 800490c:	ec51 0b10 	vmov	r0, r1, d0
 8004910:	ee11 0a90 	vmov	r0, s3
 8004914:	ee10 2a10 	vmov	r2, s0
 8004918:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800491c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004920:	ea41 0300 	orr.w	r3, r1, r0
 8004924:	ec43 2b10 	vmov	d0, r2, r3
 8004928:	4770      	bx	lr
	...

0800492c <_init>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	bf00      	nop
 8004930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004932:	bc08      	pop	{r3}
 8004934:	469e      	mov	lr, r3
 8004936:	4770      	bx	lr

08004938 <_fini>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	bf00      	nop
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr
