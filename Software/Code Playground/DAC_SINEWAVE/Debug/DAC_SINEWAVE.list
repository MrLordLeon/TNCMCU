
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  08007fc0  08007fc0  00017fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008720  08008720  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008720  08008720  00018720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008728  08008728  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008728  08008728  00018728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800872c  0800872c  0001872c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d30  20000078  080087a8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004da8  080087a8  00024da8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a6d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026d5  00000000  00000000  00031b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  000341f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  00035110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002306a  00000000  00000000  00035f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c294  00000000  00000000  00058f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d27c8  00000000  00000000  0006521e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001379e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004638  00000000  00000000  00137a64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fa4 	.word	0x08007fa4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08007fa4 	.word	0x08007fa4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b972 	b.w	8000ef8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	4688      	mov	r8, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14b      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	d967      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0720 	rsb	r7, r2, #32
 8000c4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c52:	4095      	lsls	r5, r2
 8000c54:	ea47 0803 	orr.w	r8, r7, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c64:	fa1f fc85 	uxth.w	ip, r5
 8000c68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c70:	fb07 f10c 	mul.w	r1, r7, ip
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18eb      	adds	r3, r5, r3
 8000c7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7e:	f080 811b 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8118 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000c88:	3f02      	subs	r7, #2
 8000c8a:	442b      	add	r3, r5
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca0:	45a4      	cmp	ip, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	192c      	adds	r4, r5, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	442c      	add	r4, r5
 8000cb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cbc:	eba4 040c 	sub.w	r4, r4, ip
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	b11e      	cbz	r6, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xbe>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80eb 	beq.w	8000eb2 <__udivmoddi4+0x286>
 8000cdc:	2700      	movs	r7, #0
 8000cde:	e9c6 0100 	strd	r0, r1, [r6]
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f783 	clz	r7, r3
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d147      	bne.n	8000d82 <__udivmoddi4+0x156>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd0>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80fa 	bhi.w	8000ef0 <__udivmoddi4+0x2c4>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	4698      	mov	r8, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xe8>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 808f 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1e:	1b49      	subs	r1, r1, r5
 8000d20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d24:	fa1f f885 	uxth.w	r8, r5
 8000d28:	2701      	movs	r7, #1
 8000d2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb08 f10c 	mul.w	r1, r8, ip
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d40:	18eb      	adds	r3, r5, r3
 8000d42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	f200 80cd 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d4e:	4684      	mov	ip, r0
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	b2a3      	uxth	r3, r4
 8000d54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d60:	fb08 f800 	mul.w	r8, r8, r0
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x14c>
 8000d68:	192c      	adds	r4, r5, r4
 8000d6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x14a>
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	f200 80b6 	bhi.w	8000ee2 <__udivmoddi4+0x2b6>
 8000d76:	4618      	mov	r0, r3
 8000d78:	eba4 0408 	sub.w	r4, r4, r8
 8000d7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d80:	e79f      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d82:	f1c7 0c20 	rsb	ip, r7, #32
 8000d86:	40bb      	lsls	r3, r7
 8000d88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d90:	fa01 f407 	lsl.w	r4, r1, r7
 8000d94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000da0:	4325      	orrs	r5, r4
 8000da2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da6:	0c2c      	lsrs	r4, r5, #16
 8000da8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dac:	fa1f fa8e 	uxth.w	sl, lr
 8000db0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db4:	fb09 f40a 	mul.w	r4, r9, sl
 8000db8:	429c      	cmp	r4, r3
 8000dba:	fa02 f207 	lsl.w	r2, r2, r7
 8000dbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	f080 8087 	bcs.w	8000ede <__udivmoddi4+0x2b2>
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	f240 8084 	bls.w	8000ede <__udivmoddi4+0x2b2>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4473      	add	r3, lr
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	b2ad      	uxth	r5, r5
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000df0:	45a2      	cmp	sl, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1e 0404 	adds.w	r4, lr, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfc:	d26b      	bcs.n	8000ed6 <__udivmoddi4+0x2aa>
 8000dfe:	45a2      	cmp	sl, r4
 8000e00:	d969      	bls.n	8000ed6 <__udivmoddi4+0x2aa>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4474      	add	r4, lr
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	eba4 040a 	sub.w	r4, r4, sl
 8000e12:	454c      	cmp	r4, r9
 8000e14:	46c2      	mov	sl, r8
 8000e16:	464b      	mov	r3, r9
 8000e18:	d354      	bcc.n	8000ec4 <__udivmoddi4+0x298>
 8000e1a:	d051      	beq.n	8000ec0 <__udivmoddi4+0x294>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d069      	beq.n	8000ef4 <__udivmoddi4+0x2c8>
 8000e20:	ebb1 050a 	subs.w	r5, r1, sl
 8000e24:	eb64 0403 	sbc.w	r4, r4, r3
 8000e28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e2c:	40fd      	lsrs	r5, r7
 8000e2e:	40fc      	lsrs	r4, r7
 8000e30:	ea4c 0505 	orr.w	r5, ip, r5
 8000e34:	e9c6 5400 	strd	r5, r4, [r6]
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e747      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f703 	lsr.w	r7, r0, r3
 8000e44:	4095      	lsls	r5, r2
 8000e46:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e52:	4338      	orrs	r0, r7
 8000e54:	0c01      	lsrs	r1, r0, #16
 8000e56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e5a:	fa1f f885 	uxth.w	r8, r5
 8000e5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb07 f308 	mul.w	r3, r7, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x256>
 8000e72:	1869      	adds	r1, r5, r1
 8000e74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e78:	d22f      	bcs.n	8000eda <__udivmoddi4+0x2ae>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d92d      	bls.n	8000eda <__udivmoddi4+0x2ae>
 8000e7e:	3f02      	subs	r7, #2
 8000e80:	4429      	add	r1, r5
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	b281      	uxth	r1, r0
 8000e86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb00 f308 	mul.w	r3, r0, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x27e>
 8000e9a:	1869      	adds	r1, r5, r1
 8000e9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ea0:	d217      	bcs.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d915      	bls.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4429      	add	r1, r5
 8000eaa:	1ac9      	subs	r1, r1, r3
 8000eac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eb0:	e73b      	b.n	8000d2a <__udivmoddi4+0xfe>
 8000eb2:	4637      	mov	r7, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e709      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb8:	4607      	mov	r7, r0
 8000eba:	e6e7      	b.n	8000c8c <__udivmoddi4+0x60>
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ec0:	4541      	cmp	r1, r8
 8000ec2:	d2ab      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ecc:	3801      	subs	r0, #1
 8000ece:	4613      	mov	r3, r2
 8000ed0:	e7a4      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	e7e9      	b.n	8000eaa <__udivmoddi4+0x27e>
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	e795      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000eda:	4667      	mov	r7, ip
 8000edc:	e7d1      	b.n	8000e82 <__udivmoddi4+0x256>
 8000ede:	4681      	mov	r9, r0
 8000ee0:	e77c      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	442c      	add	r4, r5
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0x14c>
 8000ee8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eec:	442b      	add	r3, r5
 8000eee:	e72f      	b.n	8000d50 <__udivmoddi4+0x124>
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	e708      	b.n	8000d06 <__udivmoddi4+0xda>
 8000ef4:	4637      	mov	r7, r6
 8000ef6:	e6e9      	b.n	8000ccc <__udivmoddi4+0xa0>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	80fb      	strh	r3, [r7, #6]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	717b      	strb	r3, [r7, #5]
    //sprintf(uartData, "Selector              = %d",select_8_16);
    //HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    //sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

    if(select_8_16){
 8000f0c:	797b      	ldrb	r3, [r7, #5]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d01f      	beq.n	8000f52 <conv_HEX_to_BIN+0x56>
		for(int i = 0; i < 8; i++){
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e018      	b.n	8000f4a <conv_HEX_to_BIN+0x4e>
			temp = hex_byte_in >> i;
 8000f18:	88fa      	ldrh	r2, [r7, #6]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa42 f303 	asr.w	r3, r2, r3
 8000f20:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	bfb8      	it	lt
 8000f2c:	425b      	neglt	r3, r3
 8000f2e:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	bf14      	ite	ne
 8000f3c:	2201      	movne	r2, #1
 8000f3e:	2200      	moveq	r2, #0
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3301      	adds	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	dde3      	ble.n	8000f18 <conv_HEX_to_BIN+0x1c>
		//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000f50:	e01e      	b.n	8000f90 <conv_HEX_to_BIN+0x94>
		for(int i = 0; i < 16; i++){
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	e018      	b.n	8000f8a <conv_HEX_to_BIN+0x8e>
			temp = hex_byte_in >> i;
 8000f58:	88fa      	ldrh	r2, [r7, #6]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	fa42 f303 	asr.w	r3, r2, r3
 8000f60:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	bfb8      	it	lt
 8000f6c:	425b      	neglt	r3, r3
 8000f6e:	60fb      	str	r3, [r7, #12]
			*(bin_byte_out+i) = temp;
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	bf14      	ite	ne
 8000f7c:	2201      	movne	r2, #1
 8000f7e:	2200      	moveq	r2, #0
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	3301      	adds	r3, #1
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	dde3      	ble.n	8000f58 <conv_HEX_to_BIN+0x5c>
}
 8000f90:	bf00      	nop
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4909      	ldr	r1, [pc, #36]	; (8000fc8 <init_AX25+0x2c>)
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <init_AX25+0x30>)
 8000fa6:	f004 fd5f 	bl	8005a68 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <init_AX25+0x34>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <init_AX25+0x34>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <init_AX25+0x34>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <init_AX25+0x34>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20001418 	.word	0x20001418
 8000fcc:	20003d60 	.word	0x20003d60
 8000fd0:	2000140c 	.word	0x2000140c

08000fd4 <tx_rx>:

void tx_rx() {
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
	if (changeMode) {
 8000fda:	4b57      	ldr	r3, [pc, #348]	; (8001138 <tx_rx+0x164>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d004      	beq.n	8000fec <tx_rx+0x18>
		changeMode = 0;
 8000fe2:	4b55      	ldr	r3, [pc, #340]	; (8001138 <tx_rx+0x164>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
		toggleMode();
 8000fe8:	f001 f81c 	bl	8002024 <toggleMode>
	}

	if (mode) {
 8000fec:	4b53      	ldr	r3, [pc, #332]	; (800113c <tx_rx+0x168>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d07e      	beq.n	80010f2 <tx_rx+0x11e>
		bool packet_received = false;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	71fb      	strb	r3, [r7, #7]
		bool packet_converted = false;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]

		//Run receiving KISS
		packet_received = receiving_KISS();
 8000ffc:	f000 fe5c 	bl	8001cb8 <receiving_KISS>
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]

		if(packet_received){
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <tx_rx+0x3e>
			//Convert KISS packet to AX.25 packet
			packet_converted = KISS_TO_AX25();
 800100a:	f000 ff87 	bl	8001f1c <KISS_TO_AX25>
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]
			//Upon exit, have a perfectly good AX.25 packet
		}

		//Output AFSK waveform for radio
		if(packet_converted) {
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <tx_rx+0x48>
			output_AX25();
 8001018:	f000 f89e 	bl	8001158 <output_AX25>
//			print_AX25();
		}
		clear_AX25();
 800101c:	f000 fe16 	bl	8001c4c <clear_AX25>

		//Packet was not received properly
		if(!packet_received){
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f083 0301 	eor.w	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d019      	beq.n	8001060 <tx_rx+0x8c>
			sprintf(uartData, "Error receiving KISS packet\n");
 800102c:	4a44      	ldr	r2, [pc, #272]	; (8001140 <tx_rx+0x16c>)
 800102e:	4b45      	ldr	r3, [pc, #276]	; (8001144 <tx_rx+0x170>)
 8001030:	4615      	mov	r5, r2
 8001032:	461c      	mov	r4, r3
 8001034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001036:	6028      	str	r0, [r5, #0]
 8001038:	6069      	str	r1, [r5, #4]
 800103a:	60aa      	str	r2, [r5, #8]
 800103c:	60eb      	str	r3, [r5, #12]
 800103e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001040:	6128      	str	r0, [r5, #16]
 8001042:	6169      	str	r1, [r5, #20]
 8001044:	61aa      	str	r2, [r5, #24]
 8001046:	7823      	ldrb	r3, [r4, #0]
 8001048:	772b      	strb	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800104a:	483d      	ldr	r0, [pc, #244]	; (8001140 <tx_rx+0x16c>)
 800104c:	f7ff f8e0 	bl	8000210 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	b29a      	uxth	r2, r3
 8001054:	230a      	movs	r3, #10
 8001056:	493a      	ldr	r1, [pc, #232]	; (8001140 <tx_rx+0x16c>)
 8001058:	483b      	ldr	r0, [pc, #236]	; (8001148 <tx_rx+0x174>)
 800105a:	f004 fc6c 	bl	8005936 <HAL_UART_Transmit>
 800105e:	e044      	b.n	80010ea <tx_rx+0x116>
		}
		//Packet was not converted properly
		else if(!packet_converted){
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	f083 0301 	eor.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d019      	beq.n	80010a0 <tx_rx+0xcc>
			sprintf(uartData, "Error converting KISS packet\n");
 800106c:	4a34      	ldr	r2, [pc, #208]	; (8001140 <tx_rx+0x16c>)
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <tx_rx+0x178>)
 8001070:	4615      	mov	r5, r2
 8001072:	461c      	mov	r4, r3
 8001074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001076:	6028      	str	r0, [r5, #0]
 8001078:	6069      	str	r1, [r5, #4]
 800107a:	60aa      	str	r2, [r5, #8]
 800107c:	60eb      	str	r3, [r5, #12]
 800107e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001080:	6128      	str	r0, [r5, #16]
 8001082:	6169      	str	r1, [r5, #20]
 8001084:	61aa      	str	r2, [r5, #24]
 8001086:	8823      	ldrh	r3, [r4, #0]
 8001088:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800108a:	482d      	ldr	r0, [pc, #180]	; (8001140 <tx_rx+0x16c>)
 800108c:	f7ff f8c0 	bl	8000210 <strlen>
 8001090:	4603      	mov	r3, r0
 8001092:	b29a      	uxth	r2, r3
 8001094:	230a      	movs	r3, #10
 8001096:	492a      	ldr	r1, [pc, #168]	; (8001140 <tx_rx+0x16c>)
 8001098:	482b      	ldr	r0, [pc, #172]	; (8001148 <tx_rx+0x174>)
 800109a:	f004 fc4c 	bl	8005936 <HAL_UART_Transmit>
 800109e:	e024      	b.n	80010ea <tx_rx+0x116>
		}
		//Successful transmission!
		else {
			sprintf(uartData, "KISS packet received, converted, and transmitted to radio\n");
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <tx_rx+0x16c>)
 80010a2:	4a2b      	ldr	r2, [pc, #172]	; (8001150 <tx_rx+0x17c>)
 80010a4:	4614      	mov	r4, r2
 80010a6:	469c      	mov	ip, r3
 80010a8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010ac:	4665      	mov	r5, ip
 80010ae:	4626      	mov	r6, r4
 80010b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010b2:	6028      	str	r0, [r5, #0]
 80010b4:	6069      	str	r1, [r5, #4]
 80010b6:	60aa      	str	r2, [r5, #8]
 80010b8:	60eb      	str	r3, [r5, #12]
 80010ba:	3410      	adds	r4, #16
 80010bc:	f10c 0c10 	add.w	ip, ip, #16
 80010c0:	4574      	cmp	r4, lr
 80010c2:	d1f3      	bne.n	80010ac <tx_rx+0xd8>
 80010c4:	4662      	mov	r2, ip
 80010c6:	4623      	mov	r3, r4
 80010c8:	cb03      	ldmia	r3!, {r0, r1}
 80010ca:	6010      	str	r0, [r2, #0]
 80010cc:	6051      	str	r1, [r2, #4]
 80010ce:	8819      	ldrh	r1, [r3, #0]
 80010d0:	789b      	ldrb	r3, [r3, #2]
 80010d2:	8111      	strh	r1, [r2, #8]
 80010d4:	7293      	strb	r3, [r2, #10]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80010d6:	481a      	ldr	r0, [pc, #104]	; (8001140 <tx_rx+0x16c>)
 80010d8:	f7ff f89a 	bl	8000210 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29a      	uxth	r2, r3
 80010e0:	230a      	movs	r3, #10
 80010e2:	4917      	ldr	r1, [pc, #92]	; (8001140 <tx_rx+0x16c>)
 80010e4:	4818      	ldr	r0, [pc, #96]	; (8001148 <tx_rx+0x174>)
 80010e6:	f004 fc26 	bl	8005936 <HAL_UART_Transmit>
		}

		changeMode = true;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <tx_rx+0x164>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]

			streamGet();
		}
		HAL_Delay(1000);
	}
}
 80010f0:	e01d      	b.n	800112e <tx_rx+0x15a>
		for(int i = 0;i<10;i++){
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	e013      	b.n	8001120 <tx_rx+0x14c>
			sprintf(uartData, "Running streamGet() %d time\r\n",i);
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	4916      	ldr	r1, [pc, #88]	; (8001154 <tx_rx+0x180>)
 80010fc:	4810      	ldr	r0, [pc, #64]	; (8001140 <tx_rx+0x16c>)
 80010fe:	f005 fb43 	bl	8006788 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001102:	480f      	ldr	r0, [pc, #60]	; (8001140 <tx_rx+0x16c>)
 8001104:	f7ff f884 	bl	8000210 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	b29a      	uxth	r2, r3
 800110c:	230a      	movs	r3, #10
 800110e:	490c      	ldr	r1, [pc, #48]	; (8001140 <tx_rx+0x16c>)
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <tx_rx+0x174>)
 8001112:	f004 fc10 	bl	8005936 <HAL_UART_Transmit>
			streamGet();
 8001116:	f001 fb0b 	bl	8002730 <streamGet>
		for(int i = 0;i<10;i++){
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3301      	adds	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b09      	cmp	r3, #9
 8001124:	dde8      	ble.n	80010f8 <tx_rx+0x124>
		HAL_Delay(1000);
 8001126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112a:	f002 f925 	bl	8003378 <HAL_Delay>
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001136:	bf00      	nop
 8001138:	20000099 	.word	0x20000099
 800113c:	20003d08 	.word	0x20003d08
 8001140:	20001f3c 	.word	0x20001f3c
 8001144:	08007fc0 	.word	0x08007fc0
 8001148:	20003d60 	.word	0x20003d60
 800114c:	08007fe0 	.word	0x08007fe0
 8001150:	08008000 	.word	0x08008000
 8001154:	0800803c 	.word	0x0800803c

08001158 <output_AX25>:
		}
	}
	return true;
}

void output_AX25(){
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <output_AX25+0xf4>)
 8001160:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Beginning AFSK transmission\n");
 8001162:	4a3b      	ldr	r2, [pc, #236]	; (8001250 <output_AX25+0xf8>)
 8001164:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <output_AX25+0xfc>)
 8001166:	4615      	mov	r5, r2
 8001168:	461c      	mov	r4, r3
 800116a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116c:	6028      	str	r0, [r5, #0]
 800116e:	6069      	str	r1, [r5, #4]
 8001170:	60aa      	str	r2, [r5, #8]
 8001172:	60eb      	str	r3, [r5, #12]
 8001174:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001176:	6128      	str	r0, [r5, #16]
 8001178:	6169      	str	r1, [r5, #20]
 800117a:	61aa      	str	r2, [r5, #24]
 800117c:	7823      	ldrb	r3, [r4, #0]
 800117e:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001180:	4833      	ldr	r0, [pc, #204]	; (8001250 <output_AX25+0xf8>)
 8001182:	f7ff f845 	bl	8000210 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b29a      	uxth	r2, r3
 800118a:	230a      	movs	r3, #10
 800118c:	4930      	ldr	r1, [pc, #192]	; (8001250 <output_AX25+0xf8>)
 800118e:	4832      	ldr	r0, [pc, #200]	; (8001258 <output_AX25+0x100>)
 8001190:	f004 fbd1 	bl	8005936 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_SET); //START PTT
 8001194:	2201      	movs	r2, #1
 8001196:	2110      	movs	r1, #16
 8001198:	4830      	ldr	r0, [pc, #192]	; (800125c <output_AX25+0x104>)
 800119a:	f003 f9e9 	bl	8004570 <HAL_GPIO_WritePin>

	bitToAudio(AX25TBYTE, FLAG_SIZE,1); //start flag
 800119e:	2201      	movs	r2, #1
 80011a0:	2108      	movs	r1, #8
 80011a2:	482f      	ldr	r0, [pc, #188]	; (8001260 <output_AX25+0x108>)
 80011a4:	f001 f884 	bl	80022b0 <bitToAudio>

	bitToAudio(local_packet->address, address_len,1); //lsb first
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011ae:	3310      	adds	r3, #16
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2201      	movs	r2, #1
 80011b4:	2170      	movs	r1, #112	; 0x70
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 f87a 	bl	80022b0 <bitToAudio>
	bitToAudio(local_packet->control,control_len,1);	//lsb first
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011c2:	3314      	adds	r3, #20
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2201      	movs	r2, #1
 80011c8:	2108      	movs	r1, #8
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 f870 	bl	80022b0 <bitToAudio>
	bitToAudio(local_packet->PID,PID_len,1);			//lsb first
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011d6:	3318      	adds	r3, #24
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2201      	movs	r2, #1
 80011dc:	2108      	movs	r1, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 f866 	bl	80022b0 <bitToAudio>
	bitToAudio(local_packet->Info,local_packet->Info_Len,1);		//lsb first
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011ea:	331c      	adds	r3, #28
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2201      	movs	r2, #1
 80011f8:	4619      	mov	r1, r3
 80011fa:	f001 f859 	bl	80022b0 <bitToAudio>
	//bitToAudio(local_packet->FCS,FCS_len + local_packet->stuffed_FCS,0);			//msb first

	bitToAudio(AX25TBYTE, FLAG_SIZE,1);//stop flag
 80011fe:	2201      	movs	r2, #1
 8001200:	2108      	movs	r1, #8
 8001202:	4817      	ldr	r0, [pc, #92]	; (8001260 <output_AX25+0x108>)
 8001204:	f001 f854 	bl	80022b0 <bitToAudio>

	HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET); //stop transmitting
 8001208:	2200      	movs	r2, #0
 800120a:	2110      	movs	r1, #16
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <output_AX25+0x104>)
 800120e:	f003 f9af 	bl	8004570 <HAL_GPIO_WritePin>

	sprintf(uartData, "Ending AFSK transmission\n");
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <output_AX25+0xf8>)
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <output_AX25+0x10c>)
 8001216:	4615      	mov	r5, r2
 8001218:	461c      	mov	r4, r3
 800121a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121c:	6028      	str	r0, [r5, #0]
 800121e:	6069      	str	r1, [r5, #4]
 8001220:	60aa      	str	r2, [r5, #8]
 8001222:	60eb      	str	r3, [r5, #12]
 8001224:	cc03      	ldmia	r4!, {r0, r1}
 8001226:	6128      	str	r0, [r5, #16]
 8001228:	6169      	str	r1, [r5, #20]
 800122a:	8823      	ldrh	r3, [r4, #0]
 800122c:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800122e:	4808      	ldr	r0, [pc, #32]	; (8001250 <output_AX25+0xf8>)
 8001230:	f7fe ffee 	bl	8000210 <strlen>
 8001234:	4603      	mov	r3, r0
 8001236:	b29a      	uxth	r2, r3
 8001238:	230a      	movs	r3, #10
 800123a:	4905      	ldr	r1, [pc, #20]	; (8001250 <output_AX25+0xf8>)
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <output_AX25+0x100>)
 800123e:	f004 fb7a 	bl	8005936 <HAL_UART_Transmit>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bdb0      	pop	{r4, r5, r7, pc}
 800124a:	bf00      	nop
 800124c:	200000b0 	.word	0x200000b0
 8001250:	20001f3c 	.word	0x20001f3c
 8001254:	0800805c 	.word	0x0800805c
 8001258:	20003d60 	.word	0x20003d60
 800125c:	40020800 	.word	0x40020800
 8001260:	20000000 	.word	0x20000000
 8001264:	0800807c 	.word	0x0800807c

08001268 <print_AX25>:
void print_AX25(){
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126a:	b08b      	sub	sp, #44	; 0x2c
 800126c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800126e:	4b93      	ldr	r3, [pc, #588]	; (80014bc <print_AX25+0x254>)
 8001270:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001278:	330c      	adds	r3, #12
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 800127e:	4b90      	ldr	r3, [pc, #576]	; (80014c0 <print_AX25+0x258>)
 8001280:	4a90      	ldr	r2, [pc, #576]	; (80014c4 <print_AX25+0x25c>)
 8001282:	4614      	mov	r4, r2
 8001284:	469c      	mov	ip, r3
 8001286:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800128a:	4665      	mov	r5, ip
 800128c:	4626      	mov	r6, r4
 800128e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001290:	6028      	str	r0, [r5, #0]
 8001292:	6069      	str	r1, [r5, #4]
 8001294:	60aa      	str	r2, [r5, #8]
 8001296:	60eb      	str	r3, [r5, #12]
 8001298:	3410      	adds	r4, #16
 800129a:	f10c 0c10 	add.w	ip, ip, #16
 800129e:	4574      	cmp	r4, lr
 80012a0:	d1f3      	bne.n	800128a <print_AX25+0x22>
 80012a2:	4663      	mov	r3, ip
 80012a4:	4622      	mov	r2, r4
 80012a6:	6810      	ldr	r0, [r2, #0]
 80012a8:	6018      	str	r0, [r3, #0]
 80012aa:	8891      	ldrh	r1, [r2, #4]
 80012ac:	7992      	ldrb	r2, [r2, #6]
 80012ae:	8099      	strh	r1, [r3, #4]
 80012b0:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012b2:	4883      	ldr	r0, [pc, #524]	; (80014c0 <print_AX25+0x258>)
 80012b4:	f7fe ffac 	bl	8000210 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	230a      	movs	r3, #10
 80012be:	4980      	ldr	r1, [pc, #512]	; (80014c0 <print_AX25+0x258>)
 80012c0:	4881      	ldr	r0, [pc, #516]	; (80014c8 <print_AX25+0x260>)
 80012c2:	f004 fb38 	bl	8005936 <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->address);
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80012cc:	3310      	adds	r3, #16
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<address_len/8;i++){
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
 80012d6:	e042      	b.n	800135e <print_AX25+0xf6>
		sprintf(uartData, "Address Field %d =",i+1);
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	3301      	adds	r3, #1
 80012dc:	461a      	mov	r2, r3
 80012de:	497b      	ldr	r1, [pc, #492]	; (80014cc <print_AX25+0x264>)
 80012e0:	4877      	ldr	r0, [pc, #476]	; (80014c0 <print_AX25+0x258>)
 80012e2:	f005 fa51 	bl	8006788 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012e6:	4876      	ldr	r0, [pc, #472]	; (80014c0 <print_AX25+0x258>)
 80012e8:	f7fe ff92 	bl	8000210 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	230a      	movs	r3, #10
 80012f2:	4973      	ldr	r1, [pc, #460]	; (80014c0 <print_AX25+0x258>)
 80012f4:	4874      	ldr	r0, [pc, #464]	; (80014c8 <print_AX25+0x260>)
 80012f6:	f004 fb1e 	bl	8005936 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e017      	b.n	8001330 <print_AX25+0xc8>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4970      	ldr	r1, [pc, #448]	; (80014d0 <print_AX25+0x268>)
 8001310:	486b      	ldr	r0, [pc, #428]	; (80014c0 <print_AX25+0x258>)
 8001312:	f005 fa39 	bl	8006788 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001316:	486a      	ldr	r0, [pc, #424]	; (80014c0 <print_AX25+0x258>)
 8001318:	f7fe ff7a 	bl	8000210 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	230a      	movs	r3, #10
 8001322:	4967      	ldr	r1, [pc, #412]	; (80014c0 <print_AX25+0x258>)
 8001324:	4868      	ldr	r0, [pc, #416]	; (80014c8 <print_AX25+0x260>)
 8001326:	f004 fb06 	bl	8005936 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b07      	cmp	r3, #7
 8001334:	dde4      	ble.n	8001300 <print_AX25+0x98>
		}
		curr_mem += 8;
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	3308      	adds	r3, #8
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(uartData, "\n");
 800133c:	4a60      	ldr	r2, [pc, #384]	; (80014c0 <print_AX25+0x258>)
 800133e:	4b65      	ldr	r3, [pc, #404]	; (80014d4 <print_AX25+0x26c>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001344:	485e      	ldr	r0, [pc, #376]	; (80014c0 <print_AX25+0x258>)
 8001346:	f7fe ff63 	bl	8000210 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	b29a      	uxth	r2, r3
 800134e:	230a      	movs	r3, #10
 8001350:	495b      	ldr	r1, [pc, #364]	; (80014c0 <print_AX25+0x258>)
 8001352:	485d      	ldr	r0, [pc, #372]	; (80014c8 <print_AX25+0x260>)
 8001354:	f004 faef 	bl	8005936 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	3301      	adds	r3, #1
 800135c:	623b      	str	r3, [r7, #32]
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	2b0d      	cmp	r3, #13
 8001362:	ddb9      	ble.n	80012d8 <print_AX25+0x70>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800136a:	3314      	adds	r3, #20
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(uartData, "Control Field   =");
 8001370:	4a53      	ldr	r2, [pc, #332]	; (80014c0 <print_AX25+0x258>)
 8001372:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <print_AX25+0x270>)
 8001374:	4615      	mov	r5, r2
 8001376:	461c      	mov	r4, r3
 8001378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137a:	6028      	str	r0, [r5, #0]
 800137c:	6069      	str	r1, [r5, #4]
 800137e:	60aa      	str	r2, [r5, #8]
 8001380:	60eb      	str	r3, [r5, #12]
 8001382:	8823      	ldrh	r3, [r4, #0]
 8001384:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001386:	484e      	ldr	r0, [pc, #312]	; (80014c0 <print_AX25+0x258>)
 8001388:	f7fe ff42 	bl	8000210 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	230a      	movs	r3, #10
 8001392:	494b      	ldr	r1, [pc, #300]	; (80014c0 <print_AX25+0x258>)
 8001394:	484c      	ldr	r0, [pc, #304]	; (80014c8 <print_AX25+0x260>)
 8001396:	f004 face 	bl	8005936 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	e017      	b.n	80013d0 <print_AX25+0x168>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4948      	ldr	r1, [pc, #288]	; (80014d0 <print_AX25+0x268>)
 80013b0:	4843      	ldr	r0, [pc, #268]	; (80014c0 <print_AX25+0x258>)
 80013b2:	f005 f9e9 	bl	8006788 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013b6:	4842      	ldr	r0, [pc, #264]	; (80014c0 <print_AX25+0x258>)
 80013b8:	f7fe ff2a 	bl	8000210 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	230a      	movs	r3, #10
 80013c2:	493f      	ldr	r1, [pc, #252]	; (80014c0 <print_AX25+0x258>)
 80013c4:	4840      	ldr	r0, [pc, #256]	; (80014c8 <print_AX25+0x260>)
 80013c6:	f004 fab6 	bl	8005936 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	3301      	adds	r3, #1
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2b07      	cmp	r3, #7
 80013d4:	dde4      	ble.n	80013a0 <print_AX25+0x138>
	}
	sprintf(uartData, "\n");
 80013d6:	4a3a      	ldr	r2, [pc, #232]	; (80014c0 <print_AX25+0x258>)
 80013d8:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <print_AX25+0x26c>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80013de:	4838      	ldr	r0, [pc, #224]	; (80014c0 <print_AX25+0x258>)
 80013e0:	f7fe ff16 	bl	8000210 <strlen>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	230a      	movs	r3, #10
 80013ea:	4935      	ldr	r1, [pc, #212]	; (80014c0 <print_AX25+0x258>)
 80013ec:	4836      	ldr	r0, [pc, #216]	; (80014c8 <print_AX25+0x260>)
 80013ee:	f004 faa2 	bl	8005936 <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80013f8:	3318      	adds	r3, #24
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(uartData, "PID Field       =");
 80013fe:	4a30      	ldr	r2, [pc, #192]	; (80014c0 <print_AX25+0x258>)
 8001400:	4b36      	ldr	r3, [pc, #216]	; (80014dc <print_AX25+0x274>)
 8001402:	4615      	mov	r5, r2
 8001404:	461c      	mov	r4, r3
 8001406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001408:	6028      	str	r0, [r5, #0]
 800140a:	6069      	str	r1, [r5, #4]
 800140c:	60aa      	str	r2, [r5, #8]
 800140e:	60eb      	str	r3, [r5, #12]
 8001410:	8823      	ldrh	r3, [r4, #0]
 8001412:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001414:	482a      	ldr	r0, [pc, #168]	; (80014c0 <print_AX25+0x258>)
 8001416:	f7fe fefb 	bl	8000210 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	230a      	movs	r3, #10
 8001420:	4927      	ldr	r1, [pc, #156]	; (80014c0 <print_AX25+0x258>)
 8001422:	4829      	ldr	r0, [pc, #164]	; (80014c8 <print_AX25+0x260>)
 8001424:	f004 fa87 	bl	8005936 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e017      	b.n	800145e <print_AX25+0x1f6>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f1c3 0307 	rsb	r3, r3, #7
 8001434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	4924      	ldr	r1, [pc, #144]	; (80014d0 <print_AX25+0x268>)
 800143e:	4820      	ldr	r0, [pc, #128]	; (80014c0 <print_AX25+0x258>)
 8001440:	f005 f9a2 	bl	8006788 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001444:	481e      	ldr	r0, [pc, #120]	; (80014c0 <print_AX25+0x258>)
 8001446:	f7fe fee3 	bl	8000210 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	b29a      	uxth	r2, r3
 800144e:	230a      	movs	r3, #10
 8001450:	491b      	ldr	r1, [pc, #108]	; (80014c0 <print_AX25+0x258>)
 8001452:	481d      	ldr	r0, [pc, #116]	; (80014c8 <print_AX25+0x260>)
 8001454:	f004 fa6f 	bl	8005936 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3301      	adds	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2b07      	cmp	r3, #7
 8001462:	dde4      	ble.n	800142e <print_AX25+0x1c6>
	}
	sprintf(uartData, "\n");
 8001464:	4a16      	ldr	r2, [pc, #88]	; (80014c0 <print_AX25+0x258>)
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <print_AX25+0x26c>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800146c:	4814      	ldr	r0, [pc, #80]	; (80014c0 <print_AX25+0x258>)
 800146e:	f7fe fecf 	bl	8000210 <strlen>
 8001472:	4603      	mov	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	230a      	movs	r3, #10
 8001478:	4911      	ldr	r1, [pc, #68]	; (80014c0 <print_AX25+0x258>)
 800147a:	4813      	ldr	r0, [pc, #76]	; (80014c8 <print_AX25+0x260>)
 800147c:	f004 fa5b 	bl	8005936 <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001486:	331c      	adds	r3, #28
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	e057      	b.n	8001542 <print_AX25+0x2da>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	3301      	adds	r3, #1
 8001496:	461a      	mov	r2, r3
 8001498:	4911      	ldr	r1, [pc, #68]	; (80014e0 <print_AX25+0x278>)
 800149a:	4809      	ldr	r0, [pc, #36]	; (80014c0 <print_AX25+0x258>)
 800149c:	f005 f974 	bl	8006788 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <print_AX25+0x258>)
 80014a2:	f7fe feb5 	bl	8000210 <strlen>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	230a      	movs	r3, #10
 80014ac:	4904      	ldr	r1, [pc, #16]	; (80014c0 <print_AX25+0x258>)
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <print_AX25+0x260>)
 80014b0:	f004 fa41 	bl	8005936 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e02c      	b.n	8001514 <print_AX25+0x2ac>
 80014ba:	bf00      	nop
 80014bc:	200000b0 	.word	0x200000b0
 80014c0:	20001f3c 	.word	0x20001f3c
 80014c4:	08008098 	.word	0x08008098
 80014c8:	20003d60 	.word	0x20003d60
 80014cc:	080080d0 	.word	0x080080d0
 80014d0:	080080e4 	.word	0x080080e4
 80014d4:	080080ec 	.word	0x080080ec
 80014d8:	080080f0 	.word	0x080080f0
 80014dc:	08008104 	.word	0x08008104
 80014e0:	08008118 	.word	0x08008118
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ec:	4413      	add	r3, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4923      	ldr	r1, [pc, #140]	; (8001580 <print_AX25+0x318>)
 80014f4:	4823      	ldr	r0, [pc, #140]	; (8001584 <print_AX25+0x31c>)
 80014f6:	f005 f947 	bl	8006788 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80014fa:	4822      	ldr	r0, [pc, #136]	; (8001584 <print_AX25+0x31c>)
 80014fc:	f7fe fe88 	bl	8000210 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	230a      	movs	r3, #10
 8001506:	491f      	ldr	r1, [pc, #124]	; (8001584 <print_AX25+0x31c>)
 8001508:	481f      	ldr	r0, [pc, #124]	; (8001588 <print_AX25+0x320>)
 800150a:	f004 fa14 	bl	8005936 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3301      	adds	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b07      	cmp	r3, #7
 8001518:	dde4      	ble.n	80014e4 <print_AX25+0x27c>
		}
		curr_mem += 8;
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	3308      	adds	r3, #8
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(uartData, "\n");
 8001520:	4a18      	ldr	r2, [pc, #96]	; (8001584 <print_AX25+0x31c>)
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <print_AX25+0x324>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001528:	4816      	ldr	r0, [pc, #88]	; (8001584 <print_AX25+0x31c>)
 800152a:	f7fe fe71 	bl	8000210 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	230a      	movs	r3, #10
 8001534:	4913      	ldr	r1, [pc, #76]	; (8001584 <print_AX25+0x31c>)
 8001536:	4814      	ldr	r0, [pc, #80]	; (8001588 <print_AX25+0x320>)
 8001538:	f004 f9fd 	bl	8005936 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	3301      	adds	r3, #1
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	da00      	bge.n	8001550 <print_AX25+0x2e8>
 800154e:	3307      	adds	r3, #7
 8001550:	10db      	asrs	r3, r3, #3
 8001552:	461a      	mov	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4293      	cmp	r3, r2
 8001558:	db9b      	blt.n	8001492 <print_AX25+0x22a>
//		}
//		curr_mem += 8;
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
//	}
	sprintf(uartData, "\n");
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <print_AX25+0x31c>)
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <print_AX25+0x324>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001562:	4808      	ldr	r0, [pc, #32]	; (8001584 <print_AX25+0x31c>)
 8001564:	f7fe fe54 	bl	8000210 <strlen>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	230a      	movs	r3, #10
 800156e:	4905      	ldr	r1, [pc, #20]	; (8001584 <print_AX25+0x31c>)
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <print_AX25+0x320>)
 8001572:	f004 f9e0 	bl	8005936 <HAL_UART_Transmit>
}
 8001576:	bf00      	nop
 8001578:	372c      	adds	r7, #44	; 0x2c
 800157a:	46bd      	mov	sp, r7
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157e:	bf00      	nop
 8001580:	080080e4 	.word	0x080080e4
 8001584:	20001f3c 	.word	0x20001f3c
 8001588:	20003d60 	.word	0x20003d60
 800158c:	080080ec 	.word	0x080080ec

08001590 <print_KISS>:
	struct UART_INPUT* local_UART_packet = &global_packet;

	HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}

void print_KISS(){
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	b08d      	sub	sp, #52	; 0x34
 8001594:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001596:	4bad      	ldr	r3, [pc, #692]	; (800184c <print_KISS+0x2bc>)
 8001598:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80015a0:	330c      	adds	r3, #12
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 80015a6:	4baa      	ldr	r3, [pc, #680]	; (8001850 <print_KISS+0x2c0>)
 80015a8:	4aaa      	ldr	r2, [pc, #680]	; (8001854 <print_KISS+0x2c4>)
 80015aa:	4614      	mov	r4, r2
 80015ac:	469c      	mov	ip, r3
 80015ae:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80015b2:	4665      	mov	r5, ip
 80015b4:	4626      	mov	r6, r4
 80015b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80015b8:	6028      	str	r0, [r5, #0]
 80015ba:	6069      	str	r1, [r5, #4]
 80015bc:	60aa      	str	r2, [r5, #8]
 80015be:	60eb      	str	r3, [r5, #12]
 80015c0:	3410      	adds	r4, #16
 80015c2:	f10c 0c10 	add.w	ip, ip, #16
 80015c6:	4574      	cmp	r4, lr
 80015c8:	d1f3      	bne.n	80015b2 <print_KISS+0x22>
 80015ca:	4663      	mov	r3, ip
 80015cc:	4622      	mov	r2, r4
 80015ce:	6810      	ldr	r0, [r2, #0]
 80015d0:	6018      	str	r0, [r3, #0]
 80015d2:	8891      	ldrh	r1, [r2, #4]
 80015d4:	7992      	ldrb	r2, [r2, #6]
 80015d6:	8099      	strh	r1, [r3, #4]
 80015d8:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015da:	489d      	ldr	r0, [pc, #628]	; (8001850 <print_KISS+0x2c0>)
 80015dc:	f7fe fe18 	bl	8000210 <strlen>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	230a      	movs	r3, #10
 80015e6:	499a      	ldr	r1, [pc, #616]	; (8001850 <print_KISS+0x2c0>)
 80015e8:	489b      	ldr	r0, [pc, #620]	; (8001858 <print_KISS+0x2c8>)
 80015ea:	f004 f9a4 	bl	8005936 <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address-16);//Subtract 16 to start at the flag start
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80015f4:	3310      	adds	r3, #16
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3b10      	subs	r3, #16
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 80015fc:	4a94      	ldr	r2, [pc, #592]	; (8001850 <print_KISS+0x2c0>)
 80015fe:	4b97      	ldr	r3, [pc, #604]	; (800185c <print_KISS+0x2cc>)
 8001600:	4615      	mov	r5, r2
 8001602:	461c      	mov	r4, r3
 8001604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001606:	6028      	str	r0, [r5, #0]
 8001608:	6069      	str	r1, [r5, #4]
 800160a:	60aa      	str	r2, [r5, #8]
 800160c:	60eb      	str	r3, [r5, #12]
 800160e:	8823      	ldrh	r3, [r4, #0]
 8001610:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001612:	488f      	ldr	r0, [pc, #572]	; (8001850 <print_KISS+0x2c0>)
 8001614:	f7fe fdfc 	bl	8000210 <strlen>
 8001618:	4603      	mov	r3, r0
 800161a:	b29a      	uxth	r2, r3
 800161c:	230a      	movs	r3, #10
 800161e:	498c      	ldr	r1, [pc, #560]	; (8001850 <print_KISS+0x2c0>)
 8001620:	488d      	ldr	r0, [pc, #564]	; (8001858 <print_KISS+0x2c8>)
 8001622:	f004 f988 	bl	8005936 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
 800162a:	e017      	b.n	800165c <print_KISS+0xcc>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001634:	4413      	add	r3, r2
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4989      	ldr	r1, [pc, #548]	; (8001860 <print_KISS+0x2d0>)
 800163c:	4884      	ldr	r0, [pc, #528]	; (8001850 <print_KISS+0x2c0>)
 800163e:	f005 f8a3 	bl	8006788 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001642:	4883      	ldr	r0, [pc, #524]	; (8001850 <print_KISS+0x2c0>)
 8001644:	f7fe fde4 	bl	8000210 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	b29a      	uxth	r2, r3
 800164c:	230a      	movs	r3, #10
 800164e:	4980      	ldr	r1, [pc, #512]	; (8001850 <print_KISS+0x2c0>)
 8001650:	4881      	ldr	r0, [pc, #516]	; (8001858 <print_KISS+0x2c8>)
 8001652:	f004 f970 	bl	8005936 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	3301      	adds	r3, #1
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
 800165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165e:	2b07      	cmp	r3, #7
 8001660:	dde4      	ble.n	800162c <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 8001662:	4a7b      	ldr	r2, [pc, #492]	; (8001850 <print_KISS+0x2c0>)
 8001664:	4b7f      	ldr	r3, [pc, #508]	; (8001864 <print_KISS+0x2d4>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800166a:	4879      	ldr	r0, [pc, #484]	; (8001850 <print_KISS+0x2c0>)
 800166c:	f7fe fdd0 	bl	8000210 <strlen>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	230a      	movs	r3, #10
 8001676:	4976      	ldr	r1, [pc, #472]	; (8001850 <print_KISS+0x2c0>)
 8001678:	4877      	ldr	r0, [pc, #476]	; (8001858 <print_KISS+0x2c8>)
 800167a:	f004 f95c 	bl	8005936 <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->address);
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001684:	3310      	adds	r3, #16
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	e042      	b.n	8001716 <print_KISS+0x186>
		sprintf(uartData, "Address Field %d =",i+1);
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	3301      	adds	r3, #1
 8001694:	461a      	mov	r2, r3
 8001696:	4974      	ldr	r1, [pc, #464]	; (8001868 <print_KISS+0x2d8>)
 8001698:	486d      	ldr	r0, [pc, #436]	; (8001850 <print_KISS+0x2c0>)
 800169a:	f005 f875 	bl	8006788 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800169e:	486c      	ldr	r0, [pc, #432]	; (8001850 <print_KISS+0x2c0>)
 80016a0:	f7fe fdb6 	bl	8000210 <strlen>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	230a      	movs	r3, #10
 80016aa:	4969      	ldr	r1, [pc, #420]	; (8001850 <print_KISS+0x2c0>)
 80016ac:	486a      	ldr	r0, [pc, #424]	; (8001858 <print_KISS+0x2c8>)
 80016ae:	f004 f942 	bl	8005936 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
 80016b6:	e017      	b.n	80016e8 <print_KISS+0x158>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4966      	ldr	r1, [pc, #408]	; (8001860 <print_KISS+0x2d0>)
 80016c8:	4861      	ldr	r0, [pc, #388]	; (8001850 <print_KISS+0x2c0>)
 80016ca:	f005 f85d 	bl	8006788 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80016ce:	4860      	ldr	r0, [pc, #384]	; (8001850 <print_KISS+0x2c0>)
 80016d0:	f7fe fd9e 	bl	8000210 <strlen>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	230a      	movs	r3, #10
 80016da:	495d      	ldr	r1, [pc, #372]	; (8001850 <print_KISS+0x2c0>)
 80016dc:	485e      	ldr	r0, [pc, #376]	; (8001858 <print_KISS+0x2c8>)
 80016de:	f004 f92a 	bl	8005936 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	3301      	adds	r3, #1
 80016e6:	623b      	str	r3, [r7, #32]
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	2b07      	cmp	r3, #7
 80016ec:	dde4      	ble.n	80016b8 <print_KISS+0x128>
		}
		curr_mem += 8;
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	3308      	adds	r3, #8
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80016f4:	4a56      	ldr	r2, [pc, #344]	; (8001850 <print_KISS+0x2c0>)
 80016f6:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <print_KISS+0x2d4>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80016fc:	4854      	ldr	r0, [pc, #336]	; (8001850 <print_KISS+0x2c0>)
 80016fe:	f7fe fd87 	bl	8000210 <strlen>
 8001702:	4603      	mov	r3, r0
 8001704:	b29a      	uxth	r2, r3
 8001706:	230a      	movs	r3, #10
 8001708:	4951      	ldr	r1, [pc, #324]	; (8001850 <print_KISS+0x2c0>)
 800170a:	4853      	ldr	r0, [pc, #332]	; (8001858 <print_KISS+0x2c8>)
 800170c:	f004 f913 	bl	8005936 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	3301      	adds	r3, #1
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	2b0d      	cmp	r3, #13
 800171a:	ddb9      	ble.n	8001690 <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001722:	3314      	adds	r3, #20
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8001728:	4a49      	ldr	r2, [pc, #292]	; (8001850 <print_KISS+0x2c0>)
 800172a:	4b50      	ldr	r3, [pc, #320]	; (800186c <print_KISS+0x2dc>)
 800172c:	4615      	mov	r5, r2
 800172e:	461c      	mov	r4, r3
 8001730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001732:	6028      	str	r0, [r5, #0]
 8001734:	6069      	str	r1, [r5, #4]
 8001736:	60aa      	str	r2, [r5, #8]
 8001738:	60eb      	str	r3, [r5, #12]
 800173a:	8823      	ldrh	r3, [r4, #0]
 800173c:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800173e:	4844      	ldr	r0, [pc, #272]	; (8001850 <print_KISS+0x2c0>)
 8001740:	f7fe fd66 	bl	8000210 <strlen>
 8001744:	4603      	mov	r3, r0
 8001746:	b29a      	uxth	r2, r3
 8001748:	230a      	movs	r3, #10
 800174a:	4941      	ldr	r1, [pc, #260]	; (8001850 <print_KISS+0x2c0>)
 800174c:	4842      	ldr	r0, [pc, #264]	; (8001858 <print_KISS+0x2c8>)
 800174e:	f004 f8f2 	bl	8005936 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	e017      	b.n	8001788 <print_KISS+0x1f8>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	493e      	ldr	r1, [pc, #248]	; (8001860 <print_KISS+0x2d0>)
 8001768:	4839      	ldr	r0, [pc, #228]	; (8001850 <print_KISS+0x2c0>)
 800176a:	f005 f80d 	bl	8006788 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800176e:	4838      	ldr	r0, [pc, #224]	; (8001850 <print_KISS+0x2c0>)
 8001770:	f7fe fd4e 	bl	8000210 <strlen>
 8001774:	4603      	mov	r3, r0
 8001776:	b29a      	uxth	r2, r3
 8001778:	230a      	movs	r3, #10
 800177a:	4935      	ldr	r1, [pc, #212]	; (8001850 <print_KISS+0x2c0>)
 800177c:	4836      	ldr	r0, [pc, #216]	; (8001858 <print_KISS+0x2c8>)
 800177e:	f004 f8da 	bl	8005936 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3301      	adds	r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	2b07      	cmp	r3, #7
 800178c:	dde4      	ble.n	8001758 <print_KISS+0x1c8>
	}
	sprintf(uartData, "\n");
 800178e:	4a30      	ldr	r2, [pc, #192]	; (8001850 <print_KISS+0x2c0>)
 8001790:	4b34      	ldr	r3, [pc, #208]	; (8001864 <print_KISS+0x2d4>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001796:	482e      	ldr	r0, [pc, #184]	; (8001850 <print_KISS+0x2c0>)
 8001798:	f7fe fd3a 	bl	8000210 <strlen>
 800179c:	4603      	mov	r3, r0
 800179e:	b29a      	uxth	r2, r3
 80017a0:	230a      	movs	r3, #10
 80017a2:	492b      	ldr	r1, [pc, #172]	; (8001850 <print_KISS+0x2c0>)
 80017a4:	482c      	ldr	r0, [pc, #176]	; (8001858 <print_KISS+0x2c8>)
 80017a6:	f004 f8c6 	bl	8005936 <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80017b0:	3318      	adds	r3, #24
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 80017b6:	4a26      	ldr	r2, [pc, #152]	; (8001850 <print_KISS+0x2c0>)
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <print_KISS+0x2e0>)
 80017ba:	4615      	mov	r5, r2
 80017bc:	461c      	mov	r4, r3
 80017be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c0:	6028      	str	r0, [r5, #0]
 80017c2:	6069      	str	r1, [r5, #4]
 80017c4:	60aa      	str	r2, [r5, #8]
 80017c6:	60eb      	str	r3, [r5, #12]
 80017c8:	8823      	ldrh	r3, [r4, #0]
 80017ca:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80017cc:	4820      	ldr	r0, [pc, #128]	; (8001850 <print_KISS+0x2c0>)
 80017ce:	f7fe fd1f 	bl	8000210 <strlen>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	230a      	movs	r3, #10
 80017d8:	491d      	ldr	r1, [pc, #116]	; (8001850 <print_KISS+0x2c0>)
 80017da:	481f      	ldr	r0, [pc, #124]	; (8001858 <print_KISS+0x2c8>)
 80017dc:	f004 f8ab 	bl	8005936 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	e017      	b.n	8001816 <print_KISS+0x286>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	f1c3 0307 	rsb	r3, r3, #7
 80017ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	491a      	ldr	r1, [pc, #104]	; (8001860 <print_KISS+0x2d0>)
 80017f6:	4816      	ldr	r0, [pc, #88]	; (8001850 <print_KISS+0x2c0>)
 80017f8:	f004 ffc6 	bl	8006788 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80017fc:	4814      	ldr	r0, [pc, #80]	; (8001850 <print_KISS+0x2c0>)
 80017fe:	f7fe fd07 	bl	8000210 <strlen>
 8001802:	4603      	mov	r3, r0
 8001804:	b29a      	uxth	r2, r3
 8001806:	230a      	movs	r3, #10
 8001808:	4911      	ldr	r1, [pc, #68]	; (8001850 <print_KISS+0x2c0>)
 800180a:	4813      	ldr	r0, [pc, #76]	; (8001858 <print_KISS+0x2c8>)
 800180c:	f004 f893 	bl	8005936 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3301      	adds	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2b07      	cmp	r3, #7
 800181a:	dde4      	ble.n	80017e6 <print_KISS+0x256>
	}
	sprintf(uartData, "\n");
 800181c:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <print_KISS+0x2c0>)
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <print_KISS+0x2d4>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001824:	480a      	ldr	r0, [pc, #40]	; (8001850 <print_KISS+0x2c0>)
 8001826:	f7fe fcf3 	bl	8000210 <strlen>
 800182a:	4603      	mov	r3, r0
 800182c:	b29a      	uxth	r2, r3
 800182e:	230a      	movs	r3, #10
 8001830:	4907      	ldr	r1, [pc, #28]	; (8001850 <print_KISS+0x2c0>)
 8001832:	4809      	ldr	r0, [pc, #36]	; (8001858 <print_KISS+0x2c8>)
 8001834:	f004 f87f 	bl	8005936 <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800183e:	331c      	adds	r3, #28
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e057      	b.n	80018fa <print_KISS+0x36a>
 800184a:	bf00      	nop
 800184c:	200000b0 	.word	0x200000b0
 8001850:	20001f3c 	.word	0x20001f3c
 8001854:	0800812c 	.word	0x0800812c
 8001858:	20003d60 	.word	0x20003d60
 800185c:	08008164 	.word	0x08008164
 8001860:	080080e4 	.word	0x080080e4
 8001864:	080080ec 	.word	0x080080ec
 8001868:	080080d0 	.word	0x080080d0
 800186c:	080080f0 	.word	0x080080f0
 8001870:	08008104 	.word	0x08008104
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3301      	adds	r3, #1
 8001878:	461a      	mov	r2, r3
 800187a:	494f      	ldr	r1, [pc, #316]	; (80019b8 <print_KISS+0x428>)
 800187c:	484f      	ldr	r0, [pc, #316]	; (80019bc <print_KISS+0x42c>)
 800187e:	f004 ff83 	bl	8006788 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001882:	484e      	ldr	r0, [pc, #312]	; (80019bc <print_KISS+0x42c>)
 8001884:	f7fe fcc4 	bl	8000210 <strlen>
 8001888:	4603      	mov	r3, r0
 800188a:	b29a      	uxth	r2, r3
 800188c:	230a      	movs	r3, #10
 800188e:	494b      	ldr	r1, [pc, #300]	; (80019bc <print_KISS+0x42c>)
 8001890:	484b      	ldr	r0, [pc, #300]	; (80019c0 <print_KISS+0x430>)
 8001892:	f004 f850 	bl	8005936 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	e017      	b.n	80018cc <print_KISS+0x33c>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a4:	4413      	add	r3, r2
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4946      	ldr	r1, [pc, #280]	; (80019c4 <print_KISS+0x434>)
 80018ac:	4843      	ldr	r0, [pc, #268]	; (80019bc <print_KISS+0x42c>)
 80018ae:	f004 ff6b 	bl	8006788 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018b2:	4842      	ldr	r0, [pc, #264]	; (80019bc <print_KISS+0x42c>)
 80018b4:	f7fe fcac 	bl	8000210 <strlen>
 80018b8:	4603      	mov	r3, r0
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	230a      	movs	r3, #10
 80018be:	493f      	ldr	r1, [pc, #252]	; (80019bc <print_KISS+0x42c>)
 80018c0:	483f      	ldr	r0, [pc, #252]	; (80019c0 <print_KISS+0x430>)
 80018c2:	f004 f838 	bl	8005936 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	3301      	adds	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b07      	cmp	r3, #7
 80018d0:	dde4      	ble.n	800189c <print_KISS+0x30c>
		}
		curr_mem += 8;
 80018d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d4:	3308      	adds	r3, #8
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80018d8:	4a38      	ldr	r2, [pc, #224]	; (80019bc <print_KISS+0x42c>)
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <print_KISS+0x438>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80018e0:	4836      	ldr	r0, [pc, #216]	; (80019bc <print_KISS+0x42c>)
 80018e2:	f7fe fc95 	bl	8000210 <strlen>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	230a      	movs	r3, #10
 80018ec:	4933      	ldr	r1, [pc, #204]	; (80019bc <print_KISS+0x42c>)
 80018ee:	4834      	ldr	r0, [pc, #208]	; (80019c0 <print_KISS+0x430>)
 80018f0:	f004 f821 	bl	8005936 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8)-1;i++){
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	da00      	bge.n	8001908 <print_KISS+0x378>
 8001906:	3307      	adds	r3, #7
 8001908:	10db      	asrs	r3, r3, #3
 800190a:	3b01      	subs	r3, #1
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	429a      	cmp	r2, r3
 8001910:	dbb0      	blt.n	8001874 <print_KISS+0x2e4>
	}

	//Print Stop Flag
	curr_mem = (local_packet->KISS_PACKET+(8*(local_packet->byte_cnt-1)));
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800191e:	330c      	adds	r3, #12
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3b01      	subs	r3, #1
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 800192a:	4a24      	ldr	r2, [pc, #144]	; (80019bc <print_KISS+0x42c>)
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <print_KISS+0x43c>)
 800192e:	4615      	mov	r5, r2
 8001930:	461c      	mov	r4, r3
 8001932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001934:	6028      	str	r0, [r5, #0]
 8001936:	6069      	str	r1, [r5, #4]
 8001938:	60aa      	str	r2, [r5, #8]
 800193a:	60eb      	str	r3, [r5, #12]
 800193c:	8823      	ldrh	r3, [r4, #0]
 800193e:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001940:	481e      	ldr	r0, [pc, #120]	; (80019bc <print_KISS+0x42c>)
 8001942:	f7fe fc65 	bl	8000210 <strlen>
 8001946:	4603      	mov	r3, r0
 8001948:	b29a      	uxth	r2, r3
 800194a:	230a      	movs	r3, #10
 800194c:	491b      	ldr	r1, [pc, #108]	; (80019bc <print_KISS+0x42c>)
 800194e:	481c      	ldr	r0, [pc, #112]	; (80019c0 <print_KISS+0x430>)
 8001950:	f003 fff1 	bl	8005936 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e017      	b.n	800198a <print_KISS+0x3fa>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1c3 0307 	rsb	r3, r3, #7
 8001960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001962:	4413      	add	r3, r2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4916      	ldr	r1, [pc, #88]	; (80019c4 <print_KISS+0x434>)
 800196a:	4814      	ldr	r0, [pc, #80]	; (80019bc <print_KISS+0x42c>)
 800196c:	f004 ff0c 	bl	8006788 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001970:	4812      	ldr	r0, [pc, #72]	; (80019bc <print_KISS+0x42c>)
 8001972:	f7fe fc4d 	bl	8000210 <strlen>
 8001976:	4603      	mov	r3, r0
 8001978:	b29a      	uxth	r2, r3
 800197a:	230a      	movs	r3, #10
 800197c:	490f      	ldr	r1, [pc, #60]	; (80019bc <print_KISS+0x42c>)
 800197e:	4810      	ldr	r0, [pc, #64]	; (80019c0 <print_KISS+0x430>)
 8001980:	f003 ffd9 	bl	8005936 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3301      	adds	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b07      	cmp	r3, #7
 800198e:	dde4      	ble.n	800195a <print_KISS+0x3ca>
	}
	sprintf(uartData, "\n\n");
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <print_KISS+0x42c>)
 8001992:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <print_KISS+0x440>)
 8001994:	8811      	ldrh	r1, [r2, #0]
 8001996:	7892      	ldrb	r2, [r2, #2]
 8001998:	8019      	strh	r1, [r3, #0]
 800199a:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800199c:	4807      	ldr	r0, [pc, #28]	; (80019bc <print_KISS+0x42c>)
 800199e:	f7fe fc37 	bl	8000210 <strlen>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	230a      	movs	r3, #10
 80019a8:	4904      	ldr	r1, [pc, #16]	; (80019bc <print_KISS+0x42c>)
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <print_KISS+0x430>)
 80019ac:	f003 ffc3 	bl	8005936 <HAL_UART_Transmit>

}
 80019b0:	bf00      	nop
 80019b2:	3734      	adds	r7, #52	; 0x34
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b8:	08008118 	.word	0x08008118
 80019bc:	20001f3c 	.word	0x20001f3c
 80019c0:	20003d60 	.word	0x20003d60
 80019c4:	080080e4 	.word	0x080080e4
 80019c8:	080080ec 	.word	0x080080ec
 80019cc:	08008178 	.word	0x08008178
 80019d0:	0800818c 	.word	0x0800818c

080019d4 <UART2_EXCEPTION_CALLBACK>:
//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 80019d8:	2201      	movs	r2, #1
 80019da:	491d      	ldr	r1, [pc, #116]	; (8001a50 <UART2_EXCEPTION_CALLBACK+0x7c>)
 80019dc:	481d      	ldr	r0, [pc, #116]	; (8001a54 <UART2_EXCEPTION_CALLBACK+0x80>)
 80019de:	f004 f843 	bl	8005a68 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 80019ea:	7b1b      	ldrb	r3, [r3, #12]
 80019ec:	2bc0      	cmp	r3, #192	; 0xc0
 80019ee:	d104      	bne.n	80019fa <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	3301      	adds	r3, #1
 80019f6:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 80019f8:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <UART2_EXCEPTION_CALLBACK+0x88>)
 8001a02:	4413      	add	r3, r2
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001a06:	7b12      	ldrb	r2, [r2, #12]
 8001a08:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001a12:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	dd16      	ble.n	8001a4a <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 8001a1c:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <UART2_EXCEPTION_CALLBACK+0x8c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <UART2_EXCEPTION_CALLBACK+0x90>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001a42:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <UART2_EXCEPTION_CALLBACK+0x84>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]

	  }
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20001418 	.word	0x20001418
 8001a54:	20003d60 	.word	0x20003d60
 8001a58:	2000140c 	.word	0x2000140c
 8001a5c:	2000141a 	.word	0x2000141a
 8001a60:	20003d08 	.word	0x20003d08
 8001a64:	20000099 	.word	0x20000099

08001a68 <set_packet_pointer_AX25>:
	}

//	return true; //valid packet
}

void set_packet_pointer_AX25(){
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001a6e:	4b6e      	ldr	r3, [pc, #440]	; (8001c28 <set_packet_pointer_AX25+0x1c0>)
 8001a70:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 8001a72:	2310      	movs	r3, #16
 8001a74:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 8001a76:	4b6d      	ldr	r3, [pc, #436]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001a78:	4a6d      	ldr	r2, [pc, #436]	; (8001c30 <set_packet_pointer_AX25+0x1c8>)
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	469c      	mov	ip, r3
 8001a7e:	f104 0e20 	add.w	lr, r4, #32
 8001a82:	4665      	mov	r5, ip
 8001a84:	4626      	mov	r6, r4
 8001a86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a88:	6028      	str	r0, [r5, #0]
 8001a8a:	6069      	str	r1, [r5, #4]
 8001a8c:	60aa      	str	r2, [r5, #8]
 8001a8e:	60eb      	str	r3, [r5, #12]
 8001a90:	3410      	adds	r4, #16
 8001a92:	f10c 0c10 	add.w	ip, ip, #16
 8001a96:	4574      	cmp	r4, lr
 8001a98:	d1f3      	bne.n	8001a82 <set_packet_pointer_AX25+0x1a>
 8001a9a:	4663      	mov	r3, ip
 8001a9c:	4622      	mov	r2, r4
 8001a9e:	7812      	ldrb	r2, [r2, #0]
 8001aa0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001aa2:	4862      	ldr	r0, [pc, #392]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001aa4:	f7fe fbb4 	bl	8000210 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	230a      	movs	r3, #10
 8001aae:	495f      	ldr	r1, [pc, #380]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001ab0:	4860      	ldr	r0, [pc, #384]	; (8001c34 <set_packet_pointer_AX25+0x1cc>)
 8001ab2:	f003 ff40 	bl	8005936 <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 8001aba:	4a5c      	ldr	r2, [pc, #368]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001abc:	4b5e      	ldr	r3, [pc, #376]	; (8001c38 <set_packet_pointer_AX25+0x1d0>)
 8001abe:	4615      	mov	r5, r2
 8001ac0:	461c      	mov	r4, r3
 8001ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac4:	6028      	str	r0, [r5, #0]
 8001ac6:	6069      	str	r1, [r5, #4]
 8001ac8:	60aa      	str	r2, [r5, #8]
 8001aca:	60eb      	str	r3, [r5, #12]
 8001acc:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001ace:	6128      	str	r0, [r5, #16]
 8001ad0:	6169      	str	r1, [r5, #20]
 8001ad2:	61aa      	str	r2, [r5, #24]
 8001ad4:	7823      	ldrb	r3, [r4, #0]
 8001ad6:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ad8:	4854      	ldr	r0, [pc, #336]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001ada:	f7fe fb99 	bl	8000210 <strlen>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	4951      	ldr	r1, [pc, #324]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001ae6:	4853      	ldr	r0, [pc, #332]	; (8001c34 <set_packet_pointer_AX25+0x1cc>)
 8001ae8:	f003 ff25 	bl	8005936 <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001af2:	3310      	adds	r3, #16
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3370      	adds	r3, #112	; 0x70
 8001afc:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3370      	adds	r3, #112	; 0x70
 8001b02:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 8001b04:	4a49      	ldr	r2, [pc, #292]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001b06:	4b4d      	ldr	r3, [pc, #308]	; (8001c3c <set_packet_pointer_AX25+0x1d4>)
 8001b08:	4615      	mov	r5, r2
 8001b0a:	461c      	mov	r4, r3
 8001b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0e:	6028      	str	r0, [r5, #0]
 8001b10:	6069      	str	r1, [r5, #4]
 8001b12:	60aa      	str	r2, [r5, #8]
 8001b14:	60eb      	str	r3, [r5, #12]
 8001b16:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001b18:	6128      	str	r0, [r5, #16]
 8001b1a:	6169      	str	r1, [r5, #20]
 8001b1c:	61aa      	str	r2, [r5, #24]
 8001b1e:	7823      	ldrb	r3, [r4, #0]
 8001b20:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b22:	4842      	ldr	r0, [pc, #264]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001b24:	f7fe fb74 	bl	8000210 <strlen>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	230a      	movs	r3, #10
 8001b2e:	493f      	ldr	r1, [pc, #252]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001b30:	4840      	ldr	r0, [pc, #256]	; (8001c34 <set_packet_pointer_AX25+0x1cc>)
 8001b32:	f003 ff00 	bl	8005936 <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001b3c:	3314      	adds	r3, #20
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3308      	adds	r3, #8
 8001b46:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 8001b4e:	4a37      	ldr	r2, [pc, #220]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <set_packet_pointer_AX25+0x1d8>)
 8001b52:	4615      	mov	r5, r2
 8001b54:	461c      	mov	r4, r3
 8001b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b58:	6028      	str	r0, [r5, #0]
 8001b5a:	6069      	str	r1, [r5, #4]
 8001b5c:	60aa      	str	r2, [r5, #8]
 8001b5e:	60eb      	str	r3, [r5, #12]
 8001b60:	cc03      	ldmia	r4!, {r0, r1}
 8001b62:	6128      	str	r0, [r5, #16]
 8001b64:	6169      	str	r1, [r5, #20]
 8001b66:	7823      	ldrb	r3, [r4, #0]
 8001b68:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b6a:	4830      	ldr	r0, [pc, #192]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001b6c:	f7fe fb50 	bl	8000210 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	230a      	movs	r3, #10
 8001b76:	492d      	ldr	r1, [pc, #180]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001b78:	482e      	ldr	r0, [pc, #184]	; (8001c34 <set_packet_pointer_AX25+0x1cc>)
 8001b7a:	f003 fedc 	bl	8005936 <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001b84:	3318      	adds	r3, #24
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	3308      	adds	r3, #8
 8001b94:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 8001b96:	4a25      	ldr	r2, [pc, #148]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <set_packet_pointer_AX25+0x1dc>)
 8001b9a:	4615      	mov	r5, r2
 8001b9c:	461c      	mov	r4, r3
 8001b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba0:	6028      	str	r0, [r5, #0]
 8001ba2:	6069      	str	r1, [r5, #4]
 8001ba4:	60aa      	str	r2, [r5, #8]
 8001ba6:	60eb      	str	r3, [r5, #12]
 8001ba8:	cc03      	ldmia	r4!, {r0, r1}
 8001baa:	6128      	str	r0, [r5, #16]
 8001bac:	6169      	str	r1, [r5, #20]
 8001bae:	8823      	ldrh	r3, [r4, #0]
 8001bb0:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001bb2:	481e      	ldr	r0, [pc, #120]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001bb4:	f7fe fb2c 	bl	8000210 <strlen>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	491b      	ldr	r1, [pc, #108]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001bc0:	481c      	ldr	r0, [pc, #112]	; (8001c34 <set_packet_pointer_AX25+0x1cc>)
 8001bc2:	f003 feb8 	bl	8005936 <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001bcc:	331c      	adds	r3, #28
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <set_packet_pointer_AX25+0x1e0>)
 8001be6:	4615      	mov	r5, r2
 8001be8:	461c      	mov	r4, r3
 8001bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bec:	6028      	str	r0, [r5, #0]
 8001bee:	6069      	str	r1, [r5, #4]
 8001bf0:	60aa      	str	r2, [r5, #8]
 8001bf2:	60eb      	str	r3, [r5, #12]
 8001bf4:	cc03      	ldmia	r4!, {r0, r1}
 8001bf6:	6128      	str	r0, [r5, #16]
 8001bf8:	6169      	str	r1, [r5, #20]
 8001bfa:	7823      	ldrb	r3, [r4, #0]
 8001bfc:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001bfe:	480b      	ldr	r0, [pc, #44]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001c00:	f7fe fb06 	bl	8000210 <strlen>
 8001c04:	4603      	mov	r3, r0
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	230a      	movs	r3, #10
 8001c0a:	4908      	ldr	r1, [pc, #32]	; (8001c2c <set_packet_pointer_AX25+0x1c4>)
 8001c0c:	4809      	ldr	r0, [pc, #36]	; (8001c34 <set_packet_pointer_AX25+0x1cc>)
 8001c0e:	f003 fe92 	bl	8005936 <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c18:	3304      	adds	r3, #4
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	601a      	str	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200000b0 	.word	0x200000b0
 8001c2c:	20001f3c 	.word	0x20001f3c
 8001c30:	080082b0 	.word	0x080082b0
 8001c34:	20003d60 	.word	0x20003d60
 8001c38:	080082d4 	.word	0x080082d4
 8001c3c:	080082f4 	.word	0x080082f4
 8001c40:	08008314 	.word	0x08008314
 8001c44:	08008330 	.word	0x08008330
 8001c48:	0800834c 	.word	0x0800834c

08001c4c <clear_AX25>:

	KISS_TO_HEX();


}
void clear_AX25(){
 8001c4c:	b5b0      	push	{r4, r5, r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <clear_AX25+0x5c>)
 8001c54:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 8001c56:	4a15      	ldr	r2, [pc, #84]	; (8001cac <clear_AX25+0x60>)
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <clear_AX25+0x64>)
 8001c5a:	4615      	mov	r5, r2
 8001c5c:	461c      	mov	r4, r3
 8001c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c60:	6028      	str	r0, [r5, #0]
 8001c62:	6069      	str	r1, [r5, #4]
 8001c64:	60aa      	str	r2, [r5, #8]
 8001c66:	60eb      	str	r3, [r5, #12]
 8001c68:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001c6a:	6128      	str	r0, [r5, #16]
 8001c6c:	6169      	str	r1, [r5, #20]
 8001c6e:	61aa      	str	r2, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c70:	480e      	ldr	r0, [pc, #56]	; (8001cac <clear_AX25+0x60>)
 8001c72:	f7fe facd 	bl	8000210 <strlen>
 8001c76:	4603      	mov	r3, r0
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	490b      	ldr	r1, [pc, #44]	; (8001cac <clear_AX25+0x60>)
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <clear_AX25+0x68>)
 8001c80:	f003 fe59 	bl	8005936 <HAL_UART_Transmit>

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f640 225f 	movw	r2, #2655	; 0xa5f
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f004 fd67 	bl	8006760 <memcpy>
	local_packet->got_packet = false;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001c98:	3309      	adds	r3, #9
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200000b0 	.word	0x200000b0
 8001cac:	20001f3c 	.word	0x20001f3c
 8001cb0:	08008368 	.word	0x08008368
 8001cb4:	20003d60 	.word	0x20003d60

08001cb8 <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <receiving_KISS+0xbc>)
 8001cc0:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <receiving_KISS+0xc0>)
 8001cc4:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	7b5b      	ldrb	r3, [r3, #13]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d04d      	beq.n	8001d6a <receiving_KISS+0xb2>
		sprintf(uartData, "\nGot a packet via UART of size %d bytes, printing now...\n\n",local_UART_packet->received_byte_cnt);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4929      	ldr	r1, [pc, #164]	; (8001d7c <receiving_KISS+0xc4>)
 8001cd6:	482a      	ldr	r0, [pc, #168]	; (8001d80 <receiving_KISS+0xc8>)
 8001cd8:	f004 fd56 	bl	8006788 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001cdc:	4828      	ldr	r0, [pc, #160]	; (8001d80 <receiving_KISS+0xc8>)
 8001cde:	f7fe fa97 	bl	8000210 <strlen>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	4925      	ldr	r1, [pc, #148]	; (8001d80 <receiving_KISS+0xc8>)
 8001cea:	4826      	ldr	r0, [pc, #152]	; (8001d84 <receiving_KISS+0xcc>)
 8001cec:	f003 fe23 	bl	8005936 <HAL_UART_Transmit>

		for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e020      	b.n	8001d38 <receiving_KISS+0x80>
			//Hex value from UART
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[i];
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	330e      	adds	r3, #14
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	72fb      	strb	r3, [r7, #11]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3307      	adds	r3, #7
 8001d10:	607b      	str	r3, [r7, #4]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2201      	movs	r2, #1
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f8ee 	bl	8000efc <conv_HEX_to_BIN>

			local_UART_packet->got_packet = false;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2200      	movs	r2, #0
 8001d24:	735a      	strb	r2, [r3, #13]
			local_packet->got_packet = true;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d2c:	3309      	adds	r3, #9
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dbd9      	blt.n	8001cf6 <receiving_KISS+0x3e>
		}
		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d4c:	330c      	adds	r3, #12
 8001d4e:	601a      	str	r2, [r3, #0]
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset-1)*8;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d56:	330c      	adds	r3, #12
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3b13      	subs	r3, #19
 8001d5c:	00da      	lsls	r2, r3, #3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001d64:	601a      	str	r2, [r3, #0]
		return true;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <receiving_KISS+0xb4>
	}

	else {
		return false;
 8001d6a:	2300      	movs	r3, #0
	}
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	2000140c 	.word	0x2000140c
 8001d78:	200000b0 	.word	0x200000b0
 8001d7c:	08008384 	.word	0x08008384
 8001d80:	20001f3c 	.word	0x20001f3c
 8001d84:	20003d60 	.word	0x20003d60

08001d88 <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 8001d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001d8e:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <set_packet_pointer_KISS+0x174>)
 8001d90:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS:\n");
 8001d92:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001d94:	4a5b      	ldr	r2, [pc, #364]	; (8001f04 <set_packet_pointer_KISS+0x17c>)
 8001d96:	4614      	mov	r4, r2
 8001d98:	469c      	mov	ip, r3
 8001d9a:	f104 0e20 	add.w	lr, r4, #32
 8001d9e:	4665      	mov	r5, ip
 8001da0:	4626      	mov	r6, r4
 8001da2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001da4:	6028      	str	r0, [r5, #0]
 8001da6:	6069      	str	r1, [r5, #4]
 8001da8:	60aa      	str	r2, [r5, #8]
 8001daa:	60eb      	str	r3, [r5, #12]
 8001dac:	3410      	adds	r4, #16
 8001dae:	f10c 0c10 	add.w	ip, ip, #16
 8001db2:	4574      	cmp	r4, lr
 8001db4:	d1f3      	bne.n	8001d9e <set_packet_pointer_KISS+0x16>
 8001db6:	4663      	mov	r3, ip
 8001db8:	4622      	mov	r2, r4
 8001dba:	7812      	ldrb	r2, [r2, #0]
 8001dbc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001dbe:	4850      	ldr	r0, [pc, #320]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001dc0:	f7fe fa26 	bl	8000210 <strlen>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	230a      	movs	r3, #10
 8001dca:	494d      	ldr	r1, [pc, #308]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001dcc:	484e      	ldr	r0, [pc, #312]	; (8001f08 <set_packet_pointer_KISS+0x180>)
 8001dce:	f003 fdb2 	bl	8005936 <HAL_UART_Transmit>

	bool *curr_mem = local_packet->KISS_PACKET+16;//+8 is to skip the flag since it does not have a pointer
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8001dd8:	3310      	adds	r3, #16
 8001dda:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for address\n");
 8001ddc:	4a48      	ldr	r2, [pc, #288]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001dde:	4b4b      	ldr	r3, [pc, #300]	; (8001f0c <set_packet_pointer_KISS+0x184>)
 8001de0:	4615      	mov	r5, r2
 8001de2:	461c      	mov	r4, r3
 8001de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de6:	6028      	str	r0, [r5, #0]
 8001de8:	6069      	str	r1, [r5, #4]
 8001dea:	60aa      	str	r2, [r5, #8]
 8001dec:	60eb      	str	r3, [r5, #12]
 8001dee:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001df0:	6128      	str	r0, [r5, #16]
 8001df2:	6169      	str	r1, [r5, #20]
 8001df4:	61aa      	str	r2, [r5, #24]
 8001df6:	7823      	ldrb	r3, [r4, #0]
 8001df8:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001dfa:	4841      	ldr	r0, [pc, #260]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001dfc:	f7fe fa08 	bl	8000210 <strlen>
 8001e00:	4603      	mov	r3, r0
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	230a      	movs	r3, #10
 8001e06:	493e      	ldr	r1, [pc, #248]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001e08:	483f      	ldr	r0, [pc, #252]	; (8001f08 <set_packet_pointer_KISS+0x180>)
 8001e0a:	f003 fd94 	bl	8005936 <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001e14:	3310      	adds	r3, #16
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	3370      	adds	r3, #112	; 0x70
 8001e1e:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for control\n");
 8001e20:	4a37      	ldr	r2, [pc, #220]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <set_packet_pointer_KISS+0x188>)
 8001e24:	4615      	mov	r5, r2
 8001e26:	461c      	mov	r4, r3
 8001e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2a:	6028      	str	r0, [r5, #0]
 8001e2c:	6069      	str	r1, [r5, #4]
 8001e2e:	60aa      	str	r2, [r5, #8]
 8001e30:	60eb      	str	r3, [r5, #12]
 8001e32:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001e34:	6128      	str	r0, [r5, #16]
 8001e36:	6169      	str	r1, [r5, #20]
 8001e38:	61aa      	str	r2, [r5, #24]
 8001e3a:	7823      	ldrb	r3, [r4, #0]
 8001e3c:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e3e:	4830      	ldr	r0, [pc, #192]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001e40:	f7fe f9e6 	bl	8000210 <strlen>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	230a      	movs	r3, #10
 8001e4a:	492d      	ldr	r1, [pc, #180]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001e4c:	482e      	ldr	r0, [pc, #184]	; (8001f08 <set_packet_pointer_KISS+0x180>)
 8001e4e:	f003 fd72 	bl	8005936 <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001e58:	3314      	adds	r3, #20
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	3308      	adds	r3, #8
 8001e62:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for PID\n");
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <set_packet_pointer_KISS+0x18c>)
 8001e68:	4615      	mov	r5, r2
 8001e6a:	461c      	mov	r4, r3
 8001e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6e:	6028      	str	r0, [r5, #0]
 8001e70:	6069      	str	r1, [r5, #4]
 8001e72:	60aa      	str	r2, [r5, #8]
 8001e74:	60eb      	str	r3, [r5, #12]
 8001e76:	cc03      	ldmia	r4!, {r0, r1}
 8001e78:	6128      	str	r0, [r5, #16]
 8001e7a:	6169      	str	r1, [r5, #20]
 8001e7c:	7823      	ldrb	r3, [r4, #0]
 8001e7e:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e80:	481f      	ldr	r0, [pc, #124]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001e82:	f7fe f9c5 	bl	8000210 <strlen>
 8001e86:	4603      	mov	r3, r0
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	230a      	movs	r3, #10
 8001e8c:	491c      	ldr	r1, [pc, #112]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001e8e:	481e      	ldr	r0, [pc, #120]	; (8001f08 <set_packet_pointer_KISS+0x180>)
 8001e90:	f003 fd51 	bl	8005936 <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001e9a:	3318      	adds	r3, #24
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	3308      	adds	r3, #8
 8001ea4:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "Setting pointer for Info\n");
 8001ea6:	4a16      	ldr	r2, [pc, #88]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <set_packet_pointer_KISS+0x190>)
 8001eaa:	4615      	mov	r5, r2
 8001eac:	461c      	mov	r4, r3
 8001eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb0:	6028      	str	r0, [r5, #0]
 8001eb2:	6069      	str	r1, [r5, #4]
 8001eb4:	60aa      	str	r2, [r5, #8]
 8001eb6:	60eb      	str	r3, [r5, #12]
 8001eb8:	cc03      	ldmia	r4!, {r0, r1}
 8001eba:	6128      	str	r0, [r5, #16]
 8001ebc:	6169      	str	r1, [r5, #20]
 8001ebe:	8823      	ldrh	r3, [r4, #0]
 8001ec0:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ec2:	480f      	ldr	r0, [pc, #60]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001ec4:	f7fe f9a4 	bl	8000210 <strlen>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	230a      	movs	r3, #10
 8001ece:	490c      	ldr	r1, [pc, #48]	; (8001f00 <set_packet_pointer_KISS+0x178>)
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <set_packet_pointer_KISS+0x180>)
 8001ed2:	f003 fd30 	bl	8005936 <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001edc:	331c      	adds	r3, #28
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	603b      	str	r3, [r7, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200000b0 	.word	0x200000b0
 8001f00:	20001f3c 	.word	0x20001f3c
 8001f04:	080083c0 	.word	0x080083c0
 8001f08:	20003d60 	.word	0x20003d60
 8001f0c:	080082d4 	.word	0x080082d4
 8001f10:	080082f4 	.word	0x080082f4
 8001f14:	08008314 	.word	0x08008314
 8001f18:	08008330 	.word	0x08008330

08001f1c <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001f22:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <KISS_TO_AX25+0x9c>)
 8001f24:	607b      	str	r3, [r7, #4]

	set_packet_pointer_KISS();
 8001f26:	f7ff ff2f 	bl	8001d88 <set_packet_pointer_KISS>
	print_KISS();
 8001f2a:	f7ff fb31 	bl	8001590 <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+16);//starting kiss packet skipping 2 bytes
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8001f34:	3310      	adds	r3, #16
 8001f36:	603b      	str	r3, [r7, #0]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 8001f38:	f7ff fd96 	bl	8001a68 <set_packet_pointer_AX25>

	memcpy(local_packet->address,cpy_from_ptr,address_len);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f42:	3310      	adds	r3, #16
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2270      	movs	r2, #112	; 0x70
 8001f48:	6839      	ldr	r1, [r7, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f004 fc08 	bl	8006760 <memcpy>
	cpy_from_ptr += address_len;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	3370      	adds	r3, #112	; 0x70
 8001f54:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f5c:	3314      	adds	r3, #20
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2208      	movs	r2, #8
 8001f62:	6839      	ldr	r1, [r7, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 fbfb 	bl	8006760 <memcpy>
	cpy_from_ptr += control_len;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f76:	3318      	adds	r3, #24
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 fbee 	bl	8006760 <memcpy>
	cpy_from_ptr += PID_len;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3308      	adds	r3, #8
 8001f88:	603b      	str	r3, [r7, #0]

	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001f90:	331c      	adds	r3, #28
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	6839      	ldr	r1, [r7, #0]
 8001fa0:	f004 fbde 	bl	8006760 <memcpy>
//	rxBit_count = (local_packet->byte_cnt*8) - 24;
//	crc_generate();

	//BIT STUFFING NEEDED
//	bitstuffing(local_packet);
	rxBit_count = 0;
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <KISS_TO_AX25+0xa0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

	//Print the ax25 packet
	print_AX25();
 8001faa:	f7ff f95d 	bl	8001268 <print_AX25>
	return true; //valid packet
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200000b0 	.word	0x200000b0
 8001fbc:	20000094 	.word	0x20000094

08001fc0 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 8001fca:	f000 fa49 	bl	8002460 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <initProgram+0x58>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	7013      	strb	r3, [r2, #0]
	toggleMode();
 8001fd4:	f000 f826 	bl	8002024 <toggleMode>
	toggleMode();
 8001fd8:	f000 f824 	bl	8002024 <toggleMode>

	if (mode) {
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <initProgram+0x58>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <initProgram+0x5c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2264      	movs	r2, #100	; 0x64
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <initProgram+0x60>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f240 323f 	movw	r2, #831	; 0x33f
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ff6:	e009      	b.n	800200c <initProgram+0x4c>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <initProgram+0x5c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f242 7210 	movw	r2, #10000	; 0x2710
 8002000:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <initProgram+0x60>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 800200c:	f7fe ffc6 	bl	8000f9c <init_AX25>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20003d08 	.word	0x20003d08
 800201c:	20003d20 	.word	0x20003d20
 8002020:	20002c68 	.word	0x20002c68

08002024 <toggleMode>:



void toggleMode() {
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002028:	2006      	movs	r0, #6
 800202a:	f001 faee 	bl	800360a <HAL_NVIC_DisableIRQ>

	//Stop DAC
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800202e:	2100      	movs	r1, #0
 8002030:	4824      	ldr	r0, [pc, #144]	; (80020c4 <toggleMode+0xa0>)
 8002032:	f001 fbd5 	bl	80037e0 <HAL_DAC_Stop_DMA>

	//Toggle mode
	mode = !mode;
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <toggleMode+0xa4>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f083 0301 	eor.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <toggleMode+0xa4>)
 8002052:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <toggleMode+0xa4>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	2120      	movs	r1, #32
 800205c:	481b      	ldr	r0, [pc, #108]	; (80020cc <toggleMode+0xa8>)
 800205e:	f002 fa87 	bl	8004570 <HAL_GPIO_WritePin>
	midbit = false;
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <toggleMode+0xac>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 8002068:	481a      	ldr	r0, [pc, #104]	; (80020d4 <toggleMode+0xb0>)
 800206a:	f003 f816 	bl	800509a <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <toggleMode+0xb0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <toggleMode+0xa4>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <toggleMode+0x6e>
		//Set Timer periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <toggleMode+0xb4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2264      	movs	r2, #100	; 0x64
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <toggleMode+0xb0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f240 323f 	movw	r2, #831	; 0x33f
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002090:	e00f      	b.n	80020b2 <toggleMode+0x8e>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <toggleMode+0xb4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f242 7210 	movw	r2, #10000	; 0x2710
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <toggleMode+0xb0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 80020a6:	480b      	ldr	r0, [pc, #44]	; (80020d4 <toggleMode+0xb0>)
 80020a8:	f003 f822 	bl	80050f0 <HAL_TIM_Base_Start_IT>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020ac:	2006      	movs	r0, #6
 80020ae:	f001 fa9e 	bl	80035ee <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020b8:	4804      	ldr	r0, [pc, #16]	; (80020cc <toggleMode+0xa8>)
 80020ba:	f002 fa59 	bl	8004570 <HAL_GPIO_WritePin>
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20003d0c 	.word	0x20003d0c
 80020c8:	20003d08 	.word	0x20003d08
 80020cc:	40020000 	.word	0x40020000
 80020d0:	20000098 	.word	0x20000098
 80020d4:	20002c68 	.word	0x20002c68
 80020d8:	20003d20 	.word	0x20003d20

080020dc <loadPeriodBuffer>:

void loadPeriodBuffer(int timerCnt) {
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	periodBuffer[periodSaveCount] = timerCnt;
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <loadPeriodBuffer+0x40>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <loadPeriodBuffer+0x44>)
 80020ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	periodSaveCount++;
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <loadPeriodBuffer+0x40>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	3301      	adds	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <loadPeriodBuffer+0x40>)
 80020fc:	801a      	strh	r2, [r3, #0]
	if (periodSaveCount >= RX_BUFFERSIZE) {
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <loadPeriodBuffer+0x40>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002106:	d302      	bcc.n	800210e <loadPeriodBuffer+0x32>
		periodSaveCount = 0;
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <loadPeriodBuffer+0x40>)
 800210a:	2200      	movs	r2, #0
 800210c:	801a      	strh	r2, [r3, #0]
	}
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	2000009c 	.word	0x2000009c
 8002120:	20002d08 	.word	0x20002d08

08002124 <Tim3IT>:
void Tim3IT() {
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	if (mode) {
 8002128:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <Tim3IT+0x3c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d007      	beq.n	8002140 <Tim3IT+0x1c>
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002130:	2100      	movs	r1, #0
 8002132:	480c      	ldr	r0, [pc, #48]	; (8002164 <Tim3IT+0x40>)
 8002134:	f001 fb54 	bl	80037e0 <HAL_DAC_Stop_DMA>
		midbit = false;
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <Tim3IT+0x44>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
		if(sampusecount>SAMP_PER_BAUD){
			loadPeriodBuffer(0);
		}
		sampusecount++;
	}
}
 800213e:	e00c      	b.n	800215a <Tim3IT+0x36>
		if(sampusecount>SAMP_PER_BAUD){
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <Tim3IT+0x48>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d902      	bls.n	800214e <Tim3IT+0x2a>
			loadPeriodBuffer(0);
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff ffc7 	bl	80020dc <loadPeriodBuffer>
		sampusecount++;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <Tim3IT+0x48>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <Tim3IT+0x48>)
 8002158:	701a      	strb	r2, [r3, #0]
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20003d08 	.word	0x20003d08
 8002164:	20003d0c 	.word	0x20003d0c
 8002168:	20000098 	.word	0x20000098
 800216c:	2000009a 	.word	0x2000009a

08002170 <FreqCounterPinEXTI>:
void FreqCounterPinEXTI() {
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	loadPeriodBuffer(htim2.Instance->CNT);
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <FreqCounterPinEXTI+0x24>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ffae 	bl	80020dc <loadPeriodBuffer>
	htim2.Instance->CNT = 0;
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <FreqCounterPinEXTI+0x24>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2200      	movs	r2, #0
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
	sampusecount = 0;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <FreqCounterPinEXTI+0x28>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20003d20 	.word	0x20003d20
 8002198:	2000009a 	.word	0x2000009a
 800219c:	00000000 	.word	0x00000000

080021a0 <edit_sineval>:
bool bitStream[10];

uint32_t lowFrequency[2 * LOWF_SAMP];
uint32_t highFrequency[2 * HIGHF_SAMP];

void edit_sineval(uint32_t *sinArray, int arraySize, int waves, float shiftPercent) {
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b08c      	sub	sp, #48	; 0x30
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	ed87 0a00 	vstr	s0, [r7]
	double ampl 		= OUT_AMPL / 2;						//Amplitude of wave
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	4c3c      	ldr	r4, [pc, #240]	; (80022a8 <edit_sineval+0x108>)
 80021b6:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double phaseShift 	= shiftPercent * 2 * PI;	//Desired phase shift
 80021ba:	edd7 7a00 	vldr	s15, [r7]
 80021be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021c2:	ee17 0a90 	vmov	r0, s15
 80021c6:	f7fe f9df 	bl	8000588 <__aeabi_f2d>
 80021ca:	a333      	add	r3, pc, #204	; (adr r3, 8002298 <edit_sineval+0xf8>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe fa32 	bl	8000638 <__aeabi_dmul>
 80021d4:	4603      	mov	r3, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double w 			= 2 * PI  * waves / arraySize;
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7fe f9c1 	bl	8000564 <__aeabi_i2d>
 80021e2:	a32f      	add	r3, pc, #188	; (adr r3, 80022a0 <edit_sineval+0x100>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe fa26 	bl	8000638 <__aeabi_dmul>
 80021ec:	4603      	mov	r3, r0
 80021ee:	460c      	mov	r4, r1
 80021f0:	4625      	mov	r5, r4
 80021f2:	461c      	mov	r4, r3
 80021f4:	68b8      	ldr	r0, [r7, #8]
 80021f6:	f7fe f9b5 	bl	8000564 <__aeabi_i2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fe fb43 	bl	800088c <__aeabi_ddiv>
 8002206:	4603      	mov	r3, r0
 8002208:	460c      	mov	r4, r1
 800220a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	for (int i = 0; i < arraySize; i++) {
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002212:	e036      	b.n	8002282 <edit_sineval+0xe2>
		//formula in DAC Document
		sinArray[i] = (sin((i * w) + phaseShift) + 1) * ampl;
 8002214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002216:	f7fe f9a5 	bl	8000564 <__aeabi_i2d>
 800221a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800221e:	f7fe fa0b 	bl	8000638 <__aeabi_dmul>
 8002222:	4603      	mov	r3, r0
 8002224:	460c      	mov	r4, r1
 8002226:	4618      	mov	r0, r3
 8002228:	4621      	mov	r1, r4
 800222a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800222e:	f7fe f84d 	bl	80002cc <__adddf3>
 8002232:	4603      	mov	r3, r0
 8002234:	460c      	mov	r4, r1
 8002236:	ec44 3b17 	vmov	d7, r3, r4
 800223a:	eeb0 0a47 	vmov.f32	s0, s14
 800223e:	eef0 0a67 	vmov.f32	s1, s15
 8002242:	f004 fe9d 	bl	8006f80 <sin>
 8002246:	ec51 0b10 	vmov	r0, r1, d0
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	4b17      	ldr	r3, [pc, #92]	; (80022ac <edit_sineval+0x10c>)
 8002250:	f7fe f83c 	bl	80002cc <__adddf3>
 8002254:	4603      	mov	r3, r0
 8002256:	460c      	mov	r4, r1
 8002258:	4618      	mov	r0, r3
 800225a:	4621      	mov	r1, r4
 800225c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002260:	f7fe f9ea 	bl	8000638 <__aeabi_dmul>
 8002264:	4603      	mov	r3, r0
 8002266:	460c      	mov	r4, r1
 8002268:	4618      	mov	r0, r3
 800226a:	4621      	mov	r1, r4
 800226c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	18d4      	adds	r4, r2, r3
 8002274:	f7fe fca2 	bl	8000bbc <__aeabi_d2uiz>
 8002278:	4603      	mov	r3, r0
 800227a:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < arraySize; i++) {
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	3301      	adds	r3, #1
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	429a      	cmp	r2, r3
 8002288:	dbc4      	blt.n	8002214 <edit_sineval+0x74>
	}
}
 800228a:	bf00      	nop
 800228c:	3730      	adds	r7, #48	; 0x30
 800228e:	46bd      	mov	sp, r7
 8002290:	bdb0      	pop	{r4, r5, r7, pc}
 8002292:	bf00      	nop
 8002294:	f3af 8000 	nop.w
 8002298:	4d12d84a 	.word	0x4d12d84a
 800229c:	400921fb 	.word	0x400921fb
 80022a0:	4d12d84a 	.word	0x4d12d84a
 80022a4:	401921fb 	.word	0x401921fb
 80022a8:	406f8000 	.word	0x406f8000
 80022ac:	3ff00000 	.word	0x3ff00000

080022b0 <bitToAudio>:
void bitToAudio(bool *bitStream, int arraySize, bool direction) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	4613      	mov	r3, r2
 80022bc:	71fb      	strb	r3, [r7, #7]
	if(direction){//transmitting lsb first
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d04a      	beq.n	800235a <bitToAudio+0xaa>
		for (int i = 0; i < arraySize; i++) {
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	e03f      	b.n	800234a <bitToAudio+0x9a>
			if (bitStream[i]) {
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d018      	beq.n	8002308 <bitToAudio+0x58>
				htim3.Instance->CNT = 0;
 80022d6:	4b48      	ldr	r3, [pc, #288]	; (80023f8 <bitToAudio+0x148>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2200      	movs	r2, #0
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, highFrequency, HIGHF_SAMP,
 80022de:	2300      	movs	r3, #0
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	232d      	movs	r3, #45	; 0x2d
 80022e4:	4a45      	ldr	r2, [pc, #276]	; (80023fc <bitToAudio+0x14c>)
 80022e6:	2100      	movs	r1, #0
 80022e8:	4845      	ldr	r0, [pc, #276]	; (8002400 <bitToAudio+0x150>)
 80022ea:	f001 f9cb 	bl	8003684 <HAL_DAC_Start_DMA>
						DAC_ALIGN_12B_R);
				HAL_TIM_Base_Start_IT(&htim3);
 80022ee:	4842      	ldr	r0, [pc, #264]	; (80023f8 <bitToAudio+0x148>)
 80022f0:	f002 fefe 	bl	80050f0 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80022f4:	2201      	movs	r2, #1
 80022f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022fa:	4842      	ldr	r0, [pc, #264]	; (8002404 <bitToAudio+0x154>)
 80022fc:	f002 f938 	bl	8004570 <HAL_GPIO_WritePin>
				midbit = true;
 8002300:	4b41      	ldr	r3, [pc, #260]	; (8002408 <bitToAudio+0x158>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e019      	b.n	800233c <bitToAudio+0x8c>
			} else {
				htim3.Instance->CNT = 0;
 8002308:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <bitToAudio+0x148>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2200      	movs	r2, #0
 800230e:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, lowFrequency, LOWF_SAMP,
 8002310:	2300      	movs	r3, #0
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2353      	movs	r3, #83	; 0x53
 8002316:	4a3d      	ldr	r2, [pc, #244]	; (800240c <bitToAudio+0x15c>)
 8002318:	2100      	movs	r1, #0
 800231a:	4839      	ldr	r0, [pc, #228]	; (8002400 <bitToAudio+0x150>)
 800231c:	f001 f9b2 	bl	8003684 <HAL_DAC_Start_DMA>
						DAC_ALIGN_12B_R);
				HAL_TIM_Base_Start_IT(&htim3);
 8002320:	4835      	ldr	r0, [pc, #212]	; (80023f8 <bitToAudio+0x148>)
 8002322:	f002 fee5 	bl	80050f0 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232c:	4835      	ldr	r0, [pc, #212]	; (8002404 <bitToAudio+0x154>)
 800232e:	f002 f91f 	bl	8004570 <HAL_GPIO_WritePin>
				midbit = true;
 8002332:	4b35      	ldr	r3, [pc, #212]	; (8002408 <bitToAudio+0x158>)
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
			}

			while (midbit)
 8002338:	e000      	b.n	800233c <bitToAudio+0x8c>
				__NOP();		//Just wait for timer3 IT to go off.
 800233a:	bf00      	nop
			while (midbit)
 800233c:	4b32      	ldr	r3, [pc, #200]	; (8002408 <bitToAudio+0x158>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1fa      	bne.n	800233a <bitToAudio+0x8a>
		for (int i = 0; i < arraySize; i++) {
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3301      	adds	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	429a      	cmp	r2, r3
 8002350:	dbbb      	blt.n	80022ca <bitToAudio+0x1a>
		}
		HAL_TIM_Base_Stop(&htim3);
 8002352:	4829      	ldr	r0, [pc, #164]	; (80023f8 <bitToAudio+0x148>)
 8002354:	f002 fea1 	bl	800509a <HAL_TIM_Base_Stop>
			while (midbit)
				__NOP();		//Just wait for timer3 IT to go off.
		}
		HAL_TIM_Base_Stop(&htim3);
	}
}
 8002358:	e049      	b.n	80023ee <bitToAudio+0x13e>
		for (int i = arraySize-1; i >= 0; i--) {
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3b01      	subs	r3, #1
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	e03f      	b.n	80023e2 <bitToAudio+0x132>
			if (bitStream[i]) {
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d018      	beq.n	80023a0 <bitToAudio+0xf0>
				htim3.Instance->CNT = 0;
 800236e:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <bitToAudio+0x148>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2200      	movs	r2, #0
 8002374:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, highFrequency, HIGHF_SAMP,
 8002376:	2300      	movs	r3, #0
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	232d      	movs	r3, #45	; 0x2d
 800237c:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <bitToAudio+0x14c>)
 800237e:	2100      	movs	r1, #0
 8002380:	481f      	ldr	r0, [pc, #124]	; (8002400 <bitToAudio+0x150>)
 8002382:	f001 f97f 	bl	8003684 <HAL_DAC_Start_DMA>
				HAL_TIM_Base_Start_IT(&htim3);
 8002386:	481c      	ldr	r0, [pc, #112]	; (80023f8 <bitToAudio+0x148>)
 8002388:	f002 feb2 	bl	80050f0 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800238c:	2201      	movs	r2, #1
 800238e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002392:	481c      	ldr	r0, [pc, #112]	; (8002404 <bitToAudio+0x154>)
 8002394:	f002 f8ec 	bl	8004570 <HAL_GPIO_WritePin>
				midbit = true;
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <bitToAudio+0x158>)
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e019      	b.n	80023d4 <bitToAudio+0x124>
				htim3.Instance->CNT = 0;
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <bitToAudio+0x148>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2200      	movs	r2, #0
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, lowFrequency, LOWF_SAMP,
 80023a8:	2300      	movs	r3, #0
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2353      	movs	r3, #83	; 0x53
 80023ae:	4a17      	ldr	r2, [pc, #92]	; (800240c <bitToAudio+0x15c>)
 80023b0:	2100      	movs	r1, #0
 80023b2:	4813      	ldr	r0, [pc, #76]	; (8002400 <bitToAudio+0x150>)
 80023b4:	f001 f966 	bl	8003684 <HAL_DAC_Start_DMA>
				HAL_TIM_Base_Start_IT(&htim3);
 80023b8:	480f      	ldr	r0, [pc, #60]	; (80023f8 <bitToAudio+0x148>)
 80023ba:	f002 fe99 	bl	80050f0 <HAL_TIM_Base_Start_IT>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023c4:	480f      	ldr	r0, [pc, #60]	; (8002404 <bitToAudio+0x154>)
 80023c6:	f002 f8d3 	bl	8004570 <HAL_GPIO_WritePin>
				midbit = true;
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <bitToAudio+0x158>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
			while (midbit)
 80023d0:	e000      	b.n	80023d4 <bitToAudio+0x124>
				__NOP();		//Just wait for timer3 IT to go off.
 80023d2:	bf00      	nop
			while (midbit)
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <bitToAudio+0x158>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1fa      	bne.n	80023d2 <bitToAudio+0x122>
		for (int i = arraySize-1; i >= 0; i--) {
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	3b01      	subs	r3, #1
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	dabc      	bge.n	8002362 <bitToAudio+0xb2>
		HAL_TIM_Base_Stop(&htim3);
 80023e8:	4803      	ldr	r0, [pc, #12]	; (80023f8 <bitToAudio+0x148>)
 80023ea:	f002 fe56 	bl	800509a <HAL_TIM_Base_Stop>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20002c68 	.word	0x20002c68
 80023fc:	20002b00 	.word	0x20002b00
 8002400:	20003d0c 	.word	0x20003d0c
 8002404:	40020000 	.word	0x40020000
 8002408:	20000098 	.word	0x20000098
 800240c:	20001ca4 	.word	0x20001ca4

08002410 <generateBitstream>:
void generateBitstream() {
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <generateBitstream+0x4c>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <generateBitstream+0x4c>)
 800241c:	2201      	movs	r2, #1
 800241e:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 8002420:	4b0e      	ldr	r3, [pc, #56]	; (800245c <generateBitstream+0x4c>)
 8002422:	2201      	movs	r2, #1
 8002424:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <generateBitstream+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <generateBitstream+0x4c>)
 800242e:	2200      	movs	r2, #0
 8002430:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <generateBitstream+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <generateBitstream+0x4c>)
 800243a:	2201      	movs	r2, #1
 800243c:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <generateBitstream+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <generateBitstream+0x4c>)
 8002446:	2201      	movs	r2, #1
 8002448:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <generateBitstream+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	725a      	strb	r2, [r3, #9]

}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20002af4 	.word	0x20002af4

08002460 <initOUTData>:
void initOUTData() {
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
	edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
 8002464:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002488 <initOUTData+0x28>
 8002468:	2202      	movs	r2, #2
 800246a:	21a6      	movs	r1, #166	; 0xa6
 800246c:	4807      	ldr	r0, [pc, #28]	; (800248c <initOUTData+0x2c>)
 800246e:	f7ff fe97 	bl	80021a0 <edit_sineval>
	edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
 8002472:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8002490 <initOUTData+0x30>
 8002476:	2202      	movs	r2, #2
 8002478:	215a      	movs	r1, #90	; 0x5a
 800247a:	4806      	ldr	r0, [pc, #24]	; (8002494 <initOUTData+0x34>)
 800247c:	f7ff fe90 	bl	80021a0 <edit_sineval>
	generateBitstream();
 8002480:	f7ff ffc6 	bl	8002410 <generateBitstream>
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	3f7eb852 	.word	0x3f7eb852
 800248c:	20001ca4 	.word	0x20001ca4
 8002490:	3f7d70a4 	.word	0x3f7d70a4
 8002494:	20002b00 	.word	0x20002b00

08002498 <pertobit>:
uint8_t sampusecount = 0;
uint16_t periodSaveCount = 0;
uint16_t trackBit = 0;
uint16_t bitSaveCount = 0;

int pertobit(uint32_t inputPeriod) {
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / inputPeriod;
 80024a0:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <pertobit+0x4c>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	60fb      	str	r3, [r7, #12]

	//sprintf(uartData, "Recieved frequency = %d\r\n",freq);
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	//return freq;
	if ((HIGHFREQ - FREQDEV < freq) && (freq < HIGHFREQ + FREQDEV))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80024b0:	dd06      	ble.n	80024c0 <pertobit+0x28>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f640 2227 	movw	r2, #2599	; 0xa27
 80024b8:	4293      	cmp	r3, r2
 80024ba:	dc01      	bgt.n	80024c0 <pertobit+0x28>
		return 1;
 80024bc:	2301      	movs	r3, #1
 80024be:	e00b      	b.n	80024d8 <pertobit+0x40>
	if ((LOWFREQ - FREQDEV < freq) && (freq < LOWFREQ + FREQDEV))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80024c6:	dd05      	ble.n	80024d4 <pertobit+0x3c>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80024ce:	da01      	bge.n	80024d4 <pertobit+0x3c>
		return 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e001      	b.n	80024d8 <pertobit+0x40>
	else
		return -1;
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	00989680 	.word	0x00989680

080024e8 <loadBit>:
int loadBit(){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
	int currbit = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
	int nextbit = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	603b      	str	r3, [r7, #0]

	currbit = pertobit(periodBuffer[trackBit]);
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <loadBit+0xf4>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <loadBit+0xf8>)
 80024fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ffc8 	bl	8002498 <pertobit>
 8002508:	6078      	str	r0, [r7, #4]

	//Low frequency should have 1 bit per baud
	if(currbit==0){
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d107      	bne.n	8002520 <loadBit+0x38>
		bitBuffer[bitSaveCount] = 0;
 8002510:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <loadBit+0xfc>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <loadBit+0x100>)
 8002518:	2200      	movs	r2, #0
 800251a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800251e:	e03c      	b.n	800259a <loadBit+0xb2>
	}

	//High frequency should have 2 high bits per baud
	else if(currbit==1){
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d131      	bne.n	800258a <loadBit+0xa2>
		//Gather next bit
		//ternary assign: var = (cond)?if_true:if_false;
		nextbit = (trackBit!=RX_BUFFERSIZE-1)?pertobit(periodBuffer[trackBit+1]):pertobit(periodBuffer[0]);
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <loadBit+0xf4>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800252e:	4293      	cmp	r3, r2
 8002530:	d00a      	beq.n	8002548 <loadBit+0x60>
 8002532:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <loadBit+0xf4>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	4a29      	ldr	r2, [pc, #164]	; (80025e0 <loadBit+0xf8>)
 800253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ffaa 	bl	8002498 <pertobit>
 8002544:	4603      	mov	r3, r0
 8002546:	e005      	b.n	8002554 <loadBit+0x6c>
 8002548:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <loadBit+0xf8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ffa3 	bl	8002498 <pertobit>
 8002552:	4603      	mov	r3, r0
 8002554:	603b      	str	r3, [r7, #0]

		if(nextbit==1){
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10d      	bne.n	8002578 <loadBit+0x90>
			//High frequency detected, skip next bit
			trackBit++;
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <loadBit+0xf4>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <loadBit+0xf4>)
 8002566:	801a      	strh	r2, [r3, #0]
			bitBuffer[bitSaveCount] = 1;
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <loadBit+0xfc>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <loadBit+0x100>)
 8002570:	2201      	movs	r2, #1
 8002572:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002576:	e010      	b.n	800259a <loadBit+0xb2>
		}
		else {
			bitBuffer[bitSaveCount] = -1;
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <loadBit+0xfc>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <loadBit+0x100>)
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002588:	e007      	b.n	800259a <loadBit+0xb2>
		}
	}
	//Invalid bit
	else{
		bitBuffer[bitSaveCount] = -1;
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <loadBit+0xfc>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	4619      	mov	r1, r3
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <loadBit+0x100>)
 8002592:	f04f 32ff 	mov.w	r2, #4294967295
 8002596:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	}

	//Increment trackBit
	trackBit++;
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <loadBit+0xf4>)
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	3301      	adds	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <loadBit+0xf4>)
 80025a4:	801a      	strh	r2, [r3, #0]
	if (trackBit >= RX_BUFFERSIZE)
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <loadBit+0xf4>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ae:	d302      	bcc.n	80025b6 <loadBit+0xce>
		trackBit = 0;
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <loadBit+0xf4>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	801a      	strh	r2, [r3, #0]

	//Increment bitSaveCount
	bitSaveCount++;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <loadBit+0xfc>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <loadBit+0xfc>)
 80025c0:	801a      	strh	r2, [r3, #0]
	if (bitSaveCount >= RX_BUFFERSIZE)
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <loadBit+0xfc>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	d302      	bcc.n	80025d2 <loadBit+0xea>
		bitSaveCount = 0;
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <loadBit+0xfc>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	801a      	strh	r2, [r3, #0]

	return currbit;
 80025d2:	687b      	ldr	r3, [r7, #4]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	2000009e 	.word	0x2000009e
 80025e0:	20002d08 	.word	0x20002d08
 80025e4:	200000a0 	.word	0x200000a0
 80025e8:	20003da0 	.word	0x20003da0

080025ec <loadOctet>:
int loadOctet(bool* bufferptr) {
 80025ec:	b5b0      	push	{r4, r5, r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	int bit;
	bool myPtr[8];
	bool isFlag = true;
 80025f4:	2301      	movs	r3, #1
 80025f6:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < 8; i++) {
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	e024      	b.n	8002648 <loadOctet+0x5c>
		bit = loadBit();
 80025fe:	f7ff ff73 	bl	80024e8 <loadBit>
 8002602:	6138      	str	r0, [r7, #16]
        if(bit < 0){
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	da02      	bge.n	8002610 <loadOctet+0x24>
        	return -1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	e07d      	b.n	800270c <loadOctet+0x120>
        }
		myPtr[i] = bit;
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	bf14      	ite	ne
 8002616:	2301      	movne	r3, #1
 8002618:	2300      	moveq	r3, #0
 800261a:	b2d9      	uxtb	r1, r3
 800261c:	f107 0208 	add.w	r2, r7, #8
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	460a      	mov	r2, r1
 8002626:	701a      	strb	r2, [r3, #0]
        if(myPtr[i] != AX25TBYTE[i]){
 8002628:	f107 0208 	add.w	r2, r7, #8
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	4413      	add	r3, r2
 8002630:	781a      	ldrb	r2, [r3, #0]
 8002632:	4938      	ldr	r1, [pc, #224]	; (8002714 <loadOctet+0x128>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	440b      	add	r3, r1
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d001      	beq.n	8002642 <loadOctet+0x56>
        	isFlag = false;
 800263e:	2300      	movs	r3, #0
 8002640:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) {
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	3301      	adds	r3, #1
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2b07      	cmp	r3, #7
 800264c:	ddd7      	ble.n	80025fe <loadOctet+0x12>
        }
    }
	//If this is not a flag, copy the values into the buffer pointer
	if(!isFlag){
 800264e:	7ffb      	ldrb	r3, [r7, #31]
 8002650:	f083 0301 	eor.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d057      	beq.n	800270a <loadOctet+0x11e>
		sprintf(uartData, "Printing octet = ");
 800265a:	4a2f      	ldr	r2, [pc, #188]	; (8002718 <loadOctet+0x12c>)
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <loadOctet+0x130>)
 800265e:	4615      	mov	r5, r2
 8002660:	461c      	mov	r4, r3
 8002662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002664:	6028      	str	r0, [r5, #0]
 8002666:	6069      	str	r1, [r5, #4]
 8002668:	60aa      	str	r2, [r5, #8]
 800266a:	60eb      	str	r3, [r5, #12]
 800266c:	8823      	ldrh	r3, [r4, #0]
 800266e:	822b      	strh	r3, [r5, #16]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002670:	4829      	ldr	r0, [pc, #164]	; (8002718 <loadOctet+0x12c>)
 8002672:	f7fd fdcd 	bl	8000210 <strlen>
 8002676:	4603      	mov	r3, r0
 8002678:	b29a      	uxth	r2, r3
 800267a:	230a      	movs	r3, #10
 800267c:	4926      	ldr	r1, [pc, #152]	; (8002718 <loadOctet+0x12c>)
 800267e:	4828      	ldr	r0, [pc, #160]	; (8002720 <loadOctet+0x134>)
 8002680:	f003 f959 	bl	8005936 <HAL_UART_Transmit>

		for(int i = 0;i<8;i++){
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	e02c      	b.n	80026e4 <loadOctet+0xf8>
			bufferptr[7-i] = (myPtr[7-i]==1)?true:false;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f1c3 0307 	rsb	r3, r3, #7
 8002690:	f107 0220 	add.w	r2, r7, #32
 8002694:	4413      	add	r3, r2
 8002696:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f1c3 0307 	rsb	r3, r3, #7
 80026a0:	4619      	mov	r1, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	440b      	add	r3, r1
 80026a6:	701a      	strb	r2, [r3, #0]
			rxBit_count++;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <loadOctet+0x138>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3301      	adds	r3, #1
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <loadOctet+0x138>)
 80026b0:	6013      	str	r3, [r2, #0]
			sprintf(uartData, " %d ",bufferptr[7-i]);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f1c3 0307 	rsb	r3, r3, #7
 80026b8:	461a      	mov	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4919      	ldr	r1, [pc, #100]	; (8002728 <loadOctet+0x13c>)
 80026c4:	4814      	ldr	r0, [pc, #80]	; (8002718 <loadOctet+0x12c>)
 80026c6:	f004 f85f 	bl	8006788 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80026ca:	4813      	ldr	r0, [pc, #76]	; (8002718 <loadOctet+0x12c>)
 80026cc:	f7fd fda0 	bl	8000210 <strlen>
 80026d0:	4603      	mov	r3, r0
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	230a      	movs	r3, #10
 80026d6:	4910      	ldr	r1, [pc, #64]	; (8002718 <loadOctet+0x12c>)
 80026d8:	4811      	ldr	r0, [pc, #68]	; (8002720 <loadOctet+0x134>)
 80026da:	f003 f92c 	bl	8005936 <HAL_UART_Transmit>
		for(int i = 0;i<8;i++){
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	3301      	adds	r3, #1
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b07      	cmp	r3, #7
 80026e8:	ddcf      	ble.n	800268a <loadOctet+0x9e>
		}
		sprintf(uartData, "\r\n");
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <loadOctet+0x12c>)
 80026ec:	4a0f      	ldr	r2, [pc, #60]	; (800272c <loadOctet+0x140>)
 80026ee:	8811      	ldrh	r1, [r2, #0]
 80026f0:	7892      	ldrb	r2, [r2, #2]
 80026f2:	8019      	strh	r1, [r3, #0]
 80026f4:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80026f6:	4808      	ldr	r0, [pc, #32]	; (8002718 <loadOctet+0x12c>)
 80026f8:	f7fd fd8a 	bl	8000210 <strlen>
 80026fc:	4603      	mov	r3, r0
 80026fe:	b29a      	uxth	r2, r3
 8002700:	230a      	movs	r3, #10
 8002702:	4905      	ldr	r1, [pc, #20]	; (8002718 <loadOctet+0x12c>)
 8002704:	4806      	ldr	r0, [pc, #24]	; (8002720 <loadOctet+0x134>)
 8002706:	f003 f916 	bl	8005936 <HAL_UART_Transmit>
	}
	return isFlag;
 800270a:	7ffb      	ldrb	r3, [r7, #31]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bdb0      	pop	{r4, r5, r7, pc}
 8002714:	20000000 	.word	0x20000000
 8002718:	20001f3c 	.word	0x20001f3c
 800271c:	08008438 	.word	0x08008438
 8002720:	20003d60 	.word	0x20003d60
 8002724:	20000094 	.word	0x20000094
 8002728:	0800844c 	.word	0x0800844c
 800272c:	08008454 	.word	0x08008454

08002730 <streamGet>:
int streamGet() {
 8002730:	b5b0      	push	{r4, r5, r7, lr}
 8002732:	b090      	sub	sp, #64	; 0x40
 8002734:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002736:	4b72      	ldr	r3, [pc, #456]	; (8002900 <streamGet+0x1d0>)
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28

	int byteArray[8];
	int max_octets = (int)(AX25_PACKET_MAX)/8;
 800273a:	f240 134b 	movw	r3, #331	; 0x14b
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
	int octet_count,good_octet;
	bool gotflag;

	//Just do this unless we need to toggle
	while(!changeMode){
 8002740:	e0cf      	b.n	80028e2 <streamGet+0x1b2>
		gotflag = false;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//Slide bits
		for(int i = 0; i < 7; i++){
 8002748:	2300      	movs	r3, #0
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
 800274c:	e011      	b.n	8002772 <streamGet+0x42>
			byteArray[i] = byteArray[i+1];
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	3301      	adds	r3, #1
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002758:	4413      	add	r3, r2
 800275a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002766:	440b      	add	r3, r1
 8002768:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 7; i++){
 800276c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276e:	3301      	adds	r3, #1
 8002770:	633b      	str	r3, [r7, #48]	; 0x30
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	2b06      	cmp	r3, #6
 8002776:	ddea      	ble.n	800274e <streamGet+0x1e>
		}
		byteArray[7] = loadBit();
 8002778:	f7ff feb6 	bl	80024e8 <loadBit>
 800277c:	4603      	mov	r3, r0
 800277e:	623b      	str	r3, [r7, #32]
		//sprintf(uartData, "Got bit %d\r\n",byteArray[7]);
		//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		//Detect AX25 flag bytes
		for(int i = 0;i < 8; i++){
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002784:	e019      	b.n	80027ba <streamGet+0x8a>
			//If the byte isn't lined up, break loop
			if(byteArray[i]!=AX25TBYTE[i]) {
 8002786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800278e:	4413      	add	r3, r2
 8002790:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002794:	495b      	ldr	r1, [pc, #364]	; (8002904 <streamGet+0x1d4>)
 8002796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002798:	440a      	add	r2, r1
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	4293      	cmp	r3, r2
 800279e:	d003      	beq.n	80027a8 <streamGet+0x78>
				gotflag = false;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80027a6:	e00b      	b.n	80027c0 <streamGet+0x90>
			}
			//If the loop makes it to the lowest bit, the flag should be lined up
			else if(i==7){
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	2b07      	cmp	r3, #7
 80027ac:	d102      	bne.n	80027b4 <streamGet+0x84>
				gotflag = true;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0;i < 8; i++){
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	3301      	adds	r3, #1
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	2b07      	cmp	r3, #7
 80027be:	dde2      	ble.n	8002786 <streamGet+0x56>
			}
		}

		//Got flag
		if(gotflag){
 80027c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 808c 	beq.w	80028e2 <streamGet+0x1b2>
			sprintf(uartData, "Start AX.25 Flag Detected\r\n");
 80027ca:	4a4f      	ldr	r2, [pc, #316]	; (8002908 <streamGet+0x1d8>)
 80027cc:	4b4f      	ldr	r3, [pc, #316]	; (800290c <streamGet+0x1dc>)
 80027ce:	4615      	mov	r5, r2
 80027d0:	461c      	mov	r4, r3
 80027d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d4:	6028      	str	r0, [r5, #0]
 80027d6:	6069      	str	r1, [r5, #4]
 80027d8:	60aa      	str	r2, [r5, #8]
 80027da:	60eb      	str	r3, [r5, #12]
 80027dc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80027de:	6128      	str	r0, [r5, #16]
 80027e0:	6169      	str	r1, [r5, #20]
 80027e2:	61aa      	str	r2, [r5, #24]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80027e4:	4848      	ldr	r0, [pc, #288]	; (8002908 <streamGet+0x1d8>)
 80027e6:	f7fd fd13 	bl	8000210 <strlen>
 80027ea:	4603      	mov	r3, r0
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	230a      	movs	r3, #10
 80027f0:	4945      	ldr	r1, [pc, #276]	; (8002908 <streamGet+0x1d8>)
 80027f2:	4847      	ldr	r0, [pc, #284]	; (8002910 <streamGet+0x1e0>)
 80027f4:	f003 f89f 	bl	8005936 <HAL_UART_Transmit>
			octet_count  = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	63fb      	str	r3, [r7, #60]	; 0x3c

			//Until AX.25 buffer overflows, continue reading octets
			good_octet = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38
			while( (good_octet==0) && (octet_count < max_octets) ){
 8002800:	e00a      	b.n	8002818 <streamGet+0xe8>
				good_octet = loadOctet(&local_packet->AX25_PACKET[octet_count*8]);
 8002802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002808:	4413      	add	r3, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff feee 	bl	80025ec <loadOctet>
 8002810:	63b8      	str	r0, [r7, #56]	; 0x38
				//sprintf(uartData, "Loaded octet %d out of %d\r\n",octet_count,max_octets);
				//sprintf(uartData, "good_octet: %d\r\n",good_octet);
				//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

				octet_count+=1;
 8002812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002814:	3301      	adds	r3, #1
 8002816:	63fb      	str	r3, [r7, #60]	; 0x3c
			while( (good_octet==0) && (octet_count < max_octets) ){
 8002818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281a:	2b00      	cmp	r3, #0
 800281c:	d103      	bne.n	8002826 <streamGet+0xf6>
 800281e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	429a      	cmp	r2, r3
 8002824:	dbed      	blt.n	8002802 <streamGet+0xd2>
			}

			//If ax.25 buffer overflows or an octet was bad, this was a bad packet
			if((octet_count >= max_octets) || (good_octet!=1)){
 8002826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	429a      	cmp	r2, r3
 800282c:	da02      	bge.n	8002834 <streamGet+0x104>
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002830:	2b01      	cmp	r3, #1
 8002832:	d00f      	beq.n	8002854 <streamGet+0x124>
				sprintf(uartData, "Bad packet! Not enough octets\r\n\n",octet_count);
 8002834:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002836:	4937      	ldr	r1, [pc, #220]	; (8002914 <streamGet+0x1e4>)
 8002838:	4833      	ldr	r0, [pc, #204]	; (8002908 <streamGet+0x1d8>)
 800283a:	f003 ffa5 	bl	8006788 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800283e:	4832      	ldr	r0, [pc, #200]	; (8002908 <streamGet+0x1d8>)
 8002840:	f7fd fce6 	bl	8000210 <strlen>
 8002844:	4603      	mov	r3, r0
 8002846:	b29a      	uxth	r2, r3
 8002848:	230a      	movs	r3, #10
 800284a:	492f      	ldr	r1, [pc, #188]	; (8002908 <streamGet+0x1d8>)
 800284c:	4830      	ldr	r0, [pc, #192]	; (8002910 <streamGet+0x1e0>)
 800284e:	f003 f872 	bl	8005936 <HAL_UART_Transmit>
 8002852:	e046      	b.n	80028e2 <streamGet+0x1b2>
			}
			//
			else if(octet_count == 1){
 8002854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002856:	2b01      	cmp	r3, #1
 8002858:	d12a      	bne.n	80028b0 <streamGet+0x180>
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n");
 800285a:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <streamGet+0x1d8>)
 800285c:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <streamGet+0x1e8>)
 800285e:	4615      	mov	r5, r2
 8002860:	461c      	mov	r4, r3
 8002862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002864:	6028      	str	r0, [r5, #0]
 8002866:	6069      	str	r1, [r5, #4]
 8002868:	60aa      	str	r2, [r5, #8]
 800286a:	60eb      	str	r3, [r5, #12]
 800286c:	cc03      	ldmia	r4!, {r0, r1}
 800286e:	6128      	str	r0, [r5, #16]
 8002870:	6169      	str	r1, [r5, #20]
 8002872:	8823      	ldrh	r3, [r4, #0]
 8002874:	78a2      	ldrb	r2, [r4, #2]
 8002876:	832b      	strh	r3, [r5, #24]
 8002878:	4613      	mov	r3, r2
 800287a:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800287c:	4822      	ldr	r0, [pc, #136]	; (8002908 <streamGet+0x1d8>)
 800287e:	f7fd fcc7 	bl	8000210 <strlen>
 8002882:	4603      	mov	r3, r0
 8002884:	b29a      	uxth	r2, r3
 8002886:	230a      	movs	r3, #10
 8002888:	491f      	ldr	r1, [pc, #124]	; (8002908 <streamGet+0x1d8>)
 800288a:	4821      	ldr	r0, [pc, #132]	; (8002910 <streamGet+0x1e0>)
 800288c:	f003 f853 	bl	8005936 <HAL_UART_Transmit>
				sprintf(uartData, "Bad packet! Not enough octetes.\r\n\n",octet_count);
 8002890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002892:	4922      	ldr	r1, [pc, #136]	; (800291c <streamGet+0x1ec>)
 8002894:	481c      	ldr	r0, [pc, #112]	; (8002908 <streamGet+0x1d8>)
 8002896:	f003 ff77 	bl	8006788 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800289a:	481b      	ldr	r0, [pc, #108]	; (8002908 <streamGet+0x1d8>)
 800289c:	f7fd fcb8 	bl	8000210 <strlen>
 80028a0:	4603      	mov	r3, r0
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	230a      	movs	r3, #10
 80028a6:	4918      	ldr	r1, [pc, #96]	; (8002908 <streamGet+0x1d8>)
 80028a8:	4819      	ldr	r0, [pc, #100]	; (8002910 <streamGet+0x1e0>)
 80028aa:	f003 f844 	bl	8005936 <HAL_UART_Transmit>
 80028ae:	e018      	b.n	80028e2 <streamGet+0x1b2>
			}
			//If ax.25 buffer does not overflow, this was a good packet
			else {
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n\n");
 80028b0:	4a15      	ldr	r2, [pc, #84]	; (8002908 <streamGet+0x1d8>)
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <streamGet+0x1f0>)
 80028b4:	4615      	mov	r5, r2
 80028b6:	461c      	mov	r4, r3
 80028b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ba:	6028      	str	r0, [r5, #0]
 80028bc:	6069      	str	r1, [r5, #4]
 80028be:	60aa      	str	r2, [r5, #8]
 80028c0:	60eb      	str	r3, [r5, #12]
 80028c2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80028c4:	6128      	str	r0, [r5, #16]
 80028c6:	6169      	str	r1, [r5, #20]
 80028c8:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80028ca:	480f      	ldr	r0, [pc, #60]	; (8002908 <streamGet+0x1d8>)
 80028cc:	f7fd fca0 	bl	8000210 <strlen>
 80028d0:	4603      	mov	r3, r0
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	230a      	movs	r3, #10
 80028d6:	490c      	ldr	r1, [pc, #48]	; (8002908 <streamGet+0x1d8>)
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <streamGet+0x1e0>)
 80028da:	f003 f82c 	bl	8005936 <HAL_UART_Transmit>

				return 1;
 80028de:	2301      	movs	r3, #1
 80028e0:	e009      	b.n	80028f6 <streamGet+0x1c6>
	while(!changeMode){
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <streamGet+0x1f4>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	f083 0301 	eor.w	r3, r3, #1
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f af28 	bne.w	8002742 <streamGet+0x12>
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
	//Break if mode needs to change
	if(toggleMode)
		return -1;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3740      	adds	r7, #64	; 0x40
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bdb0      	pop	{r4, r5, r7, pc}
 80028fe:	bf00      	nop
 8002900:	200000b0 	.word	0x200000b0
 8002904:	20000000 	.word	0x20000000
 8002908:	20001f3c 	.word	0x20001f3c
 800290c:	08008458 	.word	0x08008458
 8002910:	20003d60 	.word	0x20003d60
 8002914:	08008474 	.word	0x08008474
 8002918:	08008498 	.word	0x08008498
 800291c:	080084b4 	.word	0x080084b4
 8002920:	080084d8 	.word	0x080084d8
 8002924:	20000099 	.word	0x20000099

08002928 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN PV */

/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <HAL_UART_RxCpltCallback+0x20>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 800293a:	f7ff f84b 	bl	80019d4 <UART2_EXCEPTION_CALLBACK>
  }
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40004400 	.word	0x40004400

0800294c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002950:	f000 fca0 	bl	8003294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002954:	f000 f81e 	bl	8002994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002958:	f000 f9a0 	bl	8002c9c <MX_GPIO_Init>
  MX_DMA_Init();
 800295c:	f000 f97e 	bl	8002c5c <MX_DMA_Init>
  MX_DAC_Init();
 8002960:	f000 f886 	bl	8002a70 <MX_DAC_Init>
  MX_TIM2_Init();
 8002964:	f000 f8ae 	bl	8002ac4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002968:	f000 f8f8 	bl	8002b5c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800296c:	f000 f944 	bl	8002bf8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8002970:	4806      	ldr	r0, [pc, #24]	; (800298c <main+0x40>)
 8002972:	f002 fb6e 	bl	8005052 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002976:	4806      	ldr	r0, [pc, #24]	; (8002990 <main+0x44>)
 8002978:	f002 fbba 	bl	80050f0 <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 800297c:	f000 fa5c 	bl	8002e38 <uart_gpio_init>

	initProgram(false);
 8002980:	2000      	movs	r0, #0
 8002982:	f7ff fb1d 	bl	8001fc0 <initProgram>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tx_rx();
 8002986:	f7fe fb25 	bl	8000fd4 <tx_rx>
 800298a:	e7fc      	b.n	8002986 <main+0x3a>
 800298c:	20003d20 	.word	0x20003d20
 8002990:	20002c68 	.word	0x20002c68

08002994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b094      	sub	sp, #80	; 0x50
 8002998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	2234      	movs	r2, #52	; 0x34
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 fee7 	bl	8006776 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029a8:	f107 0308 	add.w	r3, r7, #8
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	2300      	movs	r3, #0
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <SystemClock_Config+0xd4>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	4a29      	ldr	r2, [pc, #164]	; (8002a68 <SystemClock_Config+0xd4>)
 80029c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c6:	6413      	str	r3, [r2, #64]	; 0x40
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <SystemClock_Config+0xd4>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80029d4:	2300      	movs	r3, #0
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <SystemClock_Config+0xd8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029e0:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <SystemClock_Config+0xd8>)
 80029e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <SystemClock_Config+0xd8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029f4:	2301      	movs	r3, #1
 80029f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029fe:	2302      	movs	r3, #2
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002a0c:	235a      	movs	r3, #90	; 0x5a
 8002a0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a10:	2302      	movs	r3, #2
 8002a12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a14:	2302      	movs	r3, #2
 8002a16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 f891 	bl	8004b48 <HAL_RCC_OscConfig>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002a2c:	f000 fa2c 	bl	8002e88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a30:	230f      	movs	r3, #15
 8002a32:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a34:	2302      	movs	r3, #2
 8002a36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a46:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a48:	f107 0308 	add.w	r3, r7, #8
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 fdc0 	bl	80045d4 <HAL_RCC_ClockConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002a5a:	f000 fa15 	bl	8002e88 <Error_Handler>
  }
}
 8002a5e:	bf00      	nop
 8002a60:	3750      	adds	r7, #80	; 0x50
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40007000 	.word	0x40007000

08002a70 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002a76:	463b      	mov	r3, r7
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <MX_DAC_Init+0x4c>)
 8002a80:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <MX_DAC_Init+0x50>)
 8002a82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002a84:	480d      	ldr	r0, [pc, #52]	; (8002abc <MX_DAC_Init+0x4c>)
 8002a86:	f000 fdda 	bl	800363e <HAL_DAC_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002a90:	f000 f9fa 	bl	8002e88 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002a94:	2324      	movs	r3, #36	; 0x24
 8002a96:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4806      	ldr	r0, [pc, #24]	; (8002abc <MX_DAC_Init+0x4c>)
 8002aa4:	f000 fefb 	bl	800389e <HAL_DAC_ConfigChannel>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002aae:	f000 f9eb 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20003d0c 	.word	0x20003d0c
 8002ac0:	40007400 	.word	0x40007400

08002ac4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aca:	f107 0308 	add.w	r3, r7, #8
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad8:	463b      	mov	r3, r7
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <MX_TIM2_Init+0x94>)
 8002ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <MX_TIM2_Init+0x94>)
 8002aea:	2208      	movs	r2, #8
 8002aec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <MX_TIM2_Init+0x94>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <MX_TIM2_Init+0x94>)
 8002af6:	2263      	movs	r2, #99	; 0x63
 8002af8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afa:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <MX_TIM2_Init+0x94>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <MX_TIM2_Init+0x94>)
 8002b02:	2280      	movs	r2, #128	; 0x80
 8002b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b06:	4814      	ldr	r0, [pc, #80]	; (8002b58 <MX_TIM2_Init+0x94>)
 8002b08:	f002 fa78 	bl	8004ffc <HAL_TIM_Base_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002b12:	f000 f9b9 	bl	8002e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b1c:	f107 0308 	add.w	r3, r7, #8
 8002b20:	4619      	mov	r1, r3
 8002b22:	480d      	ldr	r0, [pc, #52]	; (8002b58 <MX_TIM2_Init+0x94>)
 8002b24:	f002 fc10 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002b2e:	f000 f9ab 	bl	8002e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b32:	2320      	movs	r3, #32
 8002b34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b3a:	463b      	mov	r3, r7
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4806      	ldr	r0, [pc, #24]	; (8002b58 <MX_TIM2_Init+0x94>)
 8002b40:	f002 fe1c 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002b4a:	f000 f99d 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20003d20 	.word	0x20003d20

08002b5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b62:	f107 0308 	add.w	r3, r7, #8
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b70:	463b      	mov	r3, r7
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b78:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <MX_TIM3_Init+0x94>)
 8002b7a:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <MX_TIM3_Init+0x98>)
 8002b7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <MX_TIM3_Init+0x94>)
 8002b80:	2259      	movs	r2, #89	; 0x59
 8002b82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <MX_TIM3_Init+0x94>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <MX_TIM3_Init+0x94>)
 8002b8c:	f240 3241 	movw	r2, #833	; 0x341
 8002b90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <MX_TIM3_Init+0x94>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <MX_TIM3_Init+0x94>)
 8002b9a:	2280      	movs	r2, #128	; 0x80
 8002b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b9e:	4814      	ldr	r0, [pc, #80]	; (8002bf0 <MX_TIM3_Init+0x94>)
 8002ba0:	f002 fa2c 	bl	8004ffc <HAL_TIM_Base_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002baa:	f000 f96d 	bl	8002e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bb4:	f107 0308 	add.w	r3, r7, #8
 8002bb8:	4619      	mov	r1, r3
 8002bba:	480d      	ldr	r0, [pc, #52]	; (8002bf0 <MX_TIM3_Init+0x94>)
 8002bbc:	f002 fbc4 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002bc6:	f000 f95f 	bl	8002e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bd2:	463b      	mov	r3, r7
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4806      	ldr	r0, [pc, #24]	; (8002bf0 <MX_TIM3_Init+0x94>)
 8002bd8:	f002 fdd0 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002be2:	f000 f951 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002be6:	bf00      	nop
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20002c68 	.word	0x20002c68
 8002bf4:	40000400 	.word	0x40000400

08002bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bfc:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <MX_USART2_UART_Init+0x5c>)
 8002bfe:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <MX_USART2_UART_Init+0x60>)
 8002c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <MX_USART2_UART_Init+0x5c>)
 8002c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <MX_USART2_UART_Init+0x5c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <MX_USART2_UART_Init+0x5c>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <MX_USART2_UART_Init+0x5c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c1c:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <MX_USART2_UART_Init+0x5c>)
 8002c1e:	220c      	movs	r2, #12
 8002c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c22:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <MX_USART2_UART_Init+0x5c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <MX_USART2_UART_Init+0x5c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c2e:	4809      	ldr	r0, [pc, #36]	; (8002c54 <MX_USART2_UART_Init+0x5c>)
 8002c30:	f002 fe34 	bl	800589c <HAL_UART_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c3a:	f000 f925 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2100      	movs	r1, #0
 8002c42:	2026      	movs	r0, #38	; 0x26
 8002c44:	f000 fcb7 	bl	80035b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c48:	2026      	movs	r0, #38	; 0x26
 8002c4a:	f000 fcd0 	bl	80035ee <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20003d60 	.word	0x20003d60
 8002c58:	40004400 	.word	0x40004400

08002c5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <MX_DMA_Init+0x3c>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a0b      	ldr	r2, [pc, #44]	; (8002c98 <MX_DMA_Init+0x3c>)
 8002c6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <MX_DMA_Init+0x3c>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	2010      	movs	r0, #16
 8002c84:	f000 fc97 	bl	80035b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002c88:	2010      	movs	r0, #16
 8002c8a:	f000 fcb0 	bl	80035ee <HAL_NVIC_EnableIRQ>

}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800

08002c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca2:	f107 0314 	add.w	r3, r7, #20
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	4b45      	ldr	r3, [pc, #276]	; (8002dcc <MX_GPIO_Init+0x130>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4a44      	ldr	r2, [pc, #272]	; (8002dcc <MX_GPIO_Init+0x130>)
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <MX_GPIO_Init+0x130>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	4b3e      	ldr	r3, [pc, #248]	; (8002dcc <MX_GPIO_Init+0x130>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <MX_GPIO_Init+0x130>)
 8002cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <MX_GPIO_Init+0x130>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <MX_GPIO_Init+0x130>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a36      	ldr	r2, [pc, #216]	; (8002dcc <MX_GPIO_Init+0x130>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <MX_GPIO_Init+0x130>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	4b30      	ldr	r3, [pc, #192]	; (8002dcc <MX_GPIO_Init+0x130>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a2f      	ldr	r2, [pc, #188]	; (8002dcc <MX_GPIO_Init+0x130>)
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <MX_GPIO_Init+0x130>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002d22:	2200      	movs	r2, #0
 8002d24:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002d28:	4829      	ldr	r0, [pc, #164]	; (8002dd0 <MX_GPIO_Init+0x134>)
 8002d2a:	f001 fc21 	bl	8004570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2110      	movs	r1, #16
 8002d32:	4828      	ldr	r0, [pc, #160]	; (8002dd4 <MX_GPIO_Init+0x138>)
 8002d34:	f001 fc1c 	bl	8004570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d3e:	4b26      	ldr	r3, [pc, #152]	; (8002dd8 <MX_GPIO_Init+0x13c>)
 8002d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d46:	f107 0314 	add.w	r3, r7, #20
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4821      	ldr	r0, [pc, #132]	; (8002dd4 <MX_GPIO_Init+0x138>)
 8002d4e:	f001 fa7d 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d52:	2301      	movs	r3, #1
 8002d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d56:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <MX_GPIO_Init+0x140>)
 8002d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	4619      	mov	r1, r3
 8002d64:	481a      	ldr	r0, [pc, #104]	; (8002dd0 <MX_GPIO_Init+0x134>)
 8002d66:	f001 fa71 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8002d6a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d70:	2301      	movs	r3, #1
 8002d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	4619      	mov	r1, r3
 8002d82:	4813      	ldr	r0, [pc, #76]	; (8002dd0 <MX_GPIO_Init+0x134>)
 8002d84:	f001 fa62 	bl	800424c <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8002d88:	2310      	movs	r3, #16
 8002d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <MX_GPIO_Init+0x138>)
 8002da0:	f001 fa54 	bl	800424c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002da4:	2200      	movs	r2, #0
 8002da6:	2100      	movs	r1, #0
 8002da8:	2006      	movs	r0, #6
 8002daa:	f000 fc04 	bl	80035b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002dae:	2006      	movs	r0, #6
 8002db0:	f000 fc1d 	bl	80035ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002db4:	2200      	movs	r2, #0
 8002db6:	2100      	movs	r1, #0
 8002db8:	2028      	movs	r0, #40	; 0x28
 8002dba:	f000 fbfc 	bl	80035b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dbe:	2028      	movs	r0, #40	; 0x28
 8002dc0:	f000 fc15 	bl	80035ee <HAL_NVIC_EnableIRQ>

}
 8002dc4:	bf00      	nop
 8002dc6:	3728      	adds	r7, #40	; 0x28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40020800 	.word	0x40020800
 8002dd8:	10210000 	.word	0x10210000
 8002ddc:	10110000 	.word	0x10110000

08002de0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d102      	bne.n	8002df6 <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 8002df0:	f7ff f998 	bl	8002124 <Tim3IT>
	else
		__NOP();
}
 8002df4:	e000      	b.n	8002df8 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 8002df6:	bf00      	nop
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20002c68 	.word	0x20002c68

08002e04 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 8002e14:	f7ff f9ac 	bl	8002170 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1e:	d103      	bne.n	8002e28 <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <HAL_GPIO_EXTI_Callback+0x30>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 8002e26:	e000      	b.n	8002e2a <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 8002e28:	bf00      	nop
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000099 	.word	0x20000099

08002e38 <uart_gpio_init>:


void uart_gpio_init()
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <uart_gpio_init+0x48>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <uart_gpio_init+0x48>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <uart_gpio_init+0x48>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e62:	2301      	movs	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e6a:	2307      	movs	r3, #7
 8002e6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4804      	ldr	r0, [pc, #16]	; (8002e84 <uart_gpio_init+0x4c>)
 8002e74:	f001 f9ea 	bl	800424c <HAL_GPIO_Init>
}
 8002e78:	bf00      	nop
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020000 	.word	0x40020000

08002e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	4a0f      	ldr	r2, [pc, #60]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eac:	6453      	str	r3, [r2, #68]	; 0x44
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a08      	ldr	r2, [pc, #32]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ed6:	2007      	movs	r0, #7
 8002ed8:	f000 fb62 	bl	80035a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2f      	ldr	r2, [pc, #188]	; (8002fc4 <HAL_DAC_MspInit+0xdc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d158      	bne.n	8002fbc <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <HAL_DAC_MspInit+0xe0>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	4a2d      	ldr	r2, [pc, #180]	; (8002fc8 <HAL_DAC_MspInit+0xe0>)
 8002f14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f18:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_DAC_MspInit+0xe0>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <HAL_DAC_MspInit+0xe0>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <HAL_DAC_MspInit+0xe0>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_DAC_MspInit+0xe0>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f42:	2310      	movs	r3, #16
 8002f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f46:	2303      	movs	r3, #3
 8002f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4e:	f107 0314 	add.w	r3, r7, #20
 8002f52:	4619      	mov	r1, r3
 8002f54:	481d      	ldr	r0, [pc, #116]	; (8002fcc <HAL_DAC_MspInit+0xe4>)
 8002f56:	f001 f979 	bl	800424c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <HAL_DAC_MspInit+0xec>)
 8002f5e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002f62:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002f66:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002f6a:	2240      	movs	r2, #64	; 0x40
 8002f6c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f6e:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002f74:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f7a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002f7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f82:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002f86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f8a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f92:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002fa0:	480b      	ldr	r0, [pc, #44]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002fa2:	f000 fd53 	bl	8003a4c <HAL_DMA_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8002fac:	f7ff ff6c 	bl	8002e88 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002fb4:	609a      	str	r2, [r3, #8]
 8002fb6:	4a06      	ldr	r2, [pc, #24]	; (8002fd0 <HAL_DAC_MspInit+0xe8>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002fbc:	bf00      	nop
 8002fbe:	3728      	adds	r7, #40	; 0x28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40007400 	.word	0x40007400
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020000 	.word	0x40020000
 8002fd0:	20002ca8 	.word	0x20002ca8
 8002fd4:	40026088 	.word	0x40026088

08002fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe8:	d10e      	bne.n	8003008 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b16      	ldr	r3, [pc, #88]	; (8003048 <HAL_TIM_Base_MspInit+0x70>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a15      	ldr	r2, [pc, #84]	; (8003048 <HAL_TIM_Base_MspInit+0x70>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffa:	4b13      	ldr	r3, [pc, #76]	; (8003048 <HAL_TIM_Base_MspInit+0x70>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003006:	e01a      	b.n	800303e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_TIM_Base_MspInit+0x74>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d115      	bne.n	800303e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <HAL_TIM_Base_MspInit+0x70>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <HAL_TIM_Base_MspInit+0x70>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	6413      	str	r3, [r2, #64]	; 0x40
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_TIM_Base_MspInit+0x70>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	2100      	movs	r1, #0
 8003032:	201d      	movs	r0, #29
 8003034:	f000 fabf 	bl	80035b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003038:	201d      	movs	r0, #29
 800303a:	f000 fad8 	bl	80035ee <HAL_NVIC_EnableIRQ>
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	40000400 	.word	0x40000400

08003050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <HAL_UART_MspInit+0x94>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d133      	bne.n	80030da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <HAL_UART_MspInit+0x98>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <HAL_UART_MspInit+0x98>)
 800307c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_UART_MspInit+0x98>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <HAL_UART_MspInit+0x98>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	4a14      	ldr	r2, [pc, #80]	; (80030e8 <HAL_UART_MspInit+0x98>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6313      	str	r3, [r2, #48]	; 0x30
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_UART_MspInit+0x98>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030aa:	230c      	movs	r3, #12
 80030ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b6:	2303      	movs	r3, #3
 80030b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030ba:	2307      	movs	r3, #7
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	4619      	mov	r1, r3
 80030c4:	4809      	ldr	r0, [pc, #36]	; (80030ec <HAL_UART_MspInit+0x9c>)
 80030c6:	f001 f8c1 	bl	800424c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2100      	movs	r1, #0
 80030ce:	2026      	movs	r0, #38	; 0x26
 80030d0:	f000 fa71 	bl	80035b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030d4:	2026      	movs	r0, #38	; 0x26
 80030d6:	f000 fa8a 	bl	80035ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030da:	bf00      	nop
 80030dc:	3728      	adds	r7, #40	; 0x28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40004400 	.word	0x40004400
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40020000 	.word	0x40020000

080030f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003102:	e7fe      	b.n	8003102 <HardFault_Handler+0x4>

08003104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003108:	e7fe      	b.n	8003108 <MemManage_Handler+0x4>

0800310a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800310e:	e7fe      	b.n	800310e <BusFault_Handler+0x4>

08003110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003114:	e7fe      	b.n	8003114 <UsageFault_Handler+0x4>

08003116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003144:	f000 f8f8 	bl	8003338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}

0800314c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003150:	2001      	movs	r0, #1
 8003152:	f001 fa27 	bl	80045a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003160:	4802      	ldr	r0, [pc, #8]	; (800316c <DMA1_Stream5_IRQHandler+0x10>)
 8003162:	f000 fe0b 	bl	8003d7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20002ca8 	.word	0x20002ca8

08003170 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <TIM3_IRQHandler+0x10>)
 8003176:	f001 ffdf 	bl	8005138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20002c68 	.word	0x20002c68

08003184 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <USART2_IRQHandler+0x10>)
 800318a:	f002 fcc3 	bl	8005b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20003d60 	.word	0x20003d60

08003198 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800319c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031a0:	f001 fa00 	bl	80045a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031b0:	4a14      	ldr	r2, [pc, #80]	; (8003204 <_sbrk+0x5c>)
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <_sbrk+0x60>)
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <_sbrk+0x64>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031c4:	4b11      	ldr	r3, [pc, #68]	; (800320c <_sbrk+0x64>)
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <_sbrk+0x68>)
 80031c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <_sbrk+0x64>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d207      	bcs.n	80031e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031d8:	f003 fa98 	bl	800670c <__errno>
 80031dc:	4602      	mov	r2, r0
 80031de:	230c      	movs	r3, #12
 80031e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80031e2:	f04f 33ff 	mov.w	r3, #4294967295
 80031e6:	e009      	b.n	80031fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <_sbrk+0x64>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ee:	4b07      	ldr	r3, [pc, #28]	; (800320c <_sbrk+0x64>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	4a05      	ldr	r2, [pc, #20]	; (800320c <_sbrk+0x64>)
 80031f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031fa:	68fb      	ldr	r3, [r7, #12]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20020000 	.word	0x20020000
 8003208:	00000400 	.word	0x00000400
 800320c:	200000a4 	.word	0x200000a4
 8003210:	20004da8 	.word	0x20004da8

08003214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003218:	4b08      	ldr	r3, [pc, #32]	; (800323c <SystemInit+0x28>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	4a07      	ldr	r2, [pc, #28]	; (800323c <SystemInit+0x28>)
 8003220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <SystemInit+0x28>)
 800322a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800322e:	609a      	str	r2, [r3, #8]
#endif
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003278 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003246:	e003      	b.n	8003250 <LoopCopyDataInit>

08003248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800324a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800324c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800324e:	3104      	adds	r1, #4

08003250 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003250:	480b      	ldr	r0, [pc, #44]	; (8003280 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003258:	d3f6      	bcc.n	8003248 <CopyDataInit>
  ldr  r2, =_sbss
 800325a:	4a0b      	ldr	r2, [pc, #44]	; (8003288 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800325c:	e002      	b.n	8003264 <LoopFillZerobss>

0800325e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800325e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003260:	f842 3b04 	str.w	r3, [r2], #4

08003264 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003268:	d3f9      	bcc.n	800325e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800326a:	f7ff ffd3 	bl	8003214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800326e:	f003 fa53 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003272:	f7ff fb6b 	bl	800294c <main>
  bx  lr    
 8003276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003278:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800327c:	08008730 	.word	0x08008730
  ldr  r0, =_sdata
 8003280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003284:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8003288:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800328c:	20004da8 	.word	0x20004da8

08003290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003290:	e7fe      	b.n	8003290 <ADC_IRQHandler>
	...

08003294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <HAL_Init+0x40>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <HAL_Init+0x40>)
 800329e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_Init+0x40>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <HAL_Init+0x40>)
 80032aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b0:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_Init+0x40>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <HAL_Init+0x40>)
 80032b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032bc:	2003      	movs	r0, #3
 80032be:	f000 f96f 	bl	80035a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032c2:	2000      	movs	r0, #0
 80032c4:	f000 f808 	bl	80032d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032c8:	f7ff fde6 	bl	8002e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023c00 	.word	0x40023c00

080032d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_InitTick+0x54>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_InitTick+0x58>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	4619      	mov	r1, r3
 80032ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f995 	bl	8003626 <HAL_SYSTICK_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e00e      	b.n	8003324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b0f      	cmp	r3, #15
 800330a:	d80a      	bhi.n	8003322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800330c:	2200      	movs	r2, #0
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	f04f 30ff 	mov.w	r0, #4294967295
 8003314:	f000 f94f 	bl	80035b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003318:	4a06      	ldr	r2, [pc, #24]	; (8003334 <HAL_InitTick+0x5c>)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000008 	.word	0x20000008
 8003330:	20000010 	.word	0x20000010
 8003334:	2000000c 	.word	0x2000000c

08003338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_IncTick+0x20>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_IncTick+0x24>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4413      	add	r3, r2
 8003348:	4a04      	ldr	r2, [pc, #16]	; (800335c <HAL_IncTick+0x24>)
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000010 	.word	0x20000010
 800335c:	20004da0 	.word	0x20004da0

08003360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return uwTick;
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_GetTick+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20004da0 	.word	0x20004da0

08003378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003380:	f7ff ffee 	bl	8003360 <HAL_GetTick>
 8003384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d005      	beq.n	800339e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_Delay+0x40>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800339e:	bf00      	nop
 80033a0:	f7ff ffde 	bl	8003360 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d8f7      	bhi.n	80033a0 <HAL_Delay+0x28>
  {
  }
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000010 	.word	0x20000010

080033bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033d8:	4013      	ands	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ee:	4a04      	ldr	r2, [pc, #16]	; (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	60d3      	str	r3, [r2, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <__NVIC_GetPriorityGrouping+0x18>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	f003 0307 	and.w	r3, r3, #7
}
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	2b00      	cmp	r3, #0
 8003430:	db0b      	blt.n	800344a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	4907      	ldr	r1, [pc, #28]	; (8003458 <__NVIC_EnableIRQ+0x38>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2001      	movs	r0, #1
 8003442:	fa00 f202 	lsl.w	r2, r0, r2
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000e100 	.word	0xe000e100

0800345c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	2b00      	cmp	r3, #0
 800346c:	db10      	blt.n	8003490 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	4909      	ldr	r1, [pc, #36]	; (800349c <__NVIC_DisableIRQ+0x40>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2001      	movs	r0, #1
 800347e:	fa00 f202 	lsl.w	r2, r0, r2
 8003482:	3320      	adds	r3, #32
 8003484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003488:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800348c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000e100 	.word	0xe000e100

080034a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	6039      	str	r1, [r7, #0]
 80034aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	db0a      	blt.n	80034ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	490c      	ldr	r1, [pc, #48]	; (80034ec <__NVIC_SetPriority+0x4c>)
 80034ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034be:	0112      	lsls	r2, r2, #4
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	440b      	add	r3, r1
 80034c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c8:	e00a      	b.n	80034e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	4908      	ldr	r1, [pc, #32]	; (80034f0 <__NVIC_SetPriority+0x50>)
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	3b04      	subs	r3, #4
 80034d8:	0112      	lsls	r2, r2, #4
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	440b      	add	r3, r1
 80034de:	761a      	strb	r2, [r3, #24]
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000e100 	.word	0xe000e100
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f1c3 0307 	rsb	r3, r3, #7
 800350e:	2b04      	cmp	r3, #4
 8003510:	bf28      	it	cs
 8003512:	2304      	movcs	r3, #4
 8003514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3304      	adds	r3, #4
 800351a:	2b06      	cmp	r3, #6
 800351c:	d902      	bls.n	8003524 <NVIC_EncodePriority+0x30>
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	3b03      	subs	r3, #3
 8003522:	e000      	b.n	8003526 <NVIC_EncodePriority+0x32>
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003528:	f04f 32ff 	mov.w	r2, #4294967295
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43da      	mvns	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	401a      	ands	r2, r3
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800353c:	f04f 31ff 	mov.w	r1, #4294967295
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	fa01 f303 	lsl.w	r3, r1, r3
 8003546:	43d9      	mvns	r1, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800354c:	4313      	orrs	r3, r2
         );
}
 800354e:	4618      	mov	r0, r3
 8003550:	3724      	adds	r7, #36	; 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800356c:	d301      	bcc.n	8003572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800356e:	2301      	movs	r3, #1
 8003570:	e00f      	b.n	8003592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <SysTick_Config+0x40>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800357a:	210f      	movs	r1, #15
 800357c:	f04f 30ff 	mov.w	r0, #4294967295
 8003580:	f7ff ff8e 	bl	80034a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <SysTick_Config+0x40>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <SysTick_Config+0x40>)
 800358c:	2207      	movs	r2, #7
 800358e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	e000e010 	.word	0xe000e010

080035a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff ff07 	bl	80033bc <__NVIC_SetPriorityGrouping>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	4603      	mov	r3, r0
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035c8:	f7ff ff1c 	bl	8003404 <__NVIC_GetPriorityGrouping>
 80035cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	6978      	ldr	r0, [r7, #20]
 80035d4:	f7ff ff8e 	bl	80034f4 <NVIC_EncodePriority>
 80035d8:	4602      	mov	r2, r0
 80035da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff5d 	bl	80034a0 <__NVIC_SetPriority>
}
 80035e6:	bf00      	nop
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff0f 	bl	8003420 <__NVIC_EnableIRQ>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff1f 	bl	800345c <__NVIC_DisableIRQ>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ff94 	bl	800355c <SysTick_Config>
 8003634:	4603      	mov	r3, r0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e014      	b.n	800367a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	791b      	ldrb	r3, [r3, #4]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff fc41 	bl	8002ee8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	795b      	ldrb	r3, [r3, #5]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_DAC_Start_DMA+0x1e>
 800369e:	2302      	movs	r3, #2
 80036a0:	e08e      	b.n	80037c0 <HAL_DAC_Start_DMA+0x13c>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2202      	movs	r2, #2
 80036ac:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d12a      	bne.n	800370a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a43      	ldr	r2, [pc, #268]	; (80037c8 <HAL_DAC_Start_DMA+0x144>)
 80036ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4a42      	ldr	r2, [pc, #264]	; (80037cc <HAL_DAC_Start_DMA+0x148>)
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a41      	ldr	r2, [pc, #260]	; (80037d0 <HAL_DAC_Start_DMA+0x14c>)
 80036ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036da:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d009      	beq.n	80036f6 <HAL_DAC_Start_DMA+0x72>
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d00c      	beq.n	8003700 <HAL_DAC_Start_DMA+0x7c>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d000      	beq.n	80036ec <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80036ea:	e039      	b.n	8003760 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3308      	adds	r3, #8
 80036f2:	617b      	str	r3, [r7, #20]
        break;
 80036f4:	e034      	b.n	8003760 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	617b      	str	r3, [r7, #20]
        break;
 80036fe:	e02f      	b.n	8003760 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3310      	adds	r3, #16
 8003706:	617b      	str	r3, [r7, #20]
        break;
 8003708:	e02a      	b.n	8003760 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	4a31      	ldr	r2, [pc, #196]	; (80037d4 <HAL_DAC_Start_DMA+0x150>)
 8003710:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	4a30      	ldr	r2, [pc, #192]	; (80037d8 <HAL_DAC_Start_DMA+0x154>)
 8003718:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4a2f      	ldr	r2, [pc, #188]	; (80037dc <HAL_DAC_Start_DMA+0x158>)
 8003720:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003730:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	2b04      	cmp	r3, #4
 8003736:	d009      	beq.n	800374c <HAL_DAC_Start_DMA+0xc8>
 8003738:	2b08      	cmp	r3, #8
 800373a:	d00c      	beq.n	8003756 <HAL_DAC_Start_DMA+0xd2>
 800373c:	2b00      	cmp	r3, #0
 800373e:	d000      	beq.n	8003742 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003740:	e00e      	b.n	8003760 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	617b      	str	r3, [r7, #20]
        break;
 800374a:	e009      	b.n	8003760 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3318      	adds	r3, #24
 8003752:	617b      	str	r3, [r7, #20]
        break;
 8003754:	e004      	b.n	8003760 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	331c      	adds	r3, #28
 800375c:	617b      	str	r3, [r7, #20]
        break;
 800375e:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003774:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6898      	ldr	r0, [r3, #8]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	f000 fa12 	bl	8003ba8 <HAL_DMA_Start_IT>
 8003784:	e00e      	b.n	80037a4 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003794:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	68d8      	ldr	r0, [r3, #12]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	f000 fa02 	bl	8003ba8 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	409a      	lsls	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	08003939 	.word	0x08003939
 80037cc:	0800395b 	.word	0x0800395b
 80037d0:	08003977 	.word	0x08003977
 80037d4:	080039e1 	.word	0x080039e1
 80037d8:	08003a03 	.word	0x08003a03
 80037dc:	08003a1f 	.word	0x08003a1f

080037e0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6819      	ldr	r1, [r3, #0]
 80037f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43da      	mvns	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	400a      	ands	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	2201      	movs	r2, #1
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43da      	mvns	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	400a      	ands	r2, r1
 800381e:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d107      	bne.n	8003836 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fa14 	bl	8003c58 <HAL_DMA_Abort>
 8003830:	4603      	mov	r3, r0
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	e006      	b.n	8003844 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fa0c 	bl	8003c58 <HAL_DMA_Abort>
 8003840:	4603      	mov	r3, r0
 8003842:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2204      	movs	r2, #4
 800384e:	711a      	strb	r2, [r3, #4]
 8003850:	e002      	b.n	8003858 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8003858:	7bfb      	ldrb	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800389e:	b480      	push	{r7}
 80038a0:	b087      	sub	sp, #28
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	795b      	ldrb	r3, [r3, #5]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_DAC_ConfigChannel+0x20>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e036      	b.n	800392c <HAL_DAC_ConfigChannel+0x8e>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2202      	movs	r2, #2
 80038c8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80038d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4013      	ands	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	22c0      	movs	r2, #192	; 0xc0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43da      	mvns	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	400a      	ands	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff ff8b 	bl	8003862 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	711a      	strb	r2, [r3, #4]
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f7ff ff84 	bl	8003876 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f043 0204 	orr.w	r2, r3, #4
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f7ff ff7a 	bl	800388a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	711a      	strb	r2, [r3, #4]
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff ffd8 	bl	80039a4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	711a      	strb	r2, [r3, #4]
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f7ff ffd1 	bl	80039b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f043 0204 	orr.w	r2, r3, #4
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff ffc7 	bl	80039cc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	711a      	strb	r2, [r3, #4]
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a58:	f7ff fc82 	bl	8003360 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e099      	b.n	8003b9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a88:	e00f      	b.n	8003aaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a8a:	f7ff fc69 	bl	8003360 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	d908      	bls.n	8003aaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e078      	b.n	8003b9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e8      	bne.n	8003a8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4b38      	ldr	r3, [pc, #224]	; (8003ba4 <HAL_DMA_Init+0x158>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d107      	bne.n	8003b14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f023 0307 	bic.w	r3, r3, #7
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d117      	bne.n	8003b6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fb01 	bl	8004158 <DMA_CheckFifoParam>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2240      	movs	r2, #64	; 0x40
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e016      	b.n	8003b9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fab8 	bl	80040ec <DMA_CalcBaseAndBitshift>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	223f      	movs	r2, #63	; 0x3f
 8003b86:	409a      	lsls	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	f010803f 	.word	0xf010803f

08003ba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_DMA_Start_IT+0x26>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e040      	b.n	8003c50 <HAL_DMA_Start_IT+0xa8>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d12f      	bne.n	8003c42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2202      	movs	r2, #2
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fa4a 	bl	8004090 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	223f      	movs	r2, #63	; 0x3f
 8003c02:	409a      	lsls	r2, r3
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0216 	orr.w	r2, r2, #22
 8003c16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0208 	orr.w	r2, r2, #8
 8003c2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e005      	b.n	8003c4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c66:	f7ff fb7b 	bl	8003360 <HAL_GetTick>
 8003c6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d008      	beq.n	8003c8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2280      	movs	r2, #128	; 0x80
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e052      	b.n	8003d30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0216 	bic.w	r2, r2, #22
 8003c98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d103      	bne.n	8003cba <HAL_DMA_Abort+0x62>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0208 	bic.w	r2, r2, #8
 8003cc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cda:	e013      	b.n	8003d04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cdc:	f7ff fb40 	bl	8003360 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d90c      	bls.n	8003d04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e015      	b.n	8003d30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e4      	bne.n	8003cdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d16:	223f      	movs	r2, #63	; 0x3f
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d004      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e00c      	b.n	8003d70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2205      	movs	r2, #5
 8003d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d88:	4b92      	ldr	r3, [pc, #584]	; (8003fd4 <HAL_DMA_IRQHandler+0x258>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a92      	ldr	r2, [pc, #584]	; (8003fd8 <HAL_DMA_IRQHandler+0x25c>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0a9b      	lsrs	r3, r3, #10
 8003d94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da6:	2208      	movs	r2, #8
 8003da8:	409a      	lsls	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01a      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0204 	bic.w	r2, r2, #4
 8003dce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f043 0201 	orr.w	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	2201      	movs	r2, #1
 8003dee:	409a      	lsls	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d012      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	f043 0202 	orr.w	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	2204      	movs	r2, #4
 8003e24:	409a      	lsls	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d012      	beq.n	8003e54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00b      	beq.n	8003e54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	2204      	movs	r2, #4
 8003e42:	409a      	lsls	r2, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	f043 0204 	orr.w	r2, r3, #4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	2210      	movs	r2, #16
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d043      	beq.n	8003eec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d03c      	beq.n	8003eec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	2210      	movs	r2, #16
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d018      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d024      	beq.n	8003eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
 8003eaa:	e01f      	b.n	8003eec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01b      	beq.n	8003eec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
 8003ebc:	e016      	b.n	8003eec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0208 	bic.w	r2, r2, #8
 8003eda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 808e 	beq.w	800401a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8086 	beq.w	800401a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	2220      	movs	r2, #32
 8003f14:	409a      	lsls	r2, r3
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b05      	cmp	r3, #5
 8003f24:	d136      	bne.n	8003f94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0216 	bic.w	r2, r2, #22
 8003f34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <HAL_DMA_IRQHandler+0x1da>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0208 	bic.w	r2, r2, #8
 8003f64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6a:	223f      	movs	r2, #63	; 0x3f
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d07d      	beq.n	8004086 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	4798      	blx	r3
        }
        return;
 8003f92:	e078      	b.n	8004086 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d01c      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d108      	bne.n	8003fc2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d030      	beq.n	800401a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	4798      	blx	r3
 8003fc0:	e02b      	b.n	800401a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d027      	beq.n	800401a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	4798      	blx	r3
 8003fd2:	e022      	b.n	800401a <HAL_DMA_IRQHandler+0x29e>
 8003fd4:	20000008 	.word	0x20000008
 8003fd8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0210 	bic.w	r2, r2, #16
 8003ff8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	2b00      	cmp	r3, #0
 8004020:	d032      	beq.n	8004088 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d022      	beq.n	8004074 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2205      	movs	r2, #5
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	3301      	adds	r3, #1
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	429a      	cmp	r2, r3
 8004050:	d307      	bcc.n	8004062 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f2      	bne.n	8004046 <HAL_DMA_IRQHandler+0x2ca>
 8004060:	e000      	b.n	8004064 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004062:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
 8004084:	e000      	b.n	8004088 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004086:	bf00      	nop
    }
  }
}
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop

08004090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d108      	bne.n	80040d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040ce:	e007      	b.n	80040e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	60da      	str	r2, [r3, #12]
}
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	3b10      	subs	r3, #16
 80040fc:	4a14      	ldr	r2, [pc, #80]	; (8004150 <DMA_CalcBaseAndBitshift+0x64>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	091b      	lsrs	r3, r3, #4
 8004104:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004106:	4a13      	ldr	r2, [pc, #76]	; (8004154 <DMA_CalcBaseAndBitshift+0x68>)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d909      	bls.n	800412e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004122:	f023 0303 	bic.w	r3, r3, #3
 8004126:	1d1a      	adds	r2, r3, #4
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	659a      	str	r2, [r3, #88]	; 0x58
 800412c:	e007      	b.n	800413e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004136:	f023 0303 	bic.w	r3, r3, #3
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	aaaaaaab 	.word	0xaaaaaaab
 8004154:	0800850c 	.word	0x0800850c

08004158 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d11f      	bne.n	80041b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d855      	bhi.n	8004224 <DMA_CheckFifoParam+0xcc>
 8004178:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <DMA_CheckFifoParam+0x28>)
 800417a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417e:	bf00      	nop
 8004180:	08004191 	.word	0x08004191
 8004184:	080041a3 	.word	0x080041a3
 8004188:	08004191 	.word	0x08004191
 800418c:	08004225 	.word	0x08004225
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d045      	beq.n	8004228 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a0:	e042      	b.n	8004228 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041aa:	d13f      	bne.n	800422c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b0:	e03c      	b.n	800422c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ba:	d121      	bne.n	8004200 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d836      	bhi.n	8004230 <DMA_CheckFifoParam+0xd8>
 80041c2:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <DMA_CheckFifoParam+0x70>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	080041d9 	.word	0x080041d9
 80041cc:	080041df 	.word	0x080041df
 80041d0:	080041d9 	.word	0x080041d9
 80041d4:	080041f1 	.word	0x080041f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
      break;
 80041dc:	e02f      	b.n	800423e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d024      	beq.n	8004234 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ee:	e021      	b.n	8004234 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041f8:	d11e      	bne.n	8004238 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041fe:	e01b      	b.n	8004238 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d902      	bls.n	800420c <DMA_CheckFifoParam+0xb4>
 8004206:	2b03      	cmp	r3, #3
 8004208:	d003      	beq.n	8004212 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800420a:	e018      	b.n	800423e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
      break;
 8004210:	e015      	b.n	800423e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00e      	beq.n	800423c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
      break;
 8004222:	e00b      	b.n	800423c <DMA_CheckFifoParam+0xe4>
      break;
 8004224:	bf00      	nop
 8004226:	e00a      	b.n	800423e <DMA_CheckFifoParam+0xe6>
      break;
 8004228:	bf00      	nop
 800422a:	e008      	b.n	800423e <DMA_CheckFifoParam+0xe6>
      break;
 800422c:	bf00      	nop
 800422e:	e006      	b.n	800423e <DMA_CheckFifoParam+0xe6>
      break;
 8004230:	bf00      	nop
 8004232:	e004      	b.n	800423e <DMA_CheckFifoParam+0xe6>
      break;
 8004234:	bf00      	nop
 8004236:	e002      	b.n	800423e <DMA_CheckFifoParam+0xe6>
      break;   
 8004238:	bf00      	nop
 800423a:	e000      	b.n	800423e <DMA_CheckFifoParam+0xe6>
      break;
 800423c:	bf00      	nop
    }
  } 
  
  return status; 
 800423e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800424c:	b480      	push	{r7}
 800424e:	b089      	sub	sp, #36	; 0x24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800425e:	2300      	movs	r3, #0
 8004260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	e165      	b.n	8004534 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004268:	2201      	movs	r2, #1
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4013      	ands	r3, r2
 800427a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	429a      	cmp	r2, r3
 8004282:	f040 8154 	bne.w	800452e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d00b      	beq.n	80042a6 <HAL_GPIO_Init+0x5a>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d007      	beq.n	80042a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800429a:	2b11      	cmp	r3, #17
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b12      	cmp	r3, #18
 80042a4:	d130      	bne.n	8004308 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	2203      	movs	r2, #3
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042dc:	2201      	movs	r2, #1
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 0201 	and.w	r2, r3, #1
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	2203      	movs	r2, #3
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d003      	beq.n	8004348 <HAL_GPIO_Init+0xfc>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b12      	cmp	r3, #18
 8004346:	d123      	bne.n	8004390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	08da      	lsrs	r2, r3, #3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3208      	adds	r2, #8
 8004350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	220f      	movs	r2, #15
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4313      	orrs	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	08da      	lsrs	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3208      	adds	r2, #8
 800438a:	69b9      	ldr	r1, [r7, #24]
 800438c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	2203      	movs	r2, #3
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 0203 	and.w	r2, r3, #3
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80ae 	beq.w	800452e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4b5c      	ldr	r3, [pc, #368]	; (8004548 <HAL_GPIO_Init+0x2fc>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	4a5b      	ldr	r2, [pc, #364]	; (8004548 <HAL_GPIO_Init+0x2fc>)
 80043dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043e0:	6453      	str	r3, [r2, #68]	; 0x44
 80043e2:	4b59      	ldr	r3, [pc, #356]	; (8004548 <HAL_GPIO_Init+0x2fc>)
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ee:	4a57      	ldr	r2, [pc, #348]	; (800454c <HAL_GPIO_Init+0x300>)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	089b      	lsrs	r3, r3, #2
 80043f4:	3302      	adds	r3, #2
 80043f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	220f      	movs	r2, #15
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a4e      	ldr	r2, [pc, #312]	; (8004550 <HAL_GPIO_Init+0x304>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d025      	beq.n	8004466 <HAL_GPIO_Init+0x21a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a4d      	ldr	r2, [pc, #308]	; (8004554 <HAL_GPIO_Init+0x308>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01f      	beq.n	8004462 <HAL_GPIO_Init+0x216>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a4c      	ldr	r2, [pc, #304]	; (8004558 <HAL_GPIO_Init+0x30c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d019      	beq.n	800445e <HAL_GPIO_Init+0x212>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a4b      	ldr	r2, [pc, #300]	; (800455c <HAL_GPIO_Init+0x310>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <HAL_GPIO_Init+0x20e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a4a      	ldr	r2, [pc, #296]	; (8004560 <HAL_GPIO_Init+0x314>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00d      	beq.n	8004456 <HAL_GPIO_Init+0x20a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a49      	ldr	r2, [pc, #292]	; (8004564 <HAL_GPIO_Init+0x318>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d007      	beq.n	8004452 <HAL_GPIO_Init+0x206>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a48      	ldr	r2, [pc, #288]	; (8004568 <HAL_GPIO_Init+0x31c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d101      	bne.n	800444e <HAL_GPIO_Init+0x202>
 800444a:	2306      	movs	r3, #6
 800444c:	e00c      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 800444e:	2307      	movs	r3, #7
 8004450:	e00a      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 8004452:	2305      	movs	r3, #5
 8004454:	e008      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 8004456:	2304      	movs	r3, #4
 8004458:	e006      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 800445a:	2303      	movs	r3, #3
 800445c:	e004      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 800445e:	2302      	movs	r3, #2
 8004460:	e002      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <HAL_GPIO_Init+0x21c>
 8004466:	2300      	movs	r3, #0
 8004468:	69fa      	ldr	r2, [r7, #28]
 800446a:	f002 0203 	and.w	r2, r2, #3
 800446e:	0092      	lsls	r2, r2, #2
 8004470:	4093      	lsls	r3, r2
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004478:	4934      	ldr	r1, [pc, #208]	; (800454c <HAL_GPIO_Init+0x300>)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	089b      	lsrs	r3, r3, #2
 800447e:	3302      	adds	r3, #2
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004486:	4b39      	ldr	r3, [pc, #228]	; (800456c <HAL_GPIO_Init+0x320>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	43db      	mvns	r3, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4013      	ands	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044aa:	4a30      	ldr	r2, [pc, #192]	; (800456c <HAL_GPIO_Init+0x320>)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044b0:	4b2e      	ldr	r3, [pc, #184]	; (800456c <HAL_GPIO_Init+0x320>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044d4:	4a25      	ldr	r2, [pc, #148]	; (800456c <HAL_GPIO_Init+0x320>)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044da:	4b24      	ldr	r3, [pc, #144]	; (800456c <HAL_GPIO_Init+0x320>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044fe:	4a1b      	ldr	r2, [pc, #108]	; (800456c <HAL_GPIO_Init+0x320>)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004504:	4b19      	ldr	r3, [pc, #100]	; (800456c <HAL_GPIO_Init+0x320>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004528:	4a10      	ldr	r2, [pc, #64]	; (800456c <HAL_GPIO_Init+0x320>)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3301      	adds	r3, #1
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	f67f ae96 	bls.w	8004268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800453c:	bf00      	nop
 800453e:	3724      	adds	r7, #36	; 0x24
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40023800 	.word	0x40023800
 800454c:	40013800 	.word	0x40013800
 8004550:	40020000 	.word	0x40020000
 8004554:	40020400 	.word	0x40020400
 8004558:	40020800 	.word	0x40020800
 800455c:	40020c00 	.word	0x40020c00
 8004560:	40021000 	.word	0x40021000
 8004564:	40021400 	.word	0x40021400
 8004568:	40021800 	.word	0x40021800
 800456c:	40013c00 	.word	0x40013c00

08004570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]
 800457c:	4613      	mov	r3, r2
 800457e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004580:	787b      	ldrb	r3, [r7, #1]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004586:	887a      	ldrh	r2, [r7, #2]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800458c:	e003      	b.n	8004596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800458e:	887b      	ldrh	r3, [r7, #2]
 8004590:	041a      	lsls	r2, r3, #16
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	619a      	str	r2, [r3, #24]
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045ae:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d006      	beq.n	80045c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045ba:	4a05      	ldr	r2, [pc, #20]	; (80045d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe fc1e 	bl	8002e04 <HAL_GPIO_EXTI_Callback>
  }
}
 80045c8:	bf00      	nop
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40013c00 	.word	0x40013c00

080045d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0cc      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e8:	4b68      	ldr	r3, [pc, #416]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d90c      	bls.n	8004610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b65      	ldr	r3, [pc, #404]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b63      	ldr	r3, [pc, #396]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0b8      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d020      	beq.n	800465e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004628:	4b59      	ldr	r3, [pc, #356]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a58      	ldr	r2, [pc, #352]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004640:	4b53      	ldr	r3, [pc, #332]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4a52      	ldr	r2, [pc, #328]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800464a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800464c:	4b50      	ldr	r3, [pc, #320]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	494d      	ldr	r1, [pc, #308]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	4313      	orrs	r3, r2
 800465c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d044      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d119      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e07f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d003      	beq.n	8004692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800468e:	2b03      	cmp	r3, #3
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004692:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e06f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a2:	4b3b      	ldr	r3, [pc, #236]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e067      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b2:	4b37      	ldr	r3, [pc, #220]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f023 0203 	bic.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4934      	ldr	r1, [pc, #208]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046c4:	f7fe fe4c 	bl	8003360 <HAL_GetTick>
 80046c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046cc:	f7fe fe48 	bl	8003360 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e04f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e2:	4b2b      	ldr	r3, [pc, #172]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 020c 	and.w	r2, r3, #12
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d1eb      	bne.n	80046cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046f4:	4b25      	ldr	r3, [pc, #148]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d20c      	bcs.n	800471c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	4b22      	ldr	r3, [pc, #136]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b20      	ldr	r3, [pc, #128]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e032      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004728:	4b19      	ldr	r3, [pc, #100]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4916      	ldr	r1, [pc, #88]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004746:	4b12      	ldr	r3, [pc, #72]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	490e      	ldr	r1, [pc, #56]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800475a:	f000 f855 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 800475e:	4601      	mov	r1, r0
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <HAL_RCC_ClockConfig+0x1c0>)
 800476c:	5cd3      	ldrb	r3, [r2, r3]
 800476e:	fa21 f303 	lsr.w	r3, r1, r3
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004776:	4b09      	ldr	r3, [pc, #36]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fdac 	bl	80032d8 <HAL_InitTick>

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40023c00 	.word	0x40023c00
 8004790:	40023800 	.word	0x40023800
 8004794:	080084f4 	.word	0x080084f4
 8004798:	20000008 	.word	0x20000008
 800479c:	2000000c 	.word	0x2000000c

080047a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a4:	4b03      	ldr	r3, [pc, #12]	; (80047b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047a6:	681b      	ldr	r3, [r3, #0]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000008 	.word	0x20000008

080047b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047bc:	f7ff fff0 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80047c0:	4601      	mov	r1, r0
 80047c2:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	0a9b      	lsrs	r3, r3, #10
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	4a03      	ldr	r2, [pc, #12]	; (80047dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ce:	5cd3      	ldrb	r3, [r2, r3]
 80047d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40023800 	.word	0x40023800
 80047dc:	08008504 	.word	0x08008504

080047e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047e4:	f7ff ffdc 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80047e8:	4601      	mov	r1, r0
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	0b5b      	lsrs	r3, r3, #13
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4a03      	ldr	r2, [pc, #12]	; (8004804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f6:	5cd3      	ldrb	r3, [r2, r3]
 80047f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40023800 	.word	0x40023800
 8004804:	08008504 	.word	0x08008504

08004808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004822:	4bc6      	ldr	r3, [pc, #792]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b0c      	cmp	r3, #12
 800482c:	f200 817e 	bhi.w	8004b2c <HAL_RCC_GetSysClockFreq+0x324>
 8004830:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <HAL_RCC_GetSysClockFreq+0x30>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	0800486d 	.word	0x0800486d
 800483c:	08004b2d 	.word	0x08004b2d
 8004840:	08004b2d 	.word	0x08004b2d
 8004844:	08004b2d 	.word	0x08004b2d
 8004848:	08004873 	.word	0x08004873
 800484c:	08004b2d 	.word	0x08004b2d
 8004850:	08004b2d 	.word	0x08004b2d
 8004854:	08004b2d 	.word	0x08004b2d
 8004858:	08004879 	.word	0x08004879
 800485c:	08004b2d 	.word	0x08004b2d
 8004860:	08004b2d 	.word	0x08004b2d
 8004864:	08004b2d 	.word	0x08004b2d
 8004868:	080049d5 	.word	0x080049d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800486c:	4bb4      	ldr	r3, [pc, #720]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x338>)
 800486e:	613b      	str	r3, [r7, #16]
       break;
 8004870:	e15f      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004872:	4bb4      	ldr	r3, [pc, #720]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004874:	613b      	str	r3, [r7, #16]
      break;
 8004876:	e15c      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004878:	4bb0      	ldr	r3, [pc, #704]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x334>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004880:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004882:	4bae      	ldr	r3, [pc, #696]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d04a      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488e:	4bab      	ldr	r3, [pc, #684]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	099b      	lsrs	r3, r3, #6
 8004894:	f04f 0400 	mov.w	r4, #0
 8004898:	f240 11ff 	movw	r1, #511	; 0x1ff
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	ea03 0501 	and.w	r5, r3, r1
 80048a4:	ea04 0602 	and.w	r6, r4, r2
 80048a8:	4629      	mov	r1, r5
 80048aa:	4632      	mov	r2, r6
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	f04f 0400 	mov.w	r4, #0
 80048b4:	0154      	lsls	r4, r2, #5
 80048b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048ba:	014b      	lsls	r3, r1, #5
 80048bc:	4619      	mov	r1, r3
 80048be:	4622      	mov	r2, r4
 80048c0:	1b49      	subs	r1, r1, r5
 80048c2:	eb62 0206 	sbc.w	r2, r2, r6
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	f04f 0400 	mov.w	r4, #0
 80048ce:	0194      	lsls	r4, r2, #6
 80048d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048d4:	018b      	lsls	r3, r1, #6
 80048d6:	1a5b      	subs	r3, r3, r1
 80048d8:	eb64 0402 	sbc.w	r4, r4, r2
 80048dc:	f04f 0100 	mov.w	r1, #0
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	00e2      	lsls	r2, r4, #3
 80048e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048ea:	00d9      	lsls	r1, r3, #3
 80048ec:	460b      	mov	r3, r1
 80048ee:	4614      	mov	r4, r2
 80048f0:	195b      	adds	r3, r3, r5
 80048f2:	eb44 0406 	adc.w	r4, r4, r6
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	0262      	lsls	r2, r4, #9
 8004900:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004904:	0259      	lsls	r1, r3, #9
 8004906:	460b      	mov	r3, r1
 8004908:	4614      	mov	r4, r2
 800490a:	4618      	mov	r0, r3
 800490c:	4621      	mov	r1, r4
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f04f 0400 	mov.w	r4, #0
 8004914:	461a      	mov	r2, r3
 8004916:	4623      	mov	r3, r4
 8004918:	f7fc f970 	bl	8000bfc <__aeabi_uldivmod>
 800491c:	4603      	mov	r3, r0
 800491e:	460c      	mov	r4, r1
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	e049      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004924:	4b85      	ldr	r3, [pc, #532]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	099b      	lsrs	r3, r3, #6
 800492a:	f04f 0400 	mov.w	r4, #0
 800492e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	ea03 0501 	and.w	r5, r3, r1
 800493a:	ea04 0602 	and.w	r6, r4, r2
 800493e:	4629      	mov	r1, r5
 8004940:	4632      	mov	r2, r6
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	f04f 0400 	mov.w	r4, #0
 800494a:	0154      	lsls	r4, r2, #5
 800494c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004950:	014b      	lsls	r3, r1, #5
 8004952:	4619      	mov	r1, r3
 8004954:	4622      	mov	r2, r4
 8004956:	1b49      	subs	r1, r1, r5
 8004958:	eb62 0206 	sbc.w	r2, r2, r6
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	f04f 0400 	mov.w	r4, #0
 8004964:	0194      	lsls	r4, r2, #6
 8004966:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800496a:	018b      	lsls	r3, r1, #6
 800496c:	1a5b      	subs	r3, r3, r1
 800496e:	eb64 0402 	sbc.w	r4, r4, r2
 8004972:	f04f 0100 	mov.w	r1, #0
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	00e2      	lsls	r2, r4, #3
 800497c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004980:	00d9      	lsls	r1, r3, #3
 8004982:	460b      	mov	r3, r1
 8004984:	4614      	mov	r4, r2
 8004986:	195b      	adds	r3, r3, r5
 8004988:	eb44 0406 	adc.w	r4, r4, r6
 800498c:	f04f 0100 	mov.w	r1, #0
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	02a2      	lsls	r2, r4, #10
 8004996:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800499a:	0299      	lsls	r1, r3, #10
 800499c:	460b      	mov	r3, r1
 800499e:	4614      	mov	r4, r2
 80049a0:	4618      	mov	r0, r3
 80049a2:	4621      	mov	r1, r4
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f04f 0400 	mov.w	r4, #0
 80049aa:	461a      	mov	r2, r3
 80049ac:	4623      	mov	r3, r4
 80049ae:	f7fc f925 	bl	8000bfc <__aeabi_uldivmod>
 80049b2:	4603      	mov	r3, r0
 80049b4:	460c      	mov	r4, r1
 80049b6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049b8:	4b60      	ldr	r3, [pc, #384]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x334>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	3301      	adds	r3, #1
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d0:	613b      	str	r3, [r7, #16]
      break;
 80049d2:	e0ae      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d4:	4b59      	ldr	r3, [pc, #356]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x334>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049dc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049de:	4b57      	ldr	r3, [pc, #348]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x334>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d04a      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ea:	4b54      	ldr	r3, [pc, #336]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x334>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	099b      	lsrs	r3, r3, #6
 80049f0:	f04f 0400 	mov.w	r4, #0
 80049f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	ea03 0501 	and.w	r5, r3, r1
 8004a00:	ea04 0602 	and.w	r6, r4, r2
 8004a04:	4629      	mov	r1, r5
 8004a06:	4632      	mov	r2, r6
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	f04f 0400 	mov.w	r4, #0
 8004a10:	0154      	lsls	r4, r2, #5
 8004a12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a16:	014b      	lsls	r3, r1, #5
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	1b49      	subs	r1, r1, r5
 8004a1e:	eb62 0206 	sbc.w	r2, r2, r6
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	f04f 0400 	mov.w	r4, #0
 8004a2a:	0194      	lsls	r4, r2, #6
 8004a2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a30:	018b      	lsls	r3, r1, #6
 8004a32:	1a5b      	subs	r3, r3, r1
 8004a34:	eb64 0402 	sbc.w	r4, r4, r2
 8004a38:	f04f 0100 	mov.w	r1, #0
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	00e2      	lsls	r2, r4, #3
 8004a42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a46:	00d9      	lsls	r1, r3, #3
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4614      	mov	r4, r2
 8004a4c:	195b      	adds	r3, r3, r5
 8004a4e:	eb44 0406 	adc.w	r4, r4, r6
 8004a52:	f04f 0100 	mov.w	r1, #0
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	0262      	lsls	r2, r4, #9
 8004a5c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a60:	0259      	lsls	r1, r3, #9
 8004a62:	460b      	mov	r3, r1
 8004a64:	4614      	mov	r4, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	4621      	mov	r1, r4
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f04f 0400 	mov.w	r4, #0
 8004a70:	461a      	mov	r2, r3
 8004a72:	4623      	mov	r3, r4
 8004a74:	f7fc f8c2 	bl	8000bfc <__aeabi_uldivmod>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	e049      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a80:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	099b      	lsrs	r3, r3, #6
 8004a86:	f04f 0400 	mov.w	r4, #0
 8004a8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	ea03 0501 	and.w	r5, r3, r1
 8004a96:	ea04 0602 	and.w	r6, r4, r2
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	4632      	mov	r2, r6
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	f04f 0400 	mov.w	r4, #0
 8004aa6:	0154      	lsls	r4, r2, #5
 8004aa8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004aac:	014b      	lsls	r3, r1, #5
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	1b49      	subs	r1, r1, r5
 8004ab4:	eb62 0206 	sbc.w	r2, r2, r6
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	f04f 0400 	mov.w	r4, #0
 8004ac0:	0194      	lsls	r4, r2, #6
 8004ac2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ac6:	018b      	lsls	r3, r1, #6
 8004ac8:	1a5b      	subs	r3, r3, r1
 8004aca:	eb64 0402 	sbc.w	r4, r4, r2
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	00e2      	lsls	r2, r4, #3
 8004ad8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004adc:	00d9      	lsls	r1, r3, #3
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4614      	mov	r4, r2
 8004ae2:	195b      	adds	r3, r3, r5
 8004ae4:	eb44 0406 	adc.w	r4, r4, r6
 8004ae8:	f04f 0100 	mov.w	r1, #0
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	02a2      	lsls	r2, r4, #10
 8004af2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004af6:	0299      	lsls	r1, r3, #10
 8004af8:	460b      	mov	r3, r1
 8004afa:	4614      	mov	r4, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	4621      	mov	r1, r4
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f04f 0400 	mov.w	r4, #0
 8004b06:	461a      	mov	r2, r3
 8004b08:	4623      	mov	r3, r4
 8004b0a:	f7fc f877 	bl	8000bfc <__aeabi_uldivmod>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	460c      	mov	r4, r1
 8004b12:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x334>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	0f1b      	lsrs	r3, r3, #28
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b28:	613b      	str	r3, [r7, #16]
      break;
 8004b2a:	e002      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x338>)
 8004b2e:	613b      	str	r3, [r7, #16]
      break;
 8004b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b32:	693b      	ldr	r3, [r7, #16]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	00f42400 	.word	0x00f42400
 8004b44:	007a1200 	.word	0x007a1200

08004b48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8083 	beq.w	8004c68 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b62:	4b95      	ldr	r3, [pc, #596]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d019      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b6e:	4b92      	ldr	r3, [pc, #584]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d106      	bne.n	8004b88 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b7a:	4b8f      	ldr	r3, [pc, #572]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b86:	d00c      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b88:	4b8b      	ldr	r3, [pc, #556]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d112      	bne.n	8004bba <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b94:	4b88      	ldr	r3, [pc, #544]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba0:	d10b      	bne.n	8004bba <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba2:	4b85      	ldr	r3, [pc, #532]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d05b      	beq.n	8004c66 <HAL_RCC_OscConfig+0x11e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d157      	bne.n	8004c66 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e216      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x8a>
 8004bc4:	4b7c      	ldr	r3, [pc, #496]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a7b      	ldr	r2, [pc, #492]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	e01d      	b.n	8004c0e <HAL_RCC_OscConfig+0xc6>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bda:	d10c      	bne.n	8004bf6 <HAL_RCC_OscConfig+0xae>
 8004bdc:	4b76      	ldr	r3, [pc, #472]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a75      	ldr	r2, [pc, #468]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4b73      	ldr	r3, [pc, #460]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a72      	ldr	r2, [pc, #456]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	e00b      	b.n	8004c0e <HAL_RCC_OscConfig+0xc6>
 8004bf6:	4b70      	ldr	r3, [pc, #448]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a6f      	ldr	r2, [pc, #444]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	4b6d      	ldr	r3, [pc, #436]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a6c      	ldr	r2, [pc, #432]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d013      	beq.n	8004c3e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c16:	f7fe fba3 	bl	8003360 <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c1e:	f7fe fb9f 	bl	8003360 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b64      	cmp	r3, #100	; 0x64
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e1db      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c30:	4b61      	ldr	r3, [pc, #388]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCC_OscConfig+0xd6>
 8004c3c:	e014      	b.n	8004c68 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fe fb8f 	bl	8003360 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c46:	f7fe fb8b 	bl	8003360 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b64      	cmp	r3, #100	; 0x64
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e1c7      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c58:	4b57      	ldr	r3, [pc, #348]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f0      	bne.n	8004c46 <HAL_RCC_OscConfig+0xfe>
 8004c64:	e000      	b.n	8004c68 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d06f      	beq.n	8004d54 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c74:	4b50      	ldr	r3, [pc, #320]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 030c 	and.w	r3, r3, #12
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d017      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c80:	4b4d      	ldr	r3, [pc, #308]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d105      	bne.n	8004c98 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c8c:	4b4a      	ldr	r3, [pc, #296]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00b      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c98:	4b47      	ldr	r3, [pc, #284]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	d11c      	bne.n	8004cde <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ca4:	4b44      	ldr	r3, [pc, #272]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d116      	bne.n	8004cde <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb0:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x180>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e18f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc8:	4b3b      	ldr	r3, [pc, #236]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	4938      	ldr	r1, [pc, #224]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cdc:	e03a      	b.n	8004d54 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d020      	beq.n	8004d28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ce6:	4b35      	ldr	r3, [pc, #212]	; (8004dbc <HAL_RCC_OscConfig+0x274>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fe fb38 	bl	8003360 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cf4:	f7fe fb34 	bl	8003360 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e170      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d06:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d12:	4b29      	ldr	r3, [pc, #164]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4925      	ldr	r1, [pc, #148]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]
 8004d26:	e015      	b.n	8004d54 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <HAL_RCC_OscConfig+0x274>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2e:	f7fe fb17 	bl	8003360 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d36:	f7fe fb13 	bl	8003360 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e14f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d48:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d037      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d016      	beq.n	8004d96 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d68:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <HAL_RCC_OscConfig+0x278>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6e:	f7fe faf7 	bl	8003360 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d76:	f7fe faf3 	bl	8003360 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e12f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCC_OscConfig+0x22e>
 8004d94:	e01c      	b.n	8004dd0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <HAL_RCC_OscConfig+0x278>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fe fae0 	bl	8003360 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da2:	e00f      	b.n	8004dc4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da4:	f7fe fadc 	bl	8003360 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d908      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e118      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	42470000 	.word	0x42470000
 8004dc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc4:	4b8a      	ldr	r3, [pc, #552]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e9      	bne.n	8004da4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 8097 	beq.w	8004f0c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dde:	2300      	movs	r3, #0
 8004de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004de2:	4b83      	ldr	r3, [pc, #524]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10f      	bne.n	8004e0e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	4b7f      	ldr	r3, [pc, #508]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	4a7e      	ldr	r2, [pc, #504]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfe:	4b7c      	ldr	r3, [pc, #496]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0e:	4b79      	ldr	r3, [pc, #484]	; (8004ff4 <HAL_RCC_OscConfig+0x4ac>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d118      	bne.n	8004e4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e1a:	4b76      	ldr	r3, [pc, #472]	; (8004ff4 <HAL_RCC_OscConfig+0x4ac>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a75      	ldr	r2, [pc, #468]	; (8004ff4 <HAL_RCC_OscConfig+0x4ac>)
 8004e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e26:	f7fe fa9b 	bl	8003360 <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2c:	e008      	b.n	8004e40 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2e:	f7fe fa97 	bl	8003360 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e0d3      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e40:	4b6c      	ldr	r3, [pc, #432]	; (8004ff4 <HAL_RCC_OscConfig+0x4ac>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f0      	beq.n	8004e2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d106      	bne.n	8004e62 <HAL_RCC_OscConfig+0x31a>
 8004e54:	4b66      	ldr	r3, [pc, #408]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	4a65      	ldr	r2, [pc, #404]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e60:	e01c      	b.n	8004e9c <HAL_RCC_OscConfig+0x354>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b05      	cmp	r3, #5
 8004e68:	d10c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x33c>
 8004e6a:	4b61      	ldr	r3, [pc, #388]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6e:	4a60      	ldr	r2, [pc, #384]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004e70:	f043 0304 	orr.w	r3, r3, #4
 8004e74:	6713      	str	r3, [r2, #112]	; 0x70
 8004e76:	4b5e      	ldr	r3, [pc, #376]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	4a5d      	ldr	r2, [pc, #372]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	6713      	str	r3, [r2, #112]	; 0x70
 8004e82:	e00b      	b.n	8004e9c <HAL_RCC_OscConfig+0x354>
 8004e84:	4b5a      	ldr	r3, [pc, #360]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	4a59      	ldr	r2, [pc, #356]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004e8a:	f023 0301 	bic.w	r3, r3, #1
 8004e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e90:	4b57      	ldr	r3, [pc, #348]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e94:	4a56      	ldr	r2, [pc, #344]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004e96:	f023 0304 	bic.w	r3, r3, #4
 8004e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d015      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea4:	f7fe fa5c 	bl	8003360 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eac:	f7fe fa58 	bl	8003360 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e092      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec2:	4b4b      	ldr	r3, [pc, #300]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0ee      	beq.n	8004eac <HAL_RCC_OscConfig+0x364>
 8004ece:	e014      	b.n	8004efa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed0:	f7fe fa46 	bl	8003360 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed6:	e00a      	b.n	8004eee <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed8:	f7fe fa42 	bl	8003360 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e07c      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eee:	4b40      	ldr	r3, [pc, #256]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1ee      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004efa:	7dfb      	ldrb	r3, [r7, #23]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d105      	bne.n	8004f0c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f00:	4b3b      	ldr	r3, [pc, #236]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	4a3a      	ldr	r2, [pc, #232]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d068      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f14:	4b36      	ldr	r3, [pc, #216]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 030c 	and.w	r3, r3, #12
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d060      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d145      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f28:	4b33      	ldr	r3, [pc, #204]	; (8004ff8 <HAL_RCC_OscConfig+0x4b0>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2e:	f7fe fa17 	bl	8003360 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f36:	f7fe fa13 	bl	8003360 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e04f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f48:	4b29      	ldr	r3, [pc, #164]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f0      	bne.n	8004f36 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	019b      	lsls	r3, r3, #6
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	061b      	lsls	r3, r3, #24
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	071b      	lsls	r3, r3, #28
 8004f80:	491b      	ldr	r1, [pc, #108]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f86:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <HAL_RCC_OscConfig+0x4b0>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8c:	f7fe f9e8 	bl	8003360 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f94:	f7fe f9e4 	bl	8003360 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e020      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa6:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f0      	beq.n	8004f94 <HAL_RCC_OscConfig+0x44c>
 8004fb2:	e018      	b.n	8004fe6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb4:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <HAL_RCC_OscConfig+0x4b0>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fba:	f7fe f9d1 	bl	8003360 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc2:	f7fe f9cd 	bl	8003360 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e009      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd4:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_RCC_OscConfig+0x4a8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1f0      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x47a>
 8004fe0:	e001      	b.n	8004fe6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	40007000 	.word	0x40007000
 8004ff8:	42470060 	.word	0x42470060

08004ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e01d      	b.n	800504a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fd ffd8 	bl	8002fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f000 fa64 	bl	8005508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b06      	cmp	r3, #6
 8005072:	d007      	beq.n	8005084 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6a1a      	ldr	r2, [r3, #32]
 80050b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10f      	bne.n	80050da <HAL_TIM_Base_Stop+0x40>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a1a      	ldr	r2, [r3, #32]
 80050c0:	f240 4344 	movw	r3, #1092	; 0x444
 80050c4:	4013      	ands	r3, r2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d107      	bne.n	80050da <HAL_TIM_Base_Stop+0x40>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b06      	cmp	r3, #6
 8005118:	d007      	beq.n	800512a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0201 	orr.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b02      	cmp	r3, #2
 800514c:	d122      	bne.n	8005194 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b02      	cmp	r3, #2
 800515a:	d11b      	bne.n	8005194 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0202 	mvn.w	r2, #2
 8005164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f9a5 	bl	80054ca <HAL_TIM_IC_CaptureCallback>
 8005180:	e005      	b.n	800518e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f997 	bl	80054b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f9a8 	bl	80054de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d122      	bne.n	80051e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d11b      	bne.n	80051e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0204 	mvn.w	r2, #4
 80051b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f97b 	bl	80054ca <HAL_TIM_IC_CaptureCallback>
 80051d4:	e005      	b.n	80051e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f96d 	bl	80054b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f97e 	bl	80054de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d122      	bne.n	800523c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b08      	cmp	r3, #8
 8005202:	d11b      	bne.n	800523c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0208 	mvn.w	r2, #8
 800520c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2204      	movs	r2, #4
 8005212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f951 	bl	80054ca <HAL_TIM_IC_CaptureCallback>
 8005228:	e005      	b.n	8005236 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f943 	bl	80054b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f954 	bl	80054de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b10      	cmp	r3, #16
 8005248:	d122      	bne.n	8005290 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b10      	cmp	r3, #16
 8005256:	d11b      	bne.n	8005290 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0210 	mvn.w	r2, #16
 8005260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2208      	movs	r2, #8
 8005266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f927 	bl	80054ca <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f919 	bl	80054b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f92a 	bl	80054de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b01      	cmp	r3, #1
 800529c:	d10e      	bne.n	80052bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d107      	bne.n	80052bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0201 	mvn.w	r2, #1
 80052b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fd fd92 	bl	8002de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c6:	2b80      	cmp	r3, #128	; 0x80
 80052c8:	d10e      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d4:	2b80      	cmp	r3, #128	; 0x80
 80052d6:	d107      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fad0 	bl	8005888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b40      	cmp	r3, #64	; 0x40
 80052f4:	d10e      	bne.n	8005314 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005300:	2b40      	cmp	r3, #64	; 0x40
 8005302:	d107      	bne.n	8005314 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8ef 	bl	80054f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b20      	cmp	r3, #32
 8005320:	d10e      	bne.n	8005340 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b20      	cmp	r3, #32
 800532e:	d107      	bne.n	8005340 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0220 	mvn.w	r2, #32
 8005338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fa9a 	bl	8005874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIM_ConfigClockSource+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e0a6      	b.n	80054ae <HAL_TIM_ConfigClockSource+0x166>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800537e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005386:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	d067      	beq.n	8005468 <HAL_TIM_ConfigClockSource+0x120>
 8005398:	2b40      	cmp	r3, #64	; 0x40
 800539a:	d80b      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x6c>
 800539c:	2b10      	cmp	r3, #16
 800539e:	d073      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x140>
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d802      	bhi.n	80053aa <HAL_TIM_ConfigClockSource+0x62>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d06f      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053a8:	e078      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d06c      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x140>
 80053ae:	2b30      	cmp	r3, #48	; 0x30
 80053b0:	d06a      	beq.n	8005488 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053b2:	e073      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053b4:	2b70      	cmp	r3, #112	; 0x70
 80053b6:	d00d      	beq.n	80053d4 <HAL_TIM_ConfigClockSource+0x8c>
 80053b8:	2b70      	cmp	r3, #112	; 0x70
 80053ba:	d804      	bhi.n	80053c6 <HAL_TIM_ConfigClockSource+0x7e>
 80053bc:	2b50      	cmp	r3, #80	; 0x50
 80053be:	d033      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0xe0>
 80053c0:	2b60      	cmp	r3, #96	; 0x60
 80053c2:	d041      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80053c4:	e06a      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ca:	d066      	beq.n	800549a <HAL_TIM_ConfigClockSource+0x152>
 80053cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d0:	d017      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80053d2:	e063      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	6899      	ldr	r1, [r3, #8]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f000 f9aa 	bl	800573c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	609a      	str	r2, [r3, #8]
      break;
 8005400:	e04c      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6899      	ldr	r1, [r3, #8]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f000 f993 	bl	800573c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005424:	609a      	str	r2, [r3, #8]
      break;
 8005426:	e039      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	6859      	ldr	r1, [r3, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	461a      	mov	r2, r3
 8005436:	f000 f907 	bl	8005648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2150      	movs	r1, #80	; 0x50
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f960 	bl	8005706 <TIM_ITRx_SetConfig>
      break;
 8005446:	e029      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	6859      	ldr	r1, [r3, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	461a      	mov	r2, r3
 8005456:	f000 f926 	bl	80056a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2160      	movs	r1, #96	; 0x60
 8005460:	4618      	mov	r0, r3
 8005462:	f000 f950 	bl	8005706 <TIM_ITRx_SetConfig>
      break;
 8005466:	e019      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6859      	ldr	r1, [r3, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	461a      	mov	r2, r3
 8005476:	f000 f8e7 	bl	8005648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2140      	movs	r1, #64	; 0x40
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f940 	bl	8005706 <TIM_ITRx_SetConfig>
      break;
 8005486:	e009      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4619      	mov	r1, r3
 8005492:	4610      	mov	r0, r2
 8005494:	f000 f937 	bl	8005706 <TIM_ITRx_SetConfig>
      break;
 8005498:	e000      	b.n	800549c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800549a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a40      	ldr	r2, [pc, #256]	; (800561c <TIM_Base_SetConfig+0x114>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d013      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005526:	d00f      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a3d      	ldr	r2, [pc, #244]	; (8005620 <TIM_Base_SetConfig+0x118>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00b      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3c      	ldr	r2, [pc, #240]	; (8005624 <TIM_Base_SetConfig+0x11c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d007      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3b      	ldr	r2, [pc, #236]	; (8005628 <TIM_Base_SetConfig+0x120>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a3a      	ldr	r2, [pc, #232]	; (800562c <TIM_Base_SetConfig+0x124>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d108      	bne.n	800555a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2f      	ldr	r2, [pc, #188]	; (800561c <TIM_Base_SetConfig+0x114>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d02b      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005568:	d027      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2c      	ldr	r2, [pc, #176]	; (8005620 <TIM_Base_SetConfig+0x118>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d023      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2b      	ldr	r2, [pc, #172]	; (8005624 <TIM_Base_SetConfig+0x11c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01f      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <TIM_Base_SetConfig+0x120>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01b      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a29      	ldr	r2, [pc, #164]	; (800562c <TIM_Base_SetConfig+0x124>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d017      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a28      	ldr	r2, [pc, #160]	; (8005630 <TIM_Base_SetConfig+0x128>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d013      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a27      	ldr	r2, [pc, #156]	; (8005634 <TIM_Base_SetConfig+0x12c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00f      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a26      	ldr	r2, [pc, #152]	; (8005638 <TIM_Base_SetConfig+0x130>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00b      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a25      	ldr	r2, [pc, #148]	; (800563c <TIM_Base_SetConfig+0x134>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d007      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a24      	ldr	r2, [pc, #144]	; (8005640 <TIM_Base_SetConfig+0x138>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d003      	beq.n	80055ba <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a23      	ldr	r2, [pc, #140]	; (8005644 <TIM_Base_SetConfig+0x13c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d108      	bne.n	80055cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a0a      	ldr	r2, [pc, #40]	; (800561c <TIM_Base_SetConfig+0x114>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_Base_SetConfig+0xf8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a0c      	ldr	r2, [pc, #48]	; (800562c <TIM_Base_SetConfig+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d103      	bne.n	8005608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	615a      	str	r2, [r3, #20]
}
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40010000 	.word	0x40010000
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800
 8005628:	40000c00 	.word	0x40000c00
 800562c:	40010400 	.word	0x40010400
 8005630:	40014000 	.word	0x40014000
 8005634:	40014400 	.word	0x40014400
 8005638:	40014800 	.word	0x40014800
 800563c:	40001800 	.word	0x40001800
 8005640:	40001c00 	.word	0x40001c00
 8005644:	40002000 	.word	0x40002000

08005648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f023 0201 	bic.w	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f023 030a 	bic.w	r3, r3, #10
 8005684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	621a      	str	r2, [r3, #32]
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b087      	sub	sp, #28
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f023 0210 	bic.w	r2, r3, #16
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	031b      	lsls	r3, r3, #12
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005706:	b480      	push	{r7}
 8005708:	b085      	sub	sp, #20
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	f043 0307 	orr.w	r3, r3, #7
 8005728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	609a      	str	r2, [r3, #8]
}
 8005730:	bf00      	nop
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	021a      	lsls	r2, r3, #8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	431a      	orrs	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4313      	orrs	r3, r2
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	609a      	str	r2, [r3, #8]
}
 8005770:	bf00      	nop
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005790:	2302      	movs	r3, #2
 8005792:	e05a      	b.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a21      	ldr	r2, [pc, #132]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d022      	beq.n	800581e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e0:	d01d      	beq.n	800581e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1d      	ldr	r2, [pc, #116]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d018      	beq.n	800581e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1a      	ldr	r2, [pc, #104]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a18      	ldr	r2, [pc, #96]	; (8005868 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a17      	ldr	r2, [pc, #92]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a15      	ldr	r2, [pc, #84]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d10c      	bne.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	4313      	orrs	r3, r2
 800582e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40010000 	.word	0x40010000
 800585c:	40000400 	.word	0x40000400
 8005860:	40000800 	.word	0x40000800
 8005864:	40000c00 	.word	0x40000c00
 8005868:	40010400 	.word	0x40010400
 800586c:	40014000 	.word	0x40014000
 8005870:	40001800 	.word	0x40001800

08005874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e03f      	b.n	800592e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fd fbc4 	bl	8003050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2224      	movs	r2, #36	; 0x24
 80058cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fb97 	bl	8006014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695a      	ldr	r2, [r3, #20]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b088      	sub	sp, #32
 800593a:	af02      	add	r7, sp, #8
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b20      	cmp	r3, #32
 8005954:	f040 8083 	bne.w	8005a5e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_UART_Transmit+0x2e>
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e07b      	b.n	8005a60 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <HAL_UART_Transmit+0x40>
 8005972:	2302      	movs	r3, #2
 8005974:	e074      	b.n	8005a60 <HAL_UART_Transmit+0x12a>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2221      	movs	r2, #33	; 0x21
 8005988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800598c:	f7fd fce8 	bl	8003360 <HAL_GetTick>
 8005990:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	88fa      	ldrh	r2, [r7, #6]
 800599c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80059a6:	e042      	b.n	8005a2e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059be:	d122      	bne.n	8005a06 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2200      	movs	r2, #0
 80059c8:	2180      	movs	r1, #128	; 0x80
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f9b6 	bl	8005d3c <UART_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e042      	b.n	8005a60 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d103      	bne.n	80059fe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	3302      	adds	r3, #2
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	e017      	b.n	8005a2e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60bb      	str	r3, [r7, #8]
 8005a04:	e013      	b.n	8005a2e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2180      	movs	r1, #128	; 0x80
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f993 	bl	8005d3c <UART_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e01f      	b.n	8005a60 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	60ba      	str	r2, [r7, #8]
 8005a26:	781a      	ldrb	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1b7      	bne.n	80059a8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	2140      	movs	r1, #64	; 0x40
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f97a 	bl	8005d3c <UART_WaitOnFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e006      	b.n	8005a60 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e000      	b.n	8005a60 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005a5e:	2302      	movs	r3, #2
  }
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d140      	bne.n	8005b04 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_UART_Receive_IT+0x26>
 8005a88:	88fb      	ldrh	r3, [r7, #6]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e039      	b.n	8005b06 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_UART_Receive_IT+0x38>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e032      	b.n	8005b06 <HAL_UART_Receive_IT+0x9e>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	88fa      	ldrh	r2, [r7, #6]
 8005ab2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2222      	movs	r2, #34	; 0x22
 8005ac4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ade:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695a      	ldr	r2, [r3, #20]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0220 	orr.w	r2, r2, #32
 8005afe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e000      	b.n	8005b06 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005b04:	2302      	movs	r3, #2
  }
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10d      	bne.n	8005b66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <HAL_UART_IRQHandler+0x52>
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f9d6 	bl	8005f10 <UART_Receive_IT>
      return;
 8005b64:	e0d1      	b.n	8005d0a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 80b0 	beq.w	8005cce <HAL_UART_IRQHandler+0x1ba>
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d105      	bne.n	8005b84 <HAL_UART_IRQHandler+0x70>
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80a5 	beq.w	8005cce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x90>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	f043 0201 	orr.w	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <HAL_UART_IRQHandler+0xb0>
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbc:	f043 0202 	orr.w	r2, r3, #2
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <HAL_UART_IRQHandler+0xd0>
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bdc:	f043 0204 	orr.w	r2, r3, #4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00f      	beq.n	8005c0e <HAL_UART_IRQHandler+0xfa>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <HAL_UART_IRQHandler+0xee>
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	f043 0208 	orr.w	r2, r3, #8
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d078      	beq.n	8005d08 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d007      	beq.n	8005c30 <HAL_UART_IRQHandler+0x11c>
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f970 	bl	8005f10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	bf0c      	ite	eq
 8005c3e:	2301      	moveq	r3, #1
 8005c40:	2300      	movne	r3, #0
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <HAL_UART_IRQHandler+0x144>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d031      	beq.n	8005cbc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f8b9 	bl	8005dd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d123      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c7a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d013      	beq.n	8005cac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c88:	4a21      	ldr	r2, [pc, #132]	; (8005d10 <HAL_UART_IRQHandler+0x1fc>)
 8005c8a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe f851 	bl	8003d38 <HAL_DMA_Abort_IT>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d016      	beq.n	8005cca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005caa:	e00e      	b.n	8005cca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f83b 	bl	8005d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb2:	e00a      	b.n	8005cca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f837 	bl	8005d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cba:	e006      	b.n	8005cca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f833 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005cc8:	e01e      	b.n	8005d08 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cca:	bf00      	nop
    return;
 8005ccc:	e01c      	b.n	8005d08 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d008      	beq.n	8005cea <HAL_UART_IRQHandler+0x1d6>
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f8a6 	bl	8005e34 <UART_Transmit_IT>
    return;
 8005ce8:	e00f      	b.n	8005d0a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <HAL_UART_IRQHandler+0x1f6>
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f8ee 	bl	8005ee0 <UART_EndTransmit_IT>
    return;
 8005d04:	bf00      	nop
 8005d06:	e000      	b.n	8005d0a <HAL_UART_IRQHandler+0x1f6>
    return;
 8005d08:	bf00      	nop
  }
}
 8005d0a:	3720      	adds	r7, #32
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	08005e0d 	.word	0x08005e0d

08005d14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4c:	e02c      	b.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d028      	beq.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d5c:	f7fd fb00 	bl	8003360 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d21d      	bcs.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695a      	ldr	r2, [r3, #20]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0201 	bic.w	r2, r2, #1
 8005d8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e00f      	b.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	4013      	ands	r3, r2
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	bf0c      	ite	eq
 8005db8:	2301      	moveq	r3, #1
 8005dba:	2300      	movne	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d0c3      	beq.n	8005d4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005de6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695a      	ldr	r2, [r3, #20]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0201 	bic.w	r2, r2, #1
 8005df6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f7ff ff7e 	bl	8005d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b21      	cmp	r3, #33	; 0x21
 8005e46:	d144      	bne.n	8005ed2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e50:	d11a      	bne.n	8005e88 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e66:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d105      	bne.n	8005e7c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	1c9a      	adds	r2, r3, #2
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	621a      	str	r2, [r3, #32]
 8005e7a:	e00e      	b.n	8005e9a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	621a      	str	r2, [r3, #32]
 8005e86:	e008      	b.n	8005e9a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	1c59      	adds	r1, r3, #1
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6211      	str	r1, [r2, #32]
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10f      	bne.n	8005ece <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ebc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ecc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e000      	b.n	8005ed4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005ed2:	2302      	movs	r3, #2
  }
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff ff07 	bl	8005d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b22      	cmp	r3, #34	; 0x22
 8005f22:	d171      	bne.n	8006008 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2c:	d123      	bne.n	8005f76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10e      	bne.n	8005f5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	1c9a      	adds	r2, r3, #2
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	629a      	str	r2, [r3, #40]	; 0x28
 8005f58:	e029      	b.n	8005fae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28
 8005f74:	e01b      	b.n	8005fae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6858      	ldr	r0, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	1c59      	adds	r1, r3, #1
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6291      	str	r1, [r2, #40]	; 0x28
 8005f8e:	b2c2      	uxtb	r2, r0
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	e00c      	b.n	8005fae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	1c58      	adds	r0, r3, #1
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	6288      	str	r0, [r1, #40]	; 0x28
 8005fa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d120      	bne.n	8006004 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0220 	bic.w	r2, r2, #32
 8005fd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fe0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0201 	bic.w	r2, r2, #1
 8005ff0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fc fc94 	bl	8002928 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	e002      	b.n	800600a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	e000      	b.n	800600a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006008:	2302      	movs	r3, #2
  }
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006056:	f023 030c 	bic.w	r3, r3, #12
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	430b      	orrs	r3, r1
 8006062:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006082:	f040 818b 	bne.w	800639c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4ac1      	ldr	r2, [pc, #772]	; (8006390 <UART_SetConfig+0x37c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d005      	beq.n	800609c <UART_SetConfig+0x88>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4abf      	ldr	r2, [pc, #764]	; (8006394 <UART_SetConfig+0x380>)
 8006096:	4293      	cmp	r3, r2
 8006098:	f040 80bd 	bne.w	8006216 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800609c:	f7fe fba0 	bl	80047e0 <HAL_RCC_GetPCLK2Freq>
 80060a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	461d      	mov	r5, r3
 80060a6:	f04f 0600 	mov.w	r6, #0
 80060aa:	46a8      	mov	r8, r5
 80060ac:	46b1      	mov	r9, r6
 80060ae:	eb18 0308 	adds.w	r3, r8, r8
 80060b2:	eb49 0409 	adc.w	r4, r9, r9
 80060b6:	4698      	mov	r8, r3
 80060b8:	46a1      	mov	r9, r4
 80060ba:	eb18 0805 	adds.w	r8, r8, r5
 80060be:	eb49 0906 	adc.w	r9, r9, r6
 80060c2:	f04f 0100 	mov.w	r1, #0
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060d6:	4688      	mov	r8, r1
 80060d8:	4691      	mov	r9, r2
 80060da:	eb18 0005 	adds.w	r0, r8, r5
 80060de:	eb49 0106 	adc.w	r1, r9, r6
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	461d      	mov	r5, r3
 80060e8:	f04f 0600 	mov.w	r6, #0
 80060ec:	196b      	adds	r3, r5, r5
 80060ee:	eb46 0406 	adc.w	r4, r6, r6
 80060f2:	461a      	mov	r2, r3
 80060f4:	4623      	mov	r3, r4
 80060f6:	f7fa fd81 	bl	8000bfc <__aeabi_uldivmod>
 80060fa:	4603      	mov	r3, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	461a      	mov	r2, r3
 8006100:	4ba5      	ldr	r3, [pc, #660]	; (8006398 <UART_SetConfig+0x384>)
 8006102:	fba3 2302 	umull	r2, r3, r3, r2
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	461d      	mov	r5, r3
 8006110:	f04f 0600 	mov.w	r6, #0
 8006114:	46a9      	mov	r9, r5
 8006116:	46b2      	mov	sl, r6
 8006118:	eb19 0309 	adds.w	r3, r9, r9
 800611c:	eb4a 040a 	adc.w	r4, sl, sl
 8006120:	4699      	mov	r9, r3
 8006122:	46a2      	mov	sl, r4
 8006124:	eb19 0905 	adds.w	r9, r9, r5
 8006128:	eb4a 0a06 	adc.w	sl, sl, r6
 800612c:	f04f 0100 	mov.w	r1, #0
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006138:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800613c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006140:	4689      	mov	r9, r1
 8006142:	4692      	mov	sl, r2
 8006144:	eb19 0005 	adds.w	r0, r9, r5
 8006148:	eb4a 0106 	adc.w	r1, sl, r6
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	461d      	mov	r5, r3
 8006152:	f04f 0600 	mov.w	r6, #0
 8006156:	196b      	adds	r3, r5, r5
 8006158:	eb46 0406 	adc.w	r4, r6, r6
 800615c:	461a      	mov	r2, r3
 800615e:	4623      	mov	r3, r4
 8006160:	f7fa fd4c 	bl	8000bfc <__aeabi_uldivmod>
 8006164:	4603      	mov	r3, r0
 8006166:	460c      	mov	r4, r1
 8006168:	461a      	mov	r2, r3
 800616a:	4b8b      	ldr	r3, [pc, #556]	; (8006398 <UART_SetConfig+0x384>)
 800616c:	fba3 1302 	umull	r1, r3, r3, r2
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	2164      	movs	r1, #100	; 0x64
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	3332      	adds	r3, #50	; 0x32
 800617e:	4a86      	ldr	r2, [pc, #536]	; (8006398 <UART_SetConfig+0x384>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800618c:	4498      	add	r8, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	461d      	mov	r5, r3
 8006192:	f04f 0600 	mov.w	r6, #0
 8006196:	46a9      	mov	r9, r5
 8006198:	46b2      	mov	sl, r6
 800619a:	eb19 0309 	adds.w	r3, r9, r9
 800619e:	eb4a 040a 	adc.w	r4, sl, sl
 80061a2:	4699      	mov	r9, r3
 80061a4:	46a2      	mov	sl, r4
 80061a6:	eb19 0905 	adds.w	r9, r9, r5
 80061aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80061ae:	f04f 0100 	mov.w	r1, #0
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061c2:	4689      	mov	r9, r1
 80061c4:	4692      	mov	sl, r2
 80061c6:	eb19 0005 	adds.w	r0, r9, r5
 80061ca:	eb4a 0106 	adc.w	r1, sl, r6
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	461d      	mov	r5, r3
 80061d4:	f04f 0600 	mov.w	r6, #0
 80061d8:	196b      	adds	r3, r5, r5
 80061da:	eb46 0406 	adc.w	r4, r6, r6
 80061de:	461a      	mov	r2, r3
 80061e0:	4623      	mov	r3, r4
 80061e2:	f7fa fd0b 	bl	8000bfc <__aeabi_uldivmod>
 80061e6:	4603      	mov	r3, r0
 80061e8:	460c      	mov	r4, r1
 80061ea:	461a      	mov	r2, r3
 80061ec:	4b6a      	ldr	r3, [pc, #424]	; (8006398 <UART_SetConfig+0x384>)
 80061ee:	fba3 1302 	umull	r1, r3, r3, r2
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	2164      	movs	r1, #100	; 0x64
 80061f6:	fb01 f303 	mul.w	r3, r1, r3
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	3332      	adds	r3, #50	; 0x32
 8006200:	4a65      	ldr	r2, [pc, #404]	; (8006398 <UART_SetConfig+0x384>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	f003 0207 	and.w	r2, r3, #7
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4442      	add	r2, r8
 8006212:	609a      	str	r2, [r3, #8]
 8006214:	e26f      	b.n	80066f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006216:	f7fe facf 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 800621a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	461d      	mov	r5, r3
 8006220:	f04f 0600 	mov.w	r6, #0
 8006224:	46a8      	mov	r8, r5
 8006226:	46b1      	mov	r9, r6
 8006228:	eb18 0308 	adds.w	r3, r8, r8
 800622c:	eb49 0409 	adc.w	r4, r9, r9
 8006230:	4698      	mov	r8, r3
 8006232:	46a1      	mov	r9, r4
 8006234:	eb18 0805 	adds.w	r8, r8, r5
 8006238:	eb49 0906 	adc.w	r9, r9, r6
 800623c:	f04f 0100 	mov.w	r1, #0
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006248:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800624c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006250:	4688      	mov	r8, r1
 8006252:	4691      	mov	r9, r2
 8006254:	eb18 0005 	adds.w	r0, r8, r5
 8006258:	eb49 0106 	adc.w	r1, r9, r6
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	461d      	mov	r5, r3
 8006262:	f04f 0600 	mov.w	r6, #0
 8006266:	196b      	adds	r3, r5, r5
 8006268:	eb46 0406 	adc.w	r4, r6, r6
 800626c:	461a      	mov	r2, r3
 800626e:	4623      	mov	r3, r4
 8006270:	f7fa fcc4 	bl	8000bfc <__aeabi_uldivmod>
 8006274:	4603      	mov	r3, r0
 8006276:	460c      	mov	r4, r1
 8006278:	461a      	mov	r2, r3
 800627a:	4b47      	ldr	r3, [pc, #284]	; (8006398 <UART_SetConfig+0x384>)
 800627c:	fba3 2302 	umull	r2, r3, r3, r2
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	461d      	mov	r5, r3
 800628a:	f04f 0600 	mov.w	r6, #0
 800628e:	46a9      	mov	r9, r5
 8006290:	46b2      	mov	sl, r6
 8006292:	eb19 0309 	adds.w	r3, r9, r9
 8006296:	eb4a 040a 	adc.w	r4, sl, sl
 800629a:	4699      	mov	r9, r3
 800629c:	46a2      	mov	sl, r4
 800629e:	eb19 0905 	adds.w	r9, r9, r5
 80062a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80062a6:	f04f 0100 	mov.w	r1, #0
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062ba:	4689      	mov	r9, r1
 80062bc:	4692      	mov	sl, r2
 80062be:	eb19 0005 	adds.w	r0, r9, r5
 80062c2:	eb4a 0106 	adc.w	r1, sl, r6
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	461d      	mov	r5, r3
 80062cc:	f04f 0600 	mov.w	r6, #0
 80062d0:	196b      	adds	r3, r5, r5
 80062d2:	eb46 0406 	adc.w	r4, r6, r6
 80062d6:	461a      	mov	r2, r3
 80062d8:	4623      	mov	r3, r4
 80062da:	f7fa fc8f 	bl	8000bfc <__aeabi_uldivmod>
 80062de:	4603      	mov	r3, r0
 80062e0:	460c      	mov	r4, r1
 80062e2:	461a      	mov	r2, r3
 80062e4:	4b2c      	ldr	r3, [pc, #176]	; (8006398 <UART_SetConfig+0x384>)
 80062e6:	fba3 1302 	umull	r1, r3, r3, r2
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	2164      	movs	r1, #100	; 0x64
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	3332      	adds	r3, #50	; 0x32
 80062f8:	4a27      	ldr	r2, [pc, #156]	; (8006398 <UART_SetConfig+0x384>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006306:	4498      	add	r8, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	461d      	mov	r5, r3
 800630c:	f04f 0600 	mov.w	r6, #0
 8006310:	46a9      	mov	r9, r5
 8006312:	46b2      	mov	sl, r6
 8006314:	eb19 0309 	adds.w	r3, r9, r9
 8006318:	eb4a 040a 	adc.w	r4, sl, sl
 800631c:	4699      	mov	r9, r3
 800631e:	46a2      	mov	sl, r4
 8006320:	eb19 0905 	adds.w	r9, r9, r5
 8006324:	eb4a 0a06 	adc.w	sl, sl, r6
 8006328:	f04f 0100 	mov.w	r1, #0
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006334:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006338:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800633c:	4689      	mov	r9, r1
 800633e:	4692      	mov	sl, r2
 8006340:	eb19 0005 	adds.w	r0, r9, r5
 8006344:	eb4a 0106 	adc.w	r1, sl, r6
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	461d      	mov	r5, r3
 800634e:	f04f 0600 	mov.w	r6, #0
 8006352:	196b      	adds	r3, r5, r5
 8006354:	eb46 0406 	adc.w	r4, r6, r6
 8006358:	461a      	mov	r2, r3
 800635a:	4623      	mov	r3, r4
 800635c:	f7fa fc4e 	bl	8000bfc <__aeabi_uldivmod>
 8006360:	4603      	mov	r3, r0
 8006362:	460c      	mov	r4, r1
 8006364:	461a      	mov	r2, r3
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <UART_SetConfig+0x384>)
 8006368:	fba3 1302 	umull	r1, r3, r3, r2
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	2164      	movs	r1, #100	; 0x64
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	3332      	adds	r3, #50	; 0x32
 800637a:	4a07      	ldr	r2, [pc, #28]	; (8006398 <UART_SetConfig+0x384>)
 800637c:	fba2 2303 	umull	r2, r3, r2, r3
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	f003 0207 	and.w	r2, r3, #7
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4442      	add	r2, r8
 800638c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800638e:	e1b2      	b.n	80066f6 <UART_SetConfig+0x6e2>
 8006390:	40011000 	.word	0x40011000
 8006394:	40011400 	.word	0x40011400
 8006398:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4ad7      	ldr	r2, [pc, #860]	; (8006700 <UART_SetConfig+0x6ec>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d005      	beq.n	80063b2 <UART_SetConfig+0x39e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4ad6      	ldr	r2, [pc, #856]	; (8006704 <UART_SetConfig+0x6f0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	f040 80d1 	bne.w	8006554 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80063b2:	f7fe fa15 	bl	80047e0 <HAL_RCC_GetPCLK2Freq>
 80063b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	469a      	mov	sl, r3
 80063bc:	f04f 0b00 	mov.w	fp, #0
 80063c0:	46d0      	mov	r8, sl
 80063c2:	46d9      	mov	r9, fp
 80063c4:	eb18 0308 	adds.w	r3, r8, r8
 80063c8:	eb49 0409 	adc.w	r4, r9, r9
 80063cc:	4698      	mov	r8, r3
 80063ce:	46a1      	mov	r9, r4
 80063d0:	eb18 080a 	adds.w	r8, r8, sl
 80063d4:	eb49 090b 	adc.w	r9, r9, fp
 80063d8:	f04f 0100 	mov.w	r1, #0
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063ec:	4688      	mov	r8, r1
 80063ee:	4691      	mov	r9, r2
 80063f0:	eb1a 0508 	adds.w	r5, sl, r8
 80063f4:	eb4b 0609 	adc.w	r6, fp, r9
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4619      	mov	r1, r3
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	f04f 0400 	mov.w	r4, #0
 800640a:	0094      	lsls	r4, r2, #2
 800640c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006410:	008b      	lsls	r3, r1, #2
 8006412:	461a      	mov	r2, r3
 8006414:	4623      	mov	r3, r4
 8006416:	4628      	mov	r0, r5
 8006418:	4631      	mov	r1, r6
 800641a:	f7fa fbef 	bl	8000bfc <__aeabi_uldivmod>
 800641e:	4603      	mov	r3, r0
 8006420:	460c      	mov	r4, r1
 8006422:	461a      	mov	r2, r3
 8006424:	4bb8      	ldr	r3, [pc, #736]	; (8006708 <UART_SetConfig+0x6f4>)
 8006426:	fba3 2302 	umull	r2, r3, r3, r2
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	469b      	mov	fp, r3
 8006434:	f04f 0c00 	mov.w	ip, #0
 8006438:	46d9      	mov	r9, fp
 800643a:	46e2      	mov	sl, ip
 800643c:	eb19 0309 	adds.w	r3, r9, r9
 8006440:	eb4a 040a 	adc.w	r4, sl, sl
 8006444:	4699      	mov	r9, r3
 8006446:	46a2      	mov	sl, r4
 8006448:	eb19 090b 	adds.w	r9, r9, fp
 800644c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006450:	f04f 0100 	mov.w	r1, #0
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800645c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006460:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006464:	4689      	mov	r9, r1
 8006466:	4692      	mov	sl, r2
 8006468:	eb1b 0509 	adds.w	r5, fp, r9
 800646c:	eb4c 060a 	adc.w	r6, ip, sl
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	4619      	mov	r1, r3
 8006476:	f04f 0200 	mov.w	r2, #0
 800647a:	f04f 0300 	mov.w	r3, #0
 800647e:	f04f 0400 	mov.w	r4, #0
 8006482:	0094      	lsls	r4, r2, #2
 8006484:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006488:	008b      	lsls	r3, r1, #2
 800648a:	461a      	mov	r2, r3
 800648c:	4623      	mov	r3, r4
 800648e:	4628      	mov	r0, r5
 8006490:	4631      	mov	r1, r6
 8006492:	f7fa fbb3 	bl	8000bfc <__aeabi_uldivmod>
 8006496:	4603      	mov	r3, r0
 8006498:	460c      	mov	r4, r1
 800649a:	461a      	mov	r2, r3
 800649c:	4b9a      	ldr	r3, [pc, #616]	; (8006708 <UART_SetConfig+0x6f4>)
 800649e:	fba3 1302 	umull	r1, r3, r3, r2
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	2164      	movs	r1, #100	; 0x64
 80064a6:	fb01 f303 	mul.w	r3, r1, r3
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	3332      	adds	r3, #50	; 0x32
 80064b0:	4a95      	ldr	r2, [pc, #596]	; (8006708 <UART_SetConfig+0x6f4>)
 80064b2:	fba2 2303 	umull	r2, r3, r2, r3
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064bc:	4498      	add	r8, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	469b      	mov	fp, r3
 80064c2:	f04f 0c00 	mov.w	ip, #0
 80064c6:	46d9      	mov	r9, fp
 80064c8:	46e2      	mov	sl, ip
 80064ca:	eb19 0309 	adds.w	r3, r9, r9
 80064ce:	eb4a 040a 	adc.w	r4, sl, sl
 80064d2:	4699      	mov	r9, r3
 80064d4:	46a2      	mov	sl, r4
 80064d6:	eb19 090b 	adds.w	r9, r9, fp
 80064da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064de:	f04f 0100 	mov.w	r1, #0
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064f2:	4689      	mov	r9, r1
 80064f4:	4692      	mov	sl, r2
 80064f6:	eb1b 0509 	adds.w	r5, fp, r9
 80064fa:	eb4c 060a 	adc.w	r6, ip, sl
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	4619      	mov	r1, r3
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	f04f 0400 	mov.w	r4, #0
 8006510:	0094      	lsls	r4, r2, #2
 8006512:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006516:	008b      	lsls	r3, r1, #2
 8006518:	461a      	mov	r2, r3
 800651a:	4623      	mov	r3, r4
 800651c:	4628      	mov	r0, r5
 800651e:	4631      	mov	r1, r6
 8006520:	f7fa fb6c 	bl	8000bfc <__aeabi_uldivmod>
 8006524:	4603      	mov	r3, r0
 8006526:	460c      	mov	r4, r1
 8006528:	461a      	mov	r2, r3
 800652a:	4b77      	ldr	r3, [pc, #476]	; (8006708 <UART_SetConfig+0x6f4>)
 800652c:	fba3 1302 	umull	r1, r3, r3, r2
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	2164      	movs	r1, #100	; 0x64
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	3332      	adds	r3, #50	; 0x32
 800653e:	4a72      	ldr	r2, [pc, #456]	; (8006708 <UART_SetConfig+0x6f4>)
 8006540:	fba2 2303 	umull	r2, r3, r2, r3
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	f003 020f 	and.w	r2, r3, #15
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4442      	add	r2, r8
 8006550:	609a      	str	r2, [r3, #8]
 8006552:	e0d0      	b.n	80066f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006554:	f7fe f930 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8006558:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	469a      	mov	sl, r3
 800655e:	f04f 0b00 	mov.w	fp, #0
 8006562:	46d0      	mov	r8, sl
 8006564:	46d9      	mov	r9, fp
 8006566:	eb18 0308 	adds.w	r3, r8, r8
 800656a:	eb49 0409 	adc.w	r4, r9, r9
 800656e:	4698      	mov	r8, r3
 8006570:	46a1      	mov	r9, r4
 8006572:	eb18 080a 	adds.w	r8, r8, sl
 8006576:	eb49 090b 	adc.w	r9, r9, fp
 800657a:	f04f 0100 	mov.w	r1, #0
 800657e:	f04f 0200 	mov.w	r2, #0
 8006582:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006586:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800658a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800658e:	4688      	mov	r8, r1
 8006590:	4691      	mov	r9, r2
 8006592:	eb1a 0508 	adds.w	r5, sl, r8
 8006596:	eb4b 0609 	adc.w	r6, fp, r9
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	4619      	mov	r1, r3
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	f04f 0400 	mov.w	r4, #0
 80065ac:	0094      	lsls	r4, r2, #2
 80065ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065b2:	008b      	lsls	r3, r1, #2
 80065b4:	461a      	mov	r2, r3
 80065b6:	4623      	mov	r3, r4
 80065b8:	4628      	mov	r0, r5
 80065ba:	4631      	mov	r1, r6
 80065bc:	f7fa fb1e 	bl	8000bfc <__aeabi_uldivmod>
 80065c0:	4603      	mov	r3, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	461a      	mov	r2, r3
 80065c6:	4b50      	ldr	r3, [pc, #320]	; (8006708 <UART_SetConfig+0x6f4>)
 80065c8:	fba3 2302 	umull	r2, r3, r3, r2
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	469b      	mov	fp, r3
 80065d6:	f04f 0c00 	mov.w	ip, #0
 80065da:	46d9      	mov	r9, fp
 80065dc:	46e2      	mov	sl, ip
 80065de:	eb19 0309 	adds.w	r3, r9, r9
 80065e2:	eb4a 040a 	adc.w	r4, sl, sl
 80065e6:	4699      	mov	r9, r3
 80065e8:	46a2      	mov	sl, r4
 80065ea:	eb19 090b 	adds.w	r9, r9, fp
 80065ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80065f2:	f04f 0100 	mov.w	r1, #0
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006602:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006606:	4689      	mov	r9, r1
 8006608:	4692      	mov	sl, r2
 800660a:	eb1b 0509 	adds.w	r5, fp, r9
 800660e:	eb4c 060a 	adc.w	r6, ip, sl
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	4619      	mov	r1, r3
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	f04f 0400 	mov.w	r4, #0
 8006624:	0094      	lsls	r4, r2, #2
 8006626:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800662a:	008b      	lsls	r3, r1, #2
 800662c:	461a      	mov	r2, r3
 800662e:	4623      	mov	r3, r4
 8006630:	4628      	mov	r0, r5
 8006632:	4631      	mov	r1, r6
 8006634:	f7fa fae2 	bl	8000bfc <__aeabi_uldivmod>
 8006638:	4603      	mov	r3, r0
 800663a:	460c      	mov	r4, r1
 800663c:	461a      	mov	r2, r3
 800663e:	4b32      	ldr	r3, [pc, #200]	; (8006708 <UART_SetConfig+0x6f4>)
 8006640:	fba3 1302 	umull	r1, r3, r3, r2
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	2164      	movs	r1, #100	; 0x64
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	3332      	adds	r3, #50	; 0x32
 8006652:	4a2d      	ldr	r2, [pc, #180]	; (8006708 <UART_SetConfig+0x6f4>)
 8006654:	fba2 2303 	umull	r2, r3, r2, r3
 8006658:	095b      	lsrs	r3, r3, #5
 800665a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800665e:	4498      	add	r8, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	469b      	mov	fp, r3
 8006664:	f04f 0c00 	mov.w	ip, #0
 8006668:	46d9      	mov	r9, fp
 800666a:	46e2      	mov	sl, ip
 800666c:	eb19 0309 	adds.w	r3, r9, r9
 8006670:	eb4a 040a 	adc.w	r4, sl, sl
 8006674:	4699      	mov	r9, r3
 8006676:	46a2      	mov	sl, r4
 8006678:	eb19 090b 	adds.w	r9, r9, fp
 800667c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006680:	f04f 0100 	mov.w	r1, #0
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800668c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006690:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006694:	4689      	mov	r9, r1
 8006696:	4692      	mov	sl, r2
 8006698:	eb1b 0509 	adds.w	r5, fp, r9
 800669c:	eb4c 060a 	adc.w	r6, ip, sl
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	4619      	mov	r1, r3
 80066a6:	f04f 0200 	mov.w	r2, #0
 80066aa:	f04f 0300 	mov.w	r3, #0
 80066ae:	f04f 0400 	mov.w	r4, #0
 80066b2:	0094      	lsls	r4, r2, #2
 80066b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066b8:	008b      	lsls	r3, r1, #2
 80066ba:	461a      	mov	r2, r3
 80066bc:	4623      	mov	r3, r4
 80066be:	4628      	mov	r0, r5
 80066c0:	4631      	mov	r1, r6
 80066c2:	f7fa fa9b 	bl	8000bfc <__aeabi_uldivmod>
 80066c6:	4603      	mov	r3, r0
 80066c8:	460c      	mov	r4, r1
 80066ca:	461a      	mov	r2, r3
 80066cc:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <UART_SetConfig+0x6f4>)
 80066ce:	fba3 1302 	umull	r1, r3, r3, r2
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	2164      	movs	r1, #100	; 0x64
 80066d6:	fb01 f303 	mul.w	r3, r1, r3
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	3332      	adds	r3, #50	; 0x32
 80066e0:	4a09      	ldr	r2, [pc, #36]	; (8006708 <UART_SetConfig+0x6f4>)
 80066e2:	fba2 2303 	umull	r2, r3, r2, r3
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	f003 020f 	and.w	r2, r3, #15
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4442      	add	r2, r8
 80066f2:	609a      	str	r2, [r3, #8]
}
 80066f4:	e7ff      	b.n	80066f6 <UART_SetConfig+0x6e2>
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006700:	40011000 	.word	0x40011000
 8006704:	40011400 	.word	0x40011400
 8006708:	51eb851f 	.word	0x51eb851f

0800670c <__errno>:
 800670c:	4b01      	ldr	r3, [pc, #4]	; (8006714 <__errno+0x8>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000014 	.word	0x20000014

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4e0d      	ldr	r6, [pc, #52]	; (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	; (8006754 <__libc_init_array+0x3c>)
 800671e:	1ba4      	subs	r4, r4, r6
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2500      	movs	r5, #0
 8006724:	42a5      	cmp	r5, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4e0b      	ldr	r6, [pc, #44]	; (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	; (800675c <__libc_init_array+0x44>)
 800672c:	f001 fc3a 	bl	8007fa4 <_init>
 8006730:	1ba4      	subs	r4, r4, r6
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2500      	movs	r5, #0
 8006736:	42a5      	cmp	r5, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006740:	4798      	blx	r3
 8006742:	3501      	adds	r5, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800674a:	4798      	blx	r3
 800674c:	3501      	adds	r5, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	08008728 	.word	0x08008728
 8006754:	08008728 	.word	0x08008728
 8006758:	08008728 	.word	0x08008728
 800675c:	0800872c 	.word	0x0800872c

08006760 <memcpy>:
 8006760:	b510      	push	{r4, lr}
 8006762:	1e43      	subs	r3, r0, #1
 8006764:	440a      	add	r2, r1
 8006766:	4291      	cmp	r1, r2
 8006768:	d100      	bne.n	800676c <memcpy+0xc>
 800676a:	bd10      	pop	{r4, pc}
 800676c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006770:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006774:	e7f7      	b.n	8006766 <memcpy+0x6>

08006776 <memset>:
 8006776:	4402      	add	r2, r0
 8006778:	4603      	mov	r3, r0
 800677a:	4293      	cmp	r3, r2
 800677c:	d100      	bne.n	8006780 <memset+0xa>
 800677e:	4770      	bx	lr
 8006780:	f803 1b01 	strb.w	r1, [r3], #1
 8006784:	e7f9      	b.n	800677a <memset+0x4>
	...

08006788 <siprintf>:
 8006788:	b40e      	push	{r1, r2, r3}
 800678a:	b500      	push	{lr}
 800678c:	b09c      	sub	sp, #112	; 0x70
 800678e:	ab1d      	add	r3, sp, #116	; 0x74
 8006790:	9002      	str	r0, [sp, #8]
 8006792:	9006      	str	r0, [sp, #24]
 8006794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006798:	4809      	ldr	r0, [pc, #36]	; (80067c0 <siprintf+0x38>)
 800679a:	9107      	str	r1, [sp, #28]
 800679c:	9104      	str	r1, [sp, #16]
 800679e:	4909      	ldr	r1, [pc, #36]	; (80067c4 <siprintf+0x3c>)
 80067a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80067a4:	9105      	str	r1, [sp, #20]
 80067a6:	6800      	ldr	r0, [r0, #0]
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	a902      	add	r1, sp, #8
 80067ac:	f000 f866 	bl	800687c <_svfiprintf_r>
 80067b0:	9b02      	ldr	r3, [sp, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	b01c      	add	sp, #112	; 0x70
 80067b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067bc:	b003      	add	sp, #12
 80067be:	4770      	bx	lr
 80067c0:	20000014 	.word	0x20000014
 80067c4:	ffff0208 	.word	0xffff0208

080067c8 <__ssputs_r>:
 80067c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067cc:	688e      	ldr	r6, [r1, #8]
 80067ce:	429e      	cmp	r6, r3
 80067d0:	4682      	mov	sl, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	4690      	mov	r8, r2
 80067d6:	4699      	mov	r9, r3
 80067d8:	d837      	bhi.n	800684a <__ssputs_r+0x82>
 80067da:	898a      	ldrh	r2, [r1, #12]
 80067dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067e0:	d031      	beq.n	8006846 <__ssputs_r+0x7e>
 80067e2:	6825      	ldr	r5, [r4, #0]
 80067e4:	6909      	ldr	r1, [r1, #16]
 80067e6:	1a6f      	subs	r7, r5, r1
 80067e8:	6965      	ldr	r5, [r4, #20]
 80067ea:	2302      	movs	r3, #2
 80067ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80067f4:	f109 0301 	add.w	r3, r9, #1
 80067f8:	443b      	add	r3, r7
 80067fa:	429d      	cmp	r5, r3
 80067fc:	bf38      	it	cc
 80067fe:	461d      	movcc	r5, r3
 8006800:	0553      	lsls	r3, r2, #21
 8006802:	d530      	bpl.n	8006866 <__ssputs_r+0x9e>
 8006804:	4629      	mov	r1, r5
 8006806:	f000 fb21 	bl	8006e4c <_malloc_r>
 800680a:	4606      	mov	r6, r0
 800680c:	b950      	cbnz	r0, 8006824 <__ssputs_r+0x5c>
 800680e:	230c      	movs	r3, #12
 8006810:	f8ca 3000 	str.w	r3, [sl]
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800681a:	81a3      	strh	r3, [r4, #12]
 800681c:	f04f 30ff 	mov.w	r0, #4294967295
 8006820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006824:	463a      	mov	r2, r7
 8006826:	6921      	ldr	r1, [r4, #16]
 8006828:	f7ff ff9a 	bl	8006760 <memcpy>
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006836:	81a3      	strh	r3, [r4, #12]
 8006838:	6126      	str	r6, [r4, #16]
 800683a:	6165      	str	r5, [r4, #20]
 800683c:	443e      	add	r6, r7
 800683e:	1bed      	subs	r5, r5, r7
 8006840:	6026      	str	r6, [r4, #0]
 8006842:	60a5      	str	r5, [r4, #8]
 8006844:	464e      	mov	r6, r9
 8006846:	454e      	cmp	r6, r9
 8006848:	d900      	bls.n	800684c <__ssputs_r+0x84>
 800684a:	464e      	mov	r6, r9
 800684c:	4632      	mov	r2, r6
 800684e:	4641      	mov	r1, r8
 8006850:	6820      	ldr	r0, [r4, #0]
 8006852:	f000 fa93 	bl	8006d7c <memmove>
 8006856:	68a3      	ldr	r3, [r4, #8]
 8006858:	1b9b      	subs	r3, r3, r6
 800685a:	60a3      	str	r3, [r4, #8]
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	441e      	add	r6, r3
 8006860:	6026      	str	r6, [r4, #0]
 8006862:	2000      	movs	r0, #0
 8006864:	e7dc      	b.n	8006820 <__ssputs_r+0x58>
 8006866:	462a      	mov	r2, r5
 8006868:	f000 fb4a 	bl	8006f00 <_realloc_r>
 800686c:	4606      	mov	r6, r0
 800686e:	2800      	cmp	r0, #0
 8006870:	d1e2      	bne.n	8006838 <__ssputs_r+0x70>
 8006872:	6921      	ldr	r1, [r4, #16]
 8006874:	4650      	mov	r0, sl
 8006876:	f000 fa9b 	bl	8006db0 <_free_r>
 800687a:	e7c8      	b.n	800680e <__ssputs_r+0x46>

0800687c <_svfiprintf_r>:
 800687c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006880:	461d      	mov	r5, r3
 8006882:	898b      	ldrh	r3, [r1, #12]
 8006884:	061f      	lsls	r7, r3, #24
 8006886:	b09d      	sub	sp, #116	; 0x74
 8006888:	4680      	mov	r8, r0
 800688a:	460c      	mov	r4, r1
 800688c:	4616      	mov	r6, r2
 800688e:	d50f      	bpl.n	80068b0 <_svfiprintf_r+0x34>
 8006890:	690b      	ldr	r3, [r1, #16]
 8006892:	b96b      	cbnz	r3, 80068b0 <_svfiprintf_r+0x34>
 8006894:	2140      	movs	r1, #64	; 0x40
 8006896:	f000 fad9 	bl	8006e4c <_malloc_r>
 800689a:	6020      	str	r0, [r4, #0]
 800689c:	6120      	str	r0, [r4, #16]
 800689e:	b928      	cbnz	r0, 80068ac <_svfiprintf_r+0x30>
 80068a0:	230c      	movs	r3, #12
 80068a2:	f8c8 3000 	str.w	r3, [r8]
 80068a6:	f04f 30ff 	mov.w	r0, #4294967295
 80068aa:	e0c8      	b.n	8006a3e <_svfiprintf_r+0x1c2>
 80068ac:	2340      	movs	r3, #64	; 0x40
 80068ae:	6163      	str	r3, [r4, #20]
 80068b0:	2300      	movs	r3, #0
 80068b2:	9309      	str	r3, [sp, #36]	; 0x24
 80068b4:	2320      	movs	r3, #32
 80068b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068ba:	2330      	movs	r3, #48	; 0x30
 80068bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068c0:	9503      	str	r5, [sp, #12]
 80068c2:	f04f 0b01 	mov.w	fp, #1
 80068c6:	4637      	mov	r7, r6
 80068c8:	463d      	mov	r5, r7
 80068ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80068ce:	b10b      	cbz	r3, 80068d4 <_svfiprintf_r+0x58>
 80068d0:	2b25      	cmp	r3, #37	; 0x25
 80068d2:	d13e      	bne.n	8006952 <_svfiprintf_r+0xd6>
 80068d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80068d8:	d00b      	beq.n	80068f2 <_svfiprintf_r+0x76>
 80068da:	4653      	mov	r3, sl
 80068dc:	4632      	mov	r2, r6
 80068de:	4621      	mov	r1, r4
 80068e0:	4640      	mov	r0, r8
 80068e2:	f7ff ff71 	bl	80067c8 <__ssputs_r>
 80068e6:	3001      	adds	r0, #1
 80068e8:	f000 80a4 	beq.w	8006a34 <_svfiprintf_r+0x1b8>
 80068ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ee:	4453      	add	r3, sl
 80068f0:	9309      	str	r3, [sp, #36]	; 0x24
 80068f2:	783b      	ldrb	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 809d 	beq.w	8006a34 <_svfiprintf_r+0x1b8>
 80068fa:	2300      	movs	r3, #0
 80068fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006904:	9304      	str	r3, [sp, #16]
 8006906:	9307      	str	r3, [sp, #28]
 8006908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800690c:	931a      	str	r3, [sp, #104]	; 0x68
 800690e:	462f      	mov	r7, r5
 8006910:	2205      	movs	r2, #5
 8006912:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006916:	4850      	ldr	r0, [pc, #320]	; (8006a58 <_svfiprintf_r+0x1dc>)
 8006918:	f7f9 fc82 	bl	8000220 <memchr>
 800691c:	9b04      	ldr	r3, [sp, #16]
 800691e:	b9d0      	cbnz	r0, 8006956 <_svfiprintf_r+0xda>
 8006920:	06d9      	lsls	r1, r3, #27
 8006922:	bf44      	itt	mi
 8006924:	2220      	movmi	r2, #32
 8006926:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800692a:	071a      	lsls	r2, r3, #28
 800692c:	bf44      	itt	mi
 800692e:	222b      	movmi	r2, #43	; 0x2b
 8006930:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006934:	782a      	ldrb	r2, [r5, #0]
 8006936:	2a2a      	cmp	r2, #42	; 0x2a
 8006938:	d015      	beq.n	8006966 <_svfiprintf_r+0xea>
 800693a:	9a07      	ldr	r2, [sp, #28]
 800693c:	462f      	mov	r7, r5
 800693e:	2000      	movs	r0, #0
 8006940:	250a      	movs	r5, #10
 8006942:	4639      	mov	r1, r7
 8006944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006948:	3b30      	subs	r3, #48	; 0x30
 800694a:	2b09      	cmp	r3, #9
 800694c:	d94d      	bls.n	80069ea <_svfiprintf_r+0x16e>
 800694e:	b1b8      	cbz	r0, 8006980 <_svfiprintf_r+0x104>
 8006950:	e00f      	b.n	8006972 <_svfiprintf_r+0xf6>
 8006952:	462f      	mov	r7, r5
 8006954:	e7b8      	b.n	80068c8 <_svfiprintf_r+0x4c>
 8006956:	4a40      	ldr	r2, [pc, #256]	; (8006a58 <_svfiprintf_r+0x1dc>)
 8006958:	1a80      	subs	r0, r0, r2
 800695a:	fa0b f000 	lsl.w	r0, fp, r0
 800695e:	4318      	orrs	r0, r3
 8006960:	9004      	str	r0, [sp, #16]
 8006962:	463d      	mov	r5, r7
 8006964:	e7d3      	b.n	800690e <_svfiprintf_r+0x92>
 8006966:	9a03      	ldr	r2, [sp, #12]
 8006968:	1d11      	adds	r1, r2, #4
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	9103      	str	r1, [sp, #12]
 800696e:	2a00      	cmp	r2, #0
 8006970:	db01      	blt.n	8006976 <_svfiprintf_r+0xfa>
 8006972:	9207      	str	r2, [sp, #28]
 8006974:	e004      	b.n	8006980 <_svfiprintf_r+0x104>
 8006976:	4252      	negs	r2, r2
 8006978:	f043 0302 	orr.w	r3, r3, #2
 800697c:	9207      	str	r2, [sp, #28]
 800697e:	9304      	str	r3, [sp, #16]
 8006980:	783b      	ldrb	r3, [r7, #0]
 8006982:	2b2e      	cmp	r3, #46	; 0x2e
 8006984:	d10c      	bne.n	80069a0 <_svfiprintf_r+0x124>
 8006986:	787b      	ldrb	r3, [r7, #1]
 8006988:	2b2a      	cmp	r3, #42	; 0x2a
 800698a:	d133      	bne.n	80069f4 <_svfiprintf_r+0x178>
 800698c:	9b03      	ldr	r3, [sp, #12]
 800698e:	1d1a      	adds	r2, r3, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	9203      	str	r2, [sp, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	bfb8      	it	lt
 8006998:	f04f 33ff 	movlt.w	r3, #4294967295
 800699c:	3702      	adds	r7, #2
 800699e:	9305      	str	r3, [sp, #20]
 80069a0:	4d2e      	ldr	r5, [pc, #184]	; (8006a5c <_svfiprintf_r+0x1e0>)
 80069a2:	7839      	ldrb	r1, [r7, #0]
 80069a4:	2203      	movs	r2, #3
 80069a6:	4628      	mov	r0, r5
 80069a8:	f7f9 fc3a 	bl	8000220 <memchr>
 80069ac:	b138      	cbz	r0, 80069be <_svfiprintf_r+0x142>
 80069ae:	2340      	movs	r3, #64	; 0x40
 80069b0:	1b40      	subs	r0, r0, r5
 80069b2:	fa03 f000 	lsl.w	r0, r3, r0
 80069b6:	9b04      	ldr	r3, [sp, #16]
 80069b8:	4303      	orrs	r3, r0
 80069ba:	3701      	adds	r7, #1
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	7839      	ldrb	r1, [r7, #0]
 80069c0:	4827      	ldr	r0, [pc, #156]	; (8006a60 <_svfiprintf_r+0x1e4>)
 80069c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069c6:	2206      	movs	r2, #6
 80069c8:	1c7e      	adds	r6, r7, #1
 80069ca:	f7f9 fc29 	bl	8000220 <memchr>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d038      	beq.n	8006a44 <_svfiprintf_r+0x1c8>
 80069d2:	4b24      	ldr	r3, [pc, #144]	; (8006a64 <_svfiprintf_r+0x1e8>)
 80069d4:	bb13      	cbnz	r3, 8006a1c <_svfiprintf_r+0x1a0>
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	3307      	adds	r3, #7
 80069da:	f023 0307 	bic.w	r3, r3, #7
 80069de:	3308      	adds	r3, #8
 80069e0:	9303      	str	r3, [sp, #12]
 80069e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e4:	444b      	add	r3, r9
 80069e6:	9309      	str	r3, [sp, #36]	; 0x24
 80069e8:	e76d      	b.n	80068c6 <_svfiprintf_r+0x4a>
 80069ea:	fb05 3202 	mla	r2, r5, r2, r3
 80069ee:	2001      	movs	r0, #1
 80069f0:	460f      	mov	r7, r1
 80069f2:	e7a6      	b.n	8006942 <_svfiprintf_r+0xc6>
 80069f4:	2300      	movs	r3, #0
 80069f6:	3701      	adds	r7, #1
 80069f8:	9305      	str	r3, [sp, #20]
 80069fa:	4619      	mov	r1, r3
 80069fc:	250a      	movs	r5, #10
 80069fe:	4638      	mov	r0, r7
 8006a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a04:	3a30      	subs	r2, #48	; 0x30
 8006a06:	2a09      	cmp	r2, #9
 8006a08:	d903      	bls.n	8006a12 <_svfiprintf_r+0x196>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0c8      	beq.n	80069a0 <_svfiprintf_r+0x124>
 8006a0e:	9105      	str	r1, [sp, #20]
 8006a10:	e7c6      	b.n	80069a0 <_svfiprintf_r+0x124>
 8006a12:	fb05 2101 	mla	r1, r5, r1, r2
 8006a16:	2301      	movs	r3, #1
 8006a18:	4607      	mov	r7, r0
 8006a1a:	e7f0      	b.n	80069fe <_svfiprintf_r+0x182>
 8006a1c:	ab03      	add	r3, sp, #12
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	4622      	mov	r2, r4
 8006a22:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <_svfiprintf_r+0x1ec>)
 8006a24:	a904      	add	r1, sp, #16
 8006a26:	4640      	mov	r0, r8
 8006a28:	f3af 8000 	nop.w
 8006a2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006a30:	4681      	mov	r9, r0
 8006a32:	d1d6      	bne.n	80069e2 <_svfiprintf_r+0x166>
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	065b      	lsls	r3, r3, #25
 8006a38:	f53f af35 	bmi.w	80068a6 <_svfiprintf_r+0x2a>
 8006a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a3e:	b01d      	add	sp, #116	; 0x74
 8006a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a44:	ab03      	add	r3, sp, #12
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	4622      	mov	r2, r4
 8006a4a:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <_svfiprintf_r+0x1ec>)
 8006a4c:	a904      	add	r1, sp, #16
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f000 f882 	bl	8006b58 <_printf_i>
 8006a54:	e7ea      	b.n	8006a2c <_svfiprintf_r+0x1b0>
 8006a56:	bf00      	nop
 8006a58:	08008514 	.word	0x08008514
 8006a5c:	0800851a 	.word	0x0800851a
 8006a60:	0800851e 	.word	0x0800851e
 8006a64:	00000000 	.word	0x00000000
 8006a68:	080067c9 	.word	0x080067c9

08006a6c <_printf_common>:
 8006a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a70:	4691      	mov	r9, r2
 8006a72:	461f      	mov	r7, r3
 8006a74:	688a      	ldr	r2, [r1, #8]
 8006a76:	690b      	ldr	r3, [r1, #16]
 8006a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	bfb8      	it	lt
 8006a80:	4613      	movlt	r3, r2
 8006a82:	f8c9 3000 	str.w	r3, [r9]
 8006a86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	b112      	cbz	r2, 8006a96 <_printf_common+0x2a>
 8006a90:	3301      	adds	r3, #1
 8006a92:	f8c9 3000 	str.w	r3, [r9]
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	0699      	lsls	r1, r3, #26
 8006a9a:	bf42      	ittt	mi
 8006a9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006aa0:	3302      	addmi	r3, #2
 8006aa2:	f8c9 3000 	strmi.w	r3, [r9]
 8006aa6:	6825      	ldr	r5, [r4, #0]
 8006aa8:	f015 0506 	ands.w	r5, r5, #6
 8006aac:	d107      	bne.n	8006abe <_printf_common+0x52>
 8006aae:	f104 0a19 	add.w	sl, r4, #25
 8006ab2:	68e3      	ldr	r3, [r4, #12]
 8006ab4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ab8:	1a9b      	subs	r3, r3, r2
 8006aba:	42ab      	cmp	r3, r5
 8006abc:	dc28      	bgt.n	8006b10 <_printf_common+0xa4>
 8006abe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ac2:	6822      	ldr	r2, [r4, #0]
 8006ac4:	3300      	adds	r3, #0
 8006ac6:	bf18      	it	ne
 8006ac8:	2301      	movne	r3, #1
 8006aca:	0692      	lsls	r2, r2, #26
 8006acc:	d42d      	bmi.n	8006b2a <_printf_common+0xbe>
 8006ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	47c0      	blx	r8
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d020      	beq.n	8006b1e <_printf_common+0xb2>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	68e5      	ldr	r5, [r4, #12]
 8006ae0:	f8d9 2000 	ldr.w	r2, [r9]
 8006ae4:	f003 0306 	and.w	r3, r3, #6
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	bf08      	it	eq
 8006aec:	1aad      	subeq	r5, r5, r2
 8006aee:	68a3      	ldr	r3, [r4, #8]
 8006af0:	6922      	ldr	r2, [r4, #16]
 8006af2:	bf0c      	ite	eq
 8006af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006af8:	2500      	movne	r5, #0
 8006afa:	4293      	cmp	r3, r2
 8006afc:	bfc4      	itt	gt
 8006afe:	1a9b      	subgt	r3, r3, r2
 8006b00:	18ed      	addgt	r5, r5, r3
 8006b02:	f04f 0900 	mov.w	r9, #0
 8006b06:	341a      	adds	r4, #26
 8006b08:	454d      	cmp	r5, r9
 8006b0a:	d11a      	bne.n	8006b42 <_printf_common+0xd6>
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	e008      	b.n	8006b22 <_printf_common+0xb6>
 8006b10:	2301      	movs	r3, #1
 8006b12:	4652      	mov	r2, sl
 8006b14:	4639      	mov	r1, r7
 8006b16:	4630      	mov	r0, r6
 8006b18:	47c0      	blx	r8
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d103      	bne.n	8006b26 <_printf_common+0xba>
 8006b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b26:	3501      	adds	r5, #1
 8006b28:	e7c3      	b.n	8006ab2 <_printf_common+0x46>
 8006b2a:	18e1      	adds	r1, r4, r3
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	2030      	movs	r0, #48	; 0x30
 8006b30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b34:	4422      	add	r2, r4
 8006b36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b3e:	3302      	adds	r3, #2
 8006b40:	e7c5      	b.n	8006ace <_printf_common+0x62>
 8006b42:	2301      	movs	r3, #1
 8006b44:	4622      	mov	r2, r4
 8006b46:	4639      	mov	r1, r7
 8006b48:	4630      	mov	r0, r6
 8006b4a:	47c0      	blx	r8
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d0e6      	beq.n	8006b1e <_printf_common+0xb2>
 8006b50:	f109 0901 	add.w	r9, r9, #1
 8006b54:	e7d8      	b.n	8006b08 <_printf_common+0x9c>
	...

08006b58 <_printf_i>:
 8006b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b60:	460c      	mov	r4, r1
 8006b62:	7e09      	ldrb	r1, [r1, #24]
 8006b64:	b085      	sub	sp, #20
 8006b66:	296e      	cmp	r1, #110	; 0x6e
 8006b68:	4617      	mov	r7, r2
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	4698      	mov	r8, r3
 8006b6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b70:	f000 80b3 	beq.w	8006cda <_printf_i+0x182>
 8006b74:	d822      	bhi.n	8006bbc <_printf_i+0x64>
 8006b76:	2963      	cmp	r1, #99	; 0x63
 8006b78:	d036      	beq.n	8006be8 <_printf_i+0x90>
 8006b7a:	d80a      	bhi.n	8006b92 <_printf_i+0x3a>
 8006b7c:	2900      	cmp	r1, #0
 8006b7e:	f000 80b9 	beq.w	8006cf4 <_printf_i+0x19c>
 8006b82:	2958      	cmp	r1, #88	; 0x58
 8006b84:	f000 8083 	beq.w	8006c8e <_printf_i+0x136>
 8006b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b90:	e032      	b.n	8006bf8 <_printf_i+0xa0>
 8006b92:	2964      	cmp	r1, #100	; 0x64
 8006b94:	d001      	beq.n	8006b9a <_printf_i+0x42>
 8006b96:	2969      	cmp	r1, #105	; 0x69
 8006b98:	d1f6      	bne.n	8006b88 <_printf_i+0x30>
 8006b9a:	6820      	ldr	r0, [r4, #0]
 8006b9c:	6813      	ldr	r3, [r2, #0]
 8006b9e:	0605      	lsls	r5, r0, #24
 8006ba0:	f103 0104 	add.w	r1, r3, #4
 8006ba4:	d52a      	bpl.n	8006bfc <_printf_i+0xa4>
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6011      	str	r1, [r2, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	da03      	bge.n	8006bb6 <_printf_i+0x5e>
 8006bae:	222d      	movs	r2, #45	; 0x2d
 8006bb0:	425b      	negs	r3, r3
 8006bb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006bb6:	486f      	ldr	r0, [pc, #444]	; (8006d74 <_printf_i+0x21c>)
 8006bb8:	220a      	movs	r2, #10
 8006bba:	e039      	b.n	8006c30 <_printf_i+0xd8>
 8006bbc:	2973      	cmp	r1, #115	; 0x73
 8006bbe:	f000 809d 	beq.w	8006cfc <_printf_i+0x1a4>
 8006bc2:	d808      	bhi.n	8006bd6 <_printf_i+0x7e>
 8006bc4:	296f      	cmp	r1, #111	; 0x6f
 8006bc6:	d020      	beq.n	8006c0a <_printf_i+0xb2>
 8006bc8:	2970      	cmp	r1, #112	; 0x70
 8006bca:	d1dd      	bne.n	8006b88 <_printf_i+0x30>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	f043 0320 	orr.w	r3, r3, #32
 8006bd2:	6023      	str	r3, [r4, #0]
 8006bd4:	e003      	b.n	8006bde <_printf_i+0x86>
 8006bd6:	2975      	cmp	r1, #117	; 0x75
 8006bd8:	d017      	beq.n	8006c0a <_printf_i+0xb2>
 8006bda:	2978      	cmp	r1, #120	; 0x78
 8006bdc:	d1d4      	bne.n	8006b88 <_printf_i+0x30>
 8006bde:	2378      	movs	r3, #120	; 0x78
 8006be0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006be4:	4864      	ldr	r0, [pc, #400]	; (8006d78 <_printf_i+0x220>)
 8006be6:	e055      	b.n	8006c94 <_printf_i+0x13c>
 8006be8:	6813      	ldr	r3, [r2, #0]
 8006bea:	1d19      	adds	r1, r3, #4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6011      	str	r1, [r2, #0]
 8006bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e08c      	b.n	8006d16 <_printf_i+0x1be>
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6011      	str	r1, [r2, #0]
 8006c00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c04:	bf18      	it	ne
 8006c06:	b21b      	sxthne	r3, r3
 8006c08:	e7cf      	b.n	8006baa <_printf_i+0x52>
 8006c0a:	6813      	ldr	r3, [r2, #0]
 8006c0c:	6825      	ldr	r5, [r4, #0]
 8006c0e:	1d18      	adds	r0, r3, #4
 8006c10:	6010      	str	r0, [r2, #0]
 8006c12:	0628      	lsls	r0, r5, #24
 8006c14:	d501      	bpl.n	8006c1a <_printf_i+0xc2>
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	e002      	b.n	8006c20 <_printf_i+0xc8>
 8006c1a:	0668      	lsls	r0, r5, #25
 8006c1c:	d5fb      	bpl.n	8006c16 <_printf_i+0xbe>
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	4854      	ldr	r0, [pc, #336]	; (8006d74 <_printf_i+0x21c>)
 8006c22:	296f      	cmp	r1, #111	; 0x6f
 8006c24:	bf14      	ite	ne
 8006c26:	220a      	movne	r2, #10
 8006c28:	2208      	moveq	r2, #8
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c30:	6865      	ldr	r5, [r4, #4]
 8006c32:	60a5      	str	r5, [r4, #8]
 8006c34:	2d00      	cmp	r5, #0
 8006c36:	f2c0 8095 	blt.w	8006d64 <_printf_i+0x20c>
 8006c3a:	6821      	ldr	r1, [r4, #0]
 8006c3c:	f021 0104 	bic.w	r1, r1, #4
 8006c40:	6021      	str	r1, [r4, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d13d      	bne.n	8006cc2 <_printf_i+0x16a>
 8006c46:	2d00      	cmp	r5, #0
 8006c48:	f040 808e 	bne.w	8006d68 <_printf_i+0x210>
 8006c4c:	4665      	mov	r5, ip
 8006c4e:	2a08      	cmp	r2, #8
 8006c50:	d10b      	bne.n	8006c6a <_printf_i+0x112>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	07db      	lsls	r3, r3, #31
 8006c56:	d508      	bpl.n	8006c6a <_printf_i+0x112>
 8006c58:	6923      	ldr	r3, [r4, #16]
 8006c5a:	6862      	ldr	r2, [r4, #4]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	bfde      	ittt	le
 8006c60:	2330      	movle	r3, #48	; 0x30
 8006c62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c6a:	ebac 0305 	sub.w	r3, ip, r5
 8006c6e:	6123      	str	r3, [r4, #16]
 8006c70:	f8cd 8000 	str.w	r8, [sp]
 8006c74:	463b      	mov	r3, r7
 8006c76:	aa03      	add	r2, sp, #12
 8006c78:	4621      	mov	r1, r4
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	f7ff fef6 	bl	8006a6c <_printf_common>
 8006c80:	3001      	adds	r0, #1
 8006c82:	d14d      	bne.n	8006d20 <_printf_i+0x1c8>
 8006c84:	f04f 30ff 	mov.w	r0, #4294967295
 8006c88:	b005      	add	sp, #20
 8006c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c8e:	4839      	ldr	r0, [pc, #228]	; (8006d74 <_printf_i+0x21c>)
 8006c90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006c94:	6813      	ldr	r3, [r2, #0]
 8006c96:	6821      	ldr	r1, [r4, #0]
 8006c98:	1d1d      	adds	r5, r3, #4
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6015      	str	r5, [r2, #0]
 8006c9e:	060a      	lsls	r2, r1, #24
 8006ca0:	d50b      	bpl.n	8006cba <_printf_i+0x162>
 8006ca2:	07ca      	lsls	r2, r1, #31
 8006ca4:	bf44      	itt	mi
 8006ca6:	f041 0120 	orrmi.w	r1, r1, #32
 8006caa:	6021      	strmi	r1, [r4, #0]
 8006cac:	b91b      	cbnz	r3, 8006cb6 <_printf_i+0x15e>
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	f022 0220 	bic.w	r2, r2, #32
 8006cb4:	6022      	str	r2, [r4, #0]
 8006cb6:	2210      	movs	r2, #16
 8006cb8:	e7b7      	b.n	8006c2a <_printf_i+0xd2>
 8006cba:	064d      	lsls	r5, r1, #25
 8006cbc:	bf48      	it	mi
 8006cbe:	b29b      	uxthmi	r3, r3
 8006cc0:	e7ef      	b.n	8006ca2 <_printf_i+0x14a>
 8006cc2:	4665      	mov	r5, ip
 8006cc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cc8:	fb02 3311 	mls	r3, r2, r1, r3
 8006ccc:	5cc3      	ldrb	r3, [r0, r3]
 8006cce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	2900      	cmp	r1, #0
 8006cd6:	d1f5      	bne.n	8006cc4 <_printf_i+0x16c>
 8006cd8:	e7b9      	b.n	8006c4e <_printf_i+0xf6>
 8006cda:	6813      	ldr	r3, [r2, #0]
 8006cdc:	6825      	ldr	r5, [r4, #0]
 8006cde:	6961      	ldr	r1, [r4, #20]
 8006ce0:	1d18      	adds	r0, r3, #4
 8006ce2:	6010      	str	r0, [r2, #0]
 8006ce4:	0628      	lsls	r0, r5, #24
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	d501      	bpl.n	8006cee <_printf_i+0x196>
 8006cea:	6019      	str	r1, [r3, #0]
 8006cec:	e002      	b.n	8006cf4 <_printf_i+0x19c>
 8006cee:	066a      	lsls	r2, r5, #25
 8006cf0:	d5fb      	bpl.n	8006cea <_printf_i+0x192>
 8006cf2:	8019      	strh	r1, [r3, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	6123      	str	r3, [r4, #16]
 8006cf8:	4665      	mov	r5, ip
 8006cfa:	e7b9      	b.n	8006c70 <_printf_i+0x118>
 8006cfc:	6813      	ldr	r3, [r2, #0]
 8006cfe:	1d19      	adds	r1, r3, #4
 8006d00:	6011      	str	r1, [r2, #0]
 8006d02:	681d      	ldr	r5, [r3, #0]
 8006d04:	6862      	ldr	r2, [r4, #4]
 8006d06:	2100      	movs	r1, #0
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f7f9 fa89 	bl	8000220 <memchr>
 8006d0e:	b108      	cbz	r0, 8006d14 <_printf_i+0x1bc>
 8006d10:	1b40      	subs	r0, r0, r5
 8006d12:	6060      	str	r0, [r4, #4]
 8006d14:	6863      	ldr	r3, [r4, #4]
 8006d16:	6123      	str	r3, [r4, #16]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d1e:	e7a7      	b.n	8006c70 <_printf_i+0x118>
 8006d20:	6923      	ldr	r3, [r4, #16]
 8006d22:	462a      	mov	r2, r5
 8006d24:	4639      	mov	r1, r7
 8006d26:	4630      	mov	r0, r6
 8006d28:	47c0      	blx	r8
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d0aa      	beq.n	8006c84 <_printf_i+0x12c>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	079b      	lsls	r3, r3, #30
 8006d32:	d413      	bmi.n	8006d5c <_printf_i+0x204>
 8006d34:	68e0      	ldr	r0, [r4, #12]
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	4298      	cmp	r0, r3
 8006d3a:	bfb8      	it	lt
 8006d3c:	4618      	movlt	r0, r3
 8006d3e:	e7a3      	b.n	8006c88 <_printf_i+0x130>
 8006d40:	2301      	movs	r3, #1
 8006d42:	464a      	mov	r2, r9
 8006d44:	4639      	mov	r1, r7
 8006d46:	4630      	mov	r0, r6
 8006d48:	47c0      	blx	r8
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	d09a      	beq.n	8006c84 <_printf_i+0x12c>
 8006d4e:	3501      	adds	r5, #1
 8006d50:	68e3      	ldr	r3, [r4, #12]
 8006d52:	9a03      	ldr	r2, [sp, #12]
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	42ab      	cmp	r3, r5
 8006d58:	dcf2      	bgt.n	8006d40 <_printf_i+0x1e8>
 8006d5a:	e7eb      	b.n	8006d34 <_printf_i+0x1dc>
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	f104 0919 	add.w	r9, r4, #25
 8006d62:	e7f5      	b.n	8006d50 <_printf_i+0x1f8>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1ac      	bne.n	8006cc2 <_printf_i+0x16a>
 8006d68:	7803      	ldrb	r3, [r0, #0]
 8006d6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d72:	e76c      	b.n	8006c4e <_printf_i+0xf6>
 8006d74:	08008525 	.word	0x08008525
 8006d78:	08008536 	.word	0x08008536

08006d7c <memmove>:
 8006d7c:	4288      	cmp	r0, r1
 8006d7e:	b510      	push	{r4, lr}
 8006d80:	eb01 0302 	add.w	r3, r1, r2
 8006d84:	d807      	bhi.n	8006d96 <memmove+0x1a>
 8006d86:	1e42      	subs	r2, r0, #1
 8006d88:	4299      	cmp	r1, r3
 8006d8a:	d00a      	beq.n	8006da2 <memmove+0x26>
 8006d8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d90:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006d94:	e7f8      	b.n	8006d88 <memmove+0xc>
 8006d96:	4283      	cmp	r3, r0
 8006d98:	d9f5      	bls.n	8006d86 <memmove+0xa>
 8006d9a:	1881      	adds	r1, r0, r2
 8006d9c:	1ad2      	subs	r2, r2, r3
 8006d9e:	42d3      	cmn	r3, r2
 8006da0:	d100      	bne.n	8006da4 <memmove+0x28>
 8006da2:	bd10      	pop	{r4, pc}
 8006da4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006da8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006dac:	e7f7      	b.n	8006d9e <memmove+0x22>
	...

08006db0 <_free_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4605      	mov	r5, r0
 8006db4:	2900      	cmp	r1, #0
 8006db6:	d045      	beq.n	8006e44 <_free_r+0x94>
 8006db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dbc:	1f0c      	subs	r4, r1, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bfb8      	it	lt
 8006dc2:	18e4      	addlt	r4, r4, r3
 8006dc4:	f000 f8d2 	bl	8006f6c <__malloc_lock>
 8006dc8:	4a1f      	ldr	r2, [pc, #124]	; (8006e48 <_free_r+0x98>)
 8006dca:	6813      	ldr	r3, [r2, #0]
 8006dcc:	4610      	mov	r0, r2
 8006dce:	b933      	cbnz	r3, 8006dde <_free_r+0x2e>
 8006dd0:	6063      	str	r3, [r4, #4]
 8006dd2:	6014      	str	r4, [r2, #0]
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dda:	f000 b8c8 	b.w	8006f6e <__malloc_unlock>
 8006dde:	42a3      	cmp	r3, r4
 8006de0:	d90c      	bls.n	8006dfc <_free_r+0x4c>
 8006de2:	6821      	ldr	r1, [r4, #0]
 8006de4:	1862      	adds	r2, r4, r1
 8006de6:	4293      	cmp	r3, r2
 8006de8:	bf04      	itt	eq
 8006dea:	681a      	ldreq	r2, [r3, #0]
 8006dec:	685b      	ldreq	r3, [r3, #4]
 8006dee:	6063      	str	r3, [r4, #4]
 8006df0:	bf04      	itt	eq
 8006df2:	1852      	addeq	r2, r2, r1
 8006df4:	6022      	streq	r2, [r4, #0]
 8006df6:	6004      	str	r4, [r0, #0]
 8006df8:	e7ec      	b.n	8006dd4 <_free_r+0x24>
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	b10a      	cbz	r2, 8006e04 <_free_r+0x54>
 8006e00:	42a2      	cmp	r2, r4
 8006e02:	d9fa      	bls.n	8006dfa <_free_r+0x4a>
 8006e04:	6819      	ldr	r1, [r3, #0]
 8006e06:	1858      	adds	r0, r3, r1
 8006e08:	42a0      	cmp	r0, r4
 8006e0a:	d10b      	bne.n	8006e24 <_free_r+0x74>
 8006e0c:	6820      	ldr	r0, [r4, #0]
 8006e0e:	4401      	add	r1, r0
 8006e10:	1858      	adds	r0, r3, r1
 8006e12:	4282      	cmp	r2, r0
 8006e14:	6019      	str	r1, [r3, #0]
 8006e16:	d1dd      	bne.n	8006dd4 <_free_r+0x24>
 8006e18:	6810      	ldr	r0, [r2, #0]
 8006e1a:	6852      	ldr	r2, [r2, #4]
 8006e1c:	605a      	str	r2, [r3, #4]
 8006e1e:	4401      	add	r1, r0
 8006e20:	6019      	str	r1, [r3, #0]
 8006e22:	e7d7      	b.n	8006dd4 <_free_r+0x24>
 8006e24:	d902      	bls.n	8006e2c <_free_r+0x7c>
 8006e26:	230c      	movs	r3, #12
 8006e28:	602b      	str	r3, [r5, #0]
 8006e2a:	e7d3      	b.n	8006dd4 <_free_r+0x24>
 8006e2c:	6820      	ldr	r0, [r4, #0]
 8006e2e:	1821      	adds	r1, r4, r0
 8006e30:	428a      	cmp	r2, r1
 8006e32:	bf04      	itt	eq
 8006e34:	6811      	ldreq	r1, [r2, #0]
 8006e36:	6852      	ldreq	r2, [r2, #4]
 8006e38:	6062      	str	r2, [r4, #4]
 8006e3a:	bf04      	itt	eq
 8006e3c:	1809      	addeq	r1, r1, r0
 8006e3e:	6021      	streq	r1, [r4, #0]
 8006e40:	605c      	str	r4, [r3, #4]
 8006e42:	e7c7      	b.n	8006dd4 <_free_r+0x24>
 8006e44:	bd38      	pop	{r3, r4, r5, pc}
 8006e46:	bf00      	nop
 8006e48:	200000a8 	.word	0x200000a8

08006e4c <_malloc_r>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	1ccd      	adds	r5, r1, #3
 8006e50:	f025 0503 	bic.w	r5, r5, #3
 8006e54:	3508      	adds	r5, #8
 8006e56:	2d0c      	cmp	r5, #12
 8006e58:	bf38      	it	cc
 8006e5a:	250c      	movcc	r5, #12
 8006e5c:	2d00      	cmp	r5, #0
 8006e5e:	4606      	mov	r6, r0
 8006e60:	db01      	blt.n	8006e66 <_malloc_r+0x1a>
 8006e62:	42a9      	cmp	r1, r5
 8006e64:	d903      	bls.n	8006e6e <_malloc_r+0x22>
 8006e66:	230c      	movs	r3, #12
 8006e68:	6033      	str	r3, [r6, #0]
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	bd70      	pop	{r4, r5, r6, pc}
 8006e6e:	f000 f87d 	bl	8006f6c <__malloc_lock>
 8006e72:	4a21      	ldr	r2, [pc, #132]	; (8006ef8 <_malloc_r+0xac>)
 8006e74:	6814      	ldr	r4, [r2, #0]
 8006e76:	4621      	mov	r1, r4
 8006e78:	b991      	cbnz	r1, 8006ea0 <_malloc_r+0x54>
 8006e7a:	4c20      	ldr	r4, [pc, #128]	; (8006efc <_malloc_r+0xb0>)
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	b91b      	cbnz	r3, 8006e88 <_malloc_r+0x3c>
 8006e80:	4630      	mov	r0, r6
 8006e82:	f000 f863 	bl	8006f4c <_sbrk_r>
 8006e86:	6020      	str	r0, [r4, #0]
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f000 f85e 	bl	8006f4c <_sbrk_r>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d124      	bne.n	8006ede <_malloc_r+0x92>
 8006e94:	230c      	movs	r3, #12
 8006e96:	6033      	str	r3, [r6, #0]
 8006e98:	4630      	mov	r0, r6
 8006e9a:	f000 f868 	bl	8006f6e <__malloc_unlock>
 8006e9e:	e7e4      	b.n	8006e6a <_malloc_r+0x1e>
 8006ea0:	680b      	ldr	r3, [r1, #0]
 8006ea2:	1b5b      	subs	r3, r3, r5
 8006ea4:	d418      	bmi.n	8006ed8 <_malloc_r+0x8c>
 8006ea6:	2b0b      	cmp	r3, #11
 8006ea8:	d90f      	bls.n	8006eca <_malloc_r+0x7e>
 8006eaa:	600b      	str	r3, [r1, #0]
 8006eac:	50cd      	str	r5, [r1, r3]
 8006eae:	18cc      	adds	r4, r1, r3
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f000 f85c 	bl	8006f6e <__malloc_unlock>
 8006eb6:	f104 000b 	add.w	r0, r4, #11
 8006eba:	1d23      	adds	r3, r4, #4
 8006ebc:	f020 0007 	bic.w	r0, r0, #7
 8006ec0:	1ac3      	subs	r3, r0, r3
 8006ec2:	d0d3      	beq.n	8006e6c <_malloc_r+0x20>
 8006ec4:	425a      	negs	r2, r3
 8006ec6:	50e2      	str	r2, [r4, r3]
 8006ec8:	e7d0      	b.n	8006e6c <_malloc_r+0x20>
 8006eca:	428c      	cmp	r4, r1
 8006ecc:	684b      	ldr	r3, [r1, #4]
 8006ece:	bf16      	itet	ne
 8006ed0:	6063      	strne	r3, [r4, #4]
 8006ed2:	6013      	streq	r3, [r2, #0]
 8006ed4:	460c      	movne	r4, r1
 8006ed6:	e7eb      	b.n	8006eb0 <_malloc_r+0x64>
 8006ed8:	460c      	mov	r4, r1
 8006eda:	6849      	ldr	r1, [r1, #4]
 8006edc:	e7cc      	b.n	8006e78 <_malloc_r+0x2c>
 8006ede:	1cc4      	adds	r4, r0, #3
 8006ee0:	f024 0403 	bic.w	r4, r4, #3
 8006ee4:	42a0      	cmp	r0, r4
 8006ee6:	d005      	beq.n	8006ef4 <_malloc_r+0xa8>
 8006ee8:	1a21      	subs	r1, r4, r0
 8006eea:	4630      	mov	r0, r6
 8006eec:	f000 f82e 	bl	8006f4c <_sbrk_r>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d0cf      	beq.n	8006e94 <_malloc_r+0x48>
 8006ef4:	6025      	str	r5, [r4, #0]
 8006ef6:	e7db      	b.n	8006eb0 <_malloc_r+0x64>
 8006ef8:	200000a8 	.word	0x200000a8
 8006efc:	200000ac 	.word	0x200000ac

08006f00 <_realloc_r>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	4607      	mov	r7, r0
 8006f04:	4614      	mov	r4, r2
 8006f06:	460e      	mov	r6, r1
 8006f08:	b921      	cbnz	r1, 8006f14 <_realloc_r+0x14>
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f10:	f7ff bf9c 	b.w	8006e4c <_malloc_r>
 8006f14:	b922      	cbnz	r2, 8006f20 <_realloc_r+0x20>
 8006f16:	f7ff ff4b 	bl	8006db0 <_free_r>
 8006f1a:	4625      	mov	r5, r4
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f20:	f000 f826 	bl	8006f70 <_malloc_usable_size_r>
 8006f24:	42a0      	cmp	r0, r4
 8006f26:	d20f      	bcs.n	8006f48 <_realloc_r+0x48>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	f7ff ff8e 	bl	8006e4c <_malloc_r>
 8006f30:	4605      	mov	r5, r0
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d0f2      	beq.n	8006f1c <_realloc_r+0x1c>
 8006f36:	4631      	mov	r1, r6
 8006f38:	4622      	mov	r2, r4
 8006f3a:	f7ff fc11 	bl	8006760 <memcpy>
 8006f3e:	4631      	mov	r1, r6
 8006f40:	4638      	mov	r0, r7
 8006f42:	f7ff ff35 	bl	8006db0 <_free_r>
 8006f46:	e7e9      	b.n	8006f1c <_realloc_r+0x1c>
 8006f48:	4635      	mov	r5, r6
 8006f4a:	e7e7      	b.n	8006f1c <_realloc_r+0x1c>

08006f4c <_sbrk_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4c06      	ldr	r4, [pc, #24]	; (8006f68 <_sbrk_r+0x1c>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4605      	mov	r5, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	6023      	str	r3, [r4, #0]
 8006f58:	f7fc f926 	bl	80031a8 <_sbrk>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_sbrk_r+0x1a>
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_sbrk_r+0x1a>
 8006f64:	602b      	str	r3, [r5, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	20004da4 	.word	0x20004da4

08006f6c <__malloc_lock>:
 8006f6c:	4770      	bx	lr

08006f6e <__malloc_unlock>:
 8006f6e:	4770      	bx	lr

08006f70 <_malloc_usable_size_r>:
 8006f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f74:	1f18      	subs	r0, r3, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bfbc      	itt	lt
 8006f7a:	580b      	ldrlt	r3, [r1, r0]
 8006f7c:	18c0      	addlt	r0, r0, r3
 8006f7e:	4770      	bx	lr

08006f80 <sin>:
 8006f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f82:	ec51 0b10 	vmov	r0, r1, d0
 8006f86:	4a20      	ldr	r2, [pc, #128]	; (8007008 <sin+0x88>)
 8006f88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	dc07      	bgt.n	8006fa0 <sin+0x20>
 8006f90:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8007000 <sin+0x80>
 8006f94:	2000      	movs	r0, #0
 8006f96:	f000 fe37 	bl	8007c08 <__kernel_sin>
 8006f9a:	ec51 0b10 	vmov	r0, r1, d0
 8006f9e:	e007      	b.n	8006fb0 <sin+0x30>
 8006fa0:	4a1a      	ldr	r2, [pc, #104]	; (800700c <sin+0x8c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	dd09      	ble.n	8006fba <sin+0x3a>
 8006fa6:	ee10 2a10 	vmov	r2, s0
 8006faa:	460b      	mov	r3, r1
 8006fac:	f7f9 f98c 	bl	80002c8 <__aeabi_dsub>
 8006fb0:	ec41 0b10 	vmov	d0, r0, r1
 8006fb4:	b005      	add	sp, #20
 8006fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fba:	4668      	mov	r0, sp
 8006fbc:	f000 f828 	bl	8007010 <__ieee754_rem_pio2>
 8006fc0:	f000 0003 	and.w	r0, r0, #3
 8006fc4:	2801      	cmp	r0, #1
 8006fc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006fca:	ed9d 0b00 	vldr	d0, [sp]
 8006fce:	d004      	beq.n	8006fda <sin+0x5a>
 8006fd0:	2802      	cmp	r0, #2
 8006fd2:	d005      	beq.n	8006fe0 <sin+0x60>
 8006fd4:	b970      	cbnz	r0, 8006ff4 <sin+0x74>
 8006fd6:	2001      	movs	r0, #1
 8006fd8:	e7dd      	b.n	8006f96 <sin+0x16>
 8006fda:	f000 fa0d 	bl	80073f8 <__kernel_cos>
 8006fde:	e7dc      	b.n	8006f9a <sin+0x1a>
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	f000 fe11 	bl	8007c08 <__kernel_sin>
 8006fe6:	ec53 2b10 	vmov	r2, r3, d0
 8006fea:	ee10 0a10 	vmov	r0, s0
 8006fee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006ff2:	e7dd      	b.n	8006fb0 <sin+0x30>
 8006ff4:	f000 fa00 	bl	80073f8 <__kernel_cos>
 8006ff8:	e7f5      	b.n	8006fe6 <sin+0x66>
 8006ffa:	bf00      	nop
 8006ffc:	f3af 8000 	nop.w
	...
 8007008:	3fe921fb 	.word	0x3fe921fb
 800700c:	7fefffff 	.word	0x7fefffff

08007010 <__ieee754_rem_pio2>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	ec57 6b10 	vmov	r6, r7, d0
 8007018:	4bc3      	ldr	r3, [pc, #780]	; (8007328 <__ieee754_rem_pio2+0x318>)
 800701a:	b08d      	sub	sp, #52	; 0x34
 800701c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007020:	4598      	cmp	r8, r3
 8007022:	4604      	mov	r4, r0
 8007024:	9704      	str	r7, [sp, #16]
 8007026:	dc07      	bgt.n	8007038 <__ieee754_rem_pio2+0x28>
 8007028:	2200      	movs	r2, #0
 800702a:	2300      	movs	r3, #0
 800702c:	ed84 0b00 	vstr	d0, [r4]
 8007030:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007034:	2500      	movs	r5, #0
 8007036:	e027      	b.n	8007088 <__ieee754_rem_pio2+0x78>
 8007038:	4bbc      	ldr	r3, [pc, #752]	; (800732c <__ieee754_rem_pio2+0x31c>)
 800703a:	4598      	cmp	r8, r3
 800703c:	dc75      	bgt.n	800712a <__ieee754_rem_pio2+0x11a>
 800703e:	9b04      	ldr	r3, [sp, #16]
 8007040:	4dbb      	ldr	r5, [pc, #748]	; (8007330 <__ieee754_rem_pio2+0x320>)
 8007042:	2b00      	cmp	r3, #0
 8007044:	ee10 0a10 	vmov	r0, s0
 8007048:	a3a9      	add	r3, pc, #676	; (adr r3, 80072f0 <__ieee754_rem_pio2+0x2e0>)
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	4639      	mov	r1, r7
 8007050:	dd36      	ble.n	80070c0 <__ieee754_rem_pio2+0xb0>
 8007052:	f7f9 f939 	bl	80002c8 <__aeabi_dsub>
 8007056:	45a8      	cmp	r8, r5
 8007058:	4606      	mov	r6, r0
 800705a:	460f      	mov	r7, r1
 800705c:	d018      	beq.n	8007090 <__ieee754_rem_pio2+0x80>
 800705e:	a3a6      	add	r3, pc, #664	; (adr r3, 80072f8 <__ieee754_rem_pio2+0x2e8>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f7f9 f930 	bl	80002c8 <__aeabi_dsub>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	e9c4 2300 	strd	r2, r3, [r4]
 8007070:	4630      	mov	r0, r6
 8007072:	4639      	mov	r1, r7
 8007074:	f7f9 f928 	bl	80002c8 <__aeabi_dsub>
 8007078:	a39f      	add	r3, pc, #636	; (adr r3, 80072f8 <__ieee754_rem_pio2+0x2e8>)
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f7f9 f923 	bl	80002c8 <__aeabi_dsub>
 8007082:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007086:	2501      	movs	r5, #1
 8007088:	4628      	mov	r0, r5
 800708a:	b00d      	add	sp, #52	; 0x34
 800708c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007090:	a39b      	add	r3, pc, #620	; (adr r3, 8007300 <__ieee754_rem_pio2+0x2f0>)
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	f7f9 f917 	bl	80002c8 <__aeabi_dsub>
 800709a:	a39b      	add	r3, pc, #620	; (adr r3, 8007308 <__ieee754_rem_pio2+0x2f8>)
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	4606      	mov	r6, r0
 80070a2:	460f      	mov	r7, r1
 80070a4:	f7f9 f910 	bl	80002c8 <__aeabi_dsub>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	e9c4 2300 	strd	r2, r3, [r4]
 80070b0:	4630      	mov	r0, r6
 80070b2:	4639      	mov	r1, r7
 80070b4:	f7f9 f908 	bl	80002c8 <__aeabi_dsub>
 80070b8:	a393      	add	r3, pc, #588	; (adr r3, 8007308 <__ieee754_rem_pio2+0x2f8>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	e7de      	b.n	800707e <__ieee754_rem_pio2+0x6e>
 80070c0:	f7f9 f904 	bl	80002cc <__adddf3>
 80070c4:	45a8      	cmp	r8, r5
 80070c6:	4606      	mov	r6, r0
 80070c8:	460f      	mov	r7, r1
 80070ca:	d016      	beq.n	80070fa <__ieee754_rem_pio2+0xea>
 80070cc:	a38a      	add	r3, pc, #552	; (adr r3, 80072f8 <__ieee754_rem_pio2+0x2e8>)
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f7f9 f8fb 	bl	80002cc <__adddf3>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	e9c4 2300 	strd	r2, r3, [r4]
 80070de:	4630      	mov	r0, r6
 80070e0:	4639      	mov	r1, r7
 80070e2:	f7f9 f8f1 	bl	80002c8 <__aeabi_dsub>
 80070e6:	a384      	add	r3, pc, #528	; (adr r3, 80072f8 <__ieee754_rem_pio2+0x2e8>)
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	f7f9 f8ee 	bl	80002cc <__adddf3>
 80070f0:	f04f 35ff 	mov.w	r5, #4294967295
 80070f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80070f8:	e7c6      	b.n	8007088 <__ieee754_rem_pio2+0x78>
 80070fa:	a381      	add	r3, pc, #516	; (adr r3, 8007300 <__ieee754_rem_pio2+0x2f0>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f7f9 f8e4 	bl	80002cc <__adddf3>
 8007104:	a380      	add	r3, pc, #512	; (adr r3, 8007308 <__ieee754_rem_pio2+0x2f8>)
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	4606      	mov	r6, r0
 800710c:	460f      	mov	r7, r1
 800710e:	f7f9 f8dd 	bl	80002cc <__adddf3>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	e9c4 2300 	strd	r2, r3, [r4]
 800711a:	4630      	mov	r0, r6
 800711c:	4639      	mov	r1, r7
 800711e:	f7f9 f8d3 	bl	80002c8 <__aeabi_dsub>
 8007122:	a379      	add	r3, pc, #484	; (adr r3, 8007308 <__ieee754_rem_pio2+0x2f8>)
 8007124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007128:	e7e0      	b.n	80070ec <__ieee754_rem_pio2+0xdc>
 800712a:	4b82      	ldr	r3, [pc, #520]	; (8007334 <__ieee754_rem_pio2+0x324>)
 800712c:	4598      	cmp	r8, r3
 800712e:	f300 80d0 	bgt.w	80072d2 <__ieee754_rem_pio2+0x2c2>
 8007132:	f000 fe23 	bl	8007d7c <fabs>
 8007136:	ec57 6b10 	vmov	r6, r7, d0
 800713a:	ee10 0a10 	vmov	r0, s0
 800713e:	a374      	add	r3, pc, #464	; (adr r3, 8007310 <__ieee754_rem_pio2+0x300>)
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	4639      	mov	r1, r7
 8007146:	f7f9 fa77 	bl	8000638 <__aeabi_dmul>
 800714a:	2200      	movs	r2, #0
 800714c:	4b7a      	ldr	r3, [pc, #488]	; (8007338 <__ieee754_rem_pio2+0x328>)
 800714e:	f7f9 f8bd 	bl	80002cc <__adddf3>
 8007152:	f7f9 fd0b 	bl	8000b6c <__aeabi_d2iz>
 8007156:	4605      	mov	r5, r0
 8007158:	f7f9 fa04 	bl	8000564 <__aeabi_i2d>
 800715c:	a364      	add	r3, pc, #400	; (adr r3, 80072f0 <__ieee754_rem_pio2+0x2e0>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007166:	f7f9 fa67 	bl	8000638 <__aeabi_dmul>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	f7f9 f8a9 	bl	80002c8 <__aeabi_dsub>
 8007176:	a360      	add	r3, pc, #384	; (adr r3, 80072f8 <__ieee754_rem_pio2+0x2e8>)
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	4682      	mov	sl, r0
 800717e:	468b      	mov	fp, r1
 8007180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007184:	f7f9 fa58 	bl	8000638 <__aeabi_dmul>
 8007188:	2d1f      	cmp	r5, #31
 800718a:	4606      	mov	r6, r0
 800718c:	460f      	mov	r7, r1
 800718e:	dc0c      	bgt.n	80071aa <__ieee754_rem_pio2+0x19a>
 8007190:	1e6a      	subs	r2, r5, #1
 8007192:	4b6a      	ldr	r3, [pc, #424]	; (800733c <__ieee754_rem_pio2+0x32c>)
 8007194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007198:	4543      	cmp	r3, r8
 800719a:	d006      	beq.n	80071aa <__ieee754_rem_pio2+0x19a>
 800719c:	4632      	mov	r2, r6
 800719e:	463b      	mov	r3, r7
 80071a0:	4650      	mov	r0, sl
 80071a2:	4659      	mov	r1, fp
 80071a4:	f7f9 f890 	bl	80002c8 <__aeabi_dsub>
 80071a8:	e00e      	b.n	80071c8 <__ieee754_rem_pio2+0x1b8>
 80071aa:	4632      	mov	r2, r6
 80071ac:	463b      	mov	r3, r7
 80071ae:	4650      	mov	r0, sl
 80071b0:	4659      	mov	r1, fp
 80071b2:	f7f9 f889 	bl	80002c8 <__aeabi_dsub>
 80071b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80071ba:	9305      	str	r3, [sp, #20]
 80071bc:	9a05      	ldr	r2, [sp, #20]
 80071be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b10      	cmp	r3, #16
 80071c6:	dc02      	bgt.n	80071ce <__ieee754_rem_pio2+0x1be>
 80071c8:	e9c4 0100 	strd	r0, r1, [r4]
 80071cc:	e039      	b.n	8007242 <__ieee754_rem_pio2+0x232>
 80071ce:	a34c      	add	r3, pc, #304	; (adr r3, 8007300 <__ieee754_rem_pio2+0x2f0>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071d8:	f7f9 fa2e 	bl	8000638 <__aeabi_dmul>
 80071dc:	4606      	mov	r6, r0
 80071de:	460f      	mov	r7, r1
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4650      	mov	r0, sl
 80071e6:	4659      	mov	r1, fp
 80071e8:	f7f9 f86e 	bl	80002c8 <__aeabi_dsub>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4680      	mov	r8, r0
 80071f2:	4689      	mov	r9, r1
 80071f4:	4650      	mov	r0, sl
 80071f6:	4659      	mov	r1, fp
 80071f8:	f7f9 f866 	bl	80002c8 <__aeabi_dsub>
 80071fc:	4632      	mov	r2, r6
 80071fe:	463b      	mov	r3, r7
 8007200:	f7f9 f862 	bl	80002c8 <__aeabi_dsub>
 8007204:	a340      	add	r3, pc, #256	; (adr r3, 8007308 <__ieee754_rem_pio2+0x2f8>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	4606      	mov	r6, r0
 800720c:	460f      	mov	r7, r1
 800720e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007212:	f7f9 fa11 	bl	8000638 <__aeabi_dmul>
 8007216:	4632      	mov	r2, r6
 8007218:	463b      	mov	r3, r7
 800721a:	f7f9 f855 	bl	80002c8 <__aeabi_dsub>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	4606      	mov	r6, r0
 8007224:	460f      	mov	r7, r1
 8007226:	4640      	mov	r0, r8
 8007228:	4649      	mov	r1, r9
 800722a:	f7f9 f84d 	bl	80002c8 <__aeabi_dsub>
 800722e:	9a05      	ldr	r2, [sp, #20]
 8007230:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b31      	cmp	r3, #49	; 0x31
 8007238:	dc20      	bgt.n	800727c <__ieee754_rem_pio2+0x26c>
 800723a:	e9c4 0100 	strd	r0, r1, [r4]
 800723e:	46c2      	mov	sl, r8
 8007240:	46cb      	mov	fp, r9
 8007242:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007246:	4650      	mov	r0, sl
 8007248:	4642      	mov	r2, r8
 800724a:	464b      	mov	r3, r9
 800724c:	4659      	mov	r1, fp
 800724e:	f7f9 f83b 	bl	80002c8 <__aeabi_dsub>
 8007252:	463b      	mov	r3, r7
 8007254:	4632      	mov	r2, r6
 8007256:	f7f9 f837 	bl	80002c8 <__aeabi_dsub>
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007262:	f6bf af11 	bge.w	8007088 <__ieee754_rem_pio2+0x78>
 8007266:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800726a:	6063      	str	r3, [r4, #4]
 800726c:	f8c4 8000 	str.w	r8, [r4]
 8007270:	60a0      	str	r0, [r4, #8]
 8007272:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007276:	60e3      	str	r3, [r4, #12]
 8007278:	426d      	negs	r5, r5
 800727a:	e705      	b.n	8007088 <__ieee754_rem_pio2+0x78>
 800727c:	a326      	add	r3, pc, #152	; (adr r3, 8007318 <__ieee754_rem_pio2+0x308>)
 800727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007286:	f7f9 f9d7 	bl	8000638 <__aeabi_dmul>
 800728a:	4606      	mov	r6, r0
 800728c:	460f      	mov	r7, r1
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4640      	mov	r0, r8
 8007294:	4649      	mov	r1, r9
 8007296:	f7f9 f817 	bl	80002c8 <__aeabi_dsub>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4682      	mov	sl, r0
 80072a0:	468b      	mov	fp, r1
 80072a2:	4640      	mov	r0, r8
 80072a4:	4649      	mov	r1, r9
 80072a6:	f7f9 f80f 	bl	80002c8 <__aeabi_dsub>
 80072aa:	4632      	mov	r2, r6
 80072ac:	463b      	mov	r3, r7
 80072ae:	f7f9 f80b 	bl	80002c8 <__aeabi_dsub>
 80072b2:	a31b      	add	r3, pc, #108	; (adr r3, 8007320 <__ieee754_rem_pio2+0x310>)
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	4606      	mov	r6, r0
 80072ba:	460f      	mov	r7, r1
 80072bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072c0:	f7f9 f9ba 	bl	8000638 <__aeabi_dmul>
 80072c4:	4632      	mov	r2, r6
 80072c6:	463b      	mov	r3, r7
 80072c8:	f7f8 fffe 	bl	80002c8 <__aeabi_dsub>
 80072cc:	4606      	mov	r6, r0
 80072ce:	460f      	mov	r7, r1
 80072d0:	e764      	b.n	800719c <__ieee754_rem_pio2+0x18c>
 80072d2:	4b1b      	ldr	r3, [pc, #108]	; (8007340 <__ieee754_rem_pio2+0x330>)
 80072d4:	4598      	cmp	r8, r3
 80072d6:	dd35      	ble.n	8007344 <__ieee754_rem_pio2+0x334>
 80072d8:	ee10 2a10 	vmov	r2, s0
 80072dc:	463b      	mov	r3, r7
 80072de:	4630      	mov	r0, r6
 80072e0:	4639      	mov	r1, r7
 80072e2:	f7f8 fff1 	bl	80002c8 <__aeabi_dsub>
 80072e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80072ea:	e9c4 0100 	strd	r0, r1, [r4]
 80072ee:	e6a1      	b.n	8007034 <__ieee754_rem_pio2+0x24>
 80072f0:	54400000 	.word	0x54400000
 80072f4:	3ff921fb 	.word	0x3ff921fb
 80072f8:	1a626331 	.word	0x1a626331
 80072fc:	3dd0b461 	.word	0x3dd0b461
 8007300:	1a600000 	.word	0x1a600000
 8007304:	3dd0b461 	.word	0x3dd0b461
 8007308:	2e037073 	.word	0x2e037073
 800730c:	3ba3198a 	.word	0x3ba3198a
 8007310:	6dc9c883 	.word	0x6dc9c883
 8007314:	3fe45f30 	.word	0x3fe45f30
 8007318:	2e000000 	.word	0x2e000000
 800731c:	3ba3198a 	.word	0x3ba3198a
 8007320:	252049c1 	.word	0x252049c1
 8007324:	397b839a 	.word	0x397b839a
 8007328:	3fe921fb 	.word	0x3fe921fb
 800732c:	4002d97b 	.word	0x4002d97b
 8007330:	3ff921fb 	.word	0x3ff921fb
 8007334:	413921fb 	.word	0x413921fb
 8007338:	3fe00000 	.word	0x3fe00000
 800733c:	08008548 	.word	0x08008548
 8007340:	7fefffff 	.word	0x7fefffff
 8007344:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007348:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800734c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007350:	4630      	mov	r0, r6
 8007352:	460f      	mov	r7, r1
 8007354:	f7f9 fc0a 	bl	8000b6c <__aeabi_d2iz>
 8007358:	f7f9 f904 	bl	8000564 <__aeabi_i2d>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4630      	mov	r0, r6
 8007362:	4639      	mov	r1, r7
 8007364:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007368:	f7f8 ffae 	bl	80002c8 <__aeabi_dsub>
 800736c:	2200      	movs	r2, #0
 800736e:	4b1f      	ldr	r3, [pc, #124]	; (80073ec <__ieee754_rem_pio2+0x3dc>)
 8007370:	f7f9 f962 	bl	8000638 <__aeabi_dmul>
 8007374:	460f      	mov	r7, r1
 8007376:	4606      	mov	r6, r0
 8007378:	f7f9 fbf8 	bl	8000b6c <__aeabi_d2iz>
 800737c:	f7f9 f8f2 	bl	8000564 <__aeabi_i2d>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4630      	mov	r0, r6
 8007386:	4639      	mov	r1, r7
 8007388:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800738c:	f7f8 ff9c 	bl	80002c8 <__aeabi_dsub>
 8007390:	2200      	movs	r2, #0
 8007392:	4b16      	ldr	r3, [pc, #88]	; (80073ec <__ieee754_rem_pio2+0x3dc>)
 8007394:	f7f9 f950 	bl	8000638 <__aeabi_dmul>
 8007398:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800739c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80073a0:	f04f 0803 	mov.w	r8, #3
 80073a4:	2600      	movs	r6, #0
 80073a6:	2700      	movs	r7, #0
 80073a8:	4632      	mov	r2, r6
 80073aa:	463b      	mov	r3, r7
 80073ac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80073b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80073b4:	f7f9 fba8 	bl	8000b08 <__aeabi_dcmpeq>
 80073b8:	b9b0      	cbnz	r0, 80073e8 <__ieee754_rem_pio2+0x3d8>
 80073ba:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <__ieee754_rem_pio2+0x3e0>)
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	2302      	movs	r3, #2
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	462a      	mov	r2, r5
 80073c4:	4643      	mov	r3, r8
 80073c6:	4621      	mov	r1, r4
 80073c8:	a806      	add	r0, sp, #24
 80073ca:	f000 f8dd 	bl	8007588 <__kernel_rem_pio2>
 80073ce:	9b04      	ldr	r3, [sp, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	4605      	mov	r5, r0
 80073d4:	f6bf ae58 	bge.w	8007088 <__ieee754_rem_pio2+0x78>
 80073d8:	6863      	ldr	r3, [r4, #4]
 80073da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80073de:	6063      	str	r3, [r4, #4]
 80073e0:	68e3      	ldr	r3, [r4, #12]
 80073e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80073e6:	e746      	b.n	8007276 <__ieee754_rem_pio2+0x266>
 80073e8:	46d0      	mov	r8, sl
 80073ea:	e7dd      	b.n	80073a8 <__ieee754_rem_pio2+0x398>
 80073ec:	41700000 	.word	0x41700000
 80073f0:	080085c8 	.word	0x080085c8
 80073f4:	00000000 	.word	0x00000000

080073f8 <__kernel_cos>:
 80073f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	ec59 8b10 	vmov	r8, r9, d0
 8007400:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8007404:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007408:	ed2d 8b02 	vpush	{d8}
 800740c:	eeb0 8a41 	vmov.f32	s16, s2
 8007410:	eef0 8a61 	vmov.f32	s17, s3
 8007414:	da07      	bge.n	8007426 <__kernel_cos+0x2e>
 8007416:	ee10 0a10 	vmov	r0, s0
 800741a:	4649      	mov	r1, r9
 800741c:	f7f9 fba6 	bl	8000b6c <__aeabi_d2iz>
 8007420:	2800      	cmp	r0, #0
 8007422:	f000 8089 	beq.w	8007538 <__kernel_cos+0x140>
 8007426:	4642      	mov	r2, r8
 8007428:	464b      	mov	r3, r9
 800742a:	4640      	mov	r0, r8
 800742c:	4649      	mov	r1, r9
 800742e:	f7f9 f903 	bl	8000638 <__aeabi_dmul>
 8007432:	2200      	movs	r2, #0
 8007434:	4b4e      	ldr	r3, [pc, #312]	; (8007570 <__kernel_cos+0x178>)
 8007436:	4604      	mov	r4, r0
 8007438:	460d      	mov	r5, r1
 800743a:	f7f9 f8fd 	bl	8000638 <__aeabi_dmul>
 800743e:	a340      	add	r3, pc, #256	; (adr r3, 8007540 <__kernel_cos+0x148>)
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	4682      	mov	sl, r0
 8007446:	468b      	mov	fp, r1
 8007448:	4620      	mov	r0, r4
 800744a:	4629      	mov	r1, r5
 800744c:	f7f9 f8f4 	bl	8000638 <__aeabi_dmul>
 8007450:	a33d      	add	r3, pc, #244	; (adr r3, 8007548 <__kernel_cos+0x150>)
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	f7f8 ff39 	bl	80002cc <__adddf3>
 800745a:	4622      	mov	r2, r4
 800745c:	462b      	mov	r3, r5
 800745e:	f7f9 f8eb 	bl	8000638 <__aeabi_dmul>
 8007462:	a33b      	add	r3, pc, #236	; (adr r3, 8007550 <__kernel_cos+0x158>)
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f7f8 ff2e 	bl	80002c8 <__aeabi_dsub>
 800746c:	4622      	mov	r2, r4
 800746e:	462b      	mov	r3, r5
 8007470:	f7f9 f8e2 	bl	8000638 <__aeabi_dmul>
 8007474:	a338      	add	r3, pc, #224	; (adr r3, 8007558 <__kernel_cos+0x160>)
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	f7f8 ff27 	bl	80002cc <__adddf3>
 800747e:	4622      	mov	r2, r4
 8007480:	462b      	mov	r3, r5
 8007482:	f7f9 f8d9 	bl	8000638 <__aeabi_dmul>
 8007486:	a336      	add	r3, pc, #216	; (adr r3, 8007560 <__kernel_cos+0x168>)
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	f7f8 ff1c 	bl	80002c8 <__aeabi_dsub>
 8007490:	4622      	mov	r2, r4
 8007492:	462b      	mov	r3, r5
 8007494:	f7f9 f8d0 	bl	8000638 <__aeabi_dmul>
 8007498:	a333      	add	r3, pc, #204	; (adr r3, 8007568 <__kernel_cos+0x170>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f8 ff15 	bl	80002cc <__adddf3>
 80074a2:	4622      	mov	r2, r4
 80074a4:	462b      	mov	r3, r5
 80074a6:	f7f9 f8c7 	bl	8000638 <__aeabi_dmul>
 80074aa:	4622      	mov	r2, r4
 80074ac:	462b      	mov	r3, r5
 80074ae:	f7f9 f8c3 	bl	8000638 <__aeabi_dmul>
 80074b2:	ec53 2b18 	vmov	r2, r3, d8
 80074b6:	4604      	mov	r4, r0
 80074b8:	460d      	mov	r5, r1
 80074ba:	4640      	mov	r0, r8
 80074bc:	4649      	mov	r1, r9
 80074be:	f7f9 f8bb 	bl	8000638 <__aeabi_dmul>
 80074c2:	460b      	mov	r3, r1
 80074c4:	4602      	mov	r2, r0
 80074c6:	4629      	mov	r1, r5
 80074c8:	4620      	mov	r0, r4
 80074ca:	f7f8 fefd 	bl	80002c8 <__aeabi_dsub>
 80074ce:	4b29      	ldr	r3, [pc, #164]	; (8007574 <__kernel_cos+0x17c>)
 80074d0:	429e      	cmp	r6, r3
 80074d2:	4680      	mov	r8, r0
 80074d4:	4689      	mov	r9, r1
 80074d6:	dc11      	bgt.n	80074fc <__kernel_cos+0x104>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4650      	mov	r0, sl
 80074de:	4659      	mov	r1, fp
 80074e0:	f7f8 fef2 	bl	80002c8 <__aeabi_dsub>
 80074e4:	460b      	mov	r3, r1
 80074e6:	4924      	ldr	r1, [pc, #144]	; (8007578 <__kernel_cos+0x180>)
 80074e8:	4602      	mov	r2, r0
 80074ea:	2000      	movs	r0, #0
 80074ec:	f7f8 feec 	bl	80002c8 <__aeabi_dsub>
 80074f0:	ecbd 8b02 	vpop	{d8}
 80074f4:	ec41 0b10 	vmov	d0, r0, r1
 80074f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fc:	4b1f      	ldr	r3, [pc, #124]	; (800757c <__kernel_cos+0x184>)
 80074fe:	491e      	ldr	r1, [pc, #120]	; (8007578 <__kernel_cos+0x180>)
 8007500:	429e      	cmp	r6, r3
 8007502:	bfcc      	ite	gt
 8007504:	4d1e      	ldrgt	r5, [pc, #120]	; (8007580 <__kernel_cos+0x188>)
 8007506:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800750a:	2400      	movs	r4, #0
 800750c:	4622      	mov	r2, r4
 800750e:	462b      	mov	r3, r5
 8007510:	2000      	movs	r0, #0
 8007512:	f7f8 fed9 	bl	80002c8 <__aeabi_dsub>
 8007516:	4622      	mov	r2, r4
 8007518:	4606      	mov	r6, r0
 800751a:	460f      	mov	r7, r1
 800751c:	462b      	mov	r3, r5
 800751e:	4650      	mov	r0, sl
 8007520:	4659      	mov	r1, fp
 8007522:	f7f8 fed1 	bl	80002c8 <__aeabi_dsub>
 8007526:	4642      	mov	r2, r8
 8007528:	464b      	mov	r3, r9
 800752a:	f7f8 fecd 	bl	80002c8 <__aeabi_dsub>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4630      	mov	r0, r6
 8007534:	4639      	mov	r1, r7
 8007536:	e7d9      	b.n	80074ec <__kernel_cos+0xf4>
 8007538:	2000      	movs	r0, #0
 800753a:	490f      	ldr	r1, [pc, #60]	; (8007578 <__kernel_cos+0x180>)
 800753c:	e7d8      	b.n	80074f0 <__kernel_cos+0xf8>
 800753e:	bf00      	nop
 8007540:	be8838d4 	.word	0xbe8838d4
 8007544:	bda8fae9 	.word	0xbda8fae9
 8007548:	bdb4b1c4 	.word	0xbdb4b1c4
 800754c:	3e21ee9e 	.word	0x3e21ee9e
 8007550:	809c52ad 	.word	0x809c52ad
 8007554:	3e927e4f 	.word	0x3e927e4f
 8007558:	19cb1590 	.word	0x19cb1590
 800755c:	3efa01a0 	.word	0x3efa01a0
 8007560:	16c15177 	.word	0x16c15177
 8007564:	3f56c16c 	.word	0x3f56c16c
 8007568:	5555554c 	.word	0x5555554c
 800756c:	3fa55555 	.word	0x3fa55555
 8007570:	3fe00000 	.word	0x3fe00000
 8007574:	3fd33332 	.word	0x3fd33332
 8007578:	3ff00000 	.word	0x3ff00000
 800757c:	3fe90000 	.word	0x3fe90000
 8007580:	3fd20000 	.word	0x3fd20000
 8007584:	00000000 	.word	0x00000000

08007588 <__kernel_rem_pio2>:
 8007588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758c:	ed2d 8b02 	vpush	{d8}
 8007590:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007594:	1ed4      	subs	r4, r2, #3
 8007596:	9308      	str	r3, [sp, #32]
 8007598:	9101      	str	r1, [sp, #4]
 800759a:	4bc5      	ldr	r3, [pc, #788]	; (80078b0 <__kernel_rem_pio2+0x328>)
 800759c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800759e:	9009      	str	r0, [sp, #36]	; 0x24
 80075a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075a4:	9304      	str	r3, [sp, #16]
 80075a6:	9b08      	ldr	r3, [sp, #32]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	9307      	str	r3, [sp, #28]
 80075ac:	2318      	movs	r3, #24
 80075ae:	fb94 f4f3 	sdiv	r4, r4, r3
 80075b2:	f06f 0317 	mvn.w	r3, #23
 80075b6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80075ba:	fb04 3303 	mla	r3, r4, r3, r3
 80075be:	eb03 0a02 	add.w	sl, r3, r2
 80075c2:	9b04      	ldr	r3, [sp, #16]
 80075c4:	9a07      	ldr	r2, [sp, #28]
 80075c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80078a0 <__kernel_rem_pio2+0x318>
 80075ca:	eb03 0802 	add.w	r8, r3, r2
 80075ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80075d0:	1aa7      	subs	r7, r4, r2
 80075d2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80075d6:	ae22      	add	r6, sp, #136	; 0x88
 80075d8:	2500      	movs	r5, #0
 80075da:	4545      	cmp	r5, r8
 80075dc:	dd13      	ble.n	8007606 <__kernel_rem_pio2+0x7e>
 80075de:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80078a0 <__kernel_rem_pio2+0x318>
 80075e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80075e6:	2600      	movs	r6, #0
 80075e8:	9b04      	ldr	r3, [sp, #16]
 80075ea:	429e      	cmp	r6, r3
 80075ec:	dc32      	bgt.n	8007654 <__kernel_rem_pio2+0xcc>
 80075ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f0:	9302      	str	r3, [sp, #8]
 80075f2:	9b08      	ldr	r3, [sp, #32]
 80075f4:	199d      	adds	r5, r3, r6
 80075f6:	ab22      	add	r3, sp, #136	; 0x88
 80075f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80075fc:	9306      	str	r3, [sp, #24]
 80075fe:	ec59 8b18 	vmov	r8, r9, d8
 8007602:	2700      	movs	r7, #0
 8007604:	e01f      	b.n	8007646 <__kernel_rem_pio2+0xbe>
 8007606:	42ef      	cmn	r7, r5
 8007608:	d407      	bmi.n	800761a <__kernel_rem_pio2+0x92>
 800760a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800760e:	f7f8 ffa9 	bl	8000564 <__aeabi_i2d>
 8007612:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007616:	3501      	adds	r5, #1
 8007618:	e7df      	b.n	80075da <__kernel_rem_pio2+0x52>
 800761a:	ec51 0b18 	vmov	r0, r1, d8
 800761e:	e7f8      	b.n	8007612 <__kernel_rem_pio2+0x8a>
 8007620:	9906      	ldr	r1, [sp, #24]
 8007622:	9d02      	ldr	r5, [sp, #8]
 8007624:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007628:	9106      	str	r1, [sp, #24]
 800762a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800762e:	9502      	str	r5, [sp, #8]
 8007630:	f7f9 f802 	bl	8000638 <__aeabi_dmul>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4640      	mov	r0, r8
 800763a:	4649      	mov	r1, r9
 800763c:	f7f8 fe46 	bl	80002cc <__adddf3>
 8007640:	3701      	adds	r7, #1
 8007642:	4680      	mov	r8, r0
 8007644:	4689      	mov	r9, r1
 8007646:	9b07      	ldr	r3, [sp, #28]
 8007648:	429f      	cmp	r7, r3
 800764a:	dde9      	ble.n	8007620 <__kernel_rem_pio2+0x98>
 800764c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007650:	3601      	adds	r6, #1
 8007652:	e7c9      	b.n	80075e8 <__kernel_rem_pio2+0x60>
 8007654:	9b04      	ldr	r3, [sp, #16]
 8007656:	aa0e      	add	r2, sp, #56	; 0x38
 8007658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800765c:	930c      	str	r3, [sp, #48]	; 0x30
 800765e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007660:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007664:	9c04      	ldr	r4, [sp, #16]
 8007666:	930b      	str	r3, [sp, #44]	; 0x2c
 8007668:	ab9a      	add	r3, sp, #616	; 0x268
 800766a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800766e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007672:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007676:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800767a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800767e:	ab9a      	add	r3, sp, #616	; 0x268
 8007680:	445b      	add	r3, fp
 8007682:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007686:	2500      	movs	r5, #0
 8007688:	1b63      	subs	r3, r4, r5
 800768a:	2b00      	cmp	r3, #0
 800768c:	dc78      	bgt.n	8007780 <__kernel_rem_pio2+0x1f8>
 800768e:	4650      	mov	r0, sl
 8007690:	ec49 8b10 	vmov	d0, r8, r9
 8007694:	f000 fc00 	bl	8007e98 <scalbn>
 8007698:	ec57 6b10 	vmov	r6, r7, d0
 800769c:	2200      	movs	r2, #0
 800769e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80076a2:	ee10 0a10 	vmov	r0, s0
 80076a6:	4639      	mov	r1, r7
 80076a8:	f7f8 ffc6 	bl	8000638 <__aeabi_dmul>
 80076ac:	ec41 0b10 	vmov	d0, r0, r1
 80076b0:	f000 fb6e 	bl	8007d90 <floor>
 80076b4:	2200      	movs	r2, #0
 80076b6:	ec51 0b10 	vmov	r0, r1, d0
 80076ba:	4b7e      	ldr	r3, [pc, #504]	; (80078b4 <__kernel_rem_pio2+0x32c>)
 80076bc:	f7f8 ffbc 	bl	8000638 <__aeabi_dmul>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4630      	mov	r0, r6
 80076c6:	4639      	mov	r1, r7
 80076c8:	f7f8 fdfe 	bl	80002c8 <__aeabi_dsub>
 80076cc:	460f      	mov	r7, r1
 80076ce:	4606      	mov	r6, r0
 80076d0:	f7f9 fa4c 	bl	8000b6c <__aeabi_d2iz>
 80076d4:	9006      	str	r0, [sp, #24]
 80076d6:	f7f8 ff45 	bl	8000564 <__aeabi_i2d>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4630      	mov	r0, r6
 80076e0:	4639      	mov	r1, r7
 80076e2:	f7f8 fdf1 	bl	80002c8 <__aeabi_dsub>
 80076e6:	f1ba 0f00 	cmp.w	sl, #0
 80076ea:	4606      	mov	r6, r0
 80076ec:	460f      	mov	r7, r1
 80076ee:	dd6c      	ble.n	80077ca <__kernel_rem_pio2+0x242>
 80076f0:	1e62      	subs	r2, r4, #1
 80076f2:	ab0e      	add	r3, sp, #56	; 0x38
 80076f4:	f1ca 0118 	rsb	r1, sl, #24
 80076f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80076fc:	9d06      	ldr	r5, [sp, #24]
 80076fe:	fa40 f301 	asr.w	r3, r0, r1
 8007702:	441d      	add	r5, r3
 8007704:	408b      	lsls	r3, r1
 8007706:	1ac0      	subs	r0, r0, r3
 8007708:	ab0e      	add	r3, sp, #56	; 0x38
 800770a:	9506      	str	r5, [sp, #24]
 800770c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007710:	f1ca 0317 	rsb	r3, sl, #23
 8007714:	fa40 f303 	asr.w	r3, r0, r3
 8007718:	9302      	str	r3, [sp, #8]
 800771a:	9b02      	ldr	r3, [sp, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	dd62      	ble.n	80077e6 <__kernel_rem_pio2+0x25e>
 8007720:	9b06      	ldr	r3, [sp, #24]
 8007722:	2200      	movs	r2, #0
 8007724:	3301      	adds	r3, #1
 8007726:	9306      	str	r3, [sp, #24]
 8007728:	4615      	mov	r5, r2
 800772a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800772e:	4294      	cmp	r4, r2
 8007730:	f300 8095 	bgt.w	800785e <__kernel_rem_pio2+0x2d6>
 8007734:	f1ba 0f00 	cmp.w	sl, #0
 8007738:	dd07      	ble.n	800774a <__kernel_rem_pio2+0x1c2>
 800773a:	f1ba 0f01 	cmp.w	sl, #1
 800773e:	f000 80a2 	beq.w	8007886 <__kernel_rem_pio2+0x2fe>
 8007742:	f1ba 0f02 	cmp.w	sl, #2
 8007746:	f000 80c1 	beq.w	80078cc <__kernel_rem_pio2+0x344>
 800774a:	9b02      	ldr	r3, [sp, #8]
 800774c:	2b02      	cmp	r3, #2
 800774e:	d14a      	bne.n	80077e6 <__kernel_rem_pio2+0x25e>
 8007750:	4632      	mov	r2, r6
 8007752:	463b      	mov	r3, r7
 8007754:	2000      	movs	r0, #0
 8007756:	4958      	ldr	r1, [pc, #352]	; (80078b8 <__kernel_rem_pio2+0x330>)
 8007758:	f7f8 fdb6 	bl	80002c8 <__aeabi_dsub>
 800775c:	4606      	mov	r6, r0
 800775e:	460f      	mov	r7, r1
 8007760:	2d00      	cmp	r5, #0
 8007762:	d040      	beq.n	80077e6 <__kernel_rem_pio2+0x25e>
 8007764:	4650      	mov	r0, sl
 8007766:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80078a8 <__kernel_rem_pio2+0x320>
 800776a:	f000 fb95 	bl	8007e98 <scalbn>
 800776e:	4630      	mov	r0, r6
 8007770:	4639      	mov	r1, r7
 8007772:	ec53 2b10 	vmov	r2, r3, d0
 8007776:	f7f8 fda7 	bl	80002c8 <__aeabi_dsub>
 800777a:	4606      	mov	r6, r0
 800777c:	460f      	mov	r7, r1
 800777e:	e032      	b.n	80077e6 <__kernel_rem_pio2+0x25e>
 8007780:	2200      	movs	r2, #0
 8007782:	4b4e      	ldr	r3, [pc, #312]	; (80078bc <__kernel_rem_pio2+0x334>)
 8007784:	4640      	mov	r0, r8
 8007786:	4649      	mov	r1, r9
 8007788:	f7f8 ff56 	bl	8000638 <__aeabi_dmul>
 800778c:	f7f9 f9ee 	bl	8000b6c <__aeabi_d2iz>
 8007790:	f7f8 fee8 	bl	8000564 <__aeabi_i2d>
 8007794:	2200      	movs	r2, #0
 8007796:	4b4a      	ldr	r3, [pc, #296]	; (80078c0 <__kernel_rem_pio2+0x338>)
 8007798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800779c:	f7f8 ff4c 	bl	8000638 <__aeabi_dmul>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4640      	mov	r0, r8
 80077a6:	4649      	mov	r1, r9
 80077a8:	f7f8 fd8e 	bl	80002c8 <__aeabi_dsub>
 80077ac:	f7f9 f9de 	bl	8000b6c <__aeabi_d2iz>
 80077b0:	ab0e      	add	r3, sp, #56	; 0x38
 80077b2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80077b6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80077ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077be:	f7f8 fd85 	bl	80002cc <__adddf3>
 80077c2:	3501      	adds	r5, #1
 80077c4:	4680      	mov	r8, r0
 80077c6:	4689      	mov	r9, r1
 80077c8:	e75e      	b.n	8007688 <__kernel_rem_pio2+0x100>
 80077ca:	d105      	bne.n	80077d8 <__kernel_rem_pio2+0x250>
 80077cc:	1e63      	subs	r3, r4, #1
 80077ce:	aa0e      	add	r2, sp, #56	; 0x38
 80077d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80077d4:	15c3      	asrs	r3, r0, #23
 80077d6:	e79f      	b.n	8007718 <__kernel_rem_pio2+0x190>
 80077d8:	2200      	movs	r2, #0
 80077da:	4b3a      	ldr	r3, [pc, #232]	; (80078c4 <__kernel_rem_pio2+0x33c>)
 80077dc:	f7f9 f9b2 	bl	8000b44 <__aeabi_dcmpge>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d139      	bne.n	8007858 <__kernel_rem_pio2+0x2d0>
 80077e4:	9002      	str	r0, [sp, #8]
 80077e6:	2200      	movs	r2, #0
 80077e8:	2300      	movs	r3, #0
 80077ea:	4630      	mov	r0, r6
 80077ec:	4639      	mov	r1, r7
 80077ee:	f7f9 f98b 	bl	8000b08 <__aeabi_dcmpeq>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f000 80c7 	beq.w	8007986 <__kernel_rem_pio2+0x3fe>
 80077f8:	1e65      	subs	r5, r4, #1
 80077fa:	462b      	mov	r3, r5
 80077fc:	2200      	movs	r2, #0
 80077fe:	9904      	ldr	r1, [sp, #16]
 8007800:	428b      	cmp	r3, r1
 8007802:	da6a      	bge.n	80078da <__kernel_rem_pio2+0x352>
 8007804:	2a00      	cmp	r2, #0
 8007806:	f000 8088 	beq.w	800791a <__kernel_rem_pio2+0x392>
 800780a:	ab0e      	add	r3, sp, #56	; 0x38
 800780c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007810:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80b4 	beq.w	8007982 <__kernel_rem_pio2+0x3fa>
 800781a:	4650      	mov	r0, sl
 800781c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80078a8 <__kernel_rem_pio2+0x320>
 8007820:	f000 fb3a 	bl	8007e98 <scalbn>
 8007824:	00ec      	lsls	r4, r5, #3
 8007826:	ab72      	add	r3, sp, #456	; 0x1c8
 8007828:	191e      	adds	r6, r3, r4
 800782a:	ec59 8b10 	vmov	r8, r9, d0
 800782e:	f106 0a08 	add.w	sl, r6, #8
 8007832:	462f      	mov	r7, r5
 8007834:	2f00      	cmp	r7, #0
 8007836:	f280 80df 	bge.w	80079f8 <__kernel_rem_pio2+0x470>
 800783a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80078a0 <__kernel_rem_pio2+0x318>
 800783e:	f04f 0a00 	mov.w	sl, #0
 8007842:	eba5 030a 	sub.w	r3, r5, sl
 8007846:	2b00      	cmp	r3, #0
 8007848:	f2c0 810a 	blt.w	8007a60 <__kernel_rem_pio2+0x4d8>
 800784c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80078c8 <__kernel_rem_pio2+0x340>
 8007850:	ec59 8b18 	vmov	r8, r9, d8
 8007854:	2700      	movs	r7, #0
 8007856:	e0f5      	b.n	8007a44 <__kernel_rem_pio2+0x4bc>
 8007858:	2302      	movs	r3, #2
 800785a:	9302      	str	r3, [sp, #8]
 800785c:	e760      	b.n	8007720 <__kernel_rem_pio2+0x198>
 800785e:	ab0e      	add	r3, sp, #56	; 0x38
 8007860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007864:	b94d      	cbnz	r5, 800787a <__kernel_rem_pio2+0x2f2>
 8007866:	b12b      	cbz	r3, 8007874 <__kernel_rem_pio2+0x2ec>
 8007868:	a80e      	add	r0, sp, #56	; 0x38
 800786a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800786e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007872:	2301      	movs	r3, #1
 8007874:	3201      	adds	r2, #1
 8007876:	461d      	mov	r5, r3
 8007878:	e759      	b.n	800772e <__kernel_rem_pio2+0x1a6>
 800787a:	a80e      	add	r0, sp, #56	; 0x38
 800787c:	1acb      	subs	r3, r1, r3
 800787e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007882:	462b      	mov	r3, r5
 8007884:	e7f6      	b.n	8007874 <__kernel_rem_pio2+0x2ec>
 8007886:	1e62      	subs	r2, r4, #1
 8007888:	ab0e      	add	r3, sp, #56	; 0x38
 800788a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007892:	a90e      	add	r1, sp, #56	; 0x38
 8007894:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007898:	e757      	b.n	800774a <__kernel_rem_pio2+0x1c2>
 800789a:	bf00      	nop
 800789c:	f3af 8000 	nop.w
	...
 80078ac:	3ff00000 	.word	0x3ff00000
 80078b0:	08008710 	.word	0x08008710
 80078b4:	40200000 	.word	0x40200000
 80078b8:	3ff00000 	.word	0x3ff00000
 80078bc:	3e700000 	.word	0x3e700000
 80078c0:	41700000 	.word	0x41700000
 80078c4:	3fe00000 	.word	0x3fe00000
 80078c8:	080086d0 	.word	0x080086d0
 80078cc:	1e62      	subs	r2, r4, #1
 80078ce:	ab0e      	add	r3, sp, #56	; 0x38
 80078d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80078d8:	e7db      	b.n	8007892 <__kernel_rem_pio2+0x30a>
 80078da:	a90e      	add	r1, sp, #56	; 0x38
 80078dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	430a      	orrs	r2, r1
 80078e4:	e78b      	b.n	80077fe <__kernel_rem_pio2+0x276>
 80078e6:	3301      	adds	r3, #1
 80078e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80078ec:	2900      	cmp	r1, #0
 80078ee:	d0fa      	beq.n	80078e6 <__kernel_rem_pio2+0x35e>
 80078f0:	9a08      	ldr	r2, [sp, #32]
 80078f2:	4422      	add	r2, r4
 80078f4:	00d2      	lsls	r2, r2, #3
 80078f6:	a922      	add	r1, sp, #136	; 0x88
 80078f8:	18e3      	adds	r3, r4, r3
 80078fa:	9206      	str	r2, [sp, #24]
 80078fc:	440a      	add	r2, r1
 80078fe:	9302      	str	r3, [sp, #8]
 8007900:	f10b 0108 	add.w	r1, fp, #8
 8007904:	f102 0308 	add.w	r3, r2, #8
 8007908:	1c66      	adds	r6, r4, #1
 800790a:	910a      	str	r1, [sp, #40]	; 0x28
 800790c:	2500      	movs	r5, #0
 800790e:	930d      	str	r3, [sp, #52]	; 0x34
 8007910:	9b02      	ldr	r3, [sp, #8]
 8007912:	42b3      	cmp	r3, r6
 8007914:	da04      	bge.n	8007920 <__kernel_rem_pio2+0x398>
 8007916:	461c      	mov	r4, r3
 8007918:	e6a6      	b.n	8007668 <__kernel_rem_pio2+0xe0>
 800791a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800791c:	2301      	movs	r3, #1
 800791e:	e7e3      	b.n	80078e8 <__kernel_rem_pio2+0x360>
 8007920:	9b06      	ldr	r3, [sp, #24]
 8007922:	18ef      	adds	r7, r5, r3
 8007924:	ab22      	add	r3, sp, #136	; 0x88
 8007926:	441f      	add	r7, r3
 8007928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800792a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800792e:	f7f8 fe19 	bl	8000564 <__aeabi_i2d>
 8007932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007934:	461c      	mov	r4, r3
 8007936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007938:	e9c7 0100 	strd	r0, r1, [r7]
 800793c:	eb03 0b05 	add.w	fp, r3, r5
 8007940:	2700      	movs	r7, #0
 8007942:	f04f 0800 	mov.w	r8, #0
 8007946:	f04f 0900 	mov.w	r9, #0
 800794a:	9b07      	ldr	r3, [sp, #28]
 800794c:	429f      	cmp	r7, r3
 800794e:	dd08      	ble.n	8007962 <__kernel_rem_pio2+0x3da>
 8007950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007952:	aa72      	add	r2, sp, #456	; 0x1c8
 8007954:	18eb      	adds	r3, r5, r3
 8007956:	4413      	add	r3, r2
 8007958:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800795c:	3601      	adds	r6, #1
 800795e:	3508      	adds	r5, #8
 8007960:	e7d6      	b.n	8007910 <__kernel_rem_pio2+0x388>
 8007962:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007966:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800796a:	f7f8 fe65 	bl	8000638 <__aeabi_dmul>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4640      	mov	r0, r8
 8007974:	4649      	mov	r1, r9
 8007976:	f7f8 fca9 	bl	80002cc <__adddf3>
 800797a:	3701      	adds	r7, #1
 800797c:	4680      	mov	r8, r0
 800797e:	4689      	mov	r9, r1
 8007980:	e7e3      	b.n	800794a <__kernel_rem_pio2+0x3c2>
 8007982:	3d01      	subs	r5, #1
 8007984:	e741      	b.n	800780a <__kernel_rem_pio2+0x282>
 8007986:	f1ca 0000 	rsb	r0, sl, #0
 800798a:	ec47 6b10 	vmov	d0, r6, r7
 800798e:	f000 fa83 	bl	8007e98 <scalbn>
 8007992:	ec57 6b10 	vmov	r6, r7, d0
 8007996:	2200      	movs	r2, #0
 8007998:	4b99      	ldr	r3, [pc, #612]	; (8007c00 <__kernel_rem_pio2+0x678>)
 800799a:	ee10 0a10 	vmov	r0, s0
 800799e:	4639      	mov	r1, r7
 80079a0:	f7f9 f8d0 	bl	8000b44 <__aeabi_dcmpge>
 80079a4:	b1f8      	cbz	r0, 80079e6 <__kernel_rem_pio2+0x45e>
 80079a6:	2200      	movs	r2, #0
 80079a8:	4b96      	ldr	r3, [pc, #600]	; (8007c04 <__kernel_rem_pio2+0x67c>)
 80079aa:	4630      	mov	r0, r6
 80079ac:	4639      	mov	r1, r7
 80079ae:	f7f8 fe43 	bl	8000638 <__aeabi_dmul>
 80079b2:	f7f9 f8db 	bl	8000b6c <__aeabi_d2iz>
 80079b6:	4680      	mov	r8, r0
 80079b8:	f7f8 fdd4 	bl	8000564 <__aeabi_i2d>
 80079bc:	2200      	movs	r2, #0
 80079be:	4b90      	ldr	r3, [pc, #576]	; (8007c00 <__kernel_rem_pio2+0x678>)
 80079c0:	f7f8 fe3a 	bl	8000638 <__aeabi_dmul>
 80079c4:	460b      	mov	r3, r1
 80079c6:	4602      	mov	r2, r0
 80079c8:	4639      	mov	r1, r7
 80079ca:	4630      	mov	r0, r6
 80079cc:	f7f8 fc7c 	bl	80002c8 <__aeabi_dsub>
 80079d0:	f7f9 f8cc 	bl	8000b6c <__aeabi_d2iz>
 80079d4:	1c65      	adds	r5, r4, #1
 80079d6:	ab0e      	add	r3, sp, #56	; 0x38
 80079d8:	f10a 0a18 	add.w	sl, sl, #24
 80079dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80079e0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80079e4:	e719      	b.n	800781a <__kernel_rem_pio2+0x292>
 80079e6:	4630      	mov	r0, r6
 80079e8:	4639      	mov	r1, r7
 80079ea:	f7f9 f8bf 	bl	8000b6c <__aeabi_d2iz>
 80079ee:	ab0e      	add	r3, sp, #56	; 0x38
 80079f0:	4625      	mov	r5, r4
 80079f2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80079f6:	e710      	b.n	800781a <__kernel_rem_pio2+0x292>
 80079f8:	ab0e      	add	r3, sp, #56	; 0x38
 80079fa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80079fe:	f7f8 fdb1 	bl	8000564 <__aeabi_i2d>
 8007a02:	4642      	mov	r2, r8
 8007a04:	464b      	mov	r3, r9
 8007a06:	f7f8 fe17 	bl	8000638 <__aeabi_dmul>
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007a10:	4b7c      	ldr	r3, [pc, #496]	; (8007c04 <__kernel_rem_pio2+0x67c>)
 8007a12:	4640      	mov	r0, r8
 8007a14:	4649      	mov	r1, r9
 8007a16:	f7f8 fe0f 	bl	8000638 <__aeabi_dmul>
 8007a1a:	3f01      	subs	r7, #1
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	4689      	mov	r9, r1
 8007a20:	e708      	b.n	8007834 <__kernel_rem_pio2+0x2ac>
 8007a22:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8007a2e:	f7f8 fe03 	bl	8000638 <__aeabi_dmul>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4640      	mov	r0, r8
 8007a38:	4649      	mov	r1, r9
 8007a3a:	f7f8 fc47 	bl	80002cc <__adddf3>
 8007a3e:	3701      	adds	r7, #1
 8007a40:	4680      	mov	r8, r0
 8007a42:	4689      	mov	r9, r1
 8007a44:	9b04      	ldr	r3, [sp, #16]
 8007a46:	429f      	cmp	r7, r3
 8007a48:	dc01      	bgt.n	8007a4e <__kernel_rem_pio2+0x4c6>
 8007a4a:	45ba      	cmp	sl, r7
 8007a4c:	dae9      	bge.n	8007a22 <__kernel_rem_pio2+0x49a>
 8007a4e:	ab4a      	add	r3, sp, #296	; 0x128
 8007a50:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a54:	e9c3 8900 	strd	r8, r9, [r3]
 8007a58:	f10a 0a01 	add.w	sl, sl, #1
 8007a5c:	3e08      	subs	r6, #8
 8007a5e:	e6f0      	b.n	8007842 <__kernel_rem_pio2+0x2ba>
 8007a60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d85b      	bhi.n	8007b1e <__kernel_rem_pio2+0x596>
 8007a66:	e8df f003 	tbb	[pc, r3]
 8007a6a:	264a      	.short	0x264a
 8007a6c:	0226      	.short	0x0226
 8007a6e:	ab9a      	add	r3, sp, #616	; 0x268
 8007a70:	441c      	add	r4, r3
 8007a72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007a76:	46a2      	mov	sl, r4
 8007a78:	46ab      	mov	fp, r5
 8007a7a:	f1bb 0f00 	cmp.w	fp, #0
 8007a7e:	dc6c      	bgt.n	8007b5a <__kernel_rem_pio2+0x5d2>
 8007a80:	46a2      	mov	sl, r4
 8007a82:	46ab      	mov	fp, r5
 8007a84:	f1bb 0f01 	cmp.w	fp, #1
 8007a88:	f300 8086 	bgt.w	8007b98 <__kernel_rem_pio2+0x610>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	2100      	movs	r1, #0
 8007a90:	2d01      	cmp	r5, #1
 8007a92:	f300 80a0 	bgt.w	8007bd6 <__kernel_rem_pio2+0x64e>
 8007a96:	9b02      	ldr	r3, [sp, #8]
 8007a98:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007a9c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f040 809e 	bne.w	8007be2 <__kernel_rem_pio2+0x65a>
 8007aa6:	9b01      	ldr	r3, [sp, #4]
 8007aa8:	e9c3 7800 	strd	r7, r8, [r3]
 8007aac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007ab0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007ab4:	e033      	b.n	8007b1e <__kernel_rem_pio2+0x596>
 8007ab6:	3408      	adds	r4, #8
 8007ab8:	ab4a      	add	r3, sp, #296	; 0x128
 8007aba:	441c      	add	r4, r3
 8007abc:	462e      	mov	r6, r5
 8007abe:	2000      	movs	r0, #0
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	2e00      	cmp	r6, #0
 8007ac4:	da3a      	bge.n	8007b3c <__kernel_rem_pio2+0x5b4>
 8007ac6:	9b02      	ldr	r3, [sp, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d03d      	beq.n	8007b48 <__kernel_rem_pio2+0x5c0>
 8007acc:	4602      	mov	r2, r0
 8007ace:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ad2:	9c01      	ldr	r4, [sp, #4]
 8007ad4:	e9c4 2300 	strd	r2, r3, [r4]
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007ae0:	f7f8 fbf2 	bl	80002c8 <__aeabi_dsub>
 8007ae4:	ae4c      	add	r6, sp, #304	; 0x130
 8007ae6:	2401      	movs	r4, #1
 8007ae8:	42a5      	cmp	r5, r4
 8007aea:	da30      	bge.n	8007b4e <__kernel_rem_pio2+0x5c6>
 8007aec:	9b02      	ldr	r3, [sp, #8]
 8007aee:	b113      	cbz	r3, 8007af6 <__kernel_rem_pio2+0x56e>
 8007af0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007af4:	4619      	mov	r1, r3
 8007af6:	9b01      	ldr	r3, [sp, #4]
 8007af8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007afc:	e00f      	b.n	8007b1e <__kernel_rem_pio2+0x596>
 8007afe:	ab9a      	add	r3, sp, #616	; 0x268
 8007b00:	441c      	add	r4, r3
 8007b02:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007b06:	2000      	movs	r0, #0
 8007b08:	2100      	movs	r1, #0
 8007b0a:	2d00      	cmp	r5, #0
 8007b0c:	da10      	bge.n	8007b30 <__kernel_rem_pio2+0x5a8>
 8007b0e:	9b02      	ldr	r3, [sp, #8]
 8007b10:	b113      	cbz	r3, 8007b18 <__kernel_rem_pio2+0x590>
 8007b12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b16:	4619      	mov	r1, r3
 8007b18:	9b01      	ldr	r3, [sp, #4]
 8007b1a:	e9c3 0100 	strd	r0, r1, [r3]
 8007b1e:	9b06      	ldr	r3, [sp, #24]
 8007b20:	f003 0007 	and.w	r0, r3, #7
 8007b24:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007b28:	ecbd 8b02 	vpop	{d8}
 8007b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b30:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007b34:	f7f8 fbca 	bl	80002cc <__adddf3>
 8007b38:	3d01      	subs	r5, #1
 8007b3a:	e7e6      	b.n	8007b0a <__kernel_rem_pio2+0x582>
 8007b3c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007b40:	f7f8 fbc4 	bl	80002cc <__adddf3>
 8007b44:	3e01      	subs	r6, #1
 8007b46:	e7bc      	b.n	8007ac2 <__kernel_rem_pio2+0x53a>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	e7c1      	b.n	8007ad2 <__kernel_rem_pio2+0x54a>
 8007b4e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007b52:	f7f8 fbbb 	bl	80002cc <__adddf3>
 8007b56:	3401      	adds	r4, #1
 8007b58:	e7c6      	b.n	8007ae8 <__kernel_rem_pio2+0x560>
 8007b5a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8007b5e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007b62:	4640      	mov	r0, r8
 8007b64:	ec53 2b17 	vmov	r2, r3, d7
 8007b68:	4649      	mov	r1, r9
 8007b6a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b6e:	f7f8 fbad 	bl	80002cc <__adddf3>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4606      	mov	r6, r0
 8007b78:	460f      	mov	r7, r1
 8007b7a:	4640      	mov	r0, r8
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	f7f8 fba3 	bl	80002c8 <__aeabi_dsub>
 8007b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b86:	f7f8 fba1 	bl	80002cc <__adddf3>
 8007b8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b8e:	e9ca 0100 	strd	r0, r1, [sl]
 8007b92:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8007b96:	e770      	b.n	8007a7a <__kernel_rem_pio2+0x4f2>
 8007b98:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8007b9c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	ec53 2b17 	vmov	r2, r3, d7
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007bac:	f7f8 fb8e 	bl	80002cc <__adddf3>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	4689      	mov	r9, r1
 8007bb8:	4630      	mov	r0, r6
 8007bba:	4639      	mov	r1, r7
 8007bbc:	f7f8 fb84 	bl	80002c8 <__aeabi_dsub>
 8007bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bc4:	f7f8 fb82 	bl	80002cc <__adddf3>
 8007bc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007bcc:	e9ca 0100 	strd	r0, r1, [sl]
 8007bd0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8007bd4:	e756      	b.n	8007a84 <__kernel_rem_pio2+0x4fc>
 8007bd6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007bda:	f7f8 fb77 	bl	80002cc <__adddf3>
 8007bde:	3d01      	subs	r5, #1
 8007be0:	e756      	b.n	8007a90 <__kernel_rem_pio2+0x508>
 8007be2:	9b01      	ldr	r3, [sp, #4]
 8007be4:	9a01      	ldr	r2, [sp, #4]
 8007be6:	601f      	str	r7, [r3, #0]
 8007be8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007bec:	605c      	str	r4, [r3, #4]
 8007bee:	609d      	str	r5, [r3, #8]
 8007bf0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007bf4:	60d3      	str	r3, [r2, #12]
 8007bf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bfa:	6110      	str	r0, [r2, #16]
 8007bfc:	6153      	str	r3, [r2, #20]
 8007bfe:	e78e      	b.n	8007b1e <__kernel_rem_pio2+0x596>
 8007c00:	41700000 	.word	0x41700000
 8007c04:	3e700000 	.word	0x3e700000

08007c08 <__kernel_sin>:
 8007c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0c:	ec55 4b10 	vmov	r4, r5, d0
 8007c10:	b085      	sub	sp, #20
 8007c12:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007c16:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007c1a:	ed8d 1b00 	vstr	d1, [sp]
 8007c1e:	9002      	str	r0, [sp, #8]
 8007c20:	da06      	bge.n	8007c30 <__kernel_sin+0x28>
 8007c22:	ee10 0a10 	vmov	r0, s0
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 ffa0 	bl	8000b6c <__aeabi_d2iz>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d051      	beq.n	8007cd4 <__kernel_sin+0xcc>
 8007c30:	4622      	mov	r2, r4
 8007c32:	462b      	mov	r3, r5
 8007c34:	4620      	mov	r0, r4
 8007c36:	4629      	mov	r1, r5
 8007c38:	f7f8 fcfe 	bl	8000638 <__aeabi_dmul>
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	468b      	mov	fp, r1
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4620      	mov	r0, r4
 8007c46:	4629      	mov	r1, r5
 8007c48:	f7f8 fcf6 	bl	8000638 <__aeabi_dmul>
 8007c4c:	a341      	add	r3, pc, #260	; (adr r3, 8007d54 <__kernel_sin+0x14c>)
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	4680      	mov	r8, r0
 8007c54:	4689      	mov	r9, r1
 8007c56:	4650      	mov	r0, sl
 8007c58:	4659      	mov	r1, fp
 8007c5a:	f7f8 fced 	bl	8000638 <__aeabi_dmul>
 8007c5e:	a33f      	add	r3, pc, #252	; (adr r3, 8007d5c <__kernel_sin+0x154>)
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	f7f8 fb30 	bl	80002c8 <__aeabi_dsub>
 8007c68:	4652      	mov	r2, sl
 8007c6a:	465b      	mov	r3, fp
 8007c6c:	f7f8 fce4 	bl	8000638 <__aeabi_dmul>
 8007c70:	a33c      	add	r3, pc, #240	; (adr r3, 8007d64 <__kernel_sin+0x15c>)
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	f7f8 fb29 	bl	80002cc <__adddf3>
 8007c7a:	4652      	mov	r2, sl
 8007c7c:	465b      	mov	r3, fp
 8007c7e:	f7f8 fcdb 	bl	8000638 <__aeabi_dmul>
 8007c82:	a33a      	add	r3, pc, #232	; (adr r3, 8007d6c <__kernel_sin+0x164>)
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f7f8 fb1e 	bl	80002c8 <__aeabi_dsub>
 8007c8c:	4652      	mov	r2, sl
 8007c8e:	465b      	mov	r3, fp
 8007c90:	f7f8 fcd2 	bl	8000638 <__aeabi_dmul>
 8007c94:	a337      	add	r3, pc, #220	; (adr r3, 8007d74 <__kernel_sin+0x16c>)
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	f7f8 fb17 	bl	80002cc <__adddf3>
 8007c9e:	9b02      	ldr	r3, [sp, #8]
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	460f      	mov	r7, r1
 8007ca4:	b9db      	cbnz	r3, 8007cde <__kernel_sin+0xd6>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4650      	mov	r0, sl
 8007cac:	4659      	mov	r1, fp
 8007cae:	f7f8 fcc3 	bl	8000638 <__aeabi_dmul>
 8007cb2:	a325      	add	r3, pc, #148	; (adr r3, 8007d48 <__kernel_sin+0x140>)
 8007cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb8:	f7f8 fb06 	bl	80002c8 <__aeabi_dsub>
 8007cbc:	4642      	mov	r2, r8
 8007cbe:	464b      	mov	r3, r9
 8007cc0:	f7f8 fcba 	bl	8000638 <__aeabi_dmul>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4620      	mov	r0, r4
 8007cca:	4629      	mov	r1, r5
 8007ccc:	f7f8 fafe 	bl	80002cc <__adddf3>
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	460d      	mov	r5, r1
 8007cd4:	ec45 4b10 	vmov	d0, r4, r5
 8007cd8:	b005      	add	sp, #20
 8007cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cde:	2200      	movs	r2, #0
 8007ce0:	4b1b      	ldr	r3, [pc, #108]	; (8007d50 <__kernel_sin+0x148>)
 8007ce2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ce6:	f7f8 fca7 	bl	8000638 <__aeabi_dmul>
 8007cea:	4632      	mov	r2, r6
 8007cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f8 fc9f 	bl	8000638 <__aeabi_dmul>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d02:	f7f8 fae1 	bl	80002c8 <__aeabi_dsub>
 8007d06:	4652      	mov	r2, sl
 8007d08:	465b      	mov	r3, fp
 8007d0a:	f7f8 fc95 	bl	8000638 <__aeabi_dmul>
 8007d0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d12:	f7f8 fad9 	bl	80002c8 <__aeabi_dsub>
 8007d16:	a30c      	add	r3, pc, #48	; (adr r3, 8007d48 <__kernel_sin+0x140>)
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	460f      	mov	r7, r1
 8007d20:	4640      	mov	r0, r8
 8007d22:	4649      	mov	r1, r9
 8007d24:	f7f8 fc88 	bl	8000638 <__aeabi_dmul>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	4639      	mov	r1, r7
 8007d30:	f7f8 facc 	bl	80002cc <__adddf3>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4620      	mov	r0, r4
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	f7f8 fac4 	bl	80002c8 <__aeabi_dsub>
 8007d40:	e7c6      	b.n	8007cd0 <__kernel_sin+0xc8>
 8007d42:	bf00      	nop
 8007d44:	f3af 8000 	nop.w
 8007d48:	55555549 	.word	0x55555549
 8007d4c:	3fc55555 	.word	0x3fc55555
 8007d50:	3fe00000 	.word	0x3fe00000
 8007d54:	5acfd57c 	.word	0x5acfd57c
 8007d58:	3de5d93a 	.word	0x3de5d93a
 8007d5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007d60:	3e5ae5e6 	.word	0x3e5ae5e6
 8007d64:	57b1fe7d 	.word	0x57b1fe7d
 8007d68:	3ec71de3 	.word	0x3ec71de3
 8007d6c:	19c161d5 	.word	0x19c161d5
 8007d70:	3f2a01a0 	.word	0x3f2a01a0
 8007d74:	1110f8a6 	.word	0x1110f8a6
 8007d78:	3f811111 	.word	0x3f811111

08007d7c <fabs>:
 8007d7c:	ec51 0b10 	vmov	r0, r1, d0
 8007d80:	ee10 2a10 	vmov	r2, s0
 8007d84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d88:	ec43 2b10 	vmov	d0, r2, r3
 8007d8c:	4770      	bx	lr
	...

08007d90 <floor>:
 8007d90:	ec51 0b10 	vmov	r0, r1, d0
 8007d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007d9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007da0:	2e13      	cmp	r6, #19
 8007da2:	460c      	mov	r4, r1
 8007da4:	ee10 5a10 	vmov	r5, s0
 8007da8:	4680      	mov	r8, r0
 8007daa:	dc34      	bgt.n	8007e16 <floor+0x86>
 8007dac:	2e00      	cmp	r6, #0
 8007dae:	da16      	bge.n	8007dde <floor+0x4e>
 8007db0:	a335      	add	r3, pc, #212	; (adr r3, 8007e88 <floor+0xf8>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 fa89 	bl	80002cc <__adddf3>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f7f8 fecb 	bl	8000b58 <__aeabi_dcmpgt>
 8007dc2:	b148      	cbz	r0, 8007dd8 <floor+0x48>
 8007dc4:	2c00      	cmp	r4, #0
 8007dc6:	da59      	bge.n	8007e7c <floor+0xec>
 8007dc8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007dcc:	4a30      	ldr	r2, [pc, #192]	; (8007e90 <floor+0x100>)
 8007dce:	432b      	orrs	r3, r5
 8007dd0:	2500      	movs	r5, #0
 8007dd2:	42ab      	cmp	r3, r5
 8007dd4:	bf18      	it	ne
 8007dd6:	4614      	movne	r4, r2
 8007dd8:	4621      	mov	r1, r4
 8007dda:	4628      	mov	r0, r5
 8007ddc:	e025      	b.n	8007e2a <floor+0x9a>
 8007dde:	4f2d      	ldr	r7, [pc, #180]	; (8007e94 <floor+0x104>)
 8007de0:	4137      	asrs	r7, r6
 8007de2:	ea01 0307 	and.w	r3, r1, r7
 8007de6:	4303      	orrs	r3, r0
 8007de8:	d01f      	beq.n	8007e2a <floor+0x9a>
 8007dea:	a327      	add	r3, pc, #156	; (adr r3, 8007e88 <floor+0xf8>)
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f7f8 fa6c 	bl	80002cc <__adddf3>
 8007df4:	2200      	movs	r2, #0
 8007df6:	2300      	movs	r3, #0
 8007df8:	f7f8 feae 	bl	8000b58 <__aeabi_dcmpgt>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d0eb      	beq.n	8007dd8 <floor+0x48>
 8007e00:	2c00      	cmp	r4, #0
 8007e02:	bfbe      	ittt	lt
 8007e04:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007e08:	fa43 f606 	asrlt.w	r6, r3, r6
 8007e0c:	19a4      	addlt	r4, r4, r6
 8007e0e:	ea24 0407 	bic.w	r4, r4, r7
 8007e12:	2500      	movs	r5, #0
 8007e14:	e7e0      	b.n	8007dd8 <floor+0x48>
 8007e16:	2e33      	cmp	r6, #51	; 0x33
 8007e18:	dd0b      	ble.n	8007e32 <floor+0xa2>
 8007e1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007e1e:	d104      	bne.n	8007e2a <floor+0x9a>
 8007e20:	ee10 2a10 	vmov	r2, s0
 8007e24:	460b      	mov	r3, r1
 8007e26:	f7f8 fa51 	bl	80002cc <__adddf3>
 8007e2a:	ec41 0b10 	vmov	d0, r0, r1
 8007e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e32:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007e36:	f04f 33ff 	mov.w	r3, #4294967295
 8007e3a:	fa23 f707 	lsr.w	r7, r3, r7
 8007e3e:	4207      	tst	r7, r0
 8007e40:	d0f3      	beq.n	8007e2a <floor+0x9a>
 8007e42:	a311      	add	r3, pc, #68	; (adr r3, 8007e88 <floor+0xf8>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 fa40 	bl	80002cc <__adddf3>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f7f8 fe82 	bl	8000b58 <__aeabi_dcmpgt>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d0bf      	beq.n	8007dd8 <floor+0x48>
 8007e58:	2c00      	cmp	r4, #0
 8007e5a:	da02      	bge.n	8007e62 <floor+0xd2>
 8007e5c:	2e14      	cmp	r6, #20
 8007e5e:	d103      	bne.n	8007e68 <floor+0xd8>
 8007e60:	3401      	adds	r4, #1
 8007e62:	ea25 0507 	bic.w	r5, r5, r7
 8007e66:	e7b7      	b.n	8007dd8 <floor+0x48>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007e6e:	fa03 f606 	lsl.w	r6, r3, r6
 8007e72:	4435      	add	r5, r6
 8007e74:	4545      	cmp	r5, r8
 8007e76:	bf38      	it	cc
 8007e78:	18e4      	addcc	r4, r4, r3
 8007e7a:	e7f2      	b.n	8007e62 <floor+0xd2>
 8007e7c:	2500      	movs	r5, #0
 8007e7e:	462c      	mov	r4, r5
 8007e80:	e7aa      	b.n	8007dd8 <floor+0x48>
 8007e82:	bf00      	nop
 8007e84:	f3af 8000 	nop.w
 8007e88:	8800759c 	.word	0x8800759c
 8007e8c:	7e37e43c 	.word	0x7e37e43c
 8007e90:	bff00000 	.word	0xbff00000
 8007e94:	000fffff 	.word	0x000fffff

08007e98 <scalbn>:
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	ec55 4b10 	vmov	r4, r5, d0
 8007e9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	462b      	mov	r3, r5
 8007ea6:	b9aa      	cbnz	r2, 8007ed4 <scalbn+0x3c>
 8007ea8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007eac:	4323      	orrs	r3, r4
 8007eae:	d03b      	beq.n	8007f28 <scalbn+0x90>
 8007eb0:	4b31      	ldr	r3, [pc, #196]	; (8007f78 <scalbn+0xe0>)
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	ee10 0a10 	vmov	r0, s0
 8007eba:	f7f8 fbbd 	bl	8000638 <__aeabi_dmul>
 8007ebe:	4b2f      	ldr	r3, [pc, #188]	; (8007f7c <scalbn+0xe4>)
 8007ec0:	429e      	cmp	r6, r3
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	460d      	mov	r5, r1
 8007ec6:	da12      	bge.n	8007eee <scalbn+0x56>
 8007ec8:	a327      	add	r3, pc, #156	; (adr r3, 8007f68 <scalbn+0xd0>)
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	f7f8 fbb3 	bl	8000638 <__aeabi_dmul>
 8007ed2:	e009      	b.n	8007ee8 <scalbn+0x50>
 8007ed4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007ed8:	428a      	cmp	r2, r1
 8007eda:	d10c      	bne.n	8007ef6 <scalbn+0x5e>
 8007edc:	ee10 2a10 	vmov	r2, s0
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	f7f8 f9f2 	bl	80002cc <__adddf3>
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	e01c      	b.n	8007f28 <scalbn+0x90>
 8007eee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	3a36      	subs	r2, #54	; 0x36
 8007ef6:	4432      	add	r2, r6
 8007ef8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007efc:	428a      	cmp	r2, r1
 8007efe:	dd0b      	ble.n	8007f18 <scalbn+0x80>
 8007f00:	ec45 4b11 	vmov	d1, r4, r5
 8007f04:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007f70 <scalbn+0xd8>
 8007f08:	f000 f83c 	bl	8007f84 <copysign>
 8007f0c:	a318      	add	r3, pc, #96	; (adr r3, 8007f70 <scalbn+0xd8>)
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	ec51 0b10 	vmov	r0, r1, d0
 8007f16:	e7da      	b.n	8007ece <scalbn+0x36>
 8007f18:	2a00      	cmp	r2, #0
 8007f1a:	dd08      	ble.n	8007f2e <scalbn+0x96>
 8007f1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007f28:	ec45 4b10 	vmov	d0, r4, r5
 8007f2c:	bd70      	pop	{r4, r5, r6, pc}
 8007f2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007f32:	da0d      	bge.n	8007f50 <scalbn+0xb8>
 8007f34:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007f38:	429e      	cmp	r6, r3
 8007f3a:	ec45 4b11 	vmov	d1, r4, r5
 8007f3e:	dce1      	bgt.n	8007f04 <scalbn+0x6c>
 8007f40:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007f68 <scalbn+0xd0>
 8007f44:	f000 f81e 	bl	8007f84 <copysign>
 8007f48:	a307      	add	r3, pc, #28	; (adr r3, 8007f68 <scalbn+0xd0>)
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	e7e0      	b.n	8007f12 <scalbn+0x7a>
 8007f50:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f54:	3236      	adds	r2, #54	; 0x36
 8007f56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	2200      	movs	r2, #0
 8007f64:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <scalbn+0xe8>)
 8007f66:	e7b2      	b.n	8007ece <scalbn+0x36>
 8007f68:	c2f8f359 	.word	0xc2f8f359
 8007f6c:	01a56e1f 	.word	0x01a56e1f
 8007f70:	8800759c 	.word	0x8800759c
 8007f74:	7e37e43c 	.word	0x7e37e43c
 8007f78:	43500000 	.word	0x43500000
 8007f7c:	ffff3cb0 	.word	0xffff3cb0
 8007f80:	3c900000 	.word	0x3c900000

08007f84 <copysign>:
 8007f84:	ec51 0b10 	vmov	r0, r1, d0
 8007f88:	ee11 0a90 	vmov	r0, s3
 8007f8c:	ee10 2a10 	vmov	r2, s0
 8007f90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007f94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007f98:	ea41 0300 	orr.w	r3, r1, r0
 8007f9c:	ec43 2b10 	vmov	d0, r2, r3
 8007fa0:	4770      	bx	lr
	...

08007fa4 <_init>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr

08007fb0 <_fini>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr
