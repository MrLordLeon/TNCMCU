
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d4  080076d4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076dc  080076dc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076dc  080076dc  000176dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076e0  080076e0  000176e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080076e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d98  20000084  08007768  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e1c  08007768  00022e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d0f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027bc  00000000  00000000  00032dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed0  00000000  00000000  00035580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  00036450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000232a8  00000000  00000000  000371f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c594  00000000  00000000  0005a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d27c5  00000000  00000000  00066a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001391f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040cc  00000000  00000000  00139274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006fc8 	.word	0x08006fc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08006fc8 	.word	0x08006fc8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 1, 1, 0, 0, 0, 0, 0, 0 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	80fb      	strh	r3, [r7, #6]
 80005cc:	4613      	mov	r3, r2
 80005ce:	717b      	strb	r3, [r7, #5]
    int temp;

    sprintf(uartData, "\nSelector              = %d",select_8_16);
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	461a      	mov	r2, r3
 80005d4:	4951      	ldr	r1, [pc, #324]	; (800071c <conv_HEX_to_BIN+0x15c>)
 80005d6:	4852      	ldr	r0, [pc, #328]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005d8:	f006 f914 	bl	8006804 <siprintf>
    HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80005dc:	4850      	ldr	r0, [pc, #320]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005de:	f7ff fe17 	bl	8000210 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	230a      	movs	r3, #10
 80005e8:	494d      	ldr	r1, [pc, #308]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005ea:	484e      	ldr	r0, [pc, #312]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80005ec:	f005 f9c9 	bl	8005982 <HAL_UART_Transmit>

    sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	461a      	mov	r2, r3
 80005f4:	494c      	ldr	r1, [pc, #304]	; (8000728 <conv_HEX_to_BIN+0x168>)
 80005f6:	484a      	ldr	r0, [pc, #296]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005f8:	f006 f904 	bl	8006804 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80005fc:	4848      	ldr	r0, [pc, #288]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80005fe:	f7ff fe07 	bl	8000210 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	230a      	movs	r3, #10
 8000608:	4945      	ldr	r1, [pc, #276]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800060a:	4846      	ldr	r0, [pc, #280]	; (8000724 <conv_HEX_to_BIN+0x164>)
 800060c:	f005 f9b9 	bl	8005982 <HAL_UART_Transmit>

    if(select_8_16){
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01f      	beq.n	8000656 <conv_HEX_to_BIN+0x96>
		for(int i = 0; i < 8; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	e018      	b.n	800064e <conv_HEX_to_BIN+0x8e>
			temp = hex_byte_in >> i;
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	fa42 f303 	asr.w	r3, r2, r3
 8000624:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	bfb8      	it	lt
 8000630:	425b      	neglt	r3, r3
 8000632:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			*(bin_byte_out+i) = temp;
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	4413      	add	r3, r2
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	2a00      	cmp	r2, #0
 800063e:	bf14      	ite	ne
 8000640:	2201      	movne	r2, #1
 8000642:	2200      	moveq	r2, #0
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	2b07      	cmp	r3, #7
 8000652:	dde3      	ble.n	800061c <conv_HEX_to_BIN+0x5c>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
    }

    //sprintf(uartData, "\n");
	//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
}
 8000654:	e05e      	b.n	8000714 <conv_HEX_to_BIN+0x154>
	   sprintf(uartData, "\nByte value            = %x\nBinary value[LSB:MSB] =",hex_byte_in);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	461a      	mov	r2, r3
 800065a:	4934      	ldr	r1, [pc, #208]	; (800072c <conv_HEX_to_BIN+0x16c>)
 800065c:	4830      	ldr	r0, [pc, #192]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800065e:	f006 f8d1 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000662:	482f      	ldr	r0, [pc, #188]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000664:	f7ff fdd4 	bl	8000210 <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	b29a      	uxth	r2, r3
 800066c:	230a      	movs	r3, #10
 800066e:	492c      	ldr	r1, [pc, #176]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000670:	482c      	ldr	r0, [pc, #176]	; (8000724 <conv_HEX_to_BIN+0x164>)
 8000672:	f005 f986 	bl	8005982 <HAL_UART_Transmit>
		for(int i = 0; i < 16; i++){
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	e038      	b.n	80006ee <conv_HEX_to_BIN+0x12e>
			temp = hex_byte_in >> i;
 800067c:	88fa      	ldrh	r2, [r7, #6]
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	fa42 f303 	asr.w	r3, r2, r3
 8000684:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " b=%d ",temp);
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4929      	ldr	r1, [pc, #164]	; (8000730 <conv_HEX_to_BIN+0x170>)
 800068a:	4825      	ldr	r0, [pc, #148]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800068c:	f006 f8ba 	bl	8006804 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000690:	4823      	ldr	r0, [pc, #140]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000692:	f7ff fdbd 	bl	8000210 <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	b29a      	uxth	r2, r3
 800069a:	230a      	movs	r3, #10
 800069c:	4920      	ldr	r1, [pc, #128]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800069e:	4821      	ldr	r0, [pc, #132]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80006a0:	f005 f96f 	bl	8005982 <HAL_UART_Transmit>
			temp = temp%2;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " a=%d ",temp);
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	491f      	ldr	r1, [pc, #124]	; (8000734 <conv_HEX_to_BIN+0x174>)
 80006b6:	481a      	ldr	r0, [pc, #104]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006b8:	f006 f8a4 	bl	8006804 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80006bc:	4818      	ldr	r0, [pc, #96]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006be:	f7ff fda7 	bl	8000210 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	230a      	movs	r3, #10
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006ca:	4816      	ldr	r0, [pc, #88]	; (8000724 <conv_HEX_to_BIN+0x164>)
 80006cc:	f005 f959 	bl	8005982 <HAL_UART_Transmit>
			*(bin_byte_out + 16 - 1 - i) = temp; //MSB is at lowest index
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	f1c3 030f 	rsb	r3, r3, #15
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	4413      	add	r3, r2
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	2a00      	cmp	r2, #0
 80006de:	bf14      	ite	ne
 80006e0:	2201      	movne	r2, #1
 80006e2:	2200      	moveq	r2, #0
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	3301      	adds	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	ddc3      	ble.n	800067c <conv_HEX_to_BIN+0xbc>
		sprintf(uartData, "\n ");
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <conv_HEX_to_BIN+0x160>)
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <conv_HEX_to_BIN+0x178>)
 80006f8:	8811      	ldrh	r1, [r2, #0]
 80006fa:	7892      	ldrb	r2, [r2, #2]
 80006fc:	8019      	strh	r1, [r3, #0]
 80006fe:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <conv_HEX_to_BIN+0x160>)
 8000702:	f7ff fd85 	bl	8000210 <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	b29a      	uxth	r2, r3
 800070a:	230a      	movs	r3, #10
 800070c:	4904      	ldr	r1, [pc, #16]	; (8000720 <conv_HEX_to_BIN+0x160>)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <conv_HEX_to_BIN+0x164>)
 8000710:	f005 f937 	bl	8005982 <HAL_UART_Transmit>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	08006fe0 	.word	0x08006fe0
 8000720:	20001cd8 	.word	0x20001cd8
 8000724:	20002b94 	.word	0x20002b94
 8000728:	08006ffc 	.word	0x08006ffc
 800072c:	08007030 	.word	0x08007030
 8000730:	08007064 	.word	0x08007064
 8000734:	0800706c 	.word	0x0800706c
 8000738:	08007074 	.word	0x08007074

0800073c <init_AX25>:
	return acc;
}

//General Program
//****************************************************************************************************************
void init_AX25(){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8000740:	2201      	movs	r2, #1
 8000742:	4909      	ldr	r1, [pc, #36]	; (8000768 <init_AX25+0x2c>)
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <init_AX25+0x30>)
 8000746:	f005 f9b5 	bl	8005ab4 <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <init_AX25+0x34>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <init_AX25+0x34>)
 8000752:	2200      	movs	r2, #0
 8000754:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <init_AX25+0x34>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <init_AX25+0x34>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000144c 	.word	0x2000144c
 800076c:	20002b94 	.word	0x20002b94
 8000770:	20001440 	.word	0x20001440

08000774 <tx_rx>:

void tx_rx() {
 8000774:	b5b0      	push	{r4, r5, r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	if (changeMode) {
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <tx_rx+0x90>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d004      	beq.n	800078c <tx_rx+0x18>
		changeMode = 0;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <tx_rx+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
		toggleMode();
 8000788:	f001 f82e 	bl	80017e8 <toggleMode>
	}

	//Transmission Mode
	if (mode) {
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <tx_rx+0x94>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00f      	beq.n	80007b4 <tx_rx+0x40>
		bool packet_received = false;
 8000794:	2300      	movs	r3, #0
 8000796:	71bb      	strb	r3, [r7, #6]
		bool packet_converted = false;
 8000798:	2300      	movs	r3, #0
 800079a:	717b      	strb	r3, [r7, #5]

		//Run receiving KISS
		packet_received = receiving_KISS();
 800079c:	f000 faec 	bl	8000d78 <receiving_KISS>
 80007a0:	4603      	mov	r3, r0
 80007a2:	71bb      	strb	r3, [r7, #6]

		if(packet_received){
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d027      	beq.n	80007fa <tx_rx+0x86>
			//Convert KISS packet to AX.25 packet
			packet_converted = KISS_TO_AX25();
 80007aa:	f000 fbad 	bl	8000f08 <KISS_TO_AX25>
 80007ae:	4603      	mov	r3, r0
 80007b0:	717b      	strb	r3, [r7, #5]
		if(!change){
			sprintf(uartData, "Changing mode due to request\n");
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
}
 80007b2:	e022      	b.n	80007fa <tx_rx+0x86>
		bool change = receiving_AX25();
 80007b4:	f000 f87a 	bl	80008ac <receiving_AX25>
 80007b8:	4603      	mov	r3, r0
 80007ba:	71fb      	strb	r3, [r7, #7]
		if(!change){
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	f083 0301 	eor.w	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d018      	beq.n	80007fa <tx_rx+0x86>
			sprintf(uartData, "Changing mode due to request\n");
 80007c8:	4a10      	ldr	r2, [pc, #64]	; (800080c <tx_rx+0x98>)
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <tx_rx+0x9c>)
 80007cc:	4615      	mov	r5, r2
 80007ce:	461c      	mov	r4, r3
 80007d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007d2:	6028      	str	r0, [r5, #0]
 80007d4:	6069      	str	r1, [r5, #4]
 80007d6:	60aa      	str	r2, [r5, #8]
 80007d8:	60eb      	str	r3, [r5, #12]
 80007da:	cc07      	ldmia	r4!, {r0, r1, r2}
 80007dc:	6128      	str	r0, [r5, #16]
 80007de:	6169      	str	r1, [r5, #20]
 80007e0:	61aa      	str	r2, [r5, #24]
 80007e2:	8823      	ldrh	r3, [r4, #0]
 80007e4:	83ab      	strh	r3, [r5, #28]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <tx_rx+0x98>)
 80007e8:	f7ff fd12 	bl	8000210 <strlen>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	230a      	movs	r3, #10
 80007f2:	4906      	ldr	r1, [pc, #24]	; (800080c <tx_rx+0x98>)
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <tx_rx+0xa0>)
 80007f6:	f005 f8c4 	bl	8005982 <HAL_UART_Transmit>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bdb0      	pop	{r4, r5, r7, pc}
 8000802:	bf00      	nop
 8000804:	200000a5 	.word	0x200000a5
 8000808:	20002b3c 	.word	0x20002b3c
 800080c:	20001cd8 	.word	0x20001cd8
 8000810:	08007078 	.word	0x08007078
 8000814:	20002b94 	.word	0x20002b94

08000818 <UART2_EXCEPTION_CALLBACK>:
	//HAL_UART_Transmit(&huart2, local_UART_packet->HEX_KISS_PACKET, KISS_SIZE, 10);
}

//UART Handling data flow
//****************************************************************************************************************
void UART2_EXCEPTION_CALLBACK(){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);//Reset
 800081c:	2201      	movs	r2, #1
 800081e:	491d      	ldr	r1, [pc, #116]	; (8000894 <UART2_EXCEPTION_CALLBACK+0x7c>)
 8000820:	481d      	ldr	r0, [pc, #116]	; (8000898 <UART2_EXCEPTION_CALLBACK+0x80>)
 8000822:	f005 f947 	bl	8005ab4 <HAL_UART_Receive_IT>
	UART_packet.got_packet = false;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000828:	2200      	movs	r2, #0
 800082a:	735a      	strb	r2, [r3, #13]

	  if(UART_packet.input==0xc0){
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 800082e:	7b1b      	ldrb	r3, [r3, #12]
 8000830:	2bc0      	cmp	r3, #192	; 0xc0
 8000832:	d104      	bne.n	800083e <UART2_EXCEPTION_CALLBACK+0x26>
		  UART_packet.flags++;
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	3301      	adds	r3, #1
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 800083c:	6093      	str	r3, [r2, #8]
	  }

	  *(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <UART2_EXCEPTION_CALLBACK+0x88>)
 8000846:	4413      	add	r3, r2
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 800084a:	7b12      	ldrb	r2, [r2, #12]
 800084c:	701a      	strb	r2, [r3, #0]
	  UART_packet.rx_cnt++;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	4a11      	ldr	r2, [pc, #68]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000856:	6013      	str	r3, [r2, #0]

	  if(UART_packet.flags>=2){
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	2b01      	cmp	r3, #1
 800085e:	dd16      	ble.n	800088e <UART2_EXCEPTION_CALLBACK+0x76>
		  if(!mode){
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <UART2_EXCEPTION_CALLBACK+0x8c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	f083 0301 	eor.w	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <UART2_EXCEPTION_CALLBACK+0x5c>
			  changeMode = true;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <UART2_EXCEPTION_CALLBACK+0x90>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
		  }
		  UART_packet.flags = 0;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
		  UART_packet.got_packet = true;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 800087c:	2201      	movs	r2, #1
 800087e:	735a      	strb	r2, [r3, #13]
		  UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a05      	ldr	r2, [pc, #20]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 8000886:	6053      	str	r3, [r2, #4]
		  UART_packet.rx_cnt=0;
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <UART2_EXCEPTION_CALLBACK+0x84>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]

	  }
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000144c 	.word	0x2000144c
 8000898:	20002b94 	.word	0x20002b94
 800089c:	20001440 	.word	0x20001440
 80008a0:	2000144e 	.word	0x2000144e
 80008a4:	20002b3c 	.word	0x20002b3c
 80008a8:	200000a5 	.word	0x200000a5

080008ac <receiving_AX25>:
//****************************************************************************************************************
//END OF UART Handling data flow

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 80008b2:	4a51      	ldr	r2, [pc, #324]	; (80009f8 <receiving_AX25+0x14c>)
 80008b4:	4b51      	ldr	r3, [pc, #324]	; (80009fc <receiving_AX25+0x150>)
 80008b6:	4615      	mov	r5, r2
 80008b8:	461c      	mov	r4, r3
 80008ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008bc:	6028      	str	r0, [r5, #0]
 80008be:	6069      	str	r1, [r5, #4]
 80008c0:	60aa      	str	r2, [r5, #8]
 80008c2:	60eb      	str	r3, [r5, #12]
 80008c4:	cc03      	ldmia	r4!, {r0, r1}
 80008c6:	6128      	str	r0, [r5, #16]
 80008c8:	6169      	str	r1, [r5, #20]
 80008ca:	7823      	ldrb	r3, [r4, #0]
 80008cc:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80008ce:	484a      	ldr	r0, [pc, #296]	; (80009f8 <receiving_AX25+0x14c>)
 80008d0:	f7ff fc9e 	bl	8000210 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	230a      	movs	r3, #10
 80008da:	4947      	ldr	r1, [pc, #284]	; (80009f8 <receiving_AX25+0x14c>)
 80008dc:	4848      	ldr	r0, [pc, #288]	; (8000a00 <receiving_AX25+0x154>)
 80008de:	f005 f850 	bl	8005982 <HAL_UART_Transmit>
	struct PACKET_STRUCT* local_packet = &global_packet;
 80008e2:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <receiving_AX25+0x158>)
 80008e4:	60fb      	str	r3, [r7, #12]

	int packet_status;
	packet_status = streamGet();
 80008e6:	f001 fa7f 	bl	8001de8 <streamGet>
 80008ea:	60b8      	str	r0, [r7, #8]

	//Valid packet received
	if(packet_status == 1){
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d13b      	bne.n	800096a <receiving_AX25+0xbe>
		//Remove the bit stuffed zeros from received packet and reset packet type
		//remove_bit_stuffing();
		local_packet->i_frame_packet = false;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80008f8:	3308      	adds	r3, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]

		//Validate packet
		bool AX25_IsValid = AX25_Packet_Validate();
 80008fe:	f000 f889 	bl	8000a14 <AX25_Packet_Validate>
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

		if(AX25_IsValid){
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d00b      	beq.n	8000924 <receiving_AX25+0x78>
			//Put data into KISS format and buffer
			AX25_TO_KISS();
 800090c:	f000 f9aa 	bl	8000c64 <AX25_TO_KISS>

			//Transmit KISS Packet that has been generated
			//output_KISS();

			//Clear AX.25 buffer
			memset(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f640 225f 	movw	r2, #2655	; 0xa5f
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f005 ff6b 	bl	80067f4 <memset>

			//Loop back and begin receiving another message
			receiving_AX25();
 800091e:	f7ff ffc5 	bl	80008ac <receiving_AX25>
 8000922:	e065      	b.n	80009f0 <receiving_AX25+0x144>
		}
		else{
			sprintf(uartData, "Packet was not valid, restarting\n");
 8000924:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <receiving_AX25+0x14c>)
 8000926:	4a38      	ldr	r2, [pc, #224]	; (8000a08 <receiving_AX25+0x15c>)
 8000928:	4614      	mov	r4, r2
 800092a:	469c      	mov	ip, r3
 800092c:	f104 0e20 	add.w	lr, r4, #32
 8000930:	4665      	mov	r5, ip
 8000932:	4626      	mov	r6, r4
 8000934:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000936:	6028      	str	r0, [r5, #0]
 8000938:	6069      	str	r1, [r5, #4]
 800093a:	60aa      	str	r2, [r5, #8]
 800093c:	60eb      	str	r3, [r5, #12]
 800093e:	3410      	adds	r4, #16
 8000940:	f10c 0c10 	add.w	ip, ip, #16
 8000944:	4574      	cmp	r4, lr
 8000946:	d1f3      	bne.n	8000930 <receiving_AX25+0x84>
 8000948:	4662      	mov	r2, ip
 800094a:	4623      	mov	r3, r4
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000950:	4829      	ldr	r0, [pc, #164]	; (80009f8 <receiving_AX25+0x14c>)
 8000952:	f7ff fc5d 	bl	8000210 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	b29a      	uxth	r2, r3
 800095a:	230a      	movs	r3, #10
 800095c:	4926      	ldr	r1, [pc, #152]	; (80009f8 <receiving_AX25+0x14c>)
 800095e:	4828      	ldr	r0, [pc, #160]	; (8000a00 <receiving_AX25+0x154>)
 8000960:	f005 f80f 	bl	8005982 <HAL_UART_Transmit>
			receiving_AX25();
 8000964:	f7ff ffa2 	bl	80008ac <receiving_AX25>
 8000968:	e042      	b.n	80009f0 <receiving_AX25+0x144>
		}
	}
	//Return code for toggleMode
	else if(packet_status == -1){
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000970:	d118      	bne.n	80009a4 <receiving_AX25+0xf8>
		sprintf(uartData, "Need to change mode\n");
 8000972:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <receiving_AX25+0x14c>)
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <receiving_AX25+0x160>)
 8000976:	4615      	mov	r5, r2
 8000978:	461c      	mov	r4, r3
 800097a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800097c:	6028      	str	r0, [r5, #0]
 800097e:	6069      	str	r1, [r5, #4]
 8000980:	60aa      	str	r2, [r5, #8]
 8000982:	60eb      	str	r3, [r5, #12]
 8000984:	6820      	ldr	r0, [r4, #0]
 8000986:	6128      	str	r0, [r5, #16]
 8000988:	7923      	ldrb	r3, [r4, #4]
 800098a:	752b      	strb	r3, [r5, #20]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800098c:	481a      	ldr	r0, [pc, #104]	; (80009f8 <receiving_AX25+0x14c>)
 800098e:	f7ff fc3f 	bl	8000210 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	230a      	movs	r3, #10
 8000998:	4917      	ldr	r1, [pc, #92]	; (80009f8 <receiving_AX25+0x14c>)
 800099a:	4819      	ldr	r0, [pc, #100]	; (8000a00 <receiving_AX25+0x154>)
 800099c:	f004 fff1 	bl	8005982 <HAL_UART_Transmit>

		return false;
 80009a0:	2300      	movs	r3, #0
 80009a2:	e025      	b.n	80009f0 <receiving_AX25+0x144>
	}
	//Weird case of unknown return code toggles mode
	else{
		sprintf(uartData, "Packet status was unknown, restarting\n");
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <receiving_AX25+0x14c>)
 80009a6:	4a1a      	ldr	r2, [pc, #104]	; (8000a10 <receiving_AX25+0x164>)
 80009a8:	4614      	mov	r4, r2
 80009aa:	469c      	mov	ip, r3
 80009ac:	f104 0e20 	add.w	lr, r4, #32
 80009b0:	4665      	mov	r5, ip
 80009b2:	4626      	mov	r6, r4
 80009b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80009b6:	6028      	str	r0, [r5, #0]
 80009b8:	6069      	str	r1, [r5, #4]
 80009ba:	60aa      	str	r2, [r5, #8]
 80009bc:	60eb      	str	r3, [r5, #12]
 80009be:	3410      	adds	r4, #16
 80009c0:	f10c 0c10 	add.w	ip, ip, #16
 80009c4:	4574      	cmp	r4, lr
 80009c6:	d1f3      	bne.n	80009b0 <receiving_AX25+0x104>
 80009c8:	4663      	mov	r3, ip
 80009ca:	4622      	mov	r2, r4
 80009cc:	6810      	ldr	r0, [r2, #0]
 80009ce:	6018      	str	r0, [r3, #0]
 80009d0:	8891      	ldrh	r1, [r2, #4]
 80009d2:	7992      	ldrb	r2, [r2, #6]
 80009d4:	8099      	strh	r1, [r3, #4]
 80009d6:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <receiving_AX25+0x14c>)
 80009da:	f7ff fc19 	bl	8000210 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	230a      	movs	r3, #10
 80009e4:	4904      	ldr	r1, [pc, #16]	; (80009f8 <receiving_AX25+0x14c>)
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <receiving_AX25+0x154>)
 80009e8:	f004 ffcb 	bl	8005982 <HAL_UART_Transmit>
		receiving_AX25();
 80009ec:	f7ff ff5e 	bl	80008ac <receiving_AX25>
	}
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f8:	20001cd8 	.word	0x20001cd8
 80009fc:	080070f4 	.word	0x080070f4
 8000a00:	20002b94 	.word	0x20002b94
 8000a04:	200000d4 	.word	0x200000d4
 8000a08:	08007110 	.word	0x08007110
 8000a0c:	08007134 	.word	0x08007134
 8000a10:	0800714c 	.word	0x0800714c

08000a14 <AX25_Packet_Validate>:
		}
	}
	//transmit kiss
}

bool AX25_Packet_Validate(){
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <AX25_Packet_Validate+0x5c>)
 8000a1c:	607b      	str	r3, [r7, #4]
	int fcs_val = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <AX25_Packet_Validate+0x60>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b77      	cmp	r3, #119	; 0x77
 8000a28:	dc0a      	bgt.n	8000a40 <AX25_Packet_Validate+0x2c>
		sprintf(uartData,"Trash Packet");
 8000a2a:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <AX25_Packet_Validate+0x64>)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <AX25_Packet_Validate+0x68>)
 8000a2e:	4614      	mov	r4, r2
 8000a30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a32:	6020      	str	r0, [r4, #0]
 8000a34:	6061      	str	r1, [r4, #4]
 8000a36:	60a2      	str	r2, [r4, #8]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	7323      	strb	r3, [r4, #12]
		return false;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e013      	b.n	8000a68 <AX25_Packet_Validate+0x54>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <AX25_Packet_Validate+0x60>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0307 	and.w	r3, r3, #7
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d00a      	beq.n	8000a62 <AX25_Packet_Validate+0x4e>
		sprintf(uartData,"Trash Packet");
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <AX25_Packet_Validate+0x64>)
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <AX25_Packet_Validate+0x68>)
 8000a50:	4614      	mov	r4, r2
 8000a52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a54:	6020      	str	r0, [r4, #0]
 8000a56:	6061      	str	r1, [r4, #4]
 8000a58:	60a2      	str	r2, [r4, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	7323      	strb	r3, [r4, #12]
		return false;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e002      	b.n	8000a68 <AX25_Packet_Validate+0x54>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		set_packet_pointer_AX25();
 8000a62:	f000 f80d 	bl	8000a80 <set_packet_pointer_AX25>
		//return crc_check();
		return true;
 8000a66:	2301      	movs	r3, #1
	}

//	return true; //valid packet
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	200000d4 	.word	0x200000d4
 8000a74:	200000a0 	.word	0x200000a0
 8000a78:	20001cd8 	.word	0x20001cd8
 8000a7c:	08007174 	.word	0x08007174

08000a80 <set_packet_pointer_AX25>:


void set_packet_pointer_AX25(){
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000a86:	4b6e      	ldr	r3, [pc, #440]	; (8000c40 <set_packet_pointer_AX25+0x1c0>)
 8000a88:	60fb      	str	r3, [r7, #12]
	int not_info = FCS_len;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 8000a8e:	4b6d      	ldr	r3, [pc, #436]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000a90:	4a6d      	ldr	r2, [pc, #436]	; (8000c48 <set_packet_pointer_AX25+0x1c8>)
 8000a92:	4614      	mov	r4, r2
 8000a94:	469c      	mov	ip, r3
 8000a96:	f104 0e20 	add.w	lr, r4, #32
 8000a9a:	4665      	mov	r5, ip
 8000a9c:	4626      	mov	r6, r4
 8000a9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000aa0:	6028      	str	r0, [r5, #0]
 8000aa2:	6069      	str	r1, [r5, #4]
 8000aa4:	60aa      	str	r2, [r5, #8]
 8000aa6:	60eb      	str	r3, [r5, #12]
 8000aa8:	3410      	adds	r4, #16
 8000aaa:	f10c 0c10 	add.w	ip, ip, #16
 8000aae:	4574      	cmp	r4, lr
 8000ab0:	d1f3      	bne.n	8000a9a <set_packet_pointer_AX25+0x1a>
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	4622      	mov	r2, r4
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000aba:	4862      	ldr	r0, [pc, #392]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000abc:	f7ff fba8 	bl	8000210 <strlen>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	495f      	ldr	r1, [pc, #380]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000ac8:	4860      	ldr	r0, [pc, #384]	; (8000c4c <set_packet_pointer_AX25+0x1cc>)
 8000aca:	f004 ff5a 	bl	8005982 <HAL_UART_Transmit>
	bool *curr_mem = &local_packet->AX25_PACKET;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for address\n");
 8000ad2:	4a5c      	ldr	r2, [pc, #368]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000ad4:	4b5e      	ldr	r3, [pc, #376]	; (8000c50 <set_packet_pointer_AX25+0x1d0>)
 8000ad6:	4615      	mov	r5, r2
 8000ad8:	461c      	mov	r4, r3
 8000ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000adc:	6028      	str	r0, [r5, #0]
 8000ade:	6069      	str	r1, [r5, #4]
 8000ae0:	60aa      	str	r2, [r5, #8]
 8000ae2:	60eb      	str	r3, [r5, #12]
 8000ae4:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000ae6:	6128      	str	r0, [r5, #16]
 8000ae8:	6169      	str	r1, [r5, #20]
 8000aea:	61aa      	str	r2, [r5, #24]
 8000aec:	7823      	ldrb	r3, [r4, #0]
 8000aee:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000af0:	4854      	ldr	r0, [pc, #336]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000af2:	f7ff fb8d 	bl	8000210 <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	230a      	movs	r3, #10
 8000afc:	4951      	ldr	r1, [pc, #324]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000afe:	4853      	ldr	r0, [pc, #332]	; (8000c4c <set_packet_pointer_AX25+0x1cc>)
 8000b00:	f004 ff3f 	bl	8005982 <HAL_UART_Transmit>
	local_packet->address = curr_mem;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b0a:	3310      	adds	r3, #16
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3370      	adds	r3, #112	; 0x70
 8000b14:	607b      	str	r3, [r7, #4]
	not_info += address_len;
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	3370      	adds	r3, #112	; 0x70
 8000b1a:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for control\n");
 8000b1c:	4a49      	ldr	r2, [pc, #292]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000b1e:	4b4d      	ldr	r3, [pc, #308]	; (8000c54 <set_packet_pointer_AX25+0x1d4>)
 8000b20:	4615      	mov	r5, r2
 8000b22:	461c      	mov	r4, r3
 8000b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b26:	6028      	str	r0, [r5, #0]
 8000b28:	6069      	str	r1, [r5, #4]
 8000b2a:	60aa      	str	r2, [r5, #8]
 8000b2c:	60eb      	str	r3, [r5, #12]
 8000b2e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000b30:	6128      	str	r0, [r5, #16]
 8000b32:	6169      	str	r1, [r5, #20]
 8000b34:	61aa      	str	r2, [r5, #24]
 8000b36:	7823      	ldrb	r3, [r4, #0]
 8000b38:	772b      	strb	r3, [r5, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b3a:	4842      	ldr	r0, [pc, #264]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000b3c:	f7ff fb68 	bl	8000210 <strlen>
 8000b40:	4603      	mov	r3, r0
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	230a      	movs	r3, #10
 8000b46:	493f      	ldr	r1, [pc, #252]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000b48:	4840      	ldr	r0, [pc, #256]	; (8000c4c <set_packet_pointer_AX25+0x1cc>)
 8000b4a:	f004 ff1a 	bl	8005982 <HAL_UART_Transmit>
	local_packet->control = curr_mem;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b54:	3314      	adds	r3, #20
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3308      	adds	r3, #8
 8000b5e:	607b      	str	r3, [r7, #4]
	not_info += control_len;
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	3308      	adds	r3, #8
 8000b64:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for PID\n");
 8000b66:	4a37      	ldr	r2, [pc, #220]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000b68:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <set_packet_pointer_AX25+0x1d8>)
 8000b6a:	4615      	mov	r5, r2
 8000b6c:	461c      	mov	r4, r3
 8000b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b70:	6028      	str	r0, [r5, #0]
 8000b72:	6069      	str	r1, [r5, #4]
 8000b74:	60aa      	str	r2, [r5, #8]
 8000b76:	60eb      	str	r3, [r5, #12]
 8000b78:	cc03      	ldmia	r4!, {r0, r1}
 8000b7a:	6128      	str	r0, [r5, #16]
 8000b7c:	6169      	str	r1, [r5, #20]
 8000b7e:	7823      	ldrb	r3, [r4, #0]
 8000b80:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000b82:	4830      	ldr	r0, [pc, #192]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000b84:	f7ff fb44 	bl	8000210 <strlen>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	492d      	ldr	r1, [pc, #180]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000b90:	482e      	ldr	r0, [pc, #184]	; (8000c4c <set_packet_pointer_AX25+0x1cc>)
 8000b92:	f004 fef6 	bl	8005982 <HAL_UART_Transmit>
	local_packet->PID = curr_mem;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000b9c:	3318      	adds	r3, #24
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3308      	adds	r3, #8
 8000ba6:	607b      	str	r3, [r7, #4]
	not_info += PID_len;
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	3308      	adds	r3, #8
 8000bac:	60bb      	str	r3, [r7, #8]

	sprintf(uartData, "Setting pointer for Info\n");
 8000bae:	4a25      	ldr	r2, [pc, #148]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <set_packet_pointer_AX25+0x1dc>)
 8000bb2:	4615      	mov	r5, r2
 8000bb4:	461c      	mov	r4, r3
 8000bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb8:	6028      	str	r0, [r5, #0]
 8000bba:	6069      	str	r1, [r5, #4]
 8000bbc:	60aa      	str	r2, [r5, #8]
 8000bbe:	60eb      	str	r3, [r5, #12]
 8000bc0:	cc03      	ldmia	r4!, {r0, r1}
 8000bc2:	6128      	str	r0, [r5, #16]
 8000bc4:	6169      	str	r1, [r5, #20]
 8000bc6:	8823      	ldrh	r3, [r4, #0]
 8000bc8:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000bca:	481e      	ldr	r0, [pc, #120]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000bcc:	f7ff fb20 	bl	8000210 <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	491b      	ldr	r1, [pc, #108]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000bd8:	481c      	ldr	r0, [pc, #112]	; (8000c4c <set_packet_pointer_AX25+0x1cc>)
 8000bda:	f004 fed2 	bl	8005982 <HAL_UART_Transmit>
	local_packet->Info = curr_mem;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000be4:	331c      	adds	r3, #28
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	607b      	str	r3, [r7, #4]

	sprintf(uartData, "Setting pointer for FCS\n");
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <set_packet_pointer_AX25+0x1e0>)
 8000bfe:	4615      	mov	r5, r2
 8000c00:	461c      	mov	r4, r3
 8000c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c04:	6028      	str	r0, [r5, #0]
 8000c06:	6069      	str	r1, [r5, #4]
 8000c08:	60aa      	str	r2, [r5, #8]
 8000c0a:	60eb      	str	r3, [r5, #12]
 8000c0c:	cc03      	ldmia	r4!, {r0, r1}
 8000c0e:	6128      	str	r0, [r5, #16]
 8000c10:	6169      	str	r1, [r5, #20]
 8000c12:	7823      	ldrb	r3, [r4, #0]
 8000c14:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000c18:	f7ff fafa 	bl	8000210 <strlen>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	230a      	movs	r3, #10
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <set_packet_pointer_AX25+0x1c4>)
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <set_packet_pointer_AX25+0x1cc>)
 8000c26:	f004 feac 	bl	8005982 <HAL_UART_Transmit>
	local_packet->FCS = curr_mem;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000c30:	3304      	adds	r3, #4
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	601a      	str	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000d4 	.word	0x200000d4
 8000c44:	20001cd8 	.word	0x20001cd8
 8000c48:	08007184 	.word	0x08007184
 8000c4c:	20002b94 	.word	0x20002b94
 8000c50:	080071a8 	.word	0x080071a8
 8000c54:	080071c8 	.word	0x080071c8
 8000c58:	080071e8 	.word	0x080071e8
 8000c5c:	08007204 	.word	0x08007204
 8000c60:	08007220 	.word	0x08007220

08000c64 <AX25_TO_KISS>:

void AX25_TO_KISS(){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000c6a:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <AX25_TO_KISS+0x10c>)
 8000c6c:	603b      	str	r3, [r7, #0]

	set_packet_pointer_AX25();
 8000c6e:	f7ff ff07 	bl	8000a80 <set_packet_pointer_AX25>
	print_AX25();
 8000c72:	f001 f9e5 	bl	8002040 <print_AX25>

	bool* cpy_from_ptr = (local_packet->AX25_PACKET+8);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	3308      	adds	r3, #8
 8000c7a:	60fb      	str	r3, [r7, #12]

	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	493d      	ldr	r1, [pc, #244]	; (8000d74 <AX25_TO_KISS+0x110>)
 8000c80:	461a      	mov	r2, r3
 8000c82:	460b      	mov	r3, r1
 8000c84:	cb03      	ldmia	r3!, {r0, r1}
 8000c86:	6010      	str	r0, [r2, #0]
 8000c88:	6051      	str	r1, [r2, #4]
	cpy_from_ptr += FLAG_SIZE;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3308      	adds	r3, #8
 8000c8e:	60fb      	str	r3, [r7, #12]

	//copy in each byte MSB to LSB
	for(int i = 0; i < address_len/8; i++){
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	e014      	b.n	8000cc0 <AX25_TO_KISS+0x5c>
		memcpy(cpy_from_ptr,(local_packet->address + address_len - 8 - i*8),8*bool_size);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000c9c:	3310      	adds	r3, #16
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	f1c3 0368 	rsb	r3, r3, #104	; 0x68
 8000ca8:	4413      	add	r3, r2
 8000caa:	2208      	movs	r2, #8
 8000cac:	4619      	mov	r1, r3
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f005 fd7c 	bl	80067ac <memcpy>
		cpy_from_ptr += 8;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3308      	adds	r3, #8
 8000cb8:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < address_len/8; i++){
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b0d      	cmp	r3, #13
 8000cc4:	dde7      	ble.n	8000c96 <AX25_TO_KISS+0x32>
	}

	memcpy(cpy_from_ptr,local_packet->control,control_len*bool_size);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ccc:	3314      	adds	r3, #20
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f005 fd69 	bl	80067ac <memcpy>
	cpy_from_ptr += control_len;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3308      	adds	r3, #8
 8000cde:	60fb      	str	r3, [r7, #12]

	memcpy(local_packet->AX25_PACKET,KISS_FLAG,FLAG_SIZE);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	4924      	ldr	r1, [pc, #144]	; (8000d74 <AX25_TO_KISS+0x110>)
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	cb03      	ldmia	r3!, {r0, r1}
 8000cea:	6010      	str	r0, [r2, #0]
 8000cec:	6051      	str	r1, [r2, #4]
	//copy in each byte MSB to LSB
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	e019      	b.n	8000d28 <AX25_TO_KISS+0xc4>
		memcpy(cpy_from_ptr,(local_packet->Info + local_packet->Info_Len - 8 - i*8),8*bool_size); //copy in each byte MSB to LSB
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000cfa:	331c      	adds	r3, #28
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4619      	mov	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	1acb      	subs	r3, r1, r3
 8000d0e:	3b08      	subs	r3, #8
 8000d10:	4413      	add	r3, r2
 8000d12:	2208      	movs	r2, #8
 8000d14:	4619      	mov	r1, r3
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f005 fd48 	bl	80067ac <memcpy>
		cpy_from_ptr += 8;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3308      	adds	r3, #8
 8000d20:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < local_packet->Info_Len/8; i++){
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3301      	adds	r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	da00      	bge.n	8000d36 <AX25_TO_KISS+0xd2>
 8000d34:	3307      	adds	r3, #7
 8000d36:	10db      	asrs	r3, r3, #3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	dbd9      	blt.n	8000cf4 <AX25_TO_KISS+0x90>
	}
	memcpy(cpy_from_ptr,KISS_FLAG,FLAG_SIZE*bool_size);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	490c      	ldr	r1, [pc, #48]	; (8000d74 <AX25_TO_KISS+0x110>)
 8000d44:	461a      	mov	r2, r3
 8000d46:	460b      	mov	r3, r1
 8000d48:	cb03      	ldmia	r3!, {r0, r1}
 8000d4a:	6010      	str	r0, [r2, #0]
 8000d4c:	6051      	str	r1, [r2, #4]

	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000d54:	3314      	adds	r3, #20
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2208      	movs	r2, #8
 8000d5a:	68f9      	ldr	r1, [r7, #12]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f005 fd25 	bl	80067ac <memcpy>
	cpy_from_ptr += control_len;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3308      	adds	r3, #8
 8000d66:	60fb      	str	r3, [r7, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200000d4 	.word	0x200000d4
 8000d74:	20000000 	.word	0x20000000

08000d78 <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <receiving_KISS+0xc0>)
 8000d80:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <receiving_KISS+0xc4>)
 8000d84:	60fb      	str	r3, [r7, #12]

	//Got a packet bounded by c0 over uart
	if(local_UART_packet->got_packet){
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	7b5b      	ldrb	r3, [r3, #13]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d04e      	beq.n	8000e2c <receiving_KISS+0xb4>
		sprintf(uartData, "\nGot a packet via UART of size %d, printing now...\n",local_UART_packet->received_byte_cnt);
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	461a      	mov	r2, r3
 8000d94:	492a      	ldr	r1, [pc, #168]	; (8000e40 <receiving_KISS+0xc8>)
 8000d96:	482b      	ldr	r0, [pc, #172]	; (8000e44 <receiving_KISS+0xcc>)
 8000d98:	f005 fd34 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000d9c:	4829      	ldr	r0, [pc, #164]	; (8000e44 <receiving_KISS+0xcc>)
 8000d9e:	f7ff fa37 	bl	8000210 <strlen>
 8000da2:	4603      	mov	r3, r0
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	230a      	movs	r3, #10
 8000da8:	4926      	ldr	r1, [pc, #152]	; (8000e44 <receiving_KISS+0xcc>)
 8000daa:	4827      	ldr	r0, [pc, #156]	; (8000e48 <receiving_KISS+0xd0>)
 8000dac:	f004 fde9 	bl	8005982 <HAL_UART_Transmit>
		int byte_cnt = local_UART_packet->received_byte_cnt;
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	60bb      	str	r3, [r7, #8]
		for(int i = 0;i < byte_cnt;i++){
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	e01f      	b.n	8000dfc <receiving_KISS+0x84>
			//Hex value from UART
			 //start from LS Byte = Highest index
			uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[byte_cnt-1-i];
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	7b9b      	ldrb	r3, [r3, #14]
 8000dca:	71fb      	strb	r3, [r7, #7]

			//Bool pointer for KISS array
			bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3307      	adds	r3, #7
 8000dda:	603b      	str	r3, [r7, #0]

			//sprintf(uartData, "Byte[%d] = %d\n",i,hex_byte_val);
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	2201      	movs	r2, #1
 8000de2:	6839      	ldr	r1, [r7, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fbeb 	bl	80005c0 <conv_HEX_to_BIN>

//			local_UART_packet->got_packet = false;
			local_packet->got_packet = true;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000df0:	3309      	adds	r3, #9
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i < byte_cnt;i++){
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dbdb      	blt.n	8000dbc <receiving_KISS+0x44>
		}

		local_packet->byte_cnt = local_UART_packet->received_byte_cnt;
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e0e:	330c      	adds	r3, #12
 8000e10:	601a      	str	r2, [r3, #0]
		local_packet->Info_Len = (local_packet->byte_cnt-INFO_offset)*8;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e18:	330c      	adds	r3, #12
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3b13      	subs	r3, #19
 8000e1e:	00da      	lsls	r2, r3, #3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e26:	601a      	str	r2, [r3, #0]

		return true;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <receiving_KISS+0xb6>
	}
	return false;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20001440 	.word	0x20001440
 8000e3c:	200000d4 	.word	0x200000d4
 8000e40:	0800723c 	.word	0x0800723c
 8000e44:	20001cd8 	.word	0x20001cd8
 8000e48:	20002b94 	.word	0x20002b94

08000e4c <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(){
 8000e4c:	b5b0      	push	{r4, r5, r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000e52:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <set_packet_pointer_KISS+0xac>)
 8000e54:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Setting packet pointer to KISS\n");
 8000e56:	4a29      	ldr	r2, [pc, #164]	; (8000efc <set_packet_pointer_KISS+0xb0>)
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <set_packet_pointer_KISS+0xb4>)
 8000e5a:	4614      	mov	r4, r2
 8000e5c:	461d      	mov	r5, r3
 8000e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e60:	6020      	str	r0, [r4, #0]
 8000e62:	6061      	str	r1, [r4, #4]
 8000e64:	60a2      	str	r2, [r4, #8]
 8000e66:	60e3      	str	r3, [r4, #12]
 8000e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6a:	6120      	str	r0, [r4, #16]
 8000e6c:	6161      	str	r1, [r4, #20]
 8000e6e:	61a2      	str	r2, [r4, #24]
 8000e70:	61e3      	str	r3, [r4, #28]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000e72:	4822      	ldr	r0, [pc, #136]	; (8000efc <set_packet_pointer_KISS+0xb0>)
 8000e74:	f7ff f9cc 	bl	8000210 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	491f      	ldr	r1, [pc, #124]	; (8000efc <set_packet_pointer_KISS+0xb0>)
 8000e80:	4820      	ldr	r0, [pc, #128]	; (8000f04 <set_packet_pointer_KISS+0xb8>)
 8000e82:	f004 fd7e 	bl	8005982 <HAL_UART_Transmit>

	bool *curr_mem = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000e92:	330c      	adds	r3, #12
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	3b02      	subs	r3, #2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	603b      	str	r3, [r7, #0]

	curr_mem -= address_len;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	3b70      	subs	r3, #112	; 0x70
 8000ea2:	603b      	str	r3, [r7, #0]
	local_packet->address = curr_mem;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000eaa:	3310      	adds	r3, #16
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	601a      	str	r2, [r3, #0]

	curr_mem -= control_len;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	3b08      	subs	r3, #8
 8000eb4:	603b      	str	r3, [r7, #0]
	local_packet->control = curr_mem;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ebc:	3314      	adds	r3, #20
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	601a      	str	r2, [r3, #0]

	curr_mem -= PID_len;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	3b08      	subs	r3, #8
 8000ec6:	603b      	str	r3, [r7, #0]
	local_packet->PID = curr_mem;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000ece:	3318      	adds	r3, #24
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	601a      	str	r2, [r3, #0]

	curr_mem -= local_packet->Info_Len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	425b      	negs	r3, r3
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	603b      	str	r3, [r7, #0]
	local_packet->Info = curr_mem;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000eea:	331c      	adds	r3, #28
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ef8:	200000d4 	.word	0x200000d4
 8000efc:	20001cd8 	.word	0x20001cd8
 8000f00:	08007270 	.word	0x08007270
 8000f04:	20002b94 	.word	0x20002b94

08000f08 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 8000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af02      	add	r7, sp, #8
	struct PACKET_STRUCT* local_packet = &global_packet;
 8000f0e:	4b4b      	ldr	r3, [pc, #300]	; (800103c <KISS_TO_AX25+0x134>)
 8000f10:	60fb      	str	r3, [r7, #12]

	sprintf(uartData, "Before KISS -> AX.25 conversion\n");
 8000f12:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <KISS_TO_AX25+0x138>)
 8000f14:	4a4b      	ldr	r2, [pc, #300]	; (8001044 <KISS_TO_AX25+0x13c>)
 8000f16:	4614      	mov	r4, r2
 8000f18:	469c      	mov	ip, r3
 8000f1a:	f104 0e20 	add.w	lr, r4, #32
 8000f1e:	4665      	mov	r5, ip
 8000f20:	4626      	mov	r6, r4
 8000f22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f24:	6028      	str	r0, [r5, #0]
 8000f26:	6069      	str	r1, [r5, #4]
 8000f28:	60aa      	str	r2, [r5, #8]
 8000f2a:	60eb      	str	r3, [r5, #12]
 8000f2c:	3410      	adds	r4, #16
 8000f2e:	f10c 0c10 	add.w	ip, ip, #16
 8000f32:	4574      	cmp	r4, lr
 8000f34:	d1f3      	bne.n	8000f1e <KISS_TO_AX25+0x16>
 8000f36:	4663      	mov	r3, ip
 8000f38:	4622      	mov	r2, r4
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8000f3e:	4840      	ldr	r0, [pc, #256]	; (8001040 <KISS_TO_AX25+0x138>)
 8000f40:	f7ff f966 	bl	8000210 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	230a      	movs	r3, #10
 8000f4a:	493d      	ldr	r1, [pc, #244]	; (8001040 <KISS_TO_AX25+0x138>)
 8000f4c:	483e      	ldr	r0, [pc, #248]	; (8001048 <KISS_TO_AX25+0x140>)
 8000f4e:	f004 fd18 	bl	8005982 <HAL_UART_Transmit>

	set_packet_pointer_KISS();
 8000f52:	f7ff ff7b 	bl	8000e4c <set_packet_pointer_KISS>
	print_KISS();
 8000f56:	f001 fc8b 	bl	8002870 <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000f66:	330c      	adds	r3, #12
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3b02      	subs	r3, #2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	4413      	add	r3, r2
 8000f70:	60bb      	str	r3, [r7, #8]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25();
 8000f72:	f7ff fd85 	bl	8000a80 <set_packet_pointer_AX25>

	cpy_from_ptr -= address_len;
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3b70      	subs	r3, #112	; 0x70
 8000f7a:	60bb      	str	r3, [r7, #8]
	memcpy(local_packet->address,cpy_from_ptr,address_len);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000f82:	3310      	adds	r3, #16
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2270      	movs	r2, #112	; 0x70
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fc0e 	bl	80067ac <memcpy>

	cpy_from_ptr -= control_len;
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	3b08      	subs	r3, #8
 8000f94:	60bb      	str	r3, [r7, #8]
	memcpy(local_packet->control,cpy_from_ptr,control_len);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000f9c:	3314      	adds	r3, #20
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	68b9      	ldr	r1, [r7, #8]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f005 fc01 	bl	80067ac <memcpy>

	cpy_from_ptr -= PID_len;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3b08      	subs	r3, #8
 8000fae:	60bb      	str	r3, [r7, #8]
	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000fb6:	3318      	adds	r3, #24
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2208      	movs	r2, #8
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f005 fbf4 	bl	80067ac <memcpy>

	cpy_from_ptr -= local_packet->Info_Len;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	425b      	negs	r3, r3
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8000fda:	331c      	adds	r3, #28
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	f005 fbdf 	bl	80067ac <memcpy>

	//USE CRC HERE TO GENERATE FCS FIELD
	rxBit_count = address_len + control_len + PID_len + local_packet->Info_Len;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3380      	adds	r3, #128	; 0x80
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <KISS_TO_AX25+0x144>)
 8000ffa:	6013      	str	r3, [r2, #0]
	crc_generate();
 8000ffc:	f000 faca 	bl	8001594 <crc_generate>
	print_AX25();
 8001000:	f001 f81e 	bl	8002040 <print_AX25>

	sprintf(uartData, "\n line Printing AX25 = \n");
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <KISS_TO_AX25+0x138>)
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <KISS_TO_AX25+0x148>)
 8001008:	4615      	mov	r5, r2
 800100a:	461c      	mov	r4, r3
 800100c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100e:	6028      	str	r0, [r5, #0]
 8001010:	6069      	str	r1, [r5, #4]
 8001012:	60aa      	str	r2, [r5, #8]
 8001014:	60eb      	str	r3, [r5, #12]
 8001016:	cc03      	ldmia	r4!, {r0, r1}
 8001018:	6128      	str	r0, [r5, #16]
 800101a:	6169      	str	r1, [r5, #20]
 800101c:	7823      	ldrb	r3, [r4, #0]
 800101e:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <KISS_TO_AX25+0x138>)
 8001022:	f7ff f8f5 	bl	8000210 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	230a      	movs	r3, #10
 800102c:	4904      	ldr	r1, [pc, #16]	; (8001040 <KISS_TO_AX25+0x138>)
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <KISS_TO_AX25+0x140>)
 8001030:	f004 fca7 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e022      	b.n	8001080 <KISS_TO_AX25+0x178>
 800103a:	bf00      	nop
 800103c:	200000d4 	.word	0x200000d4
 8001040:	20001cd8 	.word	0x20001cd8
 8001044:	08007290 	.word	0x08007290
 8001048:	20002b94 	.word	0x20002b94
 800104c:	200000a0 	.word	0x200000a0
 8001050:	080072b4 	.word	0x080072b4
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	49a5      	ldr	r1, [pc, #660]	; (80012f4 <KISS_TO_AX25+0x3ec>)
 8001060:	48a5      	ldr	r0, [pc, #660]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 8001062:	f005 fbcf 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001066:	48a4      	ldr	r0, [pc, #656]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 8001068:	f7ff f8d2 	bl	8000210 <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	230a      	movs	r3, #10
 8001072:	49a1      	ldr	r1, [pc, #644]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 8001074:	48a1      	ldr	r0, [pc, #644]	; (80012fc <KISS_TO_AX25+0x3f4>)
 8001076:	f004 fc84 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	4b9f      	ldr	r3, [pc, #636]	; (8001300 <KISS_TO_AX25+0x3f8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3310      	adds	r3, #16
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbe3      	blt.n	8001054 <KISS_TO_AX25+0x14c>
	}
	sprintf(uartData, "\n");
 800108c:	4a9a      	ldr	r2, [pc, #616]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 800108e:	4b9d      	ldr	r3, [pc, #628]	; (8001304 <KISS_TO_AX25+0x3fc>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001094:	4898      	ldr	r0, [pc, #608]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 8001096:	f7ff f8bb 	bl	8000210 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	230a      	movs	r3, #10
 80010a0:	4995      	ldr	r1, [pc, #596]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80010a2:	4896      	ldr	r0, [pc, #600]	; (80012fc <KISS_TO_AX25+0x3f4>)
 80010a4:	f004 fc6d 	bl	8005982 <HAL_UART_Transmit>

	//BIT STUFFING NEEDED
	int ax25_len = rxBit_count + FCS_len;
 80010a8:	4b95      	ldr	r3, [pc, #596]	; (8001300 <KISS_TO_AX25+0x3f8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3310      	adds	r3, #16
 80010ae:	607b      	str	r3, [r7, #4]
	int ones_count = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	603b      	str	r3, [r7, #0]
	ones_count = bitstuffing(local_packet->address,address_len,ax25_len, ones_count, &(local_packet->stuffed_address));
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80010ba:	3310      	adds	r3, #16
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80010c4:	3310      	adds	r3, #16
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	2170      	movs	r1, #112	; 0x70
 80010ce:	f000 f97b 	bl	80013c8 <bitstuffing>
 80010d2:	6038      	str	r0, [r7, #0]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_address;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80010da:	3304      	adds	r3, #4
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80010e4:	3310      	adds	r3, #16
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	441a      	add	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80010f0:	3304      	adds	r3, #4
 80010f2:	601a      	str	r2, [r3, #0]
	ax25_len -= address_len;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b70      	subs	r3, #112	; 0x70
 80010f8:	607b      	str	r3, [r7, #4]

	local_packet->control += local_packet->bit_stuffed_zeros;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001100:	3314      	adds	r3, #20
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800110a:	3304      	adds	r3, #4
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	441a      	add	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001116:	3314      	adds	r3, #20
 8001118:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->control,control_len,ax25_len, ones_count, &(local_packet->stuffed_control));
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001120:	3314      	adds	r3, #20
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800112a:	3314      	adds	r3, #20
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	2108      	movs	r1, #8
 8001134:	f000 f948 	bl	80013c8 <bitstuffing>
 8001138:	6038      	str	r0, [r7, #0]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_control;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001140:	3304      	adds	r3, #4
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800114a:	3314      	adds	r3, #20
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	441a      	add	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001156:	3304      	adds	r3, #4
 8001158:	601a      	str	r2, [r3, #0]
	ax25_len -= control_len;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3b08      	subs	r3, #8
 800115e:	607b      	str	r3, [r7, #4]

	local_packet->PID += local_packet->bit_stuffed_zeros;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001166:	3318      	adds	r3, #24
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001170:	3304      	adds	r3, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	441a      	add	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800117c:	3318      	adds	r3, #24
 800117e:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->PID,PID_len,ax25_len, ones_count, &(local_packet->stuffed_PID));
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001186:	3318      	adds	r3, #24
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001190:	3318      	adds	r3, #24
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	2108      	movs	r1, #8
 800119a:	f000 f915 	bl	80013c8 <bitstuffing>
 800119e:	6038      	str	r0, [r7, #0]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_PID;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80011a6:	3304      	adds	r3, #4
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011b0:	3318      	adds	r3, #24
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	441a      	add	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80011bc:	3304      	adds	r3, #4
 80011be:	601a      	str	r2, [r3, #0]
	ax25_len -= PID_len;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b08      	subs	r3, #8
 80011c4:	607b      	str	r3, [r7, #4]

	local_packet->Info += local_packet->bit_stuffed_zeros;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011cc:	331c      	adds	r3, #28
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80011d6:	3304      	adds	r3, #4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	441a      	add	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011e2:	331c      	adds	r3, #28
 80011e4:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->Info,local_packet->Info_Len, ax25_len, ones_count, &(local_packet->stuffed_Info));
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80011ec:	331c      	adds	r3, #28
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011f6:	6819      	ldr	r1, [r3, #0]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80011fe:	331c      	adds	r3, #28
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	f000 f8df 	bl	80013c8 <bitstuffing>
 800120a:	6038      	str	r0, [r7, #0]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_Info;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001212:	3304      	adds	r3, #4
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800121c:	331c      	adds	r3, #28
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	441a      	add	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001228:	3304      	adds	r3, #4
 800122a:	601a      	str	r2, [r3, #0]
	ax25_len -= local_packet->Info_Len;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	607b      	str	r3, [r7, #4]

	local_packet->FCS += local_packet->bit_stuffed_zeros;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001240:	3304      	adds	r3, #4
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800124a:	3304      	adds	r3, #4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	441a      	add	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001256:	3304      	adds	r3, #4
 8001258:	601a      	str	r2, [r3, #0]
	bitstuffing(local_packet->FCS,FCS_len, ax25_len, ones_count, &(local_packet->stuffed_FCS));
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001260:	3304      	adds	r3, #4
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	2110      	movs	r1, #16
 8001272:	f000 f8a9 	bl	80013c8 <bitstuffing>
	local_packet->bit_stuffed_zeros += local_packet->stuffed_FCS;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800127c:	3304      	adds	r3, #4
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	441a      	add	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001290:	3304      	adds	r3, #4
 8001292:	601a      	str	r2, [r3, #0]

	sprintf(uartData, "bit stuffed zeros = %d\n",local_packet->bit_stuffed_zeros);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800129a:	3304      	adds	r3, #4
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	4919      	ldr	r1, [pc, #100]	; (8001308 <KISS_TO_AX25+0x400>)
 80012a2:	4815      	ldr	r0, [pc, #84]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80012a4:	f005 faae 	bl	8006804 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012a8:	4813      	ldr	r0, [pc, #76]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80012aa:	f7fe ffb1 	bl	8000210 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	230a      	movs	r3, #10
 80012b4:	4910      	ldr	r1, [pc, #64]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <KISS_TO_AX25+0x3f4>)
 80012b8:	f004 fb63 	bl	8005982 <HAL_UART_Transmit>

	sprintf(uartData, "\n line Printing AX25 = \n");
 80012bc:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <KISS_TO_AX25+0x404>)
 80012c0:	4615      	mov	r5, r2
 80012c2:	461c      	mov	r4, r3
 80012c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c6:	6028      	str	r0, [r5, #0]
 80012c8:	6069      	str	r1, [r5, #4]
 80012ca:	60aa      	str	r2, [r5, #8]
 80012cc:	60eb      	str	r3, [r5, #12]
 80012ce:	cc03      	ldmia	r4!, {r0, r1}
 80012d0:	6128      	str	r0, [r5, #16]
 80012d2:	6169      	str	r1, [r5, #20]
 80012d4:	7823      	ldrb	r3, [r4, #0]
 80012d6:	762b      	strb	r3, [r5, #24]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80012da:	f7fe ff99 	bl	8000210 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	230a      	movs	r3, #10
 80012e4:	4904      	ldr	r1, [pc, #16]	; (80012f8 <KISS_TO_AX25+0x3f0>)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <KISS_TO_AX25+0x3f4>)
 80012e8:	f004 fb4b 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	e024      	b.n	800133c <KISS_TO_AX25+0x434>
 80012f2:	bf00      	nop
 80012f4:	080072d0 	.word	0x080072d0
 80012f8:	20001cd8 	.word	0x20001cd8
 80012fc:	20002b94 	.word	0x20002b94
 8001300:	200000a0 	.word	0x200000a0
 8001304:	080072d8 	.word	0x080072d8
 8001308:	080072dc 	.word	0x080072dc
 800130c:	080072b4 	.word	0x080072b4
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4413      	add	r3, r2
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	491b      	ldr	r1, [pc, #108]	; (8001388 <KISS_TO_AX25+0x480>)
 800131c:	481b      	ldr	r0, [pc, #108]	; (800138c <KISS_TO_AX25+0x484>)
 800131e:	f005 fa71 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001322:	481a      	ldr	r0, [pc, #104]	; (800138c <KISS_TO_AX25+0x484>)
 8001324:	f7fe ff74 	bl	8000210 <strlen>
 8001328:	4603      	mov	r3, r0
 800132a:	b29a      	uxth	r2, r3
 800132c:	230a      	movs	r3, #10
 800132e:	4917      	ldr	r1, [pc, #92]	; (800138c <KISS_TO_AX25+0x484>)
 8001330:	4817      	ldr	r0, [pc, #92]	; (8001390 <KISS_TO_AX25+0x488>)
 8001332:	f004 fb26 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	3301      	adds	r3, #1
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <KISS_TO_AX25+0x48c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f103 0210 	add.w	r2, r3, #16
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800134a:	3304      	adds	r3, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbdc      	blt.n	8001310 <KISS_TO_AX25+0x408>
	}
	sprintf(uartData, "\n");
 8001356:	4a0d      	ldr	r2, [pc, #52]	; (800138c <KISS_TO_AX25+0x484>)
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <KISS_TO_AX25+0x490>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <KISS_TO_AX25+0x484>)
 8001360:	f7fe ff56 	bl	8000210 <strlen>
 8001364:	4603      	mov	r3, r0
 8001366:	b29a      	uxth	r2, r3
 8001368:	230a      	movs	r3, #10
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <KISS_TO_AX25+0x484>)
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <KISS_TO_AX25+0x488>)
 800136e:	f004 fb08 	bl	8005982 <HAL_UART_Transmit>
	rxBit_count = 0;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <KISS_TO_AX25+0x48c>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
//	Print the ax25 packet
	print_outAX25();
 8001378:	f001 f836 	bl	80023e8 <print_outAX25>
	return true; //valid packet
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001386:	bf00      	nop
 8001388:	080072d0 	.word	0x080072d0
 800138c:	20001cd8 	.word	0x20001cd8
 8001390:	20002b94 	.word	0x20002b94
 8001394:	200000a0 	.word	0x200000a0
 8001398:	080072d8 	.word	0x080072d8

0800139c <bit_stuff>:


void bit_stuff(bool* array,int bits_left){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	memmove(array+2,array+1,bits_left);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	1c98      	adds	r0, r3, #2
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f005 fa06 	bl	80067c2 <memmove>
	*(array+1) = false;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3301      	adds	r3, #1
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <bitstuffing>:

int bitstuffing(bool* packet,int len,int bits_left, int ones_count,int *stuff){
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
	sprintf(uartData, "\nChecking if bit stuffing is needed\n");
 80013d6:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <bitstuffing+0xcc>)
 80013d8:	4a2f      	ldr	r2, [pc, #188]	; (8001498 <bitstuffing+0xd0>)
 80013da:	4614      	mov	r4, r2
 80013dc:	469c      	mov	ip, r3
 80013de:	f104 0e20 	add.w	lr, r4, #32
 80013e2:	4665      	mov	r5, ip
 80013e4:	4626      	mov	r6, r4
 80013e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013e8:	6028      	str	r0, [r5, #0]
 80013ea:	6069      	str	r1, [r5, #4]
 80013ec:	60aa      	str	r2, [r5, #8]
 80013ee:	60eb      	str	r3, [r5, #12]
 80013f0:	3410      	adds	r4, #16
 80013f2:	f10c 0c10 	add.w	ip, ip, #16
 80013f6:	4574      	cmp	r4, lr
 80013f8:	d1f3      	bne.n	80013e2 <bitstuffing+0x1a>
 80013fa:	4663      	mov	r3, ip
 80013fc:	4622      	mov	r2, r4
 80013fe:	6810      	ldr	r0, [r2, #0]
 8001400:	6018      	str	r0, [r3, #0]
 8001402:	7912      	ldrb	r2, [r2, #4]
 8001404:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001406:	4823      	ldr	r0, [pc, #140]	; (8001494 <bitstuffing+0xcc>)
 8001408:	f7fe ff02 	bl	8000210 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	230a      	movs	r3, #10
 8001412:	4920      	ldr	r1, [pc, #128]	; (8001494 <bitstuffing+0xcc>)
 8001414:	4821      	ldr	r0, [pc, #132]	; (800149c <bitstuffing+0xd4>)
 8001416:	f004 fab4 	bl	8005982 <HAL_UART_Transmit>

	int bit_stuff_count = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
	bool *curr_mem = packet;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	617b      	str	r3, [r7, #20]
	int left;

	//Increment through array
	for(int i = 0; i < len+bit_stuff_count; i++){
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	e027      	b.n	8001478 <bitstuffing+0xb0>
		//Check if the current index in array is a one
        if(*(curr_mem+i)){
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01c      	beq.n	800146e <bitstuffing+0xa6>
        	//Inc ones count
        	ones_count++;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	603b      	str	r3, [r7, #0]

        	//If 5 consecutive ones, do bit stuff
            if(ones_count == 5){
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b05      	cmp	r3, #5
 800143e:	d118      	bne.n	8001472 <bitstuffing+0xaa>
        		//Calculate the number of bits left
        		left = (bits_left+bit_stuff_count) - i - 1;
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	441a      	add	r2, r3
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	3b01      	subs	r3, #1
 800144c:	613b      	str	r3, [r7, #16]
                bit_stuff(curr_mem+i,left);
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	4413      	add	r3, r2
 8001454:	6939      	ldr	r1, [r7, #16]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ffa0 	bl	800139c <bit_stuff>

                bit_stuff_count++;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	3301      	adds	r3, #1
 8001460:	61fb      	str	r3, [r7, #28]
                ones_count = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
                i++;
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	3301      	adds	r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	e001      	b.n	8001472 <bitstuffing+0xaa>
            }
        }
        else{
        	ones_count = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < len+bit_stuff_count; i++){
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	3301      	adds	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbd1      	blt.n	8001428 <bitstuffing+0x60>
        }
	}
	*stuff = bit_stuff_count;
 8001484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	601a      	str	r2, [r3, #0]
	return ones_count;
 800148a:	683b      	ldr	r3, [r7, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3724      	adds	r7, #36	; 0x24
 8001490:	46bd      	mov	sp, r7
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001494:	20001cd8 	.word	0x20001cd8
 8001498:	080072f4 	.word	0x080072f4
 800149c:	20002b94 	.word	0x20002b94

080014a0 <crc_calc>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <crc_calc+0xe0>)
 80014ae:	61fb      	str	r3, [r7, #28]
	int out_bit;
	int roll_bit = *crc_ptr_in & 0x0001;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
    int poly = 0x8408;             			//reverse order of 0x1021
 80014ba:	f248 4308 	movw	r3, #33800	; 0x8408
 80014be:	617b      	str	r3, [r7, #20]

    out_bit = in_bit ^ roll_bit; 		//xor lsb of current crc with input bit
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4053      	eors	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
	*crc_ptr_in >>= 1;               	//right shift by 1
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	105a      	asrs	r2, r3, #1
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0x0000;
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d102      	bne.n	80014de <crc_calc+0x3e>
 80014d8:	f248 4308 	movw	r3, #33800	; 0x8408
 80014dc:	e000      	b.n	80014e0 <crc_calc+0x40>
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
	*crc_ptr_in ^= poly;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	405a      	eors	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	601a      	str	r2, [r3, #0]

    //End condition
//	if(*crc_count_ptr_in >= rxBit_count){
	if(*crc_count_ptr_in >= rxBit_count){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <crc_calc+0xe4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	db38      	blt.n	8001576 <crc_calc+0xd6>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 800150c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	6013      	str	r3, [r2, #0]
  	    sprintf(uartData, "Convert CRC to FCS (hex) = %x\n",local_packet->crc);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800151a:	3308      	adds	r3, #8
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	4919      	ldr	r1, [pc, #100]	; (8001588 <crc_calc+0xe8>)
 8001522:	481a      	ldr	r0, [pc, #104]	; (800158c <crc_calc+0xec>)
 8001524:	f005 f96e 	bl	8006804 <siprintf>
    	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001528:	4818      	ldr	r0, [pc, #96]	; (800158c <crc_calc+0xec>)
 800152a:	f7fe fe71 	bl	8000210 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	230a      	movs	r3, #10
 8001534:	4915      	ldr	r1, [pc, #84]	; (800158c <crc_calc+0xec>)
 8001536:	4816      	ldr	r0, [pc, #88]	; (8001590 <crc_calc+0xf0>)
 8001538:	f004 fa23 	bl	8005982 <HAL_UART_Transmit>
    	if(local_packet->check_crc == false){
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001542:	3310      	adds	r3, #16
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	f083 0301 	eor.w	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d012      	beq.n	8001576 <crc_calc+0xd6>
    		//REMEBER TO CHECK THIS CRC conversion FOR ACCURACY LATER
    		conv_HEX_to_BIN(*crc_ptr_in,local_packet->FCS,false);
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b298      	uxth	r0, r3
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800155c:	3304      	adds	r3, #4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff f82c 	bl	80005c0 <conv_HEX_to_BIN>
    		local_packet->crc = 0xFFFF;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800156e:	3308      	adds	r3, #8
 8001570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001574:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 8001576:	bf00      	nop
 8001578:	3720      	adds	r7, #32
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200000d4 	.word	0x200000d4
 8001584:	200000a0 	.word	0x200000a0
 8001588:	0800731c 	.word	0x0800731c
 800158c:	20001cd8 	.word	0x20001cd8
 8001590:	20002b94 	.word	0x20002b94

08001594 <crc_generate>:

void crc_generate(){
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800159a:	4b73      	ldr	r3, [pc, #460]	; (8001768 <crc_generate+0x1d4>)
 800159c:	60bb      	str	r3, [r7, #8]
	uint16_t * crc_ptr = &(local_packet->crc);
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80015a4:	3308      	adds	r3, #8
 80015a6:	607b      	str	r3, [r7, #4]
	int * crc_count_ptr = &(local_packet->crc_count);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80015ae:	330c      	adds	r3, #12
 80015b0:	603b      	str	r3, [r7, #0]
	bool *curr_mem;

	*crc_ptr = 0xFFFF;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015b8:	801a      	strh	r2, [r3, #0]
	*crc_count_ptr = 0;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	sprintf(uartData, "Performing CRC generation\n");
 80015c0:	4a6a      	ldr	r2, [pc, #424]	; (800176c <crc_generate+0x1d8>)
 80015c2:	4b6b      	ldr	r3, [pc, #428]	; (8001770 <crc_generate+0x1dc>)
 80015c4:	4615      	mov	r5, r2
 80015c6:	461c      	mov	r4, r3
 80015c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ca:	6028      	str	r0, [r5, #0]
 80015cc:	6069      	str	r1, [r5, #4]
 80015ce:	60aa      	str	r2, [r5, #8]
 80015d0:	60eb      	str	r3, [r5, #12]
 80015d2:	cc03      	ldmia	r4!, {r0, r1}
 80015d4:	6128      	str	r0, [r5, #16]
 80015d6:	6169      	str	r1, [r5, #20]
 80015d8:	8823      	ldrh	r3, [r4, #0]
 80015da:	78a2      	ldrb	r2, [r4, #2]
 80015dc:	832b      	strh	r3, [r5, #24]
 80015de:	4613      	mov	r3, r2
 80015e0:	76ab      	strb	r3, [r5, #26]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80015e2:	4862      	ldr	r0, [pc, #392]	; (800176c <crc_generate+0x1d8>)
 80015e4:	f7fe fe14 	bl	8000210 <strlen>
 80015e8:	4603      	mov	r3, r0
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	230a      	movs	r3, #10
 80015ee:	495f      	ldr	r1, [pc, #380]	; (800176c <crc_generate+0x1d8>)
 80015f0:	4860      	ldr	r0, [pc, #384]	; (8001774 <crc_generate+0x1e0>)
 80015f2:	f004 f9c6 	bl	8005982 <HAL_UART_Transmit>

	//Calculate CRC for address
	curr_mem = (local_packet->address) + address_len - 8;//start at MS Byte(LSB)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80015fc:	3310      	adds	r3, #16
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3368      	adds	r3, #104	; 0x68
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
 8001608:	e017      	b.n	800163a <crc_generate+0xa6>
		for(int j = 0;j<8;j++){
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	e00b      	b.n	8001628 <crc_generate+0x94>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001614:	4413      	add	r3, r2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff3f 	bl	80014a0 <crc_calc>
		for(int j = 0;j<8;j++){
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3301      	adds	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	2b07      	cmp	r3, #7
 800162c:	ddf0      	ble.n	8001610 <crc_generate+0x7c>
		}
		curr_mem -= 8;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	3b08      	subs	r3, #8
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(address_len/8);i++){
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	3301      	adds	r3, #1
 8001638:	623b      	str	r3, [r7, #32]
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2b0d      	cmp	r3, #13
 800163e:	dde4      	ble.n	800160a <crc_generate+0x76>
	}

	//Calculate CRC for control
	curr_mem = local_packet->control;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001646:	3314      	adds	r3, #20
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < control_len; i++){
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	e00f      	b.n	8001672 <crc_generate+0xde>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001658:	3314      	adds	r3, #20
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff1a 	bl	80014a0 <crc_calc>
	for(int i = 0; i < control_len; i++){
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	3301      	adds	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b07      	cmp	r3, #7
 8001676:	ddec      	ble.n	8001652 <crc_generate+0xbe>
	}

//	//Calculate CRC for PID (if packet is of type i-frame)
	curr_mem = local_packet->PID;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800167e:	3318      	adds	r3, #24
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < PID_len; i++){
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e00f      	b.n	80016aa <crc_generate+0x116>
		//Call crc_calc per bit
		crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr);
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001690:	3318      	adds	r3, #24
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fefe 	bl	80014a0 <crc_calc>
	for(int i = 0; i < PID_len; i++){
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2b07      	cmp	r3, #7
 80016ae:	ddec      	ble.n	800168a <crc_generate+0xf6>
	}

	//Calculate CRC for Info field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 8;//start at MS Byte(LSB)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016b6:	331c      	adds	r3, #28
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3b08      	subs	r3, #8
 80016c4:	4413      	add	r3, r2
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8);i++){
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	e017      	b.n	80016fe <crc_generate+0x16a>
		for(int j = 0;j<8;j++){
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e00b      	b.n	80016ec <crc_generate+0x158>
			crc_calc((int) *(curr_mem+j),crc_ptr,crc_count_ptr);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	4413      	add	r3, r2
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fedd 	bl	80014a0 <crc_calc>
		for(int j = 0;j<8;j++){
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3301      	adds	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	ddf0      	ble.n	80016d4 <crc_generate+0x140>
		}
		curr_mem -= 8;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	3b08      	subs	r3, #8
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<(int)(local_packet->Info_Len/8);i++){
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	3301      	adds	r3, #1
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	da00      	bge.n	800170c <crc_generate+0x178>
 800170a:	3307      	adds	r3, #7
 800170c:	10db      	asrs	r3, r3, #3
 800170e:	461a      	mov	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4293      	cmp	r3, r2
 8001714:	dbdb      	blt.n	80016ce <crc_generate+0x13a>
	}

	sprintf(uartData, "rx_bitcnt = %d\n", rxBit_count);
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <crc_generate+0x1e4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	4917      	ldr	r1, [pc, #92]	; (800177c <crc_generate+0x1e8>)
 800171e:	4813      	ldr	r0, [pc, #76]	; (800176c <crc_generate+0x1d8>)
 8001720:	f005 f870 	bl	8006804 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001724:	4811      	ldr	r0, [pc, #68]	; (800176c <crc_generate+0x1d8>)
 8001726:	f7fe fd73 	bl	8000210 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29a      	uxth	r2, r3
 800172e:	230a      	movs	r3, #10
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <crc_generate+0x1d8>)
 8001732:	4810      	ldr	r0, [pc, #64]	; (8001774 <crc_generate+0x1e0>)
 8001734:	f004 f925 	bl	8005982 <HAL_UART_Transmit>

	sprintf(uartData, "bitcnt_ptr = %d\n", *crc_count_ptr);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4910      	ldr	r1, [pc, #64]	; (8001780 <crc_generate+0x1ec>)
 8001740:	480a      	ldr	r0, [pc, #40]	; (800176c <crc_generate+0x1d8>)
 8001742:	f005 f85f 	bl	8006804 <siprintf>
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <crc_generate+0x1d8>)
 8001748:	f7fe fd62 	bl	8000210 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	230a      	movs	r3, #10
 8001752:	4906      	ldr	r1, [pc, #24]	; (800176c <crc_generate+0x1d8>)
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <crc_generate+0x1e0>)
 8001756:	f004 f914 	bl	8005982 <HAL_UART_Transmit>
	*crc_count_ptr = 0;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	200000d4 	.word	0x200000d4
 800176c:	20001cd8 	.word	0x20001cd8
 8001770:	0800733c 	.word	0x0800733c
 8001774:	20002b94 	.word	0x20002b94
 8001778:	200000a0 	.word	0x200000a0
 800177c:	08007358 	.word	0x08007358
 8001780:	08007368 	.word	0x08007368

08001784 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram(bool modeStart) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	initOUTData();
 800178e:	f000 f999 	bl	8001ac4 <initOUTData>

	//Set hardware properly
	mode = modeStart;
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <initProgram+0x58>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	7013      	strb	r3, [r2, #0]
	toggleMode();
 8001798:	f000 f826 	bl	80017e8 <toggleMode>
	toggleMode();
 800179c:	f000 f824 	bl	80017e8 <toggleMode>

	if (mode) {
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <initProgram+0x58>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d009      	beq.n	80017bc <initProgram+0x38>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX;
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <initProgram+0x5c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2264      	movs	r2, #100	; 0x64
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <initProgram+0x60>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f44f 724f 	mov.w	r2, #828	; 0x33c
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ba:	e008      	b.n	80017ce <initProgram+0x4a>
	} else {
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <initProgram+0x5c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80017c4:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <initProgram+0x60>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2268      	movs	r2, #104	; 0x68
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	init_AX25();
 80017ce:	f7fe ffb5 	bl	800073c <init_AX25>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20002b3c 	.word	0x20002b3c
 80017e0:	20002b54 	.word	0x20002b54
 80017e4:	2000289c 	.word	0x2000289c

080017e8 <toggleMode>:



void toggleMode() {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	//Disable HW interrupt
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80017ec:	2006      	movs	r0, #6
 80017ee:	f002 f90e 	bl	8003a0e <HAL_NVIC_DisableIRQ>

	//Toggle mode
	mode = !mode;
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <toggleMode+0xa8>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f083 0301 	eor.w	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <toggleMode+0xa8>)
 800180e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, mode);
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <toggleMode+0xa8>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	2120      	movs	r1, #32
 8001818:	481e      	ldr	r0, [pc, #120]	; (8001894 <toggleMode+0xac>)
 800181a:	f002 fecf 	bl	80045bc <HAL_GPIO_WritePin>
	midbit = false;
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <toggleMode+0xb0>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]

	//Stop timer and reset count
	HAL_TIM_Base_Stop(&htim3);
 8001824:	481d      	ldr	r0, [pc, #116]	; (800189c <toggleMode+0xb4>)
 8001826:	f003 fc5e 	bl	80050e6 <HAL_TIM_Base_Stop>
	htim3.Instance->CNT = 0;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <toggleMode+0xb4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Stop(&htim4);
 8001832:	481b      	ldr	r0, [pc, #108]	; (80018a0 <toggleMode+0xb8>)
 8001834:	f003 fc57 	bl	80050e6 <HAL_TIM_Base_Stop>
	htim4.Instance->CNT = 0;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <toggleMode+0xb8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24

	if (mode) {
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <toggleMode+0xa8>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <toggleMode+0x6c>
		//Set Timer periods
		//htim2.Instance->ARR = TIM2_AUTORELOAD_TX; This is no longer used
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <toggleMode+0xb4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c
 8001852:	e015      	b.n	8001880 <toggleMode+0x98>

	} else {
		//Set Timer Periods
		htim2.Instance->ARR = TIM2_AUTORELOAD_RX;
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <toggleMode+0xbc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f242 7210 	movw	r2, #10000	; 0x2710
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_RX;
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <toggleMode+0xb4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2268      	movs	r2, #104	; 0x68
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_Base_Start(&htim4);
 8001866:	480e      	ldr	r0, [pc, #56]	; (80018a0 <toggleMode+0xb8>)
 8001868:	f003 fc19 	bl	800509e <HAL_TIM_Base_Start>

		//Enable tim3 interrupt
		HAL_TIM_Base_Start_IT(&htim3);
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <toggleMode+0xb4>)
 800186e:	f003 fc65 	bl	800513c <HAL_TIM_Base_Start_IT>

		//Stop DAC
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001872:	2100      	movs	r1, #0
 8001874:	480c      	ldr	r0, [pc, #48]	; (80018a8 <toggleMode+0xc0>)
 8001876:	f002 f906 	bl	8003a86 <HAL_DAC_Stop_DMA>

		//Enable HW interrupt
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800187a:	2006      	movs	r0, #6
 800187c:	f002 f8b9 	bl	80039f2 <HAL_NVIC_EnableIRQ>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001886:	4803      	ldr	r0, [pc, #12]	; (8001894 <toggleMode+0xac>)
 8001888:	f002 fe98 	bl	80045bc <HAL_GPIO_WritePin>
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20002b3c 	.word	0x20002b3c
 8001894:	40020000 	.word	0x40020000
 8001898:	200000a4 	.word	0x200000a4
 800189c:	2000289c 	.word	0x2000289c
 80018a0:	20002dd4 	.word	0x20002dd4
 80018a4:	20002b54 	.word	0x20002b54
 80018a8:	20002b40 	.word	0x20002b40

080018ac <loadPeriodBuffer>:
bool bufffull = false;
void loadPeriodBuffer(int timerCnt) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	if(canWrite){
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <loadPeriodBuffer+0x64>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d01d      	beq.n	80018f8 <loadPeriodBuffer+0x4c>
		periodBuffer[periodSaveCount] = timerCnt;
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <loadPeriodBuffer+0x68>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <loadPeriodBuffer+0x6c>)
 80018c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		periodSaveCount++;
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <loadPeriodBuffer+0x68>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <loadPeriodBuffer+0x68>)
 80018d4:	801a      	strh	r2, [r3, #0]
		if (periodSaveCount >= RX_BUFFERSIZE) {
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <loadPeriodBuffer+0x68>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	2b7f      	cmp	r3, #127	; 0x7f
 80018dc:	d902      	bls.n	80018e4 <loadPeriodBuffer+0x38>
			periodSaveCount = 0;
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <loadPeriodBuffer+0x68>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	801a      	strh	r2, [r3, #0]
		}

		//Buffer is full
		if(periodSaveCount == periodReadCount){
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <loadPeriodBuffer+0x68>)
 80018e6:	881a      	ldrh	r2, [r3, #0]
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <loadPeriodBuffer+0x70>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d106      	bne.n	80018fe <loadPeriodBuffer+0x52>
			canWrite = false;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <loadPeriodBuffer+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	e002      	b.n	80018fe <loadPeriodBuffer+0x52>
		}
	} else {
		bufffull = true;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <loadPeriodBuffer+0x74>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <loadPeriodBuffer+0x78>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20000010 	.word	0x20000010
 8001914:	200000ba 	.word	0x200000ba
 8001918:	2000293c 	.word	0x2000293c
 800191c:	200000bc 	.word	0x200000bc
 8001920:	200000a6 	.word	0x200000a6
 8001924:	200000b8 	.word	0x200000b8

08001928 <Tim3IT>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void Tim3IT() {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	if (mode) {
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <Tim3IT+0x54>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <Tim3IT+0x14>
		midbit = false;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <Tim3IT+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]

		else {
			signal_detect_decay--;
		}
	}
}
 800193a:	e01c      	b.n	8001976 <Tim3IT+0x4e>
		if(signal_detect_decay <= 0){
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <Tim3IT+0x5c>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d112      	bne.n	800196a <Tim3IT+0x42>
			if(signal_valid){
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <Tim3IT+0x60>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00a      	beq.n	8001962 <Tim3IT+0x3a>
				loadPeriodBuffer(-1);
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f7ff ffac 	bl	80018ac <loadPeriodBuffer>
				HAL_TIM_Base_Stop(&htim4);
 8001954:	480d      	ldr	r0, [pc, #52]	; (800198c <Tim3IT+0x64>)
 8001956:	f003 fbc6 	bl	80050e6 <HAL_TIM_Base_Stop>
				htim4.Instance->CNT = 0;
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <Tim3IT+0x64>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
			signal_valid = false;
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <Tim3IT+0x60>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
}
 8001968:	e005      	b.n	8001976 <Tim3IT+0x4e>
			signal_detect_decay--;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <Tim3IT+0x5c>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	3b01      	subs	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <Tim3IT+0x5c>)
 8001974:	801a      	strh	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20002b3c 	.word	0x20002b3c
 8001980:	200000a4 	.word	0x200000a4
 8001984:	200000be 	.word	0x200000be
 8001988:	200000c0 	.word	0x200000c0
 800198c:	20002dd4 	.word	0x20002dd4

08001990 <FreqCounterPinEXTI>:
int edges = 0;
int gotVal = 0;
int last_carrier_tone = 0;
int carrier_tone = 0;

void FreqCounterPinEXTI() {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
	//Measure time since last measurement
	gotVal = htim2.Instance->CNT;
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <FreqCounterPinEXTI+0xc0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	461a      	mov	r2, r3
 800199e:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <FreqCounterPinEXTI+0xc4>)
 80019a0:	601a      	str	r2, [r3, #0]
	int freq = PCONVERT / (gotVal);
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <FreqCounterPinEXTI+0xc4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a2c      	ldr	r2, [pc, #176]	; (8001a58 <FreqCounterPinEXTI+0xc8>)
 80019a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80019ac:	607b      	str	r3, [r7, #4]
	loadPeriodBuffer(gotVal);
 80019ae:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <FreqCounterPinEXTI+0xc4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff7a 	bl	80018ac <loadPeriodBuffer>

	last_carrier_tone = carrier_tone;
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <FreqCounterPinEXTI+0xcc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <FreqCounterPinEXTI+0xd0>)
 80019be:	6013      	str	r3, [r2, #0]

	//2200Hz detected
	if ( ((HIGHFREQ - FREQDEV) < freq) && (freq < (HIGHFREQ + FREQDEV)) ){
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f240 726c 	movw	r2, #1900	; 0x76c
 80019c6:	4293      	cmp	r3, r2
 80019c8:	dd09      	ble.n	80019de <FreqCounterPinEXTI+0x4e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80019d0:	4293      	cmp	r3, r2
 80019d2:	dc04      	bgt.n	80019de <FreqCounterPinEXTI+0x4e>
		carrier_tone = HIGHFREQ;
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <FreqCounterPinEXTI+0xcc>)
 80019d6:	f640 0298 	movw	r2, #2200	; 0x898
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e011      	b.n	8001a02 <FreqCounterPinEXTI+0x72>
	}
	//1200Hz detected
	else if ( ((LOWFREQ - FREQDEV) < freq) && (freq < (LOWFREQ + FREQDEV)) ){
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80019e4:	dd09      	ble.n	80019fa <FreqCounterPinEXTI+0x6a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f240 52db 	movw	r2, #1499	; 0x5db
 80019ec:	4293      	cmp	r3, r2
 80019ee:	dc04      	bgt.n	80019fa <FreqCounterPinEXTI+0x6a>
		carrier_tone = LOWFREQ;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <FreqCounterPinEXTI+0xcc>)
 80019f2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e003      	b.n	8001a02 <FreqCounterPinEXTI+0x72>
	}
	//Invalid freq
	else{
		carrier_tone = -1;
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <FreqCounterPinEXTI+0xcc>)
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	601a      	str	r2, [r3, #0]
//		sprintf(uartData, "bad frequency detected, frequency was %d\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}

	if(carrier_tone!=last_carrier_tone || carrier_tone == -1){
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <FreqCounterPinEXTI+0xcc>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <FreqCounterPinEXTI+0xd0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d104      	bne.n	8001a18 <FreqCounterPinEXTI+0x88>
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <FreqCounterPinEXTI+0xcc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a16:	d107      	bne.n	8001a28 <FreqCounterPinEXTI+0x98>
		edges = 0;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <FreqCounterPinEXTI+0xd4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
		htim4.Instance->CNT = 0;
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <FreqCounterPinEXTI+0xd8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
 8001a26:	e004      	b.n	8001a32 <FreqCounterPinEXTI+0xa2>
	} else {
		edges++;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <FreqCounterPinEXTI+0xd4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <FreqCounterPinEXTI+0xd4>)
 8001a30:	6013      	str	r3, [r2, #0]
	}

	signal_valid = true;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <FreqCounterPinEXTI+0xdc>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
	signal_detect_decay = DECAY_TIME;
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <FreqCounterPinEXTI+0xe0>)
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	801a      	strh	r2, [r3, #0]
	htim2.Instance->CNT = 0;
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <FreqCounterPinEXTI+0xc0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20002b54 	.word	0x20002b54
 8001a54:	200000ac 	.word	0x200000ac
 8001a58:	00989680 	.word	0x00989680
 8001a5c:	200000b4 	.word	0x200000b4
 8001a60:	200000b0 	.word	0x200000b0
 8001a64:	200000a8 	.word	0x200000a8
 8001a68:	20002dd4 	.word	0x20002dd4
 8001a6c:	200000c0 	.word	0x200000c0
 8001a70:	200000be 	.word	0x200000be

08001a74 <generateBitstream>:
	}

	HAL_TIM_Base_Stop(&htim3);
	return wave_start;
}
void generateBitstream() {
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
	bitStream[0] = 1;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <generateBitstream+0x4c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
	bitStream[1] = 1;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <generateBitstream+0x4c>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	705a      	strb	r2, [r3, #1]
	bitStream[2] = 1;
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <generateBitstream+0x4c>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	709a      	strb	r2, [r3, #2]
	bitStream[3] = 0;
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <generateBitstream+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	70da      	strb	r2, [r3, #3]
	bitStream[4] = 0;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <generateBitstream+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	711a      	strb	r2, [r3, #4]
	bitStream[5] = 0;
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <generateBitstream+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	715a      	strb	r2, [r3, #5]
	bitStream[6] = 1;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <generateBitstream+0x4c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	719a      	strb	r2, [r3, #6]
	bitStream[7] = 0;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <generateBitstream+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	71da      	strb	r2, [r3, #7]
	bitStream[8] = 1;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <generateBitstream+0x4c>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	721a      	strb	r2, [r3, #8]
	bitStream[9] = 0;
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <generateBitstream+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	725a      	strb	r2, [r3, #9]

}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20002890 	.word	0x20002890

08001ac4 <initOUTData>:
void initOUTData() {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	//edit_sineval(lowFrequency, 2 * LOWF_SAMP, 2, +0.995);
	//edit_sineval(highFrequency, 2 * HIGHF_SAMP, 2, +0.99);
	generateBitstream();
 8001ac8:	f7ff ffd4 	bl	8001a74 <generateBitstream>
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <pertobit>:
uint16_t	signal_detect_decay = 0;			//Pseudo timer to detect if value is valid
bool		signal_valid = false;					//Determines if frequency being read is a valid bit
uint16_t trackBit = 0;
uint16_t bitSaveCount = 0;

int pertobit(uint32_t inputPeriod) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / inputPeriod;
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <pertobit+0x88>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	60fb      	str	r3, [r7, #12]

//	sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

	//return freq;
	if ((HIGHFREQ - FREQDEV < freq) && (freq < HIGHFREQ + FREQDEV)){
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f240 726c 	movw	r2, #1900	; 0x76c
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	dd15      	ble.n	8001b18 <pertobit+0x48>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001af2:	4293      	cmp	r3, r2
 8001af4:	dc10      	bgt.n	8001b18 <pertobit+0x48>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4918      	ldr	r1, [pc, #96]	; (8001b5c <pertobit+0x8c>)
 8001afa:	4819      	ldr	r0, [pc, #100]	; (8001b60 <pertobit+0x90>)
 8001afc:	f004 fe82 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b00:	4817      	ldr	r0, [pc, #92]	; (8001b60 <pertobit+0x90>)
 8001b02:	f7fe fb85 	bl	8000210 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	4914      	ldr	r1, [pc, #80]	; (8001b60 <pertobit+0x90>)
 8001b0e:	4815      	ldr	r0, [pc, #84]	; (8001b64 <pertobit+0x94>)
 8001b10:	f003 ff37 	bl	8005982 <HAL_UART_Transmit>
		return 1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e01b      	b.n	8001b50 <pertobit+0x80>
	}
	else if ((LOWFREQ - FREQDEV < freq) && (freq < LOWFREQ + FREQDEV)){
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001b1e:	dd15      	ble.n	8001b4c <pertobit+0x7c>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f240 52db 	movw	r2, #1499	; 0x5db
 8001b26:	4293      	cmp	r3, r2
 8001b28:	dc10      	bgt.n	8001b4c <pertobit+0x7c>
		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	490b      	ldr	r1, [pc, #44]	; (8001b5c <pertobit+0x8c>)
 8001b2e:	480c      	ldr	r0, [pc, #48]	; (8001b60 <pertobit+0x90>)
 8001b30:	f004 fe68 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001b34:	480a      	ldr	r0, [pc, #40]	; (8001b60 <pertobit+0x90>)
 8001b36:	f7fe fb6b 	bl	8000210 <strlen>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	230a      	movs	r3, #10
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <pertobit+0x90>)
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <pertobit+0x94>)
 8001b44:	f003 ff1d 	bl	8005982 <HAL_UART_Transmit>
		return 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e001      	b.n	8001b50 <pertobit+0x80>
	}
	else
//		sprintf(uartData, "Recieved frequency = %d\r\n",freq);
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		return -1;
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	00989680 	.word	0x00989680
 8001b5c:	080073d4 	.word	0x080073d4
 8001b60:	20001cd8 	.word	0x20001cd8
 8001b64:	20002b94 	.word	0x20002b94

08001b68 <loadBit>:
int loadBit(){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
	int startbit;
	int currbit = -1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	617b      	str	r3, [r7, #20]
	int loopCount = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
	int checkCount;
	bool goodbit = false;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	72fb      	strb	r3, [r7, #11]

	startbit = pertobit(periodBuffer[trackBit]);
 8001b7c:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <loadBit+0xdc>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <loadBit+0xe0>)
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ffa1 	bl	8001ad0 <pertobit>
 8001b8e:	6078      	str	r0, [r7, #4]
//	sprintf(uartData, "startbit = %d\n",startbit);
//	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	//Increment trackBit
	trackBit++;
 8001b90:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <loadBit+0xdc>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <loadBit+0xdc>)
 8001b9a:	801a      	strh	r2, [r3, #0]
	if (trackBit >= RX_BUFFERSIZE)
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <loadBit+0xdc>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ba2:	d902      	bls.n	8001baa <loadBit+0x42>
		trackBit = 0;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <loadBit+0xdc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	801a      	strh	r2, [r3, #0]

	if(startbit==1){
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d102      	bne.n	8001bb6 <loadBit+0x4e>
		checkCount = 3;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e02f      	b.n	8001c16 <loadBit+0xae>
	}
	else if(startbit==0){
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <loadBit+0x5a>
		checkCount = 1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	e029      	b.n	8001c16 <loadBit+0xae>
	}
	else {
		checkCount = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
	}

	//Valiate startbit value
	while(loopCount<checkCount){
 8001bc6:	e026      	b.n	8001c16 <loadBit+0xae>
		currbit = pertobit(periodBuffer[trackBit]);
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <loadBit+0xdc>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <loadBit+0xe0>)
 8001bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff7b 	bl	8001ad0 <pertobit>
 8001bda:	6178      	str	r0, [r7, #20]

		//Good bit
		if(startbit==currbit){
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d10c      	bne.n	8001bfe <loadBit+0x96>
			goodbit = true;
 8001be4:	2301      	movs	r3, #1
 8001be6:	72fb      	strb	r3, [r7, #11]
			goodbit = false;
			break;
		}

		//Increment trackBit
		trackBit++;
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <loadBit+0xdc>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <loadBit+0xdc>)
 8001bf2:	801a      	strh	r2, [r3, #0]
		if (trackBit >= RX_BUFFERSIZE)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <loadBit+0xdc>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	2b7f      	cmp	r3, #127	; 0x7f
 8001bfa:	d909      	bls.n	8001c10 <loadBit+0xa8>
 8001bfc:	e005      	b.n	8001c0a <loadBit+0xa2>
			currbit = -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	617b      	str	r3, [r7, #20]
			goodbit = false;
 8001c04:	2300      	movs	r3, #0
 8001c06:	72fb      	strb	r3, [r7, #11]
			break;
 8001c08:	e009      	b.n	8001c1e <loadBit+0xb6>
			trackBit = 0;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <loadBit+0xdc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	801a      	strh	r2, [r3, #0]
		loopCount++;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	3301      	adds	r3, #1
 8001c14:	613b      	str	r3, [r7, #16]
	while(loopCount<checkCount){
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbd4      	blt.n	8001bc8 <loadBit+0x60>
	}

	//Increment bitSaveCount
	bitSaveCount++;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <loadBit+0xe4>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <loadBit+0xe4>)
 8001c28:	801a      	strh	r2, [r3, #0]
	if (bitSaveCount >= RX_BUFFERSIZE)
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <loadBit+0xe4>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c30:	d902      	bls.n	8001c38 <loadBit+0xd0>
		bitSaveCount = 0;
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <loadBit+0xe4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	801a      	strh	r2, [r3, #0]

	return currbit;
 8001c38:	697b      	ldr	r3, [r7, #20]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200000c2 	.word	0x200000c2
 8001c48:	2000293c 	.word	0x2000293c
 8001c4c:	200000c4 	.word	0x200000c4

08001c50 <loadOctet>:
int loadOctet(bool* bufferptr) {
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	int bit;
	bool myPtr[8];
	bool isFlag = true;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < 8; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	e043      	b.n	8001cea <loadOctet+0x9a>
		bit = loadBit();
 8001c62:	f7ff ff81 	bl	8001b68 <loadBit>
 8001c66:	6138      	str	r0, [r7, #16]

		sprintf(uartData, "bit[%d] = %d \n",i,bit);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4955      	ldr	r1, [pc, #340]	; (8001dc4 <loadOctet+0x174>)
 8001c6e:	4856      	ldr	r0, [pc, #344]	; (8001dc8 <loadOctet+0x178>)
 8001c70:	f004 fdc8 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c74:	4854      	ldr	r0, [pc, #336]	; (8001dc8 <loadOctet+0x178>)
 8001c76:	f7fe facb 	bl	8000210 <strlen>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	230a      	movs	r3, #10
 8001c80:	4951      	ldr	r1, [pc, #324]	; (8001dc8 <loadOctet+0x178>)
 8001c82:	4852      	ldr	r0, [pc, #328]	; (8001dcc <loadOctet+0x17c>)
 8001c84:	f003 fe7d 	bl	8005982 <HAL_UART_Transmit>

        if(bit < 0){
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	da11      	bge.n	8001cb2 <loadOctet+0x62>
    		sprintf(uartData, "bit %d was bad\n",i);
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	494f      	ldr	r1, [pc, #316]	; (8001dd0 <loadOctet+0x180>)
 8001c92:	484d      	ldr	r0, [pc, #308]	; (8001dc8 <loadOctet+0x178>)
 8001c94:	f004 fdb6 	bl	8006804 <siprintf>
    		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001c98:	484b      	ldr	r0, [pc, #300]	; (8001dc8 <loadOctet+0x178>)
 8001c9a:	f7fe fab9 	bl	8000210 <strlen>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	230a      	movs	r3, #10
 8001ca4:	4948      	ldr	r1, [pc, #288]	; (8001dc8 <loadOctet+0x178>)
 8001ca6:	4849      	ldr	r0, [pc, #292]	; (8001dcc <loadOctet+0x17c>)
 8001ca8:	f003 fe6b 	bl	8005982 <HAL_UART_Transmit>
        	return -1;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	e083      	b.n	8001dba <loadOctet+0x16a>
        }
		myPtr[i] = bit;
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2d9      	uxtb	r1, r3
 8001cbe:	f107 0208 	add.w	r2, r7, #8
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	460a      	mov	r2, r1
 8001cc8:	701a      	strb	r2, [r3, #0]
        if(myPtr[i] != AX25TBYTE[i]){
 8001cca:	f107 0208 	add.w	r2, r7, #8
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	493f      	ldr	r1, [pc, #252]	; (8001dd4 <loadOctet+0x184>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	440b      	add	r3, r1
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <loadOctet+0x94>
        	isFlag = false;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < 8; i++) {
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b07      	cmp	r3, #7
 8001cee:	ddb8      	ble.n	8001c62 <loadOctet+0x12>
        }
    }
	//If this is not a flag, copy the values into the buffer pointer
	if(!isFlag){
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d05d      	beq.n	8001db8 <loadOctet+0x168>
		sprintf(uartData, "Printing octet [MSB:LSB]= ");
 8001cfc:	4a32      	ldr	r2, [pc, #200]	; (8001dc8 <loadOctet+0x178>)
 8001cfe:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <loadOctet+0x188>)
 8001d00:	4615      	mov	r5, r2
 8001d02:	461c      	mov	r4, r3
 8001d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d06:	6028      	str	r0, [r5, #0]
 8001d08:	6069      	str	r1, [r5, #4]
 8001d0a:	60aa      	str	r2, [r5, #8]
 8001d0c:	60eb      	str	r3, [r5, #12]
 8001d0e:	cc03      	ldmia	r4!, {r0, r1}
 8001d10:	6128      	str	r0, [r5, #16]
 8001d12:	6169      	str	r1, [r5, #20]
 8001d14:	8823      	ldrh	r3, [r4, #0]
 8001d16:	78a2      	ldrb	r2, [r4, #2]
 8001d18:	832b      	strh	r3, [r5, #24]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	76ab      	strb	r3, [r5, #26]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001d1e:	482a      	ldr	r0, [pc, #168]	; (8001dc8 <loadOctet+0x178>)
 8001d20:	f7fe fa76 	bl	8000210 <strlen>
 8001d24:	4603      	mov	r3, r0
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	230a      	movs	r3, #10
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <loadOctet+0x178>)
 8001d2c:	4827      	ldr	r0, [pc, #156]	; (8001dcc <loadOctet+0x17c>)
 8001d2e:	f003 fe28 	bl	8005982 <HAL_UART_Transmit>

		for(int i = 0;i<8;i++){
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e02c      	b.n	8001d92 <loadOctet+0x142>
			bufferptr[7-i] = (myPtr[7-i]==1)?true:false;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	f107 0220 	add.w	r2, r7, #32
 8001d42:	4413      	add	r3, r2
 8001d44:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	4619      	mov	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	440b      	add	r3, r1
 8001d54:	701a      	strb	r2, [r3, #0]
			rxBit_count++;
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <loadOctet+0x18c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <loadOctet+0x18c>)
 8001d5e:	6013      	str	r3, [r2, #0]
			sprintf(uartData, " %d ",bufferptr[7-i]);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	461a      	mov	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	491b      	ldr	r1, [pc, #108]	; (8001de0 <loadOctet+0x190>)
 8001d72:	4815      	ldr	r0, [pc, #84]	; (8001dc8 <loadOctet+0x178>)
 8001d74:	f004 fd46 	bl	8006804 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001d78:	4813      	ldr	r0, [pc, #76]	; (8001dc8 <loadOctet+0x178>)
 8001d7a:	f7fe fa49 	bl	8000210 <strlen>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	230a      	movs	r3, #10
 8001d84:	4910      	ldr	r1, [pc, #64]	; (8001dc8 <loadOctet+0x178>)
 8001d86:	4811      	ldr	r0, [pc, #68]	; (8001dcc <loadOctet+0x17c>)
 8001d88:	f003 fdfb 	bl	8005982 <HAL_UART_Transmit>
		for(int i = 0;i<8;i++){
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	ddcf      	ble.n	8001d38 <loadOctet+0xe8>
		}
		sprintf(uartData, "\r\n");
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <loadOctet+0x178>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <loadOctet+0x194>)
 8001d9c:	8811      	ldrh	r1, [r2, #0]
 8001d9e:	7892      	ldrb	r2, [r2, #2]
 8001da0:	8019      	strh	r1, [r3, #0]
 8001da2:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001da4:	4808      	ldr	r0, [pc, #32]	; (8001dc8 <loadOctet+0x178>)
 8001da6:	f7fe fa33 	bl	8000210 <strlen>
 8001daa:	4603      	mov	r3, r0
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	230a      	movs	r3, #10
 8001db0:	4905      	ldr	r1, [pc, #20]	; (8001dc8 <loadOctet+0x178>)
 8001db2:	4806      	ldr	r0, [pc, #24]	; (8001dcc <loadOctet+0x17c>)
 8001db4:	f003 fde5 	bl	8005982 <HAL_UART_Transmit>
	}
	return isFlag;
 8001db8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	080073f0 	.word	0x080073f0
 8001dc8:	20001cd8 	.word	0x20001cd8
 8001dcc:	20002b94 	.word	0x20002b94
 8001dd0:	08007400 	.word	0x08007400
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	08007410 	.word	0x08007410
 8001ddc:	200000a0 	.word	0x200000a0
 8001de0:	0800742c 	.word	0x0800742c
 8001de4:	08007434 	.word	0x08007434

08001de8 <streamGet>:
int streamGet() {
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b090      	sub	sp, #64	; 0x40
 8001dec:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001dee:	4b88      	ldr	r3, [pc, #544]	; (8002010 <streamGet+0x228>)
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28

	int byteArray[8];
	int max_octets = (int)(AX25_PACKET_MAX)/8;
 8001df2:	f240 134b 	movw	r3, #331	; 0x14b
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
	int octet_count,good_octet;
	bool gotflag;

	//Just do this unless we need to toggle
	while(!changeMode){
 8001df8:	e0fb      	b.n	8001ff2 <streamGet+0x20a>
		gotflag = false;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		//Slide bits
		for(int i = 0; i < 7; i++){
 8001e00:	2300      	movs	r3, #0
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
 8001e04:	e011      	b.n	8001e2a <streamGet+0x42>
			byteArray[i] = byteArray[i+1];
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	3301      	adds	r3, #1
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e10:	4413      	add	r3, r2
 8001e12:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001e1e:	440b      	add	r3, r1
 8001e20:	f843 2c3c 	str.w	r2, [r3, #-60]
		for(int i = 0; i < 7; i++){
 8001e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e26:	3301      	adds	r3, #1
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2c:	2b06      	cmp	r3, #6
 8001e2e:	ddea      	ble.n	8001e06 <streamGet+0x1e>
		}
		byteArray[7] = loadBit();
 8001e30:	f7ff fe9a 	bl	8001b68 <loadBit>
 8001e34:	4603      	mov	r3, r0
 8001e36:	623b      	str	r3, [r7, #32]
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
//		}
//		sprintf(uartData, "Current octet:");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		//Detect AX25 flag bytes
		for(int i = 0;i < 8; i++){
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3c:	e019      	b.n	8001e72 <streamGet+0x8a>
//			sprintf(uartData, " %d ",byteArray[i]);
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);

			//If the byte isn't lined up, break loop
			if(byteArray[i]!=AX25TBYTE[i]) {
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e46:	4413      	add	r3, r2
 8001e48:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001e4c:	4971      	ldr	r1, [pc, #452]	; (8002014 <streamGet+0x22c>)
 8001e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e50:	440a      	add	r2, r1
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <streamGet+0x78>
				gotflag = false;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001e5e:	e00b      	b.n	8001e78 <streamGet+0x90>
			}
			//If the loop makes it to the lowest bit, the flag should be lined up
			else if(i==7){
 8001e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e62:	2b07      	cmp	r3, #7
 8001e64:	d102      	bne.n	8001e6c <streamGet+0x84>
				gotflag = true;
 8001e66:	2301      	movs	r3, #1
 8001e68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for(int i = 0;i < 8; i++){
 8001e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6e:	3301      	adds	r3, #1
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	2b07      	cmp	r3, #7
 8001e76:	dde2      	ble.n	8001e3e <streamGet+0x56>
//		sprintf(uartData, "\n");
//		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);


		//Got flag
		if(gotflag){
 8001e78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80b8 	beq.w	8001ff2 <streamGet+0x20a>
			sprintf(uartData, "Start AX.25 Flag Detected\r\n");
 8001e82:	4a65      	ldr	r2, [pc, #404]	; (8002018 <streamGet+0x230>)
 8001e84:	4b65      	ldr	r3, [pc, #404]	; (800201c <streamGet+0x234>)
 8001e86:	4615      	mov	r5, r2
 8001e88:	461c      	mov	r4, r3
 8001e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8c:	6028      	str	r0, [r5, #0]
 8001e8e:	6069      	str	r1, [r5, #4]
 8001e90:	60aa      	str	r2, [r5, #8]
 8001e92:	60eb      	str	r3, [r5, #12]
 8001e94:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001e96:	6128      	str	r0, [r5, #16]
 8001e98:	6169      	str	r1, [r5, #20]
 8001e9a:	61aa      	str	r2, [r5, #24]
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001e9c:	485e      	ldr	r0, [pc, #376]	; (8002018 <streamGet+0x230>)
 8001e9e:	f7fe f9b7 	bl	8000210 <strlen>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	230a      	movs	r3, #10
 8001ea8:	495b      	ldr	r1, [pc, #364]	; (8002018 <streamGet+0x230>)
 8001eaa:	485d      	ldr	r0, [pc, #372]	; (8002020 <streamGet+0x238>)
 8001eac:	f003 fd69 	bl	8005982 <HAL_UART_Transmit>
			octet_count  = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c

			//Until AX.25 buffer overflows, continue reading octets
			good_octet = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
			while( (good_octet==0) && (octet_count < max_octets) ){
 8001eb8:	e01a      	b.n	8001ef0 <streamGet+0x108>
				good_octet = loadOctet(&local_packet->AX25_PACKET[octet_count*8]);
 8001eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fec4 	bl	8001c50 <loadOctet>
 8001ec8:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(uartData, "Loaded octet %d out of %d\r\n",octet_count,max_octets);
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ece:	4955      	ldr	r1, [pc, #340]	; (8002024 <streamGet+0x23c>)
 8001ed0:	4851      	ldr	r0, [pc, #324]	; (8002018 <streamGet+0x230>)
 8001ed2:	f004 fc97 	bl	8006804 <siprintf>
				//sprintf(uartData, "good_octet: %d\r\n",good_octet);
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001ed6:	4850      	ldr	r0, [pc, #320]	; (8002018 <streamGet+0x230>)
 8001ed8:	f7fe f99a 	bl	8000210 <strlen>
 8001edc:	4603      	mov	r3, r0
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	230a      	movs	r3, #10
 8001ee2:	494d      	ldr	r1, [pc, #308]	; (8002018 <streamGet+0x230>)
 8001ee4:	484e      	ldr	r0, [pc, #312]	; (8002020 <streamGet+0x238>)
 8001ee6:	f003 fd4c 	bl	8005982 <HAL_UART_Transmit>

				octet_count+=1;
 8001eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eec:	3301      	adds	r3, #1
 8001eee:	63fb      	str	r3, [r7, #60]	; 0x3c
			while( (good_octet==0) && (octet_count < max_octets) ){
 8001ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d103      	bne.n	8001efe <streamGet+0x116>
 8001ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbdd      	blt.n	8001eba <streamGet+0xd2>
			}
			//If an octet was bad, this was a bad packet
			if(good_octet!=1){
 8001efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d012      	beq.n	8001f2a <streamGet+0x142>
				sprintf(uartData, "Bad packet! Detected bad signal.\n\n",octet_count);
 8001f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f06:	4948      	ldr	r1, [pc, #288]	; (8002028 <streamGet+0x240>)
 8001f08:	4843      	ldr	r0, [pc, #268]	; (8002018 <streamGet+0x230>)
 8001f0a:	f004 fc7b 	bl	8006804 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f0e:	4842      	ldr	r0, [pc, #264]	; (8002018 <streamGet+0x230>)
 8001f10:	f7fe f97e 	bl	8000210 <strlen>
 8001f14:	4603      	mov	r3, r0
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	230a      	movs	r3, #10
 8001f1a:	493f      	ldr	r1, [pc, #252]	; (8002018 <streamGet+0x230>)
 8001f1c:	4840      	ldr	r0, [pc, #256]	; (8002020 <streamGet+0x238>)
 8001f1e:	f003 fd30 	bl	8005982 <HAL_UART_Transmit>
				//for(int i = 0;i<)
				gotflag = false;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f28:	e063      	b.n	8001ff2 <streamGet+0x20a>
			}
			//If ax.25 buffer overflows
			else if(octet_count >= max_octets){
 8001f2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	db12      	blt.n	8001f58 <streamGet+0x170>
				sprintf(uartData, "Bad packet! Not enough octets\r\n\n",octet_count);
 8001f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f34:	493d      	ldr	r1, [pc, #244]	; (800202c <streamGet+0x244>)
 8001f36:	4838      	ldr	r0, [pc, #224]	; (8002018 <streamGet+0x230>)
 8001f38:	f004 fc64 	bl	8006804 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f3c:	4836      	ldr	r0, [pc, #216]	; (8002018 <streamGet+0x230>)
 8001f3e:	f7fe f967 	bl	8000210 <strlen>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	230a      	movs	r3, #10
 8001f48:	4933      	ldr	r1, [pc, #204]	; (8002018 <streamGet+0x230>)
 8001f4a:	4835      	ldr	r0, [pc, #212]	; (8002020 <streamGet+0x238>)
 8001f4c:	f003 fd19 	bl	8005982 <HAL_UART_Transmit>
				gotflag = false;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f56:	e04c      	b.n	8001ff2 <streamGet+0x20a>
			}
			//
			else if(octet_count == 1){
 8001f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d12d      	bne.n	8001fba <streamGet+0x1d2>
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n");
 8001f5e:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <streamGet+0x230>)
 8001f60:	4b33      	ldr	r3, [pc, #204]	; (8002030 <streamGet+0x248>)
 8001f62:	4615      	mov	r5, r2
 8001f64:	461c      	mov	r4, r3
 8001f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f68:	6028      	str	r0, [r5, #0]
 8001f6a:	6069      	str	r1, [r5, #4]
 8001f6c:	60aa      	str	r2, [r5, #8]
 8001f6e:	60eb      	str	r3, [r5, #12]
 8001f70:	cc03      	ldmia	r4!, {r0, r1}
 8001f72:	6128      	str	r0, [r5, #16]
 8001f74:	6169      	str	r1, [r5, #20]
 8001f76:	8823      	ldrh	r3, [r4, #0]
 8001f78:	78a2      	ldrb	r2, [r4, #2]
 8001f7a:	832b      	strh	r3, [r5, #24]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	76ab      	strb	r3, [r5, #26]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f80:	4825      	ldr	r0, [pc, #148]	; (8002018 <streamGet+0x230>)
 8001f82:	f7fe f945 	bl	8000210 <strlen>
 8001f86:	4603      	mov	r3, r0
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	4922      	ldr	r1, [pc, #136]	; (8002018 <streamGet+0x230>)
 8001f8e:	4824      	ldr	r0, [pc, #144]	; (8002020 <streamGet+0x238>)
 8001f90:	f003 fcf7 	bl	8005982 <HAL_UART_Transmit>
				sprintf(uartData, "Bad packet! Not enough octetes.\r\n\n",octet_count);
 8001f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f96:	4927      	ldr	r1, [pc, #156]	; (8002034 <streamGet+0x24c>)
 8001f98:	481f      	ldr	r0, [pc, #124]	; (8002018 <streamGet+0x230>)
 8001f9a:	f004 fc33 	bl	8006804 <siprintf>
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001f9e:	481e      	ldr	r0, [pc, #120]	; (8002018 <streamGet+0x230>)
 8001fa0:	f7fe f936 	bl	8000210 <strlen>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	230a      	movs	r3, #10
 8001faa:	491b      	ldr	r1, [pc, #108]	; (8002018 <streamGet+0x230>)
 8001fac:	481c      	ldr	r0, [pc, #112]	; (8002020 <streamGet+0x238>)
 8001fae:	f003 fce8 	bl	8005982 <HAL_UART_Transmit>
				gotflag = false;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001fb8:	e01b      	b.n	8001ff2 <streamGet+0x20a>
			}
			//If ax.25 buffer does not overflow, this was a good packet
			else {
				sprintf(uartData, "Stop AX.25 Flag Detected\r\n\n");
 8001fba:	4a17      	ldr	r2, [pc, #92]	; (8002018 <streamGet+0x230>)
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <streamGet+0x250>)
 8001fbe:	4615      	mov	r5, r2
 8001fc0:	461c      	mov	r4, r3
 8001fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc4:	6028      	str	r0, [r5, #0]
 8001fc6:	6069      	str	r1, [r5, #4]
 8001fc8:	60aa      	str	r2, [r5, #8]
 8001fca:	60eb      	str	r3, [r5, #12]
 8001fcc:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001fce:	6128      	str	r0, [r5, #16]
 8001fd0:	6169      	str	r1, [r5, #20]
 8001fd2:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001fd4:	4810      	ldr	r0, [pc, #64]	; (8002018 <streamGet+0x230>)
 8001fd6:	f7fe f91b 	bl	8000210 <strlen>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	230a      	movs	r3, #10
 8001fe0:	490d      	ldr	r1, [pc, #52]	; (8002018 <streamGet+0x230>)
 8001fe2:	480f      	ldr	r0, [pc, #60]	; (8002020 <streamGet+0x238>)
 8001fe4:	f003 fccd 	bl	8005982 <HAL_UART_Transmit>
				gotflag = false;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				return 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e009      	b.n	8002006 <streamGet+0x21e>
	while(!changeMode){
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <streamGet+0x254>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	f083 0301 	eor.w	r3, r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f47f aefc 	bne.w	8001dfa <streamGet+0x12>
			//HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		}
	}
	//Break if mode needs to change
	if(toggleMode)
		return -1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002006:	4618      	mov	r0, r3
 8002008:	3740      	adds	r7, #64	; 0x40
 800200a:	46bd      	mov	sp, r7
 800200c:	bdb0      	pop	{r4, r5, r7, pc}
 800200e:	bf00      	nop
 8002010:	200000d4 	.word	0x200000d4
 8002014:	20000008 	.word	0x20000008
 8002018:	20001cd8 	.word	0x20001cd8
 800201c:	08007438 	.word	0x08007438
 8002020:	20002b94 	.word	0x20002b94
 8002024:	08007454 	.word	0x08007454
 8002028:	08007470 	.word	0x08007470
 800202c:	08007494 	.word	0x08007494
 8002030:	080074b8 	.word	0x080074b8
 8002034:	080074d4 	.word	0x080074d4
 8002038:	080074f8 	.word	0x080074f8
 800203c:	200000a5 	.word	0x200000a5

08002040 <print_AX25>:
 *  Created on: Nov 1, 2020
 *      Author: monke
 */
#include "debug.h"

void print_AX25(){
 8002040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002042:	b08d      	sub	sp, #52	; 0x34
 8002044:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002046:	4b90      	ldr	r3, [pc, #576]	; (8002288 <print_AX25+0x248>)
 8002048:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002050:	330c      	adds	r3, #12
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 8002056:	4b8d      	ldr	r3, [pc, #564]	; (800228c <print_AX25+0x24c>)
 8002058:	4a8d      	ldr	r2, [pc, #564]	; (8002290 <print_AX25+0x250>)
 800205a:	4614      	mov	r4, r2
 800205c:	469c      	mov	ip, r3
 800205e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002062:	4665      	mov	r5, ip
 8002064:	4626      	mov	r6, r4
 8002066:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002068:	6028      	str	r0, [r5, #0]
 800206a:	6069      	str	r1, [r5, #4]
 800206c:	60aa      	str	r2, [r5, #8]
 800206e:	60eb      	str	r3, [r5, #12]
 8002070:	3410      	adds	r4, #16
 8002072:	f10c 0c10 	add.w	ip, ip, #16
 8002076:	4574      	cmp	r4, lr
 8002078:	d1f3      	bne.n	8002062 <print_AX25+0x22>
 800207a:	4663      	mov	r3, ip
 800207c:	4622      	mov	r2, r4
 800207e:	6810      	ldr	r0, [r2, #0]
 8002080:	6018      	str	r0, [r3, #0]
 8002082:	8891      	ldrh	r1, [r2, #4]
 8002084:	7992      	ldrb	r2, [r2, #6]
 8002086:	8099      	strh	r1, [r3, #4]
 8002088:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800208a:	4880      	ldr	r0, [pc, #512]	; (800228c <print_AX25+0x24c>)
 800208c:	f7fe f8c0 	bl	8000210 <strlen>
 8002090:	4603      	mov	r3, r0
 8002092:	b29a      	uxth	r2, r3
 8002094:	230a      	movs	r3, #10
 8002096:	497d      	ldr	r1, [pc, #500]	; (800228c <print_AX25+0x24c>)
 8002098:	487e      	ldr	r0, [pc, #504]	; (8002294 <print_AX25+0x254>)
 800209a:	f003 fc72 	bl	8005982 <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = (local_packet->AX25_PACKET) + address_len - 1;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	336f      	adds	r3, #111	; 0x6f
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 80020a4:	2300      	movs	r3, #0
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a8:	e041      	b.n	800212e <print_AX25+0xee>
		sprintf(uartData, "Address Field %d =",i+1);
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	3301      	adds	r3, #1
 80020ae:	461a      	mov	r2, r3
 80020b0:	4979      	ldr	r1, [pc, #484]	; (8002298 <print_AX25+0x258>)
 80020b2:	4876      	ldr	r0, [pc, #472]	; (800228c <print_AX25+0x24c>)
 80020b4:	f004 fba6 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80020b8:	4874      	ldr	r0, [pc, #464]	; (800228c <print_AX25+0x24c>)
 80020ba:	f7fe f8a9 	bl	8000210 <strlen>
 80020be:	4603      	mov	r3, r0
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	230a      	movs	r3, #10
 80020c4:	4971      	ldr	r1, [pc, #452]	; (800228c <print_AX25+0x24c>)
 80020c6:	4873      	ldr	r0, [pc, #460]	; (8002294 <print_AX25+0x254>)
 80020c8:	f003 fc5b 	bl	8005982 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
 80020d0:	e016      	b.n	8002100 <print_AX25+0xc0>
			sprintf(uartData, " %d ",*(curr_mem-j));
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	425b      	negs	r3, r3
 80020d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d8:	4413      	add	r3, r2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	496f      	ldr	r1, [pc, #444]	; (800229c <print_AX25+0x25c>)
 80020e0:	486a      	ldr	r0, [pc, #424]	; (800228c <print_AX25+0x24c>)
 80020e2:	f004 fb8f 	bl	8006804 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80020e6:	4869      	ldr	r0, [pc, #420]	; (800228c <print_AX25+0x24c>)
 80020e8:	f7fe f892 	bl	8000210 <strlen>
 80020ec:	4603      	mov	r3, r0
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	230a      	movs	r3, #10
 80020f2:	4966      	ldr	r1, [pc, #408]	; (800228c <print_AX25+0x24c>)
 80020f4:	4867      	ldr	r0, [pc, #412]	; (8002294 <print_AX25+0x254>)
 80020f6:	f003 fc44 	bl	8005982 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	3301      	adds	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	2b07      	cmp	r3, #7
 8002104:	dde5      	ble.n	80020d2 <print_AX25+0x92>
		}
		curr_mem -= 8;
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002108:	3b08      	subs	r3, #8
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 800210c:	4a5f      	ldr	r2, [pc, #380]	; (800228c <print_AX25+0x24c>)
 800210e:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <print_AX25+0x260>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002114:	485d      	ldr	r0, [pc, #372]	; (800228c <print_AX25+0x24c>)
 8002116:	f7fe f87b 	bl	8000210 <strlen>
 800211a:	4603      	mov	r3, r0
 800211c:	b29a      	uxth	r2, r3
 800211e:	230a      	movs	r3, #10
 8002120:	495a      	ldr	r1, [pc, #360]	; (800228c <print_AX25+0x24c>)
 8002122:	485c      	ldr	r0, [pc, #368]	; (8002294 <print_AX25+0x254>)
 8002124:	f003 fc2d 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	3301      	adds	r3, #1
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	2b0d      	cmp	r3, #13
 8002132:	ddba      	ble.n	80020aa <print_AX25+0x6a>
	}

	//Print Control Field
	curr_mem += address_len;//Subtract 8 to start at the flag start
 8002134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002136:	3370      	adds	r3, #112	; 0x70
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 800213a:	4a54      	ldr	r2, [pc, #336]	; (800228c <print_AX25+0x24c>)
 800213c:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <print_AX25+0x264>)
 800213e:	4615      	mov	r5, r2
 8002140:	461c      	mov	r4, r3
 8002142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002144:	6028      	str	r0, [r5, #0]
 8002146:	6069      	str	r1, [r5, #4]
 8002148:	60aa      	str	r2, [r5, #8]
 800214a:	60eb      	str	r3, [r5, #12]
 800214c:	8823      	ldrh	r3, [r4, #0]
 800214e:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002150:	484e      	ldr	r0, [pc, #312]	; (800228c <print_AX25+0x24c>)
 8002152:	f7fe f85d 	bl	8000210 <strlen>
 8002156:	4603      	mov	r3, r0
 8002158:	b29a      	uxth	r2, r3
 800215a:	230a      	movs	r3, #10
 800215c:	494b      	ldr	r1, [pc, #300]	; (800228c <print_AX25+0x24c>)
 800215e:	484d      	ldr	r0, [pc, #308]	; (8002294 <print_AX25+0x254>)
 8002160:	f003 fc0f 	bl	8005982 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
 8002168:	e017      	b.n	800219a <print_AX25+0x15a>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f1c3 0307 	rsb	r3, r3, #7
 8002170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	4948      	ldr	r1, [pc, #288]	; (800229c <print_AX25+0x25c>)
 800217a:	4844      	ldr	r0, [pc, #272]	; (800228c <print_AX25+0x24c>)
 800217c:	f004 fb42 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002180:	4842      	ldr	r0, [pc, #264]	; (800228c <print_AX25+0x24c>)
 8002182:	f7fe f845 	bl	8000210 <strlen>
 8002186:	4603      	mov	r3, r0
 8002188:	b29a      	uxth	r2, r3
 800218a:	230a      	movs	r3, #10
 800218c:	493f      	ldr	r1, [pc, #252]	; (800228c <print_AX25+0x24c>)
 800218e:	4841      	ldr	r0, [pc, #260]	; (8002294 <print_AX25+0x254>)
 8002190:	f003 fbf7 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	3301      	adds	r3, #1
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	2b07      	cmp	r3, #7
 800219e:	dde4      	ble.n	800216a <print_AX25+0x12a>
	}
	sprintf(uartData, "\n");
 80021a0:	4a3a      	ldr	r2, [pc, #232]	; (800228c <print_AX25+0x24c>)
 80021a2:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <print_AX25+0x260>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80021a8:	4838      	ldr	r0, [pc, #224]	; (800228c <print_AX25+0x24c>)
 80021aa:	f7fe f831 	bl	8000210 <strlen>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	230a      	movs	r3, #10
 80021b4:	4935      	ldr	r1, [pc, #212]	; (800228c <print_AX25+0x24c>)
 80021b6:	4837      	ldr	r0, [pc, #220]	; (8002294 <print_AX25+0x254>)
 80021b8:	f003 fbe3 	bl	8005982 <HAL_UART_Transmit>

	//PID
	curr_mem += control_len;//Subtract 8 to start at the flag start
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	3308      	adds	r3, #8
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 80021c2:	4a32      	ldr	r2, [pc, #200]	; (800228c <print_AX25+0x24c>)
 80021c4:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <print_AX25+0x268>)
 80021c6:	4615      	mov	r5, r2
 80021c8:	461c      	mov	r4, r3
 80021ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021cc:	6028      	str	r0, [r5, #0]
 80021ce:	6069      	str	r1, [r5, #4]
 80021d0:	60aa      	str	r2, [r5, #8]
 80021d2:	60eb      	str	r3, [r5, #12]
 80021d4:	8823      	ldrh	r3, [r4, #0]
 80021d6:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80021d8:	482c      	ldr	r0, [pc, #176]	; (800228c <print_AX25+0x24c>)
 80021da:	f7fe f819 	bl	8000210 <strlen>
 80021de:	4603      	mov	r3, r0
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	230a      	movs	r3, #10
 80021e4:	4929      	ldr	r1, [pc, #164]	; (800228c <print_AX25+0x24c>)
 80021e6:	482b      	ldr	r0, [pc, #172]	; (8002294 <print_AX25+0x254>)
 80021e8:	f003 fbcb 	bl	8005982 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	e017      	b.n	8002222 <print_AX25+0x1e2>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f1c3 0307 	rsb	r3, r3, #7
 80021f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	4926      	ldr	r1, [pc, #152]	; (800229c <print_AX25+0x25c>)
 8002202:	4822      	ldr	r0, [pc, #136]	; (800228c <print_AX25+0x24c>)
 8002204:	f004 fafe 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002208:	4820      	ldr	r0, [pc, #128]	; (800228c <print_AX25+0x24c>)
 800220a:	f7fe f801 	bl	8000210 <strlen>
 800220e:	4603      	mov	r3, r0
 8002210:	b29a      	uxth	r2, r3
 8002212:	230a      	movs	r3, #10
 8002214:	491d      	ldr	r1, [pc, #116]	; (800228c <print_AX25+0x24c>)
 8002216:	481f      	ldr	r0, [pc, #124]	; (8002294 <print_AX25+0x254>)
 8002218:	f003 fbb3 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3301      	adds	r3, #1
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	2b07      	cmp	r3, #7
 8002226:	dde4      	ble.n	80021f2 <print_AX25+0x1b2>
	}
	sprintf(uartData, "\n");
 8002228:	4a18      	ldr	r2, [pc, #96]	; (800228c <print_AX25+0x24c>)
 800222a:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <print_AX25+0x260>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002230:	4816      	ldr	r0, [pc, #88]	; (800228c <print_AX25+0x24c>)
 8002232:	f7fd ffed 	bl	8000210 <strlen>
 8002236:	4603      	mov	r3, r0
 8002238:	b29a      	uxth	r2, r3
 800223a:	230a      	movs	r3, #10
 800223c:	4913      	ldr	r1, [pc, #76]	; (800228c <print_AX25+0x24c>)
 800223e:	4815      	ldr	r0, [pc, #84]	; (8002294 <print_AX25+0x254>)
 8002240:	f003 fb9f 	bl	8005982 <HAL_UART_Transmit>
	curr_mem += PID_len;
 8002244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002246:	3308      	adds	r3, #8
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Print Info Field
	curr_mem += local_packet->Info_Len - 1;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3b01      	subs	r3, #1
 8002254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002256:	4413      	add	r3, r2
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	e055      	b.n	800230c <print_AX25+0x2cc>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	3301      	adds	r3, #1
 8002264:	461a      	mov	r2, r3
 8002266:	4911      	ldr	r1, [pc, #68]	; (80022ac <print_AX25+0x26c>)
 8002268:	4808      	ldr	r0, [pc, #32]	; (800228c <print_AX25+0x24c>)
 800226a:	f004 facb 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800226e:	4807      	ldr	r0, [pc, #28]	; (800228c <print_AX25+0x24c>)
 8002270:	f7fd ffce 	bl	8000210 <strlen>
 8002274:	4603      	mov	r3, r0
 8002276:	b29a      	uxth	r2, r3
 8002278:	230a      	movs	r3, #10
 800227a:	4904      	ldr	r1, [pc, #16]	; (800228c <print_AX25+0x24c>)
 800227c:	4805      	ldr	r0, [pc, #20]	; (8002294 <print_AX25+0x254>)
 800227e:	f003 fb80 	bl	8005982 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e02a      	b.n	80022de <print_AX25+0x29e>
 8002288:	200000d4 	.word	0x200000d4
 800228c:	20001cd8 	.word	0x20001cd8
 8002290:	08007514 	.word	0x08007514
 8002294:	20002b94 	.word	0x20002b94
 8002298:	0800754c 	.word	0x0800754c
 800229c:	08007560 	.word	0x08007560
 80022a0:	08007568 	.word	0x08007568
 80022a4:	0800756c 	.word	0x0800756c
 80022a8:	08007580 	.word	0x08007580
 80022ac:	08007594 	.word	0x08007594
			sprintf(uartData, " %d ",*(curr_mem-j));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	425b      	negs	r3, r3
 80022b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	4945      	ldr	r1, [pc, #276]	; (80023d4 <print_AX25+0x394>)
 80022be:	4846      	ldr	r0, [pc, #280]	; (80023d8 <print_AX25+0x398>)
 80022c0:	f004 faa0 	bl	8006804 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80022c4:	4844      	ldr	r0, [pc, #272]	; (80023d8 <print_AX25+0x398>)
 80022c6:	f7fd ffa3 	bl	8000210 <strlen>
 80022ca:	4603      	mov	r3, r0
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	230a      	movs	r3, #10
 80022d0:	4941      	ldr	r1, [pc, #260]	; (80023d8 <print_AX25+0x398>)
 80022d2:	4842      	ldr	r0, [pc, #264]	; (80023dc <print_AX25+0x39c>)
 80022d4:	f003 fb55 	bl	8005982 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3301      	adds	r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b07      	cmp	r3, #7
 80022e2:	dde5      	ble.n	80022b0 <print_AX25+0x270>
		}
		curr_mem -= 8;
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	3b08      	subs	r3, #8
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80022ea:	4a3b      	ldr	r2, [pc, #236]	; (80023d8 <print_AX25+0x398>)
 80022ec:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <print_AX25+0x3a0>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80022f2:	4839      	ldr	r0, [pc, #228]	; (80023d8 <print_AX25+0x398>)
 80022f4:	f7fd ff8c 	bl	8000210 <strlen>
 80022f8:	4603      	mov	r3, r0
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	230a      	movs	r3, #10
 80022fe:	4936      	ldr	r1, [pc, #216]	; (80023d8 <print_AX25+0x398>)
 8002300:	4836      	ldr	r0, [pc, #216]	; (80023dc <print_AX25+0x39c>)
 8002302:	f003 fb3e 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	3301      	adds	r3, #1
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	da00      	bge.n	800231a <print_AX25+0x2da>
 8002318:	3307      	adds	r3, #7
 800231a:	10db      	asrs	r3, r3, #3
 800231c:	461a      	mov	r2, r3
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4293      	cmp	r3, r2
 8002322:	db9d      	blt.n	8002260 <print_AX25+0x220>
	}
	curr_mem += local_packet->Info_Len;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	4413      	add	r3, r2
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c

	curr_mem += FCS_len - 8;
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	3308      	adds	r3, #8
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(FCS_len/8);i++){
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	e042      	b.n	80023c6 <print_AX25+0x386>
		sprintf(uartData, "FCS Field %d     =",i+1)	;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	3301      	adds	r3, #1
 8002344:	461a      	mov	r2, r3
 8002346:	4927      	ldr	r1, [pc, #156]	; (80023e4 <print_AX25+0x3a4>)
 8002348:	4823      	ldr	r0, [pc, #140]	; (80023d8 <print_AX25+0x398>)
 800234a:	f004 fa5b 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800234e:	4822      	ldr	r0, [pc, #136]	; (80023d8 <print_AX25+0x398>)
 8002350:	f7fd ff5e 	bl	8000210 <strlen>
 8002354:	4603      	mov	r3, r0
 8002356:	b29a      	uxth	r2, r3
 8002358:	230a      	movs	r3, #10
 800235a:	491f      	ldr	r1, [pc, #124]	; (80023d8 <print_AX25+0x398>)
 800235c:	481f      	ldr	r0, [pc, #124]	; (80023dc <print_AX25+0x39c>)
 800235e:	f003 fb10 	bl	8005982 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	e017      	b.n	8002398 <print_AX25+0x358>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002370:	4413      	add	r3, r2
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4917      	ldr	r1, [pc, #92]	; (80023d4 <print_AX25+0x394>)
 8002378:	4817      	ldr	r0, [pc, #92]	; (80023d8 <print_AX25+0x398>)
 800237a:	f004 fa43 	bl	8006804 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800237e:	4816      	ldr	r0, [pc, #88]	; (80023d8 <print_AX25+0x398>)
 8002380:	f7fd ff46 	bl	8000210 <strlen>
 8002384:	4603      	mov	r3, r0
 8002386:	b29a      	uxth	r2, r3
 8002388:	230a      	movs	r3, #10
 800238a:	4913      	ldr	r1, [pc, #76]	; (80023d8 <print_AX25+0x398>)
 800238c:	4813      	ldr	r0, [pc, #76]	; (80023dc <print_AX25+0x39c>)
 800238e:	f003 faf8 	bl	8005982 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3301      	adds	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b07      	cmp	r3, #7
 800239c:	dde4      	ble.n	8002368 <print_AX25+0x328>
		}
		curr_mem -= 8;
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	3b08      	subs	r3, #8
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80023a4:	4a0c      	ldr	r2, [pc, #48]	; (80023d8 <print_AX25+0x398>)
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <print_AX25+0x3a0>)
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80023ac:	480a      	ldr	r0, [pc, #40]	; (80023d8 <print_AX25+0x398>)
 80023ae:	f7fd ff2f 	bl	8000210 <strlen>
 80023b2:	4603      	mov	r3, r0
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	230a      	movs	r3, #10
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <print_AX25+0x398>)
 80023ba:	4808      	ldr	r0, [pc, #32]	; (80023dc <print_AX25+0x39c>)
 80023bc:	f003 fae1 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<(FCS_len/8);i++){
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	3301      	adds	r3, #1
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	ddb9      	ble.n	8002340 <print_AX25+0x300>
	}
}
 80023cc:	bf00      	nop
 80023ce:	3734      	adds	r7, #52	; 0x34
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d4:	08007560 	.word	0x08007560
 80023d8:	20001cd8 	.word	0x20001cd8
 80023dc:	20002b94 	.word	0x20002b94
 80023e0:	08007568 	.word	0x08007568
 80023e4:	080075a8 	.word	0x080075a8

080023e8 <print_outAX25>:

void print_outAX25(){
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	b08b      	sub	sp, #44	; 0x2c
 80023ec:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80023ee:	4b9b      	ldr	r3, [pc, #620]	; (800265c <print_outAX25+0x274>)
 80023f0:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80023f8:	330c      	adds	r3, #12
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET being sent to radio\n");
 80023fe:	4b98      	ldr	r3, [pc, #608]	; (8002660 <print_outAX25+0x278>)
 8002400:	4a98      	ldr	r2, [pc, #608]	; (8002664 <print_outAX25+0x27c>)
 8002402:	4614      	mov	r4, r2
 8002404:	469c      	mov	ip, r3
 8002406:	f104 0e20 	add.w	lr, r4, #32
 800240a:	4665      	mov	r5, ip
 800240c:	4626      	mov	r6, r4
 800240e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002410:	6028      	str	r0, [r5, #0]
 8002412:	6069      	str	r1, [r5, #4]
 8002414:	60aa      	str	r2, [r5, #8]
 8002416:	60eb      	str	r3, [r5, #12]
 8002418:	3410      	adds	r4, #16
 800241a:	f10c 0c10 	add.w	ip, ip, #16
 800241e:	4574      	cmp	r4, lr
 8002420:	d1f3      	bne.n	800240a <print_outAX25+0x22>
 8002422:	4662      	mov	r2, ip
 8002424:	4623      	mov	r3, r4
 8002426:	cb03      	ldmia	r3!, {r0, r1}
 8002428:	6010      	str	r0, [r2, #0]
 800242a:	6051      	str	r1, [r2, #4]
 800242c:	8819      	ldrh	r1, [r3, #0]
 800242e:	789b      	ldrb	r3, [r3, #2]
 8002430:	8111      	strh	r1, [r2, #8]
 8002432:	7293      	strb	r3, [r2, #10]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002434:	488a      	ldr	r0, [pc, #552]	; (8002660 <print_outAX25+0x278>)
 8002436:	f7fd feeb 	bl	8000210 <strlen>
 800243a:	4603      	mov	r3, r0
 800243c:	b29a      	uxth	r2, r3
 800243e:	230a      	movs	r3, #10
 8002440:	4987      	ldr	r1, [pc, #540]	; (8002660 <print_outAX25+0x278>)
 8002442:	4889      	ldr	r0, [pc, #548]	; (8002668 <print_outAX25+0x280>)
 8002444:	f003 fa9d 	bl	8005982 <HAL_UART_Transmit>

	//Print Address Field
	curr_mem = local_packet->address;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800244e:	3310      	adds	r3, #16
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0;i<address_len/8;i++){
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	e040      	b.n	80024dc <print_outAX25+0xf4>
		sprintf(uartData, "Address Field %d =",i+1);
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	3301      	adds	r3, #1
 800245e:	461a      	mov	r2, r3
 8002460:	4982      	ldr	r1, [pc, #520]	; (800266c <print_outAX25+0x284>)
 8002462:	487f      	ldr	r0, [pc, #508]	; (8002660 <print_outAX25+0x278>)
 8002464:	f004 f9ce 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002468:	487d      	ldr	r0, [pc, #500]	; (8002660 <print_outAX25+0x278>)
 800246a:	f7fd fed1 	bl	8000210 <strlen>
 800246e:	4603      	mov	r3, r0
 8002470:	b29a      	uxth	r2, r3
 8002472:	230a      	movs	r3, #10
 8002474:	497a      	ldr	r1, [pc, #488]	; (8002660 <print_outAX25+0x278>)
 8002476:	487c      	ldr	r0, [pc, #496]	; (8002668 <print_outAX25+0x280>)
 8002478:	f003 fa83 	bl	8005982 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
 8002480:	e015      	b.n	80024ae <print_outAX25+0xc6>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002486:	4413      	add	r3, r2
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	4978      	ldr	r1, [pc, #480]	; (8002670 <print_outAX25+0x288>)
 800248e:	4874      	ldr	r0, [pc, #464]	; (8002660 <print_outAX25+0x278>)
 8002490:	f004 f9b8 	bl	8006804 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002494:	4872      	ldr	r0, [pc, #456]	; (8002660 <print_outAX25+0x278>)
 8002496:	f7fd febb 	bl	8000210 <strlen>
 800249a:	4603      	mov	r3, r0
 800249c:	b29a      	uxth	r2, r3
 800249e:	230a      	movs	r3, #10
 80024a0:	496f      	ldr	r1, [pc, #444]	; (8002660 <print_outAX25+0x278>)
 80024a2:	4871      	ldr	r0, [pc, #452]	; (8002668 <print_outAX25+0x280>)
 80024a4:	f003 fa6d 	bl	8005982 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	3301      	adds	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	2b07      	cmp	r3, #7
 80024b2:	dde6      	ble.n	8002482 <print_outAX25+0x9a>
		}
		curr_mem += 8;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	3308      	adds	r3, #8
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(uartData, "\n");
 80024ba:	4a69      	ldr	r2, [pc, #420]	; (8002660 <print_outAX25+0x278>)
 80024bc:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <print_outAX25+0x28c>)
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80024c2:	4867      	ldr	r0, [pc, #412]	; (8002660 <print_outAX25+0x278>)
 80024c4:	f7fd fea4 	bl	8000210 <strlen>
 80024c8:	4603      	mov	r3, r0
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	230a      	movs	r3, #10
 80024ce:	4964      	ldr	r1, [pc, #400]	; (8002660 <print_outAX25+0x278>)
 80024d0:	4865      	ldr	r0, [pc, #404]	; (8002668 <print_outAX25+0x280>)
 80024d2:	f003 fa56 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	3301      	adds	r3, #1
 80024da:	623b      	str	r3, [r7, #32]
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	ddbb      	ble.n	800245a <print_outAX25+0x72>
	}

	//if address was bitstuffed then print rest of address field
	sprintf(uartData, "Address Field extra = ");
 80024e2:	4a5f      	ldr	r2, [pc, #380]	; (8002660 <print_outAX25+0x278>)
 80024e4:	4b64      	ldr	r3, [pc, #400]	; (8002678 <print_outAX25+0x290>)
 80024e6:	4614      	mov	r4, r2
 80024e8:	461d      	mov	r5, r3
 80024ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ec:	6020      	str	r0, [r4, #0]
 80024ee:	6061      	str	r1, [r4, #4]
 80024f0:	60a2      	str	r2, [r4, #8]
 80024f2:	60e3      	str	r3, [r4, #12]
 80024f4:	6828      	ldr	r0, [r5, #0]
 80024f6:	6120      	str	r0, [r4, #16]
 80024f8:	88ab      	ldrh	r3, [r5, #4]
 80024fa:	79aa      	ldrb	r2, [r5, #6]
 80024fc:	82a3      	strh	r3, [r4, #20]
 80024fe:	4613      	mov	r3, r2
 8002500:	75a3      	strb	r3, [r4, #22]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002502:	4857      	ldr	r0, [pc, #348]	; (8002660 <print_outAX25+0x278>)
 8002504:	f7fd fe84 	bl	8000210 <strlen>
 8002508:	4603      	mov	r3, r0
 800250a:	b29a      	uxth	r2, r3
 800250c:	230a      	movs	r3, #10
 800250e:	4954      	ldr	r1, [pc, #336]	; (8002660 <print_outAX25+0x278>)
 8002510:	4855      	ldr	r0, [pc, #340]	; (8002668 <print_outAX25+0x280>)
 8002512:	f003 fa36 	bl	8005982 <HAL_UART_Transmit>
	curr_mem += address_len;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	3370      	adds	r3, #112	; 0x70
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
	if(local_packet->stuffed_address > 0){
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002522:	3310      	adds	r3, #16
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	dd21      	ble.n	800256e <print_outAX25+0x186>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	e016      	b.n	800255e <print_outAX25+0x176>
			sprintf(uartData, " %d ",*(curr_mem-i));
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	425b      	negs	r3, r3
 8002534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002536:	4413      	add	r3, r2
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	494c      	ldr	r1, [pc, #304]	; (8002670 <print_outAX25+0x288>)
 800253e:	4848      	ldr	r0, [pc, #288]	; (8002660 <print_outAX25+0x278>)
 8002540:	f004 f960 	bl	8006804 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002544:	4846      	ldr	r0, [pc, #280]	; (8002660 <print_outAX25+0x278>)
 8002546:	f7fd fe63 	bl	8000210 <strlen>
 800254a:	4603      	mov	r3, r0
 800254c:	b29a      	uxth	r2, r3
 800254e:	230a      	movs	r3, #10
 8002550:	4943      	ldr	r1, [pc, #268]	; (8002660 <print_outAX25+0x278>)
 8002552:	4845      	ldr	r0, [pc, #276]	; (8002668 <print_outAX25+0x280>)
 8002554:	f003 fa15 	bl	8005982 <HAL_UART_Transmit>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	3301      	adds	r3, #1
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002564:	3310      	adds	r3, #16
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	429a      	cmp	r2, r3
 800256c:	dbe0      	blt.n	8002530 <print_outAX25+0x148>
		}
	}
	sprintf(uartData, "\n");
 800256e:	4a3c      	ldr	r2, [pc, #240]	; (8002660 <print_outAX25+0x278>)
 8002570:	4b40      	ldr	r3, [pc, #256]	; (8002674 <print_outAX25+0x28c>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002576:	483a      	ldr	r0, [pc, #232]	; (8002660 <print_outAX25+0x278>)
 8002578:	f7fd fe4a 	bl	8000210 <strlen>
 800257c:	4603      	mov	r3, r0
 800257e:	b29a      	uxth	r2, r3
 8002580:	230a      	movs	r3, #10
 8002582:	4937      	ldr	r1, [pc, #220]	; (8002660 <print_outAX25+0x278>)
 8002584:	4838      	ldr	r0, [pc, #224]	; (8002668 <print_outAX25+0x280>)
 8002586:	f003 f9fc 	bl	8005982 <HAL_UART_Transmit>

	//Print Control Field
	curr_mem = local_packet->control;//Subtract 8 to start at the flag start
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002590:	3314      	adds	r3, #20
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(uartData, "Control Field   =");
 8002596:	4a32      	ldr	r2, [pc, #200]	; (8002660 <print_outAX25+0x278>)
 8002598:	4b38      	ldr	r3, [pc, #224]	; (800267c <print_outAX25+0x294>)
 800259a:	4615      	mov	r5, r2
 800259c:	461c      	mov	r4, r3
 800259e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a0:	6028      	str	r0, [r5, #0]
 80025a2:	6069      	str	r1, [r5, #4]
 80025a4:	60aa      	str	r2, [r5, #8]
 80025a6:	60eb      	str	r3, [r5, #12]
 80025a8:	8823      	ldrh	r3, [r4, #0]
 80025aa:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80025ac:	482c      	ldr	r0, [pc, #176]	; (8002660 <print_outAX25+0x278>)
 80025ae:	f7fd fe2f 	bl	8000210 <strlen>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	230a      	movs	r3, #10
 80025b8:	4929      	ldr	r1, [pc, #164]	; (8002660 <print_outAX25+0x278>)
 80025ba:	482b      	ldr	r0, [pc, #172]	; (8002668 <print_outAX25+0x280>)
 80025bc:	f003 f9e1 	bl	8005982 <HAL_UART_Transmit>

	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e015      	b.n	80025f2 <print_outAX25+0x20a>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ca:	4413      	add	r3, r2
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	4927      	ldr	r1, [pc, #156]	; (8002670 <print_outAX25+0x288>)
 80025d2:	4823      	ldr	r0, [pc, #140]	; (8002660 <print_outAX25+0x278>)
 80025d4:	f004 f916 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80025d8:	4821      	ldr	r0, [pc, #132]	; (8002660 <print_outAX25+0x278>)
 80025da:	f7fd fe19 	bl	8000210 <strlen>
 80025de:	4603      	mov	r3, r0
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	230a      	movs	r3, #10
 80025e4:	491e      	ldr	r1, [pc, #120]	; (8002660 <print_outAX25+0x278>)
 80025e6:	4820      	ldr	r0, [pc, #128]	; (8002668 <print_outAX25+0x280>)
 80025e8:	f003 f9cb 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3301      	adds	r3, #1
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80025f8:	3314      	adds	r3, #20
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3308      	adds	r3, #8
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbe0      	blt.n	80025c6 <print_outAX25+0x1de>
	}
	sprintf(uartData, "\n");
 8002604:	4a16      	ldr	r2, [pc, #88]	; (8002660 <print_outAX25+0x278>)
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <print_outAX25+0x28c>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800260c:	4814      	ldr	r0, [pc, #80]	; (8002660 <print_outAX25+0x278>)
 800260e:	f7fd fdff 	bl	8000210 <strlen>
 8002612:	4603      	mov	r3, r0
 8002614:	b29a      	uxth	r2, r3
 8002616:	230a      	movs	r3, #10
 8002618:	4911      	ldr	r1, [pc, #68]	; (8002660 <print_outAX25+0x278>)
 800261a:	4813      	ldr	r0, [pc, #76]	; (8002668 <print_outAX25+0x280>)
 800261c:	f003 f9b1 	bl	8005982 <HAL_UART_Transmit>

	//PID
	curr_mem = local_packet->PID;//Subtract 8 to start at the flag start
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002626:	3318      	adds	r3, #24
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(uartData, "PID Field       =");
 800262c:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <print_outAX25+0x278>)
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <print_outAX25+0x298>)
 8002630:	4615      	mov	r5, r2
 8002632:	461c      	mov	r4, r3
 8002634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002636:	6028      	str	r0, [r5, #0]
 8002638:	6069      	str	r1, [r5, #4]
 800263a:	60aa      	str	r2, [r5, #8]
 800263c:	60eb      	str	r3, [r5, #12]
 800263e:	8823      	ldrh	r3, [r4, #0]
 8002640:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002642:	4807      	ldr	r0, [pc, #28]	; (8002660 <print_outAX25+0x278>)
 8002644:	f7fd fde4 	bl	8000210 <strlen>
 8002648:	4603      	mov	r3, r0
 800264a:	b29a      	uxth	r2, r3
 800264c:	230a      	movs	r3, #10
 800264e:	4904      	ldr	r1, [pc, #16]	; (8002660 <print_outAX25+0x278>)
 8002650:	4805      	ldr	r0, [pc, #20]	; (8002668 <print_outAX25+0x280>)
 8002652:	f003 f996 	bl	8005982 <HAL_UART_Transmit>

	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	e029      	b.n	80026b0 <print_outAX25+0x2c8>
 800265c:	200000d4 	.word	0x200000d4
 8002660:	20001cd8 	.word	0x20001cd8
 8002664:	080075bc 	.word	0x080075bc
 8002668:	20002b94 	.word	0x20002b94
 800266c:	0800754c 	.word	0x0800754c
 8002670:	08007560 	.word	0x08007560
 8002674:	08007568 	.word	0x08007568
 8002678:	080075e8 	.word	0x080075e8
 800267c:	0800756c 	.word	0x0800756c
 8002680:	08007580 	.word	0x08007580
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	4413      	add	r3, r2
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4972      	ldr	r1, [pc, #456]	; (8002858 <print_outAX25+0x470>)
 8002690:	4872      	ldr	r0, [pc, #456]	; (800285c <print_outAX25+0x474>)
 8002692:	f004 f8b7 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002696:	4871      	ldr	r0, [pc, #452]	; (800285c <print_outAX25+0x474>)
 8002698:	f7fd fdba 	bl	8000210 <strlen>
 800269c:	4603      	mov	r3, r0
 800269e:	b29a      	uxth	r2, r3
 80026a0:	230a      	movs	r3, #10
 80026a2:	496e      	ldr	r1, [pc, #440]	; (800285c <print_outAX25+0x474>)
 80026a4:	486e      	ldr	r0, [pc, #440]	; (8002860 <print_outAX25+0x478>)
 80026a6:	f003 f96c 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	3301      	adds	r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80026b6:	3318      	adds	r3, #24
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3308      	adds	r3, #8
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	429a      	cmp	r2, r3
 80026c0:	dbe0      	blt.n	8002684 <print_outAX25+0x29c>
	}
	sprintf(uartData, "\n");
 80026c2:	4a66      	ldr	r2, [pc, #408]	; (800285c <print_outAX25+0x474>)
 80026c4:	4b67      	ldr	r3, [pc, #412]	; (8002864 <print_outAX25+0x47c>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80026ca:	4864      	ldr	r0, [pc, #400]	; (800285c <print_outAX25+0x474>)
 80026cc:	f7fd fda0 	bl	8000210 <strlen>
 80026d0:	4603      	mov	r3, r0
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	230a      	movs	r3, #10
 80026d6:	4961      	ldr	r1, [pc, #388]	; (800285c <print_outAX25+0x474>)
 80026d8:	4861      	ldr	r0, [pc, #388]	; (8002860 <print_outAX25+0x478>)
 80026da:	f003 f952 	bl	8005982 <HAL_UART_Transmit>
//		for(int i = 0; i < local_packet->stuffed_Info; i++){
//			sprintf(uartData, " %d ",*(curr_mem+i));
//			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
//		}
//	}
	sprintf(uartData, "Info Field = ");
 80026de:	4a5f      	ldr	r2, [pc, #380]	; (800285c <print_outAX25+0x474>)
 80026e0:	4b61      	ldr	r3, [pc, #388]	; (8002868 <print_outAX25+0x480>)
 80026e2:	4614      	mov	r4, r2
 80026e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026e6:	6020      	str	r0, [r4, #0]
 80026e8:	6061      	str	r1, [r4, #4]
 80026ea:	60a2      	str	r2, [r4, #8]
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	81a3      	strh	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80026f0:	485a      	ldr	r0, [pc, #360]	; (800285c <print_outAX25+0x474>)
 80026f2:	f7fd fd8d 	bl	8000210 <strlen>
 80026f6:	4603      	mov	r3, r0
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	230a      	movs	r3, #10
 80026fc:	4957      	ldr	r1, [pc, #348]	; (800285c <print_outAX25+0x474>)
 80026fe:	4858      	ldr	r0, [pc, #352]	; (8002860 <print_outAX25+0x478>)
 8002700:	f003 f93f 	bl	8005982 <HAL_UART_Transmit>
	curr_mem = local_packet->Info;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800270a:	331c      	adds	r3, #28
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < local_packet->Info_Len + local_packet->stuffed_Info;i++){
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e015      	b.n	8002742 <print_outAX25+0x35a>
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271a:	4413      	add	r3, r2
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	494d      	ldr	r1, [pc, #308]	; (8002858 <print_outAX25+0x470>)
 8002722:	484e      	ldr	r0, [pc, #312]	; (800285c <print_outAX25+0x474>)
 8002724:	f004 f86e 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002728:	484c      	ldr	r0, [pc, #304]	; (800285c <print_outAX25+0x474>)
 800272a:	f7fd fd71 	bl	8000210 <strlen>
 800272e:	4603      	mov	r3, r0
 8002730:	b29a      	uxth	r2, r3
 8002732:	230a      	movs	r3, #10
 8002734:	4949      	ldr	r1, [pc, #292]	; (800285c <print_outAX25+0x474>)
 8002736:	484a      	ldr	r0, [pc, #296]	; (8002860 <print_outAX25+0x478>)
 8002738:	f003 f923 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0; i < local_packet->Info_Len + local_packet->stuffed_Info;i++){
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3301      	adds	r3, #1
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002750:	331c      	adds	r3, #28
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4413      	add	r3, r2
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	dbdc      	blt.n	8002716 <print_outAX25+0x32e>
	}
	sprintf(uartData, "\n");
 800275c:	4a3f      	ldr	r2, [pc, #252]	; (800285c <print_outAX25+0x474>)
 800275e:	4b41      	ldr	r3, [pc, #260]	; (8002864 <print_outAX25+0x47c>)
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002764:	483d      	ldr	r0, [pc, #244]	; (800285c <print_outAX25+0x474>)
 8002766:	f7fd fd53 	bl	8000210 <strlen>
 800276a:	4603      	mov	r3, r0
 800276c:	b29a      	uxth	r2, r3
 800276e:	230a      	movs	r3, #10
 8002770:	493a      	ldr	r1, [pc, #232]	; (800285c <print_outAX25+0x474>)
 8002772:	483b      	ldr	r0, [pc, #236]	; (8002860 <print_outAX25+0x478>)
 8002774:	f003 f905 	bl	8005982 <HAL_UART_Transmit>

	curr_mem = local_packet->FCS;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800277e:	3304      	adds	r3, #4
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(uartData, "FCS Field     =")	;
 8002784:	4a35      	ldr	r2, [pc, #212]	; (800285c <print_outAX25+0x474>)
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <print_outAX25+0x484>)
 8002788:	4614      	mov	r4, r2
 800278a:	461d      	mov	r5, r3
 800278c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800278e:	6020      	str	r0, [r4, #0]
 8002790:	6061      	str	r1, [r4, #4]
 8002792:	60a2      	str	r2, [r4, #8]
 8002794:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002796:	4831      	ldr	r0, [pc, #196]	; (800285c <print_outAX25+0x474>)
 8002798:	f7fd fd3a 	bl	8000210 <strlen>
 800279c:	4603      	mov	r3, r0
 800279e:	b29a      	uxth	r2, r3
 80027a0:	230a      	movs	r3, #10
 80027a2:	492e      	ldr	r1, [pc, #184]	; (800285c <print_outAX25+0x474>)
 80027a4:	482e      	ldr	r0, [pc, #184]	; (8002860 <print_outAX25+0x478>)
 80027a6:	f003 f8ec 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	e015      	b.n	80027dc <print_outAX25+0x3f4>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b4:	4413      	add	r3, r2
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4927      	ldr	r1, [pc, #156]	; (8002858 <print_outAX25+0x470>)
 80027bc:	4827      	ldr	r0, [pc, #156]	; (800285c <print_outAX25+0x474>)
 80027be:	f004 f821 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80027c2:	4826      	ldr	r0, [pc, #152]	; (800285c <print_outAX25+0x474>)
 80027c4:	f7fd fd24 	bl	8000210 <strlen>
 80027c8:	4603      	mov	r3, r0
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	230a      	movs	r3, #10
 80027ce:	4923      	ldr	r1, [pc, #140]	; (800285c <print_outAX25+0x474>)
 80027d0:	4823      	ldr	r0, [pc, #140]	; (8002860 <print_outAX25+0x478>)
 80027d2:	f003 f8d6 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3301      	adds	r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3310      	adds	r3, #16
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	dbe1      	blt.n	80027b0 <print_outAX25+0x3c8>
	}

	sprintf(uartData, "\n");
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <print_outAX25+0x474>)
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <print_outAX25+0x47c>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80027f4:	4819      	ldr	r0, [pc, #100]	; (800285c <print_outAX25+0x474>)
 80027f6:	f7fd fd0b 	bl	8000210 <strlen>
 80027fa:	4603      	mov	r3, r0
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	230a      	movs	r3, #10
 8002800:	4916      	ldr	r1, [pc, #88]	; (800285c <print_outAX25+0x474>)
 8002802:	4817      	ldr	r0, [pc, #92]	; (8002860 <print_outAX25+0x478>)
 8002804:	f003 f8bd 	bl	8005982 <HAL_UART_Transmit>



	//reset bitstuff members
	local_packet->stuffed_address = 0;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800280e:	3310      	adds	r3, #16
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_control = 0;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800281a:	3314      	adds	r3, #20
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_PID = 0;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002826:	3318      	adds	r3, #24
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_Info = 0;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002832:	331c      	adds	r3, #28
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_FCS = 0;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
	local_packet->bit_stuffed_zeros = 0;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002848:	3304      	adds	r3, #4
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
}
 800284e:	bf00      	nop
 8002850:	372c      	adds	r7, #44	; 0x2c
 8002852:	46bd      	mov	sp, r7
 8002854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002856:	bf00      	nop
 8002858:	08007560 	.word	0x08007560
 800285c:	20001cd8 	.word	0x20001cd8
 8002860:	20002b94 	.word	0x20002b94
 8002864:	08007568 	.word	0x08007568
 8002868:	08007600 	.word	0x08007600
 800286c:	08007610 	.word	0x08007610

08002870 <print_KISS>:

void print_KISS(){
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	b08d      	sub	sp, #52	; 0x34
 8002874:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8002876:	4baf      	ldr	r3, [pc, #700]	; (8002b34 <print_KISS+0x2c4>)
 8002878:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002880:	330c      	adds	r3, #12
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 8002886:	4bac      	ldr	r3, [pc, #688]	; (8002b38 <print_KISS+0x2c8>)
 8002888:	4aac      	ldr	r2, [pc, #688]	; (8002b3c <print_KISS+0x2cc>)
 800288a:	4614      	mov	r4, r2
 800288c:	469c      	mov	ip, r3
 800288e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002892:	4665      	mov	r5, ip
 8002894:	4626      	mov	r6, r4
 8002896:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002898:	6028      	str	r0, [r5, #0]
 800289a:	6069      	str	r1, [r5, #4]
 800289c:	60aa      	str	r2, [r5, #8]
 800289e:	60eb      	str	r3, [r5, #12]
 80028a0:	3410      	adds	r4, #16
 80028a2:	f10c 0c10 	add.w	ip, ip, #16
 80028a6:	4574      	cmp	r4, lr
 80028a8:	d1f3      	bne.n	8002892 <print_KISS+0x22>
 80028aa:	4663      	mov	r3, ip
 80028ac:	4622      	mov	r2, r4
 80028ae:	6810      	ldr	r0, [r2, #0]
 80028b0:	6018      	str	r0, [r3, #0]
 80028b2:	8891      	ldrh	r1, [r2, #4]
 80028b4:	7992      	ldrb	r2, [r2, #6]
 80028b6:	8099      	strh	r1, [r3, #4]
 80028b8:	719a      	strb	r2, [r3, #6]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80028ba:	489f      	ldr	r0, [pc, #636]	; (8002b38 <print_KISS+0x2c8>)
 80028bc:	f7fd fca8 	bl	8000210 <strlen>
 80028c0:	4603      	mov	r3, r0
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	230a      	movs	r3, #10
 80028c6:	499c      	ldr	r1, [pc, #624]	; (8002b38 <print_KISS+0x2c8>)
 80028c8:	489d      	ldr	r0, [pc, #628]	; (8002b40 <print_KISS+0x2d0>)
 80028ca:	f003 f85a 	bl	8005982 <HAL_UART_Transmit>

	//Print Start Flag
	curr_mem = (local_packet->address + address_len + 16 - 1);//start at the flag start
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80028d4:	3310      	adds	r3, #16
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	337f      	adds	r3, #127	; 0x7f
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 80028dc:	4a96      	ldr	r2, [pc, #600]	; (8002b38 <print_KISS+0x2c8>)
 80028de:	4b99      	ldr	r3, [pc, #612]	; (8002b44 <print_KISS+0x2d4>)
 80028e0:	4615      	mov	r5, r2
 80028e2:	461c      	mov	r4, r3
 80028e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e6:	6028      	str	r0, [r5, #0]
 80028e8:	6069      	str	r1, [r5, #4]
 80028ea:	60aa      	str	r2, [r5, #8]
 80028ec:	60eb      	str	r3, [r5, #12]
 80028ee:	8823      	ldrh	r3, [r4, #0]
 80028f0:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80028f2:	4891      	ldr	r0, [pc, #580]	; (8002b38 <print_KISS+0x2c8>)
 80028f4:	f7fd fc8c 	bl	8000210 <strlen>
 80028f8:	4603      	mov	r3, r0
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	230a      	movs	r3, #10
 80028fe:	498e      	ldr	r1, [pc, #568]	; (8002b38 <print_KISS+0x2c8>)
 8002900:	488f      	ldr	r0, [pc, #572]	; (8002b40 <print_KISS+0x2d0>)
 8002902:	f003 f83e 	bl	8005982 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002906:	2300      	movs	r3, #0
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
 800290a:	e016      	b.n	800293a <print_KISS+0xca>
		sprintf(uartData, " %d ",*(curr_mem-i));
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	425b      	negs	r3, r3
 8002910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002912:	4413      	add	r3, r2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	498b      	ldr	r1, [pc, #556]	; (8002b48 <print_KISS+0x2d8>)
 800291a:	4887      	ldr	r0, [pc, #540]	; (8002b38 <print_KISS+0x2c8>)
 800291c:	f003 ff72 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002920:	4885      	ldr	r0, [pc, #532]	; (8002b38 <print_KISS+0x2c8>)
 8002922:	f7fd fc75 	bl	8000210 <strlen>
 8002926:	4603      	mov	r3, r0
 8002928:	b29a      	uxth	r2, r3
 800292a:	230a      	movs	r3, #10
 800292c:	4982      	ldr	r1, [pc, #520]	; (8002b38 <print_KISS+0x2c8>)
 800292e:	4884      	ldr	r0, [pc, #528]	; (8002b40 <print_KISS+0x2d0>)
 8002930:	f003 f827 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	3301      	adds	r3, #1
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	2b07      	cmp	r3, #7
 800293e:	dde5      	ble.n	800290c <print_KISS+0x9c>
	}
	sprintf(uartData, "\n");
 8002940:	4a7d      	ldr	r2, [pc, #500]	; (8002b38 <print_KISS+0x2c8>)
 8002942:	4b82      	ldr	r3, [pc, #520]	; (8002b4c <print_KISS+0x2dc>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002948:	487b      	ldr	r0, [pc, #492]	; (8002b38 <print_KISS+0x2c8>)
 800294a:	f7fd fc61 	bl	8000210 <strlen>
 800294e:	4603      	mov	r3, r0
 8002950:	b29a      	uxth	r2, r3
 8002952:	230a      	movs	r3, #10
 8002954:	4978      	ldr	r1, [pc, #480]	; (8002b38 <print_KISS+0x2c8>)
 8002956:	487a      	ldr	r0, [pc, #488]	; (8002b40 <print_KISS+0x2d0>)
 8002958:	f003 f813 	bl	8005982 <HAL_UART_Transmit>

	curr_mem = (local_packet->address) + address_len - 1;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002962:	3310      	adds	r3, #16
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	336f      	adds	r3, #111	; 0x6f
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
 800296e:	e041      	b.n	80029f4 <print_KISS+0x184>
		sprintf(uartData, "Address Field %d =",i+1);
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	3301      	adds	r3, #1
 8002974:	461a      	mov	r2, r3
 8002976:	4976      	ldr	r1, [pc, #472]	; (8002b50 <print_KISS+0x2e0>)
 8002978:	486f      	ldr	r0, [pc, #444]	; (8002b38 <print_KISS+0x2c8>)
 800297a:	f003 ff43 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800297e:	486e      	ldr	r0, [pc, #440]	; (8002b38 <print_KISS+0x2c8>)
 8002980:	f7fd fc46 	bl	8000210 <strlen>
 8002984:	4603      	mov	r3, r0
 8002986:	b29a      	uxth	r2, r3
 8002988:	230a      	movs	r3, #10
 800298a:	496b      	ldr	r1, [pc, #428]	; (8002b38 <print_KISS+0x2c8>)
 800298c:	486c      	ldr	r0, [pc, #432]	; (8002b40 <print_KISS+0x2d0>)
 800298e:	f002 fff8 	bl	8005982 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
 8002996:	e016      	b.n	80029c6 <print_KISS+0x156>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	425b      	negs	r3, r3
 800299c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800299e:	4413      	add	r3, r2
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4968      	ldr	r1, [pc, #416]	; (8002b48 <print_KISS+0x2d8>)
 80029a6:	4864      	ldr	r0, [pc, #400]	; (8002b38 <print_KISS+0x2c8>)
 80029a8:	f003 ff2c 	bl	8006804 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80029ac:	4862      	ldr	r0, [pc, #392]	; (8002b38 <print_KISS+0x2c8>)
 80029ae:	f7fd fc2f 	bl	8000210 <strlen>
 80029b2:	4603      	mov	r3, r0
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	230a      	movs	r3, #10
 80029b8:	495f      	ldr	r1, [pc, #380]	; (8002b38 <print_KISS+0x2c8>)
 80029ba:	4861      	ldr	r0, [pc, #388]	; (8002b40 <print_KISS+0x2d0>)
 80029bc:	f002 ffe1 	bl	8005982 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	3301      	adds	r3, #1
 80029c4:	623b      	str	r3, [r7, #32]
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	2b07      	cmp	r3, #7
 80029ca:	dde5      	ble.n	8002998 <print_KISS+0x128>
		}
		curr_mem -= 8;
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	3b08      	subs	r3, #8
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80029d2:	4a59      	ldr	r2, [pc, #356]	; (8002b38 <print_KISS+0x2c8>)
 80029d4:	4b5d      	ldr	r3, [pc, #372]	; (8002b4c <print_KISS+0x2dc>)
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 80029da:	4857      	ldr	r0, [pc, #348]	; (8002b38 <print_KISS+0x2c8>)
 80029dc:	f7fd fc18 	bl	8000210 <strlen>
 80029e0:	4603      	mov	r3, r0
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	230a      	movs	r3, #10
 80029e6:	4954      	ldr	r1, [pc, #336]	; (8002b38 <print_KISS+0x2c8>)
 80029e8:	4855      	ldr	r0, [pc, #340]	; (8002b40 <print_KISS+0x2d0>)
 80029ea:	f002 ffca 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<address_len/8;i++){
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	3301      	adds	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	2b0d      	cmp	r3, #13
 80029f8:	ddba      	ble.n	8002970 <print_KISS+0x100>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002a00:	3314      	adds	r3, #20
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 8002a06:	4a4c      	ldr	r2, [pc, #304]	; (8002b38 <print_KISS+0x2c8>)
 8002a08:	4b52      	ldr	r3, [pc, #328]	; (8002b54 <print_KISS+0x2e4>)
 8002a0a:	4615      	mov	r5, r2
 8002a0c:	461c      	mov	r4, r3
 8002a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a10:	6028      	str	r0, [r5, #0]
 8002a12:	6069      	str	r1, [r5, #4]
 8002a14:	60aa      	str	r2, [r5, #8]
 8002a16:	60eb      	str	r3, [r5, #12]
 8002a18:	8823      	ldrh	r3, [r4, #0]
 8002a1a:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002a1c:	4846      	ldr	r0, [pc, #280]	; (8002b38 <print_KISS+0x2c8>)
 8002a1e:	f7fd fbf7 	bl	8000210 <strlen>
 8002a22:	4603      	mov	r3, r0
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	230a      	movs	r3, #10
 8002a28:	4943      	ldr	r1, [pc, #268]	; (8002b38 <print_KISS+0x2c8>)
 8002a2a:	4845      	ldr	r0, [pc, #276]	; (8002b40 <print_KISS+0x2d0>)
 8002a2c:	f002 ffa9 	bl	8005982 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	e017      	b.n	8002a66 <print_KISS+0x1f6>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f1c3 0307 	rsb	r3, r3, #7
 8002a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a3e:	4413      	add	r3, r2
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	4940      	ldr	r1, [pc, #256]	; (8002b48 <print_KISS+0x2d8>)
 8002a46:	483c      	ldr	r0, [pc, #240]	; (8002b38 <print_KISS+0x2c8>)
 8002a48:	f003 fedc 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002a4c:	483a      	ldr	r0, [pc, #232]	; (8002b38 <print_KISS+0x2c8>)
 8002a4e:	f7fd fbdf 	bl	8000210 <strlen>
 8002a52:	4603      	mov	r3, r0
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	230a      	movs	r3, #10
 8002a58:	4937      	ldr	r1, [pc, #220]	; (8002b38 <print_KISS+0x2c8>)
 8002a5a:	4839      	ldr	r0, [pc, #228]	; (8002b40 <print_KISS+0x2d0>)
 8002a5c:	f002 ff91 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	3301      	adds	r3, #1
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2b07      	cmp	r3, #7
 8002a6a:	dde4      	ble.n	8002a36 <print_KISS+0x1c6>
	}
	sprintf(uartData, "\n");
 8002a6c:	4a32      	ldr	r2, [pc, #200]	; (8002b38 <print_KISS+0x2c8>)
 8002a6e:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <print_KISS+0x2dc>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002a74:	4830      	ldr	r0, [pc, #192]	; (8002b38 <print_KISS+0x2c8>)
 8002a76:	f7fd fbcb 	bl	8000210 <strlen>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	230a      	movs	r3, #10
 8002a80:	492d      	ldr	r1, [pc, #180]	; (8002b38 <print_KISS+0x2c8>)
 8002a82:	482f      	ldr	r0, [pc, #188]	; (8002b40 <print_KISS+0x2d0>)
 8002a84:	f002 ff7d 	bl	8005982 <HAL_UART_Transmit>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002a8e:	3318      	adds	r3, #24
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8002a94:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <print_KISS+0x2c8>)
 8002a96:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <print_KISS+0x2e8>)
 8002a98:	4615      	mov	r5, r2
 8002a9a:	461c      	mov	r4, r3
 8002a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9e:	6028      	str	r0, [r5, #0]
 8002aa0:	6069      	str	r1, [r5, #4]
 8002aa2:	60aa      	str	r2, [r5, #8]
 8002aa4:	60eb      	str	r3, [r5, #12]
 8002aa6:	8823      	ldrh	r3, [r4, #0]
 8002aa8:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002aaa:	4823      	ldr	r0, [pc, #140]	; (8002b38 <print_KISS+0x2c8>)
 8002aac:	f7fd fbb0 	bl	8000210 <strlen>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	230a      	movs	r3, #10
 8002ab6:	4920      	ldr	r1, [pc, #128]	; (8002b38 <print_KISS+0x2c8>)
 8002ab8:	4821      	ldr	r0, [pc, #132]	; (8002b40 <print_KISS+0x2d0>)
 8002aba:	f002 ff62 	bl	8005982 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	e017      	b.n	8002af4 <print_KISS+0x284>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f1c3 0307 	rsb	r3, r3, #7
 8002aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	491d      	ldr	r1, [pc, #116]	; (8002b48 <print_KISS+0x2d8>)
 8002ad4:	4818      	ldr	r0, [pc, #96]	; (8002b38 <print_KISS+0x2c8>)
 8002ad6:	f003 fe95 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002ada:	4817      	ldr	r0, [pc, #92]	; (8002b38 <print_KISS+0x2c8>)
 8002adc:	f7fd fb98 	bl	8000210 <strlen>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	230a      	movs	r3, #10
 8002ae6:	4914      	ldr	r1, [pc, #80]	; (8002b38 <print_KISS+0x2c8>)
 8002ae8:	4815      	ldr	r0, [pc, #84]	; (8002b40 <print_KISS+0x2d0>)
 8002aea:	f002 ff4a 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	3301      	adds	r3, #1
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b07      	cmp	r3, #7
 8002af8:	dde4      	ble.n	8002ac4 <print_KISS+0x254>
	}
	sprintf(uartData, "\n");
 8002afa:	4a0f      	ldr	r2, [pc, #60]	; (8002b38 <print_KISS+0x2c8>)
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <print_KISS+0x2dc>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b02:	480d      	ldr	r0, [pc, #52]	; (8002b38 <print_KISS+0x2c8>)
 8002b04:	f7fd fb84 	bl	8000210 <strlen>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	230a      	movs	r3, #10
 8002b0e:	490a      	ldr	r1, [pc, #40]	; (8002b38 <print_KISS+0x2c8>)
 8002b10:	480b      	ldr	r0, [pc, #44]	; (8002b40 <print_KISS+0x2d0>)
 8002b12:	f002 ff36 	bl	8005982 <HAL_UART_Transmit>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002b1c:	331c      	adds	r3, #28
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e055      	b.n	8002be0 <print_KISS+0x370>
 8002b34:	200000d4 	.word	0x200000d4
 8002b38:	20001cd8 	.word	0x20001cd8
 8002b3c:	08007620 	.word	0x08007620
 8002b40:	20002b94 	.word	0x20002b94
 8002b44:	08007658 	.word	0x08007658
 8002b48:	08007560 	.word	0x08007560
 8002b4c:	08007568 	.word	0x08007568
 8002b50:	0800754c 	.word	0x0800754c
 8002b54:	0800756c 	.word	0x0800756c
 8002b58:	08007580 	.word	0x08007580
		sprintf(uartData, "Info Field %d    =",i+1)	;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	461a      	mov	r2, r3
 8002b62:	494a      	ldr	r1, [pc, #296]	; (8002c8c <print_KISS+0x41c>)
 8002b64:	484a      	ldr	r0, [pc, #296]	; (8002c90 <print_KISS+0x420>)
 8002b66:	f003 fe4d 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b6a:	4849      	ldr	r0, [pc, #292]	; (8002c90 <print_KISS+0x420>)
 8002b6c:	f7fd fb50 	bl	8000210 <strlen>
 8002b70:	4603      	mov	r3, r0
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	230a      	movs	r3, #10
 8002b76:	4946      	ldr	r1, [pc, #280]	; (8002c90 <print_KISS+0x420>)
 8002b78:	4846      	ldr	r0, [pc, #280]	; (8002c94 <print_KISS+0x424>)
 8002b7a:	f002 ff02 	bl	8005982 <HAL_UART_Transmit>

		for(int j = 0;j<8;j++){
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	e016      	b.n	8002bb2 <print_KISS+0x342>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	425b      	negs	r3, r3
 8002b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4941      	ldr	r1, [pc, #260]	; (8002c98 <print_KISS+0x428>)
 8002b92:	483f      	ldr	r0, [pc, #252]	; (8002c90 <print_KISS+0x420>)
 8002b94:	f003 fe36 	bl	8006804 <siprintf>
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002b98:	483d      	ldr	r0, [pc, #244]	; (8002c90 <print_KISS+0x420>)
 8002b9a:	f7fd fb39 	bl	8000210 <strlen>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	230a      	movs	r3, #10
 8002ba4:	493a      	ldr	r1, [pc, #232]	; (8002c90 <print_KISS+0x420>)
 8002ba6:	483b      	ldr	r0, [pc, #236]	; (8002c94 <print_KISS+0x424>)
 8002ba8:	f002 feeb 	bl	8005982 <HAL_UART_Transmit>
		for(int j = 0;j<8;j++){
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b07      	cmp	r3, #7
 8002bb6:	dde5      	ble.n	8002b84 <print_KISS+0x314>
		}
		curr_mem -= 8;
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	3b08      	subs	r3, #8
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 8002bbe:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <print_KISS+0x420>)
 8002bc0:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <print_KISS+0x42c>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002bc6:	4832      	ldr	r0, [pc, #200]	; (8002c90 <print_KISS+0x420>)
 8002bc8:	f7fd fb22 	bl	8000210 <strlen>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	230a      	movs	r3, #10
 8002bd2:	492f      	ldr	r1, [pc, #188]	; (8002c90 <print_KISS+0x420>)
 8002bd4:	482f      	ldr	r0, [pc, #188]	; (8002c94 <print_KISS+0x424>)
 8002bd6:	f002 fed4 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	da00      	bge.n	8002bee <print_KISS+0x37e>
 8002bec:	3307      	adds	r3, #7
 8002bee:	10db      	asrs	r3, r3, #3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	dbb1      	blt.n	8002b5c <print_KISS+0x2ec>
	}

	//Print Stop Flag
	curr_mem = local_packet->KISS_PACKET;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 8002c00:	4a23      	ldr	r2, [pc, #140]	; (8002c90 <print_KISS+0x420>)
 8002c02:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <print_KISS+0x430>)
 8002c04:	4615      	mov	r5, r2
 8002c06:	461c      	mov	r4, r3
 8002c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c0a:	6028      	str	r0, [r5, #0]
 8002c0c:	6069      	str	r1, [r5, #4]
 8002c0e:	60aa      	str	r2, [r5, #8]
 8002c10:	60eb      	str	r3, [r5, #12]
 8002c12:	8823      	ldrh	r3, [r4, #0]
 8002c14:	822b      	strh	r3, [r5, #16]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c16:	481e      	ldr	r0, [pc, #120]	; (8002c90 <print_KISS+0x420>)
 8002c18:	f7fd fafa 	bl	8000210 <strlen>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	230a      	movs	r3, #10
 8002c22:	491b      	ldr	r1, [pc, #108]	; (8002c90 <print_KISS+0x420>)
 8002c24:	481b      	ldr	r0, [pc, #108]	; (8002c94 <print_KISS+0x424>)
 8002c26:	f002 feac 	bl	8005982 <HAL_UART_Transmit>

	for(int i = 0;i<8;i++){
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e017      	b.n	8002c60 <print_KISS+0x3f0>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f1c3 0307 	rsb	r3, r3, #7
 8002c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c38:	4413      	add	r3, r2
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4916      	ldr	r1, [pc, #88]	; (8002c98 <print_KISS+0x428>)
 8002c40:	4813      	ldr	r0, [pc, #76]	; (8002c90 <print_KISS+0x420>)
 8002c42:	f003 fddf 	bl	8006804 <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c46:	4812      	ldr	r0, [pc, #72]	; (8002c90 <print_KISS+0x420>)
 8002c48:	f7fd fae2 	bl	8000210 <strlen>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	230a      	movs	r3, #10
 8002c52:	490f      	ldr	r1, [pc, #60]	; (8002c90 <print_KISS+0x420>)
 8002c54:	480f      	ldr	r0, [pc, #60]	; (8002c94 <print_KISS+0x424>)
 8002c56:	f002 fe94 	bl	8005982 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b07      	cmp	r3, #7
 8002c64:	dde4      	ble.n	8002c30 <print_KISS+0x3c0>
	}
	sprintf(uartData, "\n");
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <print_KISS+0x420>)
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <print_KISS+0x42c>)
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8002c6e:	4808      	ldr	r0, [pc, #32]	; (8002c90 <print_KISS+0x420>)
 8002c70:	f7fd face 	bl	8000210 <strlen>
 8002c74:	4603      	mov	r3, r0
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	230a      	movs	r3, #10
 8002c7a:	4905      	ldr	r1, [pc, #20]	; (8002c90 <print_KISS+0x420>)
 8002c7c:	4805      	ldr	r0, [pc, #20]	; (8002c94 <print_KISS+0x424>)
 8002c7e:	f002 fe80 	bl	8005982 <HAL_UART_Transmit>

}
 8002c82:	bf00      	nop
 8002c84:	3734      	adds	r7, #52	; 0x34
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	08007594 	.word	0x08007594
 8002c90:	20001cd8 	.word	0x20001cd8
 8002c94:	20002b94 	.word	0x20002b94
 8002c98:	08007560 	.word	0x08007560
 8002c9c:	08007568 	.word	0x08007568
 8002ca0:	0800766c 	.word	0x0800766c

08002ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ca8:	f000 fd18 	bl	80036dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cac:	f000 f820 	bl	8002cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cb0:	f000 f9f0 	bl	8003094 <MX_GPIO_Init>
  MX_DMA_Init();
 8002cb4:	f000 f9ce 	bl	8003054 <MX_DMA_Init>
  MX_DAC_Init();
 8002cb8:	f000 f888 	bl	8002dcc <MX_DAC_Init>
  MX_TIM2_Init();
 8002cbc:	f000 f8b0 	bl	8002e20 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002cc0:	f000 f8fa 	bl	8002eb8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002cc4:	f000 f994 	bl	8002ff0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002cc8:	f000 f944 	bl	8002f54 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8002ccc:	4806      	ldr	r0, [pc, #24]	; (8002ce8 <main+0x44>)
 8002cce:	f002 f9e6 	bl	800509e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8002cd2:	4806      	ldr	r0, [pc, #24]	; (8002cec <main+0x48>)
 8002cd4:	f002 fa32 	bl	800513c <HAL_TIM_Base_Start_IT>

	uart_gpio_init();
 8002cd8:	f000 fabc 	bl	8003254 <uart_gpio_init>

	initProgram(false);
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7fe fd51 	bl	8001784 <initProgram>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tx_rx();
 8002ce2:	f7fd fd47 	bl	8000774 <tx_rx>
 8002ce6:	e7fc      	b.n	8002ce2 <main+0x3e>
 8002ce8:	20002b54 	.word	0x20002b54
 8002cec:	2000289c 	.word	0x2000289c

08002cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b094      	sub	sp, #80	; 0x50
 8002cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cf6:	f107 031c 	add.w	r3, r7, #28
 8002cfa:	2234      	movs	r2, #52	; 0x34
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fd78 	bl	80067f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d04:	f107 0308 	add.w	r3, r7, #8
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d14:	2300      	movs	r3, #0
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <SystemClock_Config+0xd4>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <SystemClock_Config+0xd4>)
 8002d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d22:	6413      	str	r3, [r2, #64]	; 0x40
 8002d24:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <SystemClock_Config+0xd4>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d30:	2300      	movs	r3, #0
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <SystemClock_Config+0xd8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d3c:	4a22      	ldr	r2, [pc, #136]	; (8002dc8 <SystemClock_Config+0xd8>)
 8002d3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <SystemClock_Config+0xd8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d50:	2301      	movs	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d64:	2304      	movs	r3, #4
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002d68:	235a      	movs	r3, #90	; 0x5a
 8002d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d70:	2302      	movs	r3, #2
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d74:	2302      	movs	r3, #2
 8002d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d78:	f107 031c 	add.w	r3, r7, #28
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 ff09 	bl	8004b94 <HAL_RCC_OscConfig>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002d88:	f000 fa8c 	bl	80032a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d8c:	230f      	movs	r3, #15
 8002d8e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d90:	2302      	movs	r3, #2
 8002d92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002da4:	f107 0308 	add.w	r3, r7, #8
 8002da8:	2102      	movs	r1, #2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 fc38 	bl	8004620 <HAL_RCC_ClockConfig>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002db6:	f000 fa75 	bl	80032a4 <Error_Handler>
  }
}
 8002dba:	bf00      	nop
 8002dbc:	3750      	adds	r7, #80	; 0x50
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40007000 	.word	0x40007000

08002dcc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002dd2:	463b      	mov	r3, r7
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002dda:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <MX_DAC_Init+0x4c>)
 8002ddc:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <MX_DAC_Init+0x50>)
 8002dde:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002de0:	480d      	ldr	r0, [pc, #52]	; (8002e18 <MX_DAC_Init+0x4c>)
 8002de2:	f000 fe2e 	bl	8003a42 <HAL_DAC_Init>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002dec:	f000 fa5a 	bl	80032a4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002df0:	2324      	movs	r3, #36	; 0x24
 8002df2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002df8:	463b      	mov	r3, r7
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4806      	ldr	r0, [pc, #24]	; (8002e18 <MX_DAC_Init+0x4c>)
 8002e00:	f000 fe82 	bl	8003b08 <HAL_DAC_ConfigChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002e0a:	f000 fa4b 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20002b40 	.word	0x20002b40
 8002e1c:	40007400 	.word	0x40007400

08002e20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e26:	f107 0308 	add.w	r3, r7, #8
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e34:	463b      	mov	r3, r7
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e46:	2208      	movs	r2, #8
 8002e48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e52:	2263      	movs	r2, #99	; 0x63
 8002e54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e5c:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e62:	4814      	ldr	r0, [pc, #80]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e64:	f002 f8f0 	bl	8005048 <HAL_TIM_Base_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002e6e:	f000 fa19 	bl	80032a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e78:	f107 0308 	add.w	r3, r7, #8
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	480d      	ldr	r0, [pc, #52]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e80:	f002 fa88 	bl	8005394 <HAL_TIM_ConfigClockSource>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002e8a:	f000 fa0b 	bl	80032a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e96:	463b      	mov	r3, r7
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4806      	ldr	r0, [pc, #24]	; (8002eb4 <MX_TIM2_Init+0x94>)
 8002e9c:	f002 fc94 	bl	80057c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002ea6:	f000 f9fd 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20002b54 	.word	0x20002b54

08002eb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ebe:	f107 0308 	add.w	r3, r7, #8
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ecc:	463b      	mov	r3, r7
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <MX_TIM3_Init+0x94>)
 8002ed6:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <MX_TIM3_Init+0x98>)
 8002ed8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002eda:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <MX_TIM3_Init+0x94>)
 8002edc:	2259      	movs	r2, #89	; 0x59
 8002ede:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <MX_TIM3_Init+0x94>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 833;
 8002ee6:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <MX_TIM3_Init+0x94>)
 8002ee8:	f240 3241 	movw	r2, #833	; 0x341
 8002eec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <MX_TIM3_Init+0x94>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ef4:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <MX_TIM3_Init+0x94>)
 8002ef6:	2280      	movs	r2, #128	; 0x80
 8002ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002efa:	4814      	ldr	r0, [pc, #80]	; (8002f4c <MX_TIM3_Init+0x94>)
 8002efc:	f002 f8a4 	bl	8005048 <HAL_TIM_Base_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002f06:	f000 f9cd 	bl	80032a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f10:	f107 0308 	add.w	r3, r7, #8
 8002f14:	4619      	mov	r1, r3
 8002f16:	480d      	ldr	r0, [pc, #52]	; (8002f4c <MX_TIM3_Init+0x94>)
 8002f18:	f002 fa3c 	bl	8005394 <HAL_TIM_ConfigClockSource>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002f22:	f000 f9bf 	bl	80032a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f2e:	463b      	mov	r3, r7
 8002f30:	4619      	mov	r1, r3
 8002f32:	4806      	ldr	r0, [pc, #24]	; (8002f4c <MX_TIM3_Init+0x94>)
 8002f34:	f002 fc48 	bl	80057c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002f3e:	f000 f9b1 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000289c 	.word	0x2000289c
 8002f50:	40000400 	.word	0x40000400

08002f54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f5a:	f107 0308 	add.w	r3, r7, #8
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f68:	463b      	mov	r3, r7
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <MX_TIM4_Init+0x94>)
 8002f72:	4a1e      	ldr	r2, [pc, #120]	; (8002fec <MX_TIM4_Init+0x98>)
 8002f74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <MX_TIM4_Init+0x94>)
 8002f78:	2259      	movs	r2, #89	; 0x59
 8002f7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <MX_TIM4_Init+0x94>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002f82:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <MX_TIM4_Init+0x94>)
 8002f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <MX_TIM4_Init+0x94>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f90:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <MX_TIM4_Init+0x94>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f96:	4814      	ldr	r0, [pc, #80]	; (8002fe8 <MX_TIM4_Init+0x94>)
 8002f98:	f002 f856 	bl	8005048 <HAL_TIM_Base_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002fa2:	f000 f97f 	bl	80032a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002faa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002fac:	f107 0308 	add.w	r3, r7, #8
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <MX_TIM4_Init+0x94>)
 8002fb4:	f002 f9ee 	bl	8005394 <HAL_TIM_ConfigClockSource>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002fbe:	f000 f971 	bl	80032a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fca:	463b      	mov	r3, r7
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4806      	ldr	r0, [pc, #24]	; (8002fe8 <MX_TIM4_Init+0x94>)
 8002fd0:	f002 fbfa 	bl	80057c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002fda:	f000 f963 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002fde:	bf00      	nop
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20002dd4 	.word	0x20002dd4
 8002fec:	40000800 	.word	0x40000800

08002ff0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ff4:	4b15      	ldr	r3, [pc, #84]	; (800304c <MX_USART2_UART_Init+0x5c>)
 8002ff6:	4a16      	ldr	r2, [pc, #88]	; (8003050 <MX_USART2_UART_Init+0x60>)
 8002ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <MX_USART2_UART_Init+0x5c>)
 8002ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <MX_USART2_UART_Init+0x5c>)
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003008:	4b10      	ldr	r3, [pc, #64]	; (800304c <MX_USART2_UART_Init+0x5c>)
 800300a:	2200      	movs	r2, #0
 800300c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800300e:	4b0f      	ldr	r3, [pc, #60]	; (800304c <MX_USART2_UART_Init+0x5c>)
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <MX_USART2_UART_Init+0x5c>)
 8003016:	220c      	movs	r2, #12
 8003018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <MX_USART2_UART_Init+0x5c>)
 800301c:	2200      	movs	r2, #0
 800301e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <MX_USART2_UART_Init+0x5c>)
 8003022:	2200      	movs	r2, #0
 8003024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003026:	4809      	ldr	r0, [pc, #36]	; (800304c <MX_USART2_UART_Init+0x5c>)
 8003028:	f002 fc5e 	bl	80058e8 <HAL_UART_Init>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003032:	f000 f937 	bl	80032a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	2026      	movs	r0, #38	; 0x26
 800303c:	f000 fcbd 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003040:	2026      	movs	r0, #38	; 0x26
 8003042:	f000 fcd6 	bl	80039f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20002b94 	.word	0x20002b94
 8003050:	40004400 	.word	0x40004400

08003054 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <MX_DMA_Init+0x3c>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a0b      	ldr	r2, [pc, #44]	; (8003090 <MX_DMA_Init+0x3c>)
 8003064:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <MX_DMA_Init+0x3c>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	2010      	movs	r0, #16
 800307c:	f000 fc9d 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003080:	2010      	movs	r0, #16
 8003082:	f000 fcb6 	bl	80039f2 <HAL_NVIC_EnableIRQ>

}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800

08003094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309a:	f107 0314 	add.w	r3, r7, #20
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	60da      	str	r2, [r3, #12]
 80030a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	4b45      	ldr	r3, [pc, #276]	; (80031c4 <MX_GPIO_Init+0x130>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	4a44      	ldr	r2, [pc, #272]	; (80031c4 <MX_GPIO_Init+0x130>)
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ba:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <MX_GPIO_Init+0x130>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	4b3e      	ldr	r3, [pc, #248]	; (80031c4 <MX_GPIO_Init+0x130>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a3d      	ldr	r2, [pc, #244]	; (80031c4 <MX_GPIO_Init+0x130>)
 80030d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <MX_GPIO_Init+0x130>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <MX_GPIO_Init+0x130>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a36      	ldr	r2, [pc, #216]	; (80031c4 <MX_GPIO_Init+0x130>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b34      	ldr	r3, [pc, #208]	; (80031c4 <MX_GPIO_Init+0x130>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	4b30      	ldr	r3, [pc, #192]	; (80031c4 <MX_GPIO_Init+0x130>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a2f      	ldr	r2, [pc, #188]	; (80031c4 <MX_GPIO_Init+0x130>)
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <MX_GPIO_Init+0x130>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800311a:	2200      	movs	r2, #0
 800311c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003120:	4829      	ldr	r0, [pc, #164]	; (80031c8 <MX_GPIO_Init+0x134>)
 8003122:	f001 fa4b 	bl	80045bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	2110      	movs	r1, #16
 800312a:	4828      	ldr	r0, [pc, #160]	; (80031cc <MX_GPIO_Init+0x138>)
 800312c:	f001 fa46 	bl	80045bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003136:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <MX_GPIO_Init+0x13c>)
 8003138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	4619      	mov	r1, r3
 8003144:	4821      	ldr	r0, [pc, #132]	; (80031cc <MX_GPIO_Init+0x138>)
 8003146:	f001 f8a7 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800314a:	2301      	movs	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800314e:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <MX_GPIO_Init+0x140>)
 8003150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	4619      	mov	r1, r3
 800315c:	481a      	ldr	r0, [pc, #104]	; (80031c8 <MX_GPIO_Init+0x134>)
 800315e:	f001 f89b 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8003162:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003168:	2301      	movs	r3, #1
 800316a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4619      	mov	r1, r3
 800317a:	4813      	ldr	r0, [pc, #76]	; (80031c8 <MX_GPIO_Init+0x134>)
 800317c:	f001 f88c 	bl	8004298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8003180:	2310      	movs	r3, #16
 8003182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003184:	2301      	movs	r3, #1
 8003186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318c:	2300      	movs	r3, #0
 800318e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	4619      	mov	r1, r3
 8003196:	480d      	ldr	r0, [pc, #52]	; (80031cc <MX_GPIO_Init+0x138>)
 8003198:	f001 f87e 	bl	8004298 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	2006      	movs	r0, #6
 80031a2:	f000 fc0a 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80031a6:	2006      	movs	r0, #6
 80031a8:	f000 fc23 	bl	80039f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80031ac:	2200      	movs	r2, #0
 80031ae:	2100      	movs	r1, #0
 80031b0:	2028      	movs	r0, #40	; 0x28
 80031b2:	f000 fc02 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031b6:	2028      	movs	r0, #40	; 0x28
 80031b8:	f000 fc1b 	bl	80039f2 <HAL_NVIC_EnableIRQ>

}
 80031bc:	bf00      	nop
 80031be:	3728      	adds	r7, #40	; 0x28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40020000 	.word	0x40020000
 80031cc:	40020800 	.word	0x40020800
 80031d0:	10210000 	.word	0x10210000
 80031d4:	10110000 	.word	0x10110000

080031d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d102      	bne.n	80031ee <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 80031e8:	f7fe fb9e 	bl	8001928 <Tim3IT>
	else
		__NOP();
}
 80031ec:	e000      	b.n	80031f0 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 80031ee:	bf00      	nop
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	2000289c 	.word	0x2000289c

080031fc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_GPIO_EXTI_Callback+0x14>
		FreqCounterPinEXTI();
 800320c:	f7fe fbc0 	bl	8001990 <FreqCounterPinEXTI>
	}
	if (GPIO_Pin == B1_Pin) {
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003216:	d103      	bne.n	8003220 <HAL_GPIO_EXTI_Callback+0x24>
		changeMode = 1;
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <HAL_GPIO_EXTI_Callback+0x30>)
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
		sprintf(uartData, "Toggle Input Detected\r\n");
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
		*/
	} else
		__NOP();
}
 800321e:	e000      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0x26>
		__NOP();
 8003220:	bf00      	nop
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	200000a5 	.word	0x200000a5

08003230 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a04      	ldr	r2, [pc, #16]	; (8003250 <HAL_UART_RxCpltCallback+0x20>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_EXCEPTION_CALLBACK();
 8003242:	f7fd fae9 	bl	8000818 <UART2_EXCEPTION_CALLBACK>
  }
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40004400 	.word	0x40004400

08003254 <uart_gpio_init>:

void uart_gpio_init()
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <uart_gpio_init+0x48>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a0e      	ldr	r2, [pc, #56]	; (800329c <uart_gpio_init+0x48>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <uart_gpio_init+0x48>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8003276:	230c      	movs	r3, #12
 8003278:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800327e:	2301      	movs	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003286:	2307      	movs	r3, #7
 8003288:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4804      	ldr	r0, [pc, #16]	; (80032a0 <uart_gpio_init+0x4c>)
 8003290:	f001 f802 	bl	8004298 <HAL_GPIO_Init>
}
 8003294:	bf00      	nop
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020000 	.word	0x40020000

080032a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_MspInit+0x4c>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <HAL_MspInit+0x4c>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_MspInit+0x4c>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_MspInit+0x4c>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	4a08      	ldr	r2, [pc, #32]	; (8003300 <HAL_MspInit+0x4c>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	; 0x40
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_MspInit+0x4c>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80032f2:	2007      	movs	r0, #7
 80032f4:	f000 fb56 	bl	80039a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800

08003304 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	; 0x28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a2f      	ldr	r2, [pc, #188]	; (80033e0 <HAL_DAC_MspInit+0xdc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d158      	bne.n	80033d8 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <HAL_DAC_MspInit+0xe0>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a2d      	ldr	r2, [pc, #180]	; (80033e4 <HAL_DAC_MspInit+0xe0>)
 8003330:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
 8003336:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_DAC_MspInit+0xe0>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <HAL_DAC_MspInit+0xe0>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	4a26      	ldr	r2, [pc, #152]	; (80033e4 <HAL_DAC_MspInit+0xe0>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6313      	str	r3, [r2, #48]	; 0x30
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_DAC_MspInit+0xe0>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800335e:	2310      	movs	r3, #16
 8003360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003362:	2303      	movs	r3, #3
 8003364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336a:	f107 0314 	add.w	r3, r7, #20
 800336e:	4619      	mov	r1, r3
 8003370:	481d      	ldr	r0, [pc, #116]	; (80033e8 <HAL_DAC_MspInit+0xe4>)
 8003372:	f000 ff91 	bl	8004298 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8003376:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 8003378:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <HAL_DAC_MspInit+0xec>)
 800337a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 800337e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003382:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 8003386:	2240      	movs	r2, #64	; 0x40
 8003388:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 800338c:	2200      	movs	r2, #0
 800338e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 8003392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003396:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 800339a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800339e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 80033a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033a6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 80033aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ae:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80033bc:	480b      	ldr	r0, [pc, #44]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 80033be:	f000 fbf1 	bl	8003ba4 <HAL_DMA_Init>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80033c8:	f7ff ff6c 	bl	80032a4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a07      	ldr	r2, [pc, #28]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 80033d0:	609a      	str	r2, [r3, #8]
 80033d2:	4a06      	ldr	r2, [pc, #24]	; (80033ec <HAL_DAC_MspInit+0xe8>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80033d8:	bf00      	nop
 80033da:	3728      	adds	r7, #40	; 0x28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40007400 	.word	0x40007400
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40020000 	.word	0x40020000
 80033ec:	200028dc 	.word	0x200028dc
 80033f0:	40026088 	.word	0x40026088

080033f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003404:	d10e      	bne.n	8003424 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_TIM_Base_MspInit+0x98>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	4a1f      	ldr	r2, [pc, #124]	; (800348c <HAL_TIM_Base_MspInit+0x98>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6413      	str	r3, [r2, #64]	; 0x40
 8003416:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_TIM_Base_MspInit+0x98>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003422:	e02e      	b.n	8003482 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a19      	ldr	r2, [pc, #100]	; (8003490 <HAL_TIM_Base_MspInit+0x9c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d116      	bne.n	800345c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <HAL_TIM_Base_MspInit+0x98>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	4a15      	ldr	r2, [pc, #84]	; (800348c <HAL_TIM_Base_MspInit+0x98>)
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	6413      	str	r3, [r2, #64]	; 0x40
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_TIM_Base_MspInit+0x98>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	2100      	movs	r1, #0
 800344e:	201d      	movs	r0, #29
 8003450:	f000 fab3 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003454:	201d      	movs	r0, #29
 8003456:	f000 facc 	bl	80039f2 <HAL_NVIC_EnableIRQ>
}
 800345a:	e012      	b.n	8003482 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0c      	ldr	r2, [pc, #48]	; (8003494 <HAL_TIM_Base_MspInit+0xa0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10d      	bne.n	8003482 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <HAL_TIM_Base_MspInit+0x98>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <HAL_TIM_Base_MspInit+0x98>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6413      	str	r3, [r2, #64]	; 0x40
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_TIM_Base_MspInit+0x98>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
}
 8003482:	bf00      	nop
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800

08003498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	; 0x28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1d      	ldr	r2, [pc, #116]	; (800352c <HAL_UART_MspInit+0x94>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d133      	bne.n	8003522 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <HAL_UART_MspInit+0x98>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <HAL_UART_MspInit+0x98>)
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ca:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_UART_MspInit+0x98>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <HAL_UART_MspInit+0x98>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	4a14      	ldr	r2, [pc, #80]	; (8003530 <HAL_UART_MspInit+0x98>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6313      	str	r3, [r2, #48]	; 0x30
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_UART_MspInit+0x98>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034f2:	230c      	movs	r3, #12
 80034f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fe:	2303      	movs	r3, #3
 8003500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003502:	2307      	movs	r3, #7
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003506:	f107 0314 	add.w	r3, r7, #20
 800350a:	4619      	mov	r1, r3
 800350c:	4809      	ldr	r0, [pc, #36]	; (8003534 <HAL_UART_MspInit+0x9c>)
 800350e:	f000 fec3 	bl	8004298 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	2026      	movs	r0, #38	; 0x26
 8003518:	f000 fa4f 	bl	80039ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800351c:	2026      	movs	r0, #38	; 0x26
 800351e:	f000 fa68 	bl	80039f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003522:	bf00      	nop
 8003524:	3728      	adds	r7, #40	; 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40004400 	.word	0x40004400
 8003530:	40023800 	.word	0x40023800
 8003534:	40020000 	.word	0x40020000

08003538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003546:	b480      	push	{r7}
 8003548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800354a:	e7fe      	b.n	800354a <HardFault_Handler+0x4>

0800354c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003550:	e7fe      	b.n	8003550 <MemManage_Handler+0x4>

08003552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003556:	e7fe      	b.n	8003556 <BusFault_Handler+0x4>

08003558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800355c:	e7fe      	b.n	800355c <UsageFault_Handler+0x4>

0800355e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800358c:	f000 f8f8 	bl	8003780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003590:	bf00      	nop
 8003592:	bd80      	pop	{r7, pc}

08003594 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003598:	2001      	movs	r0, #1
 800359a:	f001 f829 	bl	80045f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80035a8:	4802      	ldr	r0, [pc, #8]	; (80035b4 <DMA1_Stream5_IRQHandler+0x10>)
 80035aa:	f000 fc3b 	bl	8003e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	200028dc 	.word	0x200028dc

080035b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035bc:	4802      	ldr	r0, [pc, #8]	; (80035c8 <TIM3_IRQHandler+0x10>)
 80035be:	f001 fde1 	bl	8005184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	2000289c 	.word	0x2000289c

080035cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035d0:	4802      	ldr	r0, [pc, #8]	; (80035dc <USART2_IRQHandler+0x10>)
 80035d2:	f002 fac5 	bl	8005b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20002b94 	.word	0x20002b94

080035e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80035e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80035e8:	f001 f802 	bl	80045f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035f8:	4a14      	ldr	r2, [pc, #80]	; (800364c <_sbrk+0x5c>)
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <_sbrk+0x60>)
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <_sbrk+0x64>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800360c:	4b11      	ldr	r3, [pc, #68]	; (8003654 <_sbrk+0x64>)
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <_sbrk+0x68>)
 8003610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <_sbrk+0x64>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	d207      	bcs.n	8003630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003620:	f003 f89a 	bl	8006758 <__errno>
 8003624:	4602      	mov	r2, r0
 8003626:	230c      	movs	r3, #12
 8003628:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295
 800362e:	e009      	b.n	8003644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003630:	4b08      	ldr	r3, [pc, #32]	; (8003654 <_sbrk+0x64>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <_sbrk+0x64>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <_sbrk+0x64>)
 8003640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003642:	68fb      	ldr	r3, [r7, #12]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20020000 	.word	0x20020000
 8003650:	00000400 	.word	0x00000400
 8003654:	200000c8 	.word	0x200000c8
 8003658:	20002e20 	.word	0x20002e20

0800365c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <SystemInit+0x28>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	4a07      	ldr	r2, [pc, #28]	; (8003684 <SystemInit+0x28>)
 8003668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800366c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <SystemInit+0x28>)
 8003672:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003676:	609a      	str	r2, [r3, #8]
#endif
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800368c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800368e:	e003      	b.n	8003698 <LoopCopyDataInit>

08003690 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003692:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003694:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003696:	3104      	adds	r1, #4

08003698 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003698:	480b      	ldr	r0, [pc, #44]	; (80036c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800369a:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800369c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800369e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036a0:	d3f6      	bcc.n	8003690 <CopyDataInit>
  ldr  r2, =_sbss
 80036a2:	4a0b      	ldr	r2, [pc, #44]	; (80036d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036a4:	e002      	b.n	80036ac <LoopFillZerobss>

080036a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036a8:	f842 3b04 	str.w	r3, [r2], #4

080036ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036b0:	d3f9      	bcc.n	80036a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036b2:	f7ff ffd3 	bl	800365c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036b6:	f003 f855 	bl	8006764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ba:	f7ff faf3 	bl	8002ca4 <main>
  bx  lr    
 80036be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80036c4:	080076e4 	.word	0x080076e4
  ldr  r0, =_sdata
 80036c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036cc:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80036d0:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80036d4:	20002e1c 	.word	0x20002e1c

080036d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036d8:	e7fe      	b.n	80036d8 <ADC_IRQHandler>
	...

080036dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <HAL_Init+0x40>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0d      	ldr	r2, [pc, #52]	; (800371c <HAL_Init+0x40>)
 80036e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_Init+0x40>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0a      	ldr	r2, [pc, #40]	; (800371c <HAL_Init+0x40>)
 80036f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_Init+0x40>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a07      	ldr	r2, [pc, #28]	; (800371c <HAL_Init+0x40>)
 80036fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003704:	2003      	movs	r0, #3
 8003706:	f000 f94d 	bl	80039a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800370a:	2000      	movs	r0, #0
 800370c:	f000 f808 	bl	8003720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003710:	f7ff fdd0 	bl	80032b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023c00 	.word	0x40023c00

08003720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003728:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_InitTick+0x54>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <HAL_InitTick+0x58>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4619      	mov	r1, r3
 8003732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003736:	fbb3 f3f1 	udiv	r3, r3, r1
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f973 	bl	8003a2a <HAL_SYSTICK_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e00e      	b.n	800376c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b0f      	cmp	r3, #15
 8003752:	d80a      	bhi.n	800376a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003754:	2200      	movs	r2, #0
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	f000 f92d 	bl	80039ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003760:	4a06      	ldr	r2, [pc, #24]	; (800377c <HAL_InitTick+0x5c>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000014 	.word	0x20000014
 8003778:	2000001c 	.word	0x2000001c
 800377c:	20000018 	.word	0x20000018

08003780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_IncTick+0x20>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_IncTick+0x24>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4413      	add	r3, r2
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_IncTick+0x24>)
 8003792:	6013      	str	r3, [r2, #0]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	2000001c 	.word	0x2000001c
 80037a4:	20002e14 	.word	0x20002e14

080037a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return uwTick;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_GetTick+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20002e14 	.word	0x20002e14

080037c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <__NVIC_GetPriorityGrouping+0x18>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0307 	and.w	r3, r3, #7
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db0b      	blt.n	800384e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4907      	ldr	r1, [pc, #28]	; (800385c <__NVIC_EnableIRQ+0x38>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2001      	movs	r0, #1
 8003846:	fa00 f202 	lsl.w	r2, r0, r2
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000e100 	.word	0xe000e100

08003860 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	2b00      	cmp	r3, #0
 8003870:	db10      	blt.n	8003894 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	f003 021f 	and.w	r2, r3, #31
 8003878:	4909      	ldr	r1, [pc, #36]	; (80038a0 <__NVIC_DisableIRQ+0x40>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	2001      	movs	r0, #1
 8003882:	fa00 f202 	lsl.w	r2, r0, r2
 8003886:	3320      	adds	r3, #32
 8003888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800388c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000e100 	.word	0xe000e100

080038a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	db0a      	blt.n	80038ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	490c      	ldr	r1, [pc, #48]	; (80038f0 <__NVIC_SetPriority+0x4c>)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	0112      	lsls	r2, r2, #4
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	440b      	add	r3, r1
 80038c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038cc:	e00a      	b.n	80038e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4908      	ldr	r1, [pc, #32]	; (80038f4 <__NVIC_SetPriority+0x50>)
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	3b04      	subs	r3, #4
 80038dc:	0112      	lsls	r2, r2, #4
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	440b      	add	r3, r1
 80038e2:	761a      	strb	r2, [r3, #24]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000e100 	.word	0xe000e100
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f1c3 0307 	rsb	r3, r3, #7
 8003912:	2b04      	cmp	r3, #4
 8003914:	bf28      	it	cs
 8003916:	2304      	movcs	r3, #4
 8003918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3304      	adds	r3, #4
 800391e:	2b06      	cmp	r3, #6
 8003920:	d902      	bls.n	8003928 <NVIC_EncodePriority+0x30>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3b03      	subs	r3, #3
 8003926:	e000      	b.n	800392a <NVIC_EncodePriority+0x32>
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	f04f 32ff 	mov.w	r2, #4294967295
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43da      	mvns	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	401a      	ands	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003940:	f04f 31ff 	mov.w	r1, #4294967295
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43d9      	mvns	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	4313      	orrs	r3, r2
         );
}
 8003952:	4618      	mov	r0, r3
 8003954:	3724      	adds	r7, #36	; 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003970:	d301      	bcc.n	8003976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003972:	2301      	movs	r3, #1
 8003974:	e00f      	b.n	8003996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <SysTick_Config+0x40>)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800397e:	210f      	movs	r1, #15
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	f7ff ff8e 	bl	80038a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <SysTick_Config+0x40>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <SysTick_Config+0x40>)
 8003990:	2207      	movs	r2, #7
 8003992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	e000e010 	.word	0xe000e010

080039a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff07 	bl	80037c0 <__NVIC_SetPriorityGrouping>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b086      	sub	sp, #24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039cc:	f7ff ff1c 	bl	8003808 <__NVIC_GetPriorityGrouping>
 80039d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	6978      	ldr	r0, [r7, #20]
 80039d8:	f7ff ff8e 	bl	80038f8 <NVIC_EncodePriority>
 80039dc:	4602      	mov	r2, r0
 80039de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff5d 	bl	80038a4 <__NVIC_SetPriority>
}
 80039ea:	bf00      	nop
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	4603      	mov	r3, r0
 80039fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff0f 	bl	8003824 <__NVIC_EnableIRQ>
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	4603      	mov	r3, r0
 8003a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff1f 	bl	8003860 <__NVIC_DisableIRQ>
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ff94 	bl	8003960 <SysTick_Config>
 8003a38:	4603      	mov	r3, r0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e014      	b.n	8003a7e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	791b      	ldrb	r3, [r3, #4]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff fc4d 	bl	8003304 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6819      	ldr	r1, [r3, #0]
 8003a9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	400a      	ands	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43da      	mvns	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d107      	bne.n	8003adc <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f915 	bl	8003d00 <HAL_DMA_Abort>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	73fb      	strb	r3, [r7, #15]
 8003ada:	e006      	b.n	8003aea <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 f90d 	bl	8003d00 <HAL_DMA_Abort>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2204      	movs	r2, #4
 8003af4:	711a      	strb	r2, [r3, #4]
 8003af6:	e002      	b.n	8003afe <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	795b      	ldrb	r3, [r3, #5]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_DAC_ConfigChannel+0x20>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e036      	b.n	8003b96 <HAL_DAC_ConfigChannel+0x8e>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2202      	movs	r2, #2
 8003b32:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003b3c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6819      	ldr	r1, [r3, #0]
 8003b76:	22c0      	movs	r2, #192	; 0xc0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	400a      	ands	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7ff fdfa 	bl	80037a8 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e099      	b.n	8003cf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003be0:	e00f      	b.n	8003c02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003be2:	f7ff fde1 	bl	80037a8 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d908      	bls.n	8003c02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e078      	b.n	8003cf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e8      	bne.n	8003be2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <HAL_DMA_Init+0x158>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d107      	bne.n	8003c6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	4313      	orrs	r3, r2
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f023 0307 	bic.w	r3, r3, #7
 8003c82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d117      	bne.n	8003cc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fa7b 	bl	80041a4 <DMA_CheckFifoParam>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2240      	movs	r2, #64	; 0x40
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e016      	b.n	8003cf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa32 	bl	8004138 <DMA_CalcBaseAndBitshift>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	223f      	movs	r2, #63	; 0x3f
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	f010803f 	.word	0xf010803f

08003d00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d0e:	f7ff fd4b 	bl	80037a8 <HAL_GetTick>
 8003d12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d008      	beq.n	8003d32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2280      	movs	r2, #128	; 0x80
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e052      	b.n	8003dd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0216 	bic.w	r2, r2, #22
 8003d40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <HAL_DMA_Abort+0x62>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0208 	bic.w	r2, r2, #8
 8003d70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d82:	e013      	b.n	8003dac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d84:	f7ff fd10 	bl	80037a8 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b05      	cmp	r3, #5
 8003d90:	d90c      	bls.n	8003dac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2203      	movs	r2, #3
 8003da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e015      	b.n	8003dd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e4      	bne.n	8003d84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbe:	223f      	movs	r2, #63	; 0x3f
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d004      	beq.n	8003dfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2280      	movs	r2, #128	; 0x80
 8003df8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e00c      	b.n	8003e18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2205      	movs	r2, #5
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0201 	bic.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e30:	4b92      	ldr	r3, [pc, #584]	; (800407c <HAL_DMA_IRQHandler+0x258>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a92      	ldr	r2, [pc, #584]	; (8004080 <HAL_DMA_IRQHandler+0x25c>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0a9b      	lsrs	r3, r3, #10
 8003e3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4e:	2208      	movs	r2, #8
 8003e50:	409a      	lsls	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01a      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0204 	bic.w	r2, r2, #4
 8003e76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	f043 0201 	orr.w	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	2201      	movs	r2, #1
 8003e96:	409a      	lsls	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d012      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f043 0202 	orr.w	r2, r3, #2
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	2204      	movs	r2, #4
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d012      	beq.n	8003efc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00b      	beq.n	8003efc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	2204      	movs	r2, #4
 8003eea:	409a      	lsls	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef4:	f043 0204 	orr.w	r2, r3, #4
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f00:	2210      	movs	r2, #16
 8003f02:	409a      	lsls	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d043      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d03c      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	2210      	movs	r2, #16
 8003f20:	409a      	lsls	r2, r3
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d018      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d108      	bne.n	8003f54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d024      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
 8003f52:	e01f      	b.n	8003f94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01b      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
 8003f64:	e016      	b.n	8003f94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d107      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0208 	bic.w	r2, r2, #8
 8003f82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	2220      	movs	r2, #32
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 808e 	beq.w	80040c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8086 	beq.w	80040c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	2220      	movs	r2, #32
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d136      	bne.n	800403c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0216 	bic.w	r2, r2, #22
 8003fdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <HAL_DMA_IRQHandler+0x1da>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0208 	bic.w	r2, r2, #8
 800400c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004012:	223f      	movs	r2, #63	; 0x3f
 8004014:	409a      	lsls	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402e:	2b00      	cmp	r3, #0
 8004030:	d07d      	beq.n	800412e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
        }
        return;
 800403a:	e078      	b.n	800412e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01c      	beq.n	8004084 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d108      	bne.n	800406a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	2b00      	cmp	r3, #0
 800405e:	d030      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4798      	blx	r3
 8004068:	e02b      	b.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d027      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4798      	blx	r3
 800407a:	e022      	b.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
 800407c:	20000014 	.word	0x20000014
 8004080:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10f      	bne.n	80040b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0210 	bic.w	r2, r2, #16
 80040a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d032      	beq.n	8004130 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d022      	beq.n	800411c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2205      	movs	r2, #5
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0201 	bic.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	3301      	adds	r3, #1
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d307      	bcc.n	800410a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f2      	bne.n	80040ee <HAL_DMA_IRQHandler+0x2ca>
 8004108:	e000      	b.n	800410c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800410a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
 800412c:	e000      	b.n	8004130 <HAL_DMA_IRQHandler+0x30c>
        return;
 800412e:	bf00      	nop
    }
  }
}
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop

08004138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	3b10      	subs	r3, #16
 8004148:	4a14      	ldr	r2, [pc, #80]	; (800419c <DMA_CalcBaseAndBitshift+0x64>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004152:	4a13      	ldr	r2, [pc, #76]	; (80041a0 <DMA_CalcBaseAndBitshift+0x68>)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d909      	bls.n	800417a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	1d1a      	adds	r2, r3, #4
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	659a      	str	r2, [r3, #88]	; 0x58
 8004178:	e007      	b.n	800418a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	aaaaaaab 	.word	0xaaaaaaab
 80041a0:	08007698 	.word	0x08007698

080041a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d11f      	bne.n	80041fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d855      	bhi.n	8004270 <DMA_CheckFifoParam+0xcc>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <DMA_CheckFifoParam+0x28>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041dd 	.word	0x080041dd
 80041d0:	080041ef 	.word	0x080041ef
 80041d4:	080041dd 	.word	0x080041dd
 80041d8:	08004271 	.word	0x08004271
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d045      	beq.n	8004274 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ec:	e042      	b.n	8004274 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041f6:	d13f      	bne.n	8004278 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fc:	e03c      	b.n	8004278 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004206:	d121      	bne.n	800424c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d836      	bhi.n	800427c <DMA_CheckFifoParam+0xd8>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <DMA_CheckFifoParam+0x70>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004225 	.word	0x08004225
 8004218:	0800422b 	.word	0x0800422b
 800421c:	08004225 	.word	0x08004225
 8004220:	0800423d 	.word	0x0800423d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      break;
 8004228:	e02f      	b.n	800428a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d024      	beq.n	8004280 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423a:	e021      	b.n	8004280 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004244:	d11e      	bne.n	8004284 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800424a:	e01b      	b.n	8004284 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d902      	bls.n	8004258 <DMA_CheckFifoParam+0xb4>
 8004252:	2b03      	cmp	r3, #3
 8004254:	d003      	beq.n	800425e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004256:	e018      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
      break;
 800425c:	e015      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00e      	beq.n	8004288 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	73fb      	strb	r3, [r7, #15]
      break;
 800426e:	e00b      	b.n	8004288 <DMA_CheckFifoParam+0xe4>
      break;
 8004270:	bf00      	nop
 8004272:	e00a      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;
 8004274:	bf00      	nop
 8004276:	e008      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;
 8004278:	bf00      	nop
 800427a:	e006      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;
 800427c:	bf00      	nop
 800427e:	e004      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;
 8004280:	bf00      	nop
 8004282:	e002      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;   
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <DMA_CheckFifoParam+0xe6>
      break;
 8004288:	bf00      	nop
    }
  } 
  
  return status; 
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004298:	b480      	push	{r7}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	e165      	b.n	8004580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042b4:	2201      	movs	r2, #1
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4013      	ands	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	f040 8154 	bne.w	800457a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d00b      	beq.n	80042f2 <HAL_GPIO_Init+0x5a>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d007      	beq.n	80042f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042e6:	2b11      	cmp	r3, #17
 80042e8:	d003      	beq.n	80042f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b12      	cmp	r3, #18
 80042f0:	d130      	bne.n	8004354 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	2203      	movs	r2, #3
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43db      	mvns	r3, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4013      	ands	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4313      	orrs	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004328:	2201      	movs	r2, #1
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 0201 	and.w	r2, r3, #1
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	2203      	movs	r2, #3
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d003      	beq.n	8004394 <HAL_GPIO_Init+0xfc>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b12      	cmp	r3, #18
 8004392:	d123      	bne.n	80043dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	08da      	lsrs	r2, r3, #3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3208      	adds	r2, #8
 800439c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	220f      	movs	r2, #15
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	08da      	lsrs	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3208      	adds	r2, #8
 80043d6:	69b9      	ldr	r1, [r7, #24]
 80043d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	2203      	movs	r2, #3
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 0203 	and.w	r2, r3, #3
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80ae 	beq.w	800457a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	4b5c      	ldr	r3, [pc, #368]	; (8004594 <HAL_GPIO_Init+0x2fc>)
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	4a5b      	ldr	r2, [pc, #364]	; (8004594 <HAL_GPIO_Init+0x2fc>)
 8004428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800442c:	6453      	str	r3, [r2, #68]	; 0x44
 800442e:	4b59      	ldr	r3, [pc, #356]	; (8004594 <HAL_GPIO_Init+0x2fc>)
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800443a:	4a57      	ldr	r2, [pc, #348]	; (8004598 <HAL_GPIO_Init+0x300>)
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	089b      	lsrs	r3, r3, #2
 8004440:	3302      	adds	r3, #2
 8004442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	220f      	movs	r2, #15
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43db      	mvns	r3, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4013      	ands	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a4e      	ldr	r2, [pc, #312]	; (800459c <HAL_GPIO_Init+0x304>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d025      	beq.n	80044b2 <HAL_GPIO_Init+0x21a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a4d      	ldr	r2, [pc, #308]	; (80045a0 <HAL_GPIO_Init+0x308>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d01f      	beq.n	80044ae <HAL_GPIO_Init+0x216>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a4c      	ldr	r2, [pc, #304]	; (80045a4 <HAL_GPIO_Init+0x30c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d019      	beq.n	80044aa <HAL_GPIO_Init+0x212>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a4b      	ldr	r2, [pc, #300]	; (80045a8 <HAL_GPIO_Init+0x310>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_GPIO_Init+0x20e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a4a      	ldr	r2, [pc, #296]	; (80045ac <HAL_GPIO_Init+0x314>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00d      	beq.n	80044a2 <HAL_GPIO_Init+0x20a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a49      	ldr	r2, [pc, #292]	; (80045b0 <HAL_GPIO_Init+0x318>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <HAL_GPIO_Init+0x206>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a48      	ldr	r2, [pc, #288]	; (80045b4 <HAL_GPIO_Init+0x31c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d101      	bne.n	800449a <HAL_GPIO_Init+0x202>
 8004496:	2306      	movs	r3, #6
 8004498:	e00c      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 800449a:	2307      	movs	r3, #7
 800449c:	e00a      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 800449e:	2305      	movs	r3, #5
 80044a0:	e008      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 80044a2:	2304      	movs	r3, #4
 80044a4:	e006      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 80044a6:	2303      	movs	r3, #3
 80044a8:	e004      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e002      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <HAL_GPIO_Init+0x21c>
 80044b2:	2300      	movs	r3, #0
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	f002 0203 	and.w	r2, r2, #3
 80044ba:	0092      	lsls	r2, r2, #2
 80044bc:	4093      	lsls	r3, r2
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044c4:	4934      	ldr	r1, [pc, #208]	; (8004598 <HAL_GPIO_Init+0x300>)
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	089b      	lsrs	r3, r3, #2
 80044ca:	3302      	adds	r3, #2
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044d2:	4b39      	ldr	r3, [pc, #228]	; (80045b8 <HAL_GPIO_Init+0x320>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	43db      	mvns	r3, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4013      	ands	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044f6:	4a30      	ldr	r2, [pc, #192]	; (80045b8 <HAL_GPIO_Init+0x320>)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044fc:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <HAL_GPIO_Init+0x320>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004520:	4a25      	ldr	r2, [pc, #148]	; (80045b8 <HAL_GPIO_Init+0x320>)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004526:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_GPIO_Init+0x320>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	43db      	mvns	r3, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800454a:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <HAL_GPIO_Init+0x320>)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004550:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <HAL_GPIO_Init+0x320>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004574:	4a10      	ldr	r2, [pc, #64]	; (80045b8 <HAL_GPIO_Init+0x320>)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	3301      	adds	r3, #1
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2b0f      	cmp	r3, #15
 8004584:	f67f ae96 	bls.w	80042b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004588:	bf00      	nop
 800458a:	3724      	adds	r7, #36	; 0x24
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	40023800 	.word	0x40023800
 8004598:	40013800 	.word	0x40013800
 800459c:	40020000 	.word	0x40020000
 80045a0:	40020400 	.word	0x40020400
 80045a4:	40020800 	.word	0x40020800
 80045a8:	40020c00 	.word	0x40020c00
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40021400 	.word	0x40021400
 80045b4:	40021800 	.word	0x40021800
 80045b8:	40013c00 	.word	0x40013c00

080045bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	807b      	strh	r3, [r7, #2]
 80045c8:	4613      	mov	r3, r2
 80045ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045cc:	787b      	ldrb	r3, [r7, #1]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045d2:	887a      	ldrh	r2, [r7, #2]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045d8:	e003      	b.n	80045e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045da:	887b      	ldrh	r3, [r7, #2]
 80045dc:	041a      	lsls	r2, r3, #16
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	619a      	str	r2, [r3, #24]
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045fa:	4b08      	ldr	r3, [pc, #32]	; (800461c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d006      	beq.n	8004614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004606:	4a05      	ldr	r2, [pc, #20]	; (800461c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe fdf4 	bl	80031fc <HAL_GPIO_EXTI_Callback>
  }
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40013c00 	.word	0x40013c00

08004620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0cc      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004634:	4b68      	ldr	r3, [pc, #416]	; (80047d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d90c      	bls.n	800465c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b65      	ldr	r3, [pc, #404]	; (80047d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800464a:	4b63      	ldr	r3, [pc, #396]	; (80047d8 <HAL_RCC_ClockConfig+0x1b8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d001      	beq.n	800465c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0b8      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d020      	beq.n	80046aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004674:	4b59      	ldr	r3, [pc, #356]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a58      	ldr	r2, [pc, #352]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800467e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800468c:	4b53      	ldr	r3, [pc, #332]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4a52      	ldr	r2, [pc, #328]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004698:	4b50      	ldr	r3, [pc, #320]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	494d      	ldr	r1, [pc, #308]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d044      	beq.n	8004740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d107      	bne.n	80046ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046be:	4b47      	ldr	r3, [pc, #284]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d119      	bne.n	80046fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e07f      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d003      	beq.n	80046de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d107      	bne.n	80046ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046de:	4b3f      	ldr	r3, [pc, #252]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e06f      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ee:	4b3b      	ldr	r3, [pc, #236]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e067      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046fe:	4b37      	ldr	r3, [pc, #220]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f023 0203 	bic.w	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4934      	ldr	r1, [pc, #208]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	4313      	orrs	r3, r2
 800470e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004710:	f7ff f84a 	bl	80037a8 <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	e00a      	b.n	800472e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004718:	f7ff f846 	bl	80037a8 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e04f      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472e:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 020c 	and.w	r2, r3, #12
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	429a      	cmp	r2, r3
 800473e:	d1eb      	bne.n	8004718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004740:	4b25      	ldr	r3, [pc, #148]	; (80047d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d20c      	bcs.n	8004768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b22      	ldr	r3, [pc, #136]	; (80047d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	4b20      	ldr	r3, [pc, #128]	; (80047d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e032      	b.n	80047ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004774:	4b19      	ldr	r3, [pc, #100]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4916      	ldr	r1, [pc, #88]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	4313      	orrs	r3, r2
 8004784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	490e      	ldr	r1, [pc, #56]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047a6:	f000 f855 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 80047aa:	4601      	mov	r1, r0
 80047ac:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	091b      	lsrs	r3, r3, #4
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 80047b8:	5cd3      	ldrb	r3, [r2, r3]
 80047ba:	fa21 f303 	lsr.w	r3, r1, r3
 80047be:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fe ffaa 	bl	8003720 <HAL_InitTick>

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40023c00 	.word	0x40023c00
 80047dc:	40023800 	.word	0x40023800
 80047e0:	08007680 	.word	0x08007680
 80047e4:	20000014 	.word	0x20000014
 80047e8:	20000018 	.word	0x20000018

080047ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f0:	4b03      	ldr	r3, [pc, #12]	; (8004800 <HAL_RCC_GetHCLKFreq+0x14>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000014 	.word	0x20000014

08004804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004808:	f7ff fff0 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 800480c:	4601      	mov	r1, r0
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	0a9b      	lsrs	r3, r3, #10
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	4a03      	ldr	r2, [pc, #12]	; (8004828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800481a:	5cd3      	ldrb	r3, [r2, r3]
 800481c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40023800 	.word	0x40023800
 8004828:	08007690 	.word	0x08007690

0800482c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004830:	f7ff ffdc 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 8004834:	4601      	mov	r1, r0
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	0b5b      	lsrs	r3, r3, #13
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4a03      	ldr	r2, [pc, #12]	; (8004850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004842:	5cd3      	ldrb	r3, [r2, r3]
 8004844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40023800 	.word	0x40023800
 8004850:	08007690 	.word	0x08007690

08004854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800486e:	4bc6      	ldr	r3, [pc, #792]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x334>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b0c      	cmp	r3, #12
 8004878:	f200 817e 	bhi.w	8004b78 <HAL_RCC_GetSysClockFreq+0x324>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <HAL_RCC_GetSysClockFreq+0x30>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	080048b9 	.word	0x080048b9
 8004888:	08004b79 	.word	0x08004b79
 800488c:	08004b79 	.word	0x08004b79
 8004890:	08004b79 	.word	0x08004b79
 8004894:	080048bf 	.word	0x080048bf
 8004898:	08004b79 	.word	0x08004b79
 800489c:	08004b79 	.word	0x08004b79
 80048a0:	08004b79 	.word	0x08004b79
 80048a4:	080048c5 	.word	0x080048c5
 80048a8:	08004b79 	.word	0x08004b79
 80048ac:	08004b79 	.word	0x08004b79
 80048b0:	08004b79 	.word	0x08004b79
 80048b4:	08004a21 	.word	0x08004a21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b8:	4bb4      	ldr	r3, [pc, #720]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x338>)
 80048ba:	613b      	str	r3, [r7, #16]
       break;
 80048bc:	e15f      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048be:	4bb4      	ldr	r3, [pc, #720]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x33c>)
 80048c0:	613b      	str	r3, [r7, #16]
      break;
 80048c2:	e15c      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c4:	4bb0      	ldr	r3, [pc, #704]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x334>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048cc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ce:	4bae      	ldr	r3, [pc, #696]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x334>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d04a      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048da:	4bab      	ldr	r3, [pc, #684]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x334>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	099b      	lsrs	r3, r3, #6
 80048e0:	f04f 0400 	mov.w	r4, #0
 80048e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	ea03 0501 	and.w	r5, r3, r1
 80048f0:	ea04 0602 	and.w	r6, r4, r2
 80048f4:	4629      	mov	r1, r5
 80048f6:	4632      	mov	r2, r6
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	f04f 0400 	mov.w	r4, #0
 8004900:	0154      	lsls	r4, r2, #5
 8004902:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004906:	014b      	lsls	r3, r1, #5
 8004908:	4619      	mov	r1, r3
 800490a:	4622      	mov	r2, r4
 800490c:	1b49      	subs	r1, r1, r5
 800490e:	eb62 0206 	sbc.w	r2, r2, r6
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	f04f 0400 	mov.w	r4, #0
 800491a:	0194      	lsls	r4, r2, #6
 800491c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004920:	018b      	lsls	r3, r1, #6
 8004922:	1a5b      	subs	r3, r3, r1
 8004924:	eb64 0402 	sbc.w	r4, r4, r2
 8004928:	f04f 0100 	mov.w	r1, #0
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	00e2      	lsls	r2, r4, #3
 8004932:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004936:	00d9      	lsls	r1, r3, #3
 8004938:	460b      	mov	r3, r1
 800493a:	4614      	mov	r4, r2
 800493c:	195b      	adds	r3, r3, r5
 800493e:	eb44 0406 	adc.w	r4, r4, r6
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	0262      	lsls	r2, r4, #9
 800494c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004950:	0259      	lsls	r1, r3, #9
 8004952:	460b      	mov	r3, r1
 8004954:	4614      	mov	r4, r2
 8004956:	4618      	mov	r0, r3
 8004958:	4621      	mov	r1, r4
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f04f 0400 	mov.w	r4, #0
 8004960:	461a      	mov	r2, r3
 8004962:	4623      	mov	r3, r4
 8004964:	f7fb fcac 	bl	80002c0 <__aeabi_uldivmod>
 8004968:	4603      	mov	r3, r0
 800496a:	460c      	mov	r4, r1
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e049      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004970:	4b85      	ldr	r3, [pc, #532]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x334>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	099b      	lsrs	r3, r3, #6
 8004976:	f04f 0400 	mov.w	r4, #0
 800497a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	ea03 0501 	and.w	r5, r3, r1
 8004986:	ea04 0602 	and.w	r6, r4, r2
 800498a:	4629      	mov	r1, r5
 800498c:	4632      	mov	r2, r6
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	f04f 0400 	mov.w	r4, #0
 8004996:	0154      	lsls	r4, r2, #5
 8004998:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800499c:	014b      	lsls	r3, r1, #5
 800499e:	4619      	mov	r1, r3
 80049a0:	4622      	mov	r2, r4
 80049a2:	1b49      	subs	r1, r1, r5
 80049a4:	eb62 0206 	sbc.w	r2, r2, r6
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	f04f 0400 	mov.w	r4, #0
 80049b0:	0194      	lsls	r4, r2, #6
 80049b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049b6:	018b      	lsls	r3, r1, #6
 80049b8:	1a5b      	subs	r3, r3, r1
 80049ba:	eb64 0402 	sbc.w	r4, r4, r2
 80049be:	f04f 0100 	mov.w	r1, #0
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	00e2      	lsls	r2, r4, #3
 80049c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049cc:	00d9      	lsls	r1, r3, #3
 80049ce:	460b      	mov	r3, r1
 80049d0:	4614      	mov	r4, r2
 80049d2:	195b      	adds	r3, r3, r5
 80049d4:	eb44 0406 	adc.w	r4, r4, r6
 80049d8:	f04f 0100 	mov.w	r1, #0
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	02a2      	lsls	r2, r4, #10
 80049e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049e6:	0299      	lsls	r1, r3, #10
 80049e8:	460b      	mov	r3, r1
 80049ea:	4614      	mov	r4, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	4621      	mov	r1, r4
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f04f 0400 	mov.w	r4, #0
 80049f6:	461a      	mov	r2, r3
 80049f8:	4623      	mov	r3, r4
 80049fa:	f7fb fc61 	bl	80002c0 <__aeabi_uldivmod>
 80049fe:	4603      	mov	r3, r0
 8004a00:	460c      	mov	r4, r1
 8004a02:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a04:	4b60      	ldr	r3, [pc, #384]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	0c1b      	lsrs	r3, r3, #16
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	3301      	adds	r3, #1
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	613b      	str	r3, [r7, #16]
      break;
 8004a1e:	e0ae      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a20:	4b59      	ldr	r3, [pc, #356]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a28:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a2a:	4b57      	ldr	r3, [pc, #348]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d04a      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a36:	4b54      	ldr	r3, [pc, #336]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	099b      	lsrs	r3, r3, #6
 8004a3c:	f04f 0400 	mov.w	r4, #0
 8004a40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	ea03 0501 	and.w	r5, r3, r1
 8004a4c:	ea04 0602 	and.w	r6, r4, r2
 8004a50:	4629      	mov	r1, r5
 8004a52:	4632      	mov	r2, r6
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	f04f 0400 	mov.w	r4, #0
 8004a5c:	0154      	lsls	r4, r2, #5
 8004a5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a62:	014b      	lsls	r3, r1, #5
 8004a64:	4619      	mov	r1, r3
 8004a66:	4622      	mov	r2, r4
 8004a68:	1b49      	subs	r1, r1, r5
 8004a6a:	eb62 0206 	sbc.w	r2, r2, r6
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	f04f 0400 	mov.w	r4, #0
 8004a76:	0194      	lsls	r4, r2, #6
 8004a78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a7c:	018b      	lsls	r3, r1, #6
 8004a7e:	1a5b      	subs	r3, r3, r1
 8004a80:	eb64 0402 	sbc.w	r4, r4, r2
 8004a84:	f04f 0100 	mov.w	r1, #0
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	00e2      	lsls	r2, r4, #3
 8004a8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a92:	00d9      	lsls	r1, r3, #3
 8004a94:	460b      	mov	r3, r1
 8004a96:	4614      	mov	r4, r2
 8004a98:	195b      	adds	r3, r3, r5
 8004a9a:	eb44 0406 	adc.w	r4, r4, r6
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	0262      	lsls	r2, r4, #9
 8004aa8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004aac:	0259      	lsls	r1, r3, #9
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4614      	mov	r4, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f04f 0400 	mov.w	r4, #0
 8004abc:	461a      	mov	r2, r3
 8004abe:	4623      	mov	r3, r4
 8004ac0:	f7fb fbfe 	bl	80002c0 <__aeabi_uldivmod>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	e049      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004acc:	4b2e      	ldr	r3, [pc, #184]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x334>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	099b      	lsrs	r3, r3, #6
 8004ad2:	f04f 0400 	mov.w	r4, #0
 8004ad6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	ea03 0501 	and.w	r5, r3, r1
 8004ae2:	ea04 0602 	and.w	r6, r4, r2
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	4632      	mov	r2, r6
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	f04f 0400 	mov.w	r4, #0
 8004af2:	0154      	lsls	r4, r2, #5
 8004af4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004af8:	014b      	lsls	r3, r1, #5
 8004afa:	4619      	mov	r1, r3
 8004afc:	4622      	mov	r2, r4
 8004afe:	1b49      	subs	r1, r1, r5
 8004b00:	eb62 0206 	sbc.w	r2, r2, r6
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	f04f 0400 	mov.w	r4, #0
 8004b0c:	0194      	lsls	r4, r2, #6
 8004b0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b12:	018b      	lsls	r3, r1, #6
 8004b14:	1a5b      	subs	r3, r3, r1
 8004b16:	eb64 0402 	sbc.w	r4, r4, r2
 8004b1a:	f04f 0100 	mov.w	r1, #0
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	00e2      	lsls	r2, r4, #3
 8004b24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b28:	00d9      	lsls	r1, r3, #3
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	195b      	adds	r3, r3, r5
 8004b30:	eb44 0406 	adc.w	r4, r4, r6
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	02a2      	lsls	r2, r4, #10
 8004b3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b42:	0299      	lsls	r1, r3, #10
 8004b44:	460b      	mov	r3, r1
 8004b46:	4614      	mov	r4, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f04f 0400 	mov.w	r4, #0
 8004b52:	461a      	mov	r2, r3
 8004b54:	4623      	mov	r3, r4
 8004b56:	f7fb fbb3 	bl	80002c0 <__aeabi_uldivmod>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	460c      	mov	r4, r1
 8004b5e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	0f1b      	lsrs	r3, r3, #28
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	613b      	str	r3, [r7, #16]
      break;
 8004b76:	e002      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b78:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x338>)
 8004b7a:	613b      	str	r3, [r7, #16]
      break;
 8004b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b7e:	693b      	ldr	r3, [r7, #16]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	00f42400 	.word	0x00f42400
 8004b90:	007a1200 	.word	0x007a1200

08004b94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8083 	beq.w	8004cb4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bae:	4b95      	ldr	r3, [pc, #596]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d019      	beq.n	8004bee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bba:	4b92      	ldr	r3, [pc, #584]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d106      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bc6:	4b8f      	ldr	r3, [pc, #572]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd2:	d00c      	beq.n	8004bee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd4:	4b8b      	ldr	r3, [pc, #556]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d112      	bne.n	8004c06 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be0:	4b88      	ldr	r3, [pc, #544]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bec:	d10b      	bne.n	8004c06 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bee:	4b85      	ldr	r3, [pc, #532]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d05b      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x11e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d157      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e216      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCC_OscConfig+0x8a>
 8004c10:	4b7c      	ldr	r3, [pc, #496]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a7b      	ldr	r2, [pc, #492]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	e01d      	b.n	8004c5a <HAL_RCC_OscConfig+0xc6>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c26:	d10c      	bne.n	8004c42 <HAL_RCC_OscConfig+0xae>
 8004c28:	4b76      	ldr	r3, [pc, #472]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a75      	ldr	r2, [pc, #468]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	4b73      	ldr	r3, [pc, #460]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a72      	ldr	r2, [pc, #456]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	e00b      	b.n	8004c5a <HAL_RCC_OscConfig+0xc6>
 8004c42:	4b70      	ldr	r3, [pc, #448]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a6f      	ldr	r2, [pc, #444]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4b6d      	ldr	r3, [pc, #436]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a6c      	ldr	r2, [pc, #432]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d013      	beq.n	8004c8a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fe fda1 	bl	80037a8 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c6a:	f7fe fd9d 	bl	80037a8 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b64      	cmp	r3, #100	; 0x64
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e1db      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7c:	4b61      	ldr	r3, [pc, #388]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0xd6>
 8004c88:	e014      	b.n	8004cb4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8a:	f7fe fd8d 	bl	80037a8 <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c92:	f7fe fd89 	bl	80037a8 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b64      	cmp	r3, #100	; 0x64
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e1c7      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca4:	4b57      	ldr	r3, [pc, #348]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f0      	bne.n	8004c92 <HAL_RCC_OscConfig+0xfe>
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d06f      	beq.n	8004da0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cc0:	4b50      	ldr	r3, [pc, #320]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 030c 	and.w	r3, r3, #12
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d017      	beq.n	8004cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ccc:	4b4d      	ldr	r3, [pc, #308]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cd8:	4b4a      	ldr	r3, [pc, #296]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00b      	beq.n	8004cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ce4:	4b47      	ldr	r3, [pc, #284]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cec:	2b0c      	cmp	r3, #12
 8004cee:	d11c      	bne.n	8004d2a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cf0:	4b44      	ldr	r3, [pc, #272]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d116      	bne.n	8004d2a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfc:	4b41      	ldr	r3, [pc, #260]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_RCC_OscConfig+0x180>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e18f      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d14:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	4938      	ldr	r1, [pc, #224]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d28:	e03a      	b.n	8004da0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d020      	beq.n	8004d74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d32:	4b35      	ldr	r3, [pc, #212]	; (8004e08 <HAL_RCC_OscConfig+0x274>)
 8004d34:	2201      	movs	r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fe fd36 	bl	80037a8 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d40:	f7fe fd32 	bl	80037a8 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e170      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d52:	4b2c      	ldr	r3, [pc, #176]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5e:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4925      	ldr	r1, [pc, #148]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]
 8004d72:	e015      	b.n	8004da0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d74:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <HAL_RCC_OscConfig+0x274>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7a:	f7fe fd15 	bl	80037a8 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d82:	f7fe fd11 	bl	80037a8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e14f      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d94:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f0      	bne.n	8004d82 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d037      	beq.n	8004e1c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d016      	beq.n	8004de2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db4:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <HAL_RCC_OscConfig+0x278>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dba:	f7fe fcf5 	bl	80037a8 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc2:	f7fe fcf1 	bl	80037a8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e12f      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_RCC_OscConfig+0x270>)
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x22e>
 8004de0:	e01c      	b.n	8004e1c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de2:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <HAL_RCC_OscConfig+0x278>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fe fcde 	bl	80037a8 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dee:	e00f      	b.n	8004e10 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df0:	f7fe fcda 	bl	80037a8 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d908      	bls.n	8004e10 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e118      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800
 8004e08:	42470000 	.word	0x42470000
 8004e0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e10:	4b8a      	ldr	r3, [pc, #552]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e9      	bne.n	8004df0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8097 	beq.w	8004f58 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b83      	ldr	r3, [pc, #524]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10f      	bne.n	8004e5a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	4b7f      	ldr	r3, [pc, #508]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	4a7e      	ldr	r2, [pc, #504]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e48:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4a:	4b7c      	ldr	r3, [pc, #496]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5a:	4b79      	ldr	r3, [pc, #484]	; (8005040 <HAL_RCC_OscConfig+0x4ac>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d118      	bne.n	8004e98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e66:	4b76      	ldr	r3, [pc, #472]	; (8005040 <HAL_RCC_OscConfig+0x4ac>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a75      	ldr	r2, [pc, #468]	; (8005040 <HAL_RCC_OscConfig+0x4ac>)
 8004e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e72:	f7fe fc99 	bl	80037a8 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7a:	f7fe fc95 	bl	80037a8 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e0d3      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8c:	4b6c      	ldr	r3, [pc, #432]	; (8005040 <HAL_RCC_OscConfig+0x4ac>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d106      	bne.n	8004eae <HAL_RCC_OscConfig+0x31a>
 8004ea0:	4b66      	ldr	r3, [pc, #408]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a65      	ldr	r2, [pc, #404]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004eac:	e01c      	b.n	8004ee8 <HAL_RCC_OscConfig+0x354>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b05      	cmp	r3, #5
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x33c>
 8004eb6:	4b61      	ldr	r3, [pc, #388]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	4a60      	ldr	r2, [pc, #384]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004ebc:	f043 0304 	orr.w	r3, r3, #4
 8004ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec2:	4b5e      	ldr	r3, [pc, #376]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	4a5d      	ldr	r2, [pc, #372]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ece:	e00b      	b.n	8004ee8 <HAL_RCC_OscConfig+0x354>
 8004ed0:	4b5a      	ldr	r3, [pc, #360]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	4a59      	ldr	r2, [pc, #356]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	6713      	str	r3, [r2, #112]	; 0x70
 8004edc:	4b57      	ldr	r3, [pc, #348]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	4a56      	ldr	r2, [pc, #344]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004ee2:	f023 0304 	bic.w	r3, r3, #4
 8004ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef0:	f7fe fc5a 	bl	80037a8 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef8:	f7fe fc56 	bl	80037a8 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e092      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0e:	4b4b      	ldr	r3, [pc, #300]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ee      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x364>
 8004f1a:	e014      	b.n	8004f46 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1c:	f7fe fc44 	bl	80037a8 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f24:	f7fe fc40 	bl	80037a8 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e07c      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f3a:	4b40      	ldr	r3, [pc, #256]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ee      	bne.n	8004f24 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d105      	bne.n	8004f58 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4c:	4b3b      	ldr	r3, [pc, #236]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	4a3a      	ldr	r2, [pc, #232]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d068      	beq.n	8005032 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f60:	4b36      	ldr	r3, [pc, #216]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 030c 	and.w	r3, r3, #12
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d060      	beq.n	800502e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d145      	bne.n	8005000 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f74:	4b33      	ldr	r3, [pc, #204]	; (8005044 <HAL_RCC_OscConfig+0x4b0>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7a:	f7fe fc15 	bl	80037a8 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f82:	f7fe fc11 	bl	80037a8 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e04f      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f94:	4b29      	ldr	r3, [pc, #164]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f0      	bne.n	8004f82 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	019b      	lsls	r3, r3, #6
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	041b      	lsls	r3, r3, #16
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	061b      	lsls	r3, r3, #24
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	071b      	lsls	r3, r3, #28
 8004fcc:	491b      	ldr	r1, [pc, #108]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd2:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <HAL_RCC_OscConfig+0x4b0>)
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fe fbe6 	bl	80037a8 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fe fbe2 	bl	80037a8 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e020      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x44c>
 8004ffe:	e018      	b.n	8005032 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005000:	4b10      	ldr	r3, [pc, #64]	; (8005044 <HAL_RCC_OscConfig+0x4b0>)
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fe fbcf 	bl	80037a8 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800500e:	f7fe fbcb 	bl	80037a8 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e009      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005020:	4b06      	ldr	r3, [pc, #24]	; (800503c <HAL_RCC_OscConfig+0x4a8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f0      	bne.n	800500e <HAL_RCC_OscConfig+0x47a>
 800502c:	e001      	b.n	8005032 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40023800 	.word	0x40023800
 8005040:	40007000 	.word	0x40007000
 8005044:	42470060 	.word	0x42470060

08005048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e01d      	b.n	8005096 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fe f9c0 	bl	80033f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3304      	adds	r3, #4
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f000 fa64 	bl	8005554 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2202      	movs	r2, #2
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b06      	cmp	r3, #6
 80050be:	d007      	beq.n	80050d0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6a1a      	ldr	r2, [r3, #32]
 80050fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8005100:	4013      	ands	r3, r2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10f      	bne.n	8005126 <HAL_TIM_Base_Stop+0x40>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6a1a      	ldr	r2, [r3, #32]
 800510c:	f240 4344 	movw	r3, #1092	; 0x444
 8005110:	4013      	ands	r3, r2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d107      	bne.n	8005126 <HAL_TIM_Base_Stop+0x40>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b06      	cmp	r3, #6
 8005164:	d007      	beq.n	8005176 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0201 	orr.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b02      	cmp	r3, #2
 8005198:	d122      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d11b      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0202 	mvn.w	r2, #2
 80051b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f9a5 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f997 	bl	8005502 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f9a8 	bl	800552a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0204 	mvn.w	r2, #4
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2202      	movs	r2, #2
 800520a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f97b 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f96d 	bl	8005502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f97e 	bl	800552a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b08      	cmp	r3, #8
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b08      	cmp	r3, #8
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0208 	mvn.w	r2, #8
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2204      	movs	r2, #4
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f951 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f943 	bl	8005502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f954 	bl	800552a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b10      	cmp	r3, #16
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0210 	mvn.w	r2, #16
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2208      	movs	r2, #8
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f927 	bl	8005516 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f919 	bl	8005502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f92a 	bl	800552a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d10e      	bne.n	8005308 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d107      	bne.n	8005308 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0201 	mvn.w	r2, #1
 8005300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fd ff68 	bl	80031d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d10e      	bne.n	8005334 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005320:	2b80      	cmp	r3, #128	; 0x80
 8005322:	d107      	bne.n	8005334 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800532c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fad0 	bl	80058d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b40      	cmp	r3, #64	; 0x40
 8005340:	d10e      	bne.n	8005360 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	d107      	bne.n	8005360 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8ef 	bl	800553e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b20      	cmp	r3, #32
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b20      	cmp	r3, #32
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0220 	mvn.w	r2, #32
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa9a 	bl	80058c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_TIM_ConfigClockSource+0x18>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e0a6      	b.n	80054fa <HAL_TIM_ConfigClockSource+0x166>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	d067      	beq.n	80054b4 <HAL_TIM_ConfigClockSource+0x120>
 80053e4:	2b40      	cmp	r3, #64	; 0x40
 80053e6:	d80b      	bhi.n	8005400 <HAL_TIM_ConfigClockSource+0x6c>
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d073      	beq.n	80054d4 <HAL_TIM_ConfigClockSource+0x140>
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d802      	bhi.n	80053f6 <HAL_TIM_ConfigClockSource+0x62>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d06f      	beq.n	80054d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053f4:	e078      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d06c      	beq.n	80054d4 <HAL_TIM_ConfigClockSource+0x140>
 80053fa:	2b30      	cmp	r3, #48	; 0x30
 80053fc:	d06a      	beq.n	80054d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053fe:	e073      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005400:	2b70      	cmp	r3, #112	; 0x70
 8005402:	d00d      	beq.n	8005420 <HAL_TIM_ConfigClockSource+0x8c>
 8005404:	2b70      	cmp	r3, #112	; 0x70
 8005406:	d804      	bhi.n	8005412 <HAL_TIM_ConfigClockSource+0x7e>
 8005408:	2b50      	cmp	r3, #80	; 0x50
 800540a:	d033      	beq.n	8005474 <HAL_TIM_ConfigClockSource+0xe0>
 800540c:	2b60      	cmp	r3, #96	; 0x60
 800540e:	d041      	beq.n	8005494 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005410:	e06a      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005416:	d066      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x152>
 8005418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541c:	d017      	beq.n	800544e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800541e:	e063      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	6899      	ldr	r1, [r3, #8]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f000 f9aa 	bl	8005788 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005442:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	609a      	str	r2, [r3, #8]
      break;
 800544c:	e04c      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6899      	ldr	r1, [r3, #8]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f000 f993 	bl	8005788 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005470:	609a      	str	r2, [r3, #8]
      break;
 8005472:	e039      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6859      	ldr	r1, [r3, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	461a      	mov	r2, r3
 8005482:	f000 f907 	bl	8005694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2150      	movs	r1, #80	; 0x50
 800548c:	4618      	mov	r0, r3
 800548e:	f000 f960 	bl	8005752 <TIM_ITRx_SetConfig>
      break;
 8005492:	e029      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6859      	ldr	r1, [r3, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	461a      	mov	r2, r3
 80054a2:	f000 f926 	bl	80056f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2160      	movs	r1, #96	; 0x60
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 f950 	bl	8005752 <TIM_ITRx_SetConfig>
      break;
 80054b2:	e019      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	6859      	ldr	r1, [r3, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	461a      	mov	r2, r3
 80054c2:	f000 f8e7 	bl	8005694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2140      	movs	r1, #64	; 0x40
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f940 	bl	8005752 <TIM_ITRx_SetConfig>
      break;
 80054d2:	e009      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f000 f937 	bl	8005752 <TIM_ITRx_SetConfig>
      break;
 80054e4:	e000      	b.n	80054e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80054e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a40      	ldr	r2, [pc, #256]	; (8005668 <TIM_Base_SetConfig+0x114>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005572:	d00f      	beq.n	8005594 <TIM_Base_SetConfig+0x40>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a3d      	ldr	r2, [pc, #244]	; (800566c <TIM_Base_SetConfig+0x118>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00b      	beq.n	8005594 <TIM_Base_SetConfig+0x40>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a3c      	ldr	r2, [pc, #240]	; (8005670 <TIM_Base_SetConfig+0x11c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <TIM_Base_SetConfig+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a3b      	ldr	r2, [pc, #236]	; (8005674 <TIM_Base_SetConfig+0x120>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_Base_SetConfig+0x40>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a3a      	ldr	r2, [pc, #232]	; (8005678 <TIM_Base_SetConfig+0x124>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d108      	bne.n	80055a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a2f      	ldr	r2, [pc, #188]	; (8005668 <TIM_Base_SetConfig+0x114>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d02b      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b4:	d027      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a2c      	ldr	r2, [pc, #176]	; (800566c <TIM_Base_SetConfig+0x118>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d023      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2b      	ldr	r2, [pc, #172]	; (8005670 <TIM_Base_SetConfig+0x11c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01f      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2a      	ldr	r2, [pc, #168]	; (8005674 <TIM_Base_SetConfig+0x120>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01b      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a29      	ldr	r2, [pc, #164]	; (8005678 <TIM_Base_SetConfig+0x124>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d017      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a28      	ldr	r2, [pc, #160]	; (800567c <TIM_Base_SetConfig+0x128>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a27      	ldr	r2, [pc, #156]	; (8005680 <TIM_Base_SetConfig+0x12c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00f      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a26      	ldr	r2, [pc, #152]	; (8005684 <TIM_Base_SetConfig+0x130>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00b      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a25      	ldr	r2, [pc, #148]	; (8005688 <TIM_Base_SetConfig+0x134>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a24      	ldr	r2, [pc, #144]	; (800568c <TIM_Base_SetConfig+0x138>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a23      	ldr	r2, [pc, #140]	; (8005690 <TIM_Base_SetConfig+0x13c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d108      	bne.n	8005618 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <TIM_Base_SetConfig+0x114>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_Base_SetConfig+0xf8>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a0c      	ldr	r2, [pc, #48]	; (8005678 <TIM_Base_SetConfig+0x124>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d103      	bne.n	8005654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	615a      	str	r2, [r3, #20]
}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40010000 	.word	0x40010000
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800
 8005674:	40000c00 	.word	0x40000c00
 8005678:	40010400 	.word	0x40010400
 800567c:	40014000 	.word	0x40014000
 8005680:	40014400 	.word	0x40014400
 8005684:	40014800 	.word	0x40014800
 8005688:	40001800 	.word	0x40001800
 800568c:	40001c00 	.word	0x40001c00
 8005690:	40002000 	.word	0x40002000

08005694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f023 0201 	bic.w	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f023 030a 	bic.w	r3, r3, #10
 80056d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b087      	sub	sp, #28
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f023 0210 	bic.w	r2, r3, #16
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800571c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	031b      	lsls	r3, r3, #12
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800572e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	621a      	str	r2, [r3, #32]
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	f043 0307 	orr.w	r3, r3, #7
 8005774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	609a      	str	r2, [r3, #8]
}
 800577c:	bf00      	nop
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	021a      	lsls	r2, r3, #8
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	609a      	str	r2, [r3, #8]
}
 80057bc:	bf00      	nop
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057dc:	2302      	movs	r3, #2
 80057de:	e05a      	b.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d022      	beq.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582c:	d01d      	beq.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1d      	ldr	r2, [pc, #116]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d018      	beq.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1b      	ldr	r2, [pc, #108]	; (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d013      	beq.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1a      	ldr	r2, [pc, #104]	; (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00e      	beq.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a18      	ldr	r2, [pc, #96]	; (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a17      	ldr	r2, [pc, #92]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a15      	ldr	r2, [pc, #84]	; (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d10c      	bne.n	8005884 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	4313      	orrs	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40010400 	.word	0x40010400
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40001800 	.word	0x40001800

080058c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e03f      	b.n	800597a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fd fdc2 	bl	8003498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2224      	movs	r2, #36	; 0x24
 8005918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800592a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fb97 	bl	8006060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b088      	sub	sp, #32
 8005986:	af02      	add	r7, sp, #8
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b20      	cmp	r3, #32
 80059a0:	f040 8083 	bne.w	8005aaa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_UART_Transmit+0x2e>
 80059aa:	88fb      	ldrh	r3, [r7, #6]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e07b      	b.n	8005aac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_UART_Transmit+0x40>
 80059be:	2302      	movs	r3, #2
 80059c0:	e074      	b.n	8005aac <HAL_UART_Transmit+0x12a>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2221      	movs	r2, #33	; 0x21
 80059d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80059d8:	f7fd fee6 	bl	80037a8 <HAL_GetTick>
 80059dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	88fa      	ldrh	r2, [r7, #6]
 80059e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80059f2:	e042      	b.n	8005a7a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0a:	d122      	bne.n	8005a52 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2200      	movs	r2, #0
 8005a14:	2180      	movs	r1, #128	; 0x80
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f9b6 	bl	8005d88 <UART_WaitOnFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e042      	b.n	8005aac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a38:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	3302      	adds	r3, #2
 8005a46:	60bb      	str	r3, [r7, #8]
 8005a48:	e017      	b.n	8005a7a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	60bb      	str	r3, [r7, #8]
 8005a50:	e013      	b.n	8005a7a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2180      	movs	r1, #128	; 0x80
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f993 	bl	8005d88 <UART_WaitOnFlagUntilTimeout>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e01f      	b.n	8005aac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	60ba      	str	r2, [r7, #8]
 8005a72:	781a      	ldrb	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1b7      	bne.n	80059f4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2140      	movs	r1, #64	; 0x40
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f97a 	bl	8005d88 <UART_WaitOnFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e006      	b.n	8005aac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e000      	b.n	8005aac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005aaa:	2302      	movs	r3, #2
  }
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d140      	bne.n	8005b50 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_UART_Receive_IT+0x26>
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e039      	b.n	8005b52 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_UART_Receive_IT+0x38>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e032      	b.n	8005b52 <HAL_UART_Receive_IT+0x9e>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	88fa      	ldrh	r2, [r7, #6]
 8005afe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2222      	movs	r2, #34	; 0x22
 8005b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b2a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0220 	orr.w	r2, r2, #32
 8005b4a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e000      	b.n	8005b52 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005b50:	2302      	movs	r3, #2
  }
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
	...

08005b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10d      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d008      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x52>
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f9d6 	bl	8005f5c <UART_Receive_IT>
      return;
 8005bb0:	e0d1      	b.n	8005d56 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80b0 	beq.w	8005d1a <HAL_UART_IRQHandler+0x1ba>
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <HAL_UART_IRQHandler+0x70>
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80a5 	beq.w	8005d1a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_UART_IRQHandler+0x90>
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_UART_IRQHandler+0xb0>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c08:	f043 0202 	orr.w	r2, r3, #2
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <HAL_UART_IRQHandler+0xd0>
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c28:	f043 0204 	orr.w	r2, r3, #4
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00f      	beq.n	8005c5a <HAL_UART_IRQHandler+0xfa>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <HAL_UART_IRQHandler+0xee>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c52:	f043 0208 	orr.w	r2, r3, #8
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d078      	beq.n	8005d54 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <HAL_UART_IRQHandler+0x11c>
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f970 	bl	8005f5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c86:	2b40      	cmp	r3, #64	; 0x40
 8005c88:	bf0c      	ite	eq
 8005c8a:	2301      	moveq	r3, #1
 8005c8c:	2300      	movne	r3, #0
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x144>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d031      	beq.n	8005d08 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f8b9 	bl	8005e1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb4:	2b40      	cmp	r3, #64	; 0x40
 8005cb6:	d123      	bne.n	8005d00 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695a      	ldr	r2, [r3, #20]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d013      	beq.n	8005cf8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	4a21      	ldr	r2, [pc, #132]	; (8005d5c <HAL_UART_IRQHandler+0x1fc>)
 8005cd6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fe f87f 	bl	8003de0 <HAL_DMA_Abort_IT>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d016      	beq.n	8005d16 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf6:	e00e      	b.n	8005d16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f83b 	bl	8005d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfe:	e00a      	b.n	8005d16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f837 	bl	8005d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d06:	e006      	b.n	8005d16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f833 	bl	8005d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d14:	e01e      	b.n	8005d54 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d16:	bf00      	nop
    return;
 8005d18:	e01c      	b.n	8005d54 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_UART_IRQHandler+0x1d6>
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f8a6 	bl	8005e80 <UART_Transmit_IT>
    return;
 8005d34:	e00f      	b.n	8005d56 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <HAL_UART_IRQHandler+0x1f6>
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f8ee 	bl	8005f2c <UART_EndTransmit_IT>
    return;
 8005d50:	bf00      	nop
 8005d52:	e000      	b.n	8005d56 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005d54:	bf00      	nop
  }
}
 8005d56:	3720      	adds	r7, #32
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	08005e59 	.word	0x08005e59

08005d60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	4613      	mov	r3, r2
 8005d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d98:	e02c      	b.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d028      	beq.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005da8:	f7fd fcfe 	bl	80037a8 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d21d      	bcs.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dc6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695a      	ldr	r2, [r3, #20]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0201 	bic.w	r2, r2, #1
 8005dd6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e00f      	b.n	8005e14 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d0c3      	beq.n	8005d9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695a      	ldr	r2, [r3, #20]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff ff7e 	bl	8005d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b21      	cmp	r3, #33	; 0x21
 8005e92:	d144      	bne.n	8005f1e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9c:	d11a      	bne.n	8005ed4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eb2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	1c9a      	adds	r2, r3, #2
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	621a      	str	r2, [r3, #32]
 8005ec6:	e00e      	b.n	8005ee6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	621a      	str	r2, [r3, #32]
 8005ed2:	e008      	b.n	8005ee6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	1c59      	adds	r1, r3, #1
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6211      	str	r1, [r2, #32]
 8005ede:	781a      	ldrb	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10f      	bne.n	8005f1a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e000      	b.n	8005f20 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005f1e:	2302      	movs	r3, #2
  }
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff ff07 	bl	8005d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b22      	cmp	r3, #34	; 0x22
 8005f6e:	d171      	bne.n	8006054 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f78:	d123      	bne.n	8005fc2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10e      	bne.n	8005fa6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9e:	1c9a      	adds	r2, r3, #2
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8005fa4:	e029      	b.n	8005ffa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8005fc0:	e01b      	b.n	8005ffa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10a      	bne.n	8005fe0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6858      	ldr	r0, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	1c59      	adds	r1, r3, #1
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6291      	str	r1, [r2, #40]	; 0x28
 8005fda:	b2c2      	uxtb	r2, r0
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	e00c      	b.n	8005ffa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	1c58      	adds	r0, r3, #1
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	6288      	str	r0, [r1, #40]	; 0x28
 8005ff2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29b      	uxth	r3, r3
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	4619      	mov	r1, r3
 8006008:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800600a:	2b00      	cmp	r3, #0
 800600c:	d120      	bne.n	8006050 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0220 	bic.w	r2, r2, #32
 800601c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800602c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0201 	bic.w	r2, r2, #1
 800603c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fd f8f2 	bl	8003230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	e002      	b.n	8006056 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006054:	2302      	movs	r3, #2
  }
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006064:	b085      	sub	sp, #20
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80060a2:	f023 030c 	bic.w	r3, r3, #12
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6812      	ldr	r2, [r2, #0]
 80060aa:	68f9      	ldr	r1, [r7, #12]
 80060ac:	430b      	orrs	r3, r1
 80060ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ce:	f040 818b 	bne.w	80063e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4ac1      	ldr	r2, [pc, #772]	; (80063dc <UART_SetConfig+0x37c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d005      	beq.n	80060e8 <UART_SetConfig+0x88>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4abf      	ldr	r2, [pc, #764]	; (80063e0 <UART_SetConfig+0x380>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	f040 80bd 	bne.w	8006262 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060e8:	f7fe fba0 	bl	800482c <HAL_RCC_GetPCLK2Freq>
 80060ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	461d      	mov	r5, r3
 80060f2:	f04f 0600 	mov.w	r6, #0
 80060f6:	46a8      	mov	r8, r5
 80060f8:	46b1      	mov	r9, r6
 80060fa:	eb18 0308 	adds.w	r3, r8, r8
 80060fe:	eb49 0409 	adc.w	r4, r9, r9
 8006102:	4698      	mov	r8, r3
 8006104:	46a1      	mov	r9, r4
 8006106:	eb18 0805 	adds.w	r8, r8, r5
 800610a:	eb49 0906 	adc.w	r9, r9, r6
 800610e:	f04f 0100 	mov.w	r1, #0
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800611a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800611e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006122:	4688      	mov	r8, r1
 8006124:	4691      	mov	r9, r2
 8006126:	eb18 0005 	adds.w	r0, r8, r5
 800612a:	eb49 0106 	adc.w	r1, r9, r6
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	461d      	mov	r5, r3
 8006134:	f04f 0600 	mov.w	r6, #0
 8006138:	196b      	adds	r3, r5, r5
 800613a:	eb46 0406 	adc.w	r4, r6, r6
 800613e:	461a      	mov	r2, r3
 8006140:	4623      	mov	r3, r4
 8006142:	f7fa f8bd 	bl	80002c0 <__aeabi_uldivmod>
 8006146:	4603      	mov	r3, r0
 8006148:	460c      	mov	r4, r1
 800614a:	461a      	mov	r2, r3
 800614c:	4ba5      	ldr	r3, [pc, #660]	; (80063e4 <UART_SetConfig+0x384>)
 800614e:	fba3 2302 	umull	r2, r3, r3, r2
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	461d      	mov	r5, r3
 800615c:	f04f 0600 	mov.w	r6, #0
 8006160:	46a9      	mov	r9, r5
 8006162:	46b2      	mov	sl, r6
 8006164:	eb19 0309 	adds.w	r3, r9, r9
 8006168:	eb4a 040a 	adc.w	r4, sl, sl
 800616c:	4699      	mov	r9, r3
 800616e:	46a2      	mov	sl, r4
 8006170:	eb19 0905 	adds.w	r9, r9, r5
 8006174:	eb4a 0a06 	adc.w	sl, sl, r6
 8006178:	f04f 0100 	mov.w	r1, #0
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006184:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006188:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800618c:	4689      	mov	r9, r1
 800618e:	4692      	mov	sl, r2
 8006190:	eb19 0005 	adds.w	r0, r9, r5
 8006194:	eb4a 0106 	adc.w	r1, sl, r6
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	461d      	mov	r5, r3
 800619e:	f04f 0600 	mov.w	r6, #0
 80061a2:	196b      	adds	r3, r5, r5
 80061a4:	eb46 0406 	adc.w	r4, r6, r6
 80061a8:	461a      	mov	r2, r3
 80061aa:	4623      	mov	r3, r4
 80061ac:	f7fa f888 	bl	80002c0 <__aeabi_uldivmod>
 80061b0:	4603      	mov	r3, r0
 80061b2:	460c      	mov	r4, r1
 80061b4:	461a      	mov	r2, r3
 80061b6:	4b8b      	ldr	r3, [pc, #556]	; (80063e4 <UART_SetConfig+0x384>)
 80061b8:	fba3 1302 	umull	r1, r3, r3, r2
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	2164      	movs	r1, #100	; 0x64
 80061c0:	fb01 f303 	mul.w	r3, r1, r3
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	3332      	adds	r3, #50	; 0x32
 80061ca:	4a86      	ldr	r2, [pc, #536]	; (80063e4 <UART_SetConfig+0x384>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061d8:	4498      	add	r8, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	461d      	mov	r5, r3
 80061de:	f04f 0600 	mov.w	r6, #0
 80061e2:	46a9      	mov	r9, r5
 80061e4:	46b2      	mov	sl, r6
 80061e6:	eb19 0309 	adds.w	r3, r9, r9
 80061ea:	eb4a 040a 	adc.w	r4, sl, sl
 80061ee:	4699      	mov	r9, r3
 80061f0:	46a2      	mov	sl, r4
 80061f2:	eb19 0905 	adds.w	r9, r9, r5
 80061f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80061fa:	f04f 0100 	mov.w	r1, #0
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006206:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800620a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800620e:	4689      	mov	r9, r1
 8006210:	4692      	mov	sl, r2
 8006212:	eb19 0005 	adds.w	r0, r9, r5
 8006216:	eb4a 0106 	adc.w	r1, sl, r6
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	461d      	mov	r5, r3
 8006220:	f04f 0600 	mov.w	r6, #0
 8006224:	196b      	adds	r3, r5, r5
 8006226:	eb46 0406 	adc.w	r4, r6, r6
 800622a:	461a      	mov	r2, r3
 800622c:	4623      	mov	r3, r4
 800622e:	f7fa f847 	bl	80002c0 <__aeabi_uldivmod>
 8006232:	4603      	mov	r3, r0
 8006234:	460c      	mov	r4, r1
 8006236:	461a      	mov	r2, r3
 8006238:	4b6a      	ldr	r3, [pc, #424]	; (80063e4 <UART_SetConfig+0x384>)
 800623a:	fba3 1302 	umull	r1, r3, r3, r2
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	2164      	movs	r1, #100	; 0x64
 8006242:	fb01 f303 	mul.w	r3, r1, r3
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	3332      	adds	r3, #50	; 0x32
 800624c:	4a65      	ldr	r2, [pc, #404]	; (80063e4 <UART_SetConfig+0x384>)
 800624e:	fba2 2303 	umull	r2, r3, r2, r3
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	f003 0207 	and.w	r2, r3, #7
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4442      	add	r2, r8
 800625e:	609a      	str	r2, [r3, #8]
 8006260:	e26f      	b.n	8006742 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006262:	f7fe facf 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
 8006266:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	461d      	mov	r5, r3
 800626c:	f04f 0600 	mov.w	r6, #0
 8006270:	46a8      	mov	r8, r5
 8006272:	46b1      	mov	r9, r6
 8006274:	eb18 0308 	adds.w	r3, r8, r8
 8006278:	eb49 0409 	adc.w	r4, r9, r9
 800627c:	4698      	mov	r8, r3
 800627e:	46a1      	mov	r9, r4
 8006280:	eb18 0805 	adds.w	r8, r8, r5
 8006284:	eb49 0906 	adc.w	r9, r9, r6
 8006288:	f04f 0100 	mov.w	r1, #0
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006294:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006298:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800629c:	4688      	mov	r8, r1
 800629e:	4691      	mov	r9, r2
 80062a0:	eb18 0005 	adds.w	r0, r8, r5
 80062a4:	eb49 0106 	adc.w	r1, r9, r6
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	461d      	mov	r5, r3
 80062ae:	f04f 0600 	mov.w	r6, #0
 80062b2:	196b      	adds	r3, r5, r5
 80062b4:	eb46 0406 	adc.w	r4, r6, r6
 80062b8:	461a      	mov	r2, r3
 80062ba:	4623      	mov	r3, r4
 80062bc:	f7fa f800 	bl	80002c0 <__aeabi_uldivmod>
 80062c0:	4603      	mov	r3, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	461a      	mov	r2, r3
 80062c6:	4b47      	ldr	r3, [pc, #284]	; (80063e4 <UART_SetConfig+0x384>)
 80062c8:	fba3 2302 	umull	r2, r3, r3, r2
 80062cc:	095b      	lsrs	r3, r3, #5
 80062ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	461d      	mov	r5, r3
 80062d6:	f04f 0600 	mov.w	r6, #0
 80062da:	46a9      	mov	r9, r5
 80062dc:	46b2      	mov	sl, r6
 80062de:	eb19 0309 	adds.w	r3, r9, r9
 80062e2:	eb4a 040a 	adc.w	r4, sl, sl
 80062e6:	4699      	mov	r9, r3
 80062e8:	46a2      	mov	sl, r4
 80062ea:	eb19 0905 	adds.w	r9, r9, r5
 80062ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80062f2:	f04f 0100 	mov.w	r1, #0
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006302:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006306:	4689      	mov	r9, r1
 8006308:	4692      	mov	sl, r2
 800630a:	eb19 0005 	adds.w	r0, r9, r5
 800630e:	eb4a 0106 	adc.w	r1, sl, r6
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	461d      	mov	r5, r3
 8006318:	f04f 0600 	mov.w	r6, #0
 800631c:	196b      	adds	r3, r5, r5
 800631e:	eb46 0406 	adc.w	r4, r6, r6
 8006322:	461a      	mov	r2, r3
 8006324:	4623      	mov	r3, r4
 8006326:	f7f9 ffcb 	bl	80002c0 <__aeabi_uldivmod>
 800632a:	4603      	mov	r3, r0
 800632c:	460c      	mov	r4, r1
 800632e:	461a      	mov	r2, r3
 8006330:	4b2c      	ldr	r3, [pc, #176]	; (80063e4 <UART_SetConfig+0x384>)
 8006332:	fba3 1302 	umull	r1, r3, r3, r2
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	2164      	movs	r1, #100	; 0x64
 800633a:	fb01 f303 	mul.w	r3, r1, r3
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	3332      	adds	r3, #50	; 0x32
 8006344:	4a27      	ldr	r2, [pc, #156]	; (80063e4 <UART_SetConfig+0x384>)
 8006346:	fba2 2303 	umull	r2, r3, r2, r3
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006352:	4498      	add	r8, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	461d      	mov	r5, r3
 8006358:	f04f 0600 	mov.w	r6, #0
 800635c:	46a9      	mov	r9, r5
 800635e:	46b2      	mov	sl, r6
 8006360:	eb19 0309 	adds.w	r3, r9, r9
 8006364:	eb4a 040a 	adc.w	r4, sl, sl
 8006368:	4699      	mov	r9, r3
 800636a:	46a2      	mov	sl, r4
 800636c:	eb19 0905 	adds.w	r9, r9, r5
 8006370:	eb4a 0a06 	adc.w	sl, sl, r6
 8006374:	f04f 0100 	mov.w	r1, #0
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006380:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006384:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006388:	4689      	mov	r9, r1
 800638a:	4692      	mov	sl, r2
 800638c:	eb19 0005 	adds.w	r0, r9, r5
 8006390:	eb4a 0106 	adc.w	r1, sl, r6
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	461d      	mov	r5, r3
 800639a:	f04f 0600 	mov.w	r6, #0
 800639e:	196b      	adds	r3, r5, r5
 80063a0:	eb46 0406 	adc.w	r4, r6, r6
 80063a4:	461a      	mov	r2, r3
 80063a6:	4623      	mov	r3, r4
 80063a8:	f7f9 ff8a 	bl	80002c0 <__aeabi_uldivmod>
 80063ac:	4603      	mov	r3, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	461a      	mov	r2, r3
 80063b2:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <UART_SetConfig+0x384>)
 80063b4:	fba3 1302 	umull	r1, r3, r3, r2
 80063b8:	095b      	lsrs	r3, r3, #5
 80063ba:	2164      	movs	r1, #100	; 0x64
 80063bc:	fb01 f303 	mul.w	r3, r1, r3
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	3332      	adds	r3, #50	; 0x32
 80063c6:	4a07      	ldr	r2, [pc, #28]	; (80063e4 <UART_SetConfig+0x384>)
 80063c8:	fba2 2303 	umull	r2, r3, r2, r3
 80063cc:	095b      	lsrs	r3, r3, #5
 80063ce:	f003 0207 	and.w	r2, r3, #7
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4442      	add	r2, r8
 80063d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80063da:	e1b2      	b.n	8006742 <UART_SetConfig+0x6e2>
 80063dc:	40011000 	.word	0x40011000
 80063e0:	40011400 	.word	0x40011400
 80063e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4ad7      	ldr	r2, [pc, #860]	; (800674c <UART_SetConfig+0x6ec>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d005      	beq.n	80063fe <UART_SetConfig+0x39e>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4ad6      	ldr	r2, [pc, #856]	; (8006750 <UART_SetConfig+0x6f0>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	f040 80d1 	bne.w	80065a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80063fe:	f7fe fa15 	bl	800482c <HAL_RCC_GetPCLK2Freq>
 8006402:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	469a      	mov	sl, r3
 8006408:	f04f 0b00 	mov.w	fp, #0
 800640c:	46d0      	mov	r8, sl
 800640e:	46d9      	mov	r9, fp
 8006410:	eb18 0308 	adds.w	r3, r8, r8
 8006414:	eb49 0409 	adc.w	r4, r9, r9
 8006418:	4698      	mov	r8, r3
 800641a:	46a1      	mov	r9, r4
 800641c:	eb18 080a 	adds.w	r8, r8, sl
 8006420:	eb49 090b 	adc.w	r9, r9, fp
 8006424:	f04f 0100 	mov.w	r1, #0
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006430:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006434:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006438:	4688      	mov	r8, r1
 800643a:	4691      	mov	r9, r2
 800643c:	eb1a 0508 	adds.w	r5, sl, r8
 8006440:	eb4b 0609 	adc.w	r6, fp, r9
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	4619      	mov	r1, r3
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	f04f 0400 	mov.w	r4, #0
 8006456:	0094      	lsls	r4, r2, #2
 8006458:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800645c:	008b      	lsls	r3, r1, #2
 800645e:	461a      	mov	r2, r3
 8006460:	4623      	mov	r3, r4
 8006462:	4628      	mov	r0, r5
 8006464:	4631      	mov	r1, r6
 8006466:	f7f9 ff2b 	bl	80002c0 <__aeabi_uldivmod>
 800646a:	4603      	mov	r3, r0
 800646c:	460c      	mov	r4, r1
 800646e:	461a      	mov	r2, r3
 8006470:	4bb8      	ldr	r3, [pc, #736]	; (8006754 <UART_SetConfig+0x6f4>)
 8006472:	fba3 2302 	umull	r2, r3, r3, r2
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	469b      	mov	fp, r3
 8006480:	f04f 0c00 	mov.w	ip, #0
 8006484:	46d9      	mov	r9, fp
 8006486:	46e2      	mov	sl, ip
 8006488:	eb19 0309 	adds.w	r3, r9, r9
 800648c:	eb4a 040a 	adc.w	r4, sl, sl
 8006490:	4699      	mov	r9, r3
 8006492:	46a2      	mov	sl, r4
 8006494:	eb19 090b 	adds.w	r9, r9, fp
 8006498:	eb4a 0a0c 	adc.w	sl, sl, ip
 800649c:	f04f 0100 	mov.w	r1, #0
 80064a0:	f04f 0200 	mov.w	r2, #0
 80064a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064b0:	4689      	mov	r9, r1
 80064b2:	4692      	mov	sl, r2
 80064b4:	eb1b 0509 	adds.w	r5, fp, r9
 80064b8:	eb4c 060a 	adc.w	r6, ip, sl
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4619      	mov	r1, r3
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	f04f 0400 	mov.w	r4, #0
 80064ce:	0094      	lsls	r4, r2, #2
 80064d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064d4:	008b      	lsls	r3, r1, #2
 80064d6:	461a      	mov	r2, r3
 80064d8:	4623      	mov	r3, r4
 80064da:	4628      	mov	r0, r5
 80064dc:	4631      	mov	r1, r6
 80064de:	f7f9 feef 	bl	80002c0 <__aeabi_uldivmod>
 80064e2:	4603      	mov	r3, r0
 80064e4:	460c      	mov	r4, r1
 80064e6:	461a      	mov	r2, r3
 80064e8:	4b9a      	ldr	r3, [pc, #616]	; (8006754 <UART_SetConfig+0x6f4>)
 80064ea:	fba3 1302 	umull	r1, r3, r3, r2
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	2164      	movs	r1, #100	; 0x64
 80064f2:	fb01 f303 	mul.w	r3, r1, r3
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	011b      	lsls	r3, r3, #4
 80064fa:	3332      	adds	r3, #50	; 0x32
 80064fc:	4a95      	ldr	r2, [pc, #596]	; (8006754 <UART_SetConfig+0x6f4>)
 80064fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006508:	4498      	add	r8, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	469b      	mov	fp, r3
 800650e:	f04f 0c00 	mov.w	ip, #0
 8006512:	46d9      	mov	r9, fp
 8006514:	46e2      	mov	sl, ip
 8006516:	eb19 0309 	adds.w	r3, r9, r9
 800651a:	eb4a 040a 	adc.w	r4, sl, sl
 800651e:	4699      	mov	r9, r3
 8006520:	46a2      	mov	sl, r4
 8006522:	eb19 090b 	adds.w	r9, r9, fp
 8006526:	eb4a 0a0c 	adc.w	sl, sl, ip
 800652a:	f04f 0100 	mov.w	r1, #0
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006536:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800653a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800653e:	4689      	mov	r9, r1
 8006540:	4692      	mov	sl, r2
 8006542:	eb1b 0509 	adds.w	r5, fp, r9
 8006546:	eb4c 060a 	adc.w	r6, ip, sl
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	4619      	mov	r1, r3
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	f04f 0400 	mov.w	r4, #0
 800655c:	0094      	lsls	r4, r2, #2
 800655e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006562:	008b      	lsls	r3, r1, #2
 8006564:	461a      	mov	r2, r3
 8006566:	4623      	mov	r3, r4
 8006568:	4628      	mov	r0, r5
 800656a:	4631      	mov	r1, r6
 800656c:	f7f9 fea8 	bl	80002c0 <__aeabi_uldivmod>
 8006570:	4603      	mov	r3, r0
 8006572:	460c      	mov	r4, r1
 8006574:	461a      	mov	r2, r3
 8006576:	4b77      	ldr	r3, [pc, #476]	; (8006754 <UART_SetConfig+0x6f4>)
 8006578:	fba3 1302 	umull	r1, r3, r3, r2
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	2164      	movs	r1, #100	; 0x64
 8006580:	fb01 f303 	mul.w	r3, r1, r3
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	3332      	adds	r3, #50	; 0x32
 800658a:	4a72      	ldr	r2, [pc, #456]	; (8006754 <UART_SetConfig+0x6f4>)
 800658c:	fba2 2303 	umull	r2, r3, r2, r3
 8006590:	095b      	lsrs	r3, r3, #5
 8006592:	f003 020f 	and.w	r2, r3, #15
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4442      	add	r2, r8
 800659c:	609a      	str	r2, [r3, #8]
 800659e:	e0d0      	b.n	8006742 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80065a0:	f7fe f930 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
 80065a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	469a      	mov	sl, r3
 80065aa:	f04f 0b00 	mov.w	fp, #0
 80065ae:	46d0      	mov	r8, sl
 80065b0:	46d9      	mov	r9, fp
 80065b2:	eb18 0308 	adds.w	r3, r8, r8
 80065b6:	eb49 0409 	adc.w	r4, r9, r9
 80065ba:	4698      	mov	r8, r3
 80065bc:	46a1      	mov	r9, r4
 80065be:	eb18 080a 	adds.w	r8, r8, sl
 80065c2:	eb49 090b 	adc.w	r9, r9, fp
 80065c6:	f04f 0100 	mov.w	r1, #0
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065da:	4688      	mov	r8, r1
 80065dc:	4691      	mov	r9, r2
 80065de:	eb1a 0508 	adds.w	r5, sl, r8
 80065e2:	eb4b 0609 	adc.w	r6, fp, r9
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	4619      	mov	r1, r3
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	f04f 0400 	mov.w	r4, #0
 80065f8:	0094      	lsls	r4, r2, #2
 80065fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065fe:	008b      	lsls	r3, r1, #2
 8006600:	461a      	mov	r2, r3
 8006602:	4623      	mov	r3, r4
 8006604:	4628      	mov	r0, r5
 8006606:	4631      	mov	r1, r6
 8006608:	f7f9 fe5a 	bl	80002c0 <__aeabi_uldivmod>
 800660c:	4603      	mov	r3, r0
 800660e:	460c      	mov	r4, r1
 8006610:	461a      	mov	r2, r3
 8006612:	4b50      	ldr	r3, [pc, #320]	; (8006754 <UART_SetConfig+0x6f4>)
 8006614:	fba3 2302 	umull	r2, r3, r3, r2
 8006618:	095b      	lsrs	r3, r3, #5
 800661a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	469b      	mov	fp, r3
 8006622:	f04f 0c00 	mov.w	ip, #0
 8006626:	46d9      	mov	r9, fp
 8006628:	46e2      	mov	sl, ip
 800662a:	eb19 0309 	adds.w	r3, r9, r9
 800662e:	eb4a 040a 	adc.w	r4, sl, sl
 8006632:	4699      	mov	r9, r3
 8006634:	46a2      	mov	sl, r4
 8006636:	eb19 090b 	adds.w	r9, r9, fp
 800663a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800663e:	f04f 0100 	mov.w	r1, #0
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800664a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800664e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006652:	4689      	mov	r9, r1
 8006654:	4692      	mov	sl, r2
 8006656:	eb1b 0509 	adds.w	r5, fp, r9
 800665a:	eb4c 060a 	adc.w	r6, ip, sl
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	4619      	mov	r1, r3
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	f04f 0400 	mov.w	r4, #0
 8006670:	0094      	lsls	r4, r2, #2
 8006672:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006676:	008b      	lsls	r3, r1, #2
 8006678:	461a      	mov	r2, r3
 800667a:	4623      	mov	r3, r4
 800667c:	4628      	mov	r0, r5
 800667e:	4631      	mov	r1, r6
 8006680:	f7f9 fe1e 	bl	80002c0 <__aeabi_uldivmod>
 8006684:	4603      	mov	r3, r0
 8006686:	460c      	mov	r4, r1
 8006688:	461a      	mov	r2, r3
 800668a:	4b32      	ldr	r3, [pc, #200]	; (8006754 <UART_SetConfig+0x6f4>)
 800668c:	fba3 1302 	umull	r1, r3, r3, r2
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	2164      	movs	r1, #100	; 0x64
 8006694:	fb01 f303 	mul.w	r3, r1, r3
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	3332      	adds	r3, #50	; 0x32
 800669e:	4a2d      	ldr	r2, [pc, #180]	; (8006754 <UART_SetConfig+0x6f4>)
 80066a0:	fba2 2303 	umull	r2, r3, r2, r3
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066aa:	4498      	add	r8, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	469b      	mov	fp, r3
 80066b0:	f04f 0c00 	mov.w	ip, #0
 80066b4:	46d9      	mov	r9, fp
 80066b6:	46e2      	mov	sl, ip
 80066b8:	eb19 0309 	adds.w	r3, r9, r9
 80066bc:	eb4a 040a 	adc.w	r4, sl, sl
 80066c0:	4699      	mov	r9, r3
 80066c2:	46a2      	mov	sl, r4
 80066c4:	eb19 090b 	adds.w	r9, r9, fp
 80066c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066cc:	f04f 0100 	mov.w	r1, #0
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066e0:	4689      	mov	r9, r1
 80066e2:	4692      	mov	sl, r2
 80066e4:	eb1b 0509 	adds.w	r5, fp, r9
 80066e8:	eb4c 060a 	adc.w	r6, ip, sl
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	4619      	mov	r1, r3
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	f04f 0400 	mov.w	r4, #0
 80066fe:	0094      	lsls	r4, r2, #2
 8006700:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006704:	008b      	lsls	r3, r1, #2
 8006706:	461a      	mov	r2, r3
 8006708:	4623      	mov	r3, r4
 800670a:	4628      	mov	r0, r5
 800670c:	4631      	mov	r1, r6
 800670e:	f7f9 fdd7 	bl	80002c0 <__aeabi_uldivmod>
 8006712:	4603      	mov	r3, r0
 8006714:	460c      	mov	r4, r1
 8006716:	461a      	mov	r2, r3
 8006718:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <UART_SetConfig+0x6f4>)
 800671a:	fba3 1302 	umull	r1, r3, r3, r2
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	2164      	movs	r1, #100	; 0x64
 8006722:	fb01 f303 	mul.w	r3, r1, r3
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	3332      	adds	r3, #50	; 0x32
 800672c:	4a09      	ldr	r2, [pc, #36]	; (8006754 <UART_SetConfig+0x6f4>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	f003 020f 	and.w	r2, r3, #15
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4442      	add	r2, r8
 800673e:	609a      	str	r2, [r3, #8]
}
 8006740:	e7ff      	b.n	8006742 <UART_SetConfig+0x6e2>
 8006742:	bf00      	nop
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674c:	40011000 	.word	0x40011000
 8006750:	40011400 	.word	0x40011400
 8006754:	51eb851f 	.word	0x51eb851f

08006758 <__errno>:
 8006758:	4b01      	ldr	r3, [pc, #4]	; (8006760 <__errno+0x8>)
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	20000020 	.word	0x20000020

08006764 <__libc_init_array>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	4e0d      	ldr	r6, [pc, #52]	; (800679c <__libc_init_array+0x38>)
 8006768:	4c0d      	ldr	r4, [pc, #52]	; (80067a0 <__libc_init_array+0x3c>)
 800676a:	1ba4      	subs	r4, r4, r6
 800676c:	10a4      	asrs	r4, r4, #2
 800676e:	2500      	movs	r5, #0
 8006770:	42a5      	cmp	r5, r4
 8006772:	d109      	bne.n	8006788 <__libc_init_array+0x24>
 8006774:	4e0b      	ldr	r6, [pc, #44]	; (80067a4 <__libc_init_array+0x40>)
 8006776:	4c0c      	ldr	r4, [pc, #48]	; (80067a8 <__libc_init_array+0x44>)
 8006778:	f000 fc26 	bl	8006fc8 <_init>
 800677c:	1ba4      	subs	r4, r4, r6
 800677e:	10a4      	asrs	r4, r4, #2
 8006780:	2500      	movs	r5, #0
 8006782:	42a5      	cmp	r5, r4
 8006784:	d105      	bne.n	8006792 <__libc_init_array+0x2e>
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800678c:	4798      	blx	r3
 800678e:	3501      	adds	r5, #1
 8006790:	e7ee      	b.n	8006770 <__libc_init_array+0xc>
 8006792:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006796:	4798      	blx	r3
 8006798:	3501      	adds	r5, #1
 800679a:	e7f2      	b.n	8006782 <__libc_init_array+0x1e>
 800679c:	080076dc 	.word	0x080076dc
 80067a0:	080076dc 	.word	0x080076dc
 80067a4:	080076dc 	.word	0x080076dc
 80067a8:	080076e0 	.word	0x080076e0

080067ac <memcpy>:
 80067ac:	b510      	push	{r4, lr}
 80067ae:	1e43      	subs	r3, r0, #1
 80067b0:	440a      	add	r2, r1
 80067b2:	4291      	cmp	r1, r2
 80067b4:	d100      	bne.n	80067b8 <memcpy+0xc>
 80067b6:	bd10      	pop	{r4, pc}
 80067b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067c0:	e7f7      	b.n	80067b2 <memcpy+0x6>

080067c2 <memmove>:
 80067c2:	4288      	cmp	r0, r1
 80067c4:	b510      	push	{r4, lr}
 80067c6:	eb01 0302 	add.w	r3, r1, r2
 80067ca:	d807      	bhi.n	80067dc <memmove+0x1a>
 80067cc:	1e42      	subs	r2, r0, #1
 80067ce:	4299      	cmp	r1, r3
 80067d0:	d00a      	beq.n	80067e8 <memmove+0x26>
 80067d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067da:	e7f8      	b.n	80067ce <memmove+0xc>
 80067dc:	4283      	cmp	r3, r0
 80067de:	d9f5      	bls.n	80067cc <memmove+0xa>
 80067e0:	1881      	adds	r1, r0, r2
 80067e2:	1ad2      	subs	r2, r2, r3
 80067e4:	42d3      	cmn	r3, r2
 80067e6:	d100      	bne.n	80067ea <memmove+0x28>
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067ee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80067f2:	e7f7      	b.n	80067e4 <memmove+0x22>

080067f4 <memset>:
 80067f4:	4402      	add	r2, r0
 80067f6:	4603      	mov	r3, r0
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d100      	bne.n	80067fe <memset+0xa>
 80067fc:	4770      	bx	lr
 80067fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006802:	e7f9      	b.n	80067f8 <memset+0x4>

08006804 <siprintf>:
 8006804:	b40e      	push	{r1, r2, r3}
 8006806:	b500      	push	{lr}
 8006808:	b09c      	sub	sp, #112	; 0x70
 800680a:	ab1d      	add	r3, sp, #116	; 0x74
 800680c:	9002      	str	r0, [sp, #8]
 800680e:	9006      	str	r0, [sp, #24]
 8006810:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006814:	4809      	ldr	r0, [pc, #36]	; (800683c <siprintf+0x38>)
 8006816:	9107      	str	r1, [sp, #28]
 8006818:	9104      	str	r1, [sp, #16]
 800681a:	4909      	ldr	r1, [pc, #36]	; (8006840 <siprintf+0x3c>)
 800681c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006820:	9105      	str	r1, [sp, #20]
 8006822:	6800      	ldr	r0, [r0, #0]
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	a902      	add	r1, sp, #8
 8006828:	f000 f866 	bl	80068f8 <_svfiprintf_r>
 800682c:	9b02      	ldr	r3, [sp, #8]
 800682e:	2200      	movs	r2, #0
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	b01c      	add	sp, #112	; 0x70
 8006834:	f85d eb04 	ldr.w	lr, [sp], #4
 8006838:	b003      	add	sp, #12
 800683a:	4770      	bx	lr
 800683c:	20000020 	.word	0x20000020
 8006840:	ffff0208 	.word	0xffff0208

08006844 <__ssputs_r>:
 8006844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	688e      	ldr	r6, [r1, #8]
 800684a:	429e      	cmp	r6, r3
 800684c:	4682      	mov	sl, r0
 800684e:	460c      	mov	r4, r1
 8006850:	4690      	mov	r8, r2
 8006852:	4699      	mov	r9, r3
 8006854:	d837      	bhi.n	80068c6 <__ssputs_r+0x82>
 8006856:	898a      	ldrh	r2, [r1, #12]
 8006858:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800685c:	d031      	beq.n	80068c2 <__ssputs_r+0x7e>
 800685e:	6825      	ldr	r5, [r4, #0]
 8006860:	6909      	ldr	r1, [r1, #16]
 8006862:	1a6f      	subs	r7, r5, r1
 8006864:	6965      	ldr	r5, [r4, #20]
 8006866:	2302      	movs	r3, #2
 8006868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800686c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006870:	f109 0301 	add.w	r3, r9, #1
 8006874:	443b      	add	r3, r7
 8006876:	429d      	cmp	r5, r3
 8006878:	bf38      	it	cc
 800687a:	461d      	movcc	r5, r3
 800687c:	0553      	lsls	r3, r2, #21
 800687e:	d530      	bpl.n	80068e2 <__ssputs_r+0x9e>
 8006880:	4629      	mov	r1, r5
 8006882:	f000 fb07 	bl	8006e94 <_malloc_r>
 8006886:	4606      	mov	r6, r0
 8006888:	b950      	cbnz	r0, 80068a0 <__ssputs_r+0x5c>
 800688a:	230c      	movs	r3, #12
 800688c:	f8ca 3000 	str.w	r3, [sl]
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	f04f 30ff 	mov.w	r0, #4294967295
 800689c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a0:	463a      	mov	r2, r7
 80068a2:	6921      	ldr	r1, [r4, #16]
 80068a4:	f7ff ff82 	bl	80067ac <memcpy>
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b2:	81a3      	strh	r3, [r4, #12]
 80068b4:	6126      	str	r6, [r4, #16]
 80068b6:	6165      	str	r5, [r4, #20]
 80068b8:	443e      	add	r6, r7
 80068ba:	1bed      	subs	r5, r5, r7
 80068bc:	6026      	str	r6, [r4, #0]
 80068be:	60a5      	str	r5, [r4, #8]
 80068c0:	464e      	mov	r6, r9
 80068c2:	454e      	cmp	r6, r9
 80068c4:	d900      	bls.n	80068c8 <__ssputs_r+0x84>
 80068c6:	464e      	mov	r6, r9
 80068c8:	4632      	mov	r2, r6
 80068ca:	4641      	mov	r1, r8
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	f7ff ff78 	bl	80067c2 <memmove>
 80068d2:	68a3      	ldr	r3, [r4, #8]
 80068d4:	1b9b      	subs	r3, r3, r6
 80068d6:	60a3      	str	r3, [r4, #8]
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	441e      	add	r6, r3
 80068dc:	6026      	str	r6, [r4, #0]
 80068de:	2000      	movs	r0, #0
 80068e0:	e7dc      	b.n	800689c <__ssputs_r+0x58>
 80068e2:	462a      	mov	r2, r5
 80068e4:	f000 fb30 	bl	8006f48 <_realloc_r>
 80068e8:	4606      	mov	r6, r0
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d1e2      	bne.n	80068b4 <__ssputs_r+0x70>
 80068ee:	6921      	ldr	r1, [r4, #16]
 80068f0:	4650      	mov	r0, sl
 80068f2:	f000 fa81 	bl	8006df8 <_free_r>
 80068f6:	e7c8      	b.n	800688a <__ssputs_r+0x46>

080068f8 <_svfiprintf_r>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	461d      	mov	r5, r3
 80068fe:	898b      	ldrh	r3, [r1, #12]
 8006900:	061f      	lsls	r7, r3, #24
 8006902:	b09d      	sub	sp, #116	; 0x74
 8006904:	4680      	mov	r8, r0
 8006906:	460c      	mov	r4, r1
 8006908:	4616      	mov	r6, r2
 800690a:	d50f      	bpl.n	800692c <_svfiprintf_r+0x34>
 800690c:	690b      	ldr	r3, [r1, #16]
 800690e:	b96b      	cbnz	r3, 800692c <_svfiprintf_r+0x34>
 8006910:	2140      	movs	r1, #64	; 0x40
 8006912:	f000 fabf 	bl	8006e94 <_malloc_r>
 8006916:	6020      	str	r0, [r4, #0]
 8006918:	6120      	str	r0, [r4, #16]
 800691a:	b928      	cbnz	r0, 8006928 <_svfiprintf_r+0x30>
 800691c:	230c      	movs	r3, #12
 800691e:	f8c8 3000 	str.w	r3, [r8]
 8006922:	f04f 30ff 	mov.w	r0, #4294967295
 8006926:	e0c8      	b.n	8006aba <_svfiprintf_r+0x1c2>
 8006928:	2340      	movs	r3, #64	; 0x40
 800692a:	6163      	str	r3, [r4, #20]
 800692c:	2300      	movs	r3, #0
 800692e:	9309      	str	r3, [sp, #36]	; 0x24
 8006930:	2320      	movs	r3, #32
 8006932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006936:	2330      	movs	r3, #48	; 0x30
 8006938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800693c:	9503      	str	r5, [sp, #12]
 800693e:	f04f 0b01 	mov.w	fp, #1
 8006942:	4637      	mov	r7, r6
 8006944:	463d      	mov	r5, r7
 8006946:	f815 3b01 	ldrb.w	r3, [r5], #1
 800694a:	b10b      	cbz	r3, 8006950 <_svfiprintf_r+0x58>
 800694c:	2b25      	cmp	r3, #37	; 0x25
 800694e:	d13e      	bne.n	80069ce <_svfiprintf_r+0xd6>
 8006950:	ebb7 0a06 	subs.w	sl, r7, r6
 8006954:	d00b      	beq.n	800696e <_svfiprintf_r+0x76>
 8006956:	4653      	mov	r3, sl
 8006958:	4632      	mov	r2, r6
 800695a:	4621      	mov	r1, r4
 800695c:	4640      	mov	r0, r8
 800695e:	f7ff ff71 	bl	8006844 <__ssputs_r>
 8006962:	3001      	adds	r0, #1
 8006964:	f000 80a4 	beq.w	8006ab0 <_svfiprintf_r+0x1b8>
 8006968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696a:	4453      	add	r3, sl
 800696c:	9309      	str	r3, [sp, #36]	; 0x24
 800696e:	783b      	ldrb	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 809d 	beq.w	8006ab0 <_svfiprintf_r+0x1b8>
 8006976:	2300      	movs	r3, #0
 8006978:	f04f 32ff 	mov.w	r2, #4294967295
 800697c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006980:	9304      	str	r3, [sp, #16]
 8006982:	9307      	str	r3, [sp, #28]
 8006984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006988:	931a      	str	r3, [sp, #104]	; 0x68
 800698a:	462f      	mov	r7, r5
 800698c:	2205      	movs	r2, #5
 800698e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006992:	4850      	ldr	r0, [pc, #320]	; (8006ad4 <_svfiprintf_r+0x1dc>)
 8006994:	f7f9 fc44 	bl	8000220 <memchr>
 8006998:	9b04      	ldr	r3, [sp, #16]
 800699a:	b9d0      	cbnz	r0, 80069d2 <_svfiprintf_r+0xda>
 800699c:	06d9      	lsls	r1, r3, #27
 800699e:	bf44      	itt	mi
 80069a0:	2220      	movmi	r2, #32
 80069a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069a6:	071a      	lsls	r2, r3, #28
 80069a8:	bf44      	itt	mi
 80069aa:	222b      	movmi	r2, #43	; 0x2b
 80069ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80069b0:	782a      	ldrb	r2, [r5, #0]
 80069b2:	2a2a      	cmp	r2, #42	; 0x2a
 80069b4:	d015      	beq.n	80069e2 <_svfiprintf_r+0xea>
 80069b6:	9a07      	ldr	r2, [sp, #28]
 80069b8:	462f      	mov	r7, r5
 80069ba:	2000      	movs	r0, #0
 80069bc:	250a      	movs	r5, #10
 80069be:	4639      	mov	r1, r7
 80069c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069c4:	3b30      	subs	r3, #48	; 0x30
 80069c6:	2b09      	cmp	r3, #9
 80069c8:	d94d      	bls.n	8006a66 <_svfiprintf_r+0x16e>
 80069ca:	b1b8      	cbz	r0, 80069fc <_svfiprintf_r+0x104>
 80069cc:	e00f      	b.n	80069ee <_svfiprintf_r+0xf6>
 80069ce:	462f      	mov	r7, r5
 80069d0:	e7b8      	b.n	8006944 <_svfiprintf_r+0x4c>
 80069d2:	4a40      	ldr	r2, [pc, #256]	; (8006ad4 <_svfiprintf_r+0x1dc>)
 80069d4:	1a80      	subs	r0, r0, r2
 80069d6:	fa0b f000 	lsl.w	r0, fp, r0
 80069da:	4318      	orrs	r0, r3
 80069dc:	9004      	str	r0, [sp, #16]
 80069de:	463d      	mov	r5, r7
 80069e0:	e7d3      	b.n	800698a <_svfiprintf_r+0x92>
 80069e2:	9a03      	ldr	r2, [sp, #12]
 80069e4:	1d11      	adds	r1, r2, #4
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	9103      	str	r1, [sp, #12]
 80069ea:	2a00      	cmp	r2, #0
 80069ec:	db01      	blt.n	80069f2 <_svfiprintf_r+0xfa>
 80069ee:	9207      	str	r2, [sp, #28]
 80069f0:	e004      	b.n	80069fc <_svfiprintf_r+0x104>
 80069f2:	4252      	negs	r2, r2
 80069f4:	f043 0302 	orr.w	r3, r3, #2
 80069f8:	9207      	str	r2, [sp, #28]
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	783b      	ldrb	r3, [r7, #0]
 80069fe:	2b2e      	cmp	r3, #46	; 0x2e
 8006a00:	d10c      	bne.n	8006a1c <_svfiprintf_r+0x124>
 8006a02:	787b      	ldrb	r3, [r7, #1]
 8006a04:	2b2a      	cmp	r3, #42	; 0x2a
 8006a06:	d133      	bne.n	8006a70 <_svfiprintf_r+0x178>
 8006a08:	9b03      	ldr	r3, [sp, #12]
 8006a0a:	1d1a      	adds	r2, r3, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	9203      	str	r2, [sp, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bfb8      	it	lt
 8006a14:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a18:	3702      	adds	r7, #2
 8006a1a:	9305      	str	r3, [sp, #20]
 8006a1c:	4d2e      	ldr	r5, [pc, #184]	; (8006ad8 <_svfiprintf_r+0x1e0>)
 8006a1e:	7839      	ldrb	r1, [r7, #0]
 8006a20:	2203      	movs	r2, #3
 8006a22:	4628      	mov	r0, r5
 8006a24:	f7f9 fbfc 	bl	8000220 <memchr>
 8006a28:	b138      	cbz	r0, 8006a3a <_svfiprintf_r+0x142>
 8006a2a:	2340      	movs	r3, #64	; 0x40
 8006a2c:	1b40      	subs	r0, r0, r5
 8006a2e:	fa03 f000 	lsl.w	r0, r3, r0
 8006a32:	9b04      	ldr	r3, [sp, #16]
 8006a34:	4303      	orrs	r3, r0
 8006a36:	3701      	adds	r7, #1
 8006a38:	9304      	str	r3, [sp, #16]
 8006a3a:	7839      	ldrb	r1, [r7, #0]
 8006a3c:	4827      	ldr	r0, [pc, #156]	; (8006adc <_svfiprintf_r+0x1e4>)
 8006a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a42:	2206      	movs	r2, #6
 8006a44:	1c7e      	adds	r6, r7, #1
 8006a46:	f7f9 fbeb 	bl	8000220 <memchr>
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d038      	beq.n	8006ac0 <_svfiprintf_r+0x1c8>
 8006a4e:	4b24      	ldr	r3, [pc, #144]	; (8006ae0 <_svfiprintf_r+0x1e8>)
 8006a50:	bb13      	cbnz	r3, 8006a98 <_svfiprintf_r+0x1a0>
 8006a52:	9b03      	ldr	r3, [sp, #12]
 8006a54:	3307      	adds	r3, #7
 8006a56:	f023 0307 	bic.w	r3, r3, #7
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	9303      	str	r3, [sp, #12]
 8006a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a60:	444b      	add	r3, r9
 8006a62:	9309      	str	r3, [sp, #36]	; 0x24
 8006a64:	e76d      	b.n	8006942 <_svfiprintf_r+0x4a>
 8006a66:	fb05 3202 	mla	r2, r5, r2, r3
 8006a6a:	2001      	movs	r0, #1
 8006a6c:	460f      	mov	r7, r1
 8006a6e:	e7a6      	b.n	80069be <_svfiprintf_r+0xc6>
 8006a70:	2300      	movs	r3, #0
 8006a72:	3701      	adds	r7, #1
 8006a74:	9305      	str	r3, [sp, #20]
 8006a76:	4619      	mov	r1, r3
 8006a78:	250a      	movs	r5, #10
 8006a7a:	4638      	mov	r0, r7
 8006a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a80:	3a30      	subs	r2, #48	; 0x30
 8006a82:	2a09      	cmp	r2, #9
 8006a84:	d903      	bls.n	8006a8e <_svfiprintf_r+0x196>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0c8      	beq.n	8006a1c <_svfiprintf_r+0x124>
 8006a8a:	9105      	str	r1, [sp, #20]
 8006a8c:	e7c6      	b.n	8006a1c <_svfiprintf_r+0x124>
 8006a8e:	fb05 2101 	mla	r1, r5, r1, r2
 8006a92:	2301      	movs	r3, #1
 8006a94:	4607      	mov	r7, r0
 8006a96:	e7f0      	b.n	8006a7a <_svfiprintf_r+0x182>
 8006a98:	ab03      	add	r3, sp, #12
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	4622      	mov	r2, r4
 8006a9e:	4b11      	ldr	r3, [pc, #68]	; (8006ae4 <_svfiprintf_r+0x1ec>)
 8006aa0:	a904      	add	r1, sp, #16
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	f3af 8000 	nop.w
 8006aa8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006aac:	4681      	mov	r9, r0
 8006aae:	d1d6      	bne.n	8006a5e <_svfiprintf_r+0x166>
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	065b      	lsls	r3, r3, #25
 8006ab4:	f53f af35 	bmi.w	8006922 <_svfiprintf_r+0x2a>
 8006ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aba:	b01d      	add	sp, #116	; 0x74
 8006abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac0:	ab03      	add	r3, sp, #12
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	4622      	mov	r2, r4
 8006ac6:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <_svfiprintf_r+0x1ec>)
 8006ac8:	a904      	add	r1, sp, #16
 8006aca:	4640      	mov	r0, r8
 8006acc:	f000 f882 	bl	8006bd4 <_printf_i>
 8006ad0:	e7ea      	b.n	8006aa8 <_svfiprintf_r+0x1b0>
 8006ad2:	bf00      	nop
 8006ad4:	080076a0 	.word	0x080076a0
 8006ad8:	080076a6 	.word	0x080076a6
 8006adc:	080076aa 	.word	0x080076aa
 8006ae0:	00000000 	.word	0x00000000
 8006ae4:	08006845 	.word	0x08006845

08006ae8 <_printf_common>:
 8006ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aec:	4691      	mov	r9, r2
 8006aee:	461f      	mov	r7, r3
 8006af0:	688a      	ldr	r2, [r1, #8]
 8006af2:	690b      	ldr	r3, [r1, #16]
 8006af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006af8:	4293      	cmp	r3, r2
 8006afa:	bfb8      	it	lt
 8006afc:	4613      	movlt	r3, r2
 8006afe:	f8c9 3000 	str.w	r3, [r9]
 8006b02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b06:	4606      	mov	r6, r0
 8006b08:	460c      	mov	r4, r1
 8006b0a:	b112      	cbz	r2, 8006b12 <_printf_common+0x2a>
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	f8c9 3000 	str.w	r3, [r9]
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	0699      	lsls	r1, r3, #26
 8006b16:	bf42      	ittt	mi
 8006b18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b1c:	3302      	addmi	r3, #2
 8006b1e:	f8c9 3000 	strmi.w	r3, [r9]
 8006b22:	6825      	ldr	r5, [r4, #0]
 8006b24:	f015 0506 	ands.w	r5, r5, #6
 8006b28:	d107      	bne.n	8006b3a <_printf_common+0x52>
 8006b2a:	f104 0a19 	add.w	sl, r4, #25
 8006b2e:	68e3      	ldr	r3, [r4, #12]
 8006b30:	f8d9 2000 	ldr.w	r2, [r9]
 8006b34:	1a9b      	subs	r3, r3, r2
 8006b36:	42ab      	cmp	r3, r5
 8006b38:	dc28      	bgt.n	8006b8c <_printf_common+0xa4>
 8006b3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	3300      	adds	r3, #0
 8006b42:	bf18      	it	ne
 8006b44:	2301      	movne	r3, #1
 8006b46:	0692      	lsls	r2, r2, #26
 8006b48:	d42d      	bmi.n	8006ba6 <_printf_common+0xbe>
 8006b4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b4e:	4639      	mov	r1, r7
 8006b50:	4630      	mov	r0, r6
 8006b52:	47c0      	blx	r8
 8006b54:	3001      	adds	r0, #1
 8006b56:	d020      	beq.n	8006b9a <_printf_common+0xb2>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	68e5      	ldr	r5, [r4, #12]
 8006b5c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b60:	f003 0306 	and.w	r3, r3, #6
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	bf08      	it	eq
 8006b68:	1aad      	subeq	r5, r5, r2
 8006b6a:	68a3      	ldr	r3, [r4, #8]
 8006b6c:	6922      	ldr	r2, [r4, #16]
 8006b6e:	bf0c      	ite	eq
 8006b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b74:	2500      	movne	r5, #0
 8006b76:	4293      	cmp	r3, r2
 8006b78:	bfc4      	itt	gt
 8006b7a:	1a9b      	subgt	r3, r3, r2
 8006b7c:	18ed      	addgt	r5, r5, r3
 8006b7e:	f04f 0900 	mov.w	r9, #0
 8006b82:	341a      	adds	r4, #26
 8006b84:	454d      	cmp	r5, r9
 8006b86:	d11a      	bne.n	8006bbe <_printf_common+0xd6>
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e008      	b.n	8006b9e <_printf_common+0xb6>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	4652      	mov	r2, sl
 8006b90:	4639      	mov	r1, r7
 8006b92:	4630      	mov	r0, r6
 8006b94:	47c0      	blx	r8
 8006b96:	3001      	adds	r0, #1
 8006b98:	d103      	bne.n	8006ba2 <_printf_common+0xba>
 8006b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba2:	3501      	adds	r5, #1
 8006ba4:	e7c3      	b.n	8006b2e <_printf_common+0x46>
 8006ba6:	18e1      	adds	r1, r4, r3
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	2030      	movs	r0, #48	; 0x30
 8006bac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bb0:	4422      	add	r2, r4
 8006bb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bba:	3302      	adds	r3, #2
 8006bbc:	e7c5      	b.n	8006b4a <_printf_common+0x62>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	4639      	mov	r1, r7
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	47c0      	blx	r8
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d0e6      	beq.n	8006b9a <_printf_common+0xb2>
 8006bcc:	f109 0901 	add.w	r9, r9, #1
 8006bd0:	e7d8      	b.n	8006b84 <_printf_common+0x9c>
	...

08006bd4 <_printf_i>:
 8006bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006bdc:	460c      	mov	r4, r1
 8006bde:	7e09      	ldrb	r1, [r1, #24]
 8006be0:	b085      	sub	sp, #20
 8006be2:	296e      	cmp	r1, #110	; 0x6e
 8006be4:	4617      	mov	r7, r2
 8006be6:	4606      	mov	r6, r0
 8006be8:	4698      	mov	r8, r3
 8006bea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bec:	f000 80b3 	beq.w	8006d56 <_printf_i+0x182>
 8006bf0:	d822      	bhi.n	8006c38 <_printf_i+0x64>
 8006bf2:	2963      	cmp	r1, #99	; 0x63
 8006bf4:	d036      	beq.n	8006c64 <_printf_i+0x90>
 8006bf6:	d80a      	bhi.n	8006c0e <_printf_i+0x3a>
 8006bf8:	2900      	cmp	r1, #0
 8006bfa:	f000 80b9 	beq.w	8006d70 <_printf_i+0x19c>
 8006bfe:	2958      	cmp	r1, #88	; 0x58
 8006c00:	f000 8083 	beq.w	8006d0a <_printf_i+0x136>
 8006c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c0c:	e032      	b.n	8006c74 <_printf_i+0xa0>
 8006c0e:	2964      	cmp	r1, #100	; 0x64
 8006c10:	d001      	beq.n	8006c16 <_printf_i+0x42>
 8006c12:	2969      	cmp	r1, #105	; 0x69
 8006c14:	d1f6      	bne.n	8006c04 <_printf_i+0x30>
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	6813      	ldr	r3, [r2, #0]
 8006c1a:	0605      	lsls	r5, r0, #24
 8006c1c:	f103 0104 	add.w	r1, r3, #4
 8006c20:	d52a      	bpl.n	8006c78 <_printf_i+0xa4>
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6011      	str	r1, [r2, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	da03      	bge.n	8006c32 <_printf_i+0x5e>
 8006c2a:	222d      	movs	r2, #45	; 0x2d
 8006c2c:	425b      	negs	r3, r3
 8006c2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c32:	486f      	ldr	r0, [pc, #444]	; (8006df0 <_printf_i+0x21c>)
 8006c34:	220a      	movs	r2, #10
 8006c36:	e039      	b.n	8006cac <_printf_i+0xd8>
 8006c38:	2973      	cmp	r1, #115	; 0x73
 8006c3a:	f000 809d 	beq.w	8006d78 <_printf_i+0x1a4>
 8006c3e:	d808      	bhi.n	8006c52 <_printf_i+0x7e>
 8006c40:	296f      	cmp	r1, #111	; 0x6f
 8006c42:	d020      	beq.n	8006c86 <_printf_i+0xb2>
 8006c44:	2970      	cmp	r1, #112	; 0x70
 8006c46:	d1dd      	bne.n	8006c04 <_printf_i+0x30>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	f043 0320 	orr.w	r3, r3, #32
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	e003      	b.n	8006c5a <_printf_i+0x86>
 8006c52:	2975      	cmp	r1, #117	; 0x75
 8006c54:	d017      	beq.n	8006c86 <_printf_i+0xb2>
 8006c56:	2978      	cmp	r1, #120	; 0x78
 8006c58:	d1d4      	bne.n	8006c04 <_printf_i+0x30>
 8006c5a:	2378      	movs	r3, #120	; 0x78
 8006c5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c60:	4864      	ldr	r0, [pc, #400]	; (8006df4 <_printf_i+0x220>)
 8006c62:	e055      	b.n	8006d10 <_printf_i+0x13c>
 8006c64:	6813      	ldr	r3, [r2, #0]
 8006c66:	1d19      	adds	r1, r3, #4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6011      	str	r1, [r2, #0]
 8006c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c74:	2301      	movs	r3, #1
 8006c76:	e08c      	b.n	8006d92 <_printf_i+0x1be>
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6011      	str	r1, [r2, #0]
 8006c7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c80:	bf18      	it	ne
 8006c82:	b21b      	sxthne	r3, r3
 8006c84:	e7cf      	b.n	8006c26 <_printf_i+0x52>
 8006c86:	6813      	ldr	r3, [r2, #0]
 8006c88:	6825      	ldr	r5, [r4, #0]
 8006c8a:	1d18      	adds	r0, r3, #4
 8006c8c:	6010      	str	r0, [r2, #0]
 8006c8e:	0628      	lsls	r0, r5, #24
 8006c90:	d501      	bpl.n	8006c96 <_printf_i+0xc2>
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	e002      	b.n	8006c9c <_printf_i+0xc8>
 8006c96:	0668      	lsls	r0, r5, #25
 8006c98:	d5fb      	bpl.n	8006c92 <_printf_i+0xbe>
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	4854      	ldr	r0, [pc, #336]	; (8006df0 <_printf_i+0x21c>)
 8006c9e:	296f      	cmp	r1, #111	; 0x6f
 8006ca0:	bf14      	ite	ne
 8006ca2:	220a      	movne	r2, #10
 8006ca4:	2208      	moveq	r2, #8
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cac:	6865      	ldr	r5, [r4, #4]
 8006cae:	60a5      	str	r5, [r4, #8]
 8006cb0:	2d00      	cmp	r5, #0
 8006cb2:	f2c0 8095 	blt.w	8006de0 <_printf_i+0x20c>
 8006cb6:	6821      	ldr	r1, [r4, #0]
 8006cb8:	f021 0104 	bic.w	r1, r1, #4
 8006cbc:	6021      	str	r1, [r4, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d13d      	bne.n	8006d3e <_printf_i+0x16a>
 8006cc2:	2d00      	cmp	r5, #0
 8006cc4:	f040 808e 	bne.w	8006de4 <_printf_i+0x210>
 8006cc8:	4665      	mov	r5, ip
 8006cca:	2a08      	cmp	r2, #8
 8006ccc:	d10b      	bne.n	8006ce6 <_printf_i+0x112>
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	07db      	lsls	r3, r3, #31
 8006cd2:	d508      	bpl.n	8006ce6 <_printf_i+0x112>
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	6862      	ldr	r2, [r4, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	bfde      	ittt	le
 8006cdc:	2330      	movle	r3, #48	; 0x30
 8006cde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ce2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ce6:	ebac 0305 	sub.w	r3, ip, r5
 8006cea:	6123      	str	r3, [r4, #16]
 8006cec:	f8cd 8000 	str.w	r8, [sp]
 8006cf0:	463b      	mov	r3, r7
 8006cf2:	aa03      	add	r2, sp, #12
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f7ff fef6 	bl	8006ae8 <_printf_common>
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d14d      	bne.n	8006d9c <_printf_i+0x1c8>
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295
 8006d04:	b005      	add	sp, #20
 8006d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d0a:	4839      	ldr	r0, [pc, #228]	; (8006df0 <_printf_i+0x21c>)
 8006d0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d10:	6813      	ldr	r3, [r2, #0]
 8006d12:	6821      	ldr	r1, [r4, #0]
 8006d14:	1d1d      	adds	r5, r3, #4
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6015      	str	r5, [r2, #0]
 8006d1a:	060a      	lsls	r2, r1, #24
 8006d1c:	d50b      	bpl.n	8006d36 <_printf_i+0x162>
 8006d1e:	07ca      	lsls	r2, r1, #31
 8006d20:	bf44      	itt	mi
 8006d22:	f041 0120 	orrmi.w	r1, r1, #32
 8006d26:	6021      	strmi	r1, [r4, #0]
 8006d28:	b91b      	cbnz	r3, 8006d32 <_printf_i+0x15e>
 8006d2a:	6822      	ldr	r2, [r4, #0]
 8006d2c:	f022 0220 	bic.w	r2, r2, #32
 8006d30:	6022      	str	r2, [r4, #0]
 8006d32:	2210      	movs	r2, #16
 8006d34:	e7b7      	b.n	8006ca6 <_printf_i+0xd2>
 8006d36:	064d      	lsls	r5, r1, #25
 8006d38:	bf48      	it	mi
 8006d3a:	b29b      	uxthmi	r3, r3
 8006d3c:	e7ef      	b.n	8006d1e <_printf_i+0x14a>
 8006d3e:	4665      	mov	r5, ip
 8006d40:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d44:	fb02 3311 	mls	r3, r2, r1, r3
 8006d48:	5cc3      	ldrb	r3, [r0, r3]
 8006d4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d4e:	460b      	mov	r3, r1
 8006d50:	2900      	cmp	r1, #0
 8006d52:	d1f5      	bne.n	8006d40 <_printf_i+0x16c>
 8006d54:	e7b9      	b.n	8006cca <_printf_i+0xf6>
 8006d56:	6813      	ldr	r3, [r2, #0]
 8006d58:	6825      	ldr	r5, [r4, #0]
 8006d5a:	6961      	ldr	r1, [r4, #20]
 8006d5c:	1d18      	adds	r0, r3, #4
 8006d5e:	6010      	str	r0, [r2, #0]
 8006d60:	0628      	lsls	r0, r5, #24
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	d501      	bpl.n	8006d6a <_printf_i+0x196>
 8006d66:	6019      	str	r1, [r3, #0]
 8006d68:	e002      	b.n	8006d70 <_printf_i+0x19c>
 8006d6a:	066a      	lsls	r2, r5, #25
 8006d6c:	d5fb      	bpl.n	8006d66 <_printf_i+0x192>
 8006d6e:	8019      	strh	r1, [r3, #0]
 8006d70:	2300      	movs	r3, #0
 8006d72:	6123      	str	r3, [r4, #16]
 8006d74:	4665      	mov	r5, ip
 8006d76:	e7b9      	b.n	8006cec <_printf_i+0x118>
 8006d78:	6813      	ldr	r3, [r2, #0]
 8006d7a:	1d19      	adds	r1, r3, #4
 8006d7c:	6011      	str	r1, [r2, #0]
 8006d7e:	681d      	ldr	r5, [r3, #0]
 8006d80:	6862      	ldr	r2, [r4, #4]
 8006d82:	2100      	movs	r1, #0
 8006d84:	4628      	mov	r0, r5
 8006d86:	f7f9 fa4b 	bl	8000220 <memchr>
 8006d8a:	b108      	cbz	r0, 8006d90 <_printf_i+0x1bc>
 8006d8c:	1b40      	subs	r0, r0, r5
 8006d8e:	6060      	str	r0, [r4, #4]
 8006d90:	6863      	ldr	r3, [r4, #4]
 8006d92:	6123      	str	r3, [r4, #16]
 8006d94:	2300      	movs	r3, #0
 8006d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d9a:	e7a7      	b.n	8006cec <_printf_i+0x118>
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	462a      	mov	r2, r5
 8006da0:	4639      	mov	r1, r7
 8006da2:	4630      	mov	r0, r6
 8006da4:	47c0      	blx	r8
 8006da6:	3001      	adds	r0, #1
 8006da8:	d0aa      	beq.n	8006d00 <_printf_i+0x12c>
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	079b      	lsls	r3, r3, #30
 8006dae:	d413      	bmi.n	8006dd8 <_printf_i+0x204>
 8006db0:	68e0      	ldr	r0, [r4, #12]
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	4298      	cmp	r0, r3
 8006db6:	bfb8      	it	lt
 8006db8:	4618      	movlt	r0, r3
 8006dba:	e7a3      	b.n	8006d04 <_printf_i+0x130>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	464a      	mov	r2, r9
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	47c0      	blx	r8
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	d09a      	beq.n	8006d00 <_printf_i+0x12c>
 8006dca:	3501      	adds	r5, #1
 8006dcc:	68e3      	ldr	r3, [r4, #12]
 8006dce:	9a03      	ldr	r2, [sp, #12]
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	42ab      	cmp	r3, r5
 8006dd4:	dcf2      	bgt.n	8006dbc <_printf_i+0x1e8>
 8006dd6:	e7eb      	b.n	8006db0 <_printf_i+0x1dc>
 8006dd8:	2500      	movs	r5, #0
 8006dda:	f104 0919 	add.w	r9, r4, #25
 8006dde:	e7f5      	b.n	8006dcc <_printf_i+0x1f8>
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1ac      	bne.n	8006d3e <_printf_i+0x16a>
 8006de4:	7803      	ldrb	r3, [r0, #0]
 8006de6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dee:	e76c      	b.n	8006cca <_printf_i+0xf6>
 8006df0:	080076b1 	.word	0x080076b1
 8006df4:	080076c2 	.word	0x080076c2

08006df8 <_free_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	2900      	cmp	r1, #0
 8006dfe:	d045      	beq.n	8006e8c <_free_r+0x94>
 8006e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e04:	1f0c      	subs	r4, r1, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bfb8      	it	lt
 8006e0a:	18e4      	addlt	r4, r4, r3
 8006e0c:	f000 f8d2 	bl	8006fb4 <__malloc_lock>
 8006e10:	4a1f      	ldr	r2, [pc, #124]	; (8006e90 <_free_r+0x98>)
 8006e12:	6813      	ldr	r3, [r2, #0]
 8006e14:	4610      	mov	r0, r2
 8006e16:	b933      	cbnz	r3, 8006e26 <_free_r+0x2e>
 8006e18:	6063      	str	r3, [r4, #4]
 8006e1a:	6014      	str	r4, [r2, #0]
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e22:	f000 b8c8 	b.w	8006fb6 <__malloc_unlock>
 8006e26:	42a3      	cmp	r3, r4
 8006e28:	d90c      	bls.n	8006e44 <_free_r+0x4c>
 8006e2a:	6821      	ldr	r1, [r4, #0]
 8006e2c:	1862      	adds	r2, r4, r1
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	bf04      	itt	eq
 8006e32:	681a      	ldreq	r2, [r3, #0]
 8006e34:	685b      	ldreq	r3, [r3, #4]
 8006e36:	6063      	str	r3, [r4, #4]
 8006e38:	bf04      	itt	eq
 8006e3a:	1852      	addeq	r2, r2, r1
 8006e3c:	6022      	streq	r2, [r4, #0]
 8006e3e:	6004      	str	r4, [r0, #0]
 8006e40:	e7ec      	b.n	8006e1c <_free_r+0x24>
 8006e42:	4613      	mov	r3, r2
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	b10a      	cbz	r2, 8006e4c <_free_r+0x54>
 8006e48:	42a2      	cmp	r2, r4
 8006e4a:	d9fa      	bls.n	8006e42 <_free_r+0x4a>
 8006e4c:	6819      	ldr	r1, [r3, #0]
 8006e4e:	1858      	adds	r0, r3, r1
 8006e50:	42a0      	cmp	r0, r4
 8006e52:	d10b      	bne.n	8006e6c <_free_r+0x74>
 8006e54:	6820      	ldr	r0, [r4, #0]
 8006e56:	4401      	add	r1, r0
 8006e58:	1858      	adds	r0, r3, r1
 8006e5a:	4282      	cmp	r2, r0
 8006e5c:	6019      	str	r1, [r3, #0]
 8006e5e:	d1dd      	bne.n	8006e1c <_free_r+0x24>
 8006e60:	6810      	ldr	r0, [r2, #0]
 8006e62:	6852      	ldr	r2, [r2, #4]
 8006e64:	605a      	str	r2, [r3, #4]
 8006e66:	4401      	add	r1, r0
 8006e68:	6019      	str	r1, [r3, #0]
 8006e6a:	e7d7      	b.n	8006e1c <_free_r+0x24>
 8006e6c:	d902      	bls.n	8006e74 <_free_r+0x7c>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	e7d3      	b.n	8006e1c <_free_r+0x24>
 8006e74:	6820      	ldr	r0, [r4, #0]
 8006e76:	1821      	adds	r1, r4, r0
 8006e78:	428a      	cmp	r2, r1
 8006e7a:	bf04      	itt	eq
 8006e7c:	6811      	ldreq	r1, [r2, #0]
 8006e7e:	6852      	ldreq	r2, [r2, #4]
 8006e80:	6062      	str	r2, [r4, #4]
 8006e82:	bf04      	itt	eq
 8006e84:	1809      	addeq	r1, r1, r0
 8006e86:	6021      	streq	r1, [r4, #0]
 8006e88:	605c      	str	r4, [r3, #4]
 8006e8a:	e7c7      	b.n	8006e1c <_free_r+0x24>
 8006e8c:	bd38      	pop	{r3, r4, r5, pc}
 8006e8e:	bf00      	nop
 8006e90:	200000cc 	.word	0x200000cc

08006e94 <_malloc_r>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	1ccd      	adds	r5, r1, #3
 8006e98:	f025 0503 	bic.w	r5, r5, #3
 8006e9c:	3508      	adds	r5, #8
 8006e9e:	2d0c      	cmp	r5, #12
 8006ea0:	bf38      	it	cc
 8006ea2:	250c      	movcc	r5, #12
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	db01      	blt.n	8006eae <_malloc_r+0x1a>
 8006eaa:	42a9      	cmp	r1, r5
 8006eac:	d903      	bls.n	8006eb6 <_malloc_r+0x22>
 8006eae:	230c      	movs	r3, #12
 8006eb0:	6033      	str	r3, [r6, #0]
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
 8006eb6:	f000 f87d 	bl	8006fb4 <__malloc_lock>
 8006eba:	4a21      	ldr	r2, [pc, #132]	; (8006f40 <_malloc_r+0xac>)
 8006ebc:	6814      	ldr	r4, [r2, #0]
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	b991      	cbnz	r1, 8006ee8 <_malloc_r+0x54>
 8006ec2:	4c20      	ldr	r4, [pc, #128]	; (8006f44 <_malloc_r+0xb0>)
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	b91b      	cbnz	r3, 8006ed0 <_malloc_r+0x3c>
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f000 f863 	bl	8006f94 <_sbrk_r>
 8006ece:	6020      	str	r0, [r4, #0]
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f000 f85e 	bl	8006f94 <_sbrk_r>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d124      	bne.n	8006f26 <_malloc_r+0x92>
 8006edc:	230c      	movs	r3, #12
 8006ede:	6033      	str	r3, [r6, #0]
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f000 f868 	bl	8006fb6 <__malloc_unlock>
 8006ee6:	e7e4      	b.n	8006eb2 <_malloc_r+0x1e>
 8006ee8:	680b      	ldr	r3, [r1, #0]
 8006eea:	1b5b      	subs	r3, r3, r5
 8006eec:	d418      	bmi.n	8006f20 <_malloc_r+0x8c>
 8006eee:	2b0b      	cmp	r3, #11
 8006ef0:	d90f      	bls.n	8006f12 <_malloc_r+0x7e>
 8006ef2:	600b      	str	r3, [r1, #0]
 8006ef4:	50cd      	str	r5, [r1, r3]
 8006ef6:	18cc      	adds	r4, r1, r3
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f000 f85c 	bl	8006fb6 <__malloc_unlock>
 8006efe:	f104 000b 	add.w	r0, r4, #11
 8006f02:	1d23      	adds	r3, r4, #4
 8006f04:	f020 0007 	bic.w	r0, r0, #7
 8006f08:	1ac3      	subs	r3, r0, r3
 8006f0a:	d0d3      	beq.n	8006eb4 <_malloc_r+0x20>
 8006f0c:	425a      	negs	r2, r3
 8006f0e:	50e2      	str	r2, [r4, r3]
 8006f10:	e7d0      	b.n	8006eb4 <_malloc_r+0x20>
 8006f12:	428c      	cmp	r4, r1
 8006f14:	684b      	ldr	r3, [r1, #4]
 8006f16:	bf16      	itet	ne
 8006f18:	6063      	strne	r3, [r4, #4]
 8006f1a:	6013      	streq	r3, [r2, #0]
 8006f1c:	460c      	movne	r4, r1
 8006f1e:	e7eb      	b.n	8006ef8 <_malloc_r+0x64>
 8006f20:	460c      	mov	r4, r1
 8006f22:	6849      	ldr	r1, [r1, #4]
 8006f24:	e7cc      	b.n	8006ec0 <_malloc_r+0x2c>
 8006f26:	1cc4      	adds	r4, r0, #3
 8006f28:	f024 0403 	bic.w	r4, r4, #3
 8006f2c:	42a0      	cmp	r0, r4
 8006f2e:	d005      	beq.n	8006f3c <_malloc_r+0xa8>
 8006f30:	1a21      	subs	r1, r4, r0
 8006f32:	4630      	mov	r0, r6
 8006f34:	f000 f82e 	bl	8006f94 <_sbrk_r>
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d0cf      	beq.n	8006edc <_malloc_r+0x48>
 8006f3c:	6025      	str	r5, [r4, #0]
 8006f3e:	e7db      	b.n	8006ef8 <_malloc_r+0x64>
 8006f40:	200000cc 	.word	0x200000cc
 8006f44:	200000d0 	.word	0x200000d0

08006f48 <_realloc_r>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	4607      	mov	r7, r0
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	460e      	mov	r6, r1
 8006f50:	b921      	cbnz	r1, 8006f5c <_realloc_r+0x14>
 8006f52:	4611      	mov	r1, r2
 8006f54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f58:	f7ff bf9c 	b.w	8006e94 <_malloc_r>
 8006f5c:	b922      	cbnz	r2, 8006f68 <_realloc_r+0x20>
 8006f5e:	f7ff ff4b 	bl	8006df8 <_free_r>
 8006f62:	4625      	mov	r5, r4
 8006f64:	4628      	mov	r0, r5
 8006f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f68:	f000 f826 	bl	8006fb8 <_malloc_usable_size_r>
 8006f6c:	42a0      	cmp	r0, r4
 8006f6e:	d20f      	bcs.n	8006f90 <_realloc_r+0x48>
 8006f70:	4621      	mov	r1, r4
 8006f72:	4638      	mov	r0, r7
 8006f74:	f7ff ff8e 	bl	8006e94 <_malloc_r>
 8006f78:	4605      	mov	r5, r0
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d0f2      	beq.n	8006f64 <_realloc_r+0x1c>
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4622      	mov	r2, r4
 8006f82:	f7ff fc13 	bl	80067ac <memcpy>
 8006f86:	4631      	mov	r1, r6
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f7ff ff35 	bl	8006df8 <_free_r>
 8006f8e:	e7e9      	b.n	8006f64 <_realloc_r+0x1c>
 8006f90:	4635      	mov	r5, r6
 8006f92:	e7e7      	b.n	8006f64 <_realloc_r+0x1c>

08006f94 <_sbrk_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4c06      	ldr	r4, [pc, #24]	; (8006fb0 <_sbrk_r+0x1c>)
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	f7fc fb26 	bl	80035f0 <_sbrk>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_sbrk_r+0x1a>
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_sbrk_r+0x1a>
 8006fac:	602b      	str	r3, [r5, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	20002e18 	.word	0x20002e18

08006fb4 <__malloc_lock>:
 8006fb4:	4770      	bx	lr

08006fb6 <__malloc_unlock>:
 8006fb6:	4770      	bx	lr

08006fb8 <_malloc_usable_size_r>:
 8006fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fbc:	1f18      	subs	r0, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	bfbc      	itt	lt
 8006fc2:	580b      	ldrlt	r3, [r1, r0]
 8006fc4:	18c0      	addlt	r0, r0, r3
 8006fc6:	4770      	bx	lr

08006fc8 <_init>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	bf00      	nop
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr

08006fd4 <_fini>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	bf00      	nop
 8006fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fda:	bc08      	pop	{r3}
 8006fdc:	469e      	mov	lr, r3
 8006fde:	4770      	bx	lr
