
DAC_SINEWAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  08009018  08009018  00019018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096d8  080096d8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080096d8  080096d8  000196d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096e0  080096e0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e0  080096e0  000196e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096e4  080096e4  000196e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080096e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003434  20000088  08009770  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034bc  08009770  000234bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001446a  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029f4  00000000  00000000  00034522  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  00036f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  00037e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002378d  00000000  00000000  00038be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf9f  00000000  00000000  0005c36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2ac1  00000000  00000000  0006930c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bdcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004538  00000000  00000000  0013be48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ffc 	.word	0x08008ffc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08008ffc 	.word	0x08008ffc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b972 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	4688      	mov	r8, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14b      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4615      	mov	r5, r2
 8000c1a:	d967      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0720 	rsb	r7, r2, #32
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c2e:	4095      	lsls	r5, r2
 8000c30:	ea47 0803 	orr.w	r8, r7, r3
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c40:	fa1f fc85 	uxth.w	ip, r5
 8000c44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5a:	f080 811b 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8118 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c64:	3f02      	subs	r7, #2
 8000c66:	442b      	add	r3, r5
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8107 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	f240 8104 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c90:	3802      	subs	r0, #2
 8000c92:	442c      	add	r4, r5
 8000c94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c98:	eba4 040c 	sub.w	r4, r4, ip
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	b11e      	cbz	r6, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca8:	4639      	mov	r1, r7
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0xbe>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80eb 	beq.w	8000e8e <__udivmoddi4+0x286>
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e9c6 0100 	strd	r0, r1, [r6]
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	fab3 f783 	clz	r7, r3
 8000cca:	2f00      	cmp	r7, #0
 8000ccc:	d147      	bne.n	8000d5e <__udivmoddi4+0x156>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xd0>
 8000cd2:	4282      	cmp	r2, r0
 8000cd4:	f200 80fa 	bhi.w	8000ecc <__udivmoddi4+0x2c4>
 8000cd8:	1a84      	subs	r4, r0, r2
 8000cda:	eb61 0303 	sbc.w	r3, r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d0e0      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000ce6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cea:	e7dd      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000cec:	b902      	cbnz	r2, 8000cf0 <__udivmoddi4+0xe8>
 8000cee:	deff      	udf	#255	; 0xff
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f040 808f 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cfa:	1b49      	subs	r1, r1, r5
 8000cfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d00:	fa1f f885 	uxth.w	r8, r5
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d14:	fb08 f10c 	mul.w	r1, r8, ip
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4299      	cmp	r1, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x14c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x14a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80b6 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e79f      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d62:	40bb      	lsls	r3, r7
 8000d64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d7c:	4325      	orrs	r5, r4
 8000d7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d82:	0c2c      	lsrs	r4, r5, #16
 8000d84:	fb08 3319 	mls	r3, r8, r9, r3
 8000d88:	fa1f fa8e 	uxth.w	sl, lr
 8000d8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d90:	fb09 f40a 	mul.w	r4, r9, sl
 8000d94:	429c      	cmp	r4, r3
 8000d96:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1e 0303 	adds.w	r3, lr, r3
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	f080 8087 	bcs.w	8000eba <__udivmoddi4+0x2b2>
 8000dac:	429c      	cmp	r4, r3
 8000dae:	f240 8084 	bls.w	8000eba <__udivmoddi4+0x2b2>
 8000db2:	f1a9 0902 	sub.w	r9, r9, #2
 8000db6:	4473      	add	r3, lr
 8000db8:	1b1b      	subs	r3, r3, r4
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dcc:	45a2      	cmp	sl, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	d26b      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dda:	45a2      	cmp	sl, r4
 8000ddc:	d969      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4474      	add	r4, lr
 8000de2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	eba4 040a 	sub.w	r4, r4, sl
 8000dee:	454c      	cmp	r4, r9
 8000df0:	46c2      	mov	sl, r8
 8000df2:	464b      	mov	r3, r9
 8000df4:	d354      	bcc.n	8000ea0 <__udivmoddi4+0x298>
 8000df6:	d051      	beq.n	8000e9c <__udivmoddi4+0x294>
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d069      	beq.n	8000ed0 <__udivmoddi4+0x2c8>
 8000dfc:	ebb1 050a 	subs.w	r5, r1, sl
 8000e00:	eb64 0403 	sbc.w	r4, r4, r3
 8000e04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e08:	40fd      	lsrs	r5, r7
 8000e0a:	40fc      	lsrs	r4, r7
 8000e0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e10:	e9c6 5400 	strd	r5, r4, [r6]
 8000e14:	2700      	movs	r7, #0
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e20:	4095      	lsls	r5, r2
 8000e22:	fa01 f002 	lsl.w	r0, r1, r2
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e2e:	4338      	orrs	r0, r7
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e36:	fa1f f885 	uxth.w	r8, r5
 8000e3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb07 f308 	mul.w	r3, r7, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x256>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e54:	d22f      	bcs.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d92d      	bls.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e5a:	3f02      	subs	r7, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	b281      	uxth	r1, r0
 8000e62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6e:	fb00 f308 	mul.w	r3, r0, r8
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x27e>
 8000e76:	1869      	adds	r1, r5, r1
 8000e78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e7c:	d217      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d915      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4429      	add	r1, r5
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e8c:	e73b      	b.n	8000d06 <__udivmoddi4+0xfe>
 8000e8e:	4637      	mov	r7, r6
 8000e90:	4630      	mov	r0, r6
 8000e92:	e709      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e94:	4607      	mov	r7, r0
 8000e96:	e6e7      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fb      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e9c:	4541      	cmp	r1, r8
 8000e9e:	d2ab      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	4613      	mov	r3, r2
 8000eac:	e7a4      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	e7e9      	b.n	8000e86 <__udivmoddi4+0x27e>
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e795      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb6:	4667      	mov	r7, ip
 8000eb8:	e7d1      	b.n	8000e5e <__udivmoddi4+0x256>
 8000eba:	4681      	mov	r9, r0
 8000ebc:	e77c      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	442c      	add	r4, r5
 8000ec2:	e747      	b.n	8000d54 <__udivmoddi4+0x14c>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	442b      	add	r3, r5
 8000eca:	e72f      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ecc:	4638      	mov	r0, r7
 8000ece:	e708      	b.n	8000ce2 <__udivmoddi4+0xda>
 8000ed0:	4637      	mov	r7, r6
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0xa0>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <conv_HEX_to_BIN>:

//**************** KISS *************************************************************************************************************
bool KISS_FLAG[FLAG_SIZE] = { 0, 0, 0, 0, 0, 0, 1, 1 };

//Conversion functions
void conv_HEX_to_BIN(uint16_t hex_byte_in, bool *bin_byte_out, bool select_8_16){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	80fb      	strh	r3, [r7, #6]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	717b      	strb	r3, [r7, #5]
    int temp;

    sprintf(uartData, "\nSelector              = %d",select_8_16);
 8000ee8:	797b      	ldrb	r3, [r7, #5]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4939      	ldr	r1, [pc, #228]	; (8000fd4 <conv_HEX_to_BIN+0xfc>)
 8000eee:	483a      	ldr	r0, [pc, #232]	; (8000fd8 <conv_HEX_to_BIN+0x100>)
 8000ef0:	f006 fc4c 	bl	800778c <siprintf>
    debug_print_msg();
 8000ef4:	f001 f8b0 	bl	8002058 <debug_print_msg>

    sprintf(uartData, "\nByte value            = %d\nBinary value[LSB:MSB] =",hex_byte_in);
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4937      	ldr	r1, [pc, #220]	; (8000fdc <conv_HEX_to_BIN+0x104>)
 8000efe:	4836      	ldr	r0, [pc, #216]	; (8000fd8 <conv_HEX_to_BIN+0x100>)
 8000f00:	f006 fc44 	bl	800778c <siprintf>
	debug_print_msg();
 8000f04:	f001 f8a8 	bl	8002058 <debug_print_msg>

    if(select_8_16){
 8000f08:	797b      	ldrb	r3, [r7, #5]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d01f      	beq.n	8000f4e <conv_HEX_to_BIN+0x76>
		for(int i = 0; i < 8; i++){
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	e018      	b.n	8000f46 <conv_HEX_to_BIN+0x6e>
			temp = hex_byte_in >> i;
 8000f14:	88fa      	ldrh	r2, [r7, #6]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	fa42 f303 	asr.w	r3, r2, r3
 8000f1c:	60fb      	str	r3, [r7, #12]
			temp = temp%2;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	bfb8      	it	lt
 8000f28:	425b      	neglt	r3, r3
 8000f2a:	60fb      	str	r3, [r7, #12]

			//sprintf(uartData, " %d ",temp);
			//debug_print_msg();

			*(bin_byte_out+i) = temp;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2201      	movne	r2, #1
 8000f3a:	2200      	moveq	r2, #0
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2b07      	cmp	r3, #7
 8000f4a:	dde3      	ble.n	8000f14 <conv_HEX_to_BIN+0x3c>
		debug_print_msg();
    }

    //sprintf(uartData, "\n");
	//debug_print_msg();
}
 8000f4c:	e03e      	b.n	8000fcc <conv_HEX_to_BIN+0xf4>
	   sprintf(uartData, "\nByte value            = %x\nBinary value[LSB:MSB] =",hex_byte_in);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4923      	ldr	r1, [pc, #140]	; (8000fe0 <conv_HEX_to_BIN+0x108>)
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <conv_HEX_to_BIN+0x100>)
 8000f56:	f006 fc19 	bl	800778c <siprintf>
		debug_print_msg();
 8000f5a:	f001 f87d 	bl	8002058 <debug_print_msg>
		for(int i = 0; i < 16; i++){
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	e028      	b.n	8000fb6 <conv_HEX_to_BIN+0xde>
			temp = hex_byte_in >> i;
 8000f64:	88fa      	ldrh	r2, [r7, #6]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	fa42 f303 	asr.w	r3, r2, r3
 8000f6c:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " b=%d ",temp);
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	491c      	ldr	r1, [pc, #112]	; (8000fe4 <conv_HEX_to_BIN+0x10c>)
 8000f72:	4819      	ldr	r0, [pc, #100]	; (8000fd8 <conv_HEX_to_BIN+0x100>)
 8000f74:	f006 fc0a 	bl	800778c <siprintf>
			debug_print_msg();
 8000f78:	f001 f86e 	bl	8002058 <debug_print_msg>
			temp = temp%2;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	bfb8      	it	lt
 8000f86:	425b      	neglt	r3, r3
 8000f88:	60fb      	str	r3, [r7, #12]
			sprintf(uartData, " a=%d ",temp);
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	4916      	ldr	r1, [pc, #88]	; (8000fe8 <conv_HEX_to_BIN+0x110>)
 8000f8e:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <conv_HEX_to_BIN+0x100>)
 8000f90:	f006 fbfc 	bl	800778c <siprintf>
			debug_print_msg();
 8000f94:	f001 f860 	bl	8002058 <debug_print_msg>
			*(bin_byte_out + 16 - 1 - i) = temp; //MSB is at lowest index
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	f1c3 030f 	rsb	r3, r3, #15
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	2a00      	cmp	r2, #0
 8000fa6:	bf14      	ite	ne
 8000fa8:	2201      	movne	r2, #1
 8000faa:	2200      	moveq	r2, #0
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 16; i++){
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	ddd3      	ble.n	8000f64 <conv_HEX_to_BIN+0x8c>
		sprintf(uartData, "\n ");
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <conv_HEX_to_BIN+0x100>)
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <conv_HEX_to_BIN+0x114>)
 8000fc0:	8811      	ldrh	r1, [r2, #0]
 8000fc2:	7892      	ldrb	r2, [r2, #2]
 8000fc4:	8019      	strh	r1, [r3, #0]
 8000fc6:	709a      	strb	r2, [r3, #2]
		debug_print_msg();
 8000fc8:	f001 f846 	bl	8002058 <debug_print_msg>
}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08009018 	.word	0x08009018
 8000fd8:	20001cec 	.word	0x20001cec
 8000fdc:	08009034 	.word	0x08009034
 8000fe0:	08009068 	.word	0x08009068
 8000fe4:	0800909c 	.word	0x0800909c
 8000fe8:	080090a4 	.word	0x080090a4
 8000fec:	080090ac 	.word	0x080090ac

08000ff0 <conv_BIN_to_HEX>:
uint16_t conv_BIN_to_HEX(bool *bin_byte_in,bool select_8_16){
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	uint16_t acc = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	82fb      	strh	r3, [r7, #22]
	int bits = (select_8_16) ? 8 : 16;
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <conv_BIN_to_HEX+0x1a>
 8001006:	2308      	movs	r3, #8
 8001008:	e000      	b.n	800100c <conv_BIN_to_HEX+0x1c>
 800100a:	2310      	movs	r3, #16
 800100c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < bits; i++){
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	e02c      	b.n	800106e <conv_BIN_to_HEX+0x7e>
		acc += ( *(bin_byte_in+i) )? pow(2,i) : 0;
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00d      	beq.n	800103c <conv_BIN_to_HEX+0x4c>
 8001020:	6938      	ldr	r0, [r7, #16]
 8001022:	f7ff fa9f 	bl	8000564 <__aeabi_i2d>
 8001026:	4603      	mov	r3, r0
 8001028:	460c      	mov	r4, r1
 800102a:	ec44 3b11 	vmov	d1, r3, r4
 800102e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001080 <conv_BIN_to_HEX+0x90>
 8001032:	f006 ff8d 	bl	8007f50 <pow>
 8001036:	ec55 4b10 	vmov	r4, r5, d0
 800103a:	e003      	b.n	8001044 <conv_BIN_to_HEX+0x54>
 800103c:	f04f 0400 	mov.w	r4, #0
 8001040:	f04f 0500 	mov.w	r5, #0
 8001044:	8afb      	ldrh	r3, [r7, #22]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa8c 	bl	8000564 <__aeabi_i2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4620      	mov	r0, r4
 8001052:	4629      	mov	r1, r5
 8001054:	f7ff f93a 	bl	80002cc <__adddf3>
 8001058:	4603      	mov	r3, r0
 800105a:	460c      	mov	r4, r1
 800105c:	4618      	mov	r0, r3
 800105e:	4621      	mov	r1, r4
 8001060:	f7ff fd9a 	bl	8000b98 <__aeabi_d2uiz>
 8001064:	4603      	mov	r3, r0
 8001066:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < bits; i++){
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	3301      	adds	r3, #1
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	429a      	cmp	r2, r3
 8001074:	dbce      	blt.n	8001014 <conv_BIN_to_HEX+0x24>
	}
	return acc;
 8001076:	8afb      	ldrh	r3, [r7, #22]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bdb0      	pop	{r4, r5, r7, pc}
 8001080:	00000000 	.word	0x00000000
 8001084:	40000000 	.word	0x40000000

08001088 <clear_AX25>:
		debug_print_msg();
		output_AX25();
	}
}

void clear_AX25(){
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <clear_AX25+0x4c>)
 8001090:	607b      	str	r3, [r7, #4]
	sprintf(uartData, "Clearing AX.25 packet info\n");
 8001092:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <clear_AX25+0x50>)
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <clear_AX25+0x54>)
 8001096:	4615      	mov	r5, r2
 8001098:	461c      	mov	r4, r3
 800109a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109c:	6028      	str	r0, [r5, #0]
 800109e:	6069      	str	r1, [r5, #4]
 80010a0:	60aa      	str	r2, [r5, #8]
 80010a2:	60eb      	str	r3, [r5, #12]
 80010a4:	cc07      	ldmia	r4!, {r0, r1, r2}
 80010a6:	6128      	str	r0, [r5, #16]
 80010a8:	6169      	str	r1, [r5, #20]
 80010aa:	61aa      	str	r2, [r5, #24]
	debug_print_msg();
 80010ac:	f000 ffd4 	bl	8002058 <debug_print_msg>

	memcpy(local_packet->AX25_PACKET,0,AX25_PACKET_MAX);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f640 225f 	movw	r2, #2655	; 0xa5f
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f006 fb3b 	bl	8007734 <memcpy>
	local_packet->got_packet = false;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80010c4:	3309      	adds	r3, #9
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bdb0      	pop	{r4, r5, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000e8 	.word	0x200000e8
 80010d8:	20001cec 	.word	0x20001cec
 80010dc:	08009124 	.word	0x08009124

080010e0 <output_HEX>:

void output_HEX() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <output_HEX+0x68>)
 80010e8:	603b      	str	r3, [r7, #0]

	sprintf(uartData, "\n");
 80010ea:	4a18      	ldr	r2, [pc, #96]	; (800114c <output_HEX+0x6c>)
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <output_HEX+0x70>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 80010f2:	f000 ffb1 	bl	8002058 <debug_print_msg>

	for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	e016      	b.n	800112a <output_HEX+0x4a>
		sprintf(uartData, "%x",local_UART_packet->HEX_KISS_PACKET[i]);
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	330e      	adds	r3, #14
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	4912      	ldr	r1, [pc, #72]	; (8001154 <output_HEX+0x74>)
 800110a:	4810      	ldr	r0, [pc, #64]	; (800114c <output_HEX+0x6c>)
 800110c:	f006 fb3e 	bl	800778c <siprintf>
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 8001110:	480e      	ldr	r0, [pc, #56]	; (800114c <output_HEX+0x6c>)
 8001112:	f7ff f87d 	bl	8000210 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	b29a      	uxth	r2, r3
 800111a:	230a      	movs	r3, #10
 800111c:	490b      	ldr	r1, [pc, #44]	; (800114c <output_HEX+0x6c>)
 800111e:	480e      	ldr	r0, [pc, #56]	; (8001158 <output_HEX+0x78>)
 8001120:	f005 fbf3 	bl	800690a <HAL_UART_Transmit>
	for(int i = 0;i<local_UART_packet->received_byte_cnt;i++){
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3301      	adds	r3, #1
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbe3      	blt.n	80010fc <output_HEX+0x1c>
	}

	sprintf(uartData, "\n");
 8001134:	4a05      	ldr	r2, [pc, #20]	; (800114c <output_HEX+0x6c>)
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <output_HEX+0x70>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800113c:	f000 ff8c 	bl	8002058 <debug_print_msg>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20001454 	.word	0x20001454
 800114c:	20001cec 	.word	0x20001cec
 8001150:	08009140 	.word	0x08009140
 8001154:	08009144 	.word	0x08009144
 8001158:	200029e8 	.word	0x200029e8

0800115c <receiving_AX25>:

//AX.25 to KISS data flow
//****************************************************************************************************************
bool receiving_AX25(){
 800115c:	b5b0      	push	{r4, r5, r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	sprintf(uartData, "\nreceiving_AX25() start\n");
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <receiving_AX25+0x54>)
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <receiving_AX25+0x58>)
 8001166:	4615      	mov	r5, r2
 8001168:	461c      	mov	r4, r3
 800116a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116c:	6028      	str	r0, [r5, #0]
 800116e:	6069      	str	r1, [r5, #4]
 8001170:	60aa      	str	r2, [r5, #8]
 8001172:	60eb      	str	r3, [r5, #12]
 8001174:	cc03      	ldmia	r4!, {r0, r1}
 8001176:	6128      	str	r0, [r5, #16]
 8001178:	6169      	str	r1, [r5, #20]
 800117a:	7823      	ldrb	r3, [r4, #0]
 800117c:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 800117e:	f000 ff6b 	bl	8002058 <debug_print_msg>
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <receiving_AX25+0x5c>)
 8001184:	607b      	str	r3, [r7, #4]

	//Validate packet
	bool AX25_IsValid = AX25_Packet_Validate();
 8001186:	f000 f869 	bl	800125c <AX25_Packet_Validate>
 800118a:	4603      	mov	r3, r0
 800118c:	70fb      	strb	r3, [r7, #3]

//		sprintf(uartData, "AX.25 frame valid check returned: %d\n",AX25_IsValid);
//		debug_print_msg();

	if(AX25_IsValid){
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d007      	beq.n	80011a4 <receiving_AX25+0x48>
		//Put data into KISS format and buffer
		AX25_TO_KISS();
 8001194:	f000 f992 	bl	80014bc <AX25_TO_KISS>

		//Put data into HEX buffer
		KISS_TO_HEX();
 8001198:	f000 fcd2 	bl	8001b40 <KISS_TO_HEX>

		//Transmit KISS Packet that has been generated
		output_HEX();
 800119c:	f7ff ffa0 	bl	80010e0 <output_HEX>

		//Clear AX.25 buffer
		clear_AX25();
 80011a0:	f7ff ff72 	bl	8001088 <clear_AX25>
//		clear_KISS();
//		clear_HEX();
	}
}
 80011a4:	bf00      	nop
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bdb0      	pop	{r4, r5, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20001cec 	.word	0x20001cec
 80011b4:	08009148 	.word	0x08009148
 80011b8:	200000e8 	.word	0x200000e8

080011bc <slide_bits>:

void slide_bits(bool* array,int bits_left){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
	memmove(array,array+1,bits_left*bool_size);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3301      	adds	r3, #1
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f006 fabb 	bl	800774a <memmove>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <remove_bit_stuffing>:

void remove_bit_stuffing(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <remove_bit_stuffing+0x78>)
 80011e4:	607b      	str	r3, [r7, #4]
//	sprintf(uartData, "Removing bit stuffed zeros\n");
//	debug_print_msg();

	int ones_count = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
	bool curr;
	for(int i = 0;i < rxBit_count;i++){
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	e028      	b.n	8001242 <remove_bit_stuffing+0x66>
		curr = local_packet->AX25_PACKET[i]; //iterate through all data received before seperating into subfields
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	4413      	add	r3, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	70fb      	strb	r3, [r7, #3]
		if(curr){ //current bit is a 1
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <remove_bit_stuffing+0x32>
			ones_count++;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3301      	adds	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
			if(ones_count > 5){
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b05      	cmp	r3, #5
 800120a:	dd17      	ble.n	800123c <remove_bit_stuffing+0x60>
//				sprintf(uartData, "ERROR: SHOULD HAVE BEEN A ZERO AFTER FIFTH CONTIGIOUS ONE!\n");
//				debug_print_msg();
				return;
 800120c:	e01e      	b.n	800124c <remove_bit_stuffing+0x70>
			}
		}
		else{
			if(ones_count >= 5){
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2b04      	cmp	r3, #4
 8001212:	dd11      	ble.n	8001238 <remove_bit_stuffing+0x5c>
				slide_bits(&local_packet->AX25_PACKET[i],rxBit_count-i);
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	18d0      	adds	r0, r2, r3
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <remove_bit_stuffing+0x7c>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff ffca 	bl	80011bc <slide_bits>
				i--;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3b01      	subs	r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
				rxBit_count--;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <remove_bit_stuffing+0x7c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3b01      	subs	r3, #1
 8001234:	4a08      	ldr	r2, [pc, #32]	; (8001258 <remove_bit_stuffing+0x7c>)
 8001236:	6013      	str	r3, [r2, #0]
//				sprintf(uartData, "REMOVED BIT STUFFED ZERO!\n");
//				debug_print_msg();
			}
			ones_count = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
	for(int i = 0;i < rxBit_count;i++){
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	3301      	adds	r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <remove_bit_stuffing+0x7c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbd1      	blt.n	80011f0 <remove_bit_stuffing+0x14>
		}
	}
	//transmit kiss
}
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200000e8 	.word	0x200000e8
 8001258:	200000a4 	.word	0x200000a4

0800125c <AX25_Packet_Validate>:

bool AX25_Packet_Validate(){
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001262:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <AX25_Packet_Validate+0xbc>)
 8001264:	60fb      	str	r3, [r7, #12]
	int fcs_val = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]

	sprintf(uartData,"Received packet bit count: %d\n",local_packet->byte_cnt*8);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001270:	330c      	adds	r3, #12
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	461a      	mov	r2, r3
 8001278:	4928      	ldr	r1, [pc, #160]	; (800131c <AX25_Packet_Validate+0xc0>)
 800127a:	4829      	ldr	r0, [pc, #164]	; (8001320 <AX25_Packet_Validate+0xc4>)
 800127c:	f006 fa86 	bl	800778c <siprintf>
	debug_print_msg();
 8001280:	f000 feea 	bl	8002058 <debug_print_msg>

	if(rxBit_count < 120){ //invalid if packet is less than 136 bits - 2*8 bits (per flag)
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <AX25_Packet_Validate+0xc8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b77      	cmp	r3, #119	; 0x77
 800128a:	dc15      	bgt.n	80012b8 <AX25_Packet_Validate+0x5c>
		sprintf(uartData,"Trash Packet, not enough bits\n");
 800128c:	4a24      	ldr	r2, [pc, #144]	; (8001320 <AX25_Packet_Validate+0xc4>)
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <AX25_Packet_Validate+0xcc>)
 8001290:	4615      	mov	r5, r2
 8001292:	461c      	mov	r4, r3
 8001294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001296:	6028      	str	r0, [r5, #0]
 8001298:	6069      	str	r1, [r5, #4]
 800129a:	60aa      	str	r2, [r5, #8]
 800129c:	60eb      	str	r3, [r5, #12]
 800129e:	cc07      	ldmia	r4!, {r0, r1, r2}
 80012a0:	6128      	str	r0, [r5, #16]
 80012a2:	6169      	str	r1, [r5, #20]
 80012a4:	61aa      	str	r2, [r5, #24]
 80012a6:	8823      	ldrh	r3, [r4, #0]
 80012a8:	78a2      	ldrb	r2, [r4, #2]
 80012aa:	83ab      	strh	r3, [r5, #28]
 80012ac:	4613      	mov	r3, r2
 80012ae:	77ab      	strb	r3, [r5, #30]
		debug_print_msg();
 80012b0:	f000 fed2 	bl	8002058 <debug_print_msg>
		return false;
 80012b4:	2300      	movs	r3, #0
 80012b6:	e02b      	b.n	8001310 <AX25_Packet_Validate+0xb4>
	}
	else if((rxBit_count)%8 != 0){ //invalid if packet is not octect aligned (divisible by 8)
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <AX25_Packet_Validate+0xc8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d019      	beq.n	80012f8 <AX25_Packet_Validate+0x9c>
		sprintf(uartData,"Trash Packet, not octet aligned\n");
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <AX25_Packet_Validate+0xc4>)
 80012c6:	4a19      	ldr	r2, [pc, #100]	; (800132c <AX25_Packet_Validate+0xd0>)
 80012c8:	4614      	mov	r4, r2
 80012ca:	469c      	mov	ip, r3
 80012cc:	f104 0e20 	add.w	lr, r4, #32
 80012d0:	4665      	mov	r5, ip
 80012d2:	4626      	mov	r6, r4
 80012d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012d6:	6028      	str	r0, [r5, #0]
 80012d8:	6069      	str	r1, [r5, #4]
 80012da:	60aa      	str	r2, [r5, #8]
 80012dc:	60eb      	str	r3, [r5, #12]
 80012de:	3410      	adds	r4, #16
 80012e0:	f10c 0c10 	add.w	ip, ip, #16
 80012e4:	4574      	cmp	r4, lr
 80012e6:	d1f3      	bne.n	80012d0 <AX25_Packet_Validate+0x74>
 80012e8:	4663      	mov	r3, ip
 80012ea:	4622      	mov	r2, r4
 80012ec:	7812      	ldrb	r2, [r2, #0]
 80012ee:	701a      	strb	r2, [r3, #0]
		debug_print_msg();
 80012f0:	f000 feb2 	bl	8002058 <debug_print_msg>
		return false;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e00b      	b.n	8001310 <AX25_Packet_Validate+0xb4>
	}

	//SHOULD BE VALID PACKET, JUST NEED TO C0MPARE CALCULATED CRC TO RECIEVED FCS
	else{
		//Set packet pointers for AX25 to KISS operation
		uint16_t local_info_len = rxBit_count-INFO_offset_woFlag;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <AX25_Packet_Validate+0xc8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	3b90      	subs	r3, #144	; 0x90
 8001300:	80fb      	strh	r3, [r7, #6]
		set_packet_pointer_AX25(local_info_len);
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f813 	bl	8001330 <set_packet_pointer_AX25>
//		print_AX25();

		return crc_check();
 800130a:	f000 fdb3 	bl	8001e74 <crc_check>
 800130e:	4603      	mov	r3, r0
	}
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001318:	200000e8 	.word	0x200000e8
 800131c:	08009164 	.word	0x08009164
 8001320:	20001cec 	.word	0x20001cec
 8001324:	200000a4 	.word	0x200000a4
 8001328:	08009184 	.word	0x08009184
 800132c:	080091a4 	.word	0x080091a4

08001330 <set_packet_pointer_AX25>:


void set_packet_pointer_AX25(int info_len_in){
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001338:	4b58      	ldr	r3, [pc, #352]	; (800149c <set_packet_pointer_AX25+0x16c>)
 800133a:	617b      	str	r3, [r7, #20]
	int not_info = FCS_len;
 800133c:	2310      	movs	r3, #16
 800133e:	613b      	str	r3, [r7, #16]
	local_packet->Info_Len = info_len_in;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	601a      	str	r2, [r3, #0]

	sprintf(uartData, "Setting packet pointer to AX25:\n");
 800134a:	4b55      	ldr	r3, [pc, #340]	; (80014a0 <set_packet_pointer_AX25+0x170>)
 800134c:	4a55      	ldr	r2, [pc, #340]	; (80014a4 <set_packet_pointer_AX25+0x174>)
 800134e:	4614      	mov	r4, r2
 8001350:	469c      	mov	ip, r3
 8001352:	f104 0e20 	add.w	lr, r4, #32
 8001356:	4665      	mov	r5, ip
 8001358:	4626      	mov	r6, r4
 800135a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800135c:	6028      	str	r0, [r5, #0]
 800135e:	6069      	str	r1, [r5, #4]
 8001360:	60aa      	str	r2, [r5, #8]
 8001362:	60eb      	str	r3, [r5, #12]
 8001364:	3410      	adds	r4, #16
 8001366:	f10c 0c10 	add.w	ip, ip, #16
 800136a:	4574      	cmp	r4, lr
 800136c:	d1f3      	bne.n	8001356 <set_packet_pointer_AX25+0x26>
 800136e:	4663      	mov	r3, ip
 8001370:	4622      	mov	r2, r4
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	701a      	strb	r2, [r3, #0]
	debug_print_msg();
 8001376:	f000 fe6f 	bl	8002058 <debug_print_msg>
	bool *curr_mem = &local_packet->AX25_PACKET;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	60fb      	str	r3, [r7, #12]

	sprintf(uartData, "Setting pointer for address\n");
 800137e:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <set_packet_pointer_AX25+0x170>)
 8001380:	4b49      	ldr	r3, [pc, #292]	; (80014a8 <set_packet_pointer_AX25+0x178>)
 8001382:	4615      	mov	r5, r2
 8001384:	461c      	mov	r4, r3
 8001386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001388:	6028      	str	r0, [r5, #0]
 800138a:	6069      	str	r1, [r5, #4]
 800138c:	60aa      	str	r2, [r5, #8]
 800138e:	60eb      	str	r3, [r5, #12]
 8001390:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001392:	6128      	str	r0, [r5, #16]
 8001394:	6169      	str	r1, [r5, #20]
 8001396:	61aa      	str	r2, [r5, #24]
 8001398:	7823      	ldrb	r3, [r4, #0]
 800139a:	772b      	strb	r3, [r5, #28]
	debug_print_msg();
 800139c:	f000 fe5c 	bl	8002058 <debug_print_msg>
	local_packet->address = curr_mem;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80013a6:	3310      	adds	r3, #16
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	601a      	str	r2, [r3, #0]
	curr_mem += address_len;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3370      	adds	r3, #112	; 0x70
 80013b0:	60fb      	str	r3, [r7, #12]
	not_info += address_len;
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	3370      	adds	r3, #112	; 0x70
 80013b6:	613b      	str	r3, [r7, #16]

	sprintf(uartData, "Setting pointer for control\n");
 80013b8:	4a39      	ldr	r2, [pc, #228]	; (80014a0 <set_packet_pointer_AX25+0x170>)
 80013ba:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <set_packet_pointer_AX25+0x17c>)
 80013bc:	4615      	mov	r5, r2
 80013be:	461c      	mov	r4, r3
 80013c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c2:	6028      	str	r0, [r5, #0]
 80013c4:	6069      	str	r1, [r5, #4]
 80013c6:	60aa      	str	r2, [r5, #8]
 80013c8:	60eb      	str	r3, [r5, #12]
 80013ca:	cc07      	ldmia	r4!, {r0, r1, r2}
 80013cc:	6128      	str	r0, [r5, #16]
 80013ce:	6169      	str	r1, [r5, #20]
 80013d0:	61aa      	str	r2, [r5, #24]
 80013d2:	7823      	ldrb	r3, [r4, #0]
 80013d4:	772b      	strb	r3, [r5, #28]
	debug_print_msg();
 80013d6:	f000 fe3f 	bl	8002058 <debug_print_msg>
	local_packet->control = curr_mem;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80013e0:	3314      	adds	r3, #20
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	601a      	str	r2, [r3, #0]
	curr_mem += control_len;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3308      	adds	r3, #8
 80013ea:	60fb      	str	r3, [r7, #12]
	not_info += control_len;
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	3308      	adds	r3, #8
 80013f0:	613b      	str	r3, [r7, #16]

	sprintf(uartData, "Setting pointer for PID\n");
 80013f2:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <set_packet_pointer_AX25+0x170>)
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <set_packet_pointer_AX25+0x180>)
 80013f6:	4615      	mov	r5, r2
 80013f8:	461c      	mov	r4, r3
 80013fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fc:	6028      	str	r0, [r5, #0]
 80013fe:	6069      	str	r1, [r5, #4]
 8001400:	60aa      	str	r2, [r5, #8]
 8001402:	60eb      	str	r3, [r5, #12]
 8001404:	cc03      	ldmia	r4!, {r0, r1}
 8001406:	6128      	str	r0, [r5, #16]
 8001408:	6169      	str	r1, [r5, #20]
 800140a:	7823      	ldrb	r3, [r4, #0]
 800140c:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 800140e:	f000 fe23 	bl	8002058 <debug_print_msg>
	local_packet->PID = curr_mem;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001418:	3318      	adds	r3, #24
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	601a      	str	r2, [r3, #0]
	curr_mem += PID_len;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3308      	adds	r3, #8
 8001422:	60fb      	str	r3, [r7, #12]
	not_info += PID_len;
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	3308      	adds	r3, #8
 8001428:	613b      	str	r3, [r7, #16]

	sprintf(uartData, "Setting pointer for Info\n");
 800142a:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <set_packet_pointer_AX25+0x170>)
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <set_packet_pointer_AX25+0x184>)
 800142e:	4615      	mov	r5, r2
 8001430:	461c      	mov	r4, r3
 8001432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001434:	6028      	str	r0, [r5, #0]
 8001436:	6069      	str	r1, [r5, #4]
 8001438:	60aa      	str	r2, [r5, #8]
 800143a:	60eb      	str	r3, [r5, #12]
 800143c:	cc03      	ldmia	r4!, {r0, r1}
 800143e:	6128      	str	r0, [r5, #16]
 8001440:	6169      	str	r1, [r5, #20]
 8001442:	8823      	ldrh	r3, [r4, #0]
 8001444:	832b      	strh	r3, [r5, #24]
	debug_print_msg();
 8001446:	f000 fe07 	bl	8002058 <debug_print_msg>
	local_packet->Info = curr_mem;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001450:	331c      	adds	r3, #28
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	601a      	str	r2, [r3, #0]
	curr_mem += local_packet->Info_Len;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]

	sprintf(uartData, "Setting pointer for FCS\n");
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <set_packet_pointer_AX25+0x170>)
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <set_packet_pointer_AX25+0x188>)
 800146a:	4615      	mov	r5, r2
 800146c:	461c      	mov	r4, r3
 800146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001470:	6028      	str	r0, [r5, #0]
 8001472:	6069      	str	r1, [r5, #4]
 8001474:	60aa      	str	r2, [r5, #8]
 8001476:	60eb      	str	r3, [r5, #12]
 8001478:	cc03      	ldmia	r4!, {r0, r1}
 800147a:	6128      	str	r0, [r5, #16]
 800147c:	6169      	str	r1, [r5, #20]
 800147e:	7823      	ldrb	r3, [r4, #0]
 8001480:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 8001482:	f000 fde9 	bl	8002058 <debug_print_msg>
	local_packet->FCS = curr_mem;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800148c:	3304      	adds	r3, #4
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	601a      	str	r2, [r3, #0]
}
 8001492:	bf00      	nop
 8001494:	371c      	adds	r7, #28
 8001496:	46bd      	mov	sp, r7
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149a:	bf00      	nop
 800149c:	200000e8 	.word	0x200000e8
 80014a0:	20001cec 	.word	0x20001cec
 80014a4:	080091c8 	.word	0x080091c8
 80014a8:	080091ec 	.word	0x080091ec
 80014ac:	0800920c 	.word	0x0800920c
 80014b0:	0800922c 	.word	0x0800922c
 80014b4:	08009248 	.word	0x08009248
 80014b8:	08009264 	.word	0x08009264

080014bc <AX25_TO_KISS>:

void AX25_TO_KISS(){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <AX25_TO_KISS+0x78>)
 80014c4:	607b      	str	r3, [r7, #4]
	bool *curr_mem = local_packet->KISS_PACKET;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 80014cc:	603b      	str	r3, [r7, #0]

	//Put a flag into KISS
	memcpy(curr_mem,KISS_FLAG,FLAG_SIZE);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	4919      	ldr	r1, [pc, #100]	; (8001538 <AX25_TO_KISS+0x7c>)
 80014d2:	461a      	mov	r2, r3
 80014d4:	460b      	mov	r3, r1
 80014d6:	cb03      	ldmia	r3!, {r0, r1}
 80014d8:	6010      	str	r0, [r2, #0]
 80014da:	6051      	str	r1, [r2, #4]
	curr_mem += FLAG_SIZE;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	3308      	adds	r3, #8
 80014e0:	603b      	str	r3, [r7, #0]

	//Set port info
	memset(curr_mem,0,8);
 80014e2:	2208      	movs	r2, #8
 80014e4:	2100      	movs	r1, #0
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f006 f948 	bl	800777c <memset>
	curr_mem += 8;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3308      	adds	r3, #8
 80014f0:	603b      	str	r3, [r7, #0]

	//Put AX25 packet into KISS w/o the FCS, HAVE AN ADDED 8 due to port info
	memcpy(curr_mem,local_packet->AX25_PACKET,(local_packet->byte_cnt*8)-FCS_len);
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80014fa:	330c      	adds	r3, #12
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3b02      	subs	r3, #2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	461a      	mov	r2, r3
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f006 f915 	bl	8007734 <memcpy>
	curr_mem += (local_packet->byte_cnt*8)-FCS_len;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001510:	330c      	adds	r3, #12
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	3b10      	subs	r3, #16
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	4413      	add	r3, r2
 800151c:	603b      	str	r3, [r7, #0]

	//Put a flag into KISS
	memcpy(curr_mem,KISS_FLAG,FLAG_SIZE);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	4905      	ldr	r1, [pc, #20]	; (8001538 <AX25_TO_KISS+0x7c>)
 8001522:	461a      	mov	r2, r3
 8001524:	460b      	mov	r3, r1
 8001526:	cb03      	ldmia	r3!, {r0, r1}
 8001528:	6010      	str	r0, [r2, #0]
 800152a:	6051      	str	r1, [r2, #4]
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200000e8 	.word	0x200000e8
 8001538:	20000000 	.word	0x20000000

0800153c <receiving_KISS>:
//****************************************************************************************************************
//END OF AX.25 to KISS data flow

//KISS to AX.25 data flow
//****************************************************************************************************************
bool receiving_KISS(){
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <receiving_KISS+0x68>)
 8001544:	613b      	str	r3, [r7, #16]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <receiving_KISS+0x6c>)
 8001548:	60fb      	str	r3, [r7, #12]
	int byte_cnt = local_UART_packet->received_byte_cnt;
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	60bb      	str	r3, [r7, #8]

	//Iterate through all bytes in HEX buffer
	for(int i = 0;i < byte_cnt;i++){
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e019      	b.n	800158a <receiving_KISS+0x4e>

		//Hex value from UART
		uint8_t hex_byte_val=local_UART_packet->HEX_KISS_PACKET[byte_cnt-1-i];
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1e5a      	subs	r2, r3, #1
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4413      	add	r3, r2
 8001562:	7b9b      	ldrb	r3, [r3, #14]
 8001564:	71fb      	strb	r3, [r7, #7]

		//Bool pointer for KISS array
		bool *bin_byte_ptr = &local_packet->KISS_PACKET[i*8];
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	3307      	adds	r3, #7
 8001574:	603b      	str	r3, [r7, #0]

		//Convert HEX val and place into bin buffer, selecting 8 bit type
		conv_HEX_to_BIN(hex_byte_val, bin_byte_ptr,true);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	b29b      	uxth	r3, r3
 800157a:	2201      	movs	r2, #1
 800157c:	6839      	ldr	r1, [r7, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fcaa 	bl	8000ed8 <conv_HEX_to_BIN>
	for(int i = 0;i < byte_cnt;i++){
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	3301      	adds	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	429a      	cmp	r2, r3
 8001590:	dbe1      	blt.n	8001556 <receiving_KISS+0x1a>
	}

	//Put data into AX.25 format
	KISS_TO_AX25();
 8001592:	f000 f865 	bl	8001660 <KISS_TO_AX25>

	//Output the converted packet
//	output_AX25();

	//Clear data buffers
	clear_AX25();
 8001596:	f7ff fd77 	bl	8001088 <clear_AX25>
//	clear_KISS();
//	clear_HEX();
}
 800159a:	bf00      	nop
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20001454 	.word	0x20001454
 80015a8:	200000e8 	.word	0x200000e8

080015ac <set_packet_pointer_KISS>:

void set_packet_pointer_KISS(int info_len_in){
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <set_packet_pointer_KISS+0xa8>)
 80015b6:	60fb      	str	r3, [r7, #12]
	sprintf(uartData, "Setting packet pointer to KISS\n");
 80015b8:	4a27      	ldr	r2, [pc, #156]	; (8001658 <set_packet_pointer_KISS+0xac>)
 80015ba:	4b28      	ldr	r3, [pc, #160]	; (800165c <set_packet_pointer_KISS+0xb0>)
 80015bc:	4614      	mov	r4, r2
 80015be:	461d      	mov	r5, r3
 80015c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c2:	6020      	str	r0, [r4, #0]
 80015c4:	6061      	str	r1, [r4, #4]
 80015c6:	60a2      	str	r2, [r4, #8]
 80015c8:	60e3      	str	r3, [r4, #12]
 80015ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015cc:	6120      	str	r0, [r4, #16]
 80015ce:	6161      	str	r1, [r4, #20]
 80015d0:	61a2      	str	r2, [r4, #24]
 80015d2:	61e3      	str	r3, [r4, #28]
	debug_print_msg();
 80015d4:	f000 fd40 	bl	8002058 <debug_print_msg>

	//Update info len since we received a message over UART
	local_packet->Info_Len =info_len_in;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	601a      	str	r2, [r3, #0]

	bool *curr_mem = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80015ee:	330c      	adds	r3, #12
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3b02      	subs	r3, #2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4413      	add	r3, r2
 80015f8:	60bb      	str	r3, [r7, #8]

	curr_mem -= address_len;
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3b70      	subs	r3, #112	; 0x70
 80015fe:	60bb      	str	r3, [r7, #8]
	local_packet->address = curr_mem;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001606:	3310      	adds	r3, #16
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	601a      	str	r2, [r3, #0]

	curr_mem -= control_len;
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	3b08      	subs	r3, #8
 8001610:	60bb      	str	r3, [r7, #8]
	local_packet->control = curr_mem;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001618:	3314      	adds	r3, #20
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	601a      	str	r2, [r3, #0]

	curr_mem -= PID_len;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3b08      	subs	r3, #8
 8001622:	60bb      	str	r3, [r7, #8]
	local_packet->PID = curr_mem;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800162a:	3318      	adds	r3, #24
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	601a      	str	r2, [r3, #0]

	curr_mem -= local_packet->Info_Len;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	425b      	negs	r3, r3
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	4413      	add	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
	local_packet->Info = curr_mem;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001646:	331c      	adds	r3, #28
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	601a      	str	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bdb0      	pop	{r4, r5, r7, pc}
 8001654:	200000e8 	.word	0x200000e8
 8001658:	20001cec 	.word	0x20001cec
 800165c:	08009280 	.word	0x08009280

08001660 <KISS_TO_AX25>:

bool KISS_TO_AX25(){
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001666:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <KISS_TO_AX25+0x1b0>)
 8001668:	60fb      	str	r3, [r7, #12]

	uint16_t local_info_len = local_packet->byte_cnt*8-INFO_offset_wFlag_woFCS;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001670:	330c      	adds	r3, #12
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3311      	adds	r3, #17
 8001676:	b29b      	uxth	r3, r3
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	817b      	strh	r3, [r7, #10]
	set_packet_pointer_KISS(local_info_len);
 800167c:	897b      	ldrh	r3, [r7, #10]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff94 	bl	80015ac <set_packet_pointer_KISS>
	print_KISS();
 8001684:	f001 f81a 	bl	80026bc <print_KISS>

	bool* cpy_from_ptr = (local_packet->KISS_PACKET+(local_packet->byte_cnt-2)*8);//starting kiss packet skipping 2 bytes
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f603 225f 	addw	r2, r3, #2655	; 0xa5f
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001694:	330c      	adds	r3, #12
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3b02      	subs	r3, #2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4413      	add	r3, r2
 800169e:	607b      	str	r3, [r7, #4]

	//Update packet pointers to AX25 members
	set_packet_pointer_AX25(local_info_len);
 80016a0:	897b      	ldrh	r3, [r7, #10]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fe44 	bl	8001330 <set_packet_pointer_AX25>
	cpy_from_ptr -= address_len;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b70      	subs	r3, #112	; 0x70
 80016ac:	607b      	str	r3, [r7, #4]
	memcpy(local_packet->address,cpy_from_ptr,address_len);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016b4:	3310      	adds	r3, #16
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2270      	movs	r2, #112	; 0x70
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4618      	mov	r0, r3
 80016be:	f006 f839 	bl	8007734 <memcpy>

	cpy_from_ptr -= control_len;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3b08      	subs	r3, #8
 80016c6:	607b      	str	r3, [r7, #4]
	memcpy(local_packet->control,cpy_from_ptr,control_len);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016ce:	3314      	adds	r3, #20
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2208      	movs	r2, #8
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f006 f82c 	bl	8007734 <memcpy>

	cpy_from_ptr -= PID_len;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b08      	subs	r3, #8
 80016e0:	607b      	str	r3, [r7, #4]
	memcpy(local_packet->PID,cpy_from_ptr,PID_len);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80016e8:	3318      	adds	r3, #24
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2208      	movs	r2, #8
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f006 f81f 	bl	8007734 <memcpy>

	cpy_from_ptr -= local_packet->Info_Len;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	425b      	negs	r3, r3
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	607b      	str	r3, [r7, #4]
	memcpy(local_packet->Info,cpy_from_ptr,local_packet->Info_Len);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800170c:	331c      	adds	r3, #28
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f006 f80a 	bl	8007734 <memcpy>

	//USE CRC HERE TO GENERATE FCS FIELD
	rxBit_count = address_len + control_len + PID_len + local_packet->Info_Len;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3380      	adds	r3, #128	; 0x80
 800172a:	4a3a      	ldr	r2, [pc, #232]	; (8001814 <KISS_TO_AX25+0x1b4>)
 800172c:	6013      	str	r3, [r2, #0]
	crc_generate();
 800172e:	f000 fadf 	bl	8001cf0 <crc_generate>
	print_AX25();
 8001732:	f000 fc99 	bl	8002068 <print_AX25>

	sprintf(uartData, "\n line Printing AX25 = \n");
 8001736:	4a38      	ldr	r2, [pc, #224]	; (8001818 <KISS_TO_AX25+0x1b8>)
 8001738:	4b38      	ldr	r3, [pc, #224]	; (800181c <KISS_TO_AX25+0x1bc>)
 800173a:	4615      	mov	r5, r2
 800173c:	461c      	mov	r4, r3
 800173e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001740:	6028      	str	r0, [r5, #0]
 8001742:	6069      	str	r1, [r5, #4]
 8001744:	60aa      	str	r2, [r5, #8]
 8001746:	60eb      	str	r3, [r5, #12]
 8001748:	cc03      	ldmia	r4!, {r0, r1}
 800174a:	6128      	str	r0, [r5, #16]
 800174c:	6169      	str	r1, [r5, #20]
 800174e:	7823      	ldrb	r3, [r4, #0]
 8001750:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 8001752:	f000 fc81 	bl	8002058 <debug_print_msg>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e00d      	b.n	8001778 <KISS_TO_AX25+0x118>
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	492e      	ldr	r1, [pc, #184]	; (8001820 <KISS_TO_AX25+0x1c0>)
 8001768:	482b      	ldr	r0, [pc, #172]	; (8001818 <KISS_TO_AX25+0x1b8>)
 800176a:	f006 f80f 	bl	800778c <siprintf>
		debug_print_msg();
 800176e:	f000 fc73 	bl	8002058 <debug_print_msg>
	for(int i = 0; i < rxBit_count + FCS_len; i++){
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <KISS_TO_AX25+0x1b4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3310      	adds	r3, #16
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	429a      	cmp	r2, r3
 8001782:	dbeb      	blt.n	800175c <KISS_TO_AX25+0xfc>
	}
	sprintf(uartData, "\n");
 8001784:	4a24      	ldr	r2, [pc, #144]	; (8001818 <KISS_TO_AX25+0x1b8>)
 8001786:	4b27      	ldr	r3, [pc, #156]	; (8001824 <KISS_TO_AX25+0x1c4>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800178c:	f000 fc64 	bl	8002058 <debug_print_msg>

	//BIT STUFFING NEEDED
	bit_stuff_fields();
 8001790:	f000 f84a 	bl	8001828 <bit_stuff_fields>

	sprintf(uartData, "\n line Printing AX25 = \n");
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <KISS_TO_AX25+0x1b8>)
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <KISS_TO_AX25+0x1bc>)
 8001798:	4615      	mov	r5, r2
 800179a:	461c      	mov	r4, r3
 800179c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179e:	6028      	str	r0, [r5, #0]
 80017a0:	6069      	str	r1, [r5, #4]
 80017a2:	60aa      	str	r2, [r5, #8]
 80017a4:	60eb      	str	r3, [r5, #12]
 80017a6:	cc03      	ldmia	r4!, {r0, r1}
 80017a8:	6128      	str	r0, [r5, #16]
 80017aa:	6169      	str	r1, [r5, #20]
 80017ac:	7823      	ldrb	r3, [r4, #0]
 80017ae:	762b      	strb	r3, [r5, #24]
	debug_print_msg();
 80017b0:	f000 fc52 	bl	8002058 <debug_print_msg>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	e00d      	b.n	80017d6 <KISS_TO_AX25+0x176>
		sprintf(uartData, " %d ",(local_packet->AX25_PACKET)[i]);
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	4916      	ldr	r1, [pc, #88]	; (8001820 <KISS_TO_AX25+0x1c0>)
 80017c6:	4814      	ldr	r0, [pc, #80]	; (8001818 <KISS_TO_AX25+0x1b8>)
 80017c8:	f005 ffe0 	bl	800778c <siprintf>
		debug_print_msg();
 80017cc:	f000 fc44 	bl	8002058 <debug_print_msg>
	for(int i = 0; i < rxBit_count + FCS_len + local_packet->bit_stuffed_zeros; i++){
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	3301      	adds	r3, #1
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <KISS_TO_AX25+0x1b4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f103 0210 	add.w	r2, r3, #16
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80017e4:	3304      	adds	r3, #4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4413      	add	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbe4      	blt.n	80017ba <KISS_TO_AX25+0x15a>
	}
	sprintf(uartData, "\n");
 80017f0:	4a09      	ldr	r2, [pc, #36]	; (8001818 <KISS_TO_AX25+0x1b8>)
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <KISS_TO_AX25+0x1c4>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 80017f8:	f000 fc2e 	bl	8002058 <debug_print_msg>
	rxBit_count = 0;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <KISS_TO_AX25+0x1b4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
//	Print the ax25 packet
	print_outAX25();
 8001802:	f000 fd5d 	bl	80022c0 <print_outAX25>
	return true; //valid packet
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bdb0      	pop	{r4, r5, r7, pc}
 8001810:	200000e8 	.word	0x200000e8
 8001814:	200000a4 	.word	0x200000a4
 8001818:	20001cec 	.word	0x20001cec
 800181c:	080092a0 	.word	0x080092a0
 8001820:	080092bc 	.word	0x080092bc
 8001824:	08009140 	.word	0x08009140

08001828 <bit_stuff_fields>:

void bit_stuff_fields(){
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af02      	add	r7, sp, #8
	struct PACKET_STRUCT* local_packet = &global_packet;
 800182e:	4b84      	ldr	r3, [pc, #528]	; (8001a40 <bit_stuff_fields+0x218>)
 8001830:	60fb      	str	r3, [r7, #12]
	int ax25_len = rxBit_count + FCS_len;
 8001832:	4b84      	ldr	r3, [pc, #528]	; (8001a44 <bit_stuff_fields+0x21c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3310      	adds	r3, #16
 8001838:	60bb      	str	r3, [r7, #8]
	int ones_count = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
	ones_count = bitstuffing(local_packet->address,address_len,ax25_len, ones_count, &(local_packet->stuffed_address));
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001844:	3310      	adds	r3, #16
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800184e:	3310      	adds	r3, #16
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	2170      	movs	r1, #112	; 0x70
 8001858:	f000 f910 	bl	8001a7c <bitstuffing>
 800185c:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_address;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001864:	3304      	adds	r3, #4
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800186e:	3310      	adds	r3, #16
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	441a      	add	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800187a:	3304      	adds	r3, #4
 800187c:	601a      	str	r2, [r3, #0]
	ax25_len -= address_len;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3b70      	subs	r3, #112	; 0x70
 8001882:	60bb      	str	r3, [r7, #8]

	local_packet->control += local_packet->bit_stuffed_zeros;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800188a:	3314      	adds	r3, #20
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001894:	3304      	adds	r3, #4
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	441a      	add	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80018a0:	3314      	adds	r3, #20
 80018a2:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->control,control_len,ax25_len, ones_count, &(local_packet->stuffed_control));
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80018aa:	3314      	adds	r3, #20
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80018b4:	3314      	adds	r3, #20
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	2108      	movs	r1, #8
 80018be:	f000 f8dd 	bl	8001a7c <bitstuffing>
 80018c2:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_control;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80018ca:	3304      	adds	r3, #4
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80018d4:	3314      	adds	r3, #20
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	441a      	add	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80018e0:	3304      	adds	r3, #4
 80018e2:	601a      	str	r2, [r3, #0]
	ax25_len -= control_len;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	3b08      	subs	r3, #8
 80018e8:	60bb      	str	r3, [r7, #8]

	local_packet->PID += local_packet->bit_stuffed_zeros;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80018f0:	3318      	adds	r3, #24
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80018fa:	3304      	adds	r3, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	441a      	add	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001906:	3318      	adds	r3, #24
 8001908:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->PID,PID_len,ax25_len, ones_count, &(local_packet->stuffed_PID));
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001910:	3318      	adds	r3, #24
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800191a:	3318      	adds	r3, #24
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	2108      	movs	r1, #8
 8001924:	f000 f8aa 	bl	8001a7c <bitstuffing>
 8001928:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_PID;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001930:	3304      	adds	r3, #4
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800193a:	3318      	adds	r3, #24
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	441a      	add	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001946:	3304      	adds	r3, #4
 8001948:	601a      	str	r2, [r3, #0]
	ax25_len -= PID_len;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3b08      	subs	r3, #8
 800194e:	60bb      	str	r3, [r7, #8]

	local_packet->Info += local_packet->bit_stuffed_zeros;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001956:	331c      	adds	r3, #28
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001960:	3304      	adds	r3, #4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	441a      	add	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800196c:	331c      	adds	r3, #28
 800196e:	601a      	str	r2, [r3, #0]
	ones_count = bitstuffing(local_packet->Info,local_packet->Info_Len, ax25_len, ones_count, &(local_packet->stuffed_Info));
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001976:	331c      	adds	r3, #28
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001988:	331c      	adds	r3, #28
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f000 f874 	bl	8001a7c <bitstuffing>
 8001994:	6078      	str	r0, [r7, #4]
	local_packet->bit_stuffed_zeros += local_packet->stuffed_Info;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800199c:	3304      	adds	r3, #4
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019a6:	331c      	adds	r3, #28
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	441a      	add	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80019b2:	3304      	adds	r3, #4
 80019b4:	601a      	str	r2, [r3, #0]
	ax25_len -= local_packet->Info_Len;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	60bb      	str	r3, [r7, #8]

	local_packet->FCS += local_packet->bit_stuffed_zeros;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019ca:	3304      	adds	r3, #4
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80019d4:	3304      	adds	r3, #4
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	441a      	add	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019e0:	3304      	adds	r3, #4
 80019e2:	601a      	str	r2, [r3, #0]
	bitstuffing(local_packet->FCS,FCS_len, ax25_len, ones_count, &(local_packet->stuffed_FCS));
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80019ea:	3304      	adds	r3, #4
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	2110      	movs	r1, #16
 80019fc:	f000 f83e 	bl	8001a7c <bitstuffing>
	local_packet->bit_stuffed_zeros += local_packet->stuffed_FCS;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001a06:	3304      	adds	r3, #4
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	441a      	add	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	601a      	str	r2, [r3, #0]

	sprintf(uartData, "bit stuffed zeros = %d\n",local_packet->bit_stuffed_zeros);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001a24:	3304      	adds	r3, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4907      	ldr	r1, [pc, #28]	; (8001a48 <bit_stuff_fields+0x220>)
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <bit_stuff_fields+0x224>)
 8001a2e:	f005 fead 	bl	800778c <siprintf>
	debug_print_msg();
 8001a32:	f000 fb11 	bl	8002058 <debug_print_msg>
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200000e8 	.word	0x200000e8
 8001a44:	200000a4 	.word	0x200000a4
 8001a48:	080092c4 	.word	0x080092c4
 8001a4c:	20001cec 	.word	0x20001cec

08001a50 <bit_stuff>:

void bit_stuff(bool* array,int bits_left){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	memmove(array+2,array+1,bits_left);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	1c98      	adds	r0, r3, #2
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3301      	adds	r3, #1
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f005 fe70 	bl	800774a <memmove>
	*(array+1) = false;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <bitstuffing>:

int bitstuffing(bool* packet,int len,int bits_left, int ones_count,int *stuff){
 8001a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
	sprintf(uartData, "\nChecking if bit stuffing is needed\n");
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <bitstuffing+0xbc>)
 8001a8c:	4a2b      	ldr	r2, [pc, #172]	; (8001b3c <bitstuffing+0xc0>)
 8001a8e:	4614      	mov	r4, r2
 8001a90:	469c      	mov	ip, r3
 8001a92:	f104 0e20 	add.w	lr, r4, #32
 8001a96:	4665      	mov	r5, ip
 8001a98:	4626      	mov	r6, r4
 8001a9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a9c:	6028      	str	r0, [r5, #0]
 8001a9e:	6069      	str	r1, [r5, #4]
 8001aa0:	60aa      	str	r2, [r5, #8]
 8001aa2:	60eb      	str	r3, [r5, #12]
 8001aa4:	3410      	adds	r4, #16
 8001aa6:	f10c 0c10 	add.w	ip, ip, #16
 8001aaa:	4574      	cmp	r4, lr
 8001aac:	d1f3      	bne.n	8001a96 <bitstuffing+0x1a>
 8001aae:	4663      	mov	r3, ip
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	6810      	ldr	r0, [r2, #0]
 8001ab4:	6018      	str	r0, [r3, #0]
 8001ab6:	7912      	ldrb	r2, [r2, #4]
 8001ab8:	711a      	strb	r2, [r3, #4]
	debug_print_msg();
 8001aba:	f000 facd 	bl	8002058 <debug_print_msg>

	int bit_stuff_count = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
	bool *curr_mem = packet;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	617b      	str	r3, [r7, #20]
	int left;

	//Increment through array
	for(int i = 0; i < len+bit_stuff_count; i++){
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	e027      	b.n	8001b1c <bitstuffing+0xa0>
		//Check if the current index in array is a one
        if(*(curr_mem+i)){
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01c      	beq.n	8001b12 <bitstuffing+0x96>
        	//Inc ones count
        	ones_count++;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	603b      	str	r3, [r7, #0]

        	//If 5 consecutive ones, do bit stuff
            if(ones_count == 5){
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d118      	bne.n	8001b16 <bitstuffing+0x9a>
        		//Calculate the number of bits left
        		left = (bits_left+bit_stuff_count) - i - 1;
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	441a      	add	r2, r3
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	3b01      	subs	r3, #1
 8001af0:	613b      	str	r3, [r7, #16]
                bit_stuff(curr_mem+i,left);
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4413      	add	r3, r2
 8001af8:	6939      	ldr	r1, [r7, #16]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ffa8 	bl	8001a50 <bit_stuff>

                bit_stuff_count++;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	3301      	adds	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
                ones_count = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
                i++;
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	e001      	b.n	8001b16 <bitstuffing+0x9a>
            }
        }
        else{
        	ones_count = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < len+bit_stuff_count; i++){
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	4413      	add	r3, r2
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbd1      	blt.n	8001acc <bitstuffing+0x50>
        }
	}
	*stuff = bit_stuff_count;
 8001b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	601a      	str	r2, [r3, #0]
	return ones_count;
 8001b2e:	683b      	ldr	r3, [r7, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3724      	adds	r7, #36	; 0x24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b38:	20001cec 	.word	0x20001cec
 8001b3c:	080092dc 	.word	0x080092dc

08001b40 <KISS_TO_HEX>:

void KISS_TO_HEX(){
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <KISS_TO_HEX+0xb4>)
 8001b48:	613b      	str	r3, [r7, #16]
	struct UART_INPUT* local_UART_packet = &UART_packet;
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <KISS_TO_HEX+0xb8>)
 8001b4c:	60fb      	str	r3, [r7, #12]

	local_UART_packet->received_byte_cnt = local_packet->byte_cnt+1;
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001b54:	330c      	adds	r3, #12
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	605a      	str	r2, [r3, #4]
	bool *curr_mem = local_packet->KISS_PACKET;
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8001b64:	60bb      	str	r3, [r7, #8]
	uint8_t curr_val;

	sprintf(uartData, "Filling HEX buffer:\n");
 8001b66:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <KISS_TO_HEX+0xbc>)
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <KISS_TO_HEX+0xc0>)
 8001b6a:	4615      	mov	r5, r2
 8001b6c:	461c      	mov	r4, r3
 8001b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b70:	6028      	str	r0, [r5, #0]
 8001b72:	6069      	str	r1, [r5, #4]
 8001b74:	60aa      	str	r2, [r5, #8]
 8001b76:	60eb      	str	r3, [r5, #12]
 8001b78:	6820      	ldr	r0, [r4, #0]
 8001b7a:	6128      	str	r0, [r5, #16]
 8001b7c:	7923      	ldrb	r3, [r4, #4]
 8001b7e:	752b      	strb	r3, [r5, #20]
	debug_print_msg();
 8001b80:	f000 fa6a 	bl	8002058 <debug_print_msg>

    for(int i = 0; i < local_UART_packet->received_byte_cnt; i++){
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e01b      	b.n	8001bc2 <KISS_TO_HEX+0x82>
    	curr_val = conv_BIN_to_HEX(curr_mem+(i*8),1);
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4413      	add	r3, r2
 8001b94:	2101      	movs	r1, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fa2a 	bl	8000ff0 <conv_BIN_to_HEX>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]

        sprintf(uartData, "HEX[%d] = %x\n",i,curr_val);
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4917      	ldr	r1, [pc, #92]	; (8001c04 <KISS_TO_HEX+0xc4>)
 8001ba6:	4815      	ldr	r0, [pc, #84]	; (8001bfc <KISS_TO_HEX+0xbc>)
 8001ba8:	f005 fdf0 	bl	800778c <siprintf>
    	debug_print_msg();
 8001bac:	f000 fa54 	bl	8002058 <debug_print_msg>

        local_UART_packet->HEX_KISS_PACKET[i] = curr_val;
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	330e      	adds	r3, #14
 8001bb8:	79fa      	ldrb	r2, [r7, #7]
 8001bba:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < local_UART_packet->received_byte_cnt; i++){
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbde      	blt.n	8001b8a <KISS_TO_HEX+0x4a>
    }

	sprintf(uartData, "HEX buffer filled\n");
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <KISS_TO_HEX+0xbc>)
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <KISS_TO_HEX+0xc8>)
 8001bd0:	4615      	mov	r5, r2
 8001bd2:	461c      	mov	r4, r3
 8001bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd6:	6028      	str	r0, [r5, #0]
 8001bd8:	6069      	str	r1, [r5, #4]
 8001bda:	60aa      	str	r2, [r5, #8]
 8001bdc:	60eb      	str	r3, [r5, #12]
 8001bde:	8823      	ldrh	r3, [r4, #0]
 8001be0:	78a2      	ldrb	r2, [r4, #2]
 8001be2:	822b      	strh	r3, [r5, #16]
 8001be4:	4613      	mov	r3, r2
 8001be6:	74ab      	strb	r3, [r5, #18]
	debug_print_msg();
 8001be8:	f000 fa36 	bl	8002058 <debug_print_msg>
}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf4:	200000e8 	.word	0x200000e8
 8001bf8:	20001454 	.word	0x20001454
 8001bfc:	20001cec 	.word	0x20001cec
 8001c00:	08009304 	.word	0x08009304
 8001c04:	0800931c 	.word	0x0800931c
 8001c08:	0800932c 	.word	0x0800932c

08001c0c <crc_calc>:
//END OF KISS to AX.25 data flow

//---------------------- FCS Generation -----------------------------------------------------------------------------------------------

//CRC Calculations
void crc_calc(int in_bit, int * crc_ptr_in, int * crc_count_ptr_in){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001c18:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <crc_calc+0xd4>)
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
	int max_bits = rxBit_count-FCS_len;
 8001c1c:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <crc_calc+0xd8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3b10      	subs	r3, #16
 8001c22:	623b      	str	r3, [r7, #32]
	int out_bit;
	int roll_bit = *crc_ptr_in & 0x0001;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	61fb      	str	r3, [r7, #28]
    int poly = 0x8408;             			//reverse order of 0x1021
 8001c2e:	f248 4308 	movw	r3, #33800	; 0x8408
 8001c32:	61bb      	str	r3, [r7, #24]

    out_bit = in_bit ^ roll_bit; 		//xor lsb of current crc with input bit
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4053      	eors	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
	*crc_ptr_in >>= 1;               	//right shift by 1
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	105a      	asrs	r2, r3, #1
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	601a      	str	r2, [r3, #0]
	poly = (out_bit == 1) ? 0x8408 : 0x0000;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d102      	bne.n	8001c52 <crc_calc+0x46>
 8001c4c:	f248 4308 	movw	r3, #33800	; 0x8408
 8001c50:	e000      	b.n	8001c54 <crc_calc+0x48>
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
	*crc_ptr_in ^= poly;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	405a      	eors	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	601a      	str	r2, [r3, #0]
	*crc_count_ptr_in+=1;//Increment count
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	601a      	str	r2, [r3, #0]

    //End condition
	if(*crc_count_ptr_in >= max_bits){
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a3a      	ldr	r2, [r7, #32]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	dc30      	bgt.n	8001cd8 <crc_calc+0xcc>
    	*crc_ptr_in ^= 0xFFFF;//Complete CRC by XOR with all ones (one's complement)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 8001c7e:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	6013      	str	r3, [r2, #0]
  	    sprintf(uartData, "Convert CRC to FCS (hex) = %x\n",local_packet->crc);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001c8c:	3308      	adds	r3, #8
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4915      	ldr	r1, [pc, #84]	; (8001ce8 <crc_calc+0xdc>)
 8001c94:	4815      	ldr	r0, [pc, #84]	; (8001cec <crc_calc+0xe0>)
 8001c96:	f005 fd79 	bl	800778c <siprintf>
    	debug_print_msg();
 8001c9a:	f000 f9dd 	bl	8002058 <debug_print_msg>
    	if(local_packet->check_crc == false){
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001ca4:	3310      	adds	r3, #16
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	f083 0301 	eor.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d012      	beq.n	8001cd8 <crc_calc+0xcc>
    		//REMEBER TO CHECK THIS CRC conversion FOR ACCURACY LATER
    		conv_HEX_to_BIN(*crc_ptr_in,local_packet->FCS,false);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	b298      	uxth	r0, r3
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f7ff f907 	bl	8000ed8 <conv_HEX_to_BIN>
    		local_packet->crc = 0xFFFF;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001cd0:	3308      	adds	r3, #8
 8001cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd6:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200000e8 	.word	0x200000e8
 8001ce4:	200000a4 	.word	0x200000a4
 8001ce8:	08009340 	.word	0x08009340
 8001cec:	20001cec 	.word	0x20001cec

08001cf0 <crc_generate>:

void crc_generate(){
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001cf6:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <crc_generate+0x16c>)
 8001cf8:	60fb      	str	r3, [r7, #12]
	uint16_t * crc_ptr = &(local_packet->crc);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001d00:	3308      	adds	r3, #8
 8001d02:	60bb      	str	r3, [r7, #8]
	int * crc_count_ptr = &(local_packet->crc_count);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001d0a:	330c      	adds	r3, #12
 8001d0c:	607b      	str	r3, [r7, #4]
	bool *curr_mem;

	*crc_ptr = 0xFFFF;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d14:	801a      	strh	r2, [r3, #0]
	*crc_count_ptr = 0;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

	//Generate CRC from packet pointers of current packet type

	//have to be inserted in reverse order
	sprintf(uartData, "Performing CRC generation\n");
 8001d1c:	4a50      	ldr	r2, [pc, #320]	; (8001e60 <crc_generate+0x170>)
 8001d1e:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <crc_generate+0x174>)
 8001d20:	4615      	mov	r5, r2
 8001d22:	461c      	mov	r4, r3
 8001d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d26:	6028      	str	r0, [r5, #0]
 8001d28:	6069      	str	r1, [r5, #4]
 8001d2a:	60aa      	str	r2, [r5, #8]
 8001d2c:	60eb      	str	r3, [r5, #12]
 8001d2e:	cc03      	ldmia	r4!, {r0, r1}
 8001d30:	6128      	str	r0, [r5, #16]
 8001d32:	6169      	str	r1, [r5, #20]
 8001d34:	8823      	ldrh	r3, [r4, #0]
 8001d36:	78a2      	ldrb	r2, [r4, #2]
 8001d38:	832b      	strh	r3, [r5, #24]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	76ab      	strb	r3, [r5, #26]
	debug_print_msg();
 8001d3e:	f000 f98b 	bl	8002058 <debug_print_msg>

	//Calculate CRC for address
	curr_mem = (local_packet->address);//start at MS Byte(LSB)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d48:	3310      	adds	r3, #16
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	603b      	str	r3, [r7, #0]
	for(int i = 0;i<address_len;i++){
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	e00f      	b.n	8001d74 <crc_generate+0x84>
		crc_calc((int)local_packet->address[i],crc_ptr,crc_count_ptr);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d5a:	3310      	adds	r3, #16
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	4413      	add	r3, r2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	68b9      	ldr	r1, [r7, #8]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff4f 	bl	8001c0c <crc_calc>
	for(int i = 0;i<address_len;i++){
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b6f      	cmp	r3, #111	; 0x6f
 8001d78:	ddec      	ble.n	8001d54 <crc_generate+0x64>
	}

	//Calculate CRC for control
	curr_mem = local_packet->control;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d80:	3314      	adds	r3, #20
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < control_len; i++){
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	e00f      	b.n	8001dac <crc_generate+0xbc>
		//Call crc_calc per bit
		crc_calc((int)local_packet->control[i],crc_ptr,crc_count_ptr);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001d92:	3314      	adds	r3, #20
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4413      	add	r3, r2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	68b9      	ldr	r1, [r7, #8]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff33 	bl	8001c0c <crc_calc>
	for(int i = 0; i < control_len; i++){
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	3301      	adds	r3, #1
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2b07      	cmp	r3, #7
 8001db0:	ddec      	ble.n	8001d8c <crc_generate+0x9c>
	}

//	//Calculate CRC for PID (if packet is of type i-frame)
	curr_mem = local_packet->PID;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001db8:	3318      	adds	r3, #24
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < PID_len; i++){
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e00f      	b.n	8001de4 <crc_generate+0xf4>
		//Call crc_calc per bit
		crc_calc((int)local_packet->PID[i],crc_ptr,crc_count_ptr);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001dca:	3318      	adds	r3, #24
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff17 	bl	8001c0c <crc_calc>
	for(int i = 0; i < PID_len; i++){
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2b07      	cmp	r3, #7
 8001de8:	ddec      	ble.n	8001dc4 <crc_generate+0xd4>
	}

	//Calculate CRC for Info field
	curr_mem = (local_packet->Info);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001df0:	331c      	adds	r3, #28
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	603b      	str	r3, [r7, #0]
	for(int i = 0;i<local_packet->Info_Len;i++){
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	e00f      	b.n	8001e1c <crc_generate+0x12c>
		crc_calc((int)local_packet->Info[i],crc_ptr,crc_count_ptr);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8001e02:	331c      	adds	r3, #28
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fefb 	bl	8001c0c <crc_calc>
	for(int i = 0;i<local_packet->Info_Len;i++){
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	dbe8      	blt.n	8001dfc <crc_generate+0x10c>
	}

	sprintf(uartData, "rx_bitcnt = %d\n", rxBit_count);
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <crc_generate+0x178>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <crc_generate+0x17c>)
 8001e32:	480b      	ldr	r0, [pc, #44]	; (8001e60 <crc_generate+0x170>)
 8001e34:	f005 fcaa 	bl	800778c <siprintf>
	debug_print_msg();
 8001e38:	f000 f90e 	bl	8002058 <debug_print_msg>

	sprintf(uartData, "bitcnt_ptr = %d\n", *crc_count_ptr);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	490b      	ldr	r1, [pc, #44]	; (8001e70 <crc_generate+0x180>)
 8001e44:	4806      	ldr	r0, [pc, #24]	; (8001e60 <crc_generate+0x170>)
 8001e46:	f005 fca1 	bl	800778c <siprintf>
	debug_print_msg();
 8001e4a:	f000 f905 	bl	8002058 <debug_print_msg>
	*crc_count_ptr = 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	bf00      	nop
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e5c:	200000e8 	.word	0x200000e8
 8001e60:	20001cec 	.word	0x20001cec
 8001e64:	08009360 	.word	0x08009360
 8001e68:	200000a4 	.word	0x200000a4
 8001e6c:	0800937c 	.word	0x0800937c
 8001e70:	0800938c 	.word	0x0800938c

08001e74 <crc_check>:

bool crc_check(){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <crc_check+0x58>)
 8001e7c:	607b      	str	r3, [r7, #4]
	local_packet->check_crc = true;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001e84:	3310      	adds	r3, #16
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
	uint16_t fcs_val = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	807b      	strh	r3, [r7, #2]
	bool valid_crc = false;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	707b      	strb	r3, [r7, #1]

	fcs_val = conv_BIN_to_HEX(local_packet->FCS,0);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8001e98:	3304      	adds	r3, #4
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f8a6 	bl	8000ff0 <conv_BIN_to_HEX>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	807b      	strh	r3, [r7, #2]

	//generate crc
	crc_generate();
 8001ea8:	f7ff ff22 	bl	8001cf0 <crc_generate>

	//compare crc
	valid_crc = (local_packet->crc==fcs_val) ? true : false;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	707b      	strb	r3, [r7, #1]
	return valid_crc;
 8001ec2:	787b      	ldrb	r3, [r7, #1]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200000e8 	.word	0x200000e8

08001ed0 <initProgram>:
//****************************************************************************************************************
bool mode;
bool midbit = false;
bool changeMode = false;

void initProgram() {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0

	//Set hardware for receiving
	setHardwareMode(1);
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f000 f807 	bl	8001ee8 <setHardwareMode>
	setHardwareMode(0);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f000 f804 	bl	8001ee8 <setHardwareMode>

	//Setup UART
	init_UART();
 8001ee0:	f000 ff26 	bl	8002d30 <init_UART>
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <setHardwareMode>:

void setHardwareMode(int mode) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
//		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
//		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
//	}

	//Stop DAC
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4823      	ldr	r0, [pc, #140]	; (8001f80 <setHardwareMode+0x98>)
 8001ef4:	f001 ff1f 	bl	8003d36 <HAL_DAC_Stop_DMA>
	midbit = false;
 8001ef8:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <setHardwareMode+0x9c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]

	//Stop Timers the Correct Way
	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001efe:	2100      	movs	r1, #0
 8001f00:	4821      	ldr	r0, [pc, #132]	; (8001f88 <setHardwareMode+0xa0>)
 8001f02:	f003 fb2f 	bl	8005564 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_Base_Stop(&htim3);
 8001f06:	4821      	ldr	r0, [pc, #132]	; (8001f8c <setHardwareMode+0xa4>)
 8001f08:	f003 fa47 	bl	800539a <HAL_TIM_Base_Stop>
	HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4820      	ldr	r0, [pc, #128]	; (8001f90 <setHardwareMode+0xa8>)
 8001f10:	f003 fc60 	bl	80057d4 <HAL_TIM_IC_Stop_IT>

	//Zero Timers
	htim2.Instance->CNT = 0;
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <setHardwareMode+0xa0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT = 0;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <setHardwareMode+0xa4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
	htim5.Instance->CNT = 0;
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <setHardwareMode+0xa8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24

	//Transmission Mode
	if (mode) {
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00d      	beq.n	8001f4e <setHardwareMode+0x66>

		//Set Timer Auto Reload Settings
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX_LOW;
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <setHardwareMode+0xa0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	226c      	movs	r2, #108	; 0x6c
 8001f38:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <setHardwareMode+0xa4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8001f42:	62da      	str	r2, [r3, #44]	; 0x2c
		htim5.Instance->ARR = TIM5_AUTORELOAD_TX;
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <setHardwareMode+0xa8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c

//		//Start Timers the Correct Way
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
	}
}
 8001f4c:	e014      	b.n	8001f78 <setHardwareMode+0x90>
		htim2.Instance->ARR = TIM2_AUTORELOAD_TX_LOW;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <setHardwareMode+0xa0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	226c      	movs	r2, #108	; 0x6c
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->ARR = TIM3_AUTORELOAD_TX;
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <setHardwareMode+0xa4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim5.Instance->ARR = TIM5_AUTORELOAD_TX;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <setHardwareMode+0xa8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2200      	movs	r2, #0
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4807      	ldr	r0, [pc, #28]	; (8001f88 <setHardwareMode+0xa0>)
 8001f6c:	f003 fa76 	bl	800545c <HAL_TIM_OC_Start_IT>
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001f70:	2100      	movs	r1, #0
 8001f72:	4807      	ldr	r0, [pc, #28]	; (8001f90 <setHardwareMode+0xa8>)
 8001f74:	f003 fbc6 	bl	8005704 <HAL_TIM_IC_Start_IT>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20002994 	.word	0x20002994
 8001f84:	200000a8 	.word	0x200000a8
 8001f88:	200029a8 	.word	0x200029a8
 8001f8c:	200028f0 	.word	0x200028f0
 8001f90:	200028b0 	.word	0x200028b0

08001f94 <loadBitBuffer>:
 * 11001110
 * 11001110
 */

bool bufffull = false;
int loadBitBuffer(bool bit_val) {
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
	if(canWrite){
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <loadBitBuffer+0x6c>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01e      	beq.n	8001fe4 <loadBitBuffer+0x50>
		bitBuffer[bitSaveCount] = bit_val;
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <loadBitBuffer+0x70>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	4619      	mov	r1, r3
 8001fac:	4a16      	ldr	r2, [pc, #88]	; (8002008 <loadBitBuffer+0x74>)
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	5453      	strb	r3, [r2, r1]
		bitSaveCount++;
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <loadBitBuffer+0x70>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <loadBitBuffer+0x70>)
 8001fbc:	801a      	strh	r2, [r3, #0]
		if (bitSaveCount >= RX_BUFFERSIZE) {
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <loadBitBuffer+0x70>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f640 225e 	movw	r2, #2654	; 0xa5e
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d902      	bls.n	8001fd0 <loadBitBuffer+0x3c>
			canWrite = false;
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <loadBitBuffer+0x6c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
		}

		//Buffer is full
		if(bitSaveCount == bitReadCount){
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <loadBitBuffer+0x70>)
 8001fd2:	881a      	ldrh	r2, [r3, #0]
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <loadBitBuffer+0x78>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d106      	bne.n	8001fea <loadBitBuffer+0x56>
			canWrite = false;
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <loadBitBuffer+0x6c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e002      	b.n	8001fea <loadBitBuffer+0x56>
		}
	} else {
		bufffull = true;
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <loadBitBuffer+0x7c>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
	}
	canRead = true;
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <loadBitBuffer+0x80>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
	return bitSaveCount;
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <loadBitBuffer+0x70>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20000010 	.word	0x20000010
 8002004:	200000ac 	.word	0x200000ac
 8002008:	20002a28 	.word	0x20002a28
 800200c:	200000ae 	.word	0x200000ae
 8002010:	200000a9 	.word	0x200000a9
 8002014:	200000aa 	.word	0x200000aa

08002018 <resetBitBuffer>:
	}
	bufffull = false;
	canWrite = true;
	return returnVal;
}
void resetBitBuffer(){
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
	bitReadCount = 0;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <resetBitBuffer+0x2c>)
 800201e:	2200      	movs	r2, #0
 8002020:	801a      	strh	r2, [r3, #0]
	bitSaveCount = 0;
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <resetBitBuffer+0x30>)
 8002024:	2200      	movs	r2, #0
 8002026:	801a      	strh	r2, [r3, #0]

	canRead  = false;
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <resetBitBuffer+0x34>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
	canWrite = true;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <resetBitBuffer+0x38>)
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]

	bufffull = false;
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <resetBitBuffer+0x3c>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	200000ae 	.word	0x200000ae
 8002048:	200000ac 	.word	0x200000ac
 800204c:	200000aa 	.word	0x200000aa
 8002050:	20000010 	.word	0x20000010
 8002054:	200000a9 	.word	0x200000a9

08002058 <debug_print_msg>:
 *  Created on: Nov 1, 2020
 *      Author: monke
 */
#include "debug.h"

void debug_print_msg(){
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
	if(debug_printing){
		HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
	}
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <print_AX25>:

//Printing Packets
//****************************************************************************************************************
void print_AX25(){
 8002068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206a:	b08b      	sub	sp, #44	; 0x2c
 800206c:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 800206e:	4b8a      	ldr	r3, [pc, #552]	; (8002298 <print_AX25+0x230>)
 8002070:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002078:	330c      	adds	r3, #12
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET... All fields printed [MSB:LSB]\n");
 800207e:	4b87      	ldr	r3, [pc, #540]	; (800229c <print_AX25+0x234>)
 8002080:	4a87      	ldr	r2, [pc, #540]	; (80022a0 <print_AX25+0x238>)
 8002082:	4614      	mov	r4, r2
 8002084:	469c      	mov	ip, r3
 8002086:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800208a:	4665      	mov	r5, ip
 800208c:	4626      	mov	r6, r4
 800208e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002090:	6028      	str	r0, [r5, #0]
 8002092:	6069      	str	r1, [r5, #4]
 8002094:	60aa      	str	r2, [r5, #8]
 8002096:	60eb      	str	r3, [r5, #12]
 8002098:	3410      	adds	r4, #16
 800209a:	f10c 0c10 	add.w	ip, ip, #16
 800209e:	4574      	cmp	r4, lr
 80020a0:	d1f3      	bne.n	800208a <print_AX25+0x22>
 80020a2:	4663      	mov	r3, ip
 80020a4:	4622      	mov	r2, r4
 80020a6:	6810      	ldr	r0, [r2, #0]
 80020a8:	6018      	str	r0, [r3, #0]
 80020aa:	8891      	ldrh	r1, [r2, #4]
 80020ac:	7992      	ldrb	r2, [r2, #6]
 80020ae:	8099      	strh	r1, [r3, #4]
 80020b0:	719a      	strb	r2, [r3, #6]
	debug_print_msg();
 80020b2:	f7ff ffd1 	bl	8002058 <debug_print_msg>

	//Print Address Field
	curr_mem = local_packet->AX25_PACKET;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24

	//Output byte at a time
	for(int i = 0;i<address_len/8;i++){
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
 80020be:	e02a      	b.n	8002116 <print_AX25+0xae>

		sprintf(uartData, "Address Field %d =",i+1);
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	3301      	adds	r3, #1
 80020c4:	461a      	mov	r2, r3
 80020c6:	4977      	ldr	r1, [pc, #476]	; (80022a4 <print_AX25+0x23c>)
 80020c8:	4874      	ldr	r0, [pc, #464]	; (800229c <print_AX25+0x234>)
 80020ca:	f005 fb5f 	bl	800778c <siprintf>
		debug_print_msg();
 80020ce:	f7ff ffc3 	bl	8002058 <debug_print_msg>

		for(int j = 0;j<8;j++){
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	e00f      	b.n	80020f8 <print_AX25+0x90>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e0:	4413      	add	r3, r2
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4970      	ldr	r1, [pc, #448]	; (80022a8 <print_AX25+0x240>)
 80020e8:	486c      	ldr	r0, [pc, #432]	; (800229c <print_AX25+0x234>)
 80020ea:	f005 fb4f 	bl	800778c <siprintf>
			debug_print_msg();
 80020ee:	f7ff ffb3 	bl	8002058 <debug_print_msg>
		for(int j = 0;j<8;j++){
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3301      	adds	r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b07      	cmp	r3, #7
 80020fc:	ddec      	ble.n	80020d8 <print_AX25+0x70>
		}
		curr_mem += 8;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	3308      	adds	r3, #8
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(uartData, "\n");
 8002104:	4a65      	ldr	r2, [pc, #404]	; (800229c <print_AX25+0x234>)
 8002106:	4b69      	ldr	r3, [pc, #420]	; (80022ac <print_AX25+0x244>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 800210c:	f7ff ffa4 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<address_len/8;i++){
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	3301      	adds	r3, #1
 8002114:	623b      	str	r3, [r7, #32]
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	2b0d      	cmp	r3, #13
 800211a:	ddd1      	ble.n	80020c0 <print_AX25+0x58>
	}

	//Print Control Field
	sprintf(uartData, "Control Field   =");
 800211c:	4a5f      	ldr	r2, [pc, #380]	; (800229c <print_AX25+0x234>)
 800211e:	4b64      	ldr	r3, [pc, #400]	; (80022b0 <print_AX25+0x248>)
 8002120:	4615      	mov	r5, r2
 8002122:	461c      	mov	r4, r3
 8002124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002126:	6028      	str	r0, [r5, #0]
 8002128:	6069      	str	r1, [r5, #4]
 800212a:	60aa      	str	r2, [r5, #8]
 800212c:	60eb      	str	r3, [r5, #12]
 800212e:	8823      	ldrh	r3, [r4, #0]
 8002130:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 8002132:	f7ff ff91 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<8;i++){
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	e00f      	b.n	800215c <print_AX25+0xf4>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4957      	ldr	r1, [pc, #348]	; (80022a8 <print_AX25+0x240>)
 800214c:	4853      	ldr	r0, [pc, #332]	; (800229c <print_AX25+0x234>)
 800214e:	f005 fb1d 	bl	800778c <siprintf>
		debug_print_msg();
 8002152:	f7ff ff81 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<8;i++){
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	3301      	adds	r3, #1
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b07      	cmp	r3, #7
 8002160:	ddec      	ble.n	800213c <print_AX25+0xd4>
	}
	sprintf(uartData, "\n");
 8002162:	4a4e      	ldr	r2, [pc, #312]	; (800229c <print_AX25+0x234>)
 8002164:	4b51      	ldr	r3, [pc, #324]	; (80022ac <print_AX25+0x244>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800216a:	f7ff ff75 	bl	8002058 <debug_print_msg>

	//PID
	curr_mem += control_len;//Subtract 8 to start at the flag start
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	3308      	adds	r3, #8
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(uartData, "PID Field       =");
 8002174:	4a49      	ldr	r2, [pc, #292]	; (800229c <print_AX25+0x234>)
 8002176:	4b4f      	ldr	r3, [pc, #316]	; (80022b4 <print_AX25+0x24c>)
 8002178:	4615      	mov	r5, r2
 800217a:	461c      	mov	r4, r3
 800217c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800217e:	6028      	str	r0, [r5, #0]
 8002180:	6069      	str	r1, [r5, #4]
 8002182:	60aa      	str	r2, [r5, #8]
 8002184:	60eb      	str	r3, [r5, #12]
 8002186:	8823      	ldrh	r3, [r4, #0]
 8002188:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 800218a:	f7ff ff65 	bl	8002058 <debug_print_msg>

	for(int i = 0;i<8;i++){
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e00f      	b.n	80021b4 <print_AX25+0x14c>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f1c3 0307 	rsb	r3, r3, #7
 800219a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219c:	4413      	add	r3, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4941      	ldr	r1, [pc, #260]	; (80022a8 <print_AX25+0x240>)
 80021a4:	483d      	ldr	r0, [pc, #244]	; (800229c <print_AX25+0x234>)
 80021a6:	f005 faf1 	bl	800778c <siprintf>
		debug_print_msg();
 80021aa:	f7ff ff55 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<8;i++){
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b07      	cmp	r3, #7
 80021b8:	ddec      	ble.n	8002194 <print_AX25+0x12c>
	}
	sprintf(uartData, "\n");
 80021ba:	4a38      	ldr	r2, [pc, #224]	; (800229c <print_AX25+0x234>)
 80021bc:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <print_AX25+0x244>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 80021c2:	f7ff ff49 	bl	8002058 <debug_print_msg>
	curr_mem += PID_len;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	3308      	adds	r3, #8
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24

	//Print Info Field
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	e02a      	b.n	8002228 <print_AX25+0x1c0>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	3301      	adds	r3, #1
 80021d6:	461a      	mov	r2, r3
 80021d8:	4937      	ldr	r1, [pc, #220]	; (80022b8 <print_AX25+0x250>)
 80021da:	4830      	ldr	r0, [pc, #192]	; (800229c <print_AX25+0x234>)
 80021dc:	f005 fad6 	bl	800778c <siprintf>
		debug_print_msg();
 80021e0:	f7ff ff3a 	bl	8002058 <debug_print_msg>

		for(int j = 0;j<8;j++){
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	e00f      	b.n	800220a <print_AX25+0x1a2>
			sprintf(uartData, " %d ",*(curr_mem+8-j-1));
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f1c3 0307 	rsb	r3, r3, #7
 80021f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f2:	4413      	add	r3, r2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	492b      	ldr	r1, [pc, #172]	; (80022a8 <print_AX25+0x240>)
 80021fa:	4828      	ldr	r0, [pc, #160]	; (800229c <print_AX25+0x234>)
 80021fc:	f005 fac6 	bl	800778c <siprintf>
			debug_print_msg();
 8002200:	f7ff ff2a 	bl	8002058 <debug_print_msg>
		for(int j = 0;j<8;j++){
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3301      	adds	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b07      	cmp	r3, #7
 800220e:	ddec      	ble.n	80021ea <print_AX25+0x182>
		}
		curr_mem += 8;
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	3308      	adds	r3, #8
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(uartData, "\n");
 8002216:	4a21      	ldr	r2, [pc, #132]	; (800229c <print_AX25+0x234>)
 8002218:	4b24      	ldr	r3, [pc, #144]	; (80022ac <print_AX25+0x244>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 800221e:	f7ff ff1b 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	3301      	adds	r3, #1
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	da00      	bge.n	8002236 <print_AX25+0x1ce>
 8002234:	3307      	adds	r3, #7
 8002236:	10db      	asrs	r3, r3, #3
 8002238:	461a      	mov	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4293      	cmp	r3, r2
 800223e:	dbc8      	blt.n	80021d2 <print_AX25+0x16a>
	}

	sprintf(uartData, "FCS Field = ")	;
 8002240:	4a16      	ldr	r2, [pc, #88]	; (800229c <print_AX25+0x234>)
 8002242:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <print_AX25+0x254>)
 8002244:	4614      	mov	r4, r2
 8002246:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002248:	6020      	str	r0, [r4, #0]
 800224a:	6061      	str	r1, [r4, #4]
 800224c:	60a2      	str	r2, [r4, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	7323      	strb	r3, [r4, #12]
	debug_print_msg();
 8002252:	f7ff ff01 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<FCS_len;i++){
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	e00f      	b.n	800227c <print_AX25+0x214>
		sprintf(uartData, " %d ",*(curr_mem+16-i-1));
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f1c3 030f 	rsb	r3, r3, #15
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	4413      	add	r3, r2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	490f      	ldr	r1, [pc, #60]	; (80022a8 <print_AX25+0x240>)
 800226c:	480b      	ldr	r0, [pc, #44]	; (800229c <print_AX25+0x234>)
 800226e:	f005 fa8d 	bl	800778c <siprintf>
		debug_print_msg();
 8002272:	f7ff fef1 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<FCS_len;i++){
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	3301      	adds	r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b0f      	cmp	r3, #15
 8002280:	ddec      	ble.n	800225c <print_AX25+0x1f4>
	}
	sprintf(uartData, "\n");
 8002282:	4a06      	ldr	r2, [pc, #24]	; (800229c <print_AX25+0x234>)
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <print_AX25+0x244>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800228a:	f7ff fee5 	bl	8002058 <debug_print_msg>
}
 800228e:	bf00      	nop
 8002290:	372c      	adds	r7, #44	; 0x2c
 8002292:	46bd      	mov	sp, r7
 8002294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002296:	bf00      	nop
 8002298:	200000e8 	.word	0x200000e8
 800229c:	20001cec 	.word	0x20001cec
 80022a0:	080093a0 	.word	0x080093a0
 80022a4:	080093d8 	.word	0x080093d8
 80022a8:	080093ec 	.word	0x080093ec
 80022ac:	080093f4 	.word	0x080093f4
 80022b0:	080093f8 	.word	0x080093f8
 80022b4:	0800940c 	.word	0x0800940c
 80022b8:	08009420 	.word	0x08009420
 80022bc:	08009434 	.word	0x08009434

080022c0 <print_outAX25>:

void print_outAX25(){
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c2:	b08d      	sub	sp, #52	; 0x34
 80022c4:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80022c6:	4b9b      	ldr	r3, [pc, #620]	; (8002534 <print_outAX25+0x274>)
 80022c8:	607b      	str	r3, [r7, #4]
	int bytecnt = local_packet->byte_cnt;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80022d0:	330c      	adds	r3, #12
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	603b      	str	r3, [r7, #0]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting AX25_PACKET being sent to radio\n");
 80022d6:	4b98      	ldr	r3, [pc, #608]	; (8002538 <print_outAX25+0x278>)
 80022d8:	4a98      	ldr	r2, [pc, #608]	; (800253c <print_outAX25+0x27c>)
 80022da:	4614      	mov	r4, r2
 80022dc:	469c      	mov	ip, r3
 80022de:	f104 0e20 	add.w	lr, r4, #32
 80022e2:	4665      	mov	r5, ip
 80022e4:	4626      	mov	r6, r4
 80022e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80022e8:	6028      	str	r0, [r5, #0]
 80022ea:	6069      	str	r1, [r5, #4]
 80022ec:	60aa      	str	r2, [r5, #8]
 80022ee:	60eb      	str	r3, [r5, #12]
 80022f0:	3410      	adds	r4, #16
 80022f2:	f10c 0c10 	add.w	ip, ip, #16
 80022f6:	4574      	cmp	r4, lr
 80022f8:	d1f3      	bne.n	80022e2 <print_outAX25+0x22>
 80022fa:	4662      	mov	r2, ip
 80022fc:	4623      	mov	r3, r4
 80022fe:	cb03      	ldmia	r3!, {r0, r1}
 8002300:	6010      	str	r0, [r2, #0]
 8002302:	6051      	str	r1, [r2, #4]
 8002304:	8819      	ldrh	r1, [r3, #0]
 8002306:	789b      	ldrb	r3, [r3, #2]
 8002308:	8111      	strh	r1, [r2, #8]
 800230a:	7293      	strb	r3, [r2, #10]
	debug_print_msg();
 800230c:	f7ff fea4 	bl	8002058 <debug_print_msg>
	sprintf(uartData, "AX25 FLAG = ");
 8002310:	4a89      	ldr	r2, [pc, #548]	; (8002538 <print_outAX25+0x278>)
 8002312:	4b8b      	ldr	r3, [pc, #556]	; (8002540 <print_outAX25+0x280>)
 8002314:	4614      	mov	r4, r2
 8002316:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002318:	6020      	str	r0, [r4, #0]
 800231a:	6061      	str	r1, [r4, #4]
 800231c:	60a2      	str	r2, [r4, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	7323      	strb	r3, [r4, #12]
	debug_print_msg();
 8002322:	f7ff fe99 	bl	8002058 <debug_print_msg>
	curr_mem = AX25TBYTE;
 8002326:	4b87      	ldr	r3, [pc, #540]	; (8002544 <print_outAX25+0x284>)
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < 8; i++){
 800232a:	2300      	movs	r3, #0
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
 800232e:	e00d      	b.n	800234c <print_outAX25+0x8c>
		sprintf(uartData, " %d ",curr_mem[i]);
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002334:	4413      	add	r3, r2
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4983      	ldr	r1, [pc, #524]	; (8002548 <print_outAX25+0x288>)
 800233c:	487e      	ldr	r0, [pc, #504]	; (8002538 <print_outAX25+0x278>)
 800233e:	f005 fa25 	bl	800778c <siprintf>
		debug_print_msg();
 8002342:	f7ff fe89 	bl	8002058 <debug_print_msg>
	for(int i = 0; i < 8; i++){
 8002346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002348:	3301      	adds	r3, #1
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
 800234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234e:	2b07      	cmp	r3, #7
 8002350:	ddee      	ble.n	8002330 <print_outAX25+0x70>
	}
	sprintf(uartData, "\n");
 8002352:	4a79      	ldr	r2, [pc, #484]	; (8002538 <print_outAX25+0x278>)
 8002354:	4b7d      	ldr	r3, [pc, #500]	; (800254c <print_outAX25+0x28c>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800235a:	f7ff fe7d 	bl	8002058 <debug_print_msg>

	//Print Address Field
	curr_mem = local_packet->address;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002364:	3310      	adds	r3, #16
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
 800236e:	e028      	b.n	80023c2 <print_outAX25+0x102>
		sprintf(uartData, "Address Field %d =",i+1);
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	3301      	adds	r3, #1
 8002374:	461a      	mov	r2, r3
 8002376:	4976      	ldr	r1, [pc, #472]	; (8002550 <print_outAX25+0x290>)
 8002378:	486f      	ldr	r0, [pc, #444]	; (8002538 <print_outAX25+0x278>)
 800237a:	f005 fa07 	bl	800778c <siprintf>
		debug_print_msg();
 800237e:	f7ff fe6b 	bl	8002058 <debug_print_msg>

		for(int j = 0;j<8;j++){
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	e00d      	b.n	80023a4 <print_outAX25+0xe4>
			sprintf(uartData, " %d ",*(curr_mem+j));
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800238c:	4413      	add	r3, r2
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	496d      	ldr	r1, [pc, #436]	; (8002548 <print_outAX25+0x288>)
 8002394:	4868      	ldr	r0, [pc, #416]	; (8002538 <print_outAX25+0x278>)
 8002396:	f005 f9f9 	bl	800778c <siprintf>
			debug_print_msg();
 800239a:	f7ff fe5d 	bl	8002058 <debug_print_msg>
		for(int j = 0;j<8;j++){
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	3301      	adds	r3, #1
 80023a2:	623b      	str	r3, [r7, #32]
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	2b07      	cmp	r3, #7
 80023a8:	ddee      	ble.n	8002388 <print_outAX25+0xc8>
		}
		curr_mem += 8;
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	3308      	adds	r3, #8
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80023b0:	4a61      	ldr	r2, [pc, #388]	; (8002538 <print_outAX25+0x278>)
 80023b2:	4b66      	ldr	r3, [pc, #408]	; (800254c <print_outAX25+0x28c>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 80023b8:	f7ff fe4e 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<address_len/8;i++){
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	3301      	adds	r3, #1
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	2b0d      	cmp	r3, #13
 80023c6:	ddd3      	ble.n	8002370 <print_outAX25+0xb0>
	}

	//if address was bitstuffed then print rest of address field
	sprintf(uartData, "Address Field extra = ");
 80023c8:	4a5b      	ldr	r2, [pc, #364]	; (8002538 <print_outAX25+0x278>)
 80023ca:	4b62      	ldr	r3, [pc, #392]	; (8002554 <print_outAX25+0x294>)
 80023cc:	4614      	mov	r4, r2
 80023ce:	461d      	mov	r5, r3
 80023d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023d2:	6020      	str	r0, [r4, #0]
 80023d4:	6061      	str	r1, [r4, #4]
 80023d6:	60a2      	str	r2, [r4, #8]
 80023d8:	60e3      	str	r3, [r4, #12]
 80023da:	6828      	ldr	r0, [r5, #0]
 80023dc:	6120      	str	r0, [r4, #16]
 80023de:	88ab      	ldrh	r3, [r5, #4]
 80023e0:	79aa      	ldrb	r2, [r5, #6]
 80023e2:	82a3      	strh	r3, [r4, #20]
 80023e4:	4613      	mov	r3, r2
 80023e6:	75a3      	strb	r3, [r4, #22]
	debug_print_msg();
 80023e8:	f7ff fe36 	bl	8002058 <debug_print_msg>
	curr_mem += address_len;
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	3370      	adds	r3, #112	; 0x70
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(local_packet->stuffed_address > 0){
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80023f8:	3310      	adds	r3, #16
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	dd19      	ble.n	8002434 <print_outAX25+0x174>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	e00e      	b.n	8002424 <print_outAX25+0x164>
			sprintf(uartData, " %d ",*(curr_mem-i));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	425b      	negs	r3, r3
 800240a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800240c:	4413      	add	r3, r2
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	494d      	ldr	r1, [pc, #308]	; (8002548 <print_outAX25+0x288>)
 8002414:	4848      	ldr	r0, [pc, #288]	; (8002538 <print_outAX25+0x278>)
 8002416:	f005 f9b9 	bl	800778c <siprintf>
			debug_print_msg();
 800241a:	f7ff fe1d 	bl	8002058 <debug_print_msg>
		for(int i = 0; i < local_packet->stuffed_address; i++){
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3301      	adds	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800242a:	3310      	adds	r3, #16
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	429a      	cmp	r2, r3
 8002432:	dbe8      	blt.n	8002406 <print_outAX25+0x146>
		}
	}
	sprintf(uartData, "\n");
 8002434:	4a40      	ldr	r2, [pc, #256]	; (8002538 <print_outAX25+0x278>)
 8002436:	4b45      	ldr	r3, [pc, #276]	; (800254c <print_outAX25+0x28c>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800243c:	f7ff fe0c 	bl	8002058 <debug_print_msg>

	//Print Control Field
	curr_mem = local_packet->control;//Subtract 8 to start at the flag start
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002446:	3314      	adds	r3, #20
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 800244c:	4a3a      	ldr	r2, [pc, #232]	; (8002538 <print_outAX25+0x278>)
 800244e:	4b42      	ldr	r3, [pc, #264]	; (8002558 <print_outAX25+0x298>)
 8002450:	4615      	mov	r5, r2
 8002452:	461c      	mov	r4, r3
 8002454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002456:	6028      	str	r0, [r5, #0]
 8002458:	6069      	str	r1, [r5, #4]
 800245a:	60aa      	str	r2, [r5, #8]
 800245c:	60eb      	str	r3, [r5, #12]
 800245e:	8823      	ldrh	r3, [r4, #0]
 8002460:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 8002462:	f7ff fdf9 	bl	8002058 <debug_print_msg>

	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	e00d      	b.n	8002488 <print_outAX25+0x1c8>
		sprintf(uartData, " %d ",*(curr_mem+i));
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002470:	4413      	add	r3, r2
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	4934      	ldr	r1, [pc, #208]	; (8002548 <print_outAX25+0x288>)
 8002478:	482f      	ldr	r0, [pc, #188]	; (8002538 <print_outAX25+0x278>)
 800247a:	f005 f987 	bl	800778c <siprintf>
		debug_print_msg();
 800247e:	f7ff fdeb 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<control_len + local_packet->stuffed_control;i++){
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	3301      	adds	r3, #1
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800248e:	3314      	adds	r3, #20
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3308      	adds	r3, #8
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	429a      	cmp	r2, r3
 8002498:	dbe8      	blt.n	800246c <print_outAX25+0x1ac>
	}
	sprintf(uartData, "\n");
 800249a:	4a27      	ldr	r2, [pc, #156]	; (8002538 <print_outAX25+0x278>)
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <print_outAX25+0x28c>)
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 80024a2:	f7ff fdd9 	bl	8002058 <debug_print_msg>

	//PID
	curr_mem = local_packet->PID;//Subtract 8 to start at the flag start
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80024ac:	3318      	adds	r3, #24
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 80024b2:	4a21      	ldr	r2, [pc, #132]	; (8002538 <print_outAX25+0x278>)
 80024b4:	4b29      	ldr	r3, [pc, #164]	; (800255c <print_outAX25+0x29c>)
 80024b6:	4615      	mov	r5, r2
 80024b8:	461c      	mov	r4, r3
 80024ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024bc:	6028      	str	r0, [r5, #0]
 80024be:	6069      	str	r1, [r5, #4]
 80024c0:	60aa      	str	r2, [r5, #8]
 80024c2:	60eb      	str	r3, [r5, #12]
 80024c4:	8823      	ldrh	r3, [r4, #0]
 80024c6:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 80024c8:	f7ff fdc6 	bl	8002058 <debug_print_msg>

	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e00d      	b.n	80024ee <print_outAX25+0x22e>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d6:	4413      	add	r3, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	491a      	ldr	r1, [pc, #104]	; (8002548 <print_outAX25+0x288>)
 80024de:	4816      	ldr	r0, [pc, #88]	; (8002538 <print_outAX25+0x278>)
 80024e0:	f005 f954 	bl	800778c <siprintf>
		debug_print_msg();
 80024e4:	f7ff fdb8 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<PID_len + local_packet->stuffed_PID;i++){
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3301      	adds	r3, #1
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80024f4:	3318      	adds	r3, #24
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3308      	adds	r3, #8
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	dbe8      	blt.n	80024d2 <print_outAX25+0x212>
	}
	sprintf(uartData, "\n");
 8002500:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <print_outAX25+0x278>)
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <print_outAX25+0x28c>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002508:	f7ff fda6 	bl	8002058 <debug_print_msg>

	sprintf(uartData, "Info Field = ");
 800250c:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <print_outAX25+0x278>)
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <print_outAX25+0x2a0>)
 8002510:	4614      	mov	r4, r2
 8002512:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002514:	6020      	str	r0, [r4, #0]
 8002516:	6061      	str	r1, [r4, #4]
 8002518:	60a2      	str	r2, [r4, #8]
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	81a3      	strh	r3, [r4, #12]
	debug_print_msg();
 800251e:	f7ff fd9b 	bl	8002058 <debug_print_msg>
	curr_mem = local_packet->Info;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002528:	331c      	adds	r3, #28
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < local_packet->Info_Len + local_packet->stuffed_Info;i++){
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	e025      	b.n	8002580 <print_outAX25+0x2c0>
 8002534:	200000e8 	.word	0x200000e8
 8002538:	20001cec 	.word	0x20001cec
 800253c:	08009444 	.word	0x08009444
 8002540:	08009470 	.word	0x08009470
 8002544:	20000008 	.word	0x20000008
 8002548:	080093ec 	.word	0x080093ec
 800254c:	080093f4 	.word	0x080093f4
 8002550:	080093d8 	.word	0x080093d8
 8002554:	08009480 	.word	0x08009480
 8002558:	080093f8 	.word	0x080093f8
 800255c:	0800940c 	.word	0x0800940c
 8002560:	08009498 	.word	0x08009498
		sprintf(uartData, " %d ",*(curr_mem+i));
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002568:	4413      	add	r3, r2
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	494d      	ldr	r1, [pc, #308]	; (80026a4 <print_outAX25+0x3e4>)
 8002570:	484d      	ldr	r0, [pc, #308]	; (80026a8 <print_outAX25+0x3e8>)
 8002572:	f005 f90b 	bl	800778c <siprintf>
		debug_print_msg();
 8002576:	f7ff fd6f 	bl	8002058 <debug_print_msg>
	for(int i = 0; i < local_packet->Info_Len + local_packet->stuffed_Info;i++){
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	3301      	adds	r3, #1
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800258e:	331c      	adds	r3, #28
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4413      	add	r3, r2
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	429a      	cmp	r2, r3
 8002598:	dbe4      	blt.n	8002564 <print_outAX25+0x2a4>
	}
	sprintf(uartData, "\n");
 800259a:	4a43      	ldr	r2, [pc, #268]	; (80026a8 <print_outAX25+0x3e8>)
 800259c:	4b43      	ldr	r3, [pc, #268]	; (80026ac <print_outAX25+0x3ec>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 80025a2:	f7ff fd59 	bl	8002058 <debug_print_msg>

	curr_mem = local_packet->FCS;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80025ac:	3304      	adds	r3, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "FCS Field     =")	;
 80025b2:	4a3d      	ldr	r2, [pc, #244]	; (80026a8 <print_outAX25+0x3e8>)
 80025b4:	4b3e      	ldr	r3, [pc, #248]	; (80026b0 <print_outAX25+0x3f0>)
 80025b6:	4614      	mov	r4, r2
 80025b8:	461d      	mov	r5, r3
 80025ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025bc:	6020      	str	r0, [r4, #0]
 80025be:	6061      	str	r1, [r4, #4]
 80025c0:	60a2      	str	r2, [r4, #8]
 80025c2:	60e3      	str	r3, [r4, #12]
	debug_print_msg();
 80025c4:	f7ff fd48 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	e00d      	b.n	80025ea <print_outAX25+0x32a>
		sprintf(uartData, " %d ",*(curr_mem+i));
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4932      	ldr	r1, [pc, #200]	; (80026a4 <print_outAX25+0x3e4>)
 80025da:	4833      	ldr	r0, [pc, #204]	; (80026a8 <print_outAX25+0x3e8>)
 80025dc:	f005 f8d6 	bl	800778c <siprintf>
		debug_print_msg();
 80025e0:	f7ff fd3a 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<FCS_len+local_packet->stuffed_FCS;i++){
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3301      	adds	r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3310      	adds	r3, #16
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	dbe9      	blt.n	80025ce <print_outAX25+0x30e>
	}

	sprintf(uartData, "\n");
 80025fa:	4a2b      	ldr	r2, [pc, #172]	; (80026a8 <print_outAX25+0x3e8>)
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <print_outAX25+0x3ec>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002602:	f7ff fd29 	bl	8002058 <debug_print_msg>

	sprintf(uartData, "AX25 FLAG = ");
 8002606:	4a28      	ldr	r2, [pc, #160]	; (80026a8 <print_outAX25+0x3e8>)
 8002608:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <print_outAX25+0x3f4>)
 800260a:	4614      	mov	r4, r2
 800260c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800260e:	6020      	str	r0, [r4, #0]
 8002610:	6061      	str	r1, [r4, #4]
 8002612:	60a2      	str	r2, [r4, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	7323      	strb	r3, [r4, #12]
	debug_print_msg();
 8002618:	f7ff fd1e 	bl	8002058 <debug_print_msg>
	curr_mem = AX25TBYTE;
 800261c:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <print_outAX25+0x3f8>)
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < 8; i++){
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	e00d      	b.n	8002642 <print_outAX25+0x382>
		sprintf(uartData, " %d ",curr_mem[i]);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262a:	4413      	add	r3, r2
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	491c      	ldr	r1, [pc, #112]	; (80026a4 <print_outAX25+0x3e4>)
 8002632:	481d      	ldr	r0, [pc, #116]	; (80026a8 <print_outAX25+0x3e8>)
 8002634:	f005 f8aa 	bl	800778c <siprintf>
		debug_print_msg();
 8002638:	f7ff fd0e 	bl	8002058 <debug_print_msg>
	for(int i = 0; i < 8; i++){
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	3301      	adds	r3, #1
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b07      	cmp	r3, #7
 8002646:	ddee      	ble.n	8002626 <print_outAX25+0x366>
	}
	sprintf(uartData, "\n");
 8002648:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <print_outAX25+0x3e8>)
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <print_outAX25+0x3ec>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002650:	f7ff fd02 	bl	8002058 <debug_print_msg>



	//reset bitstuff members
	local_packet->stuffed_address = 0;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800265a:	3310      	adds	r3, #16
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_control = 0;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002666:	3314      	adds	r3, #20
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_PID = 0;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002672:	3318      	adds	r3, #24
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_Info = 0;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800267e:	331c      	adds	r3, #28
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
	local_packet->stuffed_FCS = 0;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
	local_packet->bit_stuffed_zeros = 0;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8002694:	3304      	adds	r3, #4
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
}
 800269a:	bf00      	nop
 800269c:	3734      	adds	r7, #52	; 0x34
 800269e:	46bd      	mov	sp, r7
 80026a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	080093ec 	.word	0x080093ec
 80026a8:	20001cec 	.word	0x20001cec
 80026ac:	080093f4 	.word	0x080093f4
 80026b0:	080094a8 	.word	0x080094a8
 80026b4:	08009470 	.word	0x08009470
 80026b8:	20000008 	.word	0x20000008

080026bc <print_KISS>:

void print_KISS(){
 80026bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026be:	b08d      	sub	sp, #52	; 0x34
 80026c0:	af00      	add	r7, sp, #0
	struct PACKET_STRUCT* local_packet = &global_packet;
 80026c2:	4baf      	ldr	r3, [pc, #700]	; (8002980 <print_KISS+0x2c4>)
 80026c4:	60bb      	str	r3, [r7, #8]
	int bytecnt = local_packet->byte_cnt;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80026cc:	330c      	adds	r3, #12
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	607b      	str	r3, [r7, #4]
	bool *curr_mem;
	sprintf(uartData, "\nPrinting KISS_PACKET... All fields printed [MSB:LSB]\n");
 80026d2:	4bac      	ldr	r3, [pc, #688]	; (8002984 <print_KISS+0x2c8>)
 80026d4:	4aac      	ldr	r2, [pc, #688]	; (8002988 <print_KISS+0x2cc>)
 80026d6:	4614      	mov	r4, r2
 80026d8:	469c      	mov	ip, r3
 80026da:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80026de:	4665      	mov	r5, ip
 80026e0:	4626      	mov	r6, r4
 80026e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80026e4:	6028      	str	r0, [r5, #0]
 80026e6:	6069      	str	r1, [r5, #4]
 80026e8:	60aa      	str	r2, [r5, #8]
 80026ea:	60eb      	str	r3, [r5, #12]
 80026ec:	3410      	adds	r4, #16
 80026ee:	f10c 0c10 	add.w	ip, ip, #16
 80026f2:	4574      	cmp	r4, lr
 80026f4:	d1f3      	bne.n	80026de <print_KISS+0x22>
 80026f6:	4663      	mov	r3, ip
 80026f8:	4622      	mov	r2, r4
 80026fa:	6810      	ldr	r0, [r2, #0]
 80026fc:	6018      	str	r0, [r3, #0]
 80026fe:	8891      	ldrh	r1, [r2, #4]
 8002700:	7992      	ldrb	r2, [r2, #6]
 8002702:	8099      	strh	r1, [r3, #4]
 8002704:	719a      	strb	r2, [r3, #6]
	debug_print_msg();
 8002706:	f7ff fca7 	bl	8002058 <debug_print_msg>

	//Print Start Flag
	curr_mem = (local_packet->address + address_len + 16 - 1);//start at the flag start
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002710:	3310      	adds	r3, #16
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	337f      	adds	r3, #127	; 0x7f
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Start flag      =");
 8002718:	4a9a      	ldr	r2, [pc, #616]	; (8002984 <print_KISS+0x2c8>)
 800271a:	4b9c      	ldr	r3, [pc, #624]	; (800298c <print_KISS+0x2d0>)
 800271c:	4615      	mov	r5, r2
 800271e:	461c      	mov	r4, r3
 8002720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002722:	6028      	str	r0, [r5, #0]
 8002724:	6069      	str	r1, [r5, #4]
 8002726:	60aa      	str	r2, [r5, #8]
 8002728:	60eb      	str	r3, [r5, #12]
 800272a:	8823      	ldrh	r3, [r4, #0]
 800272c:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 800272e:	f7ff fc93 	bl	8002058 <debug_print_msg>

	for(int i = 0;i<8;i++){
 8002732:	2300      	movs	r3, #0
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
 8002736:	e00e      	b.n	8002756 <print_KISS+0x9a>
		sprintf(uartData, " %d ",*(curr_mem-i));
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	425b      	negs	r3, r3
 800273c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800273e:	4413      	add	r3, r2
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	4992      	ldr	r1, [pc, #584]	; (8002990 <print_KISS+0x2d4>)
 8002746:	488f      	ldr	r0, [pc, #572]	; (8002984 <print_KISS+0x2c8>)
 8002748:	f005 f820 	bl	800778c <siprintf>
		debug_print_msg();
 800274c:	f7ff fc84 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<8;i++){
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	3301      	adds	r3, #1
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	2b07      	cmp	r3, #7
 800275a:	dded      	ble.n	8002738 <print_KISS+0x7c>
	}
	sprintf(uartData, "\n");
 800275c:	4a89      	ldr	r2, [pc, #548]	; (8002984 <print_KISS+0x2c8>)
 800275e:	4b8d      	ldr	r3, [pc, #564]	; (8002994 <print_KISS+0x2d8>)
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002764:	f7ff fc78 	bl	8002058 <debug_print_msg>

	curr_mem = (local_packet->address) + address_len - 1;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800276e:	3310      	adds	r3, #16
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	336f      	adds	r3, #111	; 0x6f
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<address_len/8;i++){
 8002776:	2300      	movs	r3, #0
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
 800277a:	e029      	b.n	80027d0 <print_KISS+0x114>
		sprintf(uartData, "Address Field %d =",i+1);
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	3301      	adds	r3, #1
 8002780:	461a      	mov	r2, r3
 8002782:	4985      	ldr	r1, [pc, #532]	; (8002998 <print_KISS+0x2dc>)
 8002784:	487f      	ldr	r0, [pc, #508]	; (8002984 <print_KISS+0x2c8>)
 8002786:	f005 f801 	bl	800778c <siprintf>
		debug_print_msg();
 800278a:	f7ff fc65 	bl	8002058 <debug_print_msg>

		for(int j = 0;j<8;j++){
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
 8002792:	e00e      	b.n	80027b2 <print_KISS+0xf6>
			sprintf(uartData, " %d ",*(curr_mem-j));
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	425b      	negs	r3, r3
 8002798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800279a:	4413      	add	r3, r2
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	497b      	ldr	r1, [pc, #492]	; (8002990 <print_KISS+0x2d4>)
 80027a2:	4878      	ldr	r0, [pc, #480]	; (8002984 <print_KISS+0x2c8>)
 80027a4:	f004 fff2 	bl	800778c <siprintf>
			debug_print_msg();
 80027a8:	f7ff fc56 	bl	8002058 <debug_print_msg>
		for(int j = 0;j<8;j++){
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	3301      	adds	r3, #1
 80027b0:	623b      	str	r3, [r7, #32]
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	2b07      	cmp	r3, #7
 80027b6:	dded      	ble.n	8002794 <print_KISS+0xd8>
		}
		curr_mem -= 8;
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	3b08      	subs	r3, #8
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80027be:	4a71      	ldr	r2, [pc, #452]	; (8002984 <print_KISS+0x2c8>)
 80027c0:	4b74      	ldr	r3, [pc, #464]	; (8002994 <print_KISS+0x2d8>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 80027c6:	f7ff fc47 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<address_len/8;i++){
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	3301      	adds	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	2b0d      	cmp	r3, #13
 80027d4:	ddd2      	ble.n	800277c <print_KISS+0xc0>
	}

	//Print Control Field
	curr_mem = (local_packet->control);//Subtract 8 to start at the flag start
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80027dc:	3314      	adds	r3, #20
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Control Field   =");
 80027e2:	4a68      	ldr	r2, [pc, #416]	; (8002984 <print_KISS+0x2c8>)
 80027e4:	4b6d      	ldr	r3, [pc, #436]	; (800299c <print_KISS+0x2e0>)
 80027e6:	4615      	mov	r5, r2
 80027e8:	461c      	mov	r4, r3
 80027ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ec:	6028      	str	r0, [r5, #0]
 80027ee:	6069      	str	r1, [r5, #4]
 80027f0:	60aa      	str	r2, [r5, #8]
 80027f2:	60eb      	str	r3, [r5, #12]
 80027f4:	8823      	ldrh	r3, [r4, #0]
 80027f6:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 80027f8:	f7ff fc2e 	bl	8002058 <debug_print_msg>

	for(int i = 0;i<8;i++){
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	e00f      	b.n	8002822 <print_KISS+0x166>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f1c3 0307 	rsb	r3, r3, #7
 8002808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280a:	4413      	add	r3, r2
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	495f      	ldr	r1, [pc, #380]	; (8002990 <print_KISS+0x2d4>)
 8002812:	485c      	ldr	r0, [pc, #368]	; (8002984 <print_KISS+0x2c8>)
 8002814:	f004 ffba 	bl	800778c <siprintf>
		debug_print_msg();
 8002818:	f7ff fc1e 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<8;i++){
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	3301      	adds	r3, #1
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	2b07      	cmp	r3, #7
 8002826:	ddec      	ble.n	8002802 <print_KISS+0x146>
	}
	sprintf(uartData, "\n");
 8002828:	4a56      	ldr	r2, [pc, #344]	; (8002984 <print_KISS+0x2c8>)
 800282a:	4b5a      	ldr	r3, [pc, #360]	; (8002994 <print_KISS+0x2d8>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002830:	f7ff fc12 	bl	8002058 <debug_print_msg>

	//PID
	curr_mem = (local_packet->PID);//Subtract 8 to start at the flag start
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800283a:	3318      	adds	r3, #24
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "PID Field       =");
 8002840:	4a50      	ldr	r2, [pc, #320]	; (8002984 <print_KISS+0x2c8>)
 8002842:	4b57      	ldr	r3, [pc, #348]	; (80029a0 <print_KISS+0x2e4>)
 8002844:	4615      	mov	r5, r2
 8002846:	461c      	mov	r4, r3
 8002848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284a:	6028      	str	r0, [r5, #0]
 800284c:	6069      	str	r1, [r5, #4]
 800284e:	60aa      	str	r2, [r5, #8]
 8002850:	60eb      	str	r3, [r5, #12]
 8002852:	8823      	ldrh	r3, [r4, #0]
 8002854:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 8002856:	f7ff fbff 	bl	8002058 <debug_print_msg>

	for(int i = 0;i<8;i++){
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	e00f      	b.n	8002880 <print_KISS+0x1c4>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002868:	4413      	add	r3, r2
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	4948      	ldr	r1, [pc, #288]	; (8002990 <print_KISS+0x2d4>)
 8002870:	4844      	ldr	r0, [pc, #272]	; (8002984 <print_KISS+0x2c8>)
 8002872:	f004 ff8b 	bl	800778c <siprintf>
		debug_print_msg();
 8002876:	f7ff fbef 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<8;i++){
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	3301      	adds	r3, #1
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b07      	cmp	r3, #7
 8002884:	ddec      	ble.n	8002860 <print_KISS+0x1a4>
	}
	sprintf(uartData, "\n");
 8002886:	4a3f      	ldr	r2, [pc, #252]	; (8002984 <print_KISS+0x2c8>)
 8002888:	4b42      	ldr	r3, [pc, #264]	; (8002994 <print_KISS+0x2d8>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 800288e:	f7ff fbe3 	bl	8002058 <debug_print_msg>

	//Print Info Field
	curr_mem = (local_packet->Info) + local_packet->Info_Len - 1;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8002898:	331c      	adds	r3, #28
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e029      	b.n	8002904 <print_KISS+0x248>
		sprintf(uartData, "Info Field %d    =",i+1)	;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3301      	adds	r3, #1
 80028b4:	461a      	mov	r2, r3
 80028b6:	493b      	ldr	r1, [pc, #236]	; (80029a4 <print_KISS+0x2e8>)
 80028b8:	4832      	ldr	r0, [pc, #200]	; (8002984 <print_KISS+0x2c8>)
 80028ba:	f004 ff67 	bl	800778c <siprintf>
		debug_print_msg();
 80028be:	f7ff fbcb 	bl	8002058 <debug_print_msg>

		for(int j = 0;j<8;j++){
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	e00e      	b.n	80028e6 <print_KISS+0x22a>
			sprintf(uartData, " %d ",*(curr_mem-j));
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	425b      	negs	r3, r3
 80028cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ce:	4413      	add	r3, r2
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	492e      	ldr	r1, [pc, #184]	; (8002990 <print_KISS+0x2d4>)
 80028d6:	482b      	ldr	r0, [pc, #172]	; (8002984 <print_KISS+0x2c8>)
 80028d8:	f004 ff58 	bl	800778c <siprintf>
			debug_print_msg();
 80028dc:	f7ff fbbc 	bl	8002058 <debug_print_msg>
		for(int j = 0;j<8;j++){
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	3301      	adds	r3, #1
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b07      	cmp	r3, #7
 80028ea:	dded      	ble.n	80028c8 <print_KISS+0x20c>
		}
		curr_mem -= 8;
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	3b08      	subs	r3, #8
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(uartData, "\n");
 80028f2:	4a24      	ldr	r2, [pc, #144]	; (8002984 <print_KISS+0x2c8>)
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <print_KISS+0x2d8>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	8013      	strh	r3, [r2, #0]
		debug_print_msg();
 80028fa:	f7ff fbad 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<(local_packet->Info_Len/8);i++){
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	3301      	adds	r3, #1
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	da00      	bge.n	8002912 <print_KISS+0x256>
 8002910:	3307      	adds	r3, #7
 8002912:	10db      	asrs	r3, r3, #3
 8002914:	461a      	mov	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	4293      	cmp	r3, r2
 800291a:	dbc9      	blt.n	80028b0 <print_KISS+0x1f4>
	}

	//Print Stop Flag
	curr_mem = local_packet->KISS_PACKET;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f603 235f 	addw	r3, r3, #2655	; 0xa5f
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(uartData, "Stop flag       =");
 8002924:	4a17      	ldr	r2, [pc, #92]	; (8002984 <print_KISS+0x2c8>)
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <print_KISS+0x2ec>)
 8002928:	4615      	mov	r5, r2
 800292a:	461c      	mov	r4, r3
 800292c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292e:	6028      	str	r0, [r5, #0]
 8002930:	6069      	str	r1, [r5, #4]
 8002932:	60aa      	str	r2, [r5, #8]
 8002934:	60eb      	str	r3, [r5, #12]
 8002936:	8823      	ldrh	r3, [r4, #0]
 8002938:	822b      	strh	r3, [r5, #16]
	debug_print_msg();
 800293a:	f7ff fb8d 	bl	8002058 <debug_print_msg>

	for(int i = 0;i<8;i++){
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	e00f      	b.n	8002964 <print_KISS+0x2a8>
		sprintf(uartData, " %d ",*(curr_mem+8-i-1));
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f1c3 0307 	rsb	r3, r3, #7
 800294a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	490f      	ldr	r1, [pc, #60]	; (8002990 <print_KISS+0x2d4>)
 8002954:	480b      	ldr	r0, [pc, #44]	; (8002984 <print_KISS+0x2c8>)
 8002956:	f004 ff19 	bl	800778c <siprintf>
		debug_print_msg();
 800295a:	f7ff fb7d 	bl	8002058 <debug_print_msg>
	for(int i = 0;i<8;i++){
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3301      	adds	r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b07      	cmp	r3, #7
 8002968:	ddec      	ble.n	8002944 <print_KISS+0x288>
	}
	sprintf(uartData, "\n");
 800296a:	4a06      	ldr	r2, [pc, #24]	; (8002984 <print_KISS+0x2c8>)
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <print_KISS+0x2d8>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	8013      	strh	r3, [r2, #0]
	debug_print_msg();
 8002972:	f7ff fb71 	bl	8002058 <debug_print_msg>

}
 8002976:	bf00      	nop
 8002978:	3734      	adds	r7, #52	; 0x34
 800297a:	46bd      	mov	sp, r7
 800297c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800297e:	bf00      	nop
 8002980:	200000e8 	.word	0x200000e8
 8002984:	20001cec 	.word	0x20001cec
 8002988:	080094b8 	.word	0x080094b8
 800298c:	080094f0 	.word	0x080094f0
 8002990:	080093ec 	.word	0x080093ec
 8002994:	080093f4 	.word	0x080093f4
 8002998:	080093d8 	.word	0x080093d8
 800299c:	080093f8 	.word	0x080093f8
 80029a0:	0800940c 	.word	0x0800940c
 80029a4:	08009420 	.word	0x08009420
 80029a8:	08009504 	.word	0x08009504

080029ac <Tim2_OC_Callback>:
int byteArray[8];
bool got_flag_start = false;
bool got_flag_end = false;

//Timer 2 Output Compare Callback
void Tim2_OC_Callback(){
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
	static int save_cnt;
	static int flag_cnt;
	bool isFlag = false;
 80029b2:	2300      	movs	r3, #0
 80029b4:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(GPIOA,D1_Pin,clk_sync);
 80029b6:	4b76      	ldr	r3, [pc, #472]	; (8002b90 <Tim2_OC_Callback+0x1e4>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029c0:	4874      	ldr	r0, [pc, #464]	; (8002b94 <Tim2_OC_Callback+0x1e8>)
 80029c2:	f001 ff53 	bl	800486c <HAL_GPIO_WritePin>

	freq_pin_state_last = hold_state;
 80029c6:	4b74      	ldr	r3, [pc, #464]	; (8002b98 <Tim2_OC_Callback+0x1ec>)
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	4b74      	ldr	r3, [pc, #464]	; (8002b9c <Tim2_OC_Callback+0x1f0>)
 80029cc:	701a      	strb	r2, [r3, #0]

	//Check if this is valid data
	if(clk_sync){
 80029ce:	4b70      	ldr	r3, [pc, #448]	; (8002b90 <Tim2_OC_Callback+0x1e4>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80bd 	beq.w	8002b52 <Tim2_OC_Callback+0x1a6>
		NRZI = (freq_pin_state_curr==freq_pin_state_last) ? 1 : 0;
 80029d8:	4b71      	ldr	r3, [pc, #452]	; (8002ba0 <Tim2_OC_Callback+0x1f4>)
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <Tim2_OC_Callback+0x1f0>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4b6e      	ldr	r3, [pc, #440]	; (8002ba4 <Tim2_OC_Callback+0x1f8>)
 80029ec:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOA,D0_Pin,NRZI);
 80029ee:	4b6d      	ldr	r3, [pc, #436]	; (8002ba4 <Tim2_OC_Callback+0x1f8>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f8:	4866      	ldr	r0, [pc, #408]	; (8002b94 <Tim2_OC_Callback+0x1e8>)
 80029fa:	f001 ff37 	bl	800486c <HAL_GPIO_WritePin>

		//Shift byte array for next comparison
//		memmove(&byteArray[1],&byteArray[0],7*sizeof(int));
		for(int i = 7;i>0;i--){
 80029fe:	2307      	movs	r3, #7
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	e00b      	b.n	8002a1c <Tim2_OC_Callback+0x70>
			byteArray[i] = byteArray[i-1];
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	4a67      	ldr	r2, [pc, #412]	; (8002ba8 <Tim2_OC_Callback+0x1fc>)
 8002a0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a0e:	4966      	ldr	r1, [pc, #408]	; (8002ba8 <Tim2_OC_Callback+0x1fc>)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 7;i>0;i--){
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	dcf0      	bgt.n	8002a04 <Tim2_OC_Callback+0x58>
		}

		byteArray[0] = NRZI;
 8002a22:	4b60      	ldr	r3, [pc, #384]	; (8002ba4 <Tim2_OC_Callback+0x1f8>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b5f      	ldr	r3, [pc, #380]	; (8002ba8 <Tim2_OC_Callback+0x1fc>)
 8002a2a:	601a      	str	r2, [r3, #0]
		//11111100
		//01111110


		//Check if this is the flag
		for (int i = 0; i < 8; i++) {
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e014      	b.n	8002a5c <Tim2_OC_Callback+0xb0>
			if(byteArray[i] != AX25TBYTE[i]){
 8002a32:	4a5d      	ldr	r2, [pc, #372]	; (8002ba8 <Tim2_OC_Callback+0x1fc>)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3a:	495c      	ldr	r1, [pc, #368]	; (8002bac <Tim2_OC_Callback+0x200>)
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	440a      	add	r2, r1
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d002      	beq.n	8002a4c <Tim2_OC_Callback+0xa0>
				isFlag = false;
 8002a46:	2300      	movs	r3, #0
 8002a48:	75fb      	strb	r3, [r7, #23]
				break;
 8002a4a:	e00a      	b.n	8002a62 <Tim2_OC_Callback+0xb6>
			}
			//Got to end of byte array
			if(i==7){
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b07      	cmp	r3, #7
 8002a50:	d101      	bne.n	8002a56 <Tim2_OC_Callback+0xaa>
				isFlag = true;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < 8; i++) {
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b07      	cmp	r3, #7
 8002a60:	dde7      	ble.n	8002a32 <Tim2_OC_Callback+0x86>
			}
		}
		//If this is not a flag, copy the values into the buffer pointer
		if(isFlag){
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d023      	beq.n	8002ab0 <Tim2_OC_Callback+0x104>
			flag_cnt++;
 8002a68:	4b51      	ldr	r3, [pc, #324]	; (8002bb0 <Tim2_OC_Callback+0x204>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	4a50      	ldr	r2, [pc, #320]	; (8002bb0 <Tim2_OC_Callback+0x204>)
 8002a70:	6013      	str	r3, [r2, #0]

			//If we have a start flag, this is an end flag
			if(got_flag_start){
 8002a72:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <Tim2_OC_Callback+0x208>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d006      	beq.n	8002a88 <Tim2_OC_Callback+0xdc>
				got_flag_start = false;
 8002a7a:	4b4e      	ldr	r3, [pc, #312]	; (8002bb4 <Tim2_OC_Callback+0x208>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
				got_flag_end = true;
 8002a80:	4b4d      	ldr	r3, [pc, #308]	; (8002bb8 <Tim2_OC_Callback+0x20c>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e010      	b.n	8002aaa <Tim2_OC_Callback+0xfe>
			}

			//Not sure how many appending flags????????
			else if(flag_cnt>=FLAG_END_COUNT){
 8002a88:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <Tim2_OC_Callback+0x204>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	dd0c      	ble.n	8002aaa <Tim2_OC_Callback+0xfe>
				//If no start flag has occurred
				if(!got_flag_start){
 8002a90:	4b48      	ldr	r3, [pc, #288]	; (8002bb4 <Tim2_OC_Callback+0x208>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	f083 0301 	eor.w	r3, r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <Tim2_OC_Callback+0xf8>
					got_flag_start = true;
 8002a9e:	4b45      	ldr	r3, [pc, #276]	; (8002bb4 <Tim2_OC_Callback+0x208>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
				}

				//Reset flag count
				flag_cnt = 0;
 8002aa4:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <Tim2_OC_Callback+0x204>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
			}

			//Reset flag var
			isFlag = false;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]
 8002aae:	e011      	b.n	8002ad4 <Tim2_OC_Callback+0x128>
		}

		else if(got_flag_start){
 8002ab0:	4b40      	ldr	r3, [pc, #256]	; (8002bb4 <Tim2_OC_Callback+0x208>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00d      	beq.n	8002ad4 <Tim2_OC_Callback+0x128>
			HAL_GPIO_TogglePin(GPIOB,D2_Pin);
 8002ab8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002abc:	483f      	ldr	r0, [pc, #252]	; (8002bbc <Tim2_OC_Callback+0x210>)
 8002abe:	f001 feee 	bl	800489e <HAL_GPIO_TogglePin>
			//Load the processed bit into the buffer
			save_cnt = loadBitBuffer(NRZI)+1;
 8002ac2:	4b38      	ldr	r3, [pc, #224]	; (8002ba4 <Tim2_OC_Callback+0x1f8>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fa64 	bl	8001f94 <loadBitBuffer>
 8002acc:	4603      	mov	r3, r0
 8002ace:	3301      	adds	r3, #1
 8002ad0:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <Tim2_OC_Callback+0x214>)
 8002ad2:	6013      	str	r3, [r2, #0]
		}

		//Found ending flag, now need to process bit buffer
		if(got_flag_end){
 8002ad4:	4b38      	ldr	r3, [pc, #224]	; (8002bb8 <Tim2_OC_Callback+0x20c>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d02c      	beq.n	8002b36 <Tim2_OC_Callback+0x18a>
			got_flag_end = false;
 8002adc:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <Tim2_OC_Callback+0x20c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB,D3_Pin);
 8002ae2:	2110      	movs	r1, #16
 8002ae4:	4835      	ldr	r0, [pc, #212]	; (8002bbc <Tim2_OC_Callback+0x210>)
 8002ae6:	f001 feda 	bl	800489e <HAL_GPIO_TogglePin>

			//Buffer will be filled with ending flags, dont want this in ax.25 buffer
			save_cnt -= FLAG_SIZE;
 8002aea:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <Tim2_OC_Callback+0x214>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3b08      	subs	r3, #8
 8002af0:	4a33      	ldr	r2, [pc, #204]	; (8002bc0 <Tim2_OC_Callback+0x214>)
 8002af2:	6013      	str	r3, [r2, #0]
			rxBit_count = save_cnt;
 8002af4:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <Tim2_OC_Callback+0x214>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a32      	ldr	r2, [pc, #200]	; (8002bc4 <Tim2_OC_Callback+0x218>)
 8002afa:	6013      	str	r3, [r2, #0]

			//Set hardware to rx mode
			setHardwareMode(0);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7ff f9f3 	bl	8001ee8 <setHardwareMode>

			//Move data into AX.25 buffer
			memcpy(global_packet.AX25_PACKET,bitBuffer,save_cnt);
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <Tim2_OC_Callback+0x214>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	492f      	ldr	r1, [pc, #188]	; (8002bc8 <Tim2_OC_Callback+0x21c>)
 8002b0a:	4830      	ldr	r0, [pc, #192]	; (8002bcc <Tim2_OC_Callback+0x220>)
 8002b0c:	f004 fe12 	bl	8007734 <memcpy>

			//Remove bit stuffed zeros
			remove_bit_stuffing();
 8002b10:	f7fe fb64 	bl	80011dc <remove_bit_stuffing>

			//Use final value of received bits
			global_packet.byte_cnt = rxBit_count/8;
 8002b14:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <Tim2_OC_Callback+0x218>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da00      	bge.n	8002b1e <Tim2_OC_Callback+0x172>
 8002b1c:	3307      	adds	r3, #7
 8002b1e:	10db      	asrs	r3, r3, #3
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <Tim2_OC_Callback+0x220>)
 8002b24:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002b28:	330c      	adds	r3, #12
 8002b2a:	601a      	str	r2, [r3, #0]

			//Receive data
			receiving_AX25();
 8002b2c:	f7fe fb16 	bl	800115c <receiving_AX25>

			save_cnt = 0;
 8002b30:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <Tim2_OC_Callback+0x214>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
		}

		//Prepare OC for next sample
		uint32_t this_capture = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <Tim2_OC_Callback+0x224>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	60bb      	str	r3, [r7, #8]
		uint32_t next_sampl = this_capture + bit_sample_period;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8002b44:	3335      	adds	r3, #53	; 0x35
 8002b46:	607b      	str	r3, [r7, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,next_sampl); // if we have not received a transition to the input capture module, we want to refresh the output compare module with the last known bit period
 8002b48:	4b21      	ldr	r3, [pc, #132]	; (8002bd0 <Tim2_OC_Callback+0x224>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b50:	e008      	b.n	8002b64 <Tim2_OC_Callback+0x1b8>
//	return;

	//Clock not syncd
	else
	{
		got_flag_start = false;
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <Tim2_OC_Callback+0x208>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
		got_flag_end = false;
 8002b58:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <Tim2_OC_Callback+0x20c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
		flag_cnt = 0;
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <Tim2_OC_Callback+0x204>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
	}

	//Inc number of bits since last clock sync
	captured_bits_count++;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <Tim2_OC_Callback+0x228>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <Tim2_OC_Callback+0x228>)
 8002b6e:	701a      	strb	r2, [r3, #0]
	if(captured_bits_count >= samp_per_bit * no_clk_max_cnt){
 8002b70:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <Tim2_OC_Callback+0x228>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b3f      	cmp	r3, #63	; 0x3f
 8002b76:	d902      	bls.n	8002b7e <Tim2_OC_Callback+0x1d2>
		clk_sync = false;	//Clock is no longer sync
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <Tim2_OC_Callback+0x1e4>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
	}
	hold_state = freq_pin_state_curr;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <Tim2_OC_Callback+0x1f4>)
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <Tim2_OC_Callback+0x1ec>)
 8002b84:	701a      	strb	r2, [r3, #0]

	return;
 8002b86:	bf00      	nop
}
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200000b1 	.word	0x200000b1
 8002b94:	40020000 	.word	0x40020000
 8002b98:	20003488 	.word	0x20003488
 8002b9c:	200000c3 	.word	0x200000c3
 8002ba0:	200000c2 	.word	0x200000c2
 8002ba4:	20003490 	.word	0x20003490
 8002ba8:	20003494 	.word	0x20003494
 8002bac:	20000008 	.word	0x20000008
 8002bb0:	200000cc 	.word	0x200000cc
 8002bb4:	200000c4 	.word	0x200000c4
 8002bb8:	200000c5 	.word	0x200000c5
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	200000d0 	.word	0x200000d0
 8002bc4:	200000a4 	.word	0x200000a4
 8002bc8:	20002a28 	.word	0x20002a28
 8002bcc:	200000e8 	.word	0x200000e8
 8002bd0:	200029a8 	.word	0x200029a8
 8002bd4:	200000b0 	.word	0x200000b0

08002bd8 <Tim3_IT_Callback>:

int TI_count = 0;
void Tim3_IT_Callback() {
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
	TI_count++;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <Tim3_IT_Callback+0x20>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3301      	adds	r3, #1
 8002be2:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <Tim3_IT_Callback+0x20>)
 8002be4:	6013      	str	r3, [r2, #0]
	midbit = false;
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <Tim3_IT_Callback+0x24>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	200000c8 	.word	0x200000c8
 8002bfc:	200000a8 	.word	0x200000a8

08002c00 <Tim5_IC_Callback>:

//Timer 5 Input Capture Callback
void Tim5_IC_Callback(){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
	uint32_t this_capture = 0;		// simply stores either the rising or falling capture, based on which state we are in (avoids duplicate code)
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]

	//Grap pin state for OC timer
	freq_pin_state_curr = signal_edge;
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	; (8002d04 <Tim5_IC_Callback+0x104>)
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <Tim5_IC_Callback+0x108>)
 8002c10:	701a      	strb	r2, [r3, #0]

	//Rising Edge
	if (signal_edge)
 8002c12:	4b3c      	ldr	r3, [pc, #240]	; (8002d04 <Tim5_IC_Callback+0x104>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01f      	beq.n	8002c5a <Tim5_IC_Callback+0x5a>
	{
		rising_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1); //Time-stamp interrupt
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	483b      	ldr	r0, [pc, #236]	; (8002d0c <Tim5_IC_Callback+0x10c>)
 8002c1e:	f003 f905 	bl	8005e2c <HAL_TIM_ReadCapturedValue>
 8002c22:	4602      	mov	r2, r0
 8002c24:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <Tim5_IC_Callback+0x110>)
 8002c26:	601a      	str	r2, [r3, #0]
		signal_edge = FALLING_EDGE;		// look for falling edge on next capture
 8002c28:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <Tim5_IC_Callback+0x104>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
		rise_captured = true;
 8002c2e:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <Tim5_IC_Callback+0x114>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]

		if (rise_captured && fall_captured)
 8002c34:	4b37      	ldr	r3, [pc, #220]	; (8002d14 <Tim5_IC_Callback+0x114>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d02d      	beq.n	8002c98 <Tim5_IC_Callback+0x98>
 8002c3c:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <Tim5_IC_Callback+0x118>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d029      	beq.n	8002c98 <Tim5_IC_Callback+0x98>
		{
			capture_difference = rising_capture - falling_capture;		// calculate difference
 8002c44:	4b32      	ldr	r3, [pc, #200]	; (8002d10 <Tim5_IC_Callback+0x110>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <Tim5_IC_Callback+0x11c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	4a34      	ldr	r2, [pc, #208]	; (8002d20 <Tim5_IC_Callback+0x120>)
 8002c50:	6013      	str	r3, [r2, #0]
			this_capture = rising_capture;		// set current sample to rising edge
 8002c52:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <Tim5_IC_Callback+0x110>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	e01e      	b.n	8002c98 <Tim5_IC_Callback+0x98>
	}

	//Falling edge
	else
	{
		falling_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);		//Time-stamp interrupt
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	482b      	ldr	r0, [pc, #172]	; (8002d0c <Tim5_IC_Callback+0x10c>)
 8002c5e:	f003 f8e5 	bl	8005e2c <HAL_TIM_ReadCapturedValue>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <Tim5_IC_Callback+0x11c>)
 8002c66:	601a      	str	r2, [r3, #0]
		fall_captured = true;
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <Tim5_IC_Callback+0x118>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
		signal_edge = RISING_EDGE;		// look for rising edge on next capture
 8002c6e:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <Tim5_IC_Callback+0x104>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]

		if (rise_captured && fall_captured)
 8002c74:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <Tim5_IC_Callback+0x114>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00d      	beq.n	8002c98 <Tim5_IC_Callback+0x98>
 8002c7c:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <Tim5_IC_Callback+0x118>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <Tim5_IC_Callback+0x98>
		{
			capture_difference = falling_capture - rising_capture;		// calculate difference
 8002c84:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <Tim5_IC_Callback+0x11c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <Tim5_IC_Callback+0x110>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <Tim5_IC_Callback+0x120>)
 8002c90:	6013      	str	r3, [r2, #0]
			this_capture = falling_capture;
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <Tim5_IC_Callback+0x11c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	607b      	str	r3, [r7, #4]
		}
	}

	//Have now captured the transition period
	//Can use this to align sampling clock
	if (rise_captured && fall_captured)
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <Tim5_IC_Callback+0x114>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d02d      	beq.n	8002cfc <Tim5_IC_Callback+0xfc>
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <Tim5_IC_Callback+0x118>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d029      	beq.n	8002cfc <Tim5_IC_Callback+0xfc>
	{
		//Check if the transition was a valid transition period to use
		if(SYMBOL_PERIOD-SYMBOL_MARGIN < capture_difference && capture_difference < SYMBOL_PERIOD+SYMBOL_MARGIN){
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <Tim5_IC_Callback+0x120>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f247 5230 	movw	r2, #30000	; 0x7530
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d923      	bls.n	8002cfc <Tim5_IC_Callback+0xfc>
 8002cb4:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <Tim5_IC_Callback+0x120>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f648 7239 	movw	r2, #36665	; 0x8f39
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d81d      	bhi.n	8002cfc <Tim5_IC_Callback+0xfc>

			//Predict clock
			uint32_t next_sampl;

			//If clk was not sync, start sample one period later
			if(!clk_sync){
 8002cc0:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <Tim5_IC_Callback+0x124>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f083 0301 	eor.w	r3, r3, #1
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <Tim5_IC_Callback+0xde>
				resetBitBuffer();
 8002cce:	f7ff f9a3 	bl	8002018 <resetBitBuffer>
				next_sampl = this_capture + SYMBOL_PERIOD;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8002cd8:	3335      	adds	r3, #53	; 0x35
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	e004      	b.n	8002ce8 <Tim5_IC_Callback+0xe8>
			}
			//If clk was sync, sample at normal interval
			else {
				next_sampl = this_capture + bit_sample_period;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8002ce4:	3335      	adds	r3, #53	; 0x35
 8002ce6:	603b      	str	r3, [r7, #0]
			}
			//Prepare OC timer int
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, next_sampl);
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <Tim5_IC_Callback+0x128>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34
			//Reset roll-over value
			captured_bits_count = 0;
 8002cf0:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <Tim5_IC_Callback+0x12c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]

			//Have now synced with clock
			clk_sync = true;
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <Tim5_IC_Callback+0x124>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000011 	.word	0x20000011
 8002d08:	200000c2 	.word	0x200000c2
 8002d0c:	200028b0 	.word	0x200028b0
 8002d10:	200000b4 	.word	0x200000b4
 8002d14:	200000c0 	.word	0x200000c0
 8002d18:	200000c1 	.word	0x200000c1
 8002d1c:	200000b8 	.word	0x200000b8
 8002d20:	200000bc 	.word	0x200000bc
 8002d24:	200000b1 	.word	0x200000b1
 8002d28:	200029a8 	.word	0x200029a8
 8002d2c:	200000b0 	.word	0x200000b0

08002d30 <init_UART>:

void init_UART(){
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8002d34:	2201      	movs	r2, #1
 8002d36:	4909      	ldr	r1, [pc, #36]	; (8002d5c <init_UART+0x2c>)
 8002d38:	4809      	ldr	r0, [pc, #36]	; (8002d60 <init_UART+0x30>)
 8002d3a:	f003 fe7f 	bl	8006a3c <HAL_UART_Receive_IT>
	UART_packet.flags = 0;
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <init_UART+0x34>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
	UART_packet.got_packet = false;
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <init_UART+0x34>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	735a      	strb	r2, [r3, #13]
	UART_packet.rx_cnt = 0;
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <init_UART+0x34>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
	UART_packet.received_byte_cnt = 0;
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <init_UART+0x34>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	605a      	str	r2, [r3, #4]
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20001460 	.word	0x20001460
 8002d60:	200029e8 	.word	0x200029e8
 8002d64:	20001454 	.word	0x20001454

08002d68 <UART2_Exception_Callback>:
void UART2_Exception_Callback(){
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
	UART_packet.got_packet = false;
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	735a      	strb	r2, [r3, #13]

	//Got a flag
	if(UART_packet.input==0xc0){
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002d74:	7b1b      	ldrb	r3, [r3, #12]
 8002d76:	2bc0      	cmp	r3, #192	; 0xc0
 8002d78:	d104      	bne.n	8002d84 <UART2_Exception_Callback+0x1c>
	  UART_packet.flags++;
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002d82:	6093      	str	r3, [r2, #8]
	}

	//Put byte into HEX buffer
	*(UART_packet.HEX_KISS_PACKET+UART_packet.rx_cnt) = UART_packet.input;
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b18      	ldr	r3, [pc, #96]	; (8002dec <UART2_Exception_Callback+0x84>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	4a16      	ldr	r2, [pc, #88]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002d90:	7b12      	ldrb	r2, [r2, #12]
 8002d92:	701a      	strb	r2, [r3, #0]
	UART_packet.rx_cnt++;
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002d9c:	6013      	str	r3, [r2, #0]

	//Got a complete packet over UART
	if(UART_packet.flags>=2){
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	dd18      	ble.n	8002dd8 <UART2_Exception_Callback+0x70>

		//Get byte cnt
		UART_packet.received_byte_cnt = UART_packet.rx_cnt;
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a0f      	ldr	r2, [pc, #60]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002dac:	6053      	str	r3, [r2, #4]
		global_packet.byte_cnt = UART_packet.received_byte_cnt;
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <UART2_Exception_Callback+0x88>)
 8002db4:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002db8:	330c      	adds	r3, #12
 8002dba:	601a      	str	r2, [r3, #0]

		//Reset uart struct info
		UART_packet.flags = 0;
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
		UART_packet.rx_cnt=0;
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <UART2_Exception_Callback+0x80>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

		//Set hardware to tx mode
		setHardwareMode(1);
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f7ff f88d 	bl	8001ee8 <setHardwareMode>

		//Transmit packet received
		receiving_KISS();
 8002dce:	f7fe fbb5 	bl	800153c <receiving_KISS>

		//Set hardware to rx mode
		setHardwareMode(0);
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7ff f888 	bl	8001ee8 <setHardwareMode>
	}

	//Reset UART interrupt
	HAL_UART_Receive_IT(&huart2, &(UART_packet.input), UART_RX_IT_CNT);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4906      	ldr	r1, [pc, #24]	; (8002df4 <UART2_Exception_Callback+0x8c>)
 8002ddc:	4806      	ldr	r0, [pc, #24]	; (8002df8 <UART2_Exception_Callback+0x90>)
 8002dde:	f003 fe2d 	bl	8006a3c <HAL_UART_Receive_IT>

	return;
 8002de2:	bf00      	nop
}
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20001454 	.word	0x20001454
 8002dec:	20001462 	.word	0x20001462
 8002df0:	200000e8 	.word	0x200000e8
 8002df4:	20001460 	.word	0x20001460
 8002df8:	200029e8 	.word	0x200029e8

08002dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e00:	f000 fdf4 	bl	80039ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e04:	f000 f814 	bl	8002e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e08:	f000 fa2e 	bl	8003268 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e0c:	f000 fa0c 	bl	8003228 <MX_DMA_Init>
  MX_DAC_Init();
 8002e10:	f000 f87a 	bl	8002f08 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8002e14:	f000 f9d6 	bl	80031c4 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8002e18:	f000 f964 	bl	80030e4 <MX_TIM5_Init>
  MX_TIM2_Init();
 8002e1c:	f000 f89e 	bl	8002f5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e20:	f000 f912 	bl	8003048 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	uart_gpio_init();
 8002e24:	f000 fb22 	bl	800346c <uart_gpio_init>
	initProgram(0);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7ff f851 	bl	8001ed0 <initProgram>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002e2e:	e7fe      	b.n	8002e2e <main+0x32>

08002e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b094      	sub	sp, #80	; 0x50
 8002e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e36:	f107 031c 	add.w	r3, r7, #28
 8002e3a:	2234      	movs	r2, #52	; 0x34
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f004 fc9c 	bl	800777c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e44:	f107 0308 	add.w	r3, r7, #8
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e54:	2300      	movs	r3, #0
 8002e56:	607b      	str	r3, [r7, #4]
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <SystemClock_Config+0xd0>)
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <SystemClock_Config+0xd0>)
 8002e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e62:	6413      	str	r3, [r2, #64]	; 0x40
 8002e64:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <SystemClock_Config+0xd0>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e70:	2300      	movs	r3, #0
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <SystemClock_Config+0xd4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e7c:	4a21      	ldr	r2, [pc, #132]	; (8002f04 <SystemClock_Config+0xd4>)
 8002e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <SystemClock_Config+0xd4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e90:	2302      	movs	r3, #2
 8002e92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e94:	2301      	movs	r3, #1
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e98:	2310      	movs	r3, #16
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002ea8:	2350      	movs	r3, #80	; 0x50
 8002eaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002eac:	2302      	movs	r3, #2
 8002eae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f001 ffe7 	bl	8004e90 <HAL_RCC_OscConfig>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002ec8:	f000 faf8 	bl	80034bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ecc:	230f      	movs	r3, #15
 8002ece:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002edc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ee2:	f107 0308 	add.w	r3, r7, #8
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 fd17 	bl	800491c <HAL_RCC_ClockConfig>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002ef4:	f000 fae2 	bl	80034bc <Error_Handler>
  }
}
 8002ef8:	bf00      	nop
 8002efa:	3750      	adds	r7, #80	; 0x50
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40007000 	.word	0x40007000

08002f08 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002f0e:	463b      	mov	r3, r7
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <MX_DAC_Init+0x4c>)
 8002f18:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <MX_DAC_Init+0x50>)
 8002f1a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002f1c:	480d      	ldr	r0, [pc, #52]	; (8002f54 <MX_DAC_Init+0x4c>)
 8002f1e:	f000 fee8 	bl	8003cf2 <HAL_DAC_Init>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002f28:	f000 fac8 	bl	80034bc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002f2c:	2324      	movs	r3, #36	; 0x24
 8002f2e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002f34:	463b      	mov	r3, r7
 8002f36:	2200      	movs	r2, #0
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4806      	ldr	r0, [pc, #24]	; (8002f54 <MX_DAC_Init+0x4c>)
 8002f3c:	f000 ff3c 	bl	8003db8 <HAL_DAC_ConfigChannel>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002f46:	f000 fab9 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20002994 	.word	0x20002994
 8002f58:	40007400 	.word	0x40007400

08002f5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08e      	sub	sp, #56	; 0x38
 8002f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f70:	f107 0320 	add.w	r3, r7, #32
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
 8002f88:	615a      	str	r2, [r3, #20]
 8002f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <MX_TIM2_Init+0xe8>)
 8002f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <MX_TIM2_Init+0xe8>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9a:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <MX_TIM2_Init+0xe8>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002fa0:	4b28      	ldr	r3, [pc, #160]	; (8003044 <MX_TIM2_Init+0xe8>)
 8002fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa8:	4b26      	ldr	r3, [pc, #152]	; (8003044 <MX_TIM2_Init+0xe8>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fae:	4b25      	ldr	r3, [pc, #148]	; (8003044 <MX_TIM2_Init+0xe8>)
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fb4:	4823      	ldr	r0, [pc, #140]	; (8003044 <MX_TIM2_Init+0xe8>)
 8002fb6:	f002 f9c5 	bl	8005344 <HAL_TIM_Base_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002fc0:	f000 fa7c 	bl	80034bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fce:	4619      	mov	r1, r3
 8002fd0:	481c      	ldr	r0, [pc, #112]	; (8003044 <MX_TIM2_Init+0xe8>)
 8002fd2:	f002 fe73 	bl	8005cbc <HAL_TIM_ConfigClockSource>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002fdc:	f000 fa6e 	bl	80034bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002fe0:	4818      	ldr	r0, [pc, #96]	; (8003044 <MX_TIM2_Init+0xe8>)
 8002fe2:	f002 fa05 	bl	80053f0 <HAL_TIM_OC_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002fec:	f000 fa66 	bl	80034bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ff8:	f107 0320 	add.w	r3, r7, #32
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4811      	ldr	r0, [pc, #68]	; (8003044 <MX_TIM2_Init+0xe8>)
 8003000:	f003 fba6 	bl	8006750 <HAL_TIMEx_MasterConfigSynchronization>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800300a:	f000 fa57 	bl	80034bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	2200      	movs	r2, #0
 8003022:	4619      	mov	r1, r3
 8003024:	4807      	ldr	r0, [pc, #28]	; (8003044 <MX_TIM2_Init+0xe8>)
 8003026:	f002 fd4d 	bl	8005ac4 <HAL_TIM_OC_ConfigChannel>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003030:	f000 fa44 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003034:	4803      	ldr	r0, [pc, #12]	; (8003044 <MX_TIM2_Init+0xe8>)
 8003036:	f000 fb73 	bl	8003720 <HAL_TIM_MspPostInit>

}
 800303a:	bf00      	nop
 800303c:	3738      	adds	r7, #56	; 0x38
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	200029a8 	.word	0x200029a8

08003048 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800304e:	f107 0308 	add.w	r3, r7, #8
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800305c:	463b      	mov	r3, r7
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <MX_TIM3_Init+0x94>)
 8003066:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <MX_TIM3_Init+0x98>)
 8003068:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 800306a:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <MX_TIM3_Init+0x94>)
 800306c:	224f      	movs	r2, #79	; 0x4f
 800306e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003070:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <MX_TIM3_Init+0x94>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 828;
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <MX_TIM3_Init+0x94>)
 8003078:	f44f 724f 	mov.w	r2, #828	; 0x33c
 800307c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800307e:	4b17      	ldr	r3, [pc, #92]	; (80030dc <MX_TIM3_Init+0x94>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003084:	4b15      	ldr	r3, [pc, #84]	; (80030dc <MX_TIM3_Init+0x94>)
 8003086:	2280      	movs	r2, #128	; 0x80
 8003088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800308a:	4814      	ldr	r0, [pc, #80]	; (80030dc <MX_TIM3_Init+0x94>)
 800308c:	f002 f95a 	bl	8005344 <HAL_TIM_Base_Init>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003096:	f000 fa11 	bl	80034bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800309a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800309e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030a0:	f107 0308 	add.w	r3, r7, #8
 80030a4:	4619      	mov	r1, r3
 80030a6:	480d      	ldr	r0, [pc, #52]	; (80030dc <MX_TIM3_Init+0x94>)
 80030a8:	f002 fe08 	bl	8005cbc <HAL_TIM_ConfigClockSource>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80030b2:	f000 fa03 	bl	80034bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030be:	463b      	mov	r3, r7
 80030c0:	4619      	mov	r1, r3
 80030c2:	4806      	ldr	r0, [pc, #24]	; (80030dc <MX_TIM3_Init+0x94>)
 80030c4:	f003 fb44 	bl	8006750 <HAL_TIMEx_MasterConfigSynchronization>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80030ce:	f000 f9f5 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200028f0 	.word	0x200028f0
 80030e0:	40000400 	.word	0x40000400

080030e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	; 0x28
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ea:	f107 0318 	add.w	r3, r7, #24
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f8:	f107 0310 	add.w	r3, r7, #16
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003102:	463b      	mov	r3, r7
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <MX_TIM5_Init+0xd8>)
 8003110:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <MX_TIM5_Init+0xdc>)
 8003112:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2-1;
 8003114:	4b29      	ldr	r3, [pc, #164]	; (80031bc <MX_TIM5_Init+0xd8>)
 8003116:	2201      	movs	r2, #1
 8003118:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311a:	4b28      	ldr	r3, [pc, #160]	; (80031bc <MX_TIM5_Init+0xd8>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003120:	4b26      	ldr	r3, [pc, #152]	; (80031bc <MX_TIM5_Init+0xd8>)
 8003122:	f04f 32ff 	mov.w	r2, #4294967295
 8003126:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003128:	4b24      	ldr	r3, [pc, #144]	; (80031bc <MX_TIM5_Init+0xd8>)
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800312e:	4b23      	ldr	r3, [pc, #140]	; (80031bc <MX_TIM5_Init+0xd8>)
 8003130:	2280      	movs	r2, #128	; 0x80
 8003132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003134:	4821      	ldr	r0, [pc, #132]	; (80031bc <MX_TIM5_Init+0xd8>)
 8003136:	f002 f905 	bl	8005344 <HAL_TIM_Base_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8003140:	f000 f9bc 	bl	80034bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003148:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800314a:	f107 0318 	add.w	r3, r7, #24
 800314e:	4619      	mov	r1, r3
 8003150:	481a      	ldr	r0, [pc, #104]	; (80031bc <MX_TIM5_Init+0xd8>)
 8003152:	f002 fdb3 	bl	8005cbc <HAL_TIM_ConfigClockSource>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800315c:	f000 f9ae 	bl	80034bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8003160:	4816      	ldr	r0, [pc, #88]	; (80031bc <MX_TIM5_Init+0xd8>)
 8003162:	f002 fa99 	bl	8005698 <HAL_TIM_IC_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800316c:	f000 f9a6 	bl	80034bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003178:	f107 0310 	add.w	r3, r7, #16
 800317c:	4619      	mov	r1, r3
 800317e:	480f      	ldr	r0, [pc, #60]	; (80031bc <MX_TIM5_Init+0xd8>)
 8003180:	f003 fae6 	bl	8006750 <HAL_TIMEx_MasterConfigSynchronization>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 800318a:	f000 f997 	bl	80034bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800318e:	230a      	movs	r3, #10
 8003190:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003192:	2301      	movs	r3, #1
 8003194:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800319e:	463b      	mov	r3, r7
 80031a0:	2200      	movs	r2, #0
 80031a2:	4619      	mov	r1, r3
 80031a4:	4805      	ldr	r0, [pc, #20]	; (80031bc <MX_TIM5_Init+0xd8>)
 80031a6:	f002 fced 	bl	8005b84 <HAL_TIM_IC_ConfigChannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 80031b0:	f000 f984 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80031b4:	bf00      	nop
 80031b6:	3728      	adds	r7, #40	; 0x28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	200028b0 	.word	0x200028b0
 80031c0:	40000c00 	.word	0x40000c00

080031c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031c8:	4b15      	ldr	r3, [pc, #84]	; (8003220 <MX_USART2_UART_Init+0x5c>)
 80031ca:	4a16      	ldr	r2, [pc, #88]	; (8003224 <MX_USART2_UART_Init+0x60>)
 80031cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <MX_USART2_UART_Init+0x5c>)
 80031d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <MX_USART2_UART_Init+0x5c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <MX_USART2_UART_Init+0x5c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <MX_USART2_UART_Init+0x5c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031e8:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <MX_USART2_UART_Init+0x5c>)
 80031ea:	220c      	movs	r2, #12
 80031ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <MX_USART2_UART_Init+0x5c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <MX_USART2_UART_Init+0x5c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031fa:	4809      	ldr	r0, [pc, #36]	; (8003220 <MX_USART2_UART_Init+0x5c>)
 80031fc:	f003 fb38 	bl	8006870 <HAL_UART_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003206:	f000 f959 	bl	80034bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800320a:	2200      	movs	r2, #0
 800320c:	2100      	movs	r1, #0
 800320e:	2026      	movs	r0, #38	; 0x26
 8003210:	f000 fd39 	bl	8003c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003214:	2026      	movs	r0, #38	; 0x26
 8003216:	f000 fd52 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200029e8 	.word	0x200029e8
 8003224:	40004400 	.word	0x40004400

08003228 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <MX_DMA_Init+0x3c>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <MX_DMA_Init+0x3c>)
 8003238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <MX_DMA_Init+0x3c>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	2010      	movs	r0, #16
 8003250:	f000 fd19 	bl	8003c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003254:	2010      	movs	r0, #16
 8003256:	f000 fd32 	bl	8003cbe <HAL_NVIC_EnableIRQ>

}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	; 0x28
 800326c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326e:	f107 0314 	add.w	r3, r7, #20
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	60da      	str	r2, [r3, #12]
 800327c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	4b46      	ldr	r3, [pc, #280]	; (800339c <MX_GPIO_Init+0x134>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a45      	ldr	r2, [pc, #276]	; (800339c <MX_GPIO_Init+0x134>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b43      	ldr	r3, [pc, #268]	; (800339c <MX_GPIO_Init+0x134>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <MX_GPIO_Init+0x134>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a3e      	ldr	r2, [pc, #248]	; (800339c <MX_GPIO_Init+0x134>)
 80032a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
 80032aa:	4b3c      	ldr	r3, [pc, #240]	; (800339c <MX_GPIO_Init+0x134>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <MX_GPIO_Init+0x134>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4a37      	ldr	r2, [pc, #220]	; (800339c <MX_GPIO_Init+0x134>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6313      	str	r3, [r2, #48]	; 0x30
 80032c6:	4b35      	ldr	r3, [pc, #212]	; (800339c <MX_GPIO_Init+0x134>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	4b31      	ldr	r3, [pc, #196]	; (800339c <MX_GPIO_Init+0x134>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	4a30      	ldr	r2, [pc, #192]	; (800339c <MX_GPIO_Init+0x134>)
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4b2e      	ldr	r3, [pc, #184]	; (800339c <MX_GPIO_Init+0x134>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D1_Pin|D0_Pin, GPIO_PIN_RESET);
 80032ee:	2200      	movs	r2, #0
 80032f0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80032f4:	482a      	ldr	r0, [pc, #168]	; (80033a0 <MX_GPIO_Init+0x138>)
 80032f6:	f001 fab9 	bl	800486c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTT_GPIO_Port, PTT_Pin, GPIO_PIN_RESET);
 80032fa:	2200      	movs	r2, #0
 80032fc:	2110      	movs	r1, #16
 80032fe:	4829      	ldr	r0, [pc, #164]	; (80033a4 <MX_GPIO_Init+0x13c>)
 8003300:	f001 fab4 	bl	800486c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D2_Pin|D3_Pin|D4_Pin, GPIO_PIN_RESET);
 8003304:	2200      	movs	r2, #0
 8003306:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800330a:	4827      	ldr	r0, [pc, #156]	; (80033a8 <MX_GPIO_Init+0x140>)
 800330c:	f001 faae 	bl	800486c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003316:	4b25      	ldr	r3, [pc, #148]	; (80033ac <MX_GPIO_Init+0x144>)
 8003318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	4619      	mov	r1, r3
 8003324:	481f      	ldr	r0, [pc, #124]	; (80033a4 <MX_GPIO_Init+0x13c>)
 8003326:	f001 f90f 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D1_Pin D0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D1_Pin|D0_Pin;
 800332a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800332e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003330:	2301      	movs	r3, #1
 8003332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003338:	2300      	movs	r3, #0
 800333a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	4619      	mov	r1, r3
 8003342:	4817      	ldr	r0, [pc, #92]	; (80033a0 <MX_GPIO_Init+0x138>)
 8003344:	f001 f900 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTT_Pin */
  GPIO_InitStruct.Pin = PTT_Pin;
 8003348:	2310      	movs	r3, #16
 800334a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800334c:	2301      	movs	r3, #1
 800334e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PTT_GPIO_Port, &GPIO_InitStruct);
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	4619      	mov	r1, r3
 800335e:	4811      	ldr	r0, [pc, #68]	; (80033a4 <MX_GPIO_Init+0x13c>)
 8003360:	f001 f8f2 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin D4_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D4_Pin;
 8003364:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8003368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336a:	2301      	movs	r3, #1
 800336c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4619      	mov	r1, r3
 800337c:	480a      	ldr	r0, [pc, #40]	; (80033a8 <MX_GPIO_Init+0x140>)
 800337e:	f001 f8e3 	bl	8004548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	2100      	movs	r1, #0
 8003386:	2028      	movs	r0, #40	; 0x28
 8003388:	f000 fc7d 	bl	8003c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800338c:	2028      	movs	r0, #40	; 0x28
 800338e:	f000 fc96 	bl	8003cbe <HAL_NVIC_EnableIRQ>

}
 8003392:	bf00      	nop
 8003394:	3728      	adds	r7, #40	; 0x28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40020800 	.word	0x40020800
 80033a8:	40020400 	.word	0x40020400
 80033ac:	10210000 	.word	0x10210000

080033b0 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */

OC_count = 0;
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d10b      	bne.n	80033da <HAL_TIM_OC_DelayElapsedCallback+0x2a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	7f1b      	ldrb	r3, [r3, #28]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d107      	bne.n	80033da <HAL_TIM_OC_DelayElapsedCallback+0x2a>
	{
		OC_count++;
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 80033d2:	6013      	str	r3, [r2, #0]
		Tim2_OC_Callback();
 80033d4:	f7ff faea 	bl	80029ac <Tim2_OC_Callback>
	}
	return;
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
}
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200000d4 	.word	0x200000d4

080033e8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a05      	ldr	r2, [pc, #20]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d102      	bne.n	80033fe <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3_IT_Callback();
 80033f8:	f7ff fbee 	bl	8002bd8 <Tim3_IT_Callback>
	else
		__NOP();

	return;
 80033fc:	e001      	b.n	8003402 <HAL_TIM_PeriodElapsedCallback+0x1a>
		__NOP();
 80033fe:	bf00      	nop
	return;
 8003400:	bf00      	nop
}
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	200028f0 	.word	0x200028f0

0800340c <HAL_TIM_IC_CaptureCallback>:

int IC_count =0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	//Make sure this is the right timer and channel
	if (htim->Instance == TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a09      	ldr	r2, [pc, #36]	; (8003440 <HAL_TIM_IC_CaptureCallback+0x34>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10b      	bne.n	8003436 <HAL_TIM_IC_CaptureCallback+0x2a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	7f1b      	ldrb	r3, [r3, #28]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d107      	bne.n	8003436 <HAL_TIM_IC_CaptureCallback+0x2a>
	{
		IC_count++;
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <HAL_TIM_IC_CaptureCallback+0x38>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3301      	adds	r3, #1
 800342c:	4a05      	ldr	r2, [pc, #20]	; (8003444 <HAL_TIM_IC_CaptureCallback+0x38>)
 800342e:	6013      	str	r3, [r2, #0]
		Tim5_IC_Callback();
 8003430:	f7ff fbe6 	bl	8002c00 <Tim5_IC_Callback>
	}

	return;
 8003434:	bf00      	nop
 8003436:	bf00      	nop
}
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40000c00 	.word	0x40000c00
 8003444:	200000d8 	.word	0x200000d8

08003448 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a04      	ldr	r2, [pc, #16]	; (8003468 <HAL_UART_RxCpltCallback+0x20>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_UART_RxCpltCallback+0x16>
  {
	  UART2_Exception_Callback();
 800345a:	f7ff fc85 	bl	8002d68 <UART2_Exception_Callback>
  }
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40004400 	.word	0x40004400

0800346c <uart_gpio_init>:

void uart_gpio_init()
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <uart_gpio_init+0x48>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	4a0e      	ldr	r2, [pc, #56]	; (80034b4 <uart_gpio_init+0x48>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6313      	str	r3, [r2, #48]	; 0x30
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <uart_gpio_init+0x48>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800348e:	230c      	movs	r3, #12
 8003490:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003496:	2301      	movs	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800349e:	2307      	movs	r3, #7
 80034a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a2:	1d3b      	adds	r3, r7, #4
 80034a4:	4619      	mov	r1, r3
 80034a6:	4804      	ldr	r0, [pc, #16]	; (80034b8 <uart_gpio_init+0x4c>)
 80034a8:	f001 f84e 	bl	8004548 <HAL_GPIO_Init>
}
 80034ac:	bf00      	nop
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40020000 	.word	0x40020000

080034bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_MspInit+0x4c>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	4a0f      	ldr	r2, [pc, #60]	; (8003518 <HAL_MspInit+0x4c>)
 80034dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e0:	6453      	str	r3, [r2, #68]	; 0x44
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <HAL_MspInit+0x4c>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_MspInit+0x4c>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a08      	ldr	r2, [pc, #32]	; (8003518 <HAL_MspInit+0x4c>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_MspInit+0x4c>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800350a:	2007      	movs	r0, #7
 800350c:	f000 fbb0 	bl	8003c70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40023800 	.word	0x40023800

0800351c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2f      	ldr	r2, [pc, #188]	; (80035f8 <HAL_DAC_MspInit+0xdc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d158      	bne.n	80035f0 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <HAL_DAC_MspInit+0xe0>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a2d      	ldr	r2, [pc, #180]	; (80035fc <HAL_DAC_MspInit+0xe0>)
 8003548:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
 800354e:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_DAC_MspInit+0xe0>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <HAL_DAC_MspInit+0xe0>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a26      	ldr	r2, [pc, #152]	; (80035fc <HAL_DAC_MspInit+0xe0>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b24      	ldr	r3, [pc, #144]	; (80035fc <HAL_DAC_MspInit+0xe0>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003576:	2310      	movs	r3, #16
 8003578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800357a:	2303      	movs	r3, #3
 800357c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	4619      	mov	r1, r3
 8003588:	481d      	ldr	r0, [pc, #116]	; (8003600 <HAL_DAC_MspInit+0xe4>)
 800358a:	f000 ffdd 	bl	8004548 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 8003590:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <HAL_DAC_MspInit+0xec>)
 8003592:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 8003596:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800359a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800359c:	4b19      	ldr	r3, [pc, #100]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 800359e:	2240      	movs	r2, #64	; 0x40
 80035a0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 80035aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ae:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 80035b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035b6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 80035ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035be:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 80035c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035c6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80035c8:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80035d4:	480b      	ldr	r0, [pc, #44]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 80035d6:	f000 fc3d 	bl	8003e54 <HAL_DMA_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80035e0:	f7ff ff6c 	bl	80034bc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a07      	ldr	r2, [pc, #28]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	4a06      	ldr	r2, [pc, #24]	; (8003604 <HAL_DAC_MspInit+0xe8>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80035f0:	bf00      	nop
 80035f2:	3728      	adds	r7, #40	; 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40007400 	.word	0x40007400
 80035fc:	40023800 	.word	0x40023800
 8003600:	40020000 	.word	0x40020000
 8003604:	20002930 	.word	0x20002930
 8003608:	40026088 	.word	0x40026088

0800360c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	; 0x30
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003614:	f107 031c 	add.w	r3, r7, #28
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362c:	d116      	bne.n	800365c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <HAL_TIM_Base_MspInit+0x104>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a36      	ldr	r2, [pc, #216]	; (8003710 <HAL_TIM_Base_MspInit+0x104>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b34      	ldr	r3, [pc, #208]	; (8003710 <HAL_TIM_Base_MspInit+0x104>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	2100      	movs	r1, #0
 800364e:	201c      	movs	r0, #28
 8003650:	f000 fb19 	bl	8003c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003654:	201c      	movs	r0, #28
 8003656:	f000 fb32 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800365a:	e054      	b.n	8003706 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2c      	ldr	r2, [pc, #176]	; (8003714 <HAL_TIM_Base_MspInit+0x108>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d116      	bne.n	8003694 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	4b29      	ldr	r3, [pc, #164]	; (8003710 <HAL_TIM_Base_MspInit+0x104>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	4a28      	ldr	r2, [pc, #160]	; (8003710 <HAL_TIM_Base_MspInit+0x104>)
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	6413      	str	r3, [r2, #64]	; 0x40
 8003676:	4b26      	ldr	r3, [pc, #152]	; (8003710 <HAL_TIM_Base_MspInit+0x104>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003682:	2200      	movs	r2, #0
 8003684:	2100      	movs	r1, #0
 8003686:	201d      	movs	r0, #29
 8003688:	f000 fafd 	bl	8003c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800368c:	201d      	movs	r0, #29
 800368e:	f000 fb16 	bl	8003cbe <HAL_NVIC_EnableIRQ>
}
 8003692:	e038      	b.n	8003706 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <HAL_TIM_Base_MspInit+0x10c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d133      	bne.n	8003706 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_TIM_Base_MspInit+0x104>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <HAL_TIM_Base_MspInit+0x104>)
 80036a8:	f043 0308 	orr.w	r3, r3, #8
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <HAL_TIM_Base_MspInit+0x104>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	4b14      	ldr	r3, [pc, #80]	; (8003710 <HAL_TIM_Base_MspInit+0x104>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	4a13      	ldr	r2, [pc, #76]	; (8003710 <HAL_TIM_Base_MspInit+0x104>)
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_TIM_Base_MspInit+0x104>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036d6:	2301      	movs	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036da:	2302      	movs	r3, #2
 80036dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	2300      	movs	r3, #0
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036e6:	2302      	movs	r3, #2
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ea:	f107 031c 	add.w	r3, r7, #28
 80036ee:	4619      	mov	r1, r3
 80036f0:	480a      	ldr	r0, [pc, #40]	; (800371c <HAL_TIM_Base_MspInit+0x110>)
 80036f2:	f000 ff29 	bl	8004548 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80036f6:	2200      	movs	r2, #0
 80036f8:	2100      	movs	r1, #0
 80036fa:	2032      	movs	r0, #50	; 0x32
 80036fc:	f000 fac3 	bl	8003c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003700:	2032      	movs	r0, #50	; 0x32
 8003702:	f000 fadc 	bl	8003cbe <HAL_NVIC_EnableIRQ>
}
 8003706:	bf00      	nop
 8003708:	3730      	adds	r7, #48	; 0x30
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	40000400 	.word	0x40000400
 8003718:	40000c00 	.word	0x40000c00
 800371c:	40020000 	.word	0x40020000

08003720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	f107 030c 	add.w	r3, r7, #12
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d11e      	bne.n	8003780 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_TIM_MspPostInit+0x68>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	4a0f      	ldr	r2, [pc, #60]	; (8003788 <HAL_TIM_MspPostInit+0x68>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6313      	str	r3, [r2, #48]	; 0x30
 8003752:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <HAL_TIM_MspPostInit+0x68>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800375e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003762:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376c:	2300      	movs	r3, #0
 800376e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003770:	2301      	movs	r3, #1
 8003772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003774:	f107 030c 	add.w	r3, r7, #12
 8003778:	4619      	mov	r1, r3
 800377a:	4804      	ldr	r0, [pc, #16]	; (800378c <HAL_TIM_MspPostInit+0x6c>)
 800377c:	f000 fee4 	bl	8004548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003780:	bf00      	nop
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40023800 	.word	0x40023800
 800378c:	40020000 	.word	0x40020000

08003790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003798:	f107 0314 	add.w	r3, r7, #20
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_UART_MspInit+0x94>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d133      	bne.n	800381a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	4b1c      	ldr	r3, [pc, #112]	; (8003828 <HAL_UART_MspInit+0x98>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_UART_MspInit+0x98>)
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
 80037c2:	4b19      	ldr	r3, [pc, #100]	; (8003828 <HAL_UART_MspInit+0x98>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_UART_MspInit+0x98>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	4a14      	ldr	r2, [pc, #80]	; (8003828 <HAL_UART_MspInit+0x98>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6313      	str	r3, [r2, #48]	; 0x30
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_UART_MspInit+0x98>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037ea:	230c      	movs	r3, #12
 80037ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	2302      	movs	r3, #2
 80037f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f6:	2303      	movs	r3, #3
 80037f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037fa:	2307      	movs	r3, #7
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	4619      	mov	r1, r3
 8003804:	4809      	ldr	r0, [pc, #36]	; (800382c <HAL_UART_MspInit+0x9c>)
 8003806:	f000 fe9f 	bl	8004548 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800380a:	2200      	movs	r2, #0
 800380c:	2100      	movs	r1, #0
 800380e:	2026      	movs	r0, #38	; 0x26
 8003810:	f000 fa39 	bl	8003c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003814:	2026      	movs	r0, #38	; 0x26
 8003816:	f000 fa52 	bl	8003cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800381a:	bf00      	nop
 800381c:	3728      	adds	r7, #40	; 0x28
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40004400 	.word	0x40004400
 8003828:	40023800 	.word	0x40023800
 800382c:	40020000 	.word	0x40020000

08003830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003842:	e7fe      	b.n	8003842 <HardFault_Handler+0x4>

08003844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003848:	e7fe      	b.n	8003848 <MemManage_Handler+0x4>

0800384a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800384a:	b480      	push	{r7}
 800384c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800384e:	e7fe      	b.n	800384e <BusFault_Handler+0x4>

08003850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003854:	e7fe      	b.n	8003854 <UsageFault_Handler+0x4>

08003856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003872:	b480      	push	{r7}
 8003874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003884:	f000 f904 	bl	8003a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003888:	bf00      	nop
 800388a:	bd80      	pop	{r7, pc}

0800388c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003890:	4802      	ldr	r0, [pc, #8]	; (800389c <DMA1_Stream5_IRQHandler+0x10>)
 8003892:	f000 fc1f 	bl	80040d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20002930 	.word	0x20002930

080038a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038a4:	4802      	ldr	r0, [pc, #8]	; (80038b0 <TIM2_IRQHandler+0x10>)
 80038a6:	f002 f805 	bl	80058b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	200029a8 	.word	0x200029a8

080038b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038b8:	4802      	ldr	r0, [pc, #8]	; (80038c4 <TIM3_IRQHandler+0x10>)
 80038ba:	f001 fffb 	bl	80058b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200028f0 	.word	0x200028f0

080038c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038cc:	4802      	ldr	r0, [pc, #8]	; (80038d8 <USART2_IRQHandler+0x10>)
 80038ce:	f003 f90b 	bl	8006ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200029e8 	.word	0x200029e8

080038dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80038e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80038e4:	f000 fff6 	bl	80048d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038e8:	bf00      	nop
 80038ea:	bd80      	pop	{r7, pc}

080038ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <TIM5_IRQHandler+0x10>)
 80038f2:	f001 ffdf 	bl	80058b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200028b0 	.word	0x200028b0

08003900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003908:	4a14      	ldr	r2, [pc, #80]	; (800395c <_sbrk+0x5c>)
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <_sbrk+0x60>)
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <_sbrk+0x64>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <_sbrk+0x64>)
 800391e:	4a12      	ldr	r2, [pc, #72]	; (8003968 <_sbrk+0x68>)
 8003920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <_sbrk+0x64>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d207      	bcs.n	8003940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003930:	f003 fed6 	bl	80076e0 <__errno>
 8003934:	4602      	mov	r2, r0
 8003936:	230c      	movs	r3, #12
 8003938:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295
 800393e:	e009      	b.n	8003954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <_sbrk+0x64>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <_sbrk+0x64>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	4a05      	ldr	r2, [pc, #20]	; (8003964 <_sbrk+0x64>)
 8003950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20020000 	.word	0x20020000
 8003960:	00000400 	.word	0x00000400
 8003964:	200000dc 	.word	0x200000dc
 8003968:	200034c0 	.word	0x200034c0

0800396c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003970:	4b08      	ldr	r3, [pc, #32]	; (8003994 <SystemInit+0x28>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	4a07      	ldr	r2, [pc, #28]	; (8003994 <SystemInit+0x28>)
 8003978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800397c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <SystemInit+0x28>)
 8003982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003986:	609a      	str	r2, [r3, #8]
#endif
}
 8003988:	bf00      	nop
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <Reset_Handler>:
 8003998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039d0 <LoopFillZerobss+0x14>
 800399c:	2100      	movs	r1, #0
 800399e:	e003      	b.n	80039a8 <LoopCopyDataInit>

080039a0 <CopyDataInit>:
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <LoopFillZerobss+0x18>)
 80039a2:	585b      	ldr	r3, [r3, r1]
 80039a4:	5043      	str	r3, [r0, r1]
 80039a6:	3104      	adds	r1, #4

080039a8 <LoopCopyDataInit>:
 80039a8:	480b      	ldr	r0, [pc, #44]	; (80039d8 <LoopFillZerobss+0x1c>)
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <LoopFillZerobss+0x20>)
 80039ac:	1842      	adds	r2, r0, r1
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d3f6      	bcc.n	80039a0 <CopyDataInit>
 80039b2:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <LoopFillZerobss+0x24>)
 80039b4:	e002      	b.n	80039bc <LoopFillZerobss>

080039b6 <FillZerobss>:
 80039b6:	2300      	movs	r3, #0
 80039b8:	f842 3b04 	str.w	r3, [r2], #4

080039bc <LoopFillZerobss>:
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <LoopFillZerobss+0x28>)
 80039be:	429a      	cmp	r2, r3
 80039c0:	d3f9      	bcc.n	80039b6 <FillZerobss>
 80039c2:	f7ff ffd3 	bl	800396c <SystemInit>
 80039c6:	f003 fe91 	bl	80076ec <__libc_init_array>
 80039ca:	f7ff fa17 	bl	8002dfc <main>
 80039ce:	4770      	bx	lr
 80039d0:	20020000 	.word	0x20020000
 80039d4:	080096e8 	.word	0x080096e8
 80039d8:	20000000 	.word	0x20000000
 80039dc:	20000088 	.word	0x20000088
 80039e0:	20000088 	.word	0x20000088
 80039e4:	200034bc 	.word	0x200034bc

080039e8 <ADC_IRQHandler>:
 80039e8:	e7fe      	b.n	80039e8 <ADC_IRQHandler>
	...

080039ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <HAL_Init+0x40>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <HAL_Init+0x40>)
 80039f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_Init+0x40>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <HAL_Init+0x40>)
 8003a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a08:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <HAL_Init+0x40>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a07      	ldr	r2, [pc, #28]	; (8003a2c <HAL_Init+0x40>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a14:	2003      	movs	r0, #3
 8003a16:	f000 f92b 	bl	8003c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f000 f808 	bl	8003a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a20:	f7ff fd54 	bl	80034cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023c00 	.word	0x40023c00

08003a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a38:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_InitTick+0x54>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_InitTick+0x58>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	4619      	mov	r1, r3
 8003a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f943 	bl	8003cda <HAL_SYSTICK_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e00e      	b.n	8003a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b0f      	cmp	r3, #15
 8003a62:	d80a      	bhi.n	8003a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a64:	2200      	movs	r2, #0
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	f000 f90b 	bl	8003c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a70:	4a06      	ldr	r2, [pc, #24]	; (8003a8c <HAL_InitTick+0x5c>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000014 	.word	0x20000014
 8003a88:	2000001c 	.word	0x2000001c
 8003a8c:	20000018 	.word	0x20000018

08003a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_IncTick+0x20>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_IncTick+0x24>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <HAL_IncTick+0x24>)
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	2000001c 	.word	0x2000001c
 8003ab4:	200034b4 	.word	0x200034b4

08003ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return uwTick;
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_GetTick+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	200034b4 	.word	0x200034b4

08003ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aec:	4013      	ands	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b02:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <__NVIC_SetPriorityGrouping+0x44>)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	60d3      	str	r3, [r2, #12]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <__NVIC_GetPriorityGrouping+0x18>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	f003 0307 	and.w	r3, r3, #7
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	db0b      	blt.n	8003b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	4907      	ldr	r1, [pc, #28]	; (8003b6c <__NVIC_EnableIRQ+0x38>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2001      	movs	r0, #1
 8003b56:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	e000e100 	.word	0xe000e100

08003b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	6039      	str	r1, [r7, #0]
 8003b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	db0a      	blt.n	8003b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	490c      	ldr	r1, [pc, #48]	; (8003bbc <__NVIC_SetPriority+0x4c>)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	0112      	lsls	r2, r2, #4
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	440b      	add	r3, r1
 8003b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b98:	e00a      	b.n	8003bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	4908      	ldr	r1, [pc, #32]	; (8003bc0 <__NVIC_SetPriority+0x50>)
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	3b04      	subs	r3, #4
 8003ba8:	0112      	lsls	r2, r2, #4
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	440b      	add	r3, r1
 8003bae:	761a      	strb	r2, [r3, #24]
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000e100 	.word	0xe000e100
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f1c3 0307 	rsb	r3, r3, #7
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	bf28      	it	cs
 8003be2:	2304      	movcs	r3, #4
 8003be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3304      	adds	r3, #4
 8003bea:	2b06      	cmp	r3, #6
 8003bec:	d902      	bls.n	8003bf4 <NVIC_EncodePriority+0x30>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3b03      	subs	r3, #3
 8003bf2:	e000      	b.n	8003bf6 <NVIC_EncodePriority+0x32>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43da      	mvns	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	401a      	ands	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	43d9      	mvns	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c1c:	4313      	orrs	r3, r2
         );
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3724      	adds	r7, #36	; 0x24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c3c:	d301      	bcc.n	8003c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e00f      	b.n	8003c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c42:	4a0a      	ldr	r2, [pc, #40]	; (8003c6c <SysTick_Config+0x40>)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c4a:	210f      	movs	r1, #15
 8003c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c50:	f7ff ff8e 	bl	8003b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <SysTick_Config+0x40>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c5a:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <SysTick_Config+0x40>)
 8003c5c:	2207      	movs	r2, #7
 8003c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	e000e010 	.word	0xe000e010

08003c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff ff29 	bl	8003ad0 <__NVIC_SetPriorityGrouping>
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b086      	sub	sp, #24
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c98:	f7ff ff3e 	bl	8003b18 <__NVIC_GetPriorityGrouping>
 8003c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	6978      	ldr	r0, [r7, #20]
 8003ca4:	f7ff ff8e 	bl	8003bc4 <NVIC_EncodePriority>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff ff5d 	bl	8003b70 <__NVIC_SetPriority>
}
 8003cb6:	bf00      	nop
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ff31 	bl	8003b34 <__NVIC_EnableIRQ>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ffa2 	bl	8003c2c <SysTick_Config>
 8003ce8:	4603      	mov	r3, r0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e014      	b.n	8003d2e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	791b      	ldrb	r3, [r3, #4]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff fc01 	bl	800351c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43da      	mvns	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	400a      	ands	r2, r1
 8003d74:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d107      	bne.n	8003d8c <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 f915 	bl	8003fb0 <HAL_DMA_Abort>
 8003d86:	4603      	mov	r3, r0
 8003d88:	73fb      	strb	r3, [r7, #15]
 8003d8a:	e006      	b.n	8003d9a <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f90d 	bl	8003fb0 <HAL_DMA_Abort>
 8003d96:	4603      	mov	r3, r0
 8003d98:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2204      	movs	r2, #4
 8003da4:	711a      	strb	r2, [r3, #4]
 8003da6:	e002      	b.n	8003dae <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	795b      	ldrb	r3, [r3, #5]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_DAC_ConfigChannel+0x20>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e036      	b.n	8003e46 <HAL_DAC_ConfigChannel+0x8e>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2202      	movs	r2, #2
 8003de2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003dec:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6819      	ldr	r1, [r3, #0]
 8003e26:	22c0      	movs	r2, #192	; 0xc0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43da      	mvns	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	400a      	ands	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e60:	f7ff fe2a 	bl	8003ab8 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e099      	b.n	8003fa4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e90:	e00f      	b.n	8003eb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e92:	f7ff fe11 	bl	8003ab8 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d908      	bls.n	8003eb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e078      	b.n	8003fa4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e8      	bne.n	8003e92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4b38      	ldr	r3, [pc, #224]	; (8003fac <HAL_DMA_Init+0x158>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d107      	bne.n	8003f1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	4313      	orrs	r3, r2
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0307 	bic.w	r3, r3, #7
 8003f32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d117      	bne.n	8003f76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00e      	beq.n	8003f76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fa7b 	bl	8004454 <DMA_CheckFifoParam>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2240      	movs	r2, #64	; 0x40
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f72:	2301      	movs	r3, #1
 8003f74:	e016      	b.n	8003fa4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa32 	bl	80043e8 <DMA_CalcBaseAndBitshift>
 8003f84:	4603      	mov	r3, r0
 8003f86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	223f      	movs	r2, #63	; 0x3f
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	f010803f 	.word	0xf010803f

08003fb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003fbe:	f7ff fd7b 	bl	8003ab8 <HAL_GetTick>
 8003fc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d008      	beq.n	8003fe2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2280      	movs	r2, #128	; 0x80
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e052      	b.n	8004088 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0216 	bic.w	r2, r2, #22
 8003ff0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004000:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HAL_DMA_Abort+0x62>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0208 	bic.w	r2, r2, #8
 8004020:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0201 	bic.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004032:	e013      	b.n	800405c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004034:	f7ff fd40 	bl	8003ab8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b05      	cmp	r3, #5
 8004040:	d90c      	bls.n	800405c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2203      	movs	r2, #3
 8004054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e015      	b.n	8004088 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e4      	bne.n	8004034 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406e:	223f      	movs	r2, #63	; 0x3f
 8004070:	409a      	lsls	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d004      	beq.n	80040ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e00c      	b.n	80040c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2205      	movs	r2, #5
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0201 	bic.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040e0:	4b92      	ldr	r3, [pc, #584]	; (800432c <HAL_DMA_IRQHandler+0x258>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a92      	ldr	r2, [pc, #584]	; (8004330 <HAL_DMA_IRQHandler+0x25c>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	0a9b      	lsrs	r3, r3, #10
 80040ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	2208      	movs	r2, #8
 8004100:	409a      	lsls	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d01a      	beq.n	8004140 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d013      	beq.n	8004140 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0204 	bic.w	r2, r2, #4
 8004126:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412c:	2208      	movs	r2, #8
 800412e:	409a      	lsls	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f043 0201 	orr.w	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004144:	2201      	movs	r2, #1
 8004146:	409a      	lsls	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d012      	beq.n	8004176 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004162:	2201      	movs	r2, #1
 8004164:	409a      	lsls	r2, r3
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416e:	f043 0202 	orr.w	r2, r3, #2
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417a:	2204      	movs	r2, #4
 800417c:	409a      	lsls	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d012      	beq.n	80041ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	2204      	movs	r2, #4
 800419a:	409a      	lsls	r2, r3
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a4:	f043 0204 	orr.w	r2, r3, #4
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b0:	2210      	movs	r2, #16
 80041b2:	409a      	lsls	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d043      	beq.n	8004244 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d03c      	beq.n	8004244 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ce:	2210      	movs	r2, #16
 80041d0:	409a      	lsls	r2, r3
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d018      	beq.n	8004216 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d108      	bne.n	8004204 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d024      	beq.n	8004244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
 8004202:	e01f      	b.n	8004244 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01b      	beq.n	8004244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
 8004214:	e016      	b.n	8004244 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d107      	bne.n	8004234 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0208 	bic.w	r2, r2, #8
 8004232:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	2220      	movs	r2, #32
 800424a:	409a      	lsls	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 808e 	beq.w	8004372 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 8086 	beq.w	8004372 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426a:	2220      	movs	r2, #32
 800426c:	409a      	lsls	r2, r3
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b05      	cmp	r3, #5
 800427c:	d136      	bne.n	80042ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0216 	bic.w	r2, r2, #22
 800428c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800429c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <HAL_DMA_IRQHandler+0x1da>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0208 	bic.w	r2, r2, #8
 80042bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c2:	223f      	movs	r2, #63	; 0x3f
 80042c4:	409a      	lsls	r2, r3
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d07d      	beq.n	80043de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
        }
        return;
 80042ea:	e078      	b.n	80043de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01c      	beq.n	8004334 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d108      	bne.n	800431a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	2b00      	cmp	r3, #0
 800430e:	d030      	beq.n	8004372 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
 8004318:	e02b      	b.n	8004372 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	2b00      	cmp	r3, #0
 8004320:	d027      	beq.n	8004372 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4798      	blx	r3
 800432a:	e022      	b.n	8004372 <HAL_DMA_IRQHandler+0x29e>
 800432c:	20000014 	.word	0x20000014
 8004330:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10f      	bne.n	8004362 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0210 	bic.w	r2, r2, #16
 8004350:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	2b00      	cmp	r3, #0
 8004378:	d032      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d022      	beq.n	80043cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2205      	movs	r2, #5
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0201 	bic.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	3301      	adds	r3, #1
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d307      	bcc.n	80043ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f2      	bne.n	800439e <HAL_DMA_IRQHandler+0x2ca>
 80043b8:	e000      	b.n	80043bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80043ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
 80043dc:	e000      	b.n	80043e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80043de:	bf00      	nop
    }
  }
}
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop

080043e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	3b10      	subs	r3, #16
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <DMA_CalcBaseAndBitshift+0x64>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	091b      	lsrs	r3, r3, #4
 8004400:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004402:	4a13      	ldr	r2, [pc, #76]	; (8004450 <DMA_CalcBaseAndBitshift+0x68>)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b03      	cmp	r3, #3
 8004414:	d909      	bls.n	800442a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800441e:	f023 0303 	bic.w	r3, r3, #3
 8004422:	1d1a      	adds	r2, r3, #4
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	659a      	str	r2, [r3, #88]	; 0x58
 8004428:	e007      	b.n	800443a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004432:	f023 0303 	bic.w	r3, r3, #3
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	aaaaaaab 	.word	0xaaaaaaab
 8004450:	08009658 	.word	0x08009658

08004454 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d11f      	bne.n	80044ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d855      	bhi.n	8004520 <DMA_CheckFifoParam+0xcc>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <DMA_CheckFifoParam+0x28>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	0800448d 	.word	0x0800448d
 8004480:	0800449f 	.word	0x0800449f
 8004484:	0800448d 	.word	0x0800448d
 8004488:	08004521 	.word	0x08004521
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d045      	beq.n	8004524 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800449c:	e042      	b.n	8004524 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044a6:	d13f      	bne.n	8004528 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ac:	e03c      	b.n	8004528 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b6:	d121      	bne.n	80044fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d836      	bhi.n	800452c <DMA_CheckFifoParam+0xd8>
 80044be:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <DMA_CheckFifoParam+0x70>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044d5 	.word	0x080044d5
 80044c8:	080044db 	.word	0x080044db
 80044cc:	080044d5 	.word	0x080044d5
 80044d0:	080044ed 	.word	0x080044ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
      break;
 80044d8:	e02f      	b.n	800453a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d024      	beq.n	8004530 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ea:	e021      	b.n	8004530 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044f4:	d11e      	bne.n	8004534 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044fa:	e01b      	b.n	8004534 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d902      	bls.n	8004508 <DMA_CheckFifoParam+0xb4>
 8004502:	2b03      	cmp	r3, #3
 8004504:	d003      	beq.n	800450e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004506:	e018      	b.n	800453a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
      break;
 800450c:	e015      	b.n	800453a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00e      	beq.n	8004538 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
      break;
 800451e:	e00b      	b.n	8004538 <DMA_CheckFifoParam+0xe4>
      break;
 8004520:	bf00      	nop
 8004522:	e00a      	b.n	800453a <DMA_CheckFifoParam+0xe6>
      break;
 8004524:	bf00      	nop
 8004526:	e008      	b.n	800453a <DMA_CheckFifoParam+0xe6>
      break;
 8004528:	bf00      	nop
 800452a:	e006      	b.n	800453a <DMA_CheckFifoParam+0xe6>
      break;
 800452c:	bf00      	nop
 800452e:	e004      	b.n	800453a <DMA_CheckFifoParam+0xe6>
      break;
 8004530:	bf00      	nop
 8004532:	e002      	b.n	800453a <DMA_CheckFifoParam+0xe6>
      break;   
 8004534:	bf00      	nop
 8004536:	e000      	b.n	800453a <DMA_CheckFifoParam+0xe6>
      break;
 8004538:	bf00      	nop
    }
  } 
  
  return status; 
 800453a:	7bfb      	ldrb	r3, [r7, #15]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004548:	b480      	push	{r7}
 800454a:	b089      	sub	sp, #36	; 0x24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	e165      	b.n	8004830 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004564:	2201      	movs	r2, #1
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	429a      	cmp	r2, r3
 800457e:	f040 8154 	bne.w	800482a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d00b      	beq.n	80045a2 <HAL_GPIO_Init+0x5a>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d007      	beq.n	80045a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004596:	2b11      	cmp	r3, #17
 8004598:	d003      	beq.n	80045a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b12      	cmp	r3, #18
 80045a0:	d130      	bne.n	8004604 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	2203      	movs	r2, #3
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045d8:	2201      	movs	r2, #1
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 0201 	and.w	r2, r3, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	2203      	movs	r2, #3
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d003      	beq.n	8004644 <HAL_GPIO_Init+0xfc>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b12      	cmp	r3, #18
 8004642:	d123      	bne.n	800468c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	08da      	lsrs	r2, r3, #3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3208      	adds	r2, #8
 800464c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	220f      	movs	r2, #15
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4013      	ands	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	08da      	lsrs	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3208      	adds	r2, #8
 8004686:	69b9      	ldr	r1, [r7, #24]
 8004688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	2203      	movs	r2, #3
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 0203 	and.w	r2, r3, #3
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80ae 	beq.w	800482a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	4b5c      	ldr	r3, [pc, #368]	; (8004844 <HAL_GPIO_Init+0x2fc>)
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d6:	4a5b      	ldr	r2, [pc, #364]	; (8004844 <HAL_GPIO_Init+0x2fc>)
 80046d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046dc:	6453      	str	r3, [r2, #68]	; 0x44
 80046de:	4b59      	ldr	r3, [pc, #356]	; (8004844 <HAL_GPIO_Init+0x2fc>)
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ea:	4a57      	ldr	r2, [pc, #348]	; (8004848 <HAL_GPIO_Init+0x300>)
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	3302      	adds	r3, #2
 80046f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	220f      	movs	r2, #15
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a4e      	ldr	r2, [pc, #312]	; (800484c <HAL_GPIO_Init+0x304>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d025      	beq.n	8004762 <HAL_GPIO_Init+0x21a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a4d      	ldr	r2, [pc, #308]	; (8004850 <HAL_GPIO_Init+0x308>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01f      	beq.n	800475e <HAL_GPIO_Init+0x216>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a4c      	ldr	r2, [pc, #304]	; (8004854 <HAL_GPIO_Init+0x30c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d019      	beq.n	800475a <HAL_GPIO_Init+0x212>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a4b      	ldr	r2, [pc, #300]	; (8004858 <HAL_GPIO_Init+0x310>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <HAL_GPIO_Init+0x20e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a4a      	ldr	r2, [pc, #296]	; (800485c <HAL_GPIO_Init+0x314>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00d      	beq.n	8004752 <HAL_GPIO_Init+0x20a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a49      	ldr	r2, [pc, #292]	; (8004860 <HAL_GPIO_Init+0x318>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d007      	beq.n	800474e <HAL_GPIO_Init+0x206>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a48      	ldr	r2, [pc, #288]	; (8004864 <HAL_GPIO_Init+0x31c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <HAL_GPIO_Init+0x202>
 8004746:	2306      	movs	r3, #6
 8004748:	e00c      	b.n	8004764 <HAL_GPIO_Init+0x21c>
 800474a:	2307      	movs	r3, #7
 800474c:	e00a      	b.n	8004764 <HAL_GPIO_Init+0x21c>
 800474e:	2305      	movs	r3, #5
 8004750:	e008      	b.n	8004764 <HAL_GPIO_Init+0x21c>
 8004752:	2304      	movs	r3, #4
 8004754:	e006      	b.n	8004764 <HAL_GPIO_Init+0x21c>
 8004756:	2303      	movs	r3, #3
 8004758:	e004      	b.n	8004764 <HAL_GPIO_Init+0x21c>
 800475a:	2302      	movs	r3, #2
 800475c:	e002      	b.n	8004764 <HAL_GPIO_Init+0x21c>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_GPIO_Init+0x21c>
 8004762:	2300      	movs	r3, #0
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	f002 0203 	and.w	r2, r2, #3
 800476a:	0092      	lsls	r2, r2, #2
 800476c:	4093      	lsls	r3, r2
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004774:	4934      	ldr	r1, [pc, #208]	; (8004848 <HAL_GPIO_Init+0x300>)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	089b      	lsrs	r3, r3, #2
 800477a:	3302      	adds	r3, #2
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004782:	4b39      	ldr	r3, [pc, #228]	; (8004868 <HAL_GPIO_Init+0x320>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047a6:	4a30      	ldr	r2, [pc, #192]	; (8004868 <HAL_GPIO_Init+0x320>)
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047ac:	4b2e      	ldr	r3, [pc, #184]	; (8004868 <HAL_GPIO_Init+0x320>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047d0:	4a25      	ldr	r2, [pc, #148]	; (8004868 <HAL_GPIO_Init+0x320>)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047d6:	4b24      	ldr	r3, [pc, #144]	; (8004868 <HAL_GPIO_Init+0x320>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047fa:	4a1b      	ldr	r2, [pc, #108]	; (8004868 <HAL_GPIO_Init+0x320>)
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004800:	4b19      	ldr	r3, [pc, #100]	; (8004868 <HAL_GPIO_Init+0x320>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	43db      	mvns	r3, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4013      	ands	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004824:	4a10      	ldr	r2, [pc, #64]	; (8004868 <HAL_GPIO_Init+0x320>)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3301      	adds	r3, #1
 800482e:	61fb      	str	r3, [r7, #28]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b0f      	cmp	r3, #15
 8004834:	f67f ae96 	bls.w	8004564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004838:	bf00      	nop
 800483a:	3724      	adds	r7, #36	; 0x24
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40023800 	.word	0x40023800
 8004848:	40013800 	.word	0x40013800
 800484c:	40020000 	.word	0x40020000
 8004850:	40020400 	.word	0x40020400
 8004854:	40020800 	.word	0x40020800
 8004858:	40020c00 	.word	0x40020c00
 800485c:	40021000 	.word	0x40021000
 8004860:	40021400 	.word	0x40021400
 8004864:	40021800 	.word	0x40021800
 8004868:	40013c00 	.word	0x40013c00

0800486c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	807b      	strh	r3, [r7, #2]
 8004878:	4613      	mov	r3, r2
 800487a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800487c:	787b      	ldrb	r3, [r7, #1]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004882:	887a      	ldrh	r2, [r7, #2]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004888:	e003      	b.n	8004892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800488a:	887b      	ldrh	r3, [r7, #2]
 800488c:	041a      	lsls	r2, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	619a      	str	r2, [r3, #24]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	887b      	ldrh	r3, [r7, #2]
 80048b0:	401a      	ands	r2, r3
 80048b2:	887b      	ldrh	r3, [r7, #2]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d104      	bne.n	80048c2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80048b8:	887b      	ldrh	r3, [r7, #2]
 80048ba:	041a      	lsls	r2, r3, #16
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80048c0:	e002      	b.n	80048c8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80048c2:	887a      	ldrh	r2, [r7, #2]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	619a      	str	r2, [r3, #24]
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048de:	4b08      	ldr	r3, [pc, #32]	; (8004900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d006      	beq.n	80048f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048ea:	4a05      	ldr	r2, [pc, #20]	; (8004900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f806 	bl	8004904 <HAL_GPIO_EXTI_Callback>
  }
}
 80048f8:	bf00      	nop
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40013c00 	.word	0x40013c00

08004904 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0cc      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004930:	4b68      	ldr	r3, [pc, #416]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d90c      	bls.n	8004958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b65      	ldr	r3, [pc, #404]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b63      	ldr	r3, [pc, #396]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0b8      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4a58      	ldr	r2, [pc, #352]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800497a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004988:	4b53      	ldr	r3, [pc, #332]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	4a52      	ldr	r2, [pc, #328]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004994:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	494d      	ldr	r1, [pc, #308]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d044      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	4b47      	ldr	r3, [pc, #284]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d119      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e07f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d003      	beq.n	80049da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d107      	bne.n	80049ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049da:	4b3f      	ldr	r3, [pc, #252]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e06f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ea:	4b3b      	ldr	r3, [pc, #236]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e067      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049fa:	4b37      	ldr	r3, [pc, #220]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f023 0203 	bic.w	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4934      	ldr	r1, [pc, #208]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a0c:	f7ff f854 	bl	8003ab8 <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a14:	f7ff f850 	bl	8003ab8 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e04f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	4b2b      	ldr	r3, [pc, #172]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 020c 	and.w	r2, r3, #12
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d1eb      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b25      	ldr	r3, [pc, #148]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d20c      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b22      	ldr	r3, [pc, #136]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e032      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4916      	ldr	r1, [pc, #88]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aa2:	f000 f855 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 8004aa6:	4601      	mov	r1, r0
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	4a0a      	ldr	r2, [pc, #40]	; (8004adc <HAL_RCC_ClockConfig+0x1c0>)
 8004ab4:	5cd3      	ldrb	r3, [r2, r3]
 8004ab6:	fa21 f303 	lsr.w	r3, r1, r3
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fe ffb4 	bl	8003a30 <HAL_InitTick>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40023c00 	.word	0x40023c00
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	08009640 	.word	0x08009640
 8004ae0:	20000014 	.word	0x20000014
 8004ae4:	20000018 	.word	0x20000018

08004ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <HAL_RCC_GetHCLKFreq+0x14>)
 8004aee:	681b      	ldr	r3, [r3, #0]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000014 	.word	0x20000014

08004b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b04:	f7ff fff0 	bl	8004ae8 <HAL_RCC_GetHCLKFreq>
 8004b08:	4601      	mov	r1, r0
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	0a9b      	lsrs	r3, r3, #10
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	4a03      	ldr	r2, [pc, #12]	; (8004b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b16:	5cd3      	ldrb	r3, [r2, r3]
 8004b18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40023800 	.word	0x40023800
 8004b24:	08009650 	.word	0x08009650

08004b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b2c:	f7ff ffdc 	bl	8004ae8 <HAL_RCC_GetHCLKFreq>
 8004b30:	4601      	mov	r1, r0
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	0b5b      	lsrs	r3, r3, #13
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	4a03      	ldr	r2, [pc, #12]	; (8004b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b3e:	5cd3      	ldrb	r3, [r2, r3]
 8004b40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	08009650 	.word	0x08009650

08004b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b6a:	4bc6      	ldr	r3, [pc, #792]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
 8004b72:	2b0c      	cmp	r3, #12
 8004b74:	f200 817e 	bhi.w	8004e74 <HAL_RCC_GetSysClockFreq+0x324>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <HAL_RCC_GetSysClockFreq+0x30>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004bb5 	.word	0x08004bb5
 8004b84:	08004e75 	.word	0x08004e75
 8004b88:	08004e75 	.word	0x08004e75
 8004b8c:	08004e75 	.word	0x08004e75
 8004b90:	08004bbb 	.word	0x08004bbb
 8004b94:	08004e75 	.word	0x08004e75
 8004b98:	08004e75 	.word	0x08004e75
 8004b9c:	08004e75 	.word	0x08004e75
 8004ba0:	08004bc1 	.word	0x08004bc1
 8004ba4:	08004e75 	.word	0x08004e75
 8004ba8:	08004e75 	.word	0x08004e75
 8004bac:	08004e75 	.word	0x08004e75
 8004bb0:	08004d1d 	.word	0x08004d1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bb4:	4bb4      	ldr	r3, [pc, #720]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x338>)
 8004bb6:	613b      	str	r3, [r7, #16]
       break;
 8004bb8:	e15f      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bba:	4bb4      	ldr	r3, [pc, #720]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x33c>)
 8004bbc:	613b      	str	r3, [r7, #16]
      break;
 8004bbe:	e15c      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bc0:	4bb0      	ldr	r3, [pc, #704]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bc8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bca:	4bae      	ldr	r3, [pc, #696]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d04a      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd6:	4bab      	ldr	r3, [pc, #684]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	099b      	lsrs	r3, r3, #6
 8004bdc:	f04f 0400 	mov.w	r4, #0
 8004be0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	ea03 0501 	and.w	r5, r3, r1
 8004bec:	ea04 0602 	and.w	r6, r4, r2
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	4632      	mov	r2, r6
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	f04f 0400 	mov.w	r4, #0
 8004bfc:	0154      	lsls	r4, r2, #5
 8004bfe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c02:	014b      	lsls	r3, r1, #5
 8004c04:	4619      	mov	r1, r3
 8004c06:	4622      	mov	r2, r4
 8004c08:	1b49      	subs	r1, r1, r5
 8004c0a:	eb62 0206 	sbc.w	r2, r2, r6
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	f04f 0400 	mov.w	r4, #0
 8004c16:	0194      	lsls	r4, r2, #6
 8004c18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c1c:	018b      	lsls	r3, r1, #6
 8004c1e:	1a5b      	subs	r3, r3, r1
 8004c20:	eb64 0402 	sbc.w	r4, r4, r2
 8004c24:	f04f 0100 	mov.w	r1, #0
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	00e2      	lsls	r2, r4, #3
 8004c2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c32:	00d9      	lsls	r1, r3, #3
 8004c34:	460b      	mov	r3, r1
 8004c36:	4614      	mov	r4, r2
 8004c38:	195b      	adds	r3, r3, r5
 8004c3a:	eb44 0406 	adc.w	r4, r4, r6
 8004c3e:	f04f 0100 	mov.w	r1, #0
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	0262      	lsls	r2, r4, #9
 8004c48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004c4c:	0259      	lsls	r1, r3, #9
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4614      	mov	r4, r2
 8004c52:	4618      	mov	r0, r3
 8004c54:	4621      	mov	r1, r4
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f04f 0400 	mov.w	r4, #0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4623      	mov	r3, r4
 8004c60:	f7fb ffba 	bl	8000bd8 <__aeabi_uldivmod>
 8004c64:	4603      	mov	r3, r0
 8004c66:	460c      	mov	r4, r1
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e049      	b.n	8004d00 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6c:	4b85      	ldr	r3, [pc, #532]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	099b      	lsrs	r3, r3, #6
 8004c72:	f04f 0400 	mov.w	r4, #0
 8004c76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	ea03 0501 	and.w	r5, r3, r1
 8004c82:	ea04 0602 	and.w	r6, r4, r2
 8004c86:	4629      	mov	r1, r5
 8004c88:	4632      	mov	r2, r6
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	f04f 0400 	mov.w	r4, #0
 8004c92:	0154      	lsls	r4, r2, #5
 8004c94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c98:	014b      	lsls	r3, r1, #5
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	1b49      	subs	r1, r1, r5
 8004ca0:	eb62 0206 	sbc.w	r2, r2, r6
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	f04f 0400 	mov.w	r4, #0
 8004cac:	0194      	lsls	r4, r2, #6
 8004cae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004cb2:	018b      	lsls	r3, r1, #6
 8004cb4:	1a5b      	subs	r3, r3, r1
 8004cb6:	eb64 0402 	sbc.w	r4, r4, r2
 8004cba:	f04f 0100 	mov.w	r1, #0
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	00e2      	lsls	r2, r4, #3
 8004cc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cc8:	00d9      	lsls	r1, r3, #3
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4614      	mov	r4, r2
 8004cce:	195b      	adds	r3, r3, r5
 8004cd0:	eb44 0406 	adc.w	r4, r4, r6
 8004cd4:	f04f 0100 	mov.w	r1, #0
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	02a2      	lsls	r2, r4, #10
 8004cde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ce2:	0299      	lsls	r1, r3, #10
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4614      	mov	r4, r2
 8004ce8:	4618      	mov	r0, r3
 8004cea:	4621      	mov	r1, r4
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f04f 0400 	mov.w	r4, #0
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	f7fb ff6f 	bl	8000bd8 <__aeabi_uldivmod>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d00:	4b60      	ldr	r3, [pc, #384]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	613b      	str	r3, [r7, #16]
      break;
 8004d1a:	e0ae      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d1c:	4b59      	ldr	r3, [pc, #356]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d24:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d26:	4b57      	ldr	r3, [pc, #348]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d04a      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d32:	4b54      	ldr	r3, [pc, #336]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	f04f 0400 	mov.w	r4, #0
 8004d3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	ea03 0501 	and.w	r5, r3, r1
 8004d48:	ea04 0602 	and.w	r6, r4, r2
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	4632      	mov	r2, r6
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	f04f 0400 	mov.w	r4, #0
 8004d58:	0154      	lsls	r4, r2, #5
 8004d5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d5e:	014b      	lsls	r3, r1, #5
 8004d60:	4619      	mov	r1, r3
 8004d62:	4622      	mov	r2, r4
 8004d64:	1b49      	subs	r1, r1, r5
 8004d66:	eb62 0206 	sbc.w	r2, r2, r6
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	f04f 0400 	mov.w	r4, #0
 8004d72:	0194      	lsls	r4, r2, #6
 8004d74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d78:	018b      	lsls	r3, r1, #6
 8004d7a:	1a5b      	subs	r3, r3, r1
 8004d7c:	eb64 0402 	sbc.w	r4, r4, r2
 8004d80:	f04f 0100 	mov.w	r1, #0
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	00e2      	lsls	r2, r4, #3
 8004d8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d8e:	00d9      	lsls	r1, r3, #3
 8004d90:	460b      	mov	r3, r1
 8004d92:	4614      	mov	r4, r2
 8004d94:	195b      	adds	r3, r3, r5
 8004d96:	eb44 0406 	adc.w	r4, r4, r6
 8004d9a:	f04f 0100 	mov.w	r1, #0
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	0262      	lsls	r2, r4, #9
 8004da4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004da8:	0259      	lsls	r1, r3, #9
 8004daa:	460b      	mov	r3, r1
 8004dac:	4614      	mov	r4, r2
 8004dae:	4618      	mov	r0, r3
 8004db0:	4621      	mov	r1, r4
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f04f 0400 	mov.w	r4, #0
 8004db8:	461a      	mov	r2, r3
 8004dba:	4623      	mov	r3, r4
 8004dbc:	f7fb ff0c 	bl	8000bd8 <__aeabi_uldivmod>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e049      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc8:	4b2e      	ldr	r3, [pc, #184]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	099b      	lsrs	r3, r3, #6
 8004dce:	f04f 0400 	mov.w	r4, #0
 8004dd2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	ea03 0501 	and.w	r5, r3, r1
 8004dde:	ea04 0602 	and.w	r6, r4, r2
 8004de2:	4629      	mov	r1, r5
 8004de4:	4632      	mov	r2, r6
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	f04f 0400 	mov.w	r4, #0
 8004dee:	0154      	lsls	r4, r2, #5
 8004df0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004df4:	014b      	lsls	r3, r1, #5
 8004df6:	4619      	mov	r1, r3
 8004df8:	4622      	mov	r2, r4
 8004dfa:	1b49      	subs	r1, r1, r5
 8004dfc:	eb62 0206 	sbc.w	r2, r2, r6
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	f04f 0400 	mov.w	r4, #0
 8004e08:	0194      	lsls	r4, r2, #6
 8004e0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e0e:	018b      	lsls	r3, r1, #6
 8004e10:	1a5b      	subs	r3, r3, r1
 8004e12:	eb64 0402 	sbc.w	r4, r4, r2
 8004e16:	f04f 0100 	mov.w	r1, #0
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	00e2      	lsls	r2, r4, #3
 8004e20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e24:	00d9      	lsls	r1, r3, #3
 8004e26:	460b      	mov	r3, r1
 8004e28:	4614      	mov	r4, r2
 8004e2a:	195b      	adds	r3, r3, r5
 8004e2c:	eb44 0406 	adc.w	r4, r4, r6
 8004e30:	f04f 0100 	mov.w	r1, #0
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	02a2      	lsls	r2, r4, #10
 8004e3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e3e:	0299      	lsls	r1, r3, #10
 8004e40:	460b      	mov	r3, r1
 8004e42:	4614      	mov	r4, r2
 8004e44:	4618      	mov	r0, r3
 8004e46:	4621      	mov	r1, r4
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f04f 0400 	mov.w	r4, #0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4623      	mov	r3, r4
 8004e52:	f7fb fec1 	bl	8000bd8 <__aeabi_uldivmod>
 8004e56:	4603      	mov	r3, r0
 8004e58:	460c      	mov	r4, r1
 8004e5a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e5c:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x334>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	0f1b      	lsrs	r3, r3, #28
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	613b      	str	r3, [r7, #16]
      break;
 8004e72:	e002      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e74:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x338>)
 8004e76:	613b      	str	r3, [r7, #16]
      break;
 8004e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e7a:	693b      	ldr	r3, [r7, #16]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e84:	40023800 	.word	0x40023800
 8004e88:	00f42400 	.word	0x00f42400
 8004e8c:	007a1200 	.word	0x007a1200

08004e90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8083 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004eaa:	4b95      	ldr	r3, [pc, #596]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 030c 	and.w	r3, r3, #12
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d019      	beq.n	8004eea <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004eb6:	4b92      	ldr	r3, [pc, #584]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d106      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ec2:	4b8f      	ldr	r3, [pc, #572]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ece:	d00c      	beq.n	8004eea <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ed0:	4b8b      	ldr	r3, [pc, #556]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	d112      	bne.n	8004f02 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004edc:	4b88      	ldr	r3, [pc, #544]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ee8:	d10b      	bne.n	8004f02 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eea:	4b85      	ldr	r3, [pc, #532]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d05b      	beq.n	8004fae <HAL_RCC_OscConfig+0x11e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d157      	bne.n	8004fae <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e216      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0a:	d106      	bne.n	8004f1a <HAL_RCC_OscConfig+0x8a>
 8004f0c:	4b7c      	ldr	r3, [pc, #496]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a7b      	ldr	r2, [pc, #492]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	e01d      	b.n	8004f56 <HAL_RCC_OscConfig+0xc6>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f22:	d10c      	bne.n	8004f3e <HAL_RCC_OscConfig+0xae>
 8004f24:	4b76      	ldr	r3, [pc, #472]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a75      	ldr	r2, [pc, #468]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	4b73      	ldr	r3, [pc, #460]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a72      	ldr	r2, [pc, #456]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	e00b      	b.n	8004f56 <HAL_RCC_OscConfig+0xc6>
 8004f3e:	4b70      	ldr	r3, [pc, #448]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a6f      	ldr	r2, [pc, #444]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	4b6d      	ldr	r3, [pc, #436]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a6c      	ldr	r2, [pc, #432]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f54:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d013      	beq.n	8004f86 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5e:	f7fe fdab 	bl	8003ab8 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f66:	f7fe fda7 	bl	8003ab8 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b64      	cmp	r3, #100	; 0x64
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e1db      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f78:	4b61      	ldr	r3, [pc, #388]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <HAL_RCC_OscConfig+0xd6>
 8004f84:	e014      	b.n	8004fb0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f86:	f7fe fd97 	bl	8003ab8 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f8e:	f7fe fd93 	bl	8003ab8 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b64      	cmp	r3, #100	; 0x64
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e1c7      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa0:	4b57      	ldr	r3, [pc, #348]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f0      	bne.n	8004f8e <HAL_RCC_OscConfig+0xfe>
 8004fac:	e000      	b.n	8004fb0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d06f      	beq.n	800509c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fbc:	4b50      	ldr	r3, [pc, #320]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 030c 	and.w	r3, r3, #12
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d017      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fc8:	4b4d      	ldr	r3, [pc, #308]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d105      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fd4:	4b4a      	ldr	r3, [pc, #296]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00b      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fe0:	4b47      	ldr	r3, [pc, #284]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fe8:	2b0c      	cmp	r3, #12
 8004fea:	d11c      	bne.n	8005026 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fec:	4b44      	ldr	r3, [pc, #272]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d116      	bne.n	8005026 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff8:	4b41      	ldr	r3, [pc, #260]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <HAL_RCC_OscConfig+0x180>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d001      	beq.n	8005010 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e18f      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005010:	4b3b      	ldr	r3, [pc, #236]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4938      	ldr	r1, [pc, #224]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8005020:	4313      	orrs	r3, r2
 8005022:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005024:	e03a      	b.n	800509c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d020      	beq.n	8005070 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800502e:	4b35      	ldr	r3, [pc, #212]	; (8005104 <HAL_RCC_OscConfig+0x274>)
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fe fd40 	bl	8003ab8 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800503c:	f7fe fd3c 	bl	8003ab8 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e170      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504e:	4b2c      	ldr	r3, [pc, #176]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800505a:	4b29      	ldr	r3, [pc, #164]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4925      	ldr	r1, [pc, #148]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 800506a:	4313      	orrs	r3, r2
 800506c:	600b      	str	r3, [r1, #0]
 800506e:	e015      	b.n	800509c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005070:	4b24      	ldr	r3, [pc, #144]	; (8005104 <HAL_RCC_OscConfig+0x274>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005076:	f7fe fd1f 	bl	8003ab8 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800507e:	f7fe fd1b 	bl	8003ab8 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e14f      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005090:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f0      	bne.n	800507e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d037      	beq.n	8005118 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d016      	beq.n	80050de <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050b0:	4b15      	ldr	r3, [pc, #84]	; (8005108 <HAL_RCC_OscConfig+0x278>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b6:	f7fe fcff 	bl	8003ab8 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050be:	f7fe fcfb 	bl	8003ab8 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e12f      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <HAL_RCC_OscConfig+0x270>)
 80050d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x22e>
 80050dc:	e01c      	b.n	8005118 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050de:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <HAL_RCC_OscConfig+0x278>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e4:	f7fe fce8 	bl	8003ab8 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ea:	e00f      	b.n	800510c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ec:	f7fe fce4 	bl	8003ab8 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d908      	bls.n	800510c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e118      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
 80050fe:	bf00      	nop
 8005100:	40023800 	.word	0x40023800
 8005104:	42470000 	.word	0x42470000
 8005108:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800510c:	4b8a      	ldr	r3, [pc, #552]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 800510e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e9      	bne.n	80050ec <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8097 	beq.w	8005254 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005126:	2300      	movs	r3, #0
 8005128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800512a:	4b83      	ldr	r3, [pc, #524]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10f      	bne.n	8005156 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	4b7f      	ldr	r3, [pc, #508]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	4a7e      	ldr	r2, [pc, #504]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 8005140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005144:	6413      	str	r3, [r2, #64]	; 0x40
 8005146:	4b7c      	ldr	r3, [pc, #496]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005152:	2301      	movs	r3, #1
 8005154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005156:	4b79      	ldr	r3, [pc, #484]	; (800533c <HAL_RCC_OscConfig+0x4ac>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515e:	2b00      	cmp	r3, #0
 8005160:	d118      	bne.n	8005194 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005162:	4b76      	ldr	r3, [pc, #472]	; (800533c <HAL_RCC_OscConfig+0x4ac>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a75      	ldr	r2, [pc, #468]	; (800533c <HAL_RCC_OscConfig+0x4ac>)
 8005168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800516e:	f7fe fca3 	bl	8003ab8 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005176:	f7fe fc9f 	bl	8003ab8 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e0d3      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005188:	4b6c      	ldr	r3, [pc, #432]	; (800533c <HAL_RCC_OscConfig+0x4ac>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d106      	bne.n	80051aa <HAL_RCC_OscConfig+0x31a>
 800519c:	4b66      	ldr	r3, [pc, #408]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	4a65      	ldr	r2, [pc, #404]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	6713      	str	r3, [r2, #112]	; 0x70
 80051a8:	e01c      	b.n	80051e4 <HAL_RCC_OscConfig+0x354>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d10c      	bne.n	80051cc <HAL_RCC_OscConfig+0x33c>
 80051b2:	4b61      	ldr	r3, [pc, #388]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b6:	4a60      	ldr	r2, [pc, #384]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80051b8:	f043 0304 	orr.w	r3, r3, #4
 80051bc:	6713      	str	r3, [r2, #112]	; 0x70
 80051be:	4b5e      	ldr	r3, [pc, #376]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c2:	4a5d      	ldr	r2, [pc, #372]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80051c4:	f043 0301 	orr.w	r3, r3, #1
 80051c8:	6713      	str	r3, [r2, #112]	; 0x70
 80051ca:	e00b      	b.n	80051e4 <HAL_RCC_OscConfig+0x354>
 80051cc:	4b5a      	ldr	r3, [pc, #360]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80051ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d0:	4a59      	ldr	r2, [pc, #356]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	6713      	str	r3, [r2, #112]	; 0x70
 80051d8:	4b57      	ldr	r3, [pc, #348]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80051da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051dc:	4a56      	ldr	r2, [pc, #344]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80051de:	f023 0304 	bic.w	r3, r3, #4
 80051e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d015      	beq.n	8005218 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ec:	f7fe fc64 	bl	8003ab8 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f2:	e00a      	b.n	800520a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f4:	f7fe fc60 	bl	8003ab8 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005202:	4293      	cmp	r3, r2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e092      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520a:	4b4b      	ldr	r3, [pc, #300]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0ee      	beq.n	80051f4 <HAL_RCC_OscConfig+0x364>
 8005216:	e014      	b.n	8005242 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005218:	f7fe fc4e 	bl	8003ab8 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521e:	e00a      	b.n	8005236 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005220:	f7fe fc4a 	bl	8003ab8 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f241 3288 	movw	r2, #5000	; 0x1388
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e07c      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005236:	4b40      	ldr	r3, [pc, #256]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 8005238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1ee      	bne.n	8005220 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005242:	7dfb      	ldrb	r3, [r7, #23]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d105      	bne.n	8005254 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005248:	4b3b      	ldr	r3, [pc, #236]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	4a3a      	ldr	r2, [pc, #232]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 800524e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005252:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d068      	beq.n	800532e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800525c:	4b36      	ldr	r3, [pc, #216]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 030c 	and.w	r3, r3, #12
 8005264:	2b08      	cmp	r3, #8
 8005266:	d060      	beq.n	800532a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d145      	bne.n	80052fc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005270:	4b33      	ldr	r3, [pc, #204]	; (8005340 <HAL_RCC_OscConfig+0x4b0>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005276:	f7fe fc1f 	bl	8003ab8 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800527e:	f7fe fc1b 	bl	8003ab8 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e04f      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005290:	4b29      	ldr	r3, [pc, #164]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f0      	bne.n	800527e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	019b      	lsls	r3, r3, #6
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	085b      	lsrs	r3, r3, #1
 80052b4:	3b01      	subs	r3, #1
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	061b      	lsls	r3, r3, #24
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	071b      	lsls	r3, r3, #28
 80052c8:	491b      	ldr	r1, [pc, #108]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052ce:	4b1c      	ldr	r3, [pc, #112]	; (8005340 <HAL_RCC_OscConfig+0x4b0>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d4:	f7fe fbf0 	bl	8003ab8 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052dc:	f7fe fbec 	bl	8003ab8 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e020      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f0      	beq.n	80052dc <HAL_RCC_OscConfig+0x44c>
 80052fa:	e018      	b.n	800532e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fc:	4b10      	ldr	r3, [pc, #64]	; (8005340 <HAL_RCC_OscConfig+0x4b0>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005302:	f7fe fbd9 	bl	8003ab8 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800530a:	f7fe fbd5 	bl	8003ab8 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e009      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531c:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_RCC_OscConfig+0x4a8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f0      	bne.n	800530a <HAL_RCC_OscConfig+0x47a>
 8005328:	e001      	b.n	800532e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40023800 	.word	0x40023800
 800533c:	40007000 	.word	0x40007000
 8005340:	42470060 	.word	0x42470060

08005344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e01d      	b.n	8005392 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fe f94e 	bl	800360c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3304      	adds	r3, #4
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f000 fdaa 	bl	8005edc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6a1a      	ldr	r2, [r3, #32]
 80053b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10f      	bne.n	80053da <HAL_TIM_Base_Stop+0x40>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	f240 4344 	movw	r3, #1092	; 0x444
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <HAL_TIM_Base_Stop+0x40>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e01d      	b.n	800543e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f815 	bl	8005446 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	4619      	mov	r1, r3
 800542e:	4610      	mov	r0, r2
 8005430:	f000 fd54 	bl	8005edc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b0c      	cmp	r3, #12
 800546a:	d841      	bhi.n	80054f0 <HAL_TIM_OC_Start_IT+0x94>
 800546c:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <HAL_TIM_OC_Start_IT+0x18>)
 800546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005472:	bf00      	nop
 8005474:	080054a9 	.word	0x080054a9
 8005478:	080054f1 	.word	0x080054f1
 800547c:	080054f1 	.word	0x080054f1
 8005480:	080054f1 	.word	0x080054f1
 8005484:	080054bb 	.word	0x080054bb
 8005488:	080054f1 	.word	0x080054f1
 800548c:	080054f1 	.word	0x080054f1
 8005490:	080054f1 	.word	0x080054f1
 8005494:	080054cd 	.word	0x080054cd
 8005498:	080054f1 	.word	0x080054f1
 800549c:	080054f1 	.word	0x080054f1
 80054a0:	080054f1 	.word	0x080054f1
 80054a4:	080054df 	.word	0x080054df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0202 	orr.w	r2, r2, #2
 80054b6:	60da      	str	r2, [r3, #12]
      break;
 80054b8:	e01b      	b.n	80054f2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0204 	orr.w	r2, r2, #4
 80054c8:	60da      	str	r2, [r3, #12]
      break;
 80054ca:	e012      	b.n	80054f2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0208 	orr.w	r2, r2, #8
 80054da:	60da      	str	r2, [r3, #12]
      break;
 80054dc:	e009      	b.n	80054f2 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0210 	orr.w	r2, r2, #16
 80054ec:	60da      	str	r2, [r3, #12]
      break;
 80054ee:	e000      	b.n	80054f2 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80054f0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2201      	movs	r2, #1
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 f902 	bl	8006704 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a15      	ldr	r2, [pc, #84]	; (800555c <HAL_TIM_OC_Start_IT+0x100>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_TIM_OC_Start_IT+0xb8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a14      	ldr	r2, [pc, #80]	; (8005560 <HAL_TIM_OC_Start_IT+0x104>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d101      	bne.n	8005518 <HAL_TIM_OC_Start_IT+0xbc>
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <HAL_TIM_OC_Start_IT+0xbe>
 8005518:	2300      	movs	r3, #0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800552c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b06      	cmp	r3, #6
 800553e:	d007      	beq.n	8005550 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	40010000 	.word	0x40010000
 8005560:	40010400 	.word	0x40010400

08005564 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b0c      	cmp	r3, #12
 8005572:	d841      	bhi.n	80055f8 <HAL_TIM_OC_Stop_IT+0x94>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <HAL_TIM_OC_Stop_IT+0x18>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	080055b1 	.word	0x080055b1
 8005580:	080055f9 	.word	0x080055f9
 8005584:	080055f9 	.word	0x080055f9
 8005588:	080055f9 	.word	0x080055f9
 800558c:	080055c3 	.word	0x080055c3
 8005590:	080055f9 	.word	0x080055f9
 8005594:	080055f9 	.word	0x080055f9
 8005598:	080055f9 	.word	0x080055f9
 800559c:	080055d5 	.word	0x080055d5
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	080055f9 	.word	0x080055f9
 80055a8:	080055f9 	.word	0x080055f9
 80055ac:	080055e7 	.word	0x080055e7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0202 	bic.w	r2, r2, #2
 80055be:	60da      	str	r2, [r3, #12]
      break;
 80055c0:	e01b      	b.n	80055fa <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0204 	bic.w	r2, r2, #4
 80055d0:	60da      	str	r2, [r3, #12]
      break;
 80055d2:	e012      	b.n	80055fa <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0208 	bic.w	r2, r2, #8
 80055e2:	60da      	str	r2, [r3, #12]
      break;
 80055e4:	e009      	b.n	80055fa <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0210 	bic.w	r2, r2, #16
 80055f4:	60da      	str	r2, [r3, #12]
      break;
 80055f6:	e000      	b.n	80055fa <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 80055f8:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2200      	movs	r2, #0
 8005600:	6839      	ldr	r1, [r7, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f001 f87e 	bl	8006704 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a20      	ldr	r2, [pc, #128]	; (8005690 <HAL_TIM_OC_Stop_IT+0x12c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <HAL_TIM_OC_Stop_IT+0xb8>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1f      	ldr	r2, [pc, #124]	; (8005694 <HAL_TIM_OC_Stop_IT+0x130>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d101      	bne.n	8005620 <HAL_TIM_OC_Stop_IT+0xbc>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <HAL_TIM_OC_Stop_IT+0xbe>
 8005620:	2300      	movs	r3, #0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d017      	beq.n	8005656 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6a1a      	ldr	r2, [r3, #32]
 800562c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10f      	bne.n	8005656 <HAL_TIM_OC_Stop_IT+0xf2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6a1a      	ldr	r2, [r3, #32]
 800563c:	f240 4344 	movw	r3, #1092	; 0x444
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <HAL_TIM_OC_Stop_IT+0xf2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6a1a      	ldr	r2, [r3, #32]
 800565c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005660:	4013      	ands	r3, r2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10f      	bne.n	8005686 <HAL_TIM_OC_Stop_IT+0x122>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6a1a      	ldr	r2, [r3, #32]
 800566c:	f240 4344 	movw	r3, #1092	; 0x444
 8005670:	4013      	ands	r3, r2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d107      	bne.n	8005686 <HAL_TIM_OC_Stop_IT+0x122>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0201 	bic.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40010000 	.word	0x40010000
 8005694:	40010400 	.word	0x40010400

08005698 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e01d      	b.n	80056e6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f815 	bl	80056ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3304      	adds	r3, #4
 80056d4:	4619      	mov	r1, r3
 80056d6:	4610      	mov	r0, r2
 80056d8:	f000 fc00 	bl	8005edc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b0c      	cmp	r3, #12
 8005712:	d841      	bhi.n	8005798 <HAL_TIM_IC_Start_IT+0x94>
 8005714:	a201      	add	r2, pc, #4	; (adr r2, 800571c <HAL_TIM_IC_Start_IT+0x18>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	08005751 	.word	0x08005751
 8005720:	08005799 	.word	0x08005799
 8005724:	08005799 	.word	0x08005799
 8005728:	08005799 	.word	0x08005799
 800572c:	08005763 	.word	0x08005763
 8005730:	08005799 	.word	0x08005799
 8005734:	08005799 	.word	0x08005799
 8005738:	08005799 	.word	0x08005799
 800573c:	08005775 	.word	0x08005775
 8005740:	08005799 	.word	0x08005799
 8005744:	08005799 	.word	0x08005799
 8005748:	08005799 	.word	0x08005799
 800574c:	08005787 	.word	0x08005787
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0202 	orr.w	r2, r2, #2
 800575e:	60da      	str	r2, [r3, #12]
      break;
 8005760:	e01b      	b.n	800579a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0204 	orr.w	r2, r2, #4
 8005770:	60da      	str	r2, [r3, #12]
      break;
 8005772:	e012      	b.n	800579a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0208 	orr.w	r2, r2, #8
 8005782:	60da      	str	r2, [r3, #12]
      break;
 8005784:	e009      	b.n	800579a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0210 	orr.w	r2, r2, #16
 8005794:	60da      	str	r2, [r3, #12]
      break;
 8005796:	e000      	b.n	800579a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005798:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2201      	movs	r2, #1
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 ffae 	bl	8006704 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b06      	cmp	r3, #6
 80057b8:	d007      	beq.n	80057ca <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b0c      	cmp	r3, #12
 80057e2:	d841      	bhi.n	8005868 <HAL_TIM_IC_Stop_IT+0x94>
 80057e4:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <HAL_TIM_IC_Stop_IT+0x18>)
 80057e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ea:	bf00      	nop
 80057ec:	08005821 	.word	0x08005821
 80057f0:	08005869 	.word	0x08005869
 80057f4:	08005869 	.word	0x08005869
 80057f8:	08005869 	.word	0x08005869
 80057fc:	08005833 	.word	0x08005833
 8005800:	08005869 	.word	0x08005869
 8005804:	08005869 	.word	0x08005869
 8005808:	08005869 	.word	0x08005869
 800580c:	08005845 	.word	0x08005845
 8005810:	08005869 	.word	0x08005869
 8005814:	08005869 	.word	0x08005869
 8005818:	08005869 	.word	0x08005869
 800581c:	08005857 	.word	0x08005857
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0202 	bic.w	r2, r2, #2
 800582e:	60da      	str	r2, [r3, #12]
      break;
 8005830:	e01b      	b.n	800586a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0204 	bic.w	r2, r2, #4
 8005840:	60da      	str	r2, [r3, #12]
      break;
 8005842:	e012      	b.n	800586a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0208 	bic.w	r2, r2, #8
 8005852:	60da      	str	r2, [r3, #12]
      break;
 8005854:	e009      	b.n	800586a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0210 	bic.w	r2, r2, #16
 8005864:	60da      	str	r2, [r3, #12]
      break;
 8005866:	e000      	b.n	800586a <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8005868:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2200      	movs	r2, #0
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 ff46 	bl	8006704 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a1a      	ldr	r2, [r3, #32]
 800587e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005882:	4013      	ands	r3, r2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10f      	bne.n	80058a8 <HAL_TIM_IC_Stop_IT+0xd4>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6a1a      	ldr	r2, [r3, #32]
 800588e:	f240 4344 	movw	r3, #1092	; 0x444
 8005892:	4013      	ands	r3, r2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d107      	bne.n	80058a8 <HAL_TIM_IC_Stop_IT+0xd4>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0201 	bic.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop

080058b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d122      	bne.n	8005910 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d11b      	bne.n	8005910 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0202 	mvn.w	r2, #2
 80058e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fd fd88 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fd fd56 	bl	80033b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fad5 	bl	8005eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b04      	cmp	r3, #4
 800591c:	d122      	bne.n	8005964 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b04      	cmp	r3, #4
 800592a:	d11b      	bne.n	8005964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0204 	mvn.w	r2, #4
 8005934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fd fd5e 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 8005950:	e005      	b.n	800595e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fd fd2c 	bl	80033b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 faab 	bl	8005eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b08      	cmp	r3, #8
 8005970:	d122      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b08      	cmp	r3, #8
 800597e:	d11b      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0208 	mvn.w	r2, #8
 8005988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2204      	movs	r2, #4
 800598e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fd fd34 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 80059a4:	e005      	b.n	80059b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fd fd02 	bl	80033b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fa81 	bl	8005eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d122      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d11b      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0210 	mvn.w	r2, #16
 80059dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2208      	movs	r2, #8
 80059e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fd fd0a 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 80059f8:	e005      	b.n	8005a06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fd fcd8 	bl	80033b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fa57 	bl	8005eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d10e      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d107      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0201 	mvn.w	r2, #1
 8005a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fd fcd8 	bl	80033e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a42:	2b80      	cmp	r3, #128	; 0x80
 8005a44:	d10e      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a50:	2b80      	cmp	r3, #128	; 0x80
 8005a52:	d107      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fefc 	bl	800685c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d10e      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b40      	cmp	r3, #64	; 0x40
 8005a7e:	d107      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fa1c 	bl	8005ec8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d10e      	bne.n	8005abc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0320 	and.w	r3, r3, #32
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d107      	bne.n	8005abc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0220 	mvn.w	r2, #32
 8005ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fec6 	bl	8006848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005abc:	bf00      	nop
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_TIM_OC_ConfigChannel+0x1a>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e04e      	b.n	8005b7c <HAL_TIM_OC_ConfigChannel+0xb8>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b0c      	cmp	r3, #12
 8005af2:	d839      	bhi.n	8005b68 <HAL_TIM_OC_ConfigChannel+0xa4>
 8005af4:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <HAL_TIM_OC_ConfigChannel+0x38>)
 8005af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afa:	bf00      	nop
 8005afc:	08005b31 	.word	0x08005b31
 8005b00:	08005b69 	.word	0x08005b69
 8005b04:	08005b69 	.word	0x08005b69
 8005b08:	08005b69 	.word	0x08005b69
 8005b0c:	08005b3f 	.word	0x08005b3f
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b69 	.word	0x08005b69
 8005b18:	08005b69 	.word	0x08005b69
 8005b1c:	08005b4d 	.word	0x08005b4d
 8005b20:	08005b69 	.word	0x08005b69
 8005b24:	08005b69 	.word	0x08005b69
 8005b28:	08005b69 	.word	0x08005b69
 8005b2c:	08005b5b 	.word	0x08005b5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fa70 	bl	800601c <TIM_OC1_SetConfig>
      break;
 8005b3c:	e015      	b.n	8005b6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fad9 	bl	80060fc <TIM_OC2_SetConfig>
      break;
 8005b4a:	e00e      	b.n	8005b6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fb48 	bl	80061e8 <TIM_OC3_SetConfig>
      break;
 8005b58:	e007      	b.n	8005b6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fbb5 	bl	80062d0 <TIM_OC4_SetConfig>
      break;
 8005b66:	e000      	b.n	8005b6a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8005b68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_TIM_IC_ConfigChannel+0x1a>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e08a      	b.n	8005cb4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d11b      	bne.n	8005bec <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	6819      	ldr	r1, [r3, #0]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f000 fbda 	bl	800637c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699a      	ldr	r2, [r3, #24]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 020c 	bic.w	r2, r2, #12
 8005bd6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6999      	ldr	r1, [r3, #24]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	619a      	str	r2, [r3, #24]
 8005bea:	e05a      	b.n	8005ca2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d11c      	bne.n	8005c2c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f000 fc5e 	bl	80064c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699a      	ldr	r2, [r3, #24]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c14:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6999      	ldr	r1, [r3, #24]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	021a      	lsls	r2, r3, #8
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	619a      	str	r2, [r3, #24]
 8005c2a:	e03a      	b.n	8005ca2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	d11b      	bne.n	8005c6a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6818      	ldr	r0, [r3, #0]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6819      	ldr	r1, [r3, #0]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f000 fcab 	bl	800659c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 020c 	bic.w	r2, r2, #12
 8005c54:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69d9      	ldr	r1, [r3, #28]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	61da      	str	r2, [r3, #28]
 8005c68:	e01b      	b.n	8005ca2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f000 fccb 	bl	8006614 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c8c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69d9      	ldr	r1, [r3, #28]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	021a      	lsls	r2, r3, #8
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_TIM_ConfigClockSource+0x18>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e0a6      	b.n	8005e22 <HAL_TIM_ConfigClockSource+0x166>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d067      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x120>
 8005d0c:	2b40      	cmp	r3, #64	; 0x40
 8005d0e:	d80b      	bhi.n	8005d28 <HAL_TIM_ConfigClockSource+0x6c>
 8005d10:	2b10      	cmp	r3, #16
 8005d12:	d073      	beq.n	8005dfc <HAL_TIM_ConfigClockSource+0x140>
 8005d14:	2b10      	cmp	r3, #16
 8005d16:	d802      	bhi.n	8005d1e <HAL_TIM_ConfigClockSource+0x62>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d06f      	beq.n	8005dfc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005d1c:	e078      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d06c      	beq.n	8005dfc <HAL_TIM_ConfigClockSource+0x140>
 8005d22:	2b30      	cmp	r3, #48	; 0x30
 8005d24:	d06a      	beq.n	8005dfc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005d26:	e073      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d28:	2b70      	cmp	r3, #112	; 0x70
 8005d2a:	d00d      	beq.n	8005d48 <HAL_TIM_ConfigClockSource+0x8c>
 8005d2c:	2b70      	cmp	r3, #112	; 0x70
 8005d2e:	d804      	bhi.n	8005d3a <HAL_TIM_ConfigClockSource+0x7e>
 8005d30:	2b50      	cmp	r3, #80	; 0x50
 8005d32:	d033      	beq.n	8005d9c <HAL_TIM_ConfigClockSource+0xe0>
 8005d34:	2b60      	cmp	r3, #96	; 0x60
 8005d36:	d041      	beq.n	8005dbc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005d38:	e06a      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3e:	d066      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x152>
 8005d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d44:	d017      	beq.n	8005d76 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005d46:	e063      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	6899      	ldr	r1, [r3, #8]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f000 fcb4 	bl	80066c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	609a      	str	r2, [r3, #8]
      break;
 8005d74:	e04c      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	6899      	ldr	r1, [r3, #8]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f000 fc9d 	bl	80066c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d98:	609a      	str	r2, [r3, #8]
      break;
 8005d9a:	e039      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	6859      	ldr	r1, [r3, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	461a      	mov	r2, r3
 8005daa:	f000 fb5b 	bl	8006464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2150      	movs	r1, #80	; 0x50
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fc6a 	bl	800668e <TIM_ITRx_SetConfig>
      break;
 8005dba:	e029      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	6859      	ldr	r1, [r3, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f000 fbb7 	bl	800653c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2160      	movs	r1, #96	; 0x60
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fc5a 	bl	800668e <TIM_ITRx_SetConfig>
      break;
 8005dda:	e019      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6818      	ldr	r0, [r3, #0]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	6859      	ldr	r1, [r3, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	461a      	mov	r2, r3
 8005dea:	f000 fb3b 	bl	8006464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2140      	movs	r1, #64	; 0x40
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fc4a 	bl	800668e <TIM_ITRx_SetConfig>
      break;
 8005dfa:	e009      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f000 fc41 	bl	800668e <TIM_ITRx_SetConfig>
      break;
 8005e0c:	e000      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b0c      	cmp	r3, #12
 8005e3e:	d831      	bhi.n	8005ea4 <HAL_TIM_ReadCapturedValue+0x78>
 8005e40:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e46:	bf00      	nop
 8005e48:	08005e7d 	.word	0x08005e7d
 8005e4c:	08005ea5 	.word	0x08005ea5
 8005e50:	08005ea5 	.word	0x08005ea5
 8005e54:	08005ea5 	.word	0x08005ea5
 8005e58:	08005e87 	.word	0x08005e87
 8005e5c:	08005ea5 	.word	0x08005ea5
 8005e60:	08005ea5 	.word	0x08005ea5
 8005e64:	08005ea5 	.word	0x08005ea5
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005ea5 	.word	0x08005ea5
 8005e70:	08005ea5 	.word	0x08005ea5
 8005e74:	08005ea5 	.word	0x08005ea5
 8005e78:	08005e9b 	.word	0x08005e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	60fb      	str	r3, [r7, #12]

      break;
 8005e84:	e00f      	b.n	8005ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	60fb      	str	r3, [r7, #12]

      break;
 8005e8e:	e00a      	b.n	8005ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e96:	60fb      	str	r3, [r7, #12]

      break;
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	60fb      	str	r3, [r7, #12]

      break;
 8005ea2:	e000      	b.n	8005ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005ea4:	bf00      	nop
  }

  return tmpreg;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a40      	ldr	r2, [pc, #256]	; (8005ff0 <TIM_Base_SetConfig+0x114>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d013      	beq.n	8005f1c <TIM_Base_SetConfig+0x40>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efa:	d00f      	beq.n	8005f1c <TIM_Base_SetConfig+0x40>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a3d      	ldr	r2, [pc, #244]	; (8005ff4 <TIM_Base_SetConfig+0x118>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00b      	beq.n	8005f1c <TIM_Base_SetConfig+0x40>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a3c      	ldr	r2, [pc, #240]	; (8005ff8 <TIM_Base_SetConfig+0x11c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d007      	beq.n	8005f1c <TIM_Base_SetConfig+0x40>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a3b      	ldr	r2, [pc, #236]	; (8005ffc <TIM_Base_SetConfig+0x120>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d003      	beq.n	8005f1c <TIM_Base_SetConfig+0x40>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a3a      	ldr	r2, [pc, #232]	; (8006000 <TIM_Base_SetConfig+0x124>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d108      	bne.n	8005f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2f      	ldr	r2, [pc, #188]	; (8005ff0 <TIM_Base_SetConfig+0x114>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d02b      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3c:	d027      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a2c      	ldr	r2, [pc, #176]	; (8005ff4 <TIM_Base_SetConfig+0x118>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d023      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a2b      	ldr	r2, [pc, #172]	; (8005ff8 <TIM_Base_SetConfig+0x11c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d01f      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <TIM_Base_SetConfig+0x120>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d01b      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a29      	ldr	r2, [pc, #164]	; (8006000 <TIM_Base_SetConfig+0x124>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d017      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a28      	ldr	r2, [pc, #160]	; (8006004 <TIM_Base_SetConfig+0x128>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d013      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a27      	ldr	r2, [pc, #156]	; (8006008 <TIM_Base_SetConfig+0x12c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00f      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a26      	ldr	r2, [pc, #152]	; (800600c <TIM_Base_SetConfig+0x130>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00b      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a25      	ldr	r2, [pc, #148]	; (8006010 <TIM_Base_SetConfig+0x134>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d007      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a24      	ldr	r2, [pc, #144]	; (8006014 <TIM_Base_SetConfig+0x138>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a23      	ldr	r2, [pc, #140]	; (8006018 <TIM_Base_SetConfig+0x13c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d108      	bne.n	8005fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <TIM_Base_SetConfig+0x114>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_Base_SetConfig+0xf8>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a0c      	ldr	r2, [pc, #48]	; (8006000 <TIM_Base_SetConfig+0x124>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d103      	bne.n	8005fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	615a      	str	r2, [r3, #20]
}
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	40010000 	.word	0x40010000
 8005ff4:	40000400 	.word	0x40000400
 8005ff8:	40000800 	.word	0x40000800
 8005ffc:	40000c00 	.word	0x40000c00
 8006000:	40010400 	.word	0x40010400
 8006004:	40014000 	.word	0x40014000
 8006008:	40014400 	.word	0x40014400
 800600c:	40014800 	.word	0x40014800
 8006010:	40001800 	.word	0x40001800
 8006014:	40001c00 	.word	0x40001c00
 8006018:	40002000 	.word	0x40002000

0800601c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0201 	bic.w	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f023 0302 	bic.w	r3, r3, #2
 8006064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a20      	ldr	r2, [pc, #128]	; (80060f4 <TIM_OC1_SetConfig+0xd8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_OC1_SetConfig+0x64>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a1f      	ldr	r2, [pc, #124]	; (80060f8 <TIM_OC1_SetConfig+0xdc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d10c      	bne.n	800609a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f023 0308 	bic.w	r3, r3, #8
 8006086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f023 0304 	bic.w	r3, r3, #4
 8006098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <TIM_OC1_SetConfig+0xd8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d003      	beq.n	80060aa <TIM_OC1_SetConfig+0x8e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a14      	ldr	r2, [pc, #80]	; (80060f8 <TIM_OC1_SetConfig+0xdc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d111      	bne.n	80060ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	621a      	str	r2, [r3, #32]
}
 80060e8:	bf00      	nop
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40010400 	.word	0x40010400

080060fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f023 0210 	bic.w	r2, r3, #16
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f023 0320 	bic.w	r3, r3, #32
 8006146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a22      	ldr	r2, [pc, #136]	; (80061e0 <TIM_OC2_SetConfig+0xe4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d003      	beq.n	8006164 <TIM_OC2_SetConfig+0x68>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a21      	ldr	r2, [pc, #132]	; (80061e4 <TIM_OC2_SetConfig+0xe8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d10d      	bne.n	8006180 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800616a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a17      	ldr	r2, [pc, #92]	; (80061e0 <TIM_OC2_SetConfig+0xe4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC2_SetConfig+0x94>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a16      	ldr	r2, [pc, #88]	; (80061e4 <TIM_OC2_SetConfig+0xe8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d113      	bne.n	80061b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800619e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40010400 	.word	0x40010400

080061e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <TIM_OC3_SetConfig+0xe0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d003      	beq.n	800624e <TIM_OC3_SetConfig+0x66>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a20      	ldr	r2, [pc, #128]	; (80062cc <TIM_OC3_SetConfig+0xe4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d10d      	bne.n	800626a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a16      	ldr	r2, [pc, #88]	; (80062c8 <TIM_OC3_SetConfig+0xe0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_OC3_SetConfig+0x92>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a15      	ldr	r2, [pc, #84]	; (80062cc <TIM_OC3_SetConfig+0xe4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d113      	bne.n	80062a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	4313      	orrs	r3, r2
 8006294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	621a      	str	r2, [r3, #32]
}
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40010000 	.word	0x40010000
 80062cc:	40010400 	.word	0x40010400

080062d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800631a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	031b      	lsls	r3, r3, #12
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a12      	ldr	r2, [pc, #72]	; (8006374 <TIM_OC4_SetConfig+0xa4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d003      	beq.n	8006338 <TIM_OC4_SetConfig+0x68>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a11      	ldr	r2, [pc, #68]	; (8006378 <TIM_OC4_SetConfig+0xa8>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d109      	bne.n	800634c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800633e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	019b      	lsls	r3, r3, #6
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	621a      	str	r2, [r3, #32]
}
 8006366:	bf00      	nop
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	40010000 	.word	0x40010000
 8006378:	40010400 	.word	0x40010400

0800637c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	f023 0201 	bic.w	r2, r3, #1
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a28      	ldr	r2, [pc, #160]	; (8006448 <TIM_TI1_SetConfig+0xcc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01b      	beq.n	80063e2 <TIM_TI1_SetConfig+0x66>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b0:	d017      	beq.n	80063e2 <TIM_TI1_SetConfig+0x66>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a25      	ldr	r2, [pc, #148]	; (800644c <TIM_TI1_SetConfig+0xd0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d013      	beq.n	80063e2 <TIM_TI1_SetConfig+0x66>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4a24      	ldr	r2, [pc, #144]	; (8006450 <TIM_TI1_SetConfig+0xd4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00f      	beq.n	80063e2 <TIM_TI1_SetConfig+0x66>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a23      	ldr	r2, [pc, #140]	; (8006454 <TIM_TI1_SetConfig+0xd8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00b      	beq.n	80063e2 <TIM_TI1_SetConfig+0x66>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4a22      	ldr	r2, [pc, #136]	; (8006458 <TIM_TI1_SetConfig+0xdc>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d007      	beq.n	80063e2 <TIM_TI1_SetConfig+0x66>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4a21      	ldr	r2, [pc, #132]	; (800645c <TIM_TI1_SetConfig+0xe0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d003      	beq.n	80063e2 <TIM_TI1_SetConfig+0x66>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4a20      	ldr	r2, [pc, #128]	; (8006460 <TIM_TI1_SetConfig+0xe4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d101      	bne.n	80063e6 <TIM_TI1_SetConfig+0x6a>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <TIM_TI1_SetConfig+0x6c>
 80063e6:	2300      	movs	r3, #0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	e003      	b.n	8006406 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f043 0301 	orr.w	r3, r3, #1
 8006404:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800640c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	b2db      	uxtb	r3, r3
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f023 030a 	bic.w	r3, r3, #10
 8006420:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f003 030a 	and.w	r3, r3, #10
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40010000 	.word	0x40010000
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40010400 	.word	0x40010400
 800645c:	40014000 	.word	0x40014000
 8006460:	40001800 	.word	0x40001800

08006464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	f023 0201 	bic.w	r2, r3, #1
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800648e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f023 030a 	bic.w	r3, r3, #10
 80064a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	621a      	str	r2, [r3, #32]
}
 80064b6:	bf00      	nop
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b087      	sub	sp, #28
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	f023 0210 	bic.w	r2, r3, #16
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	031b      	lsls	r3, r3, #12
 8006506:	b29b      	uxth	r3, r3
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006514:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	621a      	str	r2, [r3, #32]
}
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f023 0210 	bic.w	r2, r3, #16
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006566:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	031b      	lsls	r3, r3, #12
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006578:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	621a      	str	r2, [r3, #32]
}
 8006590:	bf00      	nop
 8006592:	371c      	adds	r7, #28
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f023 0303 	bic.w	r3, r3, #3
 80065c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80065ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	621a      	str	r2, [r3, #32]
}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006640:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006652:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	031b      	lsls	r3, r3, #12
 8006658:	b29b      	uxth	r3, r3
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006666:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	031b      	lsls	r3, r3, #12
 800666c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	621a      	str	r2, [r3, #32]
}
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800668e:	b480      	push	{r7}
 8006690:	b085      	sub	sp, #20
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f043 0307 	orr.w	r3, r3, #7
 80066b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	609a      	str	r2, [r3, #8]
}
 80066b8:	bf00      	nop
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	021a      	lsls	r2, r3, #8
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	609a      	str	r2, [r3, #8]
}
 80066f8:	bf00      	nop
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	2201      	movs	r2, #1
 8006718:	fa02 f303 	lsl.w	r3, r2, r3
 800671c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a1a      	ldr	r2, [r3, #32]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	43db      	mvns	r3, r3
 8006726:	401a      	ands	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a1a      	ldr	r2, [r3, #32]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	fa01 f303 	lsl.w	r3, r1, r3
 800673c:	431a      	orrs	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	621a      	str	r2, [r3, #32]
}
 8006742:	bf00      	nop
 8006744:	371c      	adds	r7, #28
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006764:	2302      	movs	r3, #2
 8006766:	e05a      	b.n	800681e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a21      	ldr	r2, [pc, #132]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d022      	beq.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b4:	d01d      	beq.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1d      	ldr	r2, [pc, #116]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d018      	beq.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1b      	ldr	r2, [pc, #108]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d013      	beq.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1a      	ldr	r2, [pc, #104]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00e      	beq.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a18      	ldr	r2, [pc, #96]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d009      	beq.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a17      	ldr	r2, [pc, #92]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d004      	beq.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a15      	ldr	r2, [pc, #84]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d10c      	bne.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	4313      	orrs	r3, r2
 8006802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40010000 	.word	0x40010000
 8006830:	40000400 	.word	0x40000400
 8006834:	40000800 	.word	0x40000800
 8006838:	40000c00 	.word	0x40000c00
 800683c:	40010400 	.word	0x40010400
 8006840:	40014000 	.word	0x40014000
 8006844:	40001800 	.word	0x40001800

08006848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e03f      	b.n	8006902 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fc ff7a 	bl	8003790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2224      	movs	r2, #36	; 0x24
 80068a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fb97 	bl	8006fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	691a      	ldr	r2, [r3, #16]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b088      	sub	sp, #32
 800690e:	af02      	add	r7, sp, #8
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	603b      	str	r3, [r7, #0]
 8006916:	4613      	mov	r3, r2
 8006918:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b20      	cmp	r3, #32
 8006928:	f040 8083 	bne.w	8006a32 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <HAL_UART_Transmit+0x2e>
 8006932:	88fb      	ldrh	r3, [r7, #6]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e07b      	b.n	8006a34 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_UART_Transmit+0x40>
 8006946:	2302      	movs	r3, #2
 8006948:	e074      	b.n	8006a34 <HAL_UART_Transmit+0x12a>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2221      	movs	r2, #33	; 0x21
 800695c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006960:	f7fd f8aa 	bl	8003ab8 <HAL_GetTick>
 8006964:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	88fa      	ldrh	r2, [r7, #6]
 800696a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	88fa      	ldrh	r2, [r7, #6]
 8006970:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800697a:	e042      	b.n	8006a02 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006980:	b29b      	uxth	r3, r3
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006992:	d122      	bne.n	80069da <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2200      	movs	r2, #0
 800699c:	2180      	movs	r1, #128	; 0x80
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 f9b6 	bl	8006d10 <UART_WaitOnFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e042      	b.n	8006a34 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d103      	bne.n	80069d2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	3302      	adds	r3, #2
 80069ce:	60bb      	str	r3, [r7, #8]
 80069d0:	e017      	b.n	8006a02 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	3301      	adds	r3, #1
 80069d6:	60bb      	str	r3, [r7, #8]
 80069d8:	e013      	b.n	8006a02 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2200      	movs	r2, #0
 80069e2:	2180      	movs	r1, #128	; 0x80
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f993 	bl	8006d10 <UART_WaitOnFlagUntilTimeout>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e01f      	b.n	8006a34 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	60ba      	str	r2, [r7, #8]
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1b7      	bne.n	800697c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2200      	movs	r2, #0
 8006a14:	2140      	movs	r1, #64	; 0x40
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f97a 	bl	8006d10 <UART_WaitOnFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e006      	b.n	8006a34 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e000      	b.n	8006a34 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006a32:	2302      	movs	r3, #2
  }
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d140      	bne.n	8006ad8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <HAL_UART_Receive_IT+0x26>
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e039      	b.n	8006ada <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_UART_Receive_IT+0x38>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e032      	b.n	8006ada <HAL_UART_Receive_IT+0x9e>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	88fa      	ldrh	r2, [r7, #6]
 8006a86:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	88fa      	ldrh	r2, [r7, #6]
 8006a8c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2222      	movs	r2, #34	; 0x22
 8006a98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ab2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695a      	ldr	r2, [r3, #20]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0201 	orr.w	r2, r2, #1
 8006ac2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0220 	orr.w	r2, r2, #32
 8006ad2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e000      	b.n	8006ada <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006ad8:	2302      	movs	r3, #2
  }
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
	...

08006ae8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <HAL_UART_IRQHandler+0x52>
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f9d6 	bl	8006ee4 <UART_Receive_IT>
      return;
 8006b38:	e0d1      	b.n	8006cde <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80b0 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x1ba>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d105      	bne.n	8006b58 <HAL_UART_IRQHandler+0x70>
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 80a5 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <HAL_UART_IRQHandler+0x90>
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b70:	f043 0201 	orr.w	r2, r3, #1
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <HAL_UART_IRQHandler+0xb0>
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	f043 0202 	orr.w	r2, r3, #2
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00a      	beq.n	8006bb8 <HAL_UART_IRQHandler+0xd0>
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb0:	f043 0204 	orr.w	r2, r3, #4
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00f      	beq.n	8006be2 <HAL_UART_IRQHandler+0xfa>
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d104      	bne.n	8006bd6 <HAL_UART_IRQHandler+0xee>
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	f043 0208 	orr.w	r2, r3, #8
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d078      	beq.n	8006cdc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	f003 0320 	and.w	r3, r3, #32
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d007      	beq.n	8006c04 <HAL_UART_IRQHandler+0x11c>
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f970 	bl	8006ee4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b40      	cmp	r3, #64	; 0x40
 8006c10:	bf0c      	ite	eq
 8006c12:	2301      	moveq	r3, #1
 8006c14:	2300      	movne	r3, #0
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d102      	bne.n	8006c2c <HAL_UART_IRQHandler+0x144>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d031      	beq.n	8006c90 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f8b9 	bl	8006da4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d123      	bne.n	8006c88 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	695a      	ldr	r2, [r3, #20]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c4e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d013      	beq.n	8006c80 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5c:	4a21      	ldr	r2, [pc, #132]	; (8006ce4 <HAL_UART_IRQHandler+0x1fc>)
 8006c5e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fd fa13 	bl	8004090 <HAL_DMA_Abort_IT>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d016      	beq.n	8006c9e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7e:	e00e      	b.n	8006c9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f83b 	bl	8006cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c86:	e00a      	b.n	8006c9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f837 	bl	8006cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c8e:	e006      	b.n	8006c9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f833 	bl	8006cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006c9c:	e01e      	b.n	8006cdc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9e:	bf00      	nop
    return;
 8006ca0:	e01c      	b.n	8006cdc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d008      	beq.n	8006cbe <HAL_UART_IRQHandler+0x1d6>
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f8a6 	bl	8006e08 <UART_Transmit_IT>
    return;
 8006cbc:	e00f      	b.n	8006cde <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <HAL_UART_IRQHandler+0x1f6>
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f8ee 	bl	8006eb4 <UART_EndTransmit_IT>
    return;
 8006cd8:	bf00      	nop
 8006cda:	e000      	b.n	8006cde <HAL_UART_IRQHandler+0x1f6>
    return;
 8006cdc:	bf00      	nop
  }
}
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	08006de1 	.word	0x08006de1

08006ce8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d20:	e02c      	b.n	8006d7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d028      	beq.n	8006d7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d007      	beq.n	8006d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d30:	f7fc fec2 	bl	8003ab8 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d21d      	bcs.n	8006d7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695a      	ldr	r2, [r3, #20]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e00f      	b.n	8006d9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	4013      	ands	r3, r2
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	bf0c      	ite	eq
 8006d8c:	2301      	moveq	r3, #1
 8006d8e:	2300      	movne	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	461a      	mov	r2, r3
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d0c3      	beq.n	8006d22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006dba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695a      	ldr	r2, [r3, #20]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0201 	bic.w	r2, r2, #1
 8006dca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff ff7e 	bl	8006cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e00:	bf00      	nop
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b21      	cmp	r3, #33	; 0x21
 8006e1a:	d144      	bne.n	8006ea6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e24:	d11a      	bne.n	8006e5c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e3a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d105      	bne.n	8006e50 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	1c9a      	adds	r2, r3, #2
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	621a      	str	r2, [r3, #32]
 8006e4e:	e00e      	b.n	8006e6e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	621a      	str	r2, [r3, #32]
 8006e5a:	e008      	b.n	8006e6e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	1c59      	adds	r1, r3, #1
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6211      	str	r1, [r2, #32]
 8006e66:	781a      	ldrb	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10f      	bne.n	8006ea2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ea0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e000      	b.n	8006ea8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006ea6:	2302      	movs	r3, #2
  }
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68da      	ldr	r2, [r3, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff ff07 	bl	8006ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b22      	cmp	r3, #34	; 0x22
 8006ef6:	d171      	bne.n	8006fdc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f00:	d123      	bne.n	8006f4a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10e      	bne.n	8006f2e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f26:	1c9a      	adds	r2, r3, #2
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f2c:	e029      	b.n	8006f82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	629a      	str	r2, [r3, #40]	; 0x28
 8006f48:	e01b      	b.n	8006f82 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6858      	ldr	r0, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	1c59      	adds	r1, r3, #1
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6291      	str	r1, [r2, #40]	; 0x28
 8006f62:	b2c2      	uxtb	r2, r0
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	e00c      	b.n	8006f82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f74:	1c58      	adds	r0, r3, #1
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	6288      	str	r0, [r1, #40]	; 0x28
 8006f7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d120      	bne.n	8006fd8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0220 	bic.w	r2, r2, #32
 8006fa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695a      	ldr	r2, [r3, #20]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0201 	bic.w	r2, r2, #1
 8006fc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fc fa3a 	bl	8003448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e002      	b.n	8006fde <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e000      	b.n	8006fde <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006fdc:	2302      	movs	r3, #2
  }
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800702a:	f023 030c 	bic.w	r3, r3, #12
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6812      	ldr	r2, [r2, #0]
 8007032:	68f9      	ldr	r1, [r7, #12]
 8007034:	430b      	orrs	r3, r1
 8007036:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007056:	f040 818b 	bne.w	8007370 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4ac1      	ldr	r2, [pc, #772]	; (8007364 <UART_SetConfig+0x37c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d005      	beq.n	8007070 <UART_SetConfig+0x88>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4abf      	ldr	r2, [pc, #764]	; (8007368 <UART_SetConfig+0x380>)
 800706a:	4293      	cmp	r3, r2
 800706c:	f040 80bd 	bne.w	80071ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007070:	f7fd fd5a 	bl	8004b28 <HAL_RCC_GetPCLK2Freq>
 8007074:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	461d      	mov	r5, r3
 800707a:	f04f 0600 	mov.w	r6, #0
 800707e:	46a8      	mov	r8, r5
 8007080:	46b1      	mov	r9, r6
 8007082:	eb18 0308 	adds.w	r3, r8, r8
 8007086:	eb49 0409 	adc.w	r4, r9, r9
 800708a:	4698      	mov	r8, r3
 800708c:	46a1      	mov	r9, r4
 800708e:	eb18 0805 	adds.w	r8, r8, r5
 8007092:	eb49 0906 	adc.w	r9, r9, r6
 8007096:	f04f 0100 	mov.w	r1, #0
 800709a:	f04f 0200 	mov.w	r2, #0
 800709e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070aa:	4688      	mov	r8, r1
 80070ac:	4691      	mov	r9, r2
 80070ae:	eb18 0005 	adds.w	r0, r8, r5
 80070b2:	eb49 0106 	adc.w	r1, r9, r6
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	461d      	mov	r5, r3
 80070bc:	f04f 0600 	mov.w	r6, #0
 80070c0:	196b      	adds	r3, r5, r5
 80070c2:	eb46 0406 	adc.w	r4, r6, r6
 80070c6:	461a      	mov	r2, r3
 80070c8:	4623      	mov	r3, r4
 80070ca:	f7f9 fd85 	bl	8000bd8 <__aeabi_uldivmod>
 80070ce:	4603      	mov	r3, r0
 80070d0:	460c      	mov	r4, r1
 80070d2:	461a      	mov	r2, r3
 80070d4:	4ba5      	ldr	r3, [pc, #660]	; (800736c <UART_SetConfig+0x384>)
 80070d6:	fba3 2302 	umull	r2, r3, r3, r2
 80070da:	095b      	lsrs	r3, r3, #5
 80070dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	461d      	mov	r5, r3
 80070e4:	f04f 0600 	mov.w	r6, #0
 80070e8:	46a9      	mov	r9, r5
 80070ea:	46b2      	mov	sl, r6
 80070ec:	eb19 0309 	adds.w	r3, r9, r9
 80070f0:	eb4a 040a 	adc.w	r4, sl, sl
 80070f4:	4699      	mov	r9, r3
 80070f6:	46a2      	mov	sl, r4
 80070f8:	eb19 0905 	adds.w	r9, r9, r5
 80070fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007100:	f04f 0100 	mov.w	r1, #0
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800710c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007110:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007114:	4689      	mov	r9, r1
 8007116:	4692      	mov	sl, r2
 8007118:	eb19 0005 	adds.w	r0, r9, r5
 800711c:	eb4a 0106 	adc.w	r1, sl, r6
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	461d      	mov	r5, r3
 8007126:	f04f 0600 	mov.w	r6, #0
 800712a:	196b      	adds	r3, r5, r5
 800712c:	eb46 0406 	adc.w	r4, r6, r6
 8007130:	461a      	mov	r2, r3
 8007132:	4623      	mov	r3, r4
 8007134:	f7f9 fd50 	bl	8000bd8 <__aeabi_uldivmod>
 8007138:	4603      	mov	r3, r0
 800713a:	460c      	mov	r4, r1
 800713c:	461a      	mov	r2, r3
 800713e:	4b8b      	ldr	r3, [pc, #556]	; (800736c <UART_SetConfig+0x384>)
 8007140:	fba3 1302 	umull	r1, r3, r3, r2
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	2164      	movs	r1, #100	; 0x64
 8007148:	fb01 f303 	mul.w	r3, r1, r3
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	3332      	adds	r3, #50	; 0x32
 8007152:	4a86      	ldr	r2, [pc, #536]	; (800736c <UART_SetConfig+0x384>)
 8007154:	fba2 2303 	umull	r2, r3, r2, r3
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007160:	4498      	add	r8, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	461d      	mov	r5, r3
 8007166:	f04f 0600 	mov.w	r6, #0
 800716a:	46a9      	mov	r9, r5
 800716c:	46b2      	mov	sl, r6
 800716e:	eb19 0309 	adds.w	r3, r9, r9
 8007172:	eb4a 040a 	adc.w	r4, sl, sl
 8007176:	4699      	mov	r9, r3
 8007178:	46a2      	mov	sl, r4
 800717a:	eb19 0905 	adds.w	r9, r9, r5
 800717e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007182:	f04f 0100 	mov.w	r1, #0
 8007186:	f04f 0200 	mov.w	r2, #0
 800718a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800718e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007192:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007196:	4689      	mov	r9, r1
 8007198:	4692      	mov	sl, r2
 800719a:	eb19 0005 	adds.w	r0, r9, r5
 800719e:	eb4a 0106 	adc.w	r1, sl, r6
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	461d      	mov	r5, r3
 80071a8:	f04f 0600 	mov.w	r6, #0
 80071ac:	196b      	adds	r3, r5, r5
 80071ae:	eb46 0406 	adc.w	r4, r6, r6
 80071b2:	461a      	mov	r2, r3
 80071b4:	4623      	mov	r3, r4
 80071b6:	f7f9 fd0f 	bl	8000bd8 <__aeabi_uldivmod>
 80071ba:	4603      	mov	r3, r0
 80071bc:	460c      	mov	r4, r1
 80071be:	461a      	mov	r2, r3
 80071c0:	4b6a      	ldr	r3, [pc, #424]	; (800736c <UART_SetConfig+0x384>)
 80071c2:	fba3 1302 	umull	r1, r3, r3, r2
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	2164      	movs	r1, #100	; 0x64
 80071ca:	fb01 f303 	mul.w	r3, r1, r3
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	3332      	adds	r3, #50	; 0x32
 80071d4:	4a65      	ldr	r2, [pc, #404]	; (800736c <UART_SetConfig+0x384>)
 80071d6:	fba2 2303 	umull	r2, r3, r2, r3
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	f003 0207 	and.w	r2, r3, #7
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4442      	add	r2, r8
 80071e6:	609a      	str	r2, [r3, #8]
 80071e8:	e26f      	b.n	80076ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071ea:	f7fd fc89 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 80071ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	461d      	mov	r5, r3
 80071f4:	f04f 0600 	mov.w	r6, #0
 80071f8:	46a8      	mov	r8, r5
 80071fa:	46b1      	mov	r9, r6
 80071fc:	eb18 0308 	adds.w	r3, r8, r8
 8007200:	eb49 0409 	adc.w	r4, r9, r9
 8007204:	4698      	mov	r8, r3
 8007206:	46a1      	mov	r9, r4
 8007208:	eb18 0805 	adds.w	r8, r8, r5
 800720c:	eb49 0906 	adc.w	r9, r9, r6
 8007210:	f04f 0100 	mov.w	r1, #0
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800721c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007220:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007224:	4688      	mov	r8, r1
 8007226:	4691      	mov	r9, r2
 8007228:	eb18 0005 	adds.w	r0, r8, r5
 800722c:	eb49 0106 	adc.w	r1, r9, r6
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	461d      	mov	r5, r3
 8007236:	f04f 0600 	mov.w	r6, #0
 800723a:	196b      	adds	r3, r5, r5
 800723c:	eb46 0406 	adc.w	r4, r6, r6
 8007240:	461a      	mov	r2, r3
 8007242:	4623      	mov	r3, r4
 8007244:	f7f9 fcc8 	bl	8000bd8 <__aeabi_uldivmod>
 8007248:	4603      	mov	r3, r0
 800724a:	460c      	mov	r4, r1
 800724c:	461a      	mov	r2, r3
 800724e:	4b47      	ldr	r3, [pc, #284]	; (800736c <UART_SetConfig+0x384>)
 8007250:	fba3 2302 	umull	r2, r3, r3, r2
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	461d      	mov	r5, r3
 800725e:	f04f 0600 	mov.w	r6, #0
 8007262:	46a9      	mov	r9, r5
 8007264:	46b2      	mov	sl, r6
 8007266:	eb19 0309 	adds.w	r3, r9, r9
 800726a:	eb4a 040a 	adc.w	r4, sl, sl
 800726e:	4699      	mov	r9, r3
 8007270:	46a2      	mov	sl, r4
 8007272:	eb19 0905 	adds.w	r9, r9, r5
 8007276:	eb4a 0a06 	adc.w	sl, sl, r6
 800727a:	f04f 0100 	mov.w	r1, #0
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007286:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800728a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800728e:	4689      	mov	r9, r1
 8007290:	4692      	mov	sl, r2
 8007292:	eb19 0005 	adds.w	r0, r9, r5
 8007296:	eb4a 0106 	adc.w	r1, sl, r6
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	461d      	mov	r5, r3
 80072a0:	f04f 0600 	mov.w	r6, #0
 80072a4:	196b      	adds	r3, r5, r5
 80072a6:	eb46 0406 	adc.w	r4, r6, r6
 80072aa:	461a      	mov	r2, r3
 80072ac:	4623      	mov	r3, r4
 80072ae:	f7f9 fc93 	bl	8000bd8 <__aeabi_uldivmod>
 80072b2:	4603      	mov	r3, r0
 80072b4:	460c      	mov	r4, r1
 80072b6:	461a      	mov	r2, r3
 80072b8:	4b2c      	ldr	r3, [pc, #176]	; (800736c <UART_SetConfig+0x384>)
 80072ba:	fba3 1302 	umull	r1, r3, r3, r2
 80072be:	095b      	lsrs	r3, r3, #5
 80072c0:	2164      	movs	r1, #100	; 0x64
 80072c2:	fb01 f303 	mul.w	r3, r1, r3
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	3332      	adds	r3, #50	; 0x32
 80072cc:	4a27      	ldr	r2, [pc, #156]	; (800736c <UART_SetConfig+0x384>)
 80072ce:	fba2 2303 	umull	r2, r3, r2, r3
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072da:	4498      	add	r8, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	461d      	mov	r5, r3
 80072e0:	f04f 0600 	mov.w	r6, #0
 80072e4:	46a9      	mov	r9, r5
 80072e6:	46b2      	mov	sl, r6
 80072e8:	eb19 0309 	adds.w	r3, r9, r9
 80072ec:	eb4a 040a 	adc.w	r4, sl, sl
 80072f0:	4699      	mov	r9, r3
 80072f2:	46a2      	mov	sl, r4
 80072f4:	eb19 0905 	adds.w	r9, r9, r5
 80072f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80072fc:	f04f 0100 	mov.w	r1, #0
 8007300:	f04f 0200 	mov.w	r2, #0
 8007304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007308:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800730c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007310:	4689      	mov	r9, r1
 8007312:	4692      	mov	sl, r2
 8007314:	eb19 0005 	adds.w	r0, r9, r5
 8007318:	eb4a 0106 	adc.w	r1, sl, r6
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	461d      	mov	r5, r3
 8007322:	f04f 0600 	mov.w	r6, #0
 8007326:	196b      	adds	r3, r5, r5
 8007328:	eb46 0406 	adc.w	r4, r6, r6
 800732c:	461a      	mov	r2, r3
 800732e:	4623      	mov	r3, r4
 8007330:	f7f9 fc52 	bl	8000bd8 <__aeabi_uldivmod>
 8007334:	4603      	mov	r3, r0
 8007336:	460c      	mov	r4, r1
 8007338:	461a      	mov	r2, r3
 800733a:	4b0c      	ldr	r3, [pc, #48]	; (800736c <UART_SetConfig+0x384>)
 800733c:	fba3 1302 	umull	r1, r3, r3, r2
 8007340:	095b      	lsrs	r3, r3, #5
 8007342:	2164      	movs	r1, #100	; 0x64
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	3332      	adds	r3, #50	; 0x32
 800734e:	4a07      	ldr	r2, [pc, #28]	; (800736c <UART_SetConfig+0x384>)
 8007350:	fba2 2303 	umull	r2, r3, r2, r3
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	f003 0207 	and.w	r2, r3, #7
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4442      	add	r2, r8
 8007360:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007362:	e1b2      	b.n	80076ca <UART_SetConfig+0x6e2>
 8007364:	40011000 	.word	0x40011000
 8007368:	40011400 	.word	0x40011400
 800736c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4ad7      	ldr	r2, [pc, #860]	; (80076d4 <UART_SetConfig+0x6ec>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d005      	beq.n	8007386 <UART_SetConfig+0x39e>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4ad6      	ldr	r2, [pc, #856]	; (80076d8 <UART_SetConfig+0x6f0>)
 8007380:	4293      	cmp	r3, r2
 8007382:	f040 80d1 	bne.w	8007528 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007386:	f7fd fbcf 	bl	8004b28 <HAL_RCC_GetPCLK2Freq>
 800738a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	469a      	mov	sl, r3
 8007390:	f04f 0b00 	mov.w	fp, #0
 8007394:	46d0      	mov	r8, sl
 8007396:	46d9      	mov	r9, fp
 8007398:	eb18 0308 	adds.w	r3, r8, r8
 800739c:	eb49 0409 	adc.w	r4, r9, r9
 80073a0:	4698      	mov	r8, r3
 80073a2:	46a1      	mov	r9, r4
 80073a4:	eb18 080a 	adds.w	r8, r8, sl
 80073a8:	eb49 090b 	adc.w	r9, r9, fp
 80073ac:	f04f 0100 	mov.w	r1, #0
 80073b0:	f04f 0200 	mov.w	r2, #0
 80073b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80073b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80073bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80073c0:	4688      	mov	r8, r1
 80073c2:	4691      	mov	r9, r2
 80073c4:	eb1a 0508 	adds.w	r5, sl, r8
 80073c8:	eb4b 0609 	adc.w	r6, fp, r9
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	4619      	mov	r1, r3
 80073d2:	f04f 0200 	mov.w	r2, #0
 80073d6:	f04f 0300 	mov.w	r3, #0
 80073da:	f04f 0400 	mov.w	r4, #0
 80073de:	0094      	lsls	r4, r2, #2
 80073e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80073e4:	008b      	lsls	r3, r1, #2
 80073e6:	461a      	mov	r2, r3
 80073e8:	4623      	mov	r3, r4
 80073ea:	4628      	mov	r0, r5
 80073ec:	4631      	mov	r1, r6
 80073ee:	f7f9 fbf3 	bl	8000bd8 <__aeabi_uldivmod>
 80073f2:	4603      	mov	r3, r0
 80073f4:	460c      	mov	r4, r1
 80073f6:	461a      	mov	r2, r3
 80073f8:	4bb8      	ldr	r3, [pc, #736]	; (80076dc <UART_SetConfig+0x6f4>)
 80073fa:	fba3 2302 	umull	r2, r3, r3, r2
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	469b      	mov	fp, r3
 8007408:	f04f 0c00 	mov.w	ip, #0
 800740c:	46d9      	mov	r9, fp
 800740e:	46e2      	mov	sl, ip
 8007410:	eb19 0309 	adds.w	r3, r9, r9
 8007414:	eb4a 040a 	adc.w	r4, sl, sl
 8007418:	4699      	mov	r9, r3
 800741a:	46a2      	mov	sl, r4
 800741c:	eb19 090b 	adds.w	r9, r9, fp
 8007420:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007424:	f04f 0100 	mov.w	r1, #0
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007430:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007434:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007438:	4689      	mov	r9, r1
 800743a:	4692      	mov	sl, r2
 800743c:	eb1b 0509 	adds.w	r5, fp, r9
 8007440:	eb4c 060a 	adc.w	r6, ip, sl
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	4619      	mov	r1, r3
 800744a:	f04f 0200 	mov.w	r2, #0
 800744e:	f04f 0300 	mov.w	r3, #0
 8007452:	f04f 0400 	mov.w	r4, #0
 8007456:	0094      	lsls	r4, r2, #2
 8007458:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800745c:	008b      	lsls	r3, r1, #2
 800745e:	461a      	mov	r2, r3
 8007460:	4623      	mov	r3, r4
 8007462:	4628      	mov	r0, r5
 8007464:	4631      	mov	r1, r6
 8007466:	f7f9 fbb7 	bl	8000bd8 <__aeabi_uldivmod>
 800746a:	4603      	mov	r3, r0
 800746c:	460c      	mov	r4, r1
 800746e:	461a      	mov	r2, r3
 8007470:	4b9a      	ldr	r3, [pc, #616]	; (80076dc <UART_SetConfig+0x6f4>)
 8007472:	fba3 1302 	umull	r1, r3, r3, r2
 8007476:	095b      	lsrs	r3, r3, #5
 8007478:	2164      	movs	r1, #100	; 0x64
 800747a:	fb01 f303 	mul.w	r3, r1, r3
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	011b      	lsls	r3, r3, #4
 8007482:	3332      	adds	r3, #50	; 0x32
 8007484:	4a95      	ldr	r2, [pc, #596]	; (80076dc <UART_SetConfig+0x6f4>)
 8007486:	fba2 2303 	umull	r2, r3, r2, r3
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007490:	4498      	add	r8, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	469b      	mov	fp, r3
 8007496:	f04f 0c00 	mov.w	ip, #0
 800749a:	46d9      	mov	r9, fp
 800749c:	46e2      	mov	sl, ip
 800749e:	eb19 0309 	adds.w	r3, r9, r9
 80074a2:	eb4a 040a 	adc.w	r4, sl, sl
 80074a6:	4699      	mov	r9, r3
 80074a8:	46a2      	mov	sl, r4
 80074aa:	eb19 090b 	adds.w	r9, r9, fp
 80074ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074b2:	f04f 0100 	mov.w	r1, #0
 80074b6:	f04f 0200 	mov.w	r2, #0
 80074ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074c6:	4689      	mov	r9, r1
 80074c8:	4692      	mov	sl, r2
 80074ca:	eb1b 0509 	adds.w	r5, fp, r9
 80074ce:	eb4c 060a 	adc.w	r6, ip, sl
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	4619      	mov	r1, r3
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	f04f 0300 	mov.w	r3, #0
 80074e0:	f04f 0400 	mov.w	r4, #0
 80074e4:	0094      	lsls	r4, r2, #2
 80074e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074ea:	008b      	lsls	r3, r1, #2
 80074ec:	461a      	mov	r2, r3
 80074ee:	4623      	mov	r3, r4
 80074f0:	4628      	mov	r0, r5
 80074f2:	4631      	mov	r1, r6
 80074f4:	f7f9 fb70 	bl	8000bd8 <__aeabi_uldivmod>
 80074f8:	4603      	mov	r3, r0
 80074fa:	460c      	mov	r4, r1
 80074fc:	461a      	mov	r2, r3
 80074fe:	4b77      	ldr	r3, [pc, #476]	; (80076dc <UART_SetConfig+0x6f4>)
 8007500:	fba3 1302 	umull	r1, r3, r3, r2
 8007504:	095b      	lsrs	r3, r3, #5
 8007506:	2164      	movs	r1, #100	; 0x64
 8007508:	fb01 f303 	mul.w	r3, r1, r3
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	3332      	adds	r3, #50	; 0x32
 8007512:	4a72      	ldr	r2, [pc, #456]	; (80076dc <UART_SetConfig+0x6f4>)
 8007514:	fba2 2303 	umull	r2, r3, r2, r3
 8007518:	095b      	lsrs	r3, r3, #5
 800751a:	f003 020f 	and.w	r2, r3, #15
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4442      	add	r2, r8
 8007524:	609a      	str	r2, [r3, #8]
 8007526:	e0d0      	b.n	80076ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007528:	f7fd faea 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 800752c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	469a      	mov	sl, r3
 8007532:	f04f 0b00 	mov.w	fp, #0
 8007536:	46d0      	mov	r8, sl
 8007538:	46d9      	mov	r9, fp
 800753a:	eb18 0308 	adds.w	r3, r8, r8
 800753e:	eb49 0409 	adc.w	r4, r9, r9
 8007542:	4698      	mov	r8, r3
 8007544:	46a1      	mov	r9, r4
 8007546:	eb18 080a 	adds.w	r8, r8, sl
 800754a:	eb49 090b 	adc.w	r9, r9, fp
 800754e:	f04f 0100 	mov.w	r1, #0
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800755a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800755e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007562:	4688      	mov	r8, r1
 8007564:	4691      	mov	r9, r2
 8007566:	eb1a 0508 	adds.w	r5, sl, r8
 800756a:	eb4b 0609 	adc.w	r6, fp, r9
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	4619      	mov	r1, r3
 8007574:	f04f 0200 	mov.w	r2, #0
 8007578:	f04f 0300 	mov.w	r3, #0
 800757c:	f04f 0400 	mov.w	r4, #0
 8007580:	0094      	lsls	r4, r2, #2
 8007582:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007586:	008b      	lsls	r3, r1, #2
 8007588:	461a      	mov	r2, r3
 800758a:	4623      	mov	r3, r4
 800758c:	4628      	mov	r0, r5
 800758e:	4631      	mov	r1, r6
 8007590:	f7f9 fb22 	bl	8000bd8 <__aeabi_uldivmod>
 8007594:	4603      	mov	r3, r0
 8007596:	460c      	mov	r4, r1
 8007598:	461a      	mov	r2, r3
 800759a:	4b50      	ldr	r3, [pc, #320]	; (80076dc <UART_SetConfig+0x6f4>)
 800759c:	fba3 2302 	umull	r2, r3, r3, r2
 80075a0:	095b      	lsrs	r3, r3, #5
 80075a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	469b      	mov	fp, r3
 80075aa:	f04f 0c00 	mov.w	ip, #0
 80075ae:	46d9      	mov	r9, fp
 80075b0:	46e2      	mov	sl, ip
 80075b2:	eb19 0309 	adds.w	r3, r9, r9
 80075b6:	eb4a 040a 	adc.w	r4, sl, sl
 80075ba:	4699      	mov	r9, r3
 80075bc:	46a2      	mov	sl, r4
 80075be:	eb19 090b 	adds.w	r9, r9, fp
 80075c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80075c6:	f04f 0100 	mov.w	r1, #0
 80075ca:	f04f 0200 	mov.w	r2, #0
 80075ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075da:	4689      	mov	r9, r1
 80075dc:	4692      	mov	sl, r2
 80075de:	eb1b 0509 	adds.w	r5, fp, r9
 80075e2:	eb4c 060a 	adc.w	r6, ip, sl
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	4619      	mov	r1, r3
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	f04f 0300 	mov.w	r3, #0
 80075f4:	f04f 0400 	mov.w	r4, #0
 80075f8:	0094      	lsls	r4, r2, #2
 80075fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075fe:	008b      	lsls	r3, r1, #2
 8007600:	461a      	mov	r2, r3
 8007602:	4623      	mov	r3, r4
 8007604:	4628      	mov	r0, r5
 8007606:	4631      	mov	r1, r6
 8007608:	f7f9 fae6 	bl	8000bd8 <__aeabi_uldivmod>
 800760c:	4603      	mov	r3, r0
 800760e:	460c      	mov	r4, r1
 8007610:	461a      	mov	r2, r3
 8007612:	4b32      	ldr	r3, [pc, #200]	; (80076dc <UART_SetConfig+0x6f4>)
 8007614:	fba3 1302 	umull	r1, r3, r3, r2
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	2164      	movs	r1, #100	; 0x64
 800761c:	fb01 f303 	mul.w	r3, r1, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	3332      	adds	r3, #50	; 0x32
 8007626:	4a2d      	ldr	r2, [pc, #180]	; (80076dc <UART_SetConfig+0x6f4>)
 8007628:	fba2 2303 	umull	r2, r3, r2, r3
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007632:	4498      	add	r8, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	469b      	mov	fp, r3
 8007638:	f04f 0c00 	mov.w	ip, #0
 800763c:	46d9      	mov	r9, fp
 800763e:	46e2      	mov	sl, ip
 8007640:	eb19 0309 	adds.w	r3, r9, r9
 8007644:	eb4a 040a 	adc.w	r4, sl, sl
 8007648:	4699      	mov	r9, r3
 800764a:	46a2      	mov	sl, r4
 800764c:	eb19 090b 	adds.w	r9, r9, fp
 8007650:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007654:	f04f 0100 	mov.w	r1, #0
 8007658:	f04f 0200 	mov.w	r2, #0
 800765c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007660:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007664:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007668:	4689      	mov	r9, r1
 800766a:	4692      	mov	sl, r2
 800766c:	eb1b 0509 	adds.w	r5, fp, r9
 8007670:	eb4c 060a 	adc.w	r6, ip, sl
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	4619      	mov	r1, r3
 800767a:	f04f 0200 	mov.w	r2, #0
 800767e:	f04f 0300 	mov.w	r3, #0
 8007682:	f04f 0400 	mov.w	r4, #0
 8007686:	0094      	lsls	r4, r2, #2
 8007688:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800768c:	008b      	lsls	r3, r1, #2
 800768e:	461a      	mov	r2, r3
 8007690:	4623      	mov	r3, r4
 8007692:	4628      	mov	r0, r5
 8007694:	4631      	mov	r1, r6
 8007696:	f7f9 fa9f 	bl	8000bd8 <__aeabi_uldivmod>
 800769a:	4603      	mov	r3, r0
 800769c:	460c      	mov	r4, r1
 800769e:	461a      	mov	r2, r3
 80076a0:	4b0e      	ldr	r3, [pc, #56]	; (80076dc <UART_SetConfig+0x6f4>)
 80076a2:	fba3 1302 	umull	r1, r3, r3, r2
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	2164      	movs	r1, #100	; 0x64
 80076aa:	fb01 f303 	mul.w	r3, r1, r3
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	3332      	adds	r3, #50	; 0x32
 80076b4:	4a09      	ldr	r2, [pc, #36]	; (80076dc <UART_SetConfig+0x6f4>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	f003 020f 	and.w	r2, r3, #15
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4442      	add	r2, r8
 80076c6:	609a      	str	r2, [r3, #8]
}
 80076c8:	e7ff      	b.n	80076ca <UART_SetConfig+0x6e2>
 80076ca:	bf00      	nop
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d4:	40011000 	.word	0x40011000
 80076d8:	40011400 	.word	0x40011400
 80076dc:	51eb851f 	.word	0x51eb851f

080076e0 <__errno>:
 80076e0:	4b01      	ldr	r3, [pc, #4]	; (80076e8 <__errno+0x8>)
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	20000020 	.word	0x20000020

080076ec <__libc_init_array>:
 80076ec:	b570      	push	{r4, r5, r6, lr}
 80076ee:	4e0d      	ldr	r6, [pc, #52]	; (8007724 <__libc_init_array+0x38>)
 80076f0:	4c0d      	ldr	r4, [pc, #52]	; (8007728 <__libc_init_array+0x3c>)
 80076f2:	1ba4      	subs	r4, r4, r6
 80076f4:	10a4      	asrs	r4, r4, #2
 80076f6:	2500      	movs	r5, #0
 80076f8:	42a5      	cmp	r5, r4
 80076fa:	d109      	bne.n	8007710 <__libc_init_array+0x24>
 80076fc:	4e0b      	ldr	r6, [pc, #44]	; (800772c <__libc_init_array+0x40>)
 80076fe:	4c0c      	ldr	r4, [pc, #48]	; (8007730 <__libc_init_array+0x44>)
 8007700:	f001 fc7c 	bl	8008ffc <_init>
 8007704:	1ba4      	subs	r4, r4, r6
 8007706:	10a4      	asrs	r4, r4, #2
 8007708:	2500      	movs	r5, #0
 800770a:	42a5      	cmp	r5, r4
 800770c:	d105      	bne.n	800771a <__libc_init_array+0x2e>
 800770e:	bd70      	pop	{r4, r5, r6, pc}
 8007710:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007714:	4798      	blx	r3
 8007716:	3501      	adds	r5, #1
 8007718:	e7ee      	b.n	80076f8 <__libc_init_array+0xc>
 800771a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800771e:	4798      	blx	r3
 8007720:	3501      	adds	r5, #1
 8007722:	e7f2      	b.n	800770a <__libc_init_array+0x1e>
 8007724:	080096e0 	.word	0x080096e0
 8007728:	080096e0 	.word	0x080096e0
 800772c:	080096e0 	.word	0x080096e0
 8007730:	080096e4 	.word	0x080096e4

08007734 <memcpy>:
 8007734:	b510      	push	{r4, lr}
 8007736:	1e43      	subs	r3, r0, #1
 8007738:	440a      	add	r2, r1
 800773a:	4291      	cmp	r1, r2
 800773c:	d100      	bne.n	8007740 <memcpy+0xc>
 800773e:	bd10      	pop	{r4, pc}
 8007740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007748:	e7f7      	b.n	800773a <memcpy+0x6>

0800774a <memmove>:
 800774a:	4288      	cmp	r0, r1
 800774c:	b510      	push	{r4, lr}
 800774e:	eb01 0302 	add.w	r3, r1, r2
 8007752:	d807      	bhi.n	8007764 <memmove+0x1a>
 8007754:	1e42      	subs	r2, r0, #1
 8007756:	4299      	cmp	r1, r3
 8007758:	d00a      	beq.n	8007770 <memmove+0x26>
 800775a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800775e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007762:	e7f8      	b.n	8007756 <memmove+0xc>
 8007764:	4283      	cmp	r3, r0
 8007766:	d9f5      	bls.n	8007754 <memmove+0xa>
 8007768:	1881      	adds	r1, r0, r2
 800776a:	1ad2      	subs	r2, r2, r3
 800776c:	42d3      	cmn	r3, r2
 800776e:	d100      	bne.n	8007772 <memmove+0x28>
 8007770:	bd10      	pop	{r4, pc}
 8007772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007776:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800777a:	e7f7      	b.n	800776c <memmove+0x22>

0800777c <memset>:
 800777c:	4402      	add	r2, r0
 800777e:	4603      	mov	r3, r0
 8007780:	4293      	cmp	r3, r2
 8007782:	d100      	bne.n	8007786 <memset+0xa>
 8007784:	4770      	bx	lr
 8007786:	f803 1b01 	strb.w	r1, [r3], #1
 800778a:	e7f9      	b.n	8007780 <memset+0x4>

0800778c <siprintf>:
 800778c:	b40e      	push	{r1, r2, r3}
 800778e:	b500      	push	{lr}
 8007790:	b09c      	sub	sp, #112	; 0x70
 8007792:	ab1d      	add	r3, sp, #116	; 0x74
 8007794:	9002      	str	r0, [sp, #8]
 8007796:	9006      	str	r0, [sp, #24]
 8007798:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800779c:	4809      	ldr	r0, [pc, #36]	; (80077c4 <siprintf+0x38>)
 800779e:	9107      	str	r1, [sp, #28]
 80077a0:	9104      	str	r1, [sp, #16]
 80077a2:	4909      	ldr	r1, [pc, #36]	; (80077c8 <siprintf+0x3c>)
 80077a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a8:	9105      	str	r1, [sp, #20]
 80077aa:	6800      	ldr	r0, [r0, #0]
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	a902      	add	r1, sp, #8
 80077b0:	f000 f866 	bl	8007880 <_svfiprintf_r>
 80077b4:	9b02      	ldr	r3, [sp, #8]
 80077b6:	2200      	movs	r2, #0
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	b01c      	add	sp, #112	; 0x70
 80077bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80077c0:	b003      	add	sp, #12
 80077c2:	4770      	bx	lr
 80077c4:	20000020 	.word	0x20000020
 80077c8:	ffff0208 	.word	0xffff0208

080077cc <__ssputs_r>:
 80077cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d0:	688e      	ldr	r6, [r1, #8]
 80077d2:	429e      	cmp	r6, r3
 80077d4:	4682      	mov	sl, r0
 80077d6:	460c      	mov	r4, r1
 80077d8:	4690      	mov	r8, r2
 80077da:	4699      	mov	r9, r3
 80077dc:	d837      	bhi.n	800784e <__ssputs_r+0x82>
 80077de:	898a      	ldrh	r2, [r1, #12]
 80077e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077e4:	d031      	beq.n	800784a <__ssputs_r+0x7e>
 80077e6:	6825      	ldr	r5, [r4, #0]
 80077e8:	6909      	ldr	r1, [r1, #16]
 80077ea:	1a6f      	subs	r7, r5, r1
 80077ec:	6965      	ldr	r5, [r4, #20]
 80077ee:	2302      	movs	r3, #2
 80077f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80077f8:	f109 0301 	add.w	r3, r9, #1
 80077fc:	443b      	add	r3, r7
 80077fe:	429d      	cmp	r5, r3
 8007800:	bf38      	it	cc
 8007802:	461d      	movcc	r5, r3
 8007804:	0553      	lsls	r3, r2, #21
 8007806:	d530      	bpl.n	800786a <__ssputs_r+0x9e>
 8007808:	4629      	mov	r1, r5
 800780a:	f000 fb07 	bl	8007e1c <_malloc_r>
 800780e:	4606      	mov	r6, r0
 8007810:	b950      	cbnz	r0, 8007828 <__ssputs_r+0x5c>
 8007812:	230c      	movs	r3, #12
 8007814:	f8ca 3000 	str.w	r3, [sl]
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800781e:	81a3      	strh	r3, [r4, #12]
 8007820:	f04f 30ff 	mov.w	r0, #4294967295
 8007824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007828:	463a      	mov	r2, r7
 800782a:	6921      	ldr	r1, [r4, #16]
 800782c:	f7ff ff82 	bl	8007734 <memcpy>
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	6126      	str	r6, [r4, #16]
 800783e:	6165      	str	r5, [r4, #20]
 8007840:	443e      	add	r6, r7
 8007842:	1bed      	subs	r5, r5, r7
 8007844:	6026      	str	r6, [r4, #0]
 8007846:	60a5      	str	r5, [r4, #8]
 8007848:	464e      	mov	r6, r9
 800784a:	454e      	cmp	r6, r9
 800784c:	d900      	bls.n	8007850 <__ssputs_r+0x84>
 800784e:	464e      	mov	r6, r9
 8007850:	4632      	mov	r2, r6
 8007852:	4641      	mov	r1, r8
 8007854:	6820      	ldr	r0, [r4, #0]
 8007856:	f7ff ff78 	bl	800774a <memmove>
 800785a:	68a3      	ldr	r3, [r4, #8]
 800785c:	1b9b      	subs	r3, r3, r6
 800785e:	60a3      	str	r3, [r4, #8]
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	441e      	add	r6, r3
 8007864:	6026      	str	r6, [r4, #0]
 8007866:	2000      	movs	r0, #0
 8007868:	e7dc      	b.n	8007824 <__ssputs_r+0x58>
 800786a:	462a      	mov	r2, r5
 800786c:	f000 fb30 	bl	8007ed0 <_realloc_r>
 8007870:	4606      	mov	r6, r0
 8007872:	2800      	cmp	r0, #0
 8007874:	d1e2      	bne.n	800783c <__ssputs_r+0x70>
 8007876:	6921      	ldr	r1, [r4, #16]
 8007878:	4650      	mov	r0, sl
 800787a:	f000 fa81 	bl	8007d80 <_free_r>
 800787e:	e7c8      	b.n	8007812 <__ssputs_r+0x46>

08007880 <_svfiprintf_r>:
 8007880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007884:	461d      	mov	r5, r3
 8007886:	898b      	ldrh	r3, [r1, #12]
 8007888:	061f      	lsls	r7, r3, #24
 800788a:	b09d      	sub	sp, #116	; 0x74
 800788c:	4680      	mov	r8, r0
 800788e:	460c      	mov	r4, r1
 8007890:	4616      	mov	r6, r2
 8007892:	d50f      	bpl.n	80078b4 <_svfiprintf_r+0x34>
 8007894:	690b      	ldr	r3, [r1, #16]
 8007896:	b96b      	cbnz	r3, 80078b4 <_svfiprintf_r+0x34>
 8007898:	2140      	movs	r1, #64	; 0x40
 800789a:	f000 fabf 	bl	8007e1c <_malloc_r>
 800789e:	6020      	str	r0, [r4, #0]
 80078a0:	6120      	str	r0, [r4, #16]
 80078a2:	b928      	cbnz	r0, 80078b0 <_svfiprintf_r+0x30>
 80078a4:	230c      	movs	r3, #12
 80078a6:	f8c8 3000 	str.w	r3, [r8]
 80078aa:	f04f 30ff 	mov.w	r0, #4294967295
 80078ae:	e0c8      	b.n	8007a42 <_svfiprintf_r+0x1c2>
 80078b0:	2340      	movs	r3, #64	; 0x40
 80078b2:	6163      	str	r3, [r4, #20]
 80078b4:	2300      	movs	r3, #0
 80078b6:	9309      	str	r3, [sp, #36]	; 0x24
 80078b8:	2320      	movs	r3, #32
 80078ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078be:	2330      	movs	r3, #48	; 0x30
 80078c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078c4:	9503      	str	r5, [sp, #12]
 80078c6:	f04f 0b01 	mov.w	fp, #1
 80078ca:	4637      	mov	r7, r6
 80078cc:	463d      	mov	r5, r7
 80078ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078d2:	b10b      	cbz	r3, 80078d8 <_svfiprintf_r+0x58>
 80078d4:	2b25      	cmp	r3, #37	; 0x25
 80078d6:	d13e      	bne.n	8007956 <_svfiprintf_r+0xd6>
 80078d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80078dc:	d00b      	beq.n	80078f6 <_svfiprintf_r+0x76>
 80078de:	4653      	mov	r3, sl
 80078e0:	4632      	mov	r2, r6
 80078e2:	4621      	mov	r1, r4
 80078e4:	4640      	mov	r0, r8
 80078e6:	f7ff ff71 	bl	80077cc <__ssputs_r>
 80078ea:	3001      	adds	r0, #1
 80078ec:	f000 80a4 	beq.w	8007a38 <_svfiprintf_r+0x1b8>
 80078f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f2:	4453      	add	r3, sl
 80078f4:	9309      	str	r3, [sp, #36]	; 0x24
 80078f6:	783b      	ldrb	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 809d 	beq.w	8007a38 <_svfiprintf_r+0x1b8>
 80078fe:	2300      	movs	r3, #0
 8007900:	f04f 32ff 	mov.w	r2, #4294967295
 8007904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007908:	9304      	str	r3, [sp, #16]
 800790a:	9307      	str	r3, [sp, #28]
 800790c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007910:	931a      	str	r3, [sp, #104]	; 0x68
 8007912:	462f      	mov	r7, r5
 8007914:	2205      	movs	r2, #5
 8007916:	f817 1b01 	ldrb.w	r1, [r7], #1
 800791a:	4850      	ldr	r0, [pc, #320]	; (8007a5c <_svfiprintf_r+0x1dc>)
 800791c:	f7f8 fc80 	bl	8000220 <memchr>
 8007920:	9b04      	ldr	r3, [sp, #16]
 8007922:	b9d0      	cbnz	r0, 800795a <_svfiprintf_r+0xda>
 8007924:	06d9      	lsls	r1, r3, #27
 8007926:	bf44      	itt	mi
 8007928:	2220      	movmi	r2, #32
 800792a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800792e:	071a      	lsls	r2, r3, #28
 8007930:	bf44      	itt	mi
 8007932:	222b      	movmi	r2, #43	; 0x2b
 8007934:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007938:	782a      	ldrb	r2, [r5, #0]
 800793a:	2a2a      	cmp	r2, #42	; 0x2a
 800793c:	d015      	beq.n	800796a <_svfiprintf_r+0xea>
 800793e:	9a07      	ldr	r2, [sp, #28]
 8007940:	462f      	mov	r7, r5
 8007942:	2000      	movs	r0, #0
 8007944:	250a      	movs	r5, #10
 8007946:	4639      	mov	r1, r7
 8007948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800794c:	3b30      	subs	r3, #48	; 0x30
 800794e:	2b09      	cmp	r3, #9
 8007950:	d94d      	bls.n	80079ee <_svfiprintf_r+0x16e>
 8007952:	b1b8      	cbz	r0, 8007984 <_svfiprintf_r+0x104>
 8007954:	e00f      	b.n	8007976 <_svfiprintf_r+0xf6>
 8007956:	462f      	mov	r7, r5
 8007958:	e7b8      	b.n	80078cc <_svfiprintf_r+0x4c>
 800795a:	4a40      	ldr	r2, [pc, #256]	; (8007a5c <_svfiprintf_r+0x1dc>)
 800795c:	1a80      	subs	r0, r0, r2
 800795e:	fa0b f000 	lsl.w	r0, fp, r0
 8007962:	4318      	orrs	r0, r3
 8007964:	9004      	str	r0, [sp, #16]
 8007966:	463d      	mov	r5, r7
 8007968:	e7d3      	b.n	8007912 <_svfiprintf_r+0x92>
 800796a:	9a03      	ldr	r2, [sp, #12]
 800796c:	1d11      	adds	r1, r2, #4
 800796e:	6812      	ldr	r2, [r2, #0]
 8007970:	9103      	str	r1, [sp, #12]
 8007972:	2a00      	cmp	r2, #0
 8007974:	db01      	blt.n	800797a <_svfiprintf_r+0xfa>
 8007976:	9207      	str	r2, [sp, #28]
 8007978:	e004      	b.n	8007984 <_svfiprintf_r+0x104>
 800797a:	4252      	negs	r2, r2
 800797c:	f043 0302 	orr.w	r3, r3, #2
 8007980:	9207      	str	r2, [sp, #28]
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	783b      	ldrb	r3, [r7, #0]
 8007986:	2b2e      	cmp	r3, #46	; 0x2e
 8007988:	d10c      	bne.n	80079a4 <_svfiprintf_r+0x124>
 800798a:	787b      	ldrb	r3, [r7, #1]
 800798c:	2b2a      	cmp	r3, #42	; 0x2a
 800798e:	d133      	bne.n	80079f8 <_svfiprintf_r+0x178>
 8007990:	9b03      	ldr	r3, [sp, #12]
 8007992:	1d1a      	adds	r2, r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	9203      	str	r2, [sp, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	bfb8      	it	lt
 800799c:	f04f 33ff 	movlt.w	r3, #4294967295
 80079a0:	3702      	adds	r7, #2
 80079a2:	9305      	str	r3, [sp, #20]
 80079a4:	4d2e      	ldr	r5, [pc, #184]	; (8007a60 <_svfiprintf_r+0x1e0>)
 80079a6:	7839      	ldrb	r1, [r7, #0]
 80079a8:	2203      	movs	r2, #3
 80079aa:	4628      	mov	r0, r5
 80079ac:	f7f8 fc38 	bl	8000220 <memchr>
 80079b0:	b138      	cbz	r0, 80079c2 <_svfiprintf_r+0x142>
 80079b2:	2340      	movs	r3, #64	; 0x40
 80079b4:	1b40      	subs	r0, r0, r5
 80079b6:	fa03 f000 	lsl.w	r0, r3, r0
 80079ba:	9b04      	ldr	r3, [sp, #16]
 80079bc:	4303      	orrs	r3, r0
 80079be:	3701      	adds	r7, #1
 80079c0:	9304      	str	r3, [sp, #16]
 80079c2:	7839      	ldrb	r1, [r7, #0]
 80079c4:	4827      	ldr	r0, [pc, #156]	; (8007a64 <_svfiprintf_r+0x1e4>)
 80079c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079ca:	2206      	movs	r2, #6
 80079cc:	1c7e      	adds	r6, r7, #1
 80079ce:	f7f8 fc27 	bl	8000220 <memchr>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d038      	beq.n	8007a48 <_svfiprintf_r+0x1c8>
 80079d6:	4b24      	ldr	r3, [pc, #144]	; (8007a68 <_svfiprintf_r+0x1e8>)
 80079d8:	bb13      	cbnz	r3, 8007a20 <_svfiprintf_r+0x1a0>
 80079da:	9b03      	ldr	r3, [sp, #12]
 80079dc:	3307      	adds	r3, #7
 80079de:	f023 0307 	bic.w	r3, r3, #7
 80079e2:	3308      	adds	r3, #8
 80079e4:	9303      	str	r3, [sp, #12]
 80079e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e8:	444b      	add	r3, r9
 80079ea:	9309      	str	r3, [sp, #36]	; 0x24
 80079ec:	e76d      	b.n	80078ca <_svfiprintf_r+0x4a>
 80079ee:	fb05 3202 	mla	r2, r5, r2, r3
 80079f2:	2001      	movs	r0, #1
 80079f4:	460f      	mov	r7, r1
 80079f6:	e7a6      	b.n	8007946 <_svfiprintf_r+0xc6>
 80079f8:	2300      	movs	r3, #0
 80079fa:	3701      	adds	r7, #1
 80079fc:	9305      	str	r3, [sp, #20]
 80079fe:	4619      	mov	r1, r3
 8007a00:	250a      	movs	r5, #10
 8007a02:	4638      	mov	r0, r7
 8007a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a08:	3a30      	subs	r2, #48	; 0x30
 8007a0a:	2a09      	cmp	r2, #9
 8007a0c:	d903      	bls.n	8007a16 <_svfiprintf_r+0x196>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0c8      	beq.n	80079a4 <_svfiprintf_r+0x124>
 8007a12:	9105      	str	r1, [sp, #20]
 8007a14:	e7c6      	b.n	80079a4 <_svfiprintf_r+0x124>
 8007a16:	fb05 2101 	mla	r1, r5, r1, r2
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	4607      	mov	r7, r0
 8007a1e:	e7f0      	b.n	8007a02 <_svfiprintf_r+0x182>
 8007a20:	ab03      	add	r3, sp, #12
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	4622      	mov	r2, r4
 8007a26:	4b11      	ldr	r3, [pc, #68]	; (8007a6c <_svfiprintf_r+0x1ec>)
 8007a28:	a904      	add	r1, sp, #16
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	f3af 8000 	nop.w
 8007a30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a34:	4681      	mov	r9, r0
 8007a36:	d1d6      	bne.n	80079e6 <_svfiprintf_r+0x166>
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	065b      	lsls	r3, r3, #25
 8007a3c:	f53f af35 	bmi.w	80078aa <_svfiprintf_r+0x2a>
 8007a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a42:	b01d      	add	sp, #116	; 0x74
 8007a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a48:	ab03      	add	r3, sp, #12
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <_svfiprintf_r+0x1ec>)
 8007a50:	a904      	add	r1, sp, #16
 8007a52:	4640      	mov	r0, r8
 8007a54:	f000 f882 	bl	8007b5c <_printf_i>
 8007a58:	e7ea      	b.n	8007a30 <_svfiprintf_r+0x1b0>
 8007a5a:	bf00      	nop
 8007a5c:	08009660 	.word	0x08009660
 8007a60:	08009666 	.word	0x08009666
 8007a64:	0800966a 	.word	0x0800966a
 8007a68:	00000000 	.word	0x00000000
 8007a6c:	080077cd 	.word	0x080077cd

08007a70 <_printf_common>:
 8007a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	4691      	mov	r9, r2
 8007a76:	461f      	mov	r7, r3
 8007a78:	688a      	ldr	r2, [r1, #8]
 8007a7a:	690b      	ldr	r3, [r1, #16]
 8007a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a80:	4293      	cmp	r3, r2
 8007a82:	bfb8      	it	lt
 8007a84:	4613      	movlt	r3, r2
 8007a86:	f8c9 3000 	str.w	r3, [r9]
 8007a8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a8e:	4606      	mov	r6, r0
 8007a90:	460c      	mov	r4, r1
 8007a92:	b112      	cbz	r2, 8007a9a <_printf_common+0x2a>
 8007a94:	3301      	adds	r3, #1
 8007a96:	f8c9 3000 	str.w	r3, [r9]
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	0699      	lsls	r1, r3, #26
 8007a9e:	bf42      	ittt	mi
 8007aa0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007aa4:	3302      	addmi	r3, #2
 8007aa6:	f8c9 3000 	strmi.w	r3, [r9]
 8007aaa:	6825      	ldr	r5, [r4, #0]
 8007aac:	f015 0506 	ands.w	r5, r5, #6
 8007ab0:	d107      	bne.n	8007ac2 <_printf_common+0x52>
 8007ab2:	f104 0a19 	add.w	sl, r4, #25
 8007ab6:	68e3      	ldr	r3, [r4, #12]
 8007ab8:	f8d9 2000 	ldr.w	r2, [r9]
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	42ab      	cmp	r3, r5
 8007ac0:	dc28      	bgt.n	8007b14 <_printf_common+0xa4>
 8007ac2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ac6:	6822      	ldr	r2, [r4, #0]
 8007ac8:	3300      	adds	r3, #0
 8007aca:	bf18      	it	ne
 8007acc:	2301      	movne	r3, #1
 8007ace:	0692      	lsls	r2, r2, #26
 8007ad0:	d42d      	bmi.n	8007b2e <_printf_common+0xbe>
 8007ad2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ad6:	4639      	mov	r1, r7
 8007ad8:	4630      	mov	r0, r6
 8007ada:	47c0      	blx	r8
 8007adc:	3001      	adds	r0, #1
 8007ade:	d020      	beq.n	8007b22 <_printf_common+0xb2>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	68e5      	ldr	r5, [r4, #12]
 8007ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ae8:	f003 0306 	and.w	r3, r3, #6
 8007aec:	2b04      	cmp	r3, #4
 8007aee:	bf08      	it	eq
 8007af0:	1aad      	subeq	r5, r5, r2
 8007af2:	68a3      	ldr	r3, [r4, #8]
 8007af4:	6922      	ldr	r2, [r4, #16]
 8007af6:	bf0c      	ite	eq
 8007af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007afc:	2500      	movne	r5, #0
 8007afe:	4293      	cmp	r3, r2
 8007b00:	bfc4      	itt	gt
 8007b02:	1a9b      	subgt	r3, r3, r2
 8007b04:	18ed      	addgt	r5, r5, r3
 8007b06:	f04f 0900 	mov.w	r9, #0
 8007b0a:	341a      	adds	r4, #26
 8007b0c:	454d      	cmp	r5, r9
 8007b0e:	d11a      	bne.n	8007b46 <_printf_common+0xd6>
 8007b10:	2000      	movs	r0, #0
 8007b12:	e008      	b.n	8007b26 <_printf_common+0xb6>
 8007b14:	2301      	movs	r3, #1
 8007b16:	4652      	mov	r2, sl
 8007b18:	4639      	mov	r1, r7
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	47c0      	blx	r8
 8007b1e:	3001      	adds	r0, #1
 8007b20:	d103      	bne.n	8007b2a <_printf_common+0xba>
 8007b22:	f04f 30ff 	mov.w	r0, #4294967295
 8007b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2a:	3501      	adds	r5, #1
 8007b2c:	e7c3      	b.n	8007ab6 <_printf_common+0x46>
 8007b2e:	18e1      	adds	r1, r4, r3
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	2030      	movs	r0, #48	; 0x30
 8007b34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b38:	4422      	add	r2, r4
 8007b3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b42:	3302      	adds	r3, #2
 8007b44:	e7c5      	b.n	8007ad2 <_printf_common+0x62>
 8007b46:	2301      	movs	r3, #1
 8007b48:	4622      	mov	r2, r4
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	47c0      	blx	r8
 8007b50:	3001      	adds	r0, #1
 8007b52:	d0e6      	beq.n	8007b22 <_printf_common+0xb2>
 8007b54:	f109 0901 	add.w	r9, r9, #1
 8007b58:	e7d8      	b.n	8007b0c <_printf_common+0x9c>
	...

08007b5c <_printf_i>:
 8007b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b64:	460c      	mov	r4, r1
 8007b66:	7e09      	ldrb	r1, [r1, #24]
 8007b68:	b085      	sub	sp, #20
 8007b6a:	296e      	cmp	r1, #110	; 0x6e
 8007b6c:	4617      	mov	r7, r2
 8007b6e:	4606      	mov	r6, r0
 8007b70:	4698      	mov	r8, r3
 8007b72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b74:	f000 80b3 	beq.w	8007cde <_printf_i+0x182>
 8007b78:	d822      	bhi.n	8007bc0 <_printf_i+0x64>
 8007b7a:	2963      	cmp	r1, #99	; 0x63
 8007b7c:	d036      	beq.n	8007bec <_printf_i+0x90>
 8007b7e:	d80a      	bhi.n	8007b96 <_printf_i+0x3a>
 8007b80:	2900      	cmp	r1, #0
 8007b82:	f000 80b9 	beq.w	8007cf8 <_printf_i+0x19c>
 8007b86:	2958      	cmp	r1, #88	; 0x58
 8007b88:	f000 8083 	beq.w	8007c92 <_printf_i+0x136>
 8007b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007b94:	e032      	b.n	8007bfc <_printf_i+0xa0>
 8007b96:	2964      	cmp	r1, #100	; 0x64
 8007b98:	d001      	beq.n	8007b9e <_printf_i+0x42>
 8007b9a:	2969      	cmp	r1, #105	; 0x69
 8007b9c:	d1f6      	bne.n	8007b8c <_printf_i+0x30>
 8007b9e:	6820      	ldr	r0, [r4, #0]
 8007ba0:	6813      	ldr	r3, [r2, #0]
 8007ba2:	0605      	lsls	r5, r0, #24
 8007ba4:	f103 0104 	add.w	r1, r3, #4
 8007ba8:	d52a      	bpl.n	8007c00 <_printf_i+0xa4>
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6011      	str	r1, [r2, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	da03      	bge.n	8007bba <_printf_i+0x5e>
 8007bb2:	222d      	movs	r2, #45	; 0x2d
 8007bb4:	425b      	negs	r3, r3
 8007bb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007bba:	486f      	ldr	r0, [pc, #444]	; (8007d78 <_printf_i+0x21c>)
 8007bbc:	220a      	movs	r2, #10
 8007bbe:	e039      	b.n	8007c34 <_printf_i+0xd8>
 8007bc0:	2973      	cmp	r1, #115	; 0x73
 8007bc2:	f000 809d 	beq.w	8007d00 <_printf_i+0x1a4>
 8007bc6:	d808      	bhi.n	8007bda <_printf_i+0x7e>
 8007bc8:	296f      	cmp	r1, #111	; 0x6f
 8007bca:	d020      	beq.n	8007c0e <_printf_i+0xb2>
 8007bcc:	2970      	cmp	r1, #112	; 0x70
 8007bce:	d1dd      	bne.n	8007b8c <_printf_i+0x30>
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	f043 0320 	orr.w	r3, r3, #32
 8007bd6:	6023      	str	r3, [r4, #0]
 8007bd8:	e003      	b.n	8007be2 <_printf_i+0x86>
 8007bda:	2975      	cmp	r1, #117	; 0x75
 8007bdc:	d017      	beq.n	8007c0e <_printf_i+0xb2>
 8007bde:	2978      	cmp	r1, #120	; 0x78
 8007be0:	d1d4      	bne.n	8007b8c <_printf_i+0x30>
 8007be2:	2378      	movs	r3, #120	; 0x78
 8007be4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007be8:	4864      	ldr	r0, [pc, #400]	; (8007d7c <_printf_i+0x220>)
 8007bea:	e055      	b.n	8007c98 <_printf_i+0x13c>
 8007bec:	6813      	ldr	r3, [r2, #0]
 8007bee:	1d19      	adds	r1, r3, #4
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6011      	str	r1, [r2, #0]
 8007bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e08c      	b.n	8007d1a <_printf_i+0x1be>
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6011      	str	r1, [r2, #0]
 8007c04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c08:	bf18      	it	ne
 8007c0a:	b21b      	sxthne	r3, r3
 8007c0c:	e7cf      	b.n	8007bae <_printf_i+0x52>
 8007c0e:	6813      	ldr	r3, [r2, #0]
 8007c10:	6825      	ldr	r5, [r4, #0]
 8007c12:	1d18      	adds	r0, r3, #4
 8007c14:	6010      	str	r0, [r2, #0]
 8007c16:	0628      	lsls	r0, r5, #24
 8007c18:	d501      	bpl.n	8007c1e <_printf_i+0xc2>
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	e002      	b.n	8007c24 <_printf_i+0xc8>
 8007c1e:	0668      	lsls	r0, r5, #25
 8007c20:	d5fb      	bpl.n	8007c1a <_printf_i+0xbe>
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	4854      	ldr	r0, [pc, #336]	; (8007d78 <_printf_i+0x21c>)
 8007c26:	296f      	cmp	r1, #111	; 0x6f
 8007c28:	bf14      	ite	ne
 8007c2a:	220a      	movne	r2, #10
 8007c2c:	2208      	moveq	r2, #8
 8007c2e:	2100      	movs	r1, #0
 8007c30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c34:	6865      	ldr	r5, [r4, #4]
 8007c36:	60a5      	str	r5, [r4, #8]
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	f2c0 8095 	blt.w	8007d68 <_printf_i+0x20c>
 8007c3e:	6821      	ldr	r1, [r4, #0]
 8007c40:	f021 0104 	bic.w	r1, r1, #4
 8007c44:	6021      	str	r1, [r4, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d13d      	bne.n	8007cc6 <_printf_i+0x16a>
 8007c4a:	2d00      	cmp	r5, #0
 8007c4c:	f040 808e 	bne.w	8007d6c <_printf_i+0x210>
 8007c50:	4665      	mov	r5, ip
 8007c52:	2a08      	cmp	r2, #8
 8007c54:	d10b      	bne.n	8007c6e <_printf_i+0x112>
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	07db      	lsls	r3, r3, #31
 8007c5a:	d508      	bpl.n	8007c6e <_printf_i+0x112>
 8007c5c:	6923      	ldr	r3, [r4, #16]
 8007c5e:	6862      	ldr	r2, [r4, #4]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	bfde      	ittt	le
 8007c64:	2330      	movle	r3, #48	; 0x30
 8007c66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c6e:	ebac 0305 	sub.w	r3, ip, r5
 8007c72:	6123      	str	r3, [r4, #16]
 8007c74:	f8cd 8000 	str.w	r8, [sp]
 8007c78:	463b      	mov	r3, r7
 8007c7a:	aa03      	add	r2, sp, #12
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f7ff fef6 	bl	8007a70 <_printf_common>
 8007c84:	3001      	adds	r0, #1
 8007c86:	d14d      	bne.n	8007d24 <_printf_i+0x1c8>
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	b005      	add	sp, #20
 8007c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c92:	4839      	ldr	r0, [pc, #228]	; (8007d78 <_printf_i+0x21c>)
 8007c94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007c98:	6813      	ldr	r3, [r2, #0]
 8007c9a:	6821      	ldr	r1, [r4, #0]
 8007c9c:	1d1d      	adds	r5, r3, #4
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6015      	str	r5, [r2, #0]
 8007ca2:	060a      	lsls	r2, r1, #24
 8007ca4:	d50b      	bpl.n	8007cbe <_printf_i+0x162>
 8007ca6:	07ca      	lsls	r2, r1, #31
 8007ca8:	bf44      	itt	mi
 8007caa:	f041 0120 	orrmi.w	r1, r1, #32
 8007cae:	6021      	strmi	r1, [r4, #0]
 8007cb0:	b91b      	cbnz	r3, 8007cba <_printf_i+0x15e>
 8007cb2:	6822      	ldr	r2, [r4, #0]
 8007cb4:	f022 0220 	bic.w	r2, r2, #32
 8007cb8:	6022      	str	r2, [r4, #0]
 8007cba:	2210      	movs	r2, #16
 8007cbc:	e7b7      	b.n	8007c2e <_printf_i+0xd2>
 8007cbe:	064d      	lsls	r5, r1, #25
 8007cc0:	bf48      	it	mi
 8007cc2:	b29b      	uxthmi	r3, r3
 8007cc4:	e7ef      	b.n	8007ca6 <_printf_i+0x14a>
 8007cc6:	4665      	mov	r5, ip
 8007cc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ccc:	fb02 3311 	mls	r3, r2, r1, r3
 8007cd0:	5cc3      	ldrb	r3, [r0, r3]
 8007cd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	d1f5      	bne.n	8007cc8 <_printf_i+0x16c>
 8007cdc:	e7b9      	b.n	8007c52 <_printf_i+0xf6>
 8007cde:	6813      	ldr	r3, [r2, #0]
 8007ce0:	6825      	ldr	r5, [r4, #0]
 8007ce2:	6961      	ldr	r1, [r4, #20]
 8007ce4:	1d18      	adds	r0, r3, #4
 8007ce6:	6010      	str	r0, [r2, #0]
 8007ce8:	0628      	lsls	r0, r5, #24
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	d501      	bpl.n	8007cf2 <_printf_i+0x196>
 8007cee:	6019      	str	r1, [r3, #0]
 8007cf0:	e002      	b.n	8007cf8 <_printf_i+0x19c>
 8007cf2:	066a      	lsls	r2, r5, #25
 8007cf4:	d5fb      	bpl.n	8007cee <_printf_i+0x192>
 8007cf6:	8019      	strh	r1, [r3, #0]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	6123      	str	r3, [r4, #16]
 8007cfc:	4665      	mov	r5, ip
 8007cfe:	e7b9      	b.n	8007c74 <_printf_i+0x118>
 8007d00:	6813      	ldr	r3, [r2, #0]
 8007d02:	1d19      	adds	r1, r3, #4
 8007d04:	6011      	str	r1, [r2, #0]
 8007d06:	681d      	ldr	r5, [r3, #0]
 8007d08:	6862      	ldr	r2, [r4, #4]
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	f7f8 fa87 	bl	8000220 <memchr>
 8007d12:	b108      	cbz	r0, 8007d18 <_printf_i+0x1bc>
 8007d14:	1b40      	subs	r0, r0, r5
 8007d16:	6060      	str	r0, [r4, #4]
 8007d18:	6863      	ldr	r3, [r4, #4]
 8007d1a:	6123      	str	r3, [r4, #16]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d22:	e7a7      	b.n	8007c74 <_printf_i+0x118>
 8007d24:	6923      	ldr	r3, [r4, #16]
 8007d26:	462a      	mov	r2, r5
 8007d28:	4639      	mov	r1, r7
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	47c0      	blx	r8
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d0aa      	beq.n	8007c88 <_printf_i+0x12c>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	079b      	lsls	r3, r3, #30
 8007d36:	d413      	bmi.n	8007d60 <_printf_i+0x204>
 8007d38:	68e0      	ldr	r0, [r4, #12]
 8007d3a:	9b03      	ldr	r3, [sp, #12]
 8007d3c:	4298      	cmp	r0, r3
 8007d3e:	bfb8      	it	lt
 8007d40:	4618      	movlt	r0, r3
 8007d42:	e7a3      	b.n	8007c8c <_printf_i+0x130>
 8007d44:	2301      	movs	r3, #1
 8007d46:	464a      	mov	r2, r9
 8007d48:	4639      	mov	r1, r7
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	47c0      	blx	r8
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d09a      	beq.n	8007c88 <_printf_i+0x12c>
 8007d52:	3501      	adds	r5, #1
 8007d54:	68e3      	ldr	r3, [r4, #12]
 8007d56:	9a03      	ldr	r2, [sp, #12]
 8007d58:	1a9b      	subs	r3, r3, r2
 8007d5a:	42ab      	cmp	r3, r5
 8007d5c:	dcf2      	bgt.n	8007d44 <_printf_i+0x1e8>
 8007d5e:	e7eb      	b.n	8007d38 <_printf_i+0x1dc>
 8007d60:	2500      	movs	r5, #0
 8007d62:	f104 0919 	add.w	r9, r4, #25
 8007d66:	e7f5      	b.n	8007d54 <_printf_i+0x1f8>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1ac      	bne.n	8007cc6 <_printf_i+0x16a>
 8007d6c:	7803      	ldrb	r3, [r0, #0]
 8007d6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d76:	e76c      	b.n	8007c52 <_printf_i+0xf6>
 8007d78:	08009671 	.word	0x08009671
 8007d7c:	08009682 	.word	0x08009682

08007d80 <_free_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4605      	mov	r5, r0
 8007d84:	2900      	cmp	r1, #0
 8007d86:	d045      	beq.n	8007e14 <_free_r+0x94>
 8007d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d8c:	1f0c      	subs	r4, r1, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bfb8      	it	lt
 8007d92:	18e4      	addlt	r4, r4, r3
 8007d94:	f000 f8d2 	bl	8007f3c <__malloc_lock>
 8007d98:	4a1f      	ldr	r2, [pc, #124]	; (8007e18 <_free_r+0x98>)
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	b933      	cbnz	r3, 8007dae <_free_r+0x2e>
 8007da0:	6063      	str	r3, [r4, #4]
 8007da2:	6014      	str	r4, [r2, #0]
 8007da4:	4628      	mov	r0, r5
 8007da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007daa:	f000 b8c8 	b.w	8007f3e <__malloc_unlock>
 8007dae:	42a3      	cmp	r3, r4
 8007db0:	d90c      	bls.n	8007dcc <_free_r+0x4c>
 8007db2:	6821      	ldr	r1, [r4, #0]
 8007db4:	1862      	adds	r2, r4, r1
 8007db6:	4293      	cmp	r3, r2
 8007db8:	bf04      	itt	eq
 8007dba:	681a      	ldreq	r2, [r3, #0]
 8007dbc:	685b      	ldreq	r3, [r3, #4]
 8007dbe:	6063      	str	r3, [r4, #4]
 8007dc0:	bf04      	itt	eq
 8007dc2:	1852      	addeq	r2, r2, r1
 8007dc4:	6022      	streq	r2, [r4, #0]
 8007dc6:	6004      	str	r4, [r0, #0]
 8007dc8:	e7ec      	b.n	8007da4 <_free_r+0x24>
 8007dca:	4613      	mov	r3, r2
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	b10a      	cbz	r2, 8007dd4 <_free_r+0x54>
 8007dd0:	42a2      	cmp	r2, r4
 8007dd2:	d9fa      	bls.n	8007dca <_free_r+0x4a>
 8007dd4:	6819      	ldr	r1, [r3, #0]
 8007dd6:	1858      	adds	r0, r3, r1
 8007dd8:	42a0      	cmp	r0, r4
 8007dda:	d10b      	bne.n	8007df4 <_free_r+0x74>
 8007ddc:	6820      	ldr	r0, [r4, #0]
 8007dde:	4401      	add	r1, r0
 8007de0:	1858      	adds	r0, r3, r1
 8007de2:	4282      	cmp	r2, r0
 8007de4:	6019      	str	r1, [r3, #0]
 8007de6:	d1dd      	bne.n	8007da4 <_free_r+0x24>
 8007de8:	6810      	ldr	r0, [r2, #0]
 8007dea:	6852      	ldr	r2, [r2, #4]
 8007dec:	605a      	str	r2, [r3, #4]
 8007dee:	4401      	add	r1, r0
 8007df0:	6019      	str	r1, [r3, #0]
 8007df2:	e7d7      	b.n	8007da4 <_free_r+0x24>
 8007df4:	d902      	bls.n	8007dfc <_free_r+0x7c>
 8007df6:	230c      	movs	r3, #12
 8007df8:	602b      	str	r3, [r5, #0]
 8007dfa:	e7d3      	b.n	8007da4 <_free_r+0x24>
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	1821      	adds	r1, r4, r0
 8007e00:	428a      	cmp	r2, r1
 8007e02:	bf04      	itt	eq
 8007e04:	6811      	ldreq	r1, [r2, #0]
 8007e06:	6852      	ldreq	r2, [r2, #4]
 8007e08:	6062      	str	r2, [r4, #4]
 8007e0a:	bf04      	itt	eq
 8007e0c:	1809      	addeq	r1, r1, r0
 8007e0e:	6021      	streq	r1, [r4, #0]
 8007e10:	605c      	str	r4, [r3, #4]
 8007e12:	e7c7      	b.n	8007da4 <_free_r+0x24>
 8007e14:	bd38      	pop	{r3, r4, r5, pc}
 8007e16:	bf00      	nop
 8007e18:	200000e0 	.word	0x200000e0

08007e1c <_malloc_r>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	1ccd      	adds	r5, r1, #3
 8007e20:	f025 0503 	bic.w	r5, r5, #3
 8007e24:	3508      	adds	r5, #8
 8007e26:	2d0c      	cmp	r5, #12
 8007e28:	bf38      	it	cc
 8007e2a:	250c      	movcc	r5, #12
 8007e2c:	2d00      	cmp	r5, #0
 8007e2e:	4606      	mov	r6, r0
 8007e30:	db01      	blt.n	8007e36 <_malloc_r+0x1a>
 8007e32:	42a9      	cmp	r1, r5
 8007e34:	d903      	bls.n	8007e3e <_malloc_r+0x22>
 8007e36:	230c      	movs	r3, #12
 8007e38:	6033      	str	r3, [r6, #0]
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	bd70      	pop	{r4, r5, r6, pc}
 8007e3e:	f000 f87d 	bl	8007f3c <__malloc_lock>
 8007e42:	4a21      	ldr	r2, [pc, #132]	; (8007ec8 <_malloc_r+0xac>)
 8007e44:	6814      	ldr	r4, [r2, #0]
 8007e46:	4621      	mov	r1, r4
 8007e48:	b991      	cbnz	r1, 8007e70 <_malloc_r+0x54>
 8007e4a:	4c20      	ldr	r4, [pc, #128]	; (8007ecc <_malloc_r+0xb0>)
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	b91b      	cbnz	r3, 8007e58 <_malloc_r+0x3c>
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 f863 	bl	8007f1c <_sbrk_r>
 8007e56:	6020      	str	r0, [r4, #0]
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f000 f85e 	bl	8007f1c <_sbrk_r>
 8007e60:	1c43      	adds	r3, r0, #1
 8007e62:	d124      	bne.n	8007eae <_malloc_r+0x92>
 8007e64:	230c      	movs	r3, #12
 8007e66:	6033      	str	r3, [r6, #0]
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f000 f868 	bl	8007f3e <__malloc_unlock>
 8007e6e:	e7e4      	b.n	8007e3a <_malloc_r+0x1e>
 8007e70:	680b      	ldr	r3, [r1, #0]
 8007e72:	1b5b      	subs	r3, r3, r5
 8007e74:	d418      	bmi.n	8007ea8 <_malloc_r+0x8c>
 8007e76:	2b0b      	cmp	r3, #11
 8007e78:	d90f      	bls.n	8007e9a <_malloc_r+0x7e>
 8007e7a:	600b      	str	r3, [r1, #0]
 8007e7c:	50cd      	str	r5, [r1, r3]
 8007e7e:	18cc      	adds	r4, r1, r3
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 f85c 	bl	8007f3e <__malloc_unlock>
 8007e86:	f104 000b 	add.w	r0, r4, #11
 8007e8a:	1d23      	adds	r3, r4, #4
 8007e8c:	f020 0007 	bic.w	r0, r0, #7
 8007e90:	1ac3      	subs	r3, r0, r3
 8007e92:	d0d3      	beq.n	8007e3c <_malloc_r+0x20>
 8007e94:	425a      	negs	r2, r3
 8007e96:	50e2      	str	r2, [r4, r3]
 8007e98:	e7d0      	b.n	8007e3c <_malloc_r+0x20>
 8007e9a:	428c      	cmp	r4, r1
 8007e9c:	684b      	ldr	r3, [r1, #4]
 8007e9e:	bf16      	itet	ne
 8007ea0:	6063      	strne	r3, [r4, #4]
 8007ea2:	6013      	streq	r3, [r2, #0]
 8007ea4:	460c      	movne	r4, r1
 8007ea6:	e7eb      	b.n	8007e80 <_malloc_r+0x64>
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	6849      	ldr	r1, [r1, #4]
 8007eac:	e7cc      	b.n	8007e48 <_malloc_r+0x2c>
 8007eae:	1cc4      	adds	r4, r0, #3
 8007eb0:	f024 0403 	bic.w	r4, r4, #3
 8007eb4:	42a0      	cmp	r0, r4
 8007eb6:	d005      	beq.n	8007ec4 <_malloc_r+0xa8>
 8007eb8:	1a21      	subs	r1, r4, r0
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f000 f82e 	bl	8007f1c <_sbrk_r>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d0cf      	beq.n	8007e64 <_malloc_r+0x48>
 8007ec4:	6025      	str	r5, [r4, #0]
 8007ec6:	e7db      	b.n	8007e80 <_malloc_r+0x64>
 8007ec8:	200000e0 	.word	0x200000e0
 8007ecc:	200000e4 	.word	0x200000e4

08007ed0 <_realloc_r>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	460e      	mov	r6, r1
 8007ed8:	b921      	cbnz	r1, 8007ee4 <_realloc_r+0x14>
 8007eda:	4611      	mov	r1, r2
 8007edc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ee0:	f7ff bf9c 	b.w	8007e1c <_malloc_r>
 8007ee4:	b922      	cbnz	r2, 8007ef0 <_realloc_r+0x20>
 8007ee6:	f7ff ff4b 	bl	8007d80 <_free_r>
 8007eea:	4625      	mov	r5, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef0:	f000 f826 	bl	8007f40 <_malloc_usable_size_r>
 8007ef4:	42a0      	cmp	r0, r4
 8007ef6:	d20f      	bcs.n	8007f18 <_realloc_r+0x48>
 8007ef8:	4621      	mov	r1, r4
 8007efa:	4638      	mov	r0, r7
 8007efc:	f7ff ff8e 	bl	8007e1c <_malloc_r>
 8007f00:	4605      	mov	r5, r0
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d0f2      	beq.n	8007eec <_realloc_r+0x1c>
 8007f06:	4631      	mov	r1, r6
 8007f08:	4622      	mov	r2, r4
 8007f0a:	f7ff fc13 	bl	8007734 <memcpy>
 8007f0e:	4631      	mov	r1, r6
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff ff35 	bl	8007d80 <_free_r>
 8007f16:	e7e9      	b.n	8007eec <_realloc_r+0x1c>
 8007f18:	4635      	mov	r5, r6
 8007f1a:	e7e7      	b.n	8007eec <_realloc_r+0x1c>

08007f1c <_sbrk_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4c06      	ldr	r4, [pc, #24]	; (8007f38 <_sbrk_r+0x1c>)
 8007f20:	2300      	movs	r3, #0
 8007f22:	4605      	mov	r5, r0
 8007f24:	4608      	mov	r0, r1
 8007f26:	6023      	str	r3, [r4, #0]
 8007f28:	f7fb fcea 	bl	8003900 <_sbrk>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d102      	bne.n	8007f36 <_sbrk_r+0x1a>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	b103      	cbz	r3, 8007f36 <_sbrk_r+0x1a>
 8007f34:	602b      	str	r3, [r5, #0]
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	200034b8 	.word	0x200034b8

08007f3c <__malloc_lock>:
 8007f3c:	4770      	bx	lr

08007f3e <__malloc_unlock>:
 8007f3e:	4770      	bx	lr

08007f40 <_malloc_usable_size_r>:
 8007f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f44:	1f18      	subs	r0, r3, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bfbc      	itt	lt
 8007f4a:	580b      	ldrlt	r3, [r1, r0]
 8007f4c:	18c0      	addlt	r0, r0, r3
 8007f4e:	4770      	bx	lr

08007f50 <pow>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	ed2d 8b04 	vpush	{d8-d9}
 8007f58:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800822c <pow+0x2dc>
 8007f5c:	b08d      	sub	sp, #52	; 0x34
 8007f5e:	ec57 6b10 	vmov	r6, r7, d0
 8007f62:	ec55 4b11 	vmov	r4, r5, d1
 8007f66:	f000 f963 	bl	8008230 <__ieee754_pow>
 8007f6a:	f999 3000 	ldrsb.w	r3, [r9]
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	3301      	adds	r3, #1
 8007f72:	eeb0 8a40 	vmov.f32	s16, s0
 8007f76:	eef0 8a60 	vmov.f32	s17, s1
 8007f7a:	46c8      	mov	r8, r9
 8007f7c:	d05f      	beq.n	800803e <pow+0xee>
 8007f7e:	4622      	mov	r2, r4
 8007f80:	462b      	mov	r3, r5
 8007f82:	4620      	mov	r0, r4
 8007f84:	4629      	mov	r1, r5
 8007f86:	f7f8 fdf1 	bl	8000b6c <__aeabi_dcmpun>
 8007f8a:	4683      	mov	fp, r0
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d156      	bne.n	800803e <pow+0xee>
 8007f90:	4632      	mov	r2, r6
 8007f92:	463b      	mov	r3, r7
 8007f94:	4630      	mov	r0, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	f7f8 fde8 	bl	8000b6c <__aeabi_dcmpun>
 8007f9c:	9001      	str	r0, [sp, #4]
 8007f9e:	b1e8      	cbz	r0, 8007fdc <pow+0x8c>
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	f7f8 fdae 	bl	8000b08 <__aeabi_dcmpeq>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d046      	beq.n	800803e <pow+0xee>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	9302      	str	r3, [sp, #8]
 8007fb4:	4b96      	ldr	r3, [pc, #600]	; (8008210 <pow+0x2c0>)
 8007fb6:	9303      	str	r3, [sp, #12]
 8007fb8:	4b96      	ldr	r3, [pc, #600]	; (8008214 <pow+0x2c4>)
 8007fba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007fc4:	9b00      	ldr	r3, [sp, #0]
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007fcc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007fd0:	d033      	beq.n	800803a <pow+0xea>
 8007fd2:	a802      	add	r0, sp, #8
 8007fd4:	f000 fefb 	bl	8008dce <matherr>
 8007fd8:	bb48      	cbnz	r0, 800802e <pow+0xde>
 8007fda:	e05d      	b.n	8008098 <pow+0x148>
 8007fdc:	f04f 0a00 	mov.w	sl, #0
 8007fe0:	f04f 0b00 	mov.w	fp, #0
 8007fe4:	4652      	mov	r2, sl
 8007fe6:	465b      	mov	r3, fp
 8007fe8:	4630      	mov	r0, r6
 8007fea:	4639      	mov	r1, r7
 8007fec:	f7f8 fd8c 	bl	8000b08 <__aeabi_dcmpeq>
 8007ff0:	ec4b ab19 	vmov	d9, sl, fp
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d054      	beq.n	80080a2 <pow+0x152>
 8007ff8:	4652      	mov	r2, sl
 8007ffa:	465b      	mov	r3, fp
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	4629      	mov	r1, r5
 8008000:	f7f8 fd82 	bl	8000b08 <__aeabi_dcmpeq>
 8008004:	4680      	mov	r8, r0
 8008006:	b318      	cbz	r0, 8008050 <pow+0x100>
 8008008:	2301      	movs	r3, #1
 800800a:	9302      	str	r3, [sp, #8]
 800800c:	4b80      	ldr	r3, [pc, #512]	; (8008210 <pow+0x2c0>)
 800800e:	9303      	str	r3, [sp, #12]
 8008010:	9b01      	ldr	r3, [sp, #4]
 8008012:	930a      	str	r3, [sp, #40]	; 0x28
 8008014:	9b00      	ldr	r3, [sp, #0]
 8008016:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800801a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800801e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0d5      	beq.n	8007fd2 <pow+0x82>
 8008026:	4b7b      	ldr	r3, [pc, #492]	; (8008214 <pow+0x2c4>)
 8008028:	2200      	movs	r2, #0
 800802a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800802e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008030:	b11b      	cbz	r3, 800803a <pow+0xea>
 8008032:	f7ff fb55 	bl	80076e0 <__errno>
 8008036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008038:	6003      	str	r3, [r0, #0]
 800803a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800803e:	eeb0 0a48 	vmov.f32	s0, s16
 8008042:	eef0 0a68 	vmov.f32	s1, s17
 8008046:	b00d      	add	sp, #52	; 0x34
 8008048:	ecbd 8b04 	vpop	{d8-d9}
 800804c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008050:	ec45 4b10 	vmov	d0, r4, r5
 8008054:	f000 feb3 	bl	8008dbe <finite>
 8008058:	2800      	cmp	r0, #0
 800805a:	d0f0      	beq.n	800803e <pow+0xee>
 800805c:	4652      	mov	r2, sl
 800805e:	465b      	mov	r3, fp
 8008060:	4620      	mov	r0, r4
 8008062:	4629      	mov	r1, r5
 8008064:	f7f8 fd5a 	bl	8000b1c <__aeabi_dcmplt>
 8008068:	2800      	cmp	r0, #0
 800806a:	d0e8      	beq.n	800803e <pow+0xee>
 800806c:	2301      	movs	r3, #1
 800806e:	9302      	str	r3, [sp, #8]
 8008070:	4b67      	ldr	r3, [pc, #412]	; (8008210 <pow+0x2c0>)
 8008072:	9303      	str	r3, [sp, #12]
 8008074:	f999 3000 	ldrsb.w	r3, [r9]
 8008078:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800807c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008080:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008084:	b913      	cbnz	r3, 800808c <pow+0x13c>
 8008086:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800808a:	e7a2      	b.n	8007fd2 <pow+0x82>
 800808c:	4962      	ldr	r1, [pc, #392]	; (8008218 <pow+0x2c8>)
 800808e:	2000      	movs	r0, #0
 8008090:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008094:	2b02      	cmp	r3, #2
 8008096:	d19c      	bne.n	8007fd2 <pow+0x82>
 8008098:	f7ff fb22 	bl	80076e0 <__errno>
 800809c:	2321      	movs	r3, #33	; 0x21
 800809e:	6003      	str	r3, [r0, #0]
 80080a0:	e7c5      	b.n	800802e <pow+0xde>
 80080a2:	eeb0 0a48 	vmov.f32	s0, s16
 80080a6:	eef0 0a68 	vmov.f32	s1, s17
 80080aa:	f000 fe88 	bl	8008dbe <finite>
 80080ae:	9000      	str	r0, [sp, #0]
 80080b0:	2800      	cmp	r0, #0
 80080b2:	f040 8081 	bne.w	80081b8 <pow+0x268>
 80080b6:	ec47 6b10 	vmov	d0, r6, r7
 80080ba:	f000 fe80 	bl	8008dbe <finite>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d07a      	beq.n	80081b8 <pow+0x268>
 80080c2:	ec45 4b10 	vmov	d0, r4, r5
 80080c6:	f000 fe7a 	bl	8008dbe <finite>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d074      	beq.n	80081b8 <pow+0x268>
 80080ce:	ec53 2b18 	vmov	r2, r3, d8
 80080d2:	ee18 0a10 	vmov	r0, s16
 80080d6:	4619      	mov	r1, r3
 80080d8:	f7f8 fd48 	bl	8000b6c <__aeabi_dcmpun>
 80080dc:	f999 9000 	ldrsb.w	r9, [r9]
 80080e0:	4b4b      	ldr	r3, [pc, #300]	; (8008210 <pow+0x2c0>)
 80080e2:	b1b0      	cbz	r0, 8008112 <pow+0x1c2>
 80080e4:	2201      	movs	r2, #1
 80080e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080ea:	9b00      	ldr	r3, [sp, #0]
 80080ec:	930a      	str	r3, [sp, #40]	; 0x28
 80080ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80080f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80080f6:	f1b9 0f00 	cmp.w	r9, #0
 80080fa:	d0c4      	beq.n	8008086 <pow+0x136>
 80080fc:	4652      	mov	r2, sl
 80080fe:	465b      	mov	r3, fp
 8008100:	4650      	mov	r0, sl
 8008102:	4659      	mov	r1, fp
 8008104:	f7f8 fbc2 	bl	800088c <__aeabi_ddiv>
 8008108:	f1b9 0f02 	cmp.w	r9, #2
 800810c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008110:	e7c1      	b.n	8008096 <pow+0x146>
 8008112:	2203      	movs	r2, #3
 8008114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008118:	900a      	str	r0, [sp, #40]	; 0x28
 800811a:	4629      	mov	r1, r5
 800811c:	4620      	mov	r0, r4
 800811e:	2200      	movs	r2, #0
 8008120:	4b3e      	ldr	r3, [pc, #248]	; (800821c <pow+0x2cc>)
 8008122:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008126:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800812a:	f7f8 fa85 	bl	8000638 <__aeabi_dmul>
 800812e:	4604      	mov	r4, r0
 8008130:	460d      	mov	r5, r1
 8008132:	f1b9 0f00 	cmp.w	r9, #0
 8008136:	d124      	bne.n	8008182 <pow+0x232>
 8008138:	4b39      	ldr	r3, [pc, #228]	; (8008220 <pow+0x2d0>)
 800813a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800813e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008142:	4630      	mov	r0, r6
 8008144:	4652      	mov	r2, sl
 8008146:	465b      	mov	r3, fp
 8008148:	4639      	mov	r1, r7
 800814a:	f7f8 fce7 	bl	8000b1c <__aeabi_dcmplt>
 800814e:	2800      	cmp	r0, #0
 8008150:	d056      	beq.n	8008200 <pow+0x2b0>
 8008152:	ec45 4b10 	vmov	d0, r4, r5
 8008156:	f000 fe47 	bl	8008de8 <rint>
 800815a:	4622      	mov	r2, r4
 800815c:	462b      	mov	r3, r5
 800815e:	ec51 0b10 	vmov	r0, r1, d0
 8008162:	f7f8 fcd1 	bl	8000b08 <__aeabi_dcmpeq>
 8008166:	b920      	cbnz	r0, 8008172 <pow+0x222>
 8008168:	4b2e      	ldr	r3, [pc, #184]	; (8008224 <pow+0x2d4>)
 800816a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800816e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008172:	f998 3000 	ldrsb.w	r3, [r8]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d142      	bne.n	8008200 <pow+0x2b0>
 800817a:	f7ff fab1 	bl	80076e0 <__errno>
 800817e:	2322      	movs	r3, #34	; 0x22
 8008180:	e78d      	b.n	800809e <pow+0x14e>
 8008182:	4b29      	ldr	r3, [pc, #164]	; (8008228 <pow+0x2d8>)
 8008184:	2200      	movs	r2, #0
 8008186:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800818a:	4630      	mov	r0, r6
 800818c:	4652      	mov	r2, sl
 800818e:	465b      	mov	r3, fp
 8008190:	4639      	mov	r1, r7
 8008192:	f7f8 fcc3 	bl	8000b1c <__aeabi_dcmplt>
 8008196:	2800      	cmp	r0, #0
 8008198:	d0eb      	beq.n	8008172 <pow+0x222>
 800819a:	ec45 4b10 	vmov	d0, r4, r5
 800819e:	f000 fe23 	bl	8008de8 <rint>
 80081a2:	4622      	mov	r2, r4
 80081a4:	462b      	mov	r3, r5
 80081a6:	ec51 0b10 	vmov	r0, r1, d0
 80081aa:	f7f8 fcad 	bl	8000b08 <__aeabi_dcmpeq>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d1df      	bne.n	8008172 <pow+0x222>
 80081b2:	2200      	movs	r2, #0
 80081b4:	4b18      	ldr	r3, [pc, #96]	; (8008218 <pow+0x2c8>)
 80081b6:	e7da      	b.n	800816e <pow+0x21e>
 80081b8:	2200      	movs	r2, #0
 80081ba:	2300      	movs	r3, #0
 80081bc:	ec51 0b18 	vmov	r0, r1, d8
 80081c0:	f7f8 fca2 	bl	8000b08 <__aeabi_dcmpeq>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	f43f af3a 	beq.w	800803e <pow+0xee>
 80081ca:	ec47 6b10 	vmov	d0, r6, r7
 80081ce:	f000 fdf6 	bl	8008dbe <finite>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f43f af33 	beq.w	800803e <pow+0xee>
 80081d8:	ec45 4b10 	vmov	d0, r4, r5
 80081dc:	f000 fdef 	bl	8008dbe <finite>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	f43f af2c 	beq.w	800803e <pow+0xee>
 80081e6:	2304      	movs	r3, #4
 80081e8:	9302      	str	r3, [sp, #8]
 80081ea:	4b09      	ldr	r3, [pc, #36]	; (8008210 <pow+0x2c0>)
 80081ec:	9303      	str	r3, [sp, #12]
 80081ee:	2300      	movs	r3, #0
 80081f0:	930a      	str	r3, [sp, #40]	; 0x28
 80081f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80081f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80081fa:	ed8d 9b08 	vstr	d9, [sp, #32]
 80081fe:	e7b8      	b.n	8008172 <pow+0x222>
 8008200:	a802      	add	r0, sp, #8
 8008202:	f000 fde4 	bl	8008dce <matherr>
 8008206:	2800      	cmp	r0, #0
 8008208:	f47f af11 	bne.w	800802e <pow+0xde>
 800820c:	e7b5      	b.n	800817a <pow+0x22a>
 800820e:	bf00      	nop
 8008210:	08009693 	.word	0x08009693
 8008214:	3ff00000 	.word	0x3ff00000
 8008218:	fff00000 	.word	0xfff00000
 800821c:	3fe00000 	.word	0x3fe00000
 8008220:	47efffff 	.word	0x47efffff
 8008224:	c7efffff 	.word	0xc7efffff
 8008228:	7ff00000 	.word	0x7ff00000
 800822c:	20000084 	.word	0x20000084

08008230 <__ieee754_pow>:
 8008230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	b091      	sub	sp, #68	; 0x44
 8008236:	ed8d 1b00 	vstr	d1, [sp]
 800823a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800823e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008242:	ea58 0302 	orrs.w	r3, r8, r2
 8008246:	ec57 6b10 	vmov	r6, r7, d0
 800824a:	f000 84be 	beq.w	8008bca <__ieee754_pow+0x99a>
 800824e:	4b7a      	ldr	r3, [pc, #488]	; (8008438 <__ieee754_pow+0x208>)
 8008250:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008254:	429c      	cmp	r4, r3
 8008256:	463d      	mov	r5, r7
 8008258:	ee10 aa10 	vmov	sl, s0
 800825c:	dc09      	bgt.n	8008272 <__ieee754_pow+0x42>
 800825e:	d103      	bne.n	8008268 <__ieee754_pow+0x38>
 8008260:	b93e      	cbnz	r6, 8008272 <__ieee754_pow+0x42>
 8008262:	45a0      	cmp	r8, r4
 8008264:	dc0d      	bgt.n	8008282 <__ieee754_pow+0x52>
 8008266:	e001      	b.n	800826c <__ieee754_pow+0x3c>
 8008268:	4598      	cmp	r8, r3
 800826a:	dc02      	bgt.n	8008272 <__ieee754_pow+0x42>
 800826c:	4598      	cmp	r8, r3
 800826e:	d10e      	bne.n	800828e <__ieee754_pow+0x5e>
 8008270:	b16a      	cbz	r2, 800828e <__ieee754_pow+0x5e>
 8008272:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008276:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800827a:	ea54 030a 	orrs.w	r3, r4, sl
 800827e:	f000 84a4 	beq.w	8008bca <__ieee754_pow+0x99a>
 8008282:	486e      	ldr	r0, [pc, #440]	; (800843c <__ieee754_pow+0x20c>)
 8008284:	b011      	add	sp, #68	; 0x44
 8008286:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828a:	f000 bda5 	b.w	8008dd8 <nan>
 800828e:	2d00      	cmp	r5, #0
 8008290:	da53      	bge.n	800833a <__ieee754_pow+0x10a>
 8008292:	4b6b      	ldr	r3, [pc, #428]	; (8008440 <__ieee754_pow+0x210>)
 8008294:	4598      	cmp	r8, r3
 8008296:	dc4d      	bgt.n	8008334 <__ieee754_pow+0x104>
 8008298:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800829c:	4598      	cmp	r8, r3
 800829e:	dd4c      	ble.n	800833a <__ieee754_pow+0x10a>
 80082a0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80082a4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80082a8:	2b14      	cmp	r3, #20
 80082aa:	dd26      	ble.n	80082fa <__ieee754_pow+0xca>
 80082ac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80082b0:	fa22 f103 	lsr.w	r1, r2, r3
 80082b4:	fa01 f303 	lsl.w	r3, r1, r3
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d13e      	bne.n	800833a <__ieee754_pow+0x10a>
 80082bc:	f001 0101 	and.w	r1, r1, #1
 80082c0:	f1c1 0b02 	rsb	fp, r1, #2
 80082c4:	2a00      	cmp	r2, #0
 80082c6:	d15b      	bne.n	8008380 <__ieee754_pow+0x150>
 80082c8:	4b5b      	ldr	r3, [pc, #364]	; (8008438 <__ieee754_pow+0x208>)
 80082ca:	4598      	cmp	r8, r3
 80082cc:	d124      	bne.n	8008318 <__ieee754_pow+0xe8>
 80082ce:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80082d2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80082d6:	ea53 030a 	orrs.w	r3, r3, sl
 80082da:	f000 8476 	beq.w	8008bca <__ieee754_pow+0x99a>
 80082de:	4b59      	ldr	r3, [pc, #356]	; (8008444 <__ieee754_pow+0x214>)
 80082e0:	429c      	cmp	r4, r3
 80082e2:	dd2d      	ble.n	8008340 <__ieee754_pow+0x110>
 80082e4:	f1b9 0f00 	cmp.w	r9, #0
 80082e8:	f280 8473 	bge.w	8008bd2 <__ieee754_pow+0x9a2>
 80082ec:	2000      	movs	r0, #0
 80082ee:	2100      	movs	r1, #0
 80082f0:	ec41 0b10 	vmov	d0, r0, r1
 80082f4:	b011      	add	sp, #68	; 0x44
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fa:	2a00      	cmp	r2, #0
 80082fc:	d13e      	bne.n	800837c <__ieee754_pow+0x14c>
 80082fe:	f1c3 0314 	rsb	r3, r3, #20
 8008302:	fa48 f103 	asr.w	r1, r8, r3
 8008306:	fa01 f303 	lsl.w	r3, r1, r3
 800830a:	4543      	cmp	r3, r8
 800830c:	f040 8469 	bne.w	8008be2 <__ieee754_pow+0x9b2>
 8008310:	f001 0101 	and.w	r1, r1, #1
 8008314:	f1c1 0b02 	rsb	fp, r1, #2
 8008318:	4b4b      	ldr	r3, [pc, #300]	; (8008448 <__ieee754_pow+0x218>)
 800831a:	4598      	cmp	r8, r3
 800831c:	d118      	bne.n	8008350 <__ieee754_pow+0x120>
 800831e:	f1b9 0f00 	cmp.w	r9, #0
 8008322:	f280 845a 	bge.w	8008bda <__ieee754_pow+0x9aa>
 8008326:	4948      	ldr	r1, [pc, #288]	; (8008448 <__ieee754_pow+0x218>)
 8008328:	4632      	mov	r2, r6
 800832a:	463b      	mov	r3, r7
 800832c:	2000      	movs	r0, #0
 800832e:	f7f8 faad 	bl	800088c <__aeabi_ddiv>
 8008332:	e7dd      	b.n	80082f0 <__ieee754_pow+0xc0>
 8008334:	f04f 0b02 	mov.w	fp, #2
 8008338:	e7c4      	b.n	80082c4 <__ieee754_pow+0x94>
 800833a:	f04f 0b00 	mov.w	fp, #0
 800833e:	e7c1      	b.n	80082c4 <__ieee754_pow+0x94>
 8008340:	f1b9 0f00 	cmp.w	r9, #0
 8008344:	dad2      	bge.n	80082ec <__ieee754_pow+0xbc>
 8008346:	e9dd 0300 	ldrd	r0, r3, [sp]
 800834a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800834e:	e7cf      	b.n	80082f0 <__ieee754_pow+0xc0>
 8008350:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008354:	d106      	bne.n	8008364 <__ieee754_pow+0x134>
 8008356:	4632      	mov	r2, r6
 8008358:	463b      	mov	r3, r7
 800835a:	4610      	mov	r0, r2
 800835c:	4619      	mov	r1, r3
 800835e:	f7f8 f96b 	bl	8000638 <__aeabi_dmul>
 8008362:	e7c5      	b.n	80082f0 <__ieee754_pow+0xc0>
 8008364:	4b39      	ldr	r3, [pc, #228]	; (800844c <__ieee754_pow+0x21c>)
 8008366:	4599      	cmp	r9, r3
 8008368:	d10a      	bne.n	8008380 <__ieee754_pow+0x150>
 800836a:	2d00      	cmp	r5, #0
 800836c:	db08      	blt.n	8008380 <__ieee754_pow+0x150>
 800836e:	ec47 6b10 	vmov	d0, r6, r7
 8008372:	b011      	add	sp, #68	; 0x44
 8008374:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	f000 bc68 	b.w	8008c4c <__ieee754_sqrt>
 800837c:	f04f 0b00 	mov.w	fp, #0
 8008380:	ec47 6b10 	vmov	d0, r6, r7
 8008384:	f000 fd12 	bl	8008dac <fabs>
 8008388:	ec51 0b10 	vmov	r0, r1, d0
 800838c:	f1ba 0f00 	cmp.w	sl, #0
 8008390:	d127      	bne.n	80083e2 <__ieee754_pow+0x1b2>
 8008392:	b124      	cbz	r4, 800839e <__ieee754_pow+0x16e>
 8008394:	4b2c      	ldr	r3, [pc, #176]	; (8008448 <__ieee754_pow+0x218>)
 8008396:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800839a:	429a      	cmp	r2, r3
 800839c:	d121      	bne.n	80083e2 <__ieee754_pow+0x1b2>
 800839e:	f1b9 0f00 	cmp.w	r9, #0
 80083a2:	da05      	bge.n	80083b0 <__ieee754_pow+0x180>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	2000      	movs	r0, #0
 80083aa:	4927      	ldr	r1, [pc, #156]	; (8008448 <__ieee754_pow+0x218>)
 80083ac:	f7f8 fa6e 	bl	800088c <__aeabi_ddiv>
 80083b0:	2d00      	cmp	r5, #0
 80083b2:	da9d      	bge.n	80082f0 <__ieee754_pow+0xc0>
 80083b4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80083b8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80083bc:	ea54 030b 	orrs.w	r3, r4, fp
 80083c0:	d108      	bne.n	80083d4 <__ieee754_pow+0x1a4>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4610      	mov	r0, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	f7f7 ff7d 	bl	80002c8 <__aeabi_dsub>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	e7ac      	b.n	800832e <__ieee754_pow+0xfe>
 80083d4:	f1bb 0f01 	cmp.w	fp, #1
 80083d8:	d18a      	bne.n	80082f0 <__ieee754_pow+0xc0>
 80083da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083de:	4619      	mov	r1, r3
 80083e0:	e786      	b.n	80082f0 <__ieee754_pow+0xc0>
 80083e2:	0fed      	lsrs	r5, r5, #31
 80083e4:	1e6b      	subs	r3, r5, #1
 80083e6:	930d      	str	r3, [sp, #52]	; 0x34
 80083e8:	ea5b 0303 	orrs.w	r3, fp, r3
 80083ec:	d102      	bne.n	80083f4 <__ieee754_pow+0x1c4>
 80083ee:	4632      	mov	r2, r6
 80083f0:	463b      	mov	r3, r7
 80083f2:	e7e8      	b.n	80083c6 <__ieee754_pow+0x196>
 80083f4:	4b16      	ldr	r3, [pc, #88]	; (8008450 <__ieee754_pow+0x220>)
 80083f6:	4598      	cmp	r8, r3
 80083f8:	f340 80fe 	ble.w	80085f8 <__ieee754_pow+0x3c8>
 80083fc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008400:	4598      	cmp	r8, r3
 8008402:	dd0a      	ble.n	800841a <__ieee754_pow+0x1ea>
 8008404:	4b0f      	ldr	r3, [pc, #60]	; (8008444 <__ieee754_pow+0x214>)
 8008406:	429c      	cmp	r4, r3
 8008408:	dc0d      	bgt.n	8008426 <__ieee754_pow+0x1f6>
 800840a:	f1b9 0f00 	cmp.w	r9, #0
 800840e:	f6bf af6d 	bge.w	80082ec <__ieee754_pow+0xbc>
 8008412:	a307      	add	r3, pc, #28	; (adr r3, 8008430 <__ieee754_pow+0x200>)
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	e79f      	b.n	800835a <__ieee754_pow+0x12a>
 800841a:	4b0e      	ldr	r3, [pc, #56]	; (8008454 <__ieee754_pow+0x224>)
 800841c:	429c      	cmp	r4, r3
 800841e:	ddf4      	ble.n	800840a <__ieee754_pow+0x1da>
 8008420:	4b09      	ldr	r3, [pc, #36]	; (8008448 <__ieee754_pow+0x218>)
 8008422:	429c      	cmp	r4, r3
 8008424:	dd18      	ble.n	8008458 <__ieee754_pow+0x228>
 8008426:	f1b9 0f00 	cmp.w	r9, #0
 800842a:	dcf2      	bgt.n	8008412 <__ieee754_pow+0x1e2>
 800842c:	e75e      	b.n	80082ec <__ieee754_pow+0xbc>
 800842e:	bf00      	nop
 8008430:	8800759c 	.word	0x8800759c
 8008434:	7e37e43c 	.word	0x7e37e43c
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	08009665 	.word	0x08009665
 8008440:	433fffff 	.word	0x433fffff
 8008444:	3fefffff 	.word	0x3fefffff
 8008448:	3ff00000 	.word	0x3ff00000
 800844c:	3fe00000 	.word	0x3fe00000
 8008450:	41e00000 	.word	0x41e00000
 8008454:	3feffffe 	.word	0x3feffffe
 8008458:	2200      	movs	r2, #0
 800845a:	4b63      	ldr	r3, [pc, #396]	; (80085e8 <__ieee754_pow+0x3b8>)
 800845c:	f7f7 ff34 	bl	80002c8 <__aeabi_dsub>
 8008460:	a355      	add	r3, pc, #340	; (adr r3, 80085b8 <__ieee754_pow+0x388>)
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	4604      	mov	r4, r0
 8008468:	460d      	mov	r5, r1
 800846a:	f7f8 f8e5 	bl	8000638 <__aeabi_dmul>
 800846e:	a354      	add	r3, pc, #336	; (adr r3, 80085c0 <__ieee754_pow+0x390>)
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	4606      	mov	r6, r0
 8008476:	460f      	mov	r7, r1
 8008478:	4620      	mov	r0, r4
 800847a:	4629      	mov	r1, r5
 800847c:	f7f8 f8dc 	bl	8000638 <__aeabi_dmul>
 8008480:	2200      	movs	r2, #0
 8008482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008486:	4b59      	ldr	r3, [pc, #356]	; (80085ec <__ieee754_pow+0x3bc>)
 8008488:	4620      	mov	r0, r4
 800848a:	4629      	mov	r1, r5
 800848c:	f7f8 f8d4 	bl	8000638 <__aeabi_dmul>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	a14c      	add	r1, pc, #304	; (adr r1, 80085c8 <__ieee754_pow+0x398>)
 8008496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800849a:	f7f7 ff15 	bl	80002c8 <__aeabi_dsub>
 800849e:	4622      	mov	r2, r4
 80084a0:	462b      	mov	r3, r5
 80084a2:	f7f8 f8c9 	bl	8000638 <__aeabi_dmul>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	2000      	movs	r0, #0
 80084ac:	4950      	ldr	r1, [pc, #320]	; (80085f0 <__ieee754_pow+0x3c0>)
 80084ae:	f7f7 ff0b 	bl	80002c8 <__aeabi_dsub>
 80084b2:	4622      	mov	r2, r4
 80084b4:	462b      	mov	r3, r5
 80084b6:	4680      	mov	r8, r0
 80084b8:	4689      	mov	r9, r1
 80084ba:	4620      	mov	r0, r4
 80084bc:	4629      	mov	r1, r5
 80084be:	f7f8 f8bb 	bl	8000638 <__aeabi_dmul>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4640      	mov	r0, r8
 80084c8:	4649      	mov	r1, r9
 80084ca:	f7f8 f8b5 	bl	8000638 <__aeabi_dmul>
 80084ce:	a340      	add	r3, pc, #256	; (adr r3, 80085d0 <__ieee754_pow+0x3a0>)
 80084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d4:	f7f8 f8b0 	bl	8000638 <__aeabi_dmul>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084e0:	f7f7 fef2 	bl	80002c8 <__aeabi_dsub>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4604      	mov	r4, r0
 80084ea:	460d      	mov	r5, r1
 80084ec:	4630      	mov	r0, r6
 80084ee:	4639      	mov	r1, r7
 80084f0:	f7f7 feec 	bl	80002cc <__adddf3>
 80084f4:	2000      	movs	r0, #0
 80084f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084fa:	4632      	mov	r2, r6
 80084fc:	463b      	mov	r3, r7
 80084fe:	f7f7 fee3 	bl	80002c8 <__aeabi_dsub>
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	4620      	mov	r0, r4
 8008508:	4629      	mov	r1, r5
 800850a:	f7f7 fedd 	bl	80002c8 <__aeabi_dsub>
 800850e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008510:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008514:	4313      	orrs	r3, r2
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	f040 81eb 	bne.w	80088f4 <__ieee754_pow+0x6c4>
 800851e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80085d8 <__ieee754_pow+0x3a8>
 8008522:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008526:	2400      	movs	r4, #0
 8008528:	4622      	mov	r2, r4
 800852a:	462b      	mov	r3, r5
 800852c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008530:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008534:	f7f7 fec8 	bl	80002c8 <__aeabi_dsub>
 8008538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800853c:	f7f8 f87c 	bl	8000638 <__aeabi_dmul>
 8008540:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008544:	4680      	mov	r8, r0
 8008546:	4689      	mov	r9, r1
 8008548:	4630      	mov	r0, r6
 800854a:	4639      	mov	r1, r7
 800854c:	f7f8 f874 	bl	8000638 <__aeabi_dmul>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4640      	mov	r0, r8
 8008556:	4649      	mov	r1, r9
 8008558:	f7f7 feb8 	bl	80002cc <__adddf3>
 800855c:	4622      	mov	r2, r4
 800855e:	462b      	mov	r3, r5
 8008560:	4680      	mov	r8, r0
 8008562:	4689      	mov	r9, r1
 8008564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008568:	f7f8 f866 	bl	8000638 <__aeabi_dmul>
 800856c:	460b      	mov	r3, r1
 800856e:	4604      	mov	r4, r0
 8008570:	460d      	mov	r5, r1
 8008572:	4602      	mov	r2, r0
 8008574:	4649      	mov	r1, r9
 8008576:	4640      	mov	r0, r8
 8008578:	e9cd 4500 	strd	r4, r5, [sp]
 800857c:	f7f7 fea6 	bl	80002cc <__adddf3>
 8008580:	4b1c      	ldr	r3, [pc, #112]	; (80085f4 <__ieee754_pow+0x3c4>)
 8008582:	4299      	cmp	r1, r3
 8008584:	4606      	mov	r6, r0
 8008586:	460f      	mov	r7, r1
 8008588:	468b      	mov	fp, r1
 800858a:	f340 82f7 	ble.w	8008b7c <__ieee754_pow+0x94c>
 800858e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008592:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008596:	4303      	orrs	r3, r0
 8008598:	f000 81ea 	beq.w	8008970 <__ieee754_pow+0x740>
 800859c:	a310      	add	r3, pc, #64	; (adr r3, 80085e0 <__ieee754_pow+0x3b0>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a6:	f7f8 f847 	bl	8000638 <__aeabi_dmul>
 80085aa:	a30d      	add	r3, pc, #52	; (adr r3, 80085e0 <__ieee754_pow+0x3b0>)
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	e6d5      	b.n	800835e <__ieee754_pow+0x12e>
 80085b2:	bf00      	nop
 80085b4:	f3af 8000 	nop.w
 80085b8:	60000000 	.word	0x60000000
 80085bc:	3ff71547 	.word	0x3ff71547
 80085c0:	f85ddf44 	.word	0xf85ddf44
 80085c4:	3e54ae0b 	.word	0x3e54ae0b
 80085c8:	55555555 	.word	0x55555555
 80085cc:	3fd55555 	.word	0x3fd55555
 80085d0:	652b82fe 	.word	0x652b82fe
 80085d4:	3ff71547 	.word	0x3ff71547
 80085d8:	00000000 	.word	0x00000000
 80085dc:	bff00000 	.word	0xbff00000
 80085e0:	8800759c 	.word	0x8800759c
 80085e4:	7e37e43c 	.word	0x7e37e43c
 80085e8:	3ff00000 	.word	0x3ff00000
 80085ec:	3fd00000 	.word	0x3fd00000
 80085f0:	3fe00000 	.word	0x3fe00000
 80085f4:	408fffff 	.word	0x408fffff
 80085f8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	da05      	bge.n	800860e <__ieee754_pow+0x3de>
 8008602:	4bd3      	ldr	r3, [pc, #844]	; (8008950 <__ieee754_pow+0x720>)
 8008604:	f7f8 f818 	bl	8000638 <__aeabi_dmul>
 8008608:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800860c:	460c      	mov	r4, r1
 800860e:	1523      	asrs	r3, r4, #20
 8008610:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008614:	4413      	add	r3, r2
 8008616:	9309      	str	r3, [sp, #36]	; 0x24
 8008618:	4bce      	ldr	r3, [pc, #824]	; (8008954 <__ieee754_pow+0x724>)
 800861a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800861e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008622:	429c      	cmp	r4, r3
 8008624:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008628:	dd08      	ble.n	800863c <__ieee754_pow+0x40c>
 800862a:	4bcb      	ldr	r3, [pc, #812]	; (8008958 <__ieee754_pow+0x728>)
 800862c:	429c      	cmp	r4, r3
 800862e:	f340 815e 	ble.w	80088ee <__ieee754_pow+0x6be>
 8008632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008634:	3301      	adds	r3, #1
 8008636:	9309      	str	r3, [sp, #36]	; 0x24
 8008638:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800863c:	f04f 0a00 	mov.w	sl, #0
 8008640:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008644:	930c      	str	r3, [sp, #48]	; 0x30
 8008646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008648:	4bc4      	ldr	r3, [pc, #784]	; (800895c <__ieee754_pow+0x72c>)
 800864a:	4413      	add	r3, r2
 800864c:	ed93 7b00 	vldr	d7, [r3]
 8008650:	4629      	mov	r1, r5
 8008652:	ec53 2b17 	vmov	r2, r3, d7
 8008656:	ed8d 7b06 	vstr	d7, [sp, #24]
 800865a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800865e:	f7f7 fe33 	bl	80002c8 <__aeabi_dsub>
 8008662:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008666:	4606      	mov	r6, r0
 8008668:	460f      	mov	r7, r1
 800866a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800866e:	f7f7 fe2d 	bl	80002cc <__adddf3>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	2000      	movs	r0, #0
 8008678:	49b9      	ldr	r1, [pc, #740]	; (8008960 <__ieee754_pow+0x730>)
 800867a:	f7f8 f907 	bl	800088c <__aeabi_ddiv>
 800867e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4630      	mov	r0, r6
 8008688:	4639      	mov	r1, r7
 800868a:	f7f7 ffd5 	bl	8000638 <__aeabi_dmul>
 800868e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008692:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008696:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800869a:	2300      	movs	r3, #0
 800869c:	9302      	str	r3, [sp, #8]
 800869e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086a2:	106d      	asrs	r5, r5, #1
 80086a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80086a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80086ac:	2200      	movs	r2, #0
 80086ae:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	4614      	mov	r4, r2
 80086b8:	461d      	mov	r5, r3
 80086ba:	f7f7 ffbd 	bl	8000638 <__aeabi_dmul>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	4630      	mov	r0, r6
 80086c4:	4639      	mov	r1, r7
 80086c6:	f7f7 fdff 	bl	80002c8 <__aeabi_dsub>
 80086ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086ce:	4606      	mov	r6, r0
 80086d0:	460f      	mov	r7, r1
 80086d2:	4620      	mov	r0, r4
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7f7 fdf7 	bl	80002c8 <__aeabi_dsub>
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086e2:	f7f7 fdf1 	bl	80002c8 <__aeabi_dsub>
 80086e6:	4642      	mov	r2, r8
 80086e8:	464b      	mov	r3, r9
 80086ea:	f7f7 ffa5 	bl	8000638 <__aeabi_dmul>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4630      	mov	r0, r6
 80086f4:	4639      	mov	r1, r7
 80086f6:	f7f7 fde7 	bl	80002c8 <__aeabi_dsub>
 80086fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80086fe:	f7f7 ff9b 	bl	8000638 <__aeabi_dmul>
 8008702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008706:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800870a:	4610      	mov	r0, r2
 800870c:	4619      	mov	r1, r3
 800870e:	f7f7 ff93 	bl	8000638 <__aeabi_dmul>
 8008712:	a37b      	add	r3, pc, #492	; (adr r3, 8008900 <__ieee754_pow+0x6d0>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	4604      	mov	r4, r0
 800871a:	460d      	mov	r5, r1
 800871c:	f7f7 ff8c 	bl	8000638 <__aeabi_dmul>
 8008720:	a379      	add	r3, pc, #484	; (adr r3, 8008908 <__ieee754_pow+0x6d8>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f7f7 fdd1 	bl	80002cc <__adddf3>
 800872a:	4622      	mov	r2, r4
 800872c:	462b      	mov	r3, r5
 800872e:	f7f7 ff83 	bl	8000638 <__aeabi_dmul>
 8008732:	a377      	add	r3, pc, #476	; (adr r3, 8008910 <__ieee754_pow+0x6e0>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f7f7 fdc8 	bl	80002cc <__adddf3>
 800873c:	4622      	mov	r2, r4
 800873e:	462b      	mov	r3, r5
 8008740:	f7f7 ff7a 	bl	8000638 <__aeabi_dmul>
 8008744:	a374      	add	r3, pc, #464	; (adr r3, 8008918 <__ieee754_pow+0x6e8>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f7 fdbf 	bl	80002cc <__adddf3>
 800874e:	4622      	mov	r2, r4
 8008750:	462b      	mov	r3, r5
 8008752:	f7f7 ff71 	bl	8000638 <__aeabi_dmul>
 8008756:	a372      	add	r3, pc, #456	; (adr r3, 8008920 <__ieee754_pow+0x6f0>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f7 fdb6 	bl	80002cc <__adddf3>
 8008760:	4622      	mov	r2, r4
 8008762:	462b      	mov	r3, r5
 8008764:	f7f7 ff68 	bl	8000638 <__aeabi_dmul>
 8008768:	a36f      	add	r3, pc, #444	; (adr r3, 8008928 <__ieee754_pow+0x6f8>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 fdad 	bl	80002cc <__adddf3>
 8008772:	4622      	mov	r2, r4
 8008774:	4606      	mov	r6, r0
 8008776:	460f      	mov	r7, r1
 8008778:	462b      	mov	r3, r5
 800877a:	4620      	mov	r0, r4
 800877c:	4629      	mov	r1, r5
 800877e:	f7f7 ff5b 	bl	8000638 <__aeabi_dmul>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4630      	mov	r0, r6
 8008788:	4639      	mov	r1, r7
 800878a:	f7f7 ff55 	bl	8000638 <__aeabi_dmul>
 800878e:	4642      	mov	r2, r8
 8008790:	4604      	mov	r4, r0
 8008792:	460d      	mov	r5, r1
 8008794:	464b      	mov	r3, r9
 8008796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800879a:	f7f7 fd97 	bl	80002cc <__adddf3>
 800879e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087a2:	f7f7 ff49 	bl	8000638 <__aeabi_dmul>
 80087a6:	4622      	mov	r2, r4
 80087a8:	462b      	mov	r3, r5
 80087aa:	f7f7 fd8f 	bl	80002cc <__adddf3>
 80087ae:	4642      	mov	r2, r8
 80087b0:	4606      	mov	r6, r0
 80087b2:	460f      	mov	r7, r1
 80087b4:	464b      	mov	r3, r9
 80087b6:	4640      	mov	r0, r8
 80087b8:	4649      	mov	r1, r9
 80087ba:	f7f7 ff3d 	bl	8000638 <__aeabi_dmul>
 80087be:	2200      	movs	r2, #0
 80087c0:	4b68      	ldr	r3, [pc, #416]	; (8008964 <__ieee754_pow+0x734>)
 80087c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80087c6:	f7f7 fd81 	bl	80002cc <__adddf3>
 80087ca:	4632      	mov	r2, r6
 80087cc:	463b      	mov	r3, r7
 80087ce:	f7f7 fd7d 	bl	80002cc <__adddf3>
 80087d2:	9802      	ldr	r0, [sp, #8]
 80087d4:	460d      	mov	r5, r1
 80087d6:	4604      	mov	r4, r0
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4640      	mov	r0, r8
 80087de:	4649      	mov	r1, r9
 80087e0:	f7f7 ff2a 	bl	8000638 <__aeabi_dmul>
 80087e4:	2200      	movs	r2, #0
 80087e6:	4680      	mov	r8, r0
 80087e8:	4689      	mov	r9, r1
 80087ea:	4b5e      	ldr	r3, [pc, #376]	; (8008964 <__ieee754_pow+0x734>)
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	f7f7 fd6a 	bl	80002c8 <__aeabi_dsub>
 80087f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087f8:	f7f7 fd66 	bl	80002c8 <__aeabi_dsub>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4630      	mov	r0, r6
 8008802:	4639      	mov	r1, r7
 8008804:	f7f7 fd60 	bl	80002c8 <__aeabi_dsub>
 8008808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800880c:	f7f7 ff14 	bl	8000638 <__aeabi_dmul>
 8008810:	4622      	mov	r2, r4
 8008812:	4606      	mov	r6, r0
 8008814:	460f      	mov	r7, r1
 8008816:	462b      	mov	r3, r5
 8008818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800881c:	f7f7 ff0c 	bl	8000638 <__aeabi_dmul>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	4630      	mov	r0, r6
 8008826:	4639      	mov	r1, r7
 8008828:	f7f7 fd50 	bl	80002cc <__adddf3>
 800882c:	4606      	mov	r6, r0
 800882e:	460f      	mov	r7, r1
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4640      	mov	r0, r8
 8008836:	4649      	mov	r1, r9
 8008838:	f7f7 fd48 	bl	80002cc <__adddf3>
 800883c:	9802      	ldr	r0, [sp, #8]
 800883e:	a33c      	add	r3, pc, #240	; (adr r3, 8008930 <__ieee754_pow+0x700>)
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	4604      	mov	r4, r0
 8008846:	460d      	mov	r5, r1
 8008848:	f7f7 fef6 	bl	8000638 <__aeabi_dmul>
 800884c:	4642      	mov	r2, r8
 800884e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008852:	464b      	mov	r3, r9
 8008854:	4620      	mov	r0, r4
 8008856:	4629      	mov	r1, r5
 8008858:	f7f7 fd36 	bl	80002c8 <__aeabi_dsub>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4630      	mov	r0, r6
 8008862:	4639      	mov	r1, r7
 8008864:	f7f7 fd30 	bl	80002c8 <__aeabi_dsub>
 8008868:	a333      	add	r3, pc, #204	; (adr r3, 8008938 <__ieee754_pow+0x708>)
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	f7f7 fee3 	bl	8000638 <__aeabi_dmul>
 8008872:	a333      	add	r3, pc, #204	; (adr r3, 8008940 <__ieee754_pow+0x710>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	4606      	mov	r6, r0
 800887a:	460f      	mov	r7, r1
 800887c:	4620      	mov	r0, r4
 800887e:	4629      	mov	r1, r5
 8008880:	f7f7 feda 	bl	8000638 <__aeabi_dmul>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4630      	mov	r0, r6
 800888a:	4639      	mov	r1, r7
 800888c:	f7f7 fd1e 	bl	80002cc <__adddf3>
 8008890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008892:	4b35      	ldr	r3, [pc, #212]	; (8008968 <__ieee754_pow+0x738>)
 8008894:	4413      	add	r3, r2
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f7f7 fd17 	bl	80002cc <__adddf3>
 800889e:	4604      	mov	r4, r0
 80088a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088a2:	460d      	mov	r5, r1
 80088a4:	f7f7 fe5e 	bl	8000564 <__aeabi_i2d>
 80088a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088aa:	4b30      	ldr	r3, [pc, #192]	; (800896c <__ieee754_pow+0x73c>)
 80088ac:	4413      	add	r3, r2
 80088ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088b2:	4606      	mov	r6, r0
 80088b4:	460f      	mov	r7, r1
 80088b6:	4622      	mov	r2, r4
 80088b8:	462b      	mov	r3, r5
 80088ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088be:	f7f7 fd05 	bl	80002cc <__adddf3>
 80088c2:	4642      	mov	r2, r8
 80088c4:	464b      	mov	r3, r9
 80088c6:	f7f7 fd01 	bl	80002cc <__adddf3>
 80088ca:	4632      	mov	r2, r6
 80088cc:	463b      	mov	r3, r7
 80088ce:	f7f7 fcfd 	bl	80002cc <__adddf3>
 80088d2:	9802      	ldr	r0, [sp, #8]
 80088d4:	4632      	mov	r2, r6
 80088d6:	463b      	mov	r3, r7
 80088d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088dc:	f7f7 fcf4 	bl	80002c8 <__aeabi_dsub>
 80088e0:	4642      	mov	r2, r8
 80088e2:	464b      	mov	r3, r9
 80088e4:	f7f7 fcf0 	bl	80002c8 <__aeabi_dsub>
 80088e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088ec:	e607      	b.n	80084fe <__ieee754_pow+0x2ce>
 80088ee:	f04f 0a01 	mov.w	sl, #1
 80088f2:	e6a5      	b.n	8008640 <__ieee754_pow+0x410>
 80088f4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008948 <__ieee754_pow+0x718>
 80088f8:	e613      	b.n	8008522 <__ieee754_pow+0x2f2>
 80088fa:	bf00      	nop
 80088fc:	f3af 8000 	nop.w
 8008900:	4a454eef 	.word	0x4a454eef
 8008904:	3fca7e28 	.word	0x3fca7e28
 8008908:	93c9db65 	.word	0x93c9db65
 800890c:	3fcd864a 	.word	0x3fcd864a
 8008910:	a91d4101 	.word	0xa91d4101
 8008914:	3fd17460 	.word	0x3fd17460
 8008918:	518f264d 	.word	0x518f264d
 800891c:	3fd55555 	.word	0x3fd55555
 8008920:	db6fabff 	.word	0xdb6fabff
 8008924:	3fdb6db6 	.word	0x3fdb6db6
 8008928:	33333303 	.word	0x33333303
 800892c:	3fe33333 	.word	0x3fe33333
 8008930:	e0000000 	.word	0xe0000000
 8008934:	3feec709 	.word	0x3feec709
 8008938:	dc3a03fd 	.word	0xdc3a03fd
 800893c:	3feec709 	.word	0x3feec709
 8008940:	145b01f5 	.word	0x145b01f5
 8008944:	be3e2fe0 	.word	0xbe3e2fe0
 8008948:	00000000 	.word	0x00000000
 800894c:	3ff00000 	.word	0x3ff00000
 8008950:	43400000 	.word	0x43400000
 8008954:	0003988e 	.word	0x0003988e
 8008958:	000bb679 	.word	0x000bb679
 800895c:	08009698 	.word	0x08009698
 8008960:	3ff00000 	.word	0x3ff00000
 8008964:	40080000 	.word	0x40080000
 8008968:	080096b8 	.word	0x080096b8
 800896c:	080096a8 	.word	0x080096a8
 8008970:	a3b4      	add	r3, pc, #720	; (adr r3, 8008c44 <__ieee754_pow+0xa14>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	4640      	mov	r0, r8
 8008978:	4649      	mov	r1, r9
 800897a:	f7f7 fca7 	bl	80002cc <__adddf3>
 800897e:	4622      	mov	r2, r4
 8008980:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008984:	462b      	mov	r3, r5
 8008986:	4630      	mov	r0, r6
 8008988:	4639      	mov	r1, r7
 800898a:	f7f7 fc9d 	bl	80002c8 <__aeabi_dsub>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008996:	f7f8 f8df 	bl	8000b58 <__aeabi_dcmpgt>
 800899a:	2800      	cmp	r0, #0
 800899c:	f47f adfe 	bne.w	800859c <__ieee754_pow+0x36c>
 80089a0:	4aa3      	ldr	r2, [pc, #652]	; (8008c30 <__ieee754_pow+0xa00>)
 80089a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089a6:	4293      	cmp	r3, r2
 80089a8:	f340 810a 	ble.w	8008bc0 <__ieee754_pow+0x990>
 80089ac:	151b      	asrs	r3, r3, #20
 80089ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80089b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80089b6:	fa4a f303 	asr.w	r3, sl, r3
 80089ba:	445b      	add	r3, fp
 80089bc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80089c0:	4e9c      	ldr	r6, [pc, #624]	; (8008c34 <__ieee754_pow+0xa04>)
 80089c2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80089c6:	4116      	asrs	r6, r2
 80089c8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80089cc:	2000      	movs	r0, #0
 80089ce:	ea23 0106 	bic.w	r1, r3, r6
 80089d2:	f1c2 0214 	rsb	r2, r2, #20
 80089d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80089da:	fa4a fa02 	asr.w	sl, sl, r2
 80089de:	f1bb 0f00 	cmp.w	fp, #0
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4620      	mov	r0, r4
 80089e8:	4629      	mov	r1, r5
 80089ea:	bfb8      	it	lt
 80089ec:	f1ca 0a00 	rsblt	sl, sl, #0
 80089f0:	f7f7 fc6a 	bl	80002c8 <__aeabi_dsub>
 80089f4:	e9cd 0100 	strd	r0, r1, [sp]
 80089f8:	4642      	mov	r2, r8
 80089fa:	464b      	mov	r3, r9
 80089fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a00:	f7f7 fc64 	bl	80002cc <__adddf3>
 8008a04:	2000      	movs	r0, #0
 8008a06:	a378      	add	r3, pc, #480	; (adr r3, 8008be8 <__ieee754_pow+0x9b8>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	460d      	mov	r5, r1
 8008a10:	f7f7 fe12 	bl	8000638 <__aeabi_dmul>
 8008a14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a18:	4606      	mov	r6, r0
 8008a1a:	460f      	mov	r7, r1
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f7 fc52 	bl	80002c8 <__aeabi_dsub>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4640      	mov	r0, r8
 8008a2a:	4649      	mov	r1, r9
 8008a2c:	f7f7 fc4c 	bl	80002c8 <__aeabi_dsub>
 8008a30:	a36f      	add	r3, pc, #444	; (adr r3, 8008bf0 <__ieee754_pow+0x9c0>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fdff 	bl	8000638 <__aeabi_dmul>
 8008a3a:	a36f      	add	r3, pc, #444	; (adr r3, 8008bf8 <__ieee754_pow+0x9c8>)
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	4680      	mov	r8, r0
 8008a42:	4689      	mov	r9, r1
 8008a44:	4620      	mov	r0, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	f7f7 fdf6 	bl	8000638 <__aeabi_dmul>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	4640      	mov	r0, r8
 8008a52:	4649      	mov	r1, r9
 8008a54:	f7f7 fc3a 	bl	80002cc <__adddf3>
 8008a58:	4604      	mov	r4, r0
 8008a5a:	460d      	mov	r5, r1
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4630      	mov	r0, r6
 8008a62:	4639      	mov	r1, r7
 8008a64:	f7f7 fc32 	bl	80002cc <__adddf3>
 8008a68:	4632      	mov	r2, r6
 8008a6a:	463b      	mov	r3, r7
 8008a6c:	4680      	mov	r8, r0
 8008a6e:	4689      	mov	r9, r1
 8008a70:	f7f7 fc2a 	bl	80002c8 <__aeabi_dsub>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4620      	mov	r0, r4
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	f7f7 fc24 	bl	80002c8 <__aeabi_dsub>
 8008a80:	4642      	mov	r2, r8
 8008a82:	4606      	mov	r6, r0
 8008a84:	460f      	mov	r7, r1
 8008a86:	464b      	mov	r3, r9
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	f7f7 fdd4 	bl	8000638 <__aeabi_dmul>
 8008a90:	a35b      	add	r3, pc, #364	; (adr r3, 8008c00 <__ieee754_pow+0x9d0>)
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	4604      	mov	r4, r0
 8008a98:	460d      	mov	r5, r1
 8008a9a:	f7f7 fdcd 	bl	8000638 <__aeabi_dmul>
 8008a9e:	a35a      	add	r3, pc, #360	; (adr r3, 8008c08 <__ieee754_pow+0x9d8>)
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	f7f7 fc10 	bl	80002c8 <__aeabi_dsub>
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	462b      	mov	r3, r5
 8008aac:	f7f7 fdc4 	bl	8000638 <__aeabi_dmul>
 8008ab0:	a357      	add	r3, pc, #348	; (adr r3, 8008c10 <__ieee754_pow+0x9e0>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f7f7 fc09 	bl	80002cc <__adddf3>
 8008aba:	4622      	mov	r2, r4
 8008abc:	462b      	mov	r3, r5
 8008abe:	f7f7 fdbb 	bl	8000638 <__aeabi_dmul>
 8008ac2:	a355      	add	r3, pc, #340	; (adr r3, 8008c18 <__ieee754_pow+0x9e8>)
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f7f7 fbfe 	bl	80002c8 <__aeabi_dsub>
 8008acc:	4622      	mov	r2, r4
 8008ace:	462b      	mov	r3, r5
 8008ad0:	f7f7 fdb2 	bl	8000638 <__aeabi_dmul>
 8008ad4:	a352      	add	r3, pc, #328	; (adr r3, 8008c20 <__ieee754_pow+0x9f0>)
 8008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ada:	f7f7 fbf7 	bl	80002cc <__adddf3>
 8008ade:	4622      	mov	r2, r4
 8008ae0:	462b      	mov	r3, r5
 8008ae2:	f7f7 fda9 	bl	8000638 <__aeabi_dmul>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4640      	mov	r0, r8
 8008aec:	4649      	mov	r1, r9
 8008aee:	f7f7 fbeb 	bl	80002c8 <__aeabi_dsub>
 8008af2:	4604      	mov	r4, r0
 8008af4:	460d      	mov	r5, r1
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4640      	mov	r0, r8
 8008afc:	4649      	mov	r1, r9
 8008afe:	f7f7 fd9b 	bl	8000638 <__aeabi_dmul>
 8008b02:	2200      	movs	r2, #0
 8008b04:	e9cd 0100 	strd	r0, r1, [sp]
 8008b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f7f7 fbda 	bl	80002c8 <__aeabi_dsub>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b1c:	f7f7 feb6 	bl	800088c <__aeabi_ddiv>
 8008b20:	4632      	mov	r2, r6
 8008b22:	4604      	mov	r4, r0
 8008b24:	460d      	mov	r5, r1
 8008b26:	463b      	mov	r3, r7
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	f7f7 fd84 	bl	8000638 <__aeabi_dmul>
 8008b30:	4632      	mov	r2, r6
 8008b32:	463b      	mov	r3, r7
 8008b34:	f7f7 fbca 	bl	80002cc <__adddf3>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 fbc2 	bl	80002c8 <__aeabi_dsub>
 8008b44:	4642      	mov	r2, r8
 8008b46:	464b      	mov	r3, r9
 8008b48:	f7f7 fbbe 	bl	80002c8 <__aeabi_dsub>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	2000      	movs	r0, #0
 8008b52:	4939      	ldr	r1, [pc, #228]	; (8008c38 <__ieee754_pow+0xa08>)
 8008b54:	f7f7 fbb8 	bl	80002c8 <__aeabi_dsub>
 8008b58:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008b5c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	da2f      	bge.n	8008bc6 <__ieee754_pow+0x996>
 8008b66:	4650      	mov	r0, sl
 8008b68:	ec43 2b10 	vmov	d0, r2, r3
 8008b6c:	f000 f9c0 	bl	8008ef0 <scalbn>
 8008b70:	ec51 0b10 	vmov	r0, r1, d0
 8008b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b78:	f7ff bbf1 	b.w	800835e <__ieee754_pow+0x12e>
 8008b7c:	4b2f      	ldr	r3, [pc, #188]	; (8008c3c <__ieee754_pow+0xa0c>)
 8008b7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008b82:	429e      	cmp	r6, r3
 8008b84:	f77f af0c 	ble.w	80089a0 <__ieee754_pow+0x770>
 8008b88:	4b2d      	ldr	r3, [pc, #180]	; (8008c40 <__ieee754_pow+0xa10>)
 8008b8a:	440b      	add	r3, r1
 8008b8c:	4303      	orrs	r3, r0
 8008b8e:	d00b      	beq.n	8008ba8 <__ieee754_pow+0x978>
 8008b90:	a325      	add	r3, pc, #148	; (adr r3, 8008c28 <__ieee754_pow+0x9f8>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b9a:	f7f7 fd4d 	bl	8000638 <__aeabi_dmul>
 8008b9e:	a322      	add	r3, pc, #136	; (adr r3, 8008c28 <__ieee754_pow+0x9f8>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f7ff bbdb 	b.w	800835e <__ieee754_pow+0x12e>
 8008ba8:	4622      	mov	r2, r4
 8008baa:	462b      	mov	r3, r5
 8008bac:	f7f7 fb8c 	bl	80002c8 <__aeabi_dsub>
 8008bb0:	4642      	mov	r2, r8
 8008bb2:	464b      	mov	r3, r9
 8008bb4:	f7f7 ffc6 	bl	8000b44 <__aeabi_dcmpge>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f43f aef1 	beq.w	80089a0 <__ieee754_pow+0x770>
 8008bbe:	e7e7      	b.n	8008b90 <__ieee754_pow+0x960>
 8008bc0:	f04f 0a00 	mov.w	sl, #0
 8008bc4:	e718      	b.n	80089f8 <__ieee754_pow+0x7c8>
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	e7d4      	b.n	8008b74 <__ieee754_pow+0x944>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	491a      	ldr	r1, [pc, #104]	; (8008c38 <__ieee754_pow+0xa08>)
 8008bce:	f7ff bb8f 	b.w	80082f0 <__ieee754_pow+0xc0>
 8008bd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bd6:	f7ff bb8b 	b.w	80082f0 <__ieee754_pow+0xc0>
 8008bda:	4630      	mov	r0, r6
 8008bdc:	4639      	mov	r1, r7
 8008bde:	f7ff bb87 	b.w	80082f0 <__ieee754_pow+0xc0>
 8008be2:	4693      	mov	fp, r2
 8008be4:	f7ff bb98 	b.w	8008318 <__ieee754_pow+0xe8>
 8008be8:	00000000 	.word	0x00000000
 8008bec:	3fe62e43 	.word	0x3fe62e43
 8008bf0:	fefa39ef 	.word	0xfefa39ef
 8008bf4:	3fe62e42 	.word	0x3fe62e42
 8008bf8:	0ca86c39 	.word	0x0ca86c39
 8008bfc:	be205c61 	.word	0xbe205c61
 8008c00:	72bea4d0 	.word	0x72bea4d0
 8008c04:	3e663769 	.word	0x3e663769
 8008c08:	c5d26bf1 	.word	0xc5d26bf1
 8008c0c:	3ebbbd41 	.word	0x3ebbbd41
 8008c10:	af25de2c 	.word	0xaf25de2c
 8008c14:	3f11566a 	.word	0x3f11566a
 8008c18:	16bebd93 	.word	0x16bebd93
 8008c1c:	3f66c16c 	.word	0x3f66c16c
 8008c20:	5555553e 	.word	0x5555553e
 8008c24:	3fc55555 	.word	0x3fc55555
 8008c28:	c2f8f359 	.word	0xc2f8f359
 8008c2c:	01a56e1f 	.word	0x01a56e1f
 8008c30:	3fe00000 	.word	0x3fe00000
 8008c34:	000fffff 	.word	0x000fffff
 8008c38:	3ff00000 	.word	0x3ff00000
 8008c3c:	4090cbff 	.word	0x4090cbff
 8008c40:	3f6f3400 	.word	0x3f6f3400
 8008c44:	652b82fe 	.word	0x652b82fe
 8008c48:	3c971547 	.word	0x3c971547

08008c4c <__ieee754_sqrt>:
 8008c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c50:	4955      	ldr	r1, [pc, #340]	; (8008da8 <__ieee754_sqrt+0x15c>)
 8008c52:	ec55 4b10 	vmov	r4, r5, d0
 8008c56:	43a9      	bics	r1, r5
 8008c58:	462b      	mov	r3, r5
 8008c5a:	462a      	mov	r2, r5
 8008c5c:	d112      	bne.n	8008c84 <__ieee754_sqrt+0x38>
 8008c5e:	ee10 2a10 	vmov	r2, s0
 8008c62:	ee10 0a10 	vmov	r0, s0
 8008c66:	4629      	mov	r1, r5
 8008c68:	f7f7 fce6 	bl	8000638 <__aeabi_dmul>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4620      	mov	r0, r4
 8008c72:	4629      	mov	r1, r5
 8008c74:	f7f7 fb2a 	bl	80002cc <__adddf3>
 8008c78:	4604      	mov	r4, r0
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	ec45 4b10 	vmov	d0, r4, r5
 8008c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c84:	2d00      	cmp	r5, #0
 8008c86:	ee10 0a10 	vmov	r0, s0
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	dc0f      	bgt.n	8008cae <__ieee754_sqrt+0x62>
 8008c8e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c92:	4330      	orrs	r0, r6
 8008c94:	d0f2      	beq.n	8008c7c <__ieee754_sqrt+0x30>
 8008c96:	b155      	cbz	r5, 8008cae <__ieee754_sqrt+0x62>
 8008c98:	ee10 2a10 	vmov	r2, s0
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	f7f7 fb12 	bl	80002c8 <__aeabi_dsub>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	f7f7 fdf0 	bl	800088c <__aeabi_ddiv>
 8008cac:	e7e4      	b.n	8008c78 <__ieee754_sqrt+0x2c>
 8008cae:	151b      	asrs	r3, r3, #20
 8008cb0:	d073      	beq.n	8008d9a <__ieee754_sqrt+0x14e>
 8008cb2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008cb6:	07dd      	lsls	r5, r3, #31
 8008cb8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008cbc:	bf48      	it	mi
 8008cbe:	0fc8      	lsrmi	r0, r1, #31
 8008cc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008cc4:	bf44      	itt	mi
 8008cc6:	0049      	lslmi	r1, r1, #1
 8008cc8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008ccc:	2500      	movs	r5, #0
 8008cce:	1058      	asrs	r0, r3, #1
 8008cd0:	0fcb      	lsrs	r3, r1, #31
 8008cd2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008cd6:	0049      	lsls	r1, r1, #1
 8008cd8:	2316      	movs	r3, #22
 8008cda:	462c      	mov	r4, r5
 8008cdc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008ce0:	19a7      	adds	r7, r4, r6
 8008ce2:	4297      	cmp	r7, r2
 8008ce4:	bfde      	ittt	le
 8008ce6:	19bc      	addle	r4, r7, r6
 8008ce8:	1bd2      	suble	r2, r2, r7
 8008cea:	19ad      	addle	r5, r5, r6
 8008cec:	0fcf      	lsrs	r7, r1, #31
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008cf4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008cf8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008cfc:	d1f0      	bne.n	8008ce0 <__ieee754_sqrt+0x94>
 8008cfe:	f04f 0c20 	mov.w	ip, #32
 8008d02:	469e      	mov	lr, r3
 8008d04:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008d08:	42a2      	cmp	r2, r4
 8008d0a:	eb06 070e 	add.w	r7, r6, lr
 8008d0e:	dc02      	bgt.n	8008d16 <__ieee754_sqrt+0xca>
 8008d10:	d112      	bne.n	8008d38 <__ieee754_sqrt+0xec>
 8008d12:	428f      	cmp	r7, r1
 8008d14:	d810      	bhi.n	8008d38 <__ieee754_sqrt+0xec>
 8008d16:	2f00      	cmp	r7, #0
 8008d18:	eb07 0e06 	add.w	lr, r7, r6
 8008d1c:	da42      	bge.n	8008da4 <__ieee754_sqrt+0x158>
 8008d1e:	f1be 0f00 	cmp.w	lr, #0
 8008d22:	db3f      	blt.n	8008da4 <__ieee754_sqrt+0x158>
 8008d24:	f104 0801 	add.w	r8, r4, #1
 8008d28:	1b12      	subs	r2, r2, r4
 8008d2a:	428f      	cmp	r7, r1
 8008d2c:	bf88      	it	hi
 8008d2e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008d32:	1bc9      	subs	r1, r1, r7
 8008d34:	4433      	add	r3, r6
 8008d36:	4644      	mov	r4, r8
 8008d38:	0052      	lsls	r2, r2, #1
 8008d3a:	f1bc 0c01 	subs.w	ip, ip, #1
 8008d3e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008d42:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008d46:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d4a:	d1dd      	bne.n	8008d08 <__ieee754_sqrt+0xbc>
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	d006      	beq.n	8008d5e <__ieee754_sqrt+0x112>
 8008d50:	1c5c      	adds	r4, r3, #1
 8008d52:	bf13      	iteet	ne
 8008d54:	3301      	addne	r3, #1
 8008d56:	3501      	addeq	r5, #1
 8008d58:	4663      	moveq	r3, ip
 8008d5a:	f023 0301 	bicne.w	r3, r3, #1
 8008d5e:	106a      	asrs	r2, r5, #1
 8008d60:	085b      	lsrs	r3, r3, #1
 8008d62:	07e9      	lsls	r1, r5, #31
 8008d64:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008d68:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008d6c:	bf48      	it	mi
 8008d6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008d72:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008d76:	461c      	mov	r4, r3
 8008d78:	e780      	b.n	8008c7c <__ieee754_sqrt+0x30>
 8008d7a:	0aca      	lsrs	r2, r1, #11
 8008d7c:	3815      	subs	r0, #21
 8008d7e:	0549      	lsls	r1, r1, #21
 8008d80:	2a00      	cmp	r2, #0
 8008d82:	d0fa      	beq.n	8008d7a <__ieee754_sqrt+0x12e>
 8008d84:	02d6      	lsls	r6, r2, #11
 8008d86:	d50a      	bpl.n	8008d9e <__ieee754_sqrt+0x152>
 8008d88:	f1c3 0420 	rsb	r4, r3, #32
 8008d8c:	fa21 f404 	lsr.w	r4, r1, r4
 8008d90:	1e5d      	subs	r5, r3, #1
 8008d92:	4099      	lsls	r1, r3
 8008d94:	4322      	orrs	r2, r4
 8008d96:	1b43      	subs	r3, r0, r5
 8008d98:	e78b      	b.n	8008cb2 <__ieee754_sqrt+0x66>
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	e7f0      	b.n	8008d80 <__ieee754_sqrt+0x134>
 8008d9e:	0052      	lsls	r2, r2, #1
 8008da0:	3301      	adds	r3, #1
 8008da2:	e7ef      	b.n	8008d84 <__ieee754_sqrt+0x138>
 8008da4:	46a0      	mov	r8, r4
 8008da6:	e7bf      	b.n	8008d28 <__ieee754_sqrt+0xdc>
 8008da8:	7ff00000 	.word	0x7ff00000

08008dac <fabs>:
 8008dac:	ec51 0b10 	vmov	r0, r1, d0
 8008db0:	ee10 2a10 	vmov	r2, s0
 8008db4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008db8:	ec43 2b10 	vmov	d0, r2, r3
 8008dbc:	4770      	bx	lr

08008dbe <finite>:
 8008dbe:	ee10 3a90 	vmov	r3, s1
 8008dc2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008dc6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008dca:	0fc0      	lsrs	r0, r0, #31
 8008dcc:	4770      	bx	lr

08008dce <matherr>:
 8008dce:	2000      	movs	r0, #0
 8008dd0:	4770      	bx	lr
 8008dd2:	0000      	movs	r0, r0
 8008dd4:	0000      	movs	r0, r0
	...

08008dd8 <nan>:
 8008dd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008de0 <nan+0x8>
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	00000000 	.word	0x00000000
 8008de4:	7ff80000 	.word	0x7ff80000

08008de8 <rint>:
 8008de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dea:	ec51 0b10 	vmov	r0, r1, d0
 8008dee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008df2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008df6:	2e13      	cmp	r6, #19
 8008df8:	460b      	mov	r3, r1
 8008dfa:	ee10 4a10 	vmov	r4, s0
 8008dfe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008e02:	dc56      	bgt.n	8008eb2 <rint+0xca>
 8008e04:	2e00      	cmp	r6, #0
 8008e06:	da2b      	bge.n	8008e60 <rint+0x78>
 8008e08:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008e0c:	4302      	orrs	r2, r0
 8008e0e:	d023      	beq.n	8008e58 <rint+0x70>
 8008e10:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008e14:	4302      	orrs	r2, r0
 8008e16:	4254      	negs	r4, r2
 8008e18:	4314      	orrs	r4, r2
 8008e1a:	0c4b      	lsrs	r3, r1, #17
 8008e1c:	0b24      	lsrs	r4, r4, #12
 8008e1e:	045b      	lsls	r3, r3, #17
 8008e20:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008e24:	ea44 0103 	orr.w	r1, r4, r3
 8008e28:	460b      	mov	r3, r1
 8008e2a:	492f      	ldr	r1, [pc, #188]	; (8008ee8 <rint+0x100>)
 8008e2c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008e30:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008e34:	4602      	mov	r2, r0
 8008e36:	4639      	mov	r1, r7
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f7f7 fa47 	bl	80002cc <__adddf3>
 8008e3e:	e9cd 0100 	strd	r0, r1, [sp]
 8008e42:	463b      	mov	r3, r7
 8008e44:	4632      	mov	r2, r6
 8008e46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e4a:	f7f7 fa3d 	bl	80002c8 <__aeabi_dsub>
 8008e4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e52:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008e56:	4639      	mov	r1, r7
 8008e58:	ec41 0b10 	vmov	d0, r0, r1
 8008e5c:	b003      	add	sp, #12
 8008e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e60:	4a22      	ldr	r2, [pc, #136]	; (8008eec <rint+0x104>)
 8008e62:	4132      	asrs	r2, r6
 8008e64:	ea01 0702 	and.w	r7, r1, r2
 8008e68:	4307      	orrs	r7, r0
 8008e6a:	d0f5      	beq.n	8008e58 <rint+0x70>
 8008e6c:	0852      	lsrs	r2, r2, #1
 8008e6e:	4011      	ands	r1, r2
 8008e70:	430c      	orrs	r4, r1
 8008e72:	d00b      	beq.n	8008e8c <rint+0xa4>
 8008e74:	ea23 0202 	bic.w	r2, r3, r2
 8008e78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e7c:	2e13      	cmp	r6, #19
 8008e7e:	fa43 f306 	asr.w	r3, r3, r6
 8008e82:	bf0c      	ite	eq
 8008e84:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008e88:	2400      	movne	r4, #0
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	4916      	ldr	r1, [pc, #88]	; (8008ee8 <rint+0x100>)
 8008e8e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008e92:	4622      	mov	r2, r4
 8008e94:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e98:	4620      	mov	r0, r4
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	f7f7 fa16 	bl	80002cc <__adddf3>
 8008ea0:	e9cd 0100 	strd	r0, r1, [sp]
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	462b      	mov	r3, r5
 8008ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eac:	f7f7 fa0c 	bl	80002c8 <__aeabi_dsub>
 8008eb0:	e7d2      	b.n	8008e58 <rint+0x70>
 8008eb2:	2e33      	cmp	r6, #51	; 0x33
 8008eb4:	dd07      	ble.n	8008ec6 <rint+0xde>
 8008eb6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008eba:	d1cd      	bne.n	8008e58 <rint+0x70>
 8008ebc:	ee10 2a10 	vmov	r2, s0
 8008ec0:	f7f7 fa04 	bl	80002cc <__adddf3>
 8008ec4:	e7c8      	b.n	8008e58 <rint+0x70>
 8008ec6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8008eca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ece:	40f2      	lsrs	r2, r6
 8008ed0:	4210      	tst	r0, r2
 8008ed2:	d0c1      	beq.n	8008e58 <rint+0x70>
 8008ed4:	0852      	lsrs	r2, r2, #1
 8008ed6:	4210      	tst	r0, r2
 8008ed8:	bf1f      	itttt	ne
 8008eda:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008ede:	ea20 0202 	bicne.w	r2, r0, r2
 8008ee2:	4134      	asrne	r4, r6
 8008ee4:	4314      	orrne	r4, r2
 8008ee6:	e7d1      	b.n	8008e8c <rint+0xa4>
 8008ee8:	080096c8 	.word	0x080096c8
 8008eec:	000fffff 	.word	0x000fffff

08008ef0 <scalbn>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	ec55 4b10 	vmov	r4, r5, d0
 8008ef6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008efa:	4606      	mov	r6, r0
 8008efc:	462b      	mov	r3, r5
 8008efe:	b9aa      	cbnz	r2, 8008f2c <scalbn+0x3c>
 8008f00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f04:	4323      	orrs	r3, r4
 8008f06:	d03b      	beq.n	8008f80 <scalbn+0x90>
 8008f08:	4b31      	ldr	r3, [pc, #196]	; (8008fd0 <scalbn+0xe0>)
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	ee10 0a10 	vmov	r0, s0
 8008f12:	f7f7 fb91 	bl	8000638 <__aeabi_dmul>
 8008f16:	4b2f      	ldr	r3, [pc, #188]	; (8008fd4 <scalbn+0xe4>)
 8008f18:	429e      	cmp	r6, r3
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	460d      	mov	r5, r1
 8008f1e:	da12      	bge.n	8008f46 <scalbn+0x56>
 8008f20:	a327      	add	r3, pc, #156	; (adr r3, 8008fc0 <scalbn+0xd0>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	f7f7 fb87 	bl	8000638 <__aeabi_dmul>
 8008f2a:	e009      	b.n	8008f40 <scalbn+0x50>
 8008f2c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008f30:	428a      	cmp	r2, r1
 8008f32:	d10c      	bne.n	8008f4e <scalbn+0x5e>
 8008f34:	ee10 2a10 	vmov	r2, s0
 8008f38:	4620      	mov	r0, r4
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	f7f7 f9c6 	bl	80002cc <__adddf3>
 8008f40:	4604      	mov	r4, r0
 8008f42:	460d      	mov	r5, r1
 8008f44:	e01c      	b.n	8008f80 <scalbn+0x90>
 8008f46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	3a36      	subs	r2, #54	; 0x36
 8008f4e:	4432      	add	r2, r6
 8008f50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008f54:	428a      	cmp	r2, r1
 8008f56:	dd0b      	ble.n	8008f70 <scalbn+0x80>
 8008f58:	ec45 4b11 	vmov	d1, r4, r5
 8008f5c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008fc8 <scalbn+0xd8>
 8008f60:	f000 f83c 	bl	8008fdc <copysign>
 8008f64:	a318      	add	r3, pc, #96	; (adr r3, 8008fc8 <scalbn+0xd8>)
 8008f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6a:	ec51 0b10 	vmov	r0, r1, d0
 8008f6e:	e7da      	b.n	8008f26 <scalbn+0x36>
 8008f70:	2a00      	cmp	r2, #0
 8008f72:	dd08      	ble.n	8008f86 <scalbn+0x96>
 8008f74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f80:	ec45 4b10 	vmov	d0, r4, r5
 8008f84:	bd70      	pop	{r4, r5, r6, pc}
 8008f86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008f8a:	da0d      	bge.n	8008fa8 <scalbn+0xb8>
 8008f8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008f90:	429e      	cmp	r6, r3
 8008f92:	ec45 4b11 	vmov	d1, r4, r5
 8008f96:	dce1      	bgt.n	8008f5c <scalbn+0x6c>
 8008f98:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008fc0 <scalbn+0xd0>
 8008f9c:	f000 f81e 	bl	8008fdc <copysign>
 8008fa0:	a307      	add	r3, pc, #28	; (adr r3, 8008fc0 <scalbn+0xd0>)
 8008fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa6:	e7e0      	b.n	8008f6a <scalbn+0x7a>
 8008fa8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fac:	3236      	adds	r2, #54	; 0x36
 8008fae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008fb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	4629      	mov	r1, r5
 8008fba:	2200      	movs	r2, #0
 8008fbc:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <scalbn+0xe8>)
 8008fbe:	e7b2      	b.n	8008f26 <scalbn+0x36>
 8008fc0:	c2f8f359 	.word	0xc2f8f359
 8008fc4:	01a56e1f 	.word	0x01a56e1f
 8008fc8:	8800759c 	.word	0x8800759c
 8008fcc:	7e37e43c 	.word	0x7e37e43c
 8008fd0:	43500000 	.word	0x43500000
 8008fd4:	ffff3cb0 	.word	0xffff3cb0
 8008fd8:	3c900000 	.word	0x3c900000

08008fdc <copysign>:
 8008fdc:	ec51 0b10 	vmov	r0, r1, d0
 8008fe0:	ee11 0a90 	vmov	r0, s3
 8008fe4:	ee10 2a10 	vmov	r2, s0
 8008fe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008fec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008ff0:	ea41 0300 	orr.w	r3, r1, r0
 8008ff4:	ec43 2b10 	vmov	d0, r2, r3
 8008ff8:	4770      	bx	lr
	...

08008ffc <_init>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	bf00      	nop
 8009000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009002:	bc08      	pop	{r3}
 8009004:	469e      	mov	lr, r3
 8009006:	4770      	bx	lr

08009008 <_fini>:
 8009008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900a:	bf00      	nop
 800900c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900e:	bc08      	pop	{r3}
 8009010:	469e      	mov	lr, r3
 8009012:	4770      	bx	lr
